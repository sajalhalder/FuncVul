{"cve":"CVE-2019-19333","code_chunks":["        }","        break;","        assert(module);","        mainmod = lys_main_module(module);","","        \/* check feature name uniqueness*\/","        \/* check features in the current module *\/"],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["","memset(&paddedSalt[1], '$', maxSaltLength - 1);","memcpy(paddedSalt, salt, std::min(maxSaltLength, saltLen));","paddedSalt[saltLen] = '\\0';","","if (php_crypt_blowfish_rn(key, paddedSalt, output, sizeof(output))) {","return strdup(output);"],"label":1}
{"cve":"CVE-2023-28101","code_chunks":["","  va_end (ap);","","  g_ptr_array_add (args, NULL);","  argv = (GStrv) g_ptr_array_free (g_steal_pointer (&args), FALSE);","","  oc = g_option_context_new (\"\");"],"label":0}
{"cve":"CVE-2021-33910","code_chunks":["        path_simplify(p, false);","","        if (empty_or_root(p))","                s = strdup(\"-\");","        else {","                if (!path_is_normalized(p))","                        return -EINVAL;"],"label":0}
{"cve":"PYSEC-2022-91","code_chunks":["int64_t TensorByteSize(const TensorProto& t) {","int64_t num_elems = PartialTensorShape(t.tensor_shape()).num_elements();","return num_elems < 0 ? -1 : num_elems * DataTypeSize(t.dtype());","}"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","  TF_LITE_ENSURE_EQ(context, node->inputs->size, 1);","  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);","","  const TfLiteTensor* input_resource_id_tensor;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputVariableId,","                                          &input_resource_id_tensor));"],"label":0}
{"cve":"CVE-2018-8796","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;"],"label":1}
{"cve":"CVE-2020-11097","code_chunks":["","return AvId;","}","","ULONG ntlm_av_pair_list_length(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList)"],"label":1}
{"cve":"CVE-2022-0695","code_chunks":["","\taddr->paddr = (psxheader.pc0 - psxheader.t_addr) + PSXEXE_TEXTSECTION_OFFSET;","\taddr->vaddr = psxheader.pc0;","","\tr_list_append (ret, addr);","\treturn ret;","}"],"label":0}
{"cve":"CVE-2022-29694","code_chunks":["}","","","QLIST_REMOVE(block, next);","uc->ram_list.mru_block = NULL;","\/* Write list before version *\/","reclaim_ramblock(uc, block);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp54_write_bin(uint8_t *bin, int len, const fp54_t a, int pack);"],"label":1}
{"cve":"CVE-2022-28927","code_chunks":["","for(const RegexMatchConfig &x : emoji_array)","{","if(!x.Script.empty())","{","std::string result;","script_safe_runner(ext.js_runtime, ext.js_context, [&](qjs::Context &ctx)"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["GetTemporary(context, node, kBwCellStateQuantized);","bw_cell_state_quantized->type = fw_input_to_output_weights->type;","bw_cell_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(bw_cell_state_quantized->dims,"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["int fit_verify_header(unsigned char *ptr, int image_size,","struct image_tool_params *params)","{","if (fdt_check_header(ptr) != EXIT_SUCCESS || !fit_check_format(ptr))","return EXIT_FAILURE;","","return EXIT_SUCCESS;"],"label":1}
{"cve":"CVE-2017-11142","code_chunks":["\t\tklen = ksep - var->ptr;","\t\tvlen = vsep - ++ksep;","\t} else {","\t\tksep = \"\";","\t\t\/* \"foo&\" *\/","\t\tklen = vsep - var->ptr;","\t\tvlen = 0;"],"label":0}
{"cve":"CVE-2016-10012","code_chunks":["\/* Used to share zlib space across processes *\/","if (options.compression) {","mon->m_zback = mm_create(NULL, MM_MEMSIZE);","mon->m_zlib = mm_create(mon->m_zback, 20 * MM_MEMSIZE);","","\/* Compression needs to share state across borders *\/"],"label":1}
{"cve":"CVE-2021-39191","code_chunks":["*err_str = apr_pstrdup(r->pool, \"Malformed URL\");","*err_desc = apr_psprintf(r->pool,","\"No hostname was parsed and starting with '\/\\\\': %s\", url);","oidc_error(r, \"%s: %s\", *err_str, *err_desc);","return FALSE;","}"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["    if (auid) *auid = auth_ticket_info.ticket.auid;","  }","","  return isvalid;","}","",""],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["const void\t*data;","size_t\t\tsize;","char\t\t*err_msg = \"\";","","if (strchr(name, '@')) {","\/*"],"label":0}
{"cve":"CVE-2023-23082","code_chunks":["if (ByteCount > 4)","{","unsigned OffsetVal = (unsigned)Get32(DirEntry+8, m_MotorolaOrder);","if (OffsetVal+ByteCount > ExifLength)","{","ErrNonfatal(\"Illegal value pointer for tag %04x\", Tag,0);","continue;"],"label":1}
{"cve":"CVE-2017-9144","code_chunks":["          if (opcode & 0x40)","            {","              operand=ReadBlobLSBSignedShort(image);","              if (opcode == EOF)","                ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");","            }","          pixel=(unsigned char) ReadBlobByte(image);"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["| '{' [dictmaker] '}' | '`' testlist '`' | NAME | NUMBER | STRING+","*\/","node *ch = CHILD(n, 0);","","switch (TYPE(ch)) {","case NAME: {","\/* All names start in Load context, but may later be"],"label":1}
{"cve":"CVE-2022-29226","code_chunks":["            if (config_->redirectPathMatcher().match(state_url.pathAndQueryParams())) {","        sendUnauthorizedResponse();","        return Http::FilterHeadersStatus::StopIteration;","      }","      Http::ResponseHeaderMapPtr response_headers{","          Http::createHeaderMap<Http::ResponseHeaderMapImpl>(","              {{Http::Headers::get().Status, std::to_string(enumToInt(Http::Code::Found))},"],"label":0}
{"cve":"CVE-2021-22548","code_chunks":["if (sgx_params->input) {","untrusted_cache->Free(const_cast<void *>(sgx_params->input));","}","if (!TrustedPrimitives::IsOutsideEnclave(sgx_params->output,","sgx_params->output_size)) {"],"label":1}
{"cve":"CVE-2019-3556","code_chunks":["","","transport->sendString(\"OK\\n\");","Process::GetMemoryInfo(newInfo);","Logger::FInfo(\"free\/cached\/buffer {}\/{}\/{} -> {}\/{}\/{}\",","info.freeMb, info.cachedMb, info.buffersMb,"],"label":1}
{"cve":"CVE-2020-9434","code_chunks":["      else","        lua_pushnil(L);","      return 3;","    }","    return openssl_pushresult(L, len);","  }","  else"],"label":0}
{"cve":"CVE-2022-29777","code_chunks":["int nChar = 0;","","unsigned char *sBuffer = NULL;","int nBufLen = 0;","","while ( nBlockType != PFB_DONE )","{"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  const TfLiteTensor* scores;","  switch (input_class_predictions->type) {","    case kTfLiteUInt8: {","      TfLiteTensor* temporary_scores = &context->tensors[op_data->scores_index];","      DequantizeClassPredictions(input_class_predictions, num_boxes,","                                 num_classes_with_background, temporary_scores);","      scores = temporary_scores;"],"label":0}
{"cve":"CVE-2022-1199","code_chunks":["\t\t\terr = -EWOULDBLOCK;","\t\t\tbreak;","\t\t}","\t\tif (!signal_pending(current)) {","\t\t\trelease_sock(sk);","\t\t\tschedule();","\t\t\tlock_sock(sk);"],"label":0}
{"cve":"CVE-2020-28097","code_chunks":["oldo = c->vc_origin;","delta = lines * c->vc_size_row;","if (dir == SM_UP) {","vgacon_scrollback_update(c, t, lines);","if (c->vc_scr_end + delta >= vga_vram_end) {","scr_memcpyw((u16 *) vga_vram_base,","(u16 *) (oldo + delta),"],"label":1}
{"cve":"CVE-2018-14498","code_chunks":["      else","        ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);","    }","    break;","","  case '6':                     \/* it's a raw-format PPM file *\/","    if (cinfo->in_color_space == JCS_UNKNOWN)"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["filter->dims->data[affine_quantization->quantized_dimension]);","}"],"label":0}
{"cve":"CVE-2020-5310","code_chunks":["","row_byte_size = (tile_width * state->bits + 7) \/ 8;","state->bytes = row_byte_size * tile_length;","","\/* overflow check for malloc *\/","if (state->bytes > INT_MAX - 1) {"],"label":1}
{"cve":"CVE-2018-14017","code_chunks":["\t\t}","\t} else {","\t\teprintf (\"r_bin_java_read_next_attr_from_buffer: Cannot find type_info for %s\\n\", name);","\t}","\tfree (name);","\treturn attr;","}"],"label":0}
{"cve":"CVE-2022-47934","code_chunks":["}","","TEST_F(IPFSRedirectNetworkDelegateHelperTest, TranslateIPFSURIIPFSScheme) {","  auto brave_request_info = std::make_shared<brave::BraveRequestInfo>(url);","  brave_request_info->browser_context = profile();","  brave_request_info->ipfs_gateway_url = GetPublicGateway();","  brave_request_info->initiator_url = ipfs::GetIPFSGatewayURL("],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["      reference_ops::Reverse<uint8_t>(","          axis, GetTensorShape(input), GetTensorData<uint8_t>(input),","          GetTensorShape(output), GetTensorData<uint8_t>(output));","      break;","    }","    case kTfLiteInt16: {","      reference_ops::Reverse<int16_t>("],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["}","","for_ch = CHILD(n, 1 + is_async);","t = ast_for_exprlist(c, for_ch, Store);","if (!t)","return NULL;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["comp->ifs = ifs;","}","asdl_seq_SET(comps, i, comp);","}","return comps;","}"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"args\\\" missing from arguments\");","return 1;","}"],"label":1}
{"cve":"CVE-2020-15945","code_chunks":["const Instruction *oldpc;  \/* last pc traced *\/"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["if (srtp->probation_cnt > 0 &&","(err == srtp_err_status_replay_old ||","err == srtp_err_status_replay_fail))","{","\/* Handle such condition that stream is updated (RTP seq is reinited","* & SRTP is restarted), but some old packets are still coming"],"label":1}
{"cve":"CVE-2016-4562","code_chunks":["const PrimitiveInfo *primitive_info)","{","typedef struct _LineSegment","{","double","p,"],"label":0}
{"cve":"CVE-2023-52076","code_chunks":["    epubinfo->fields_mask = EV_DOCUMENT_INFO_TITLE |","                EV_DOCUMENT_INFO_FORMAT |","                EV_DOCUMENT_INFO_AUTHOR |","                EV_DOCUMENT_INFO_SUBJECT |","                EV_DOCUMENT_INFO_KEYWORDS |","                EV_DOCUMENT_INFO_LAYOUT |","                EV_DOCUMENT_INFO_CREATOR |"],"label":0}
{"cve":"CVE-2024-23638","code_chunks":["","    if (io.flag) {","        debugs(33, 2, \"bailing after a write failure: \" << xstrerr(io.xerrno));","        LogTagsErrors lte;","        lte.timedout = io.xerrno == ETIMEDOUT;","        lte.aborted = !lte.timedout;         terminateAll(Error(ERR_WRITE_ERROR, SysErrorDetail::NewIfAny(io.xerrno)), lte);","        return;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["zero_points_size));","}","node->temporaries->data[5] = op_data->scratch_tensor_index + 5;","TfLiteTensor* row_sums = GetTemporary(context, node, \/*index=*\/5);","row_sums->type = kTfLiteInt32;","row_sums->allocation_type = kTfLiteArenaRwPersistent;","int row_sums_dims[2] = {2, num_units};"],"label":1}
{"cve":"CVE-2019-3556","code_chunks":["","auto buf = PasswdBuffer{};","struct passwd *pw;","if (getpwnam_r(uname.c_str(), &buf.ent, buf.data.get(), buf.size, &pw)) {","return;"],"label":1}
{"cve":"CVE-2016-10190","code_chunks":["{","    HTTPContext *s = h->priv_data;","    int len;","    \/* read bytes from input buffer first *\/","    len = s->buf_end - s->buf_ptr;","    if (len > 0) {","        if (len > size)"],"label":0}
{"cve":"CVE-2022-23608","code_chunks":["\/* If dialog list is empty, remove the dialog set from the hash table. *\/","if (pj_list_empty(&dlg_set->dlg_list)) {","pj_hash_set_lower(NULL, mod_ua.dlg_table, dlg->local.info->tag.ptr,","(unsigned)dlg->local.info->tag.slen,","dlg->local.tag_hval, NULL);",""],"label":1}
{"cve":"CVE-2022-24949","code_chunks":["sourceDestination[1].find_first_not_of(\"0123456789-\") !=","string::npos) {","PortForwardSourceRequest pfsr;","pfsr.mutable_source()->set_name(sourceDestination[0]);","pfsr.mutable_destination()->set_name(sourceDestination[1]);","pfsrs.push_back(pfsr);","} else if (sourceDestination[0].find('-') != string::npos &&"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"keys\\\" missing from Dict\");","            return 1;","        }","        else {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  const int batch_size = SizeOfDimension(inputs, 1);","  const int num_classes = SizeOfDimension(inputs, 2);","","  const int beam_width = option->beam_width;","  const int top_paths = option->top_paths;","  const bool merge_repeated = option->merge_repeated;",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["        context, GetTemporarySafe(context, node, kFwRowSums, &fw_row_sums));","    fw_row_sums->type = kTfLiteInt32;","    fw_row_sums->allocation_type = kTfLiteArenaRwPersistent;","    int fw_row_sums_dims[2] = {fw_row_sums_rows, n_fw_cell};","    if (!TfLiteIntArrayEqualsArray(fw_row_sums->dims, 2, fw_row_sums_dims)) {","      TfLiteIntArray* fw_hybrid_scratch_size = TfLiteIntArrayCreate(2);","      fw_hybrid_scratch_size->data[0] = fw_row_sums_dims[0];"],"label":0}
{"cve":"CVE-2023-30847","code_chunks":["*method = h2o_strdup(&req->pool, req->method.base, req->method.len);","","\/* url *\/","h2o_url_init(url, origin->scheme, req->authority, h2o_strdup(&req->pool, req->path.base, req->path.len));","","if (props->connection_header != NULL) {","if (upgrade_to != NULL && upgrade_to != h2o_httpclient_upgrade_to_connect) {"],"label":1}
{"cve":"CVE-2022-4603","code_chunks":["c ^= 0x20;","pkt->esc = 0;","}","pkt->buf[pkt->cnt++] = c;","break;","}","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["return encoding;","}","","char *","Ta3Tokenizer_FindEncoding(int fd)","{"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* input_weights;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","const TfLiteTensor* recurrent_weights;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output = GetOutput(context, node, 0);","DynamicBuffer buf;","StringRef str_ref = GetString(input, 0);","buf.AddString(str_ref);","buf.WriteToTensorAsVector(output);"],"label":1}
{"cve":"CVE-2021-24037","code_chunks":["StringView valueAsStringPrintable =","StringPrimitive::createStringView(runtime, valueAsString);","","SmallU16String<32> tmp;","return runtime->raiseTypeError(","TwineChar16(\"Cannot create property '\") + propName + \"' on \" +"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["\tfor (i = 0; i < check_vector.nr; i++)","\t\tif (check_vector.checks[i] == check)","\t\t\tbreak;","","\tif (i >= check_vector.nr)","\t\tBUG(\"no entry found\");",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params =","reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);","","int32_t* out_buf = GetOutput(context, node, 0)->data.i32;"],"label":1}
{"cve":"CVE-2018-14352","code_chunks":["\/* save room for trailing quote-char *\/","dlen -= 2;","","for (; *s && dlen; s++)","{","if (strchr(quote, *s))"],"label":1}
{"cve":"CVE-2023-6546","code_chunks":["\t\t\t\t       struct gsm_config_ext *ce)","{","\tmemset(ce, 0, sizeof(*ce));","\tce->wait_config = gsm->wait_config ? 1 : 0;","\tce->keep_alive = gsm->keep_alive;","}",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2023-22741","code_chunks":["len = msg->stun_hdr.msg_len;","p = msg->enc_buf.data + 20;","msg->stun_attr = NULL;","while (len > 0) {","i = stun_parse_attribute(msg, p);"],"label":1}
{"cve":"CVE-2021-30022","code_chunks":["\ts32 field_poc[2] = { 0,0 };","\ts32 max_frame_num;","","\tif (!si->sps) return;","","\tmax_frame_num = 1 << (si->sps->log2_max_frame_num);",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;"],"label":1}
{"cve":"CVE-2016-8690","code_chunks":["\t\t\tbreak;","\t\t}","\t\tv >>= 8;","\t}","\tif (val) {","\t\t*val = v;","\t}"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["BYTE entropyBits;","\/* TS_RFX_ICAP *\/","Stream_Read_UINT16(s, version);      \/* version (2 bytes) *\/","Stream_Read_UINT16(s, tileSize);     \/* tileSize (2 bytes) *\/","Stream_Read_UINT8(s, codecFlags);    \/* flags (1 byte) *\/","Stream_Read_UINT8(s, colConvBits);   \/* colConvBits (1 byte) *\/"],"label":1}
{"cve":"CVE-2016-10156","code_chunks":["dual_timestamp_get(&t->last_trigger);","","if (t->stamp_path)","touch_file(t->stamp_path, true, t->last_trigger.realtime, UID_INVALID, GID_INVALID, 0);","","timer_set_state(t, TIMER_RUNNING);","return;"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["if (i) {","int64_t seconds_64bit = (int64_t)i - JAN_1970;","time_t seconds;","struct tm *tm;","char time_buf[128];","","seconds = (time_t)seconds_64bit;"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["CudnnTensorDescriptor src_desc(input_split, cudnn_input_type);","CudnnTensorDescriptor dest_desc(output_split, cudnn_output_type);","","void* input_data_ptr = static_cast<char*>(input_data.opaque()) +","splits[i].input_offset_in_bytes;","void* output_data_ptr = static_cast<char*>(output_data.opaque()) +"],"label":1}
{"cve":"CVE-2022-29694","code_chunks":["MemoryRegion *ram = g_new(MemoryRegion, 1);","","memory_region_init_ram(uc, ram, size, perms);","if (ram->addr == -1) {","return NULL;","}",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["      RuntimeShape::ExtendedShape(output_rank, GetTensorShape(lhs_data));","  const RuntimeShape extended_rhs_shape =","      RuntimeShape::ExtendedShape(output_rank, GetTensorShape(rhs_data));","","    for (int i = 0; i < output_rank - 2; ++i) {","    const int lhs_dim = extended_lhs_shape.Dims(i);","    const int rhs_dim = extended_rhs_shape.Dims(i);"],"label":0}
{"cve":"CVE-2018-12559","code_chunks":["    checkSaveable();","}","","void RemoteDevicePropertiesWidget::setType()","{","    if (Type_SshFs==type->itemData(type->currentIndex()).toInt() && 0==sshPort->value()) {","        sshPort->setValue(22);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ed_mul_sim_joint(ed_t r, const ed_t p, const bn_t k, const ed_t q,","const bn_t m) {","ed_t t[5];","int i, l, u_i, offset;","int8_t jsf[2 * (RLC_FP_BITS + 1)];","","if (bn_is_zero(k) || ed_is_infty(p)) {"],"label":1}
{"cve":"CVE-2020-11058","code_chunks":["{","WINPR_UNUSED(settings);","if (length > 5)","Stream_Seek_UINT16(s); \/* fontSupportFlags (2 bytes) *\/","","if (length > 7)"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);","  TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);","","  const TfLiteTensor* value;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &value));","  TF_LITE_ENSURE(context, NumDimensions(value) >= 2);",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","auto* first_new_tensor = static_cast<int*>(node->user_data);","","const TfLiteTensor* tensor0 = GetInput(context, node, 0);","TfLiteTensor* tensor1 = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2022-39318","code_chunks":["BOOL NoAck, const BYTE* packetDescriptorData,","UINT32 NumberOfPackets, UINT32 BufferSize, const BYTE* Buffer,","t_isoch_transfer_cb cb, UINT32 Timeout)","{","UINT32 iso_packet_size;","UDEVICE* pdev = (UDEVICE*)idev;","ASYNC_TRANSFER_USER_DATA* user_data;"],"label":0}
{"cve":"CVE-2023-46728","code_chunks":["i ? (1 << (i - 1)) + 1 : 1,","1 << i,","stats.gopher_read_hist[i],","Math::doublePercent(stats.gopher_read_hist[i], stats.gopher_reads));","}",""],"label":1}
{"cve":"CVE-2022-1795","code_chunks":["\tif (e) return e;","\tif (gf_sg_vrml_is_sf_field(field.fieldType)) return GF_NON_COMPLIANT_BITSTREAM;","","\tmemcpy(&sffield, &field, sizeof(GF_FieldInfo));","\tsffield.fieldType = gf_sg_vrml_get_sf_type(field.fieldType);","","\t\/*rescale the MFField and parse the SFField*\/"],"label":0}
{"cve":"CVE-2019-17534","code_chunks":["","\tfor( y = 0; y < r->height; y++ ) {","\t\t\/* The page for this output line, and the line number in page.","\t\t *\/","\t\tint page = (r->top + y) \/ gif->file->SHeight + gif->page;","\t\tint line = (r->top + y) % gif->file->SHeight;",""],"label":0}
{"cve":"CVE-2022-0695","code_chunks":["return NULL;","}","","if (r_buf_fread_at (bf->buf, 0, (ut8*)&psxheader, \"8c17i\", 1) < sizeof (psxexe_header)) {","eprintf (\"PSXEXE Header truncated\\n\");","r_list_free (ret);","free (addr);"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["s.SetPayload(CoordinationErrorPayloadKey(), \"\");"],"label":1}
{"cve":"CVE-2016-4563","code_chunks":["          dot_product=(box_q[4].x-box_p[4].x)*(box_q[4].x-box_p[4].x)+","            (box_q[4].y-box_p[4].y)*(box_q[4].y-box_p[4].y);","          if (dot_product <= miterlimit)","            {","              path_q[q++]=box_q[4];","              path_p[p++]=box_p[4];","            }"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["    node->temporaries->data[kFwScratchBuffer] =","      op_data->scratch_tensor_index + kFwScratchBuffer;","  TfLiteTensor* fw_scratch_buffer;","  TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, kFwScratchBuffer,","                                              &fw_scratch_buffer));","  fw_scratch_buffer->type = input->type;","  fw_scratch_buffer->allocation_type = kTfLiteArenaRw;"],"label":0}
{"cve":"CVE-2023-22742","code_chunks":["LIBSSH2_SESSION *session,","LIBSSH2_KNOWNHOSTS *known_hosts,","git_transport_certificate_check_cb check_cb,","void *check_cb_payload,","const char *host,","int port)"],"label":0}
{"cve":"CVE-2021-42782","code_chunks":["\t\t}","\t\tfp++;","","\t\t\/* Use the same directory as used for other OpenSC cached items *\/","\t\tr = sc_get_cache_dir(card->ctx, filename, sizeof(filename) - strlen(fp) - 2);","\t\tif (r != SC_SUCCESS)","\t\t\tgoto err;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int bn_get_bit(const bn_t a, int bit) {","int d;","","if (bit < 0) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["    expr_ty optional_vars;","","    if (_PyObject_LookupAttrId(obj, &PyId_context_expr, &tmp) < 0) {","        return 1;","    }","    if (tmp == NULL) {","        PyErr_SetString(PyExc_TypeError, \"required field \\\"context_expr\\\" missing from withitem\");"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["tmp = _PyObject_GetAttrId(obj, &PyId_names);","if (tmp == NULL) goto failed;","if (!PyList_Check(tmp)) {","PyErr_Format(PyExc_TypeError, \"Global field \\\"names\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","goto failed;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["fp_mul(t[i], t[i - 1], r);","}","","fp_set_dig(r, 1);","l = RLC_FP_BITS + 1;","bn_rec_slw(win, &l, b, FP_WIDTH);"],"label":1}
{"cve":"CVE-2024-23325","code_chunks":["      } else {","        subject_alt_names.push_back(generalNameAsString(san));","      }","    }","  }","  return subject_alt_names;","}"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["}","","int is_utf8(const char *text)","{","while (*text) {","if (*text == '\\n' || *text == '\\t' || *text == '\\r') {"],"label":0}
{"cve":"CVE-2022-3016","code_chunks":["","    switch (eap->cmdidx)","    {","\tcase CMD_helpgrep:  au_name = (char_u *)\"helpgrep\"; break;","\tcase CMD_lhelpgrep: au_name = (char_u *)\"lhelpgrep\"; break;","\tdefault: break;","    }"],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["todo[i]   = isix++;","todo[i+1] = buffer >> (14-i)*5;","}","for (i=0; i < 16; i+=2)"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* in_tensor = GetInput(context, node, 0);","TfLiteTensor* out_tensor = GetOutput(context, node, 0);","TfLiteIntArray* new_size = TfLiteIntArrayCopy(in_tensor->dims);","return context->ResizeTensor(context, out_tensor, new_size);","};"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\tbn_new(k1);","\t\tep_new(q);","\t\tfor (i = 0; i < (1 << (EP_WIDTH - 2)); i++) {","\t\t\tep_null(t[i]);","\t\t\tep_new(t[i]);","\t\t}","\t\tfor (i = 0; i < 3; i++) {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["int compile_mode = -1;","int is_ast;","PyCompilerFlags cf;","int start[] = {Py_file_input, Py_eval_input, Py_single_input};"],"label":1}
{"cve":"CVE-2020-15473","code_chunks":["opcode == P_CONTROL_HARD_RESET_CLIENT_V2)) {","if(check_pkid_and_detect_hmac_size(ovpn_payload) > 0) {","memcpy(flow->ovpn_session_id, ovpn_payload+1, 8);","","NDPI_LOG_DBG2(ndpi_struct,","\"session key: %02x%02x%02x%02x%02x%02x%02x%02x\\n\","],"label":1}
{"cve":"CVE-2021-32439","code_chunks":["GF_Err stbl_AppendSize(GF_SampleTableBox *stbl, u32 size, u32 nb_pack)","{","u32 i;","CHECK_PACK(GF_ISOM_INVALID_FILE)","","if (!stbl->SampleSize->sampleCount) {","stbl->SampleSize->sampleSize = size;"],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["const char                  *commit,","GFile                       *sideload_path,","GBytes                      *metadata,","GBytes                      *old_metadata)","{","g_debug (\"marking op %s:%s resolved to %s\", kind_to_str (op->kind), flatpak_decomposed_get_ref (op->ref), commit ? commit : \"-\");",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2018-11380","code_chunks":["bprintf (\"mach0-get-symbols: error\\n\");","break;","}","if (parse_import_stub(bin, &symbols[j], i))","symbols[j++].last = 0;","}",""],"label":1}
{"cve":"PYSEC-2021-566","code_chunks":["        ctx, batch_size != 0,","        errors::InvalidArgument(","            \"Inner size of indices would result in batch_size of 0 and a \",","            \"division by 0 in the implementation. This is illegal\"));","","    auto indices_flat = indices->flat<Index>();","    int64_t const index_inner_size = indices->NumElements() \/ batch_size;"],"label":0}
{"cve":"CVE-2017-1000249","code_chunks":["\t * doesn't include the terminating null in the","\t * name....","\t *\/","\tif ((namesz == 4 && strncmp((char *)&nbuf[noff], \"CORE\", 4) == 0) ||","\t    (namesz == 5 && strcmp((char *)&nbuf[noff], \"CORE\") == 0)) {","\t\tos_style = OS_STYLE_SVR4;","\t} "],"label":0}
{"cve":"CVE-2018-5810","code_chunks":["gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,255);","else","gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,65535);","fseek (ifp, data_offset, SEEK_SET);"],"label":1}
{"cve":"CVE-2021-38160","code_chunks":["* close it.  The devices are at","*   \/dev\/vport<device number>p<port number>","*\/","static const struct file_operations port_fops = {",".owner = THIS_MODULE,",".open  = port_fops_open,"],"label":1}
{"cve":"CVE-2019-12816","code_chunks":["sRetMsg =","t_f(\"Module names can only contain letters, numbers and \"","\"underscores, [{1}] is invalid\")(sModule);","return nullptr;","}","}"],"label":1}
{"cve":"CVE-2023-4720","code_chunks":["\t\tif (bitsize < read->size*8) {","\t\t\tswf_get_colormatrix(read, &cmat);","\t\t\thas_cmat = 1;","\t\t\tswf_align(read);","\t\t}","\t}","\t\/*SWF 3.0*\/"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {","return 1;"],"label":1}
{"cve":"CVE-2018-14357","code_chunks":["void imap_quote_string(char *dest, size_t dlen, const char *src);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 fontSupportFlags = 0;","UINT16 pad2Octets = 0;","WLog_INFO(TAG, \"FontCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length > 4)","Stream_Read_UINT16(s, fontSupportFlags); \/* fontSupportFlags (2 bytes) *\/"],"label":1}
{"cve":"CVE-2018-8798","code_chunks":["uint32 length;","struct stream packet = *s;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","","if (!s_check_rem(s, length))"],"label":0}
{"cve":"CVE-2019-15166","code_chunks":["tlen-=lmp_obj_len;","}","return;","ND_PRINT((ndo, \"\\n\\t\\t packet exceeded snapshot\"));","}","\/*","* c-style: whitesmith"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensorCondition,","&input_condition));","const TfLiteTensor* input_x;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorX, &input_x));","const TfLiteTensor* input_y;"],"label":0}
{"cve":"CVE-2018-10528","code_chunks":["x3f_property_t *P = PL->property_table.element;","for (i=0; i<PL->num_properties; i++) {","char name[100], value[100];","utf2char(P[i].name,name);","utf2char(P[i].value,value);","if (!strcmp (name, \"ISO\"))"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["}","","int cmp_len = s1_len - offset;","if (cmp_len < s2_len) cmp_len = s2_len;","if (cmp_len > length) cmp_len = length;",""],"label":1}
{"cve":"CVE-2018-8098","code_chunks":["size_t suffix_len = strlen(path_ptr + varint_len);","size_t path_len;","","if (varint_len == 0)","return index_error_invalid(\"incorrect prefix length\");",""],"label":1}
{"cve":"CVE-2023-47100","code_chunks":["* separates two digits *\/","if (cur == '_') {","if (    stricter","&& (     i == 0 || (int) i == equals_pos || i == name_len- 1","|| ! isDIGIT_A(name[i-1]) || ! isDIGIT_A(name[i+1])))","{","lookup_name[j++] = '_';"],"label":1}
{"cve":"CVE-2020-15121","code_chunks":["\tFD_ZERO (&read_fds);","\tFD_SET (s->fd, &read_fds);","","\tFD_ZERO (&except_fds);","\tFD_SET (s->fd, &except_fds);","","\tstruct timeval t = {timeout, 0};"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["        expr_ty type;","        identifier name;","        asdl_seq* body;","","        if (_PyObject_LookupAttrId(obj, &PyId_type, &tmp) < 0) {","            return 1;","        }"],"label":0}
{"cve":"CVE-2017-9142","code_chunks":["if (memcmp(type,mng_JHDR,4) == 0)","{","if (length == 16)","{","jng_width=(size_t) ((p[0] << 24) | (p[1] << 16) |","(p[2] << 8) | p[3]);"],"label":1}
{"cve":"CVE-2021-43848","code_chunks":["static int handle_input_expect_data_payload(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src,","const uint8_t *src_end, const char **err_desc)","{","size_t bytes_avail = src_end - *src;",""],"label":1}
{"cve":"CVE-2022-3016","code_chunks":["int\t\terrornr,","int\t\tforceit,","int\t\tnewwin)","{","qf_list_T\t\t*qfl;","qfline_T\t\t*qf_ptr;","qfline_T\t\t*old_qf_ptr;"],"label":0}
{"cve":"CVE-2020-15121","code_chunks":["\t\t\t\t*rlen = len;","\t\t\t}","\t\t}","\t\treturn res;","\t}","\tfree (curl_env);","#if __WINDOWS__"],"label":0}
{"cve":"CVE-2020-15121","code_chunks":["char buffer[1024], *outputptr = NULL;","char *inputptr = (char *)input;","int pid, bytes = 0, status;","int sh_in[2], sh_out[2], sh_err[2];","","if (len) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* fw_input_gate_bias =","GetOptionalInputTensor(context, node, kFwInputGateBiasTensor);","const TfLiteTensor* fw_forget_gate_bias =","GetInput(context, node, kFwForgetGateBiasTensor);","const TfLiteTensor* fw_cell_gate_bias =","GetInput(context, node, kFwCellGateBiasTensor);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["                                         TfLiteNode* node, OpData* op_data) {","    const TfLiteTensor* input_box_encodings;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensorBoxEncodings,","                                 &input_box_encodings));","  const TfLiteTensor* input_class_predictions;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2018-10887","code_chunks":["","if (base_len < off + len || res_sz < len)","goto fail;","memcpy(res_dp, base + off, len);","res_dp += len;","res_sz -= len;"],"label":1}
{"cve":"PYSEC-2020-329","code_chunks":["  TF_LITE_ENSURE(context,","                 data->type == kTfLiteInt32 || data->type == kTfLiteFloat32);","  TF_LITE_ENSURE_EQ(context, segment_ids->type, kTfLiteInt32);","","  if (!IsConstantTensor(data) || !IsConstantTensor(segment_ids)) {","    SetTensorToDynamic(output);","    return kTfLiteOk;"],"label":0}
{"cve":"CVE-2016-2324","code_chunks":["static void finish_object(struct object *obj,","struct strbuf *path, const char *name,","void *cb_data)","{","struct rev_list_info *info = cb_data;","if (obj->type == OBJ_BLOB && !has_object_file(&obj->oid))"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static int log_radix(int radix) {","int l = 0;","","while (radix > 0) {"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["                }","                else if (found_default) {","                    ast_error(c, n,","                             \"non-default argument follows default argument\");","                    return NULL;","                }","                arg = ast_for_arg(c, ch);"],"label":0}
{"cve":"CVE-2021-32494","code_chunks":["if (!obj->chained_starts[i]) {","continue;","}","ut64 page_size = obj->chained_starts[i]->page_size;","ut64 start = obj->segs[i].fileoff;","ut64 end = start + obj->segs[i].filesize;","if (end >= off && start <= eob) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["reinterpret_cast<TfLiteLocalResponseNormParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","{","node->temporaries->data[1] = op_data->scratch_tensor_index + 1;","TfLiteTensor* scratch_buffer = GetTemporary(context, node, \/*index=*\/1);","const TfLiteTensor* rhs = op_context->rhs;","int rhs_rank = NumDimensions(rhs);","TfLiteIntArray* scratch_buffer_size = TfLiteIntArrayCreate(rhs_rank);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["        } else {","          scratch_tensor->type = kTfLiteInt16;","        }","        scratch_tensor->allocation_type = kTfLiteArenaRw;","        const int scratch_dimension[2] = {n_batch, n_cell};","        if (!TfLiteIntArrayEqualsArray(scratch_tensor->dims, 2,","                                       scratch_dimension)) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","const int num_elements = NumElements(input);","switch (input->type) {","memset(GetTensorData<int64_t>(output), 0, num_elements * sizeof(int64_t));"],"label":1}
{"cve":"CVE-2018-20177","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","isinstance = PyObject_IsInstance(obj, (PyObject*)UnaryOp_type);","if (isinstance == -1) {","return 1;","}","if (isinstance) {"],"label":1}
{"cve":"CVE-2022-24754","code_chunks":["","","\/*"," * Add authentication challenge headers to the outgoing response in tdata. "," * Application may specify its customized nonce and opaque for the challenge, "," * or can leave the value to NULL to make the function fills them in with "," * random characters."],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t}","\t\tRLC_CATCH_ANY {","\t\t\tRLC_THROW(ERR_CAUGHT);","\t\t}","\t\tRLC_FINALLY {","\t\t\tfor (size_t i = 0; i < w; i++) {","\t\t\t\tfp24_free(u[i]);"],"label":0}
{"cve":"CVE-2022-28073","code_chunks":["R_API bool r_reg_set_value(RReg *reg, RRegItem *item, ut64 value) {","ut8 bytes[12];","ut8 *src = bytes;","r_return_val_if_fail (reg && item, false);","","if (r_reg_is_readonly (reg, item)) {","return true;"],"label":1}
{"cve":"CVE-2020-35535","code_chunks":["FORC3 icWBCCTC[WBCTC_count][c + 1] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);","icWBCCTC[WBCTC_count][4] = icWBCCTC[WBCTC_count][2];","WBCTC_count++;","} else {"],"label":1}
{"cve":"CVE-2019-11072","code_chunks":["}","if (qs >= 0) {","memmove(s+j, s+qs, blen - qs);","j += blen - qs;","}","buffer_string_set_length(b, j);"],"label":1}
{"cve":"CVE-2018-9336","code_chunks":["set_interface_metric(interface_data->index, AF_INET6,","interface_data->metric_v6);","}","break;","}",""],"label":1}
{"cve":"CVE-2016-6912","code_chunks":["if (out == NULL) {","return;","}","_gdImageWebpCtx(im, out, -1);","out->gd_free(out);","}",""],"label":0}
{"cve":"CVE-2020-1899","code_chunks":["const char* p = m_buf;","assertx(p <= m_end);","int total = 0;","if (*p == 'S') {","total = 2 + 8 + 1;","if (p + total > m_end) return false;","p++;"],"label":1}
{"cve":"CVE-2022-1035","code_chunks":["\t\t\tgf_fprintf(sdump->trace, \"}\\n\");","\t\t} else {","\t\t\tgf_fprintf(sdump->trace, \"<\/ProtoDeclare>\\n\");","\t\t}","\t}","\tsdump->current_proto = prev_proto;","\treturn GF_OK;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\tRLC_FREE(t);","\t\tRLC_THROW(ERR_NO_MEMORY);","\t\treturn;","\t}","","\t\/* d = ceil(kLen\/hLen). *\/","\td = RLC_CEIL(key_len, RLC_MD_LEN);"],"label":0}
{"cve":"CVE-2018-12453","code_chunks":["\/* Lookup the key now, this is common for all the subcommands but HELP. *\/","if (c->argc >= 4) {","robj *o = lookupKeyWriteOrReply(c,c->argv[2],shared.nokeyerr);","if (o == NULL) return;","s = o->ptr;","grpname = c->argv[3]->ptr;",""],"label":1}
{"cve":"PYSEC-2021-167","code_chunks":["    const int64 sparse_cholesky_cost_per_batch =","        nnz_per_row * nnz_per_row * num_rows;","        auto worker_threads = *(ctx->device()->tensorflow_cpu_worker_threads());","    std::atomic<int64> invalid_input_index(-1);","    Shard(worker_threads.num_threads, worker_threads.workers, batch_size,","          sparse_cholesky_cost_per_batch,","          [&](int64 batch_begin, int64 batch_end) {"],"label":0}
{"cve":"CVE-2020-15121","code_chunks":["struct sockaddr_in sa;","WSADATA wsadata;","","if (WSAStartup (MAKEWORD (1, 1), &wsadata) == SOCKET_ERROR) {","eprintf (\"Error creating socket.\");","return false;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  const bool has_aux_input = (fw_aux_input_weights != nullptr);","","      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);","","  TF_LITE_ENSURE_EQ(context, input->dims->size, 3);","  const bool time_major = params->time_major;","  const int batch_size ="],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ed_map(ed_t p, const uint8_t *msg, int len);"],"label":1}
{"cve":"CVE-2019-3556","code_chunks":["int err = 0;","SCOPE_EXIT {","if (log) {","log->setInt(\"errno\", err);","log->setStr(\"new_user\", uname);","StructuredLog::log(\"hhvm_lightprocess_error\", *log);"],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["}","for (c=0; c < 16; c+=2) {","i = len[((c & 1) << 1) | (c >> 3)];","RAW(row,col+c) = ((signed) ph1_bits(i) << (32-i) >> (32-i)) +","(dir ? RAW(row+(~c | -2),col+c) : col ? RAW(row,col+(c | -2)) : 128);","if (c == 14) c = -1;"],"label":1}
{"cve":"CVE-2021-38160","code_chunks":["\t\t}","\t}","\tkfree(io_names);","\tkfree(io_callbacks);","\tkfree(vqs);","","\treturn 0;"],"label":0}
{"cve":"CVE-2017-17439","code_chunks":["*\/","if(ret != 0 && ret != HDB_ERR_NOT_FOUND_HERE && reply->length == 0) {","ret = _kdc_fast_mk_error(context, r,","&error_method,","r->armor_crypto,","&req->req_body,"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["}","if (_PyObject_HasAttrId(obj, &PyId_col_offset)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_col_offset);","if (tmp == NULL) goto failed;","res = obj2ast_int(tmp, &col_offset, arena);"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["void strbuf_utf8_align(struct strbuf *buf, align_type position, unsigned int width,","const char *s)","{","size_t slen = strlen(s);","int display_len = utf8_strnwidth(s, slen, 0);","int utf8_compensation = slen - display_len;",""],"label":0}
{"cve":"CVE-2020-1912","code_chunks":["!llvh::isa<ESTree::ArrowFunctionExpressionNode>(node) &&","\"lazy compilation not supported for arrow functions\");","","auto *func = genES5Function(lazyData->originalName, parentVar, node);","addLexicalDebugInfo(func, topLevel, lexicalScopeChain);","return {func, topLevel};","}"],"label":1}
{"cve":"CVE-2017-12664","code_chunks":["  }","  image_view=DestroyCacheView(image_view);","  colormap_index=(ssize_t *) RelinquishMagickMemory(colormap_index);","  image->type=GrayscaleType;","  if (SetImageMonochrome(image,exception) != MagickFalse)","    image->type=BilevelType;","  return(status);"],"label":0}
{"cve":"PYSEC-2021-259","code_chunks":["    total_size += iov[i].iov_len;","  }","","    const std::string& compressed_data = compressed.data();","  size_t uncompressed_size;","  if (!port::Snappy_GetUncompressedLength(","          compressed_data.data(), compressed_data.size(), &uncompressed_size)) {"],"label":0}
{"cve":"CVE-2022-29694","code_chunks":["","memory_region_init_ram(uc, ram, size, perms);","if (ram->addr == -1 || !ram->ram_block) {","g_free(ram);","return NULL;","}"],"label":0}
{"cve":"CVE-2021-29605","code_chunks":["TfLiteIntArray* TfLiteIntArrayCreate(int size) {","TfLiteIntArray* ret =","(TfLiteIntArray*)malloc(TfLiteIntArrayGetSizeInBytes(size));","ret->size = size;","return ret;","}"],"label":1}
{"cve":"CVE-2020-11089","code_chunks":["irp->IoStatus = drive_map_windows_err(GetLastError());","Length = 0;","}","else if (!drive_file_write(file, Stream_Pointer(irp->input), Length))","{","irp->IoStatus = drive_map_windows_err(GetLastError());","Length = 0;"],"label":1}
{"cve":"CVE-2021-32672","code_chunks":["int argc = 0;","if (sdslen(ldb.cbuf) == 0) return NULL;","","\/* Working on a copy is simpler in this case. We can modify it freely","* for the sake of simpler parsing. *\/","sds copy = sdsdup(ldb.cbuf);"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["tempo = (tracks[i][3] << 16) + (tracks[i][4] << 8)+ tracks[i][5];","if (!tempo)","tempo = 500000;","","samples_per_delta_f = _WM_GetSamplesPerTick(divisions, tempo);","}"],"label":1}
{"cve":"CVE-2021-29523","code_chunks":["errors::InvalidArgument(","\"Rank of input SparseTensor should be > 1, but saw rank: \", rank));","","TensorShape tensor_input_shape(input_shape->vec<int64>());","gtl::InlinedVector<int64, 8> std_order(rank);","std::iota(std_order.begin(), std_order.end(), 0);","SparseTensor input_st;"],"label":1}
{"cve":"CVE-2020-27153","code_chunks":["","\tdestroy_att_send_op(op);","\tchan->pending_req = NULL;","","\twakeup_chan_writer(chan, NULL);","}",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params =","reinterpret_cast<TfLiteAudioSpectrogramParams*>(node->user_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2023-40589","code_chunks":["\t\t\t}","","\t\t\tOldCopyOffset = ncrush->OffsetCache[OffsetCacheIndex];","\t\t\tncrush->OffsetCache[OffsetCacheIndex] = ncrush->OffsetCache[0];","\t\t\tncrush->OffsetCache[0] = OldCopyOffset;","\t\t}","\t\telse"],"label":0}
{"cve":"PYSEC-2021-776","code_chunks":["                   std::abs(input_requested_max_float));","      Tensor* output = nullptr;","      OP_REQUIRES_OK(ctx, ctx->allocate_output(kOutputTensorIndex,","                                               input.shape(), &output));","","      std::vector<float> scales(depth);","      for (int i = 0; i < depth; ++i) {"],"label":0}
{"cve":"CVE-2016-6873","code_chunks":["  for (ArrayIter iter(array); iter; ++iter) {","    Variant value = iter.second();","    if (value.isArray()) {","      const Array& arr_value = value.asCArrRef();","      check_recursion_throw();","      cnt += php_count_recursive(arr_value);","    }"],"label":0}
{"cve":"CVE-2020-5208","code_chunks":["read_fru_area(struct ipmi_intf * intf, struct fru_info *fru, uint8_t id,","uint32_t offset, uint32_t length, uint8_t *frubuf)","{","uint32_t off = offset, tmp, finish;","struct ipmi_rs * rsp;","struct ipmi_rq req;","uint8_t msg_data[4];"],"label":1}
{"cve":"CVE-2018-16643","code_chunks":["greenmap=(int *) RelinquishMagickMemory(greenmap);","if (redmap != (int *) NULL)","redmap=(int *) RelinquishMagickMemory(redmap);","image=DestroyImageList(image);","return(GetFirstImageInList(images));","}"],"label":1}
{"cve":"CVE-2016-6873","code_chunks":["static bool couldRecur(const Variant& v, const ArrayData* arr) {","return v.isReferenced() ||","arr->kind() == ArrayData::kGlobalsKind ||","arr->kind() == ArrayData::kProxyKind;","}"],"label":0}
{"cve":"PYSEC-2022-73","code_chunks":["if (!proto.ParseFromArray(d->Data(sizes[i]), sizes[i])) {","return false;","}","ps[i].FromProto(proto);","}","return true;","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    }","    if (kernel_type == kGenericOptimized || kernel_type == kNeonOptimized) {","      TF_LITE_RESIZE_BILINEAR(optimized_ops, uint8_t);","    }","  } else if (output->type == kTfLiteInt8) {","    TF_LITE_RESIZE_BILINEAR(reference_ops, int8_t);","#undef TF_LITE_RESIZE_BILINEAR"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["                PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","auto* params = reinterpret_cast<TfLiteMfccParams*>(node->user_data);","","const TfLiteTensor* input_wav = GetInput(context, node, kInputTensorWav);","const TfLiteTensor* input_rate = GetInput(context, node, kInputTensorRate);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["{","tok->done = E_TABSPACE;","tok->cur = tok->inp;","return ERRORTOKEN;","}",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");"],"label":1}
{"cve":"CVE-2016-6823","code_chunks":["","  option=GetImageOption(image_info,\"bmp:format\");","  if (option != (char *) NULL)","    {","      (void) LogMagickEvent(CoderEvent,GetMagickModule(),","          \"  Format=%s\",option);",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["GetTemporary(context, node, kFwCellStateQuantized);","fw_cell_state_quantized->type = fw_input_to_output_weights->type;","fw_cell_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(fw_cell_state_quantized->dims,"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["#ifdef LIBRAW_LIBRARY_BUILD","imgdata.lens.FocalLengthIn35mmFormat = get2();","break;","stmread(imgdata.shootinginfo.BodySerial, len, ifp);","break;","imgdata.lens.MinFocal = getreal(type);"],"label":1}
{"cve":"CVE-2018-10540","code_chunks":["                                    chanMask |= 0x8;","                                else","                                    if (debug_logging_mode)","                                        error_line (\"undefined channel ID %c%c%c%c\", cptr [0], cptr [1], cptr [2], cptr [3]);","","                                cptr += 4;","                            }"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["    REQ(CHILD(n, 0), ASYNC);","","    switch (TYPE(CHILD(n, 1))) {","            return ast_for_funcdef_impl(c, n, NULL,","                                        true \/* is_async *\/);","            return ast_for_with_stmt(c, n,","                                     true \/* is_async *\/);"],"label":0}
{"cve":"CVE-2021-3796","code_chunks":["char_u\t*ptr;","int\t\thad_ctrl_v;","long\tn;","","if (checkclearop(cap->oap))","return;"],"label":0}
{"cve":"PYSEC-2021-446","code_chunks":["const Tensor& handle = ctx->input(0);","const string& name = handle.scalar<tstring>()();","Tensor val;","OP_REQUIRES_OK(ctx, ctx->session_state()->GetTensor(name, &val));","ctx->set_output(0, val);","}",""],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["if (a != NULL) {","TAILQ_FOREACH_REVERSE(m, &a->members, member_list, entries) {","matched = cmnd_matches_all(parse_tree, m, runchroot, info);","if (matched != UNSPEC) {","if (negated)","matched = matched == ALLOW ? DENY : ALLOW;","break;"],"label":1}
{"cve":"CVE-2022-1052","code_chunks":["\tif (size < sizeof (header)) {","\t\treturn false;","\t}","\tif (r_buf_fread_at (bin->b, offset, (ut8 *)&header, \"7i\", 1) != sizeof (header)) {","\t\treturn false;","\t}","\tif (header.fixups_version > 0) {"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["}","","offset += blockLength;","Stream_SetPointer(s, holdp + blockLength);","}",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  if (is_hybrid_op) {","    op_data->compute_row_sums = true;","            node->temporaries->data[1] = scratch_tensor_index + 1;","    TfLiteTensor* input_quantized;","    TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, \/*index=*\/1,","                                                &input_quantized));","    input_quantized->type = weights_feature->type;"],"label":0}
{"cve":"CVE-2018-14363","code_chunks":["ret = pop_query(pop_data, buf, sizeof(buf));","if (ret == 0)","{","mutt_bcache_del(pop_data->bcache, ctx->hdrs[i]->data);","#ifdef USE_HCACHE","mutt_hcache_delete(hc, ctx->hdrs[i]->data, strlen(ctx->hdrs[i]->data));","#endif"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* params = GetInput(context, node, kParams);","const TfLiteTensor* indices = GetInput(context, node, kIndices);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (indices->type) {","return EvalGatherNd<int32_t>(context, params, indices, output);"],"label":1}
{"cve":"CVE-2022-1451","code_chunks":["if (attr) {","attr->type = R_BIN_JAVA_ATTR_TYPE_CONST_VALUE_ATTR;","if (offset + 4 < sz) {","attr->info.constant_value_attr.constantvalue_idx = R_BIN_JAVA_USHORT (buffer, offset);","}","offset += 2;"],"label":0}
{"cve":"PYSEC-2021-584","code_chunks":["TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {","    if (tuple[index].has_value()) {","      return errors::InvalidArgument(","          \"The tensor for index '\", index, \"' for key '\", key.scalar<int64>()(),","          \"' was already initialized '\", dtypes_.size(), \"'.\");","    }",""],"label":0}
{"cve":"CVE-2023-27114","code_chunks":["\t\tif (buf_len < 2) {","\t\t\tgoto err;","\t\t}","\t\tut32 simdop;","\t\top->type = WASM_TYPE_OP_SIMD;","\t\tsize_t simdop_size = read_u32_leb128 (buf + 1, buf + buf_len, &simdop);","\t\tif (simdop_size > buf_len) {"],"label":0}
{"cve":"CVE-2023-23082","code_chunks":["    ErrNonfatal(\"Invalid offset of first IFD value: %u\", FirstOffset, 0);","    return false;","  }","","","","    ProcessDir(ExifSection+8+FirstOffset, ExifSection+8, length-8, 0);"],"label":0}
{"cve":"CVE-2019-19050","code_chunks":["\t\treturn err;","\t}","","\treturn nlmsg_unicast(net->crypto_nlsk, skb, NETLINK_CB(in_skb).portid);","}","","MODULE_LICENSE(\"GPL\");"],"label":0}
{"cve":"CVE-2022-29203","code_chunks":["  }","  if (!input_from_tensors_as_shape_str.empty()) {","    strings::StrAppend(&error_context,","                       \" and with input tensors computed as partial shapes: \",","                       absl::StrJoin(input_from_tensors_as_shape_str, \",\"));","  }",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["GetOutput(context, node, kSoftNMSOutputTensorSelectedScores);","output_num_selected_indices =","GetOutput(context, node, kSoftNMSOutputTensorNumSelectedIndices);","if (!is_max_output_size_const) {","SetTensorSizes(context, output_selected_indices, {max_output_size_value});","SetTensorSizes(context, output_selected_scores, {max_output_size_value});"],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["    { 3944, 2622,  30, 18,  6,  2 },","    { 3948, 2622,  42, 18,  0,  2 },","    { 3984, 2622,  76, 20,  0,  2, 14 },","    { 4104, 3048,  48, 12, 24, 12 },","    { 4116, 2178,   4,  2,  0,  0 },","    { 4152, 2772, 192, 12,  0,  0 },","    { 4160, 3124, 104, 11,  8, 65 },"],"label":0}
{"cve":"CVE-2016-10161","code_chunks":["yych = *++YYCURSOR;","if (yych != ';') goto yy18;","++YYCURSOR;","#line 585 \"ext\/standard\/var_unserializer.re\"","{","*p = YYCURSOR;","INIT_PZVAL(*rval);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor2, &input2));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","","  TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["            else if (c == '\\t') {","                col = (col \/ tok->tabsize + 1) * tok->tabsize;","                altcol = (altcol \/ ALTTABSIZE + 1) * ALTTABSIZE;","            }","            else if (c == '\\014')  {\/* Control-L (formfeed) *\/","                col = altcol = 0; \/* For Emacs users *\/","            }"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["c.c_feature_version = feature_version;","","if (TYPE(n) == encoding_decl)","n = CHILD(n, 0);","","k = 0;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2023-29007","code_chunks":["{","\tif (current_config_kvi)","\t\treturn current_config_kvi->scope;","\telse","\t\treturn current_parsing_scope;","}",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["reinterpret_cast<TfLiteAudioSpectrogramParams*>(node->user_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2022-23560","code_chunks":["  const int total_rank = traversal_order_.size();","  int src_data_ptr = 0;","  std::vector<int> indices(total_rank);","  Populate(src_data, indices, 0, 0, &src_data_ptr, dest_data);","","  return kTfLiteOk;","}"],"label":0}
{"cve":"CVE-2021-29536","code_chunks":["void Compute(OpKernelContext* ctx) override {","ReshapeOp::Compute(ctx);","if (!ctx->status().ok()) {","return;","}",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static void eb_mul_lnaf_imp(eb_t r, const eb_t p, const bn_t k) {","int i, l, n;","int8_t naf[RLC_FB_BITS + 1];","eb_t t[1 << (EB_WIDTH - 2)];",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["      },","      .CopyFromBufferHandle = nullptr,","      .CopyToBufferHandle = nullptr,","      .FreeBufferHandle = nullptr,","      .flags = kTfLiteDelegateFlagsAllowDynamicTensors,","  };","  return reinterpret_cast<jlong>(&delegate);"],"label":0}
{"cve":"CVE-2019-16346","code_chunks":["if(--(context->Xtogo) <= 0) {","#ifdef NGIFLIB_ENABLE_CALLBACKS","if(p->line_cb) p->line_cb(p, context->line_p, context->curY);","#endif \/* NGIFLIB_ENABLE_CALLBACKS *\/","context->Xtogo = i->width;","switch(context->pass) {"],"label":0}
{"cve":"CVE-2022-24754","code_chunks":["pj_assert(cred_info->data.slen == 32);","pj_memcpy( ha1, cred_info->data.ptr, cred_info->data.slen );","} else {","pj_assert(!\"Invalid data_type\");"],"label":1}
{"cve":"CVE-2019-19947","code_chunks":["struct kvaser_cmd *cmd;","int rc;","","cmd = kmalloc(sizeof(*cmd), GFP_KERNEL);","if (!cmd)","return -ENOMEM;",""],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["    needSep = XML_TRUE;","  }","","  if (! poolAppendChar(&parser->m_tempPool, XML_T('\\0')))","    return NULL;","  return parser->m_tempPool.start;","}"],"label":0}
{"cve":"CVE-2019-14495","code_chunks":["else if(i > 15 && (!strncasecmp(buf, \"content-length:\", 15))){","sb = buf + 15;","while(isspace(*sb))sb++;","contentlen = atoi(sb);","}","else if(i > 13 && (!strncasecmp(buf, \"content-type:\", 13))){","sb = buf + 13;"],"label":1}
{"cve":"CVE-2022-0213","code_chunks":["|| wp->w_p_pvw","#endif","|| bufIsChanged(wp->w_buffer)","|| wp->w_buffer->b_p_ro)","*(p + len++) = ' ';","if (bt_help(wp->w_buffer))"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input_resource_id_tensor =","GetInput(context, node, kInputResourceIdTensor);","TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, NumDimensions(input_resource_id_tensor), 1);","TF_LITE_ENSURE_EQ(context, SizeOfDimension(input_resource_id_tensor, 0), 1);"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["rtp_cb.on_write_complete = &on_rtp_data_sent;","","status = pj_ioqueue_register_sock(pool, ioqueue, tp->rtp_sock, tp,","&rtp_cb, &tp->rtp_key);","if (status != PJ_SUCCESS)","goto on_error;"],"label":1}
{"cve":"CVE-2020-11097","code_chunks":["\t{","\t\tif (!ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvChannelBindings,","\t\t                      context->ChannelBindingsHash, 16))","\t\t\tgoto fail;","","\t\tif (context->ServicePrincipalName.Length > 0)","\t\t{"],"label":0}
{"cve":"PYSEC-2022-104","code_chunks":["  if (crop_area < 0)","    return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",","                                   crop_height, \" with \", crop_width,","                                   \" would overflow\");","  int64_t crop_volume = MultiplyWithoutOverflow(crop_area, num_boxes);","  if (crop_volume < 0)","    return errors::InvalidArgument(\"Cannot estimate cost, multiplying \","],"label":0}
{"cve":"CVE-2022-23608","code_chunks":["    \t      pj_hash_get_lower(mod_ua.dlg_table, local_tag->ptr,","                                (unsigned)local_tag->slen, NULL);","    if (dlg_set == NULL) {","\t\/* Not found *\/","\tpj_mutex_unlock(mod_ua.mutex);","\treturn NULL;","    }"],"label":0}
{"cve":"CVE-2021-38203","code_chunks":["","\tnum_devs = get_profile_num_devs(fs_info, type);","","\t\/* num_devs device items to update and 1 chunk item to add or remove *\/","\tthresh = btrfs_calc_metadata_size(fs_info, num_devs) +","\t\tbtrfs_calc_insert_metadata_size(fs_info, 1);",""],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["        NULL;","    if (PyDict_SetItemString(d, \"IfExp\", (PyObject*)IfExp_type) < 0) return","        NULL;","    if (PyDict_SetItemString(d, \"Dict\", (PyObject*)Dict_type) < 0) return NULL;","    if (PyDict_SetItemString(d, \"Set\", (PyObject*)Set_type) < 0) return NULL;","    if (PyDict_SetItemString(d, \"ListComp\", (PyObject*)ListComp_type) < 0)","        return NULL;"],"label":0}
{"cve":"CVE-2022-29776","code_chunks":[],"label":1}
{"cve":"PYSEC-2021-748","code_chunks":["out->emplace_back(metadata.dtype(), metadata.tensor_shape());","TensorBuffer* buffer = DMAHelper::buffer(&out->back());","iov[i].iov_base = buffer->data();","iov[i].iov_len = buffer->size();","} else {","out->emplace_back();"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["  pixel = (ushort *) calloc (raw_width*3 + raw_height*4, 2);","  merror (pixel, \"phase_one_load_raw_c()\");","  offset = (int *) (pixel + raw_width);","  fseek (ifp, strip_offset, SEEK_SET);","  for (row=0; row < raw_height; row++)","    offset[row] = get4();","  c_black = (short (*)[2]) (offset + raw_height);"],"label":0}
{"cve":"CVE-2016-9840","code_chunks":["    unsigned huff;              \/* Huffman code *\/","    unsigned incr;              \/* for incrementing code, index *\/","    unsigned fill;              \/* index for replicating entries *\/","    unsigned low;               \/* low bits for current root entry *\/","    unsigned mask;              \/* mask for low root bits *\/","    code here;                  \/* table entry for duplication *\/","    code FAR *next;             \/* next available space in table *\/"],"label":0}
{"cve":"CVE-2019-17177","code_chunks":["while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; \/*trim zeroes*\/","tree->maxbitlen = maxbitlen;","tree->numcodes = (unsigned)numcodes; \/*number of symbols*\/","tree->lengths = (unsigned*)realloc(tree->lengths, numcodes * sizeof(unsigned));","if(!tree->lengths) return 83; \/*alloc fail*\/","\/*initialize all lengths to 0*\/","memset(tree->lengths, 0, numcodes * sizeof(unsigned));"],"label":1}
{"cve":"CVE-2015-8631","code_chunks":["        errmsg = krb5_get_error_message(handle->context, ret.code);","","    log_done(\"kadm5_get_privs\", client_name.value, errmsg,","             &client_name, &service_name, rqstp);","","    if (errmsg != NULL)","        krb5_free_error_message(handle->context, errmsg);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      return EvalGatherNd<int64_t>(context, params, indices, output);","      context->ReportError(","          context, \"Indices of type '%s' are not supported by gather_nd.\",","          TfLiteTypeGetName(indices->type));","      return kTfLiteError;","  }","}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp_read_str(fp_t a, const char *str, int len, int radix);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["      TfLiteIntArray* zero_points_size = TfLiteIntArrayCreate(1);","      zero_points_size->data[0] = batch_size;","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, zero_points,","                                                       zero_points_size));","    }","    const int num_row_sums = has_aux_input ? 3 : 2;","    node->temporaries->data[kFwRowSums] ="],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["    bool ms_handle_reset(Connection *con) override { return true; }","    void ms_handle_remote_reset(Connection *con) override {}","    bool ms_handle_refused(Connection *con) override { return false; }","    bool ms_verify_authorizer(Connection *con, int peer_type, int protocol,","                              bufferlist& authorizer, bufferlist& authorizer_reply,","                              bool& isvalid, CryptoKey& session_key,","\t\t\t      std::unique_ptr<AuthAuthorizerChallenge> *challenge) override {"],"label":0}
{"cve":"CVE-2019-19061","code_chunks":["\tunsigned int scan_count;","\tunsigned int i, j;","\t__be16 *tx, *rx;","","\tkfree(adis->xfer);","\tkfree(adis->buffer);",""],"label":0}
{"cve":"CVE-2021-43848","code_chunks":["while (src != src_end) {","int err;","const char *err_desc = NULL;","if ((err = stream->recvbuf.handle_input(stream, &src, src_end, &err_desc)) != 0) {","if (err == H2O_HTTP3_ERROR_INCOMPLETE) {","if (!quicly_recvstate_transfer_complete(&stream->quic->recvstate))","break;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["            copy_ledger(recurrent_to_cell_weights->sparsity,","                        recurrent_to_cell_weights_ledger);","            copy_ledger(recurrent_to_output_weights->sparsity,","                        recurrent_to_output_weights_ledger);","            copy_ledger(projection_weights->sparsity,","                        projection_weights_ledger);","            op_data->ledger_initialized = true;"],"label":0}
{"cve":"CVE-2021-32613","code_chunks":["}","","if (flag && ref_idx) {","free_object (ref_idx->data);","ref_idx->data = copy_object (ret);","}","return ret;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["","int","obj2ast_alias(PyObject* obj, alias_ty* out, PyArena* arena)","{","    PyObject* tmp = NULL;","    identifier name;","    identifier asname;"],"label":0}
{"cve":"PYSEC-2022-126","code_chunks":["errors::InvalidArgument(","\"Requires start >= limit when delta < 0: \", start, \"\/\", limit));","}","int64_t size = 0;","if (std::is_integral<T>::value) {","size = static_cast<int64_t>("],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["bw_activation_state_quantized->type = fw_input_to_output_weights->type;","bw_activation_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(bw_activation_state_quantized->dims,"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["row_sums->type = kTfLiteInt32;","row_sums->allocation_type = kTfLiteArenaRwPersistent;","const int row_sums_dims[1] = {channels_out};"],"label":1}
{"cve":"CVE-2022-35939","code_chunks":["return ScatterNd<IndicesT, bool>(indices, updates, output);","return ScatterNd<IndicesT, int8_t>(indices, updates, output);","return ScatterNd<IndicesT, int32_t>(indices, updates, output);","return ScatterNd<IndicesT, int64_t>(indices, updates, output);","TF_LITE_KERNEL_LOG(","context, \"Updates of type '%s' are not supported by scatter_nd.\","],"label":1}
{"cve":"CVE-2018-8797","code_chunks":["{","UNUSED(mcs_data);","uint8 result;","int length;","STREAM s;","RD_BOOL is_fastpath;","uint8 fastpath_hdr;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["bn_abs(c, b);","return;","}","","if (bn_is_zero(b)) {","bn_abs(c, a);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor1, &input1));","  const TfLiteTensor* input2;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor2, &input2));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["output_values.push_back(data[i]);","}","}","TfLiteTensor* unique_output = GetOutput(context, node, 0);","std::unique_ptr<TfLiteIntArray, void (*)(TfLiteIntArray*)> shape(","TfLiteIntArrayCreate(NumDimensions(input)), TfLiteIntArrayFree);","shape->data[0] = unique_values.size();"],"label":1}
{"cve":"CVE-2017-13146","code_chunks":["  unsigned z;","  register const Quantum *p;","","  unsigned int status;","  int logging;","  size_t DataSize;","  char padding;"],"label":0}
{"cve":"CVE-2023-25663","code_chunks":["TF_RETURN_IF_ERROR(GetHandle(ctx, &container, &ta_handle));","ResourceMgr* rm = ctx->resource_manager();","if (rm == nullptr) return errors::Internal(\"No resource manager.\");","TF_RETURN_IF_ERROR("],"label":1}
{"cve":"CVE-2018-5802","code_chunks":["if(!S.raw_pitch)","S.raw_pitch = (decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY_WITH_MARGINS) ? S.raw_width*8 : S.width*8;","imgdata.rawdata.raw_alloc = 0;","imgdata.image = (ushort (*)[4]) calloc(unsigned(S.raw_width)*unsigned(S.raw_height),sizeof(*imgdata.image));","if(!(decoder_info.decoder_flags &  LIBRAW_DECODER_ADOBECOPYPIXEL))","{","imgdata.rawdata.raw_image = (ushort*) imgdata.image ;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["const bn_t m, const eb_t *t) {","int i, n0, n1, w, g;","int8_t u, tnaf0[RLC_FB_BITS + 8], tnaf1[RLC_FB_BITS + 8], *_k, *_m;","eb_t t0[1 << (EB_WIDTH - 2)];","eb_t t1[1 << (EB_WIDTH - 2)];","size_t l, l0, l1;"],"label":0}
{"cve":"PYSEC-2021-173","code_chunks":["void Compute(OpKernelContext* ctx) override {","ReshapeOp::Compute(ctx);","if (!ctx->status().ok()) {","return;","}",""],"label":0}
{"cve":"CVE-2020-36138","code_chunks":["","if (!s->is_tiled) {","if (s->strips == 1 && !s->stripsize) {","av_log(avctx, AV_LOG_WARNING, \"Image data size missing\\n\");","s->stripsize = avpkt->size - s->stripoff;"],"label":1}
{"cve":"CVE-2018-20182","code_chunks":["\t\t\t\treplen = code & 0xf;","\t\t\t\tcollen = (code >> 4) & 0xf;","\t\t\t\trevcode = (replen << 4) | collen;","\t\t\t\tif ((revcode <= 47) && (revcode >= 16))","\t\t\t\t{","\t\t\t\t\treplen = revcode;","\t\t\t\t\tcollen = 0;"],"label":0}
{"cve":"CVE-2019-3556","code_chunks":["        break;","      }","","      string translated = translate_stack(transport->getParam(\"stack\").c_str(),","                                          transport->getParam(\"bare\").empty());","      transport->sendString(translated);","      break;"],"label":0}
{"cve":"PYSEC-2022-95","code_chunks":["for (size_t i = 0; i < dtypes.size(); ++i) {","TF_RETURN_IF_ERROR(AddItem(strings::StrCat(arg_def.name(), \":\", i),","{true, arg_index, 0, false, {dtypes[i]}}));","DCHECK_EQ(arg_index, result_.nodes.size());","string name = arg_def.name();","if (dtypes.size() > 1) {","strings::StrAppend(&name, \"_\", i);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp3_read_bin(fp3_t a, const uint8_t *bin, int len) {","if (len != 3 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":1}
{"cve":"CVE-2022-29228","code_chunks":["};","","EXPECT_CALL(*validator_, setParams(_, _));","EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));","","EXPECT_EQ(Http::FilterHeadersStatus::Continue,"],"label":1}
{"cve":"CVE-2022-35971","code_chunks":["input_quantized.flat<quint8>());","AddInputFromArray<quint8>(bias_quantized.shape(),","bias_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});"],"label":1}
{"cve":"CVE-2015-8631","code_chunks":["}","","generic_ret *","create_policy_2_svc(cpol_arg *arg, struct svc_req *rqstp)","{","    static generic_ret              ret;","    char                            *prime_arg;"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["    track_size = malloc(sizeof(uint32_t) * no_tracks);","    track_delta = malloc(sizeof(uint32_t) * no_tracks);","    track_end = malloc(sizeof(uint8_t) * no_tracks);","    running_event = malloc(sizeof(uint8_t) * no_tracks);","","    smallest_delta = 0xffffffff;","    for (i = 0; i < no_tracks; i++) {"],"label":0}
{"cve":"CVE-2023-1801","code_chunks":["struct tm *tm;","char buf[BUFSIZE];","","if (len != 4)","goto invalid;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\t\t\tbreak;","\t\t}","","\t\trest = Stream_GetRemainingLength(&sub);","\t\tif (rest > 0)","\t\t{","\t\t\tWLog_WARN(TAG,"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["if (length < 88)","return FALSE;","","Stream_Seek(s, 16);                         \/* terminalDescriptor (16 bytes) *\/","Stream_Seek_UINT32(s);                      \/* pad4OctetsA (4 bytes) *\/","Stream_Seek_UINT16(s);                      \/* desktopSaveXGranularity (2 bytes) *\/"],"label":1}
{"cve":"CVE-2018-20406","code_chunks":["                goto error;","            }","            Py_DECREF(d_key);","        }","        Py_DECREF(dict);","    }",""],"label":0}
{"cve":"CVE-2016-5359","code_chunks":["guint32 offset, guint32 str_tbl, guint8 level, guint8 *codepage_attr)","{","guint32 tvb_len = tvb_reported_length (tvb);","guint32 off     = offset;","guint32 len;","guint   str_len;","guint32 ent;"],"label":1}
{"cve":"CVE-2021-3658","code_chunks":["DBG(\"\");","","if (discovery_filter_to_mgmt_cp(adapter, &sd_cp)) {","btd_error(adapter->dev_id,","\"discovery_filter_to_mgmt_cp returned error\");","return -ENOMEM;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* inputs;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputsTensor, &inputs));","const TfLiteTensor* sequence_length;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSequenceLengthTensor,","&sequence_length));"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2020-1712","code_chunks":["uid_t good_user,","Hashmap **registry,","sd_bus_error *ret_error) {","","#if ENABLE_POLKIT","_cleanup_(sd_bus_message_unrefp) sd_bus_message *pk = NULL;","AsyncPolkitQuery *q;"],"label":0}
{"cve":"CVE-2020-28196","code_chunks":["const uint8_t *contents, *remainder;","size_t clen, rlen;","","ret = get_tag(*der, len, tag_out, &contents, &clen, &remainder, &rlen, 0);","if (ret)","return ret;","if (rlen != 0)"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2022-24792","code_chunks":["    PJ_ASSERT_RETURN(stream, -PJ_EINVAL);","","    \/* Check that this is really a player port *\/","    PJ_ASSERT_RETURN(stream->info.signature == SIGNATURE, -PJ_EINVALIDOP);","","    PJ_LOG(1, (THIS_FILE, \"pjmedia_avi_stream_set_eof_cb() is deprecated. \"","    \t       \"Use pjmedia_avi_stream_set_eof_cb2() instead.\"));"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    TF_LITE_ENSURE_OK(context,","                      ExpandTensorDim(context, *input, axis_value, output));","  }","  if (output->type == kTfLiteString) {","    TfLiteTensorRealloc(input->bytes, output);","  }","  memcpy(output->data.raw, input->data.raw, input->bytes);"],"label":0}
{"cve":"CVE-2019-19603","code_chunks":["p = pParse->pNewTable;","if( p==0 ) return;","","if( pSelect==0 && isShadowTableName(db, p->zName) ){","p->tabFlags |= TF_Shadow;","}",""],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["                    \/* Remote indicates it wants to use rtcp-mux *\/","                    pjmedia_transport_info info;","","                    pjmedia_transport_info_init(&info);","                    pjmedia_transport_get_info(ds->srtp->member_tp, &info);","                    if (pj_sockaddr_cmp(&info.sock_info.rtp_addr_name,","                        &info.sock_info.rtcp_addr_name))"],"label":0}
{"cve":"CVE-2021-40812","code_chunks":["size_t out_size;","int ret = 0;","","if (im == NULL) {","return 1;","}"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["\t    goto done;","\t}","    }","    if (def_case_insensitive_user)","\trc = strcasecmp(sudoers_user, user) == 0;","    else","\trc = strcmp(sudoers_user, user) == 0;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["       (bw_aux_input_weights != nullptr)) ||","      ((fw_aux_input_weights == nullptr) && (bw_aux_input_weights == nullptr));","  TF_LITE_ENSURE(context, aux_inputs_weights_or_none);","  const bool has_aux_input = (fw_aux_input_weights != nullptr);","","      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["reinterpret_cast<TfLiteAudioMicrofrontendParams*>(node->user_data);","FrontendReset(data->state);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2022-3299","code_chunks":["","        timer = client->t_curl;","        if (timer)","            ogs_timer_stop(timer);","    }","}",""],"label":0}
{"cve":"CVE-2022-35970","code_chunks":["input_quantized.flat<quint8>());","AddInputFromArray<quint8>(bias_quantized.shape(),","bias_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});","AddInputFromArray<float>(TensorShape({1}), {input_max});"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["goto failed;","}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["if (*ch != 'm')","break;","p = ch - 1;","while (ch - p < 10 && *p != '\\033')","p--;","if (*p != '\\033' ||","ch + 1 - p != display_mode_esc_sequence_len(p))"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, \/*index=*\/1, &input2));","","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, \/*index=*\/0, &output));","","  int32_t* output_data = output->data.i32;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_rec_win(uint8_t *win, int *len, const bn_t k, int w);"],"label":1}
{"cve":"CVE-2018-18311","code_chunks":["        }","","        if (environ == PL_origenviron) {   \/* need we copy environment? *\/","            UV j, max;","            char **tmpenv;","","            max = i;"],"label":0}
{"cve":"CVE-2020-15472","code_chunks":["\tndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_H323, NDPI_PROTOCOL_UNKNOWN);","\treturn;","      } else if(packet->payload_packet_len >= 20 && packet->payload_packet_len <= 117) {","\tNDPI_LOG_INFO(ndpi_struct, \"found H323 broadcast\\n\");","\tndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_H323, NDPI_PROTOCOL_UNKNOWN);","\treturn;","      } else {"],"label":0}
{"cve":"PYSEC-2020-272","code_chunks":["  dlm_tensor->dl_tensor.ctx = tf_dlm_context;","  int ndim = tensor->dims();","  dlm_tensor->dl_tensor.ndim = ndim;","  dlm_tensor->dl_tensor.data = tf_dlm_data;","  dlm_tensor->dl_tensor.dtype = tf_dlm_type;","","  std::vector<int64_t>* shape_arr = &tf_dlm_tensor_ctx->shape;"],"label":0}
{"cve":"CVE-2017-12664","code_chunks":["        (void) WriteBlobByte(image,0);  \/* reserved by Palm *\/","        (void) WriteBlobMSBLong(image,0);  \/* no transparent color, YET *\/","        offset+=8;","      }","    if (bits_per_pixel == 8)","      {","        if (flags & PALM_HAS_COLORMAP_FLAG)  \/* Write out colormap *\/"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");"],"label":1}
{"cve":"CVE-2020-25669","code_chunks":["goto fail2;","","if (sunkbd_initialize(sunkbd) < 0) {","err = -ENODEV;","goto fail3;","}"],"label":1}
{"cve":"CVE-2020-1712","code_chunks":["                goto fail;","","        return 1;","","        log_debug_errno(r, \"Processing asynchronous PolicyKit reply failed, ignoring: %m\");","        (void) sd_bus_reply_method_errno(q->request, r, NULL);","        async_polkit_query_free(q);"],"label":0}
{"cve":"CVE-2018-20761","code_chunks":["AVFormatContext *ctx;","AVOutputFormat *fmt_out;","Bool ret = GF_FALSE;","char *ext, szName[1024], szExt[20];","const char *szExtList;","FFDemux *ffd;","if (!plug || !url)"],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["\tfitimage,","\t\"FIT Image support\",","\tsizeof(image_header_t),","\t(void *)&header,","\tfit_check_params,","\tfit_verify_header,","\tfit_print_contents,"],"label":0}
{"cve":"CVE-2019-20392","code_chunks":["                   void (*private_destructor)(const struct lys_node *node, void *priv))","{","    int i, j, k;","    struct ly_ctx *ctx;","    struct lys_node *next, *elem;","","    ctx = module->ctx;"],"label":0}
{"cve":"CVE-2023-25667","code_chunks":["","Tensor* output = nullptr;","int buffer_size = 0;","string error_string;","uint8* buffer = gif::Decode(","input.data(), input.size(),"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);","","TfLiteTensor* out_tensor;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));","int32_t* out_buf = out_tensor->data.i32;","const TfLiteTensor* hash;"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["return 0;","}","strncpy(&buf[count], end, cur_expr - end);","count += cur_expr - end;","}",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","node->temporaries->data[kAccumScratch] =","scratch_tensor_index + kAccumScratch;","TfLiteTensor* accum_scratch = GetTemporary(context, node, kAccumScratch);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {n_cell, n_batch};"],"label":1}
{"cve":"CVE-2020-35534","code_chunks":["    if (img->levels)","  {","    CrxWaveletTransform *waveletTransforms =","        (CrxWaveletTransform *)(planeComp->compBuf + waveletDataOffset);","    int32_t *paramData = (int32_t *)(planeComp->compBuf + compCoeffDataOffset);","","    planeComp->waveletTransform = waveletTransforms;"],"label":0}
{"cve":"CVE-2016-10060","code_chunks":["FILE","*input,","*output;","","MagickBooleanType","status;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["    populate(node->outputs->data[0]);","    populate(node->temporaries->data[0]);","    populate(node->temporaries->data[1]);","    return kTfLiteOk;","  };","","  return reg;"],"label":0}
{"cve":"CVE-2018-6560","code_chunks":["goffset offset = 0;","gsize original_size = client->auth_buffer->len;","","\/* Add the new data to the remaining data from last iteration *\/","g_byte_array_append (client->auth_buffer, buffer->data, buffer->pos);",""],"label":0}
{"cve":"CVE-2016-6912","code_chunks":["if (out == NULL) {","return NULL;","}","if (_gdImageWebpCtx(im, out, quality)) {","rv = NULL;","} else {"],"label":0}
{"cve":"CVE-2016-1904","code_chunks":["#endif","","","\tcmd = zend_string_safe_alloc(2, l, 0, 0);","","\tfor (x = 0, y = 0; x < l; x++) {","\t\tint mb_len = php_mblen(str + x, (l - x));"],"label":0}
{"cve":"CVE-2021-41195","code_chunks":["output_shape.set_dim(0, output_rows);"],"label":1}
{"cve":"CVE-2024-0727","code_chunks":["bags = PKCS12_unpack_p7data(p7);","} else if (bagnid == NID_pkcs7_encrypted) {","bags = PKCS12_unpack_p7encdata(p7, oldpass, -1);","if (!alg_get(p7->d.encrypted->enc_data->algorithm,","&pbe_nid, &pbe_iter, &pbe_saltlen, &cipherid))","goto err;","} else {"],"label":1}
{"cve":"CVE-2017-9141","code_chunks":["required;","","\/* Seek to start of header *\/","(void) SeekBlob(image, 4, SEEK_SET);","","\/* Check header field *\/"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2020-14400","code_chunks":["{","union {","char bytes[sz_rfbSetColourMapEntriesMsg + 256 * 3 * 2];","rfbSetColourMapEntriesMsg msg;","} buf;","rfbSetColourMapEntriesMsg *scme = &buf.msg;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const int batch_size = SizeOfDimension(input, 0);","","const float* input_ptr = GetTensorData<float>(input);","int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>("],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["    node->temporaries->data[kBwRowSums] =","        op_data->scratch_tensor_index + kBwRowSums;","    TfLiteTensor* bw_row_sums;","    TF_LITE_ENSURE_OK(","        context,","        GetTemporarySafe(context, node, \/*index=*\/kBwRowSums, &bw_row_sums));","    bw_row_sums->type = kTfLiteInt32;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["    if (PyDict_SetItemString(d, \"BinOp\", (PyObject*)BinOp_type) < 0) return","        NULL;","    if (PyDict_SetItemString(d, \"UnaryOp\", (PyObject*)UnaryOp_type) < 0) return","        NULL;","    if (PyDict_SetItemString(d, \"Lambda\", (PyObject*)Lambda_type) < 0) return","        NULL;","    if (PyDict_SetItemString(d, \"IfExp\", (PyObject*)IfExp_type) < 0) return"],"label":0}
{"cve":"CVE-2022-35970","code_chunks":["input_quantized.flat<quint8>());","AddInputFromArray<quint8>(bias_quantized.shape(),","bias_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});","AddInputFromArray<float>(TensorShape({1}), {input_max});"],"label":1}
{"cve":"CVE-2021-29534","code_chunks":["    const Tensor* input_indices;","    const Tensor* input_values;","    const Tensor* input_shape;","    SparseTensorsMap* map;","","    OP_REQUIRES_OK(context, context->input(\"sparse_indices\", &input_indices));","    OP_REQUIRES_OK(context, context->input(\"sparse_values\", &input_values));"],"label":0}
{"cve":"CVE-2019-19960","code_chunks":["*\/","int wc_ecc_import_raw(ecc_key* key, const char* qx, const char* qy,","                   const char* d, const char* curveName)","{","    int err, x;","","    \/* if d is NULL, only import as public key using Qx,Qy *\/"],"label":0}
{"cve":"CVE-2020-15945","code_chunks":["}","if (isLua(L->ci))","L->oldpc = L->ci->u.l.savedpc;","L->hook = func;","L->basehookcount = count;","resethookcount(L);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int code = RLC_ERR;","bn_t a, b, c, v1[3], v2[3];","int w, k;","uint8_t d[RLC_BN_BITS + 1];","int8_t e[2 * (RLC_BN_BITS + 1)];","size_t l;"],"label":0}
{"cve":"CVE-2016-3178","code_chunks":["break;","case MINISSDPD_SEARCH_TYPE:\t\/* request by type *\/","case MINISSDPD_SEARCH_USN:\t\/* request by USN (unique id) *\/","case MINISSDPD_SEARCH_ALL:\t\/* everything *\/","rp = rbuf+1;","while(d && (nrep < 255)) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  switch (params->type) {","      DenseLshProjection(hash, input, weight, out_buf);","      break;","      SparseLshProjection(hash, input, weight, out_buf);","      break;","      return kTfLiteError;","  }"],"label":0}
{"cve":"CVE-2022-29226","code_chunks":["FilterConfigSharedPtr getConfig(bool forward_bearer_token = true) {","envoy::extensions::filters::http::oauth2::v3::OAuth2Config p;","auto* endpoint = p.mutable_token_endpoint();","endpoint->set_cluster(\"auth.example.com\");"],"label":0}
{"cve":"CVE-2021-44109","code_chunks":["","            break;","","        CASE(OGS_SBI_CONTENT_5GNAS_TYPE)","        CASE(OGS_SBI_CONTENT_NGAP_TYPE)","            http->part[http->num_of_part].content_id =","                data.part[i].content_id;"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["\t\tfprintf(file, \"    Invalid Type: %\" PRIu64 \"\\n\",","\t\t\tvrrp->stats->invalid_type_rcvd);","\t\tfprintf(file, \"    Advertisement Interval: %\" PRIu64 \"\\n\",","\t\t\tvrrp->stats->advert_interval_err);","\t\tfprintf(file, \"    Address List: %\" PRIu64 \"\\n\",","\t\t\tvrrp->stats->addr_list_err);","\t\tfprintf(file, \"  Authentication Errors:\\n\");"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2022-35971","code_chunks":["","    AddInputFromArray<qint32>(TensorShape({value_count}),","                            {-(1 << 23), 0, (1 << 23)});","  AddInputFromArray<float>(TensorShape({}), {-256.0f});","  AddInputFromArray<float>(TensorShape({}), {256.0f});","  AddInputFromArray<float>(TensorShape({}), {-1.0f});","  AddInputFromArray<float>(TensorShape({}), {1.0f});"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params =","reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2023-4756","code_chunks":["\t\t\t\tisDEF = 0;","\t\t\t\tgf_node_set_id(n, ID, szDefName);","\t\t\t}","\t\t\tgf_sg_proto_add_node_code(proto, n);","\t\t}","\t}","\tgf_bt_resolve_routes(parser, 1);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","std::vector<StringRef> words;","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","tflite::StringRef strref = tflite::GetString(input, 0);","int prev_idx = 0;"],"label":0}
{"cve":"PYSEC-2021-396","code_chunks":["status_ = TensorShape::BuildTensorShapeBase(ssm.shape(), &ssm_shape);","if (!status_.ok()) return;","for (const TensorSliceProto& tsp : ssm.slice()) {","TensorSlice ss_slice(tsp);","status_ = RegisterTensorSlice(ssm.name(), ssm_shape, ssm.type(), fname,","ss_slice, &tensors_);","if (!status_.ok()) return;"],"label":1}
{"cve":"CVE-2022-0523","code_chunks":["for (i = 0; i < size; i++) {","tmp = get_object (buffer);","if (!tmp) {","r_list_free (ret->data);","R_FREE (ret);","return NULL;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty val;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["","if (!rdp_read_multifragment_update_capability_set(s, length, settings))","return FALSE;","","break;",""],"label":1}
{"cve":"PYSEC-2020-303","code_chunks":["const double as_double = PyFloat_AS_DOUBLE(v);","*out = static_cast<T>(as_double);","if (TF_PREDICT_FALSE(CheckForOverflow<T>(as_double, out))) {","return ErrorOutOfRangeDouble;","}","return nullptr;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["else {","int res;","Py_ssize_t len;","Py_ssize_t i;","if (!PyList_Check(tmp)) {","PyErr_Format(PyExc_TypeError, \"Module field \\\"body\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"],"label":0}
{"cve":"CVE-2017-11142","code_chunks":["\t\t\tphp_error_docref(NULL TSRMLS_CC, E_WARNING,","\t\t\t\t\t\"Input variables exceeded %\" PRIu64 \". \"","\t\t\t\t\t\"To increase the limit change max_input_vars in php.ini.\",","\t\t\t\t\tmax_vars);","\t\t\treturn FAILURE;","\t\t}","\t}"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const bool time_major = params->time_major;","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, lstm::full::kInputTensor, &input));","","const TfLiteTensor* input_to_input_weights = GetOptionalInputTensor("],"label":0}
{"cve":"CVE-2019-20807","code_chunks":["","sign_name = tv_get_string_chk(&argvars[2]);","if (sign_name == NULL)","goto cleanup;","","buf = get_buf_arg(&argvars[3]);"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["             actual = (yyvsp[-1].backup_token).actual;","           }","","    break;","","","    { backup_type = actual_type;"],"label":0}
{"cve":"CVE-2018-8798","code_chunks":["STREAM s;","int length;","int tagval;","struct stream packet;","","s = tcp_recv(NULL, 4);"],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["    {  2940928,1616,1213, 0, 0, 0, 7,30,0x94,0,1,\"Nikon\",\"E2100\" },","    {  4771840,2064,1541, 0, 0, 0, 1, 6,0xe1,0,1,\"Nikon\",\"E990\" },","    {  4775936,2064,1542, 0, 0, 0, 0,30,0x94,0,1,\"Nikon\",\"E3700\" },","    {  5865472,2288,1709, 0, 0, 0, 1, 6,0xb4,0,1,\"Nikon\",\"E4500\" },","    {  5869568,2288,1710, 0, 0, 0, 0, 6,0x16,0,1,\"Nikon\",\"E4300\" },","    {  7438336,2576,1925, 0, 0, 0, 1, 6,0xb4,0,1,\"Nikon\",\"E5000\" },","    {  8998912,2832,2118, 0, 0, 0, 0,30,0x94,7,1,\"Nikon\",\"COOLPIX S6\" },"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["}","if (dict) {","res = Py_BuildValue(\"O()O\", Py_TYPE(self), dict);","Py_DECREF(dict);"],"label":1}
{"cve":"CVE-2018-8791","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"CVE-2020-11095","code_chunks":["\tStream_Seek(s, headerLength);","\tupdate_write_scrblt_order(s, &orderInfo, scrblt);","\tupdate_write_order_info(context, s, &orderInfo, offset);","\tupdate->numberOrders++;","\treturn TRUE;","}",""],"label":0}
{"cve":"CVE-2018-8792","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2023-32233","code_chunks":["{","struct nft_lookup *priv = nft_expr_priv(expr);","","nf_tables_activate_set(ctx, priv->set);","}","","static void nft_lookup_destroy(const struct nft_ctx *ctx,"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* in_tensor = GetInput(context, node, 0);","TfLiteTensor* out_tensor = GetOutput(context, node, 0);","TfLiteIntArray* new_size = TfLiteIntArrayCopy(in_tensor->dims);","return context->ResizeTensor(context, out_tensor, new_size);","};"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["GetInput(context, node, kRecurrentWeightsTensor);","const TfLiteTensor* bias = GetInput(context, node, kBiasTensor);","TfLiteTensor* hidden_state =","const_cast<TfLiteTensor*>(GetInput(context, node, kHiddenStateTensor));","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);",""],"label":1}
{"cve":"CVE-2018-20786","code_chunks":["  &settermprop, \/* settermprop *\/","  &bell, \/* bell *\/","  &resize, \/* resize *\/","  &setlineinfo \/* setlineinfo *\/","};","","\/*"],"label":0}
{"cve":"CVE-2018-10887","code_chunks":["if (cmd & 0x80) {","\/* cmd is a copy instruction; copy from the base.","*\/","size_t off = 0, len = 0;","","if (cmd & 0x01) off = *delta++;","if (cmd & 0x02) off |= *delta++ << 8UL;"],"label":1}
{"cve":"CVE-2019-13454","code_chunks":["(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",(*images)->filename);","assert(exception != (ExceptionInfo *) NULL);","assert(exception->signature == MagickCoreSignature);","","i=GetFirstImageInList(*images);","for ( ; i != (Image *) NULL; i=GetNextImageInList(i))"],"label":1}
{"cve":"CVE-2018-20458","code_chunks":["return NULL;","}","image_infos = (struct dyld_cache_image_info*) (bin->b->buf + bin->hdr.startaddr);","dyld_vmbase = *(ut64 *)(bin->b->buf + bin->hdr.baseaddroff);","liboff = image_infos[idx].address - dyld_vmbase;","if (liboff > bin->size) {"],"label":1}
{"cve":"CVE-2018-20179","code_chunks":["\tif (!mcs_recv_cjcf())","\t\tgoto error;","","\tfor (i = 0; i < g_num_channels; i++)","\t{","\t\tmcs_send_cjrq(g_channels[i].mcs_id);","\t\tif (!mcs_recv_cjcf())"],"label":0}
{"cve":"CVE-2022-39347","code_chunks":["if (!path)","return FALSE;","","base_path_length = _wcslen(path) * 2;","path_slash = (WCHAR*)calloc(1, base_path_length + sizeof(WCHAR) * 3);",""],"label":1}
{"cve":"CVE-2020-8904","code_chunks":["int ecall_deliver_signal(int signum, int sigcode) {","  int result = 0;","  try {","    result = asylo::primitives::DeliverSignal(signum, sigcode);","  } catch (...) {","    LOG(FATAL) << \"Uncaught exception in enclave\";","  }"],"label":0}
{"cve":"CVE-2021-3331","code_chunks":["","PortNumber = Storage->ReadInteger(L\"PortNumber\", PortNumber);","UserName = Storage->ReadString(L\"UserName\", UserName);","HostName = Storage->ReadString(L\"HostName\", HostName);","","if (!Configuration->DisablePasswordStoring)"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","","switch (input->type) {        return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);","return EvalImpl<kernel_type, kTfLiteUInt8>(context, node);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);"],"label":1}
{"cve":"CVE-2021-29614","code_chunks":["for (int64 i = 0; i < flat_in.size(); ++i) {","const char* in_data_bytes =","reinterpret_cast<const char*>(flat_in(i).data());","char* out_data_bytes = reinterpret_cast<char*>(out_data);","const char* p_in = in_data_bytes;","char* p_out = out_data_bytes;"],"label":1}
{"cve":"CVE-2018-20761","code_chunks":["\t\t\tbreak;","\t\t\tbreak;","\t\t\tgf_term_set_option(term, GF_OPT_FULLSCREEN, !gf_term_get_option(term, GF_OPT_FULLSCREEN));","\t\t\tbreak;","\t\t\tif (evt->key.flags & (GF_KEY_MOD_CTRL|GF_KEY_MOD_ALT)) {","\t\t\t\thide_shell(shell_visible ? 1 : 0);","\t\t\t\tif (!shell_visible) gui_mode=1;"],"label":0}
{"cve":"CVE-2021-41197","code_chunks":["done);","const int crop_height = grads.dim_size(1);","const int crop_width = grads.dim_size(2);","OP_REQUIRES_ASYNC(","context, crop_height > 0 && crop_width > 0,"],"label":1}
{"cve":"CVE-2016-5357","code_chunks":["#define NETSCREEN_MAX_PACKET_LEN\t65536"],"label":1}
{"cve":"CVE-2018-12559","code_chunks":["MpdCantataMounterInterface *mounterIface;"],"label":1}
{"cve":"PYSEC-2021-617","code_chunks":["const int32_t num_buckets = stats_summary_t->dim_size(2) - 1;","const int32_t logits_dim = logits_dim_;","const int32_t hessian_dim = stats_summary_t->dim_size(3) - logits_dim;","DCHECK_GT(hessian_dim, 0);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["        else {","            int res;","            Py_ssize_t len;","            Py_ssize_t i;","            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"Module field \\\"type_ignores\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["expr_ty target;","expr_ty value;","","if (_PyObject_LookupAttrId(obj, &PyId_target, &tmp) < 0) {","return 1;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);","output->type = input2->type;"],"label":1}
{"cve":"CVE-2019-13568","code_chunks":["buffer.assign(cimg::abs(dy)*(dx_bytes + align_bytes),1,1,1,0);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","  data->requires_broadcast = !HaveSameShapes(input1, input2);","","  TfLiteIntArray* output_size = nullptr;","  if (data->requires_broadcast) {","    TF_LITE_ENSURE_OK(context, CalculateShapeForBroadcast(","                                   context, input1, input2, &output_size));"],"label":0}
{"cve":"CVE-2022-2289","code_chunks":["else","{","i = buflist_findpat(eap->arg, p, FALSE, TRUE, FALSE);","if (i < 0)","return;\t\t\t}","buf = buflist_findnr(i);"],"label":1}
{"cve":"CVE-2017-6448","code_chunks":["offset = R_ASM_GET_OFFSET (a, 'o', vC);","if (offset == -1) {","sprintf (str, \" v%i, v%i, [obj+%04x]\", vA, vB, vC);","} else {","sprintf (str, \" v%i, v%i, [0x%\"PFMT64x\"]\", vA, vB, offset);","}"],"label":1}
{"cve":"CVE-2020-36316","code_chunks":["","\tRLC_TRY {","\t\tbn_new(t);","","\t\tswitch (operation) {","\t\t\t\t\/* DB = lHash | PS | 01 | D. *\/","\t\t\t\tmd_map(h1, NULL, 0);"],"label":0}
{"cve":"PYSEC-2021-827","code_chunks":["OP_REQUIRES_OK_ASYNC(c, LookupResource(c, HandleFromInput(c, 1), &resource),","done);","","Tensor group_assignment = c->input(2);","","OP_REQUIRES_OK_ASYNC("],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int fp_size_str(const fp_t a, int radix) {","bn_t t;","int digits = 0;","","bn_null(t);",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\ted_copy(t[2], p);","\t\tif (bn_sign(k) == RLC_NEG) {","\t\t\ted_neg(t[2], t[2]);","\t\t}","\t\ted_add(t[3], t[2], t[1]);","\t\ted_sub(t[4], t[2], t[1]);","#if defined(ED_MIXED)"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const bool time_major = params->time_major;","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, lstm::full::kInputTensor, &input));","","const TfLiteTensor* input_to_input_weights = GetOptionalInputTensor("],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_read_raw(bn_t a, const dig_t *raw, size_t len) {","RLC_TRY {","bn_grow(a, len);","a->used = len;"],"label":0}
{"cve":"CVE-2018-5800","code_chunks":["if(!S.raw_pitch)","S.raw_pitch = (decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY_WITH_MARGINS) ? S.raw_width*8 : S.width*8;","imgdata.rawdata.raw_alloc = 0;","imgdata.image = (ushort (*)[4]) calloc(unsigned(S.raw_width)*unsigned(S.raw_height),sizeof(*imgdata.image));","if(!(decoder_info.decoder_flags &  LIBRAW_DECODER_ADOBECOPYPIXEL))","{","imgdata.rawdata.raw_image = (ushort*) imgdata.image ;"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["const absl::Span<const int>& seq_lengths, bool time_major,","cudnnDataType_t data_type) {","if (max_seq_length <= 0) {","return tsl::Status(port::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");","}","int dims[] = {batch_size, data_size, 1};","int strides[] = {dims[1] * dims[2], dims[2], 1};"],"label":1}
{"cve":"CVE-2019-11936","code_chunks":["}","Variant v = iter.second();","if (!apc_store().add(key.toString(), v, ttl)) {","errors.add(key, -1);","}","}"],"label":1}
{"cve":"CVE-2018-5729","code_chunks":["            }","            for (j = 0, ptr = entry->tl_data; ptr != NULL; ptr = ptr->tl_data_next) {","                \/* Ignore tl_data that are stored in separate directory","                 * attributes *\/","                if (ptr->tl_data_type == KRB5_TL_LAST_PWD_CHANGE","#ifdef SECURID","                    || ptr->tl_data_type == KRB5_TL_DB_ARGS"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (TYPE(ch) == argument) {","if (NCH(ch) == 1)","nargs++;","else if (TYPE(CHILD(ch, 1)) == comp_for)"],"label":1}
{"cve":"CVE-2021-32139","code_chunks":["GF_Tx3gSampleEntryBox *txt;","","if (!descriptionIndex || !out_desc) return GF_BAD_PARAM;","","trak = gf_isom_get_track_from_file(movie, trackNumber);","if (!trak || !trak->Media) return GF_BAD_PARAM;"],"label":1}
{"cve":"CVE-2019-13220","code_chunks":["ady -= abs(base) * adx;","if (x1 > n) x1 = n;","if (x < x1) {","LINE_OP(output[x], inverse_db_table[y]);","for (++x; x < x1; ++x) {"],"label":1}
{"cve":"PYSEC-2021-462","code_chunks":["errors::InvalidArgument(","\"Rank of input SparseTensor should be > 1, but saw rank: \", rank));","","TensorShape tensor_input_shape(input_shape->vec<int64>());","gtl::InlinedVector<int64, 8> std_order(rank);","std::iota(std_order.begin(), std_order.end(), 0);","SparseTensor input_st;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT32 VCChunkSize;","WLog_INFO(TAG, \"VirtualChannelCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 8)","return FALSE;",""],"label":1}
{"cve":"CVE-2021-32434","code_chunks":["p_voice2 = &voice_tb[voice2];","if (parsys->voice[voice2].range < 0) {","int clone;","","if (cfmt.abc2pscompat) {","error(1, s, \"Cannot have %%%%abc2pscompat\");"],"label":1}
{"cve":"CVE-2017-6436","code_chunks":["    val = be64toh(val);","    byte_array_append(bplist, &sz, 1);","    byte_array_append(bplist, (uint8_t*)&val + (8-size), size);","}","","static void write_uint(bytearray_t * bplist, uint64_t val)","{"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int fb_get_bit(const fb_t a, int bit) {","int d;","","RLC_RIP(bit, d, bit);"],"label":1}
{"cve":"CVE-2021-26926","code_chunks":["with the data in the code stream? *\/","if ((samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)) ||","(!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)) {","jas_eprintf(\"warning: component data type mismatch (IHDR)\\n\");","}","","\/* Is the compression type supported? *\/"],"label":1}
{"cve":"CVE-2022-35966","code_chunks":["","AddInputFromArray<quint8>(input_quantized.shape(),","input_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});"],"label":1}
{"cve":"CVE-2017-9520","code_chunks":["r_config_set (r->config, \"asm.arch\", arch);","r_config_set_i (r->config, \"asm.bits\", bits);","r_config_set (r->config, \"anal.arch\", arch);","if (info->cpu && *info->cpu) {"],"label":1}
{"cve":"CVE-2020-9433","code_chunks":["const char* hostname = luaL_checklstring(L, 2, &sz);","int flags = luaL_optint(L, 3, 0);","char *peer = NULL;","","int ret = X509_check_host(cert, hostname, sz, flags, &peer);","ret = openssl_push_check_result(L, ret, peer);"],"label":0}
{"cve":"CVE-2022-28072","code_chunks":["static int hexagon_v6_op(RAnal *anal, RAnalOp *op, ut64 addr, const ut8 *buf, int len, RAnalOpMask mask) {","HexInsn hi = {0};;","ut32 data = 0;","data = r_read_le32 (buf);","int size = hexagon_disasm_instruction (data, &hi, (ut32) addr);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["      }","      break;","      context->ReportError(context, \"Type '%s' not currently supported.\",","                           TfLiteTypeGetName(input->type));","      return kTfLiteError;","  }","#undef TF_LITE_DEPTH_TO_SPACE"],"label":0}
{"cve":"CVE-2021-38199","code_chunks":["const struct nfs_client_initdata *cl_init)","{","char buf[INET6_ADDRSTRLEN + 1];","const char *ip_addr = cl_init->ip_addr;","struct nfs_client *old;","int error;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["else","\/* TYPE(CHILD(ch, 0)) == DOUBLESTAR or keyword argument *\/","nkeywords++;","}","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["bn_abs(c, b);","return;","}","","if (bn_is_zero(b)) {","bn_abs(c, a);"],"label":0}
{"cve":"CVE-2021-41099","code_chunks":["sds sdsMakeRoomFor(sds s, size_t addlen) {","void *sh, *newsh;","size_t avail = sdsavail(s);","size_t len, newlen, reqlen;","char type, oldtype = s[-1] & SDS_TYPE_MASK;","int hdrlen;",""],"label":0}
{"cve":"CVE-2021-36080","code_chunks":["write_length (Bit_Chain *dat, uint32_t u1, uint32_t match, uint32_t u2)","{","  if (u2 < match)","    {","      LOG_INSANE (\">L %x \", u1 & 0xff)","      bit_write_RC (dat, u1 & 0xff);","      write_long_compression_offset (dat, match - u2);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputVariableId,","&input_resource_id_tensor));","int resource_id = input_resource_id_tensor->data.i32[0];","auto& resources = subgraph->resources();","auto* variable = resource::GetResourceVariable(&resources, resource_id);","TF_LITE_ENSURE(context, variable != nullptr);"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["for (i = stack->num_matches - 1; i >= 0; i--) {","const struct match_attr *ma = stack->attrs[i];","if (ma->is_macro) {","int n = ma->u.attr->attr_nr;","if (!all_attrs[n].macro) {","all_attrs[n].macro = ma;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  float output_activation_min, output_activation_max;","  CalculateActivationRange(params->activation, &output_activation_min,","                           &output_activation_max);","","  const int input_size = NumElements(input) \/ SizeOfDimension(input, 0);","  const int batch_size = SizeOfDimension(input, 0);","  TfLiteTensor* quantized_input_tensor;"],"label":0}
{"cve":"CVE-2022-1237","code_chunks":["bin->os = __get_target_os (bin);","","ut16 offset = bin->ne_header->SegTableOffset + bin->header_offset;","ut16 size = bin->ne_header->SegCount * sizeof (NE_image_segment_entry);","bin->segment_entries = calloc (1, size);","if (!bin->segment_entries) {","return;"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["    m_clientSockets.insert(socket);","","    m_events->adoptHandler(m_events->forClientListener().accepted(),","                socket->getEventTarget(),","                new TMethodEventJob<ClientListener>(this,","                        &ClientListener::handleClientAccepted, socket));",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteIntArrayFree(node->temporaries);","node->temporaries = TfLiteIntArrayCreate(6);","node->temporaries->data[0] = op_data->scratch_tensor_index;","TfLiteTensor* input_quantized = GetTemporary(context, node, \/*index=*\/0);","input_quantized->type = input_weights->type;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["res = obj2ast_boolop(tmp, &op, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_values, &tmp) < 0) {","return 1;"],"label":1}
{"cve":"CVE-2022-25885","code_chunks":["Local<Object> anArray = NEW_ARRAY((int)inBufferSize);","for(int i=0;i<(int)inBufferSize;++i)","anArray->Set(GET_CURRENT_CONTEXT, NEW_NUMBER(i),NEW_NUMBER(inBuffer[i]));","","Local<Value> value = OBJECT_FROM_PERSISTENT(mObject)->Get(GET_CURRENT_CONTEXT, NEW_STRING(\"write\")).ToLocalChecked();","if(value->IsUndefined() || !value->IsFunction())"],"label":0}
{"cve":"CVE-2020-14399","code_chunks":["{","rfbSetPixelFormatMsg spf;","union {","char bytes[sz_rfbSetEncodingsMsg + MAX_ENCODINGS*4];","rfbSetEncodingsMsg msg;","} buf;"],"label":0}
{"cve":"CVE-2016-8687","code_chunks":["}","","\/* If our output buffer is full, dump it and keep going. *\/","if (i > (sizeof(outbuff) - 20)) {","outbuff[i] = '\\0';","fprintf(f, \"%s\", outbuff);","i = 0;"],"label":1}
{"cve":"PYSEC-2021-815","code_chunks":["                    gradients, hessians, node_ids, feature_dims,","                    missing_entry_bucket, logits_dims, stats_dims);","      prev_instance = instance;","      prev_f_dim = f_dim;","                  AddInstanceStatsToMap(instance, f_dim, bucket_id, logits_dims, stats_dims,","                            &stats_map, gradients, hessians, node_ids);","    }"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(context, ResizeOutput(context, node));","}","const TfLiteTensor* top_k = GetInput(context, node, kInputTopK);","const int32 k = top_k->data.i32[0];","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const int32 row_size = input->dims->data[input->dims->size - 1];"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["m_cursor = offset;","} else {","assertx(whence == SEEK_END);","m_cursor = m_len + offset;","}","setPosition(m_cursor);"],"label":1}
{"cve":"CVE-2016-5418","code_chunks":["{","struct archive_string error_string;","int error_number;","int rc;","archive_string_init(&error_string);","rc = check_symlinks_fsobj(a->name, &error_number, &error_string, a->flags);"],"label":0}
{"cve":"PYSEC-2021-156","code_chunks":["Status ValidateInput(const OpInputList& indices_list_in,","const OpInputList& values_list_in,","const OpInputList& shapes_list_in,","const OpInputList& dense_list_in) {","const auto size = indices_list_in.size();","for (int i = 0; i < size; i++) {","if (!TensorShapeUtils::IsMatrix(indices_list_in[i].shape())) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* seq_lengths_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSeqLengthsTensor,","&seq_lengths_tensor));","const TS* seq_lengths = GetTensorData<TS>(seq_lengths_tensor);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus ReverseSequenceImpl(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* seq_lengths_tensor =","GetInput(context, node, kSeqLengthsTensor);","const TS* seq_lengths = GetTensorData<TS>(seq_lengths_tensor);","","auto* params ="],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    return kTfLiteError;","  }","","      if (!IsConstantTensor(fft_length)) {","    TF_LITE_ENSURE_STATUS(ResizeOutputandTemporaryTensors(context, node));","  } else {","    int num_dims_output = NumDimensions(output);"],"label":0}
{"cve":"CVE-2020-35535","code_chunks":["if (dng_writer == nonDNG) {","switch (tag_id) {","FORC4 cblack[c] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);","TagProcessed = 1;","break;","FORC4 cam_mul[GRBG_2_RGBG(c)] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);"],"label":1}
{"cve":"CVE-2022-0284","code_chunks":["}","colors=picon->colors;","if (transparent != MagickFalse)","{","colors++;","picon->colormap=(PixelInfo *) ResizeQuantumMemory((void **)"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","  switch (input->type) {        AverageEvalFloat<kernel_type>(context, node, params, data, input, output);","      break;","      AverageEvalQuantizedUint8<kernel_type>(context, node, params, data, input,","                                             output);","      break;"],"label":0}
{"cve":"CVE-2021-3968","code_chunks":["VIsual_mode = c;","VIsual_active = TRUE;","VIsual_reselect = TRUE;","trigger_modechanged();","","if (c == Ctrl_V && (get_ve_flags() & VE_BLOCK) && gchar_cursor() == TAB)","{"],"label":1}
{"cve":"CVE-2017-1000251","code_chunks":["rfc.mode            = L2CAP_MODE_ERTM;","rfc.txwin_size      = L2CAP_DEFAULT_RX_WINDOW;","rfc.max_transmit    = L2CAP_DEFAULT_MAX_RECEIVE;","rfc.retrans_timeout = cpu_to_le16(L2CAP_DEFAULT_RETRANS_TO);","rfc.monitor_timeout = cpu_to_le16(L2CAP_DEFAULT_MONITOR_TO);","rfc.max_pdu_size    = cpu_to_le16(L2CAP_DEFAULT_MAX_RX_APDU);"],"label":1}
{"cve":"CVE-2022-35971","code_chunks":["","void Compute(OpKernelContext* ctx) override {","const Tensor& input = ctx->input(0);","const float input_min_float = ctx->input(1).flat<float>()(0);","const float input_max_float = ctx->input(2).flat<float>()(0);","const float requested_output_min_float = ctx->input(3).flat<float>()(0);"],"label":1}
{"cve":"CVE-2018-20786","code_chunks":["INTERNAL void vterm_allocator_free(VTerm *vt, void *ptr)","{","if (ptr)","(*vt->allocator->free)(ptr, vt->allocdata);","}","","void vterm_get_size(const VTerm *vt, int *rowsp, int *colsp)"],"label":0}
{"cve":"CVE-2018-8793","code_chunks":["{","int y;","bmpdata = (uint8 *) xmalloc(width * height * Bpp);","for (y = 0; y < height; y++)","{","in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)],"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);","output->type = input2->type;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty val;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp6_read_bin(fp6_t a, const uint8_t *bin, size_t len) {","if (len != 6 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":0}
{"cve":"CVE-2022-23606","code_chunks":["","            test_server_->waitUntilListenersReady();","    registerTestServerPorts({\"http\"});","  }","","      void verifyGrpcServiceMethod() {","    EXPECT_TRUE(xds_stream_->waitForHeadersComplete());"],"label":0}
{"cve":"CVE-2022-4202","code_chunks":["","#ifdef GPAC_FIXED_POINT","if (val >> (nb_bits-1) ) {","s64 neg = (s64) val - (0x00000001UL << nb_bits);","if (neg < -FIX_ONE \/ 2)","return 2 * gf_divfix(INT2FIX(neg\/2), lsr->res_factor);","return gf_divfix(INT2FIX(neg), lsr->res_factor);"],"label":0}
{"cve":"CVE-2021-24025","code_chunks":["assertx(isStringType(type(function_name)));","strncpy(frame->function,","val(function_name).pstr->data(),","std::min(val(function_name).pstr->size(),","strobelight::kFunctionMax));"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"target\\\" missing from NamedExpr\");","return 1;","}"],"label":1}
{"cve":"CVE-2022-36026","code_chunks":["OP_REQUIRES_OK(ctx, ctx->GetAttr(\"num_bits\", &num_bits_));","OP_REQUIRES(ctx, num_bits_ > 0 && num_bits_ < (signed_input_ ? 62 : 63),","InvalidArgument(\"num_bits is out of range: \", num_bits_,","\" with signed_input_ \", signed_input_));","OP_REQUIRES_OK(ctx, ctx->GetAttr(\"range_given\", &range_given_));",""],"label":0}
{"cve":"CVE-2021-21261","code_chunks":["GVariant              *arg_envs,","guint                  arg_flags,","GVariant              *arg_options)","{","g_autoptr(GError) error = NULL;","ChildSetupData child_setup_data = { NULL };","GPid pid;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["}","if (_PyObject_HasAttrId(obj, &PyId_col_offset)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_col_offset);","if (tmp == NULL) goto failed;","res = obj2ast_int(tmp, &col_offset, arena);"],"label":1}
{"cve":"CVE-2016-8654","code_chunks":["\/* Get a buffer. *\/","if (bufsize > QMFB_SPLITBUFSIZE) {","if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {","\/* We have no choice but to commit suicide in this case. *\/","abort();","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* col2im = nullptr;","if (data->has_col2im) {","node->temporaries->data[data->col2im_index] = data->col2im_id;","col2im = GetTemporary(context, node, user_data->col2im_index);","}","","if (!IsConstantTensor(output_shape)) {"],"label":1}
{"cve":"CVE-2017-12595","code_chunks":["\"parse error while reading object\"));","object = newNull();","}","else","{","done = true;"],"label":1}
{"cve":"CVE-2021-32686","code_chunks":["","\/* Get SSL instance *\/","ossl_ssl = X509_STORE_CTX_get_ex_data(x509_ctx,","SSL_get_ex_data_X509_STORE_CTX_idx());","pj_assert(ossl_ssl);",""],"label":1}
{"cve":"CVE-2023-25136","code_chunks":["compat_pkalg_proposal(struct ssh *ssh, char *pkalg_prop)","{","if (!(ssh->compat & SSH_BUG_RSASIGMD5))","return pkalg_prop;","debug2_f(\"original public key proposal: %s\", pkalg_prop);","if ((pkalg_prop = match_filter_denylist(pkalg_prop, \"ssh-rsa\")) == NULL)","fatal(\"match_filter_denylist failed\");"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["    const CudnnTensorDescriptor& input_nd, const CudnnFilterDescriptor& filter,","    dnn::DataType element_type,","    const dnn::ConvolutionDescriptor& convolution_descriptor,","    const CudnnTensorDescriptor& output_nd, ScratchAllocator* scratch_allocator,","    DeviceMemory<uint8_t>* scratch) {","  std::optional<dnn::AlgorithmDesc> algo_desc = algorithm_config.algorithm();","  CudnnConvolutionDescriptor conv("],"label":0}
{"cve":"CVE-2020-15260","code_chunks":["} else {","\/* Copy the destination host name to TX data *\/","pj_strdup(tdata->pool, &tdata->dest_info.name,","&res_addr->dst_host.addr.host);","","pjsip_endpt_resolve(endpt, tdata->pool, &res_addr->dst_host,"],"label":1}
{"cve":"CVE-2019-17546","code_chunks":["TIFFComputeStrip(tif,row+img->row_offset, 0),","(void**)(&buf),","maxstripsize,","((row + img->row_offset)%rowsperstrip + nrowsub) * scanline)==(tmsize_t)(-1)","&& (buf == NULL || img->stoponerr))","{","ret = 0;"],"label":1}
{"cve":"CVE-2021-30022","code_chunks":["}","","GF_EXPORT","s32 gf_avc_read_sps_bs(GF_BitStream *bs, AVCState *avc, u32 subseq_sps, u32 *vui_flag_pos)","{","return gf_avc_read_sps_bs_internal(bs, avc, subseq_sps, vui_flag_pos, 0);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);"],"label":1}
{"cve":"PYSEC-2022-103","code_chunks":["  }","","  StatusOr<xla::Compiler*> compiler_for_platform =","      xla::Compiler::GetForPlatform(platform.ValueOrDie());","  if (!compiler_for_platform.ok()) {","                                            const Status& status = compiler_for_platform.status();","    if (status.code() == error::NOT_FOUND) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void eb_mul_halve(eb_t r, const eb_t p, const bn_t k) {","int i, j, l, trc, cof;","int8_t naf[RLC_FB_BITS + 1], *_k;","eb_t q, s, t[1 << (EB_WIDTH - 2)];","bn_t n, m;"],"label":1}
{"cve":"CVE-2016-10012","code_chunks":["","if (options.compression == COMP_NONE) {","myproposal[PROPOSAL_COMP_ALGS_CTOS] =","myproposal[PROPOSAL_COMP_ALGS_STOC] = \"none\";","} else if (options.compression == COMP_DELAYED) {","myproposal[PROPOSAL_COMP_ALGS_CTOS] ="],"label":1}
{"cve":"CVE-2018-20458","code_chunks":["RBuffer* dbuf;","char *libname;","","if (!bin) {","return NULL;","}"],"label":0}
{"cve":"CVE-2022-0696","code_chunks":["else if (STRNICMP(attr, \"bar\", len) == 0)","*argt |= EX_TRLBAR;","else","{","int\ti;","char_u\t*val = NULL;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["    }","    if (_PyObject_LookupAttrId(obj, &PyId_col_offset, &tmp) < 0) {","        return 1;","    }","    if (tmp == NULL) {","        PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from excepthandler\");","        return 1;"],"label":0}
{"cve":"CVE-2020-35964","code_chunks":["","static void load_sb_block(AVFormatContext *s, VividasDemuxContext *viv, unsigned expected_size)","{","uint32_t size = 0;","int i;","AVIOContext *pb = 0;"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["switch (tag) {","#ifdef LIBRAW_LIBRARY_BUILD","imgdata.lens.FocalLengthIn35mmFormat = get2();","break;","stmread(imgdata.shootinginfo.BodySerial, len, ifp);","break;"],"label":1}
{"cve":"CVE-2020-1917","code_chunks":["CHECK_HANDLE(handle, f);","int64_t ret = f->write(data, length);","if (ret < 0) {","raise_notice(\"fwrite(): send of %ld bytes failed with errno=%d %s\",","data.size(), errno, folly::errnoStr(errno).c_str());","ret = 0;","}"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* axis;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2020-1919","code_chunks":["","memset(&paddedSalt[1], '$', maxSaltLength - 1);","memcpy(paddedSalt, salt, std::min(maxSaltLength, saltLen));","paddedSalt[saltLen] = '\\0';","","if (php_crypt_blowfish_rn(key, paddedSalt, output, sizeof(output))) {","return strdup(output);"],"label":1}
{"cve":"CVE-2019-11413","code_chunks":["","p = a = text;","while (a < e) {","if (js_regexec(re->prog, a, &m, a > text ? REG_NOTBOL : 0))","break; \/* no match *\/","","b = m.sub[0].sp;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["}","","if (node->inputs->size > 2) {","const TfLiteTensor* bias = GetInput(context, node, kBias);","if (!IsFloatType(bias->type) || !IsConstantTensor(bias)) {","return false;","}"],"label":1}
{"cve":"CVE-2020-1712","code_chunks":["                        if (sd_bus_error_has_name(e, SD_BUS_ERROR_SERVICE_UNKNOWN) ||","                            sd_bus_error_has_name(e, SD_BUS_ERROR_NAME_HAS_NO_OWNER))","                                return -EACCES;","","                        \/* Copy error from polkit reply *\/","                        sd_bus_error_copy(ret_error, e);","                        return -sd_bus_error_get_errno(e);"],"label":0}
{"cve":"CVE-2016-4562","code_chunks":["","weight=ParseCommandOption(MagickWeightOptions,MagickFalse,option);","if (weight == -1)","weight=StringToUnsignedLong(option);","draw_info->weight=(size_t) weight;","}","exception=DestroyExceptionInfo(exception);"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[]={0,0};","","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static int rand_inc(uint8_t *data, int size, int digit) {","int carry = digit;","for (int i = size - 1; i >= 0; i--) {","int16_t s;"],"label":1}
{"cve":"PYSEC-2021-550","code_chunks":["out->emplace_back(metadata.dtype(), metadata.tensor_shape());","TensorBuffer* buffer = DMAHelper::buffer(&out->back());","iov[i].iov_base = buffer->data();","iov[i].iov_len = buffer->size();","} else {","out->emplace_back();"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"PYSEC-2020-125","code_chunks":["","auto do_work = [samples_per_batch, num_elements, &ctx, &means, &stddevs,","&minvals, &maxvals, &gen, &output,","kStdDevsInsideBoundsToUseRandnSampler](int start_batch,","int limit_batch) {","random::PhiloxRandom gen_copy = gen;"],"label":1}
{"cve":"CVE-2018-14359","code_chunks":["    }","","    request_buf.length = mutt_b64_decode(buf2, idata->buf + 2, sizeof(buf2));","    request_buf.value = buf2;","    sec_token = &request_buf;","","    \/* Write client data *\/"],"label":0}
{"cve":"CVE-2018-20179","code_chunks":["","\/* Send an AUrq message (ASN.1 PER) *\/","static void","mcs_send_aurq(void)","{","\tSTREAM s;","\tlogger(Protocol, Debug, \"%s()\", __func__);"],"label":0}
{"cve":"CVE-2021-3331","code_chunks":["ClearSessionPasswords();","FProxyPassword = L\"\";","","DoLoad(Storage, PuttyImport, RewritePassword);","","Storage->CloseSubKey();","}"],"label":1}
{"cve":"CVE-2020-9432","code_chunks":["    return openssl_pushresult(L, ret);","  }","  else","  {","    size_t sig_len;","    const char* sig = luaL_checklstring(L, 2, &sig_len);","    ASN1_OBJECT *obj = openssl_get_asn1object(L, 3, 0);"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["\t\t\t  options, \".gitmodules\");","\tret |= fsck_blobs(&options->gitattributes_found, &options->gitattributes_done,","\t\t\t  FSCK_MSG_GITATTRIBUTES_MISSING, FSCK_MSG_GITATTRIBUTES_BLOB,","\t\t\t  options, \".gitattributes\");","","\treturn ret;","}"],"label":0}
{"cve":"CVE-2016-4805","code_chunks":["","\tif (pch)","\t\treturn pch->file.index;","\treturn -1;","}","","\/*"],"label":0}
{"cve":"CVE-2023-4758","code_chunks":["\t\t\t\tAVI->video_index[k].len = str2ulong_len((unsigned char*)en);","\t\t\t\tAVI->video_index[k].key = str2ulong_key((unsigned char*)en);","\t\t\t\ten += 4;","","\t\t\t\t\t\t\t\tif (AVI->video_index[k].pos-offset == 0 && AVI->video_index[k].len == 0) {","\t\t\t\t\tk--;","\t\t\t\t\tnvi--;"],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["    if (!sget2Rev(CameraInfo + 12)) iCanonLensID = 151;","    else iCanonLensID = 12;","    iCanonMinFocal = 147;","    iCanonMaxFocal = 149;","    break;","    iCanonCurFocal = 30;","    iCanonLensID = 230;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    if (!TfLiteIntArrayEqual(fw_activation_state_quantized->dims,","                             fw_activation_state->dims)) {","      TfLiteIntArray* fw_activation_state_quantized_size =","          TfLiteIntArrayCopy(fw_activation_state->dims);","      TF_LITE_ENSURE_OK(","          context, context->ResizeTensor(context, fw_activation_state_quantized,","                                         fw_activation_state_quantized_size));"],"label":0}
{"cve":"CVE-2019-13308","code_chunks":["progress=0;","#if defined(MAGICKCORE_OPENMP_SUPPORT)","#pragma omp parallel for schedule(static) shared(progress,status) \\","magick_number_threads(images,complex_images,images->rows,1L)","#endif"],"label":1}
{"cve":"CVE-2016-6871","code_chunks":["static String HHVM_FUNCTION(bcpow, const String& left, const String& right,","int64_t scale \/* = -1 *\/) {","scale = adjust_scale(scale);","bc_num first, second, result;","bc_init_num(&first);","bc_init_num(&second);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE(context, node->inputs->size > 0);","","const TfLiteTensor* cond;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &cond));","TF_LITE_ENSURE_EQ(context, cond->type, kTfLiteBool);","TF_LITE_ENSURE_EQ(context, NumElements(cond), 1);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["return kTfLiteError;","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);","TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["RLC_TRY {","fp24_new(r);","fp24_new(s);","for (i = 0; i < (1 << (FP_WIDTH - 2)); i ++) {","fp24_null(t0[i]);","fp24_null(t1[i]);","fp24_new(t0[i]);"],"label":1}
{"cve":"CVE-2022-35972","code_chunks":["AddInputFromArray<qint32>(TensorShape({value_count}),","{-(1 << 23), 0, (1 << 23)});","AddInputFromArray<float>(TensorShape({}), {-256.0f});","AddInputFromArray<float>(TensorShape({}), {256.0f});","AddInputFromArray<float>(TensorShape({}), {0.01f});","AddInputFromArray<float>(TensorShape({}), {1.0f});"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2015-8630","code_chunks":["ret = krb5_dbe_cpw(handle->context, act_mkey, new_ks_tuple, new_n_ks_tuple,","password, 0 \/* increment kvno *\/,","keepold, kdb);","if (ret)","goto done;",""],"label":1}
{"cve":"CVE-2016-3134","code_chunks":["newinfo->hook_entry[h] = hook_entries[h];","if ((unsigned char *)e - base == underflows[h]) {","if (!check_underflow(e)) {","pr_err(\"Underflows must be unconditional and \"","\"use the STANDARD target with \""],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"],"label":1}
{"cve":"CVE-2016-2324","code_chunks":["\t\tif (len && line[len - 1] == '\\n')","\t\t\tline[--len] = 0;","\t\tif (!len)","\t\t\tbreak;","\t\tif (*line == '-') {","\t\t\tif (!strcmp(line, \"--not\")) {","\t\t\t\tflags ^= UNINTERESTING;"],"label":0}
{"cve":"CVE-2022-0284","code_chunks":["      (void) CopyMagickString(buffer,symbol,MagickPathExtent);","      (void) WriteBlobString(image,buffer);","      p+=GetPixelChannels(image);","    }","    (void) FormatLocaleString(buffer,MagickPathExtent,\"\\\"%.1024s\\n\",","      (y == (ssize_t) (image->rows-1) ? \"\" : \",\"));","    (void) WriteBlobString(image,buffer);"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["\tsize_t len = strlen((char *)auth->data);","\tfreezero(auth->data, len);","\tauth->data = NULL;","    }","","    debug_return_int(AUTH_SUCCESS);","}"],"label":0}
{"cve":"CVE-2023-5377","code_chunks":["\t\tif (ptr->layout.definedLayout==0) {","\t\t\tu32 i;","\t\t\tif (ptr->version==1) s->size++;","\t\t\tfor (i=0; i<ptr->layout.channels_count; i++) {","\t\t\t\ts->size+=1;","\t\t\t\tif (ptr->layout.layouts[i].position==126)","\t\t\t\t\ts->size+=3;"],"label":0}
{"cve":"CVE-2020-1712","code_chunks":["\/* This is the second invocation of this function, and","* there's already a response from polkit, let's","* process it *\/","assert(q->reply);","","if (sd_bus_message_is_method_error(q->reply, NULL)) {"],"label":1}
{"cve":"CVE-2020-11087","code_chunks":["\t              context->AuthenticateMessage.cbBuffer);","","\tif (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)","\t\tntlm_print_version_info(&(message->Version));","","\tntlm_print_message_fields(&(message->DomainName), \"DomainName\");","\tntlm_print_message_fields(&(message->UserName), \"UserName\");"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["bool IsPadOpSupported(const TfLiteRegistration* registration,","const TfLiteNode* node, TfLiteContext* context) {","const TfLiteTensor* padding;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &padding));","if (!IsConstantTensor(padding)) {","TF_LITE_KERNEL_LOG(context,","\"%s: Only constant padding is supported for PAD.\","],"label":0}
{"cve":"CVE-2016-4817","code_chunks":["        return 0;","","    { \/* write *\/","        h2o_iovec_t buf = {conn->_write.buf->bytes, conn->_write.buf->size};","        h2o_socket_write(conn->sock, &buf, 1, on_write_complete);","        conn->_write.buf_in_flight = conn->_write.buf;","        h2o_buffer_init(&conn->_write.buf, &wbuf_buffer_prototype);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["error_source_proto.set_error_source(","core::platform::ErrorSourceProto::EAGER_REMOTE_MGR);","error.SetPayload(tensorflow::kErrorSource,","error_source_proto.SerializeAsString());","return error;","}"],"label":1}
{"cve":"CVE-2020-25669","code_chunks":["static void sunkbd_set_leds_beeps(struct sunkbd *sunkbd)","{","serio_write(sunkbd->serio, SUNKBD_CMD_SETLED);","serio_write(sunkbd->serio,"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["const ep4_t q, const bn_t m, ep4_t *t) {","int i, n0, n1, w, gen;","int8_t naf0[2 * RLC_FP_BITS + 1], naf1[2 * RLC_FP_BITS + 1], *_k, *_m;","ep4_t t0[1 << (EP_WIDTH - 2)];","ep4_t t1[1 << (EP_WIDTH - 2)];","size_t l, l0, l1;"],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["todo[i]   = isix++;","todo[i+1] = buffer >> (14-i)*5;","}","for (i=0; i < 16; i+=2)"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["void CLASS rollei_load_raw()","{","uchar pixel[10];","unsigned iten=0, isix, i, buffer=0, todo[16];","","isix = raw_width * raw_height * 5 \/ 8;","while (fread (pixel, 1, 10, ifp) == 10) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["              GetTensorShape(alpha), GetTensorData<float>(alpha),","              GetTensorShape(output), GetTensorData<float>(output),","              ApplyPrelu<float>);","        } else {","          reference_ops::BinaryFunction<float, float, float>(","              GetTensorShape(input), GetTensorData<float>(input),","              GetTensorShape(alpha), GetTensorData<float>(alpha),"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["\tfor (; stack; stack = stack->prev) {","\t\tunsigned i;","\t\tfor (i = stack->num_matches; i > 0; i--) {","\t\t\tconst struct match_attr *ma = stack->attrs[i - 1];","\t\t\tif (ma->is_macro) {","\t\t\t\tunsigned int n = ma->u.attr->attr_nr;","\t\t\t\tif (!all_attrs[n].macro) {"],"label":0}
{"cve":"CVE-2022-0632","code_chunks":["      if (nint(tree->cdr->car->cdr->car) == NODE_BEGIN &&","          tree->cdr->car->cdr->cdr == NULL) {","        genop_1(s, OP_LOADNIL, cursp());","      }","      else {","        idx = scope_body(s, tree->cdr->car, val);","        genop_2(s, OP_EXEC, cursp(), idx);"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["static void ssl_destroy(dtls_srtp *ds, unsigned idx)","{","pj_lock_acquire(ds->ossl_lock);","","\/* Destroy SSL instance *\/","if (ds->ossl_ssl[idx]) {"],"label":1}
{"cve":"CVE-2019-20392","code_chunks":["","            if (!id[0]) {","                \/* the node exists, are we supposed to update it or is it default? *\/","                if (!(options & LYD_PATH_OPT_UPDATE) && (!parent->dflt || (options & LYD_PATH_OPT_DFLT))) {","                    LOGVAL(ctx, LYE_PATH_EXISTS, LY_VLOG_STR, path);","                    return NULL;","                }"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["}","","if (node->inputs->size > 2) {","const TfLiteTensor* bias = GetInput(context, node, kBias);","if (!IsFloatType(bias->type) || !IsConstantTensor(bias)) {","return false;","}"],"label":1}
{"cve":"CVE-2018-20182","code_chunks":["uint32 length;","struct stream packet = *s;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","","if (!s_check_rem(s, length))"],"label":0}
{"cve":"CVE-2022-37032","code_chunks":["\t}","","      \/* Check local capability does not negotiated with remote","         peer. *\/","      if (! strict_capability_same (peer))","\t{","\t  bgp_notify_send (peer, "],"label":0}
{"cve":"CVE-2016-5356","code_chunks":["\ttm.tm_hour = hr;","\ttm.tm_min = min;","\ttm.tm_sec = sec;","\ttm.tm_isdst = -1;","\tphdr->ts.secs = mktime(&tm);","\tphdr->ts.nsecs = csec * 10000000;","\tphdr->len = pkt_len;"],"label":0}
{"cve":"PYSEC-2022-69","code_chunks":["dense_size_ = 1;","for (int i = 0; i < dense_shape_.size(); i++) {","dense_size_ *= dense_shape_[i];","}","","dim_metadata_.resize(2 * format_.size());","for (int i = 0; i < format_.size(); i++) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp4_read_bin(fp4_t a, const uint8_t *bin, int len) {","if (len != 4 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":1}
{"cve":"PYSEC-2020-308","code_chunks":["","m.def(\"TFE_ToDlpackCapsule\", [](py::handle& o) {","PyObject* eager_tensor_pyobject_ptr = o.ptr();","TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);","tensorflow::Safe_TF_StatusPtr status =","tensorflow::make_safe(TF_NewStatus());","void* dlm_ptr = tensorflow::TFE_HandleToDLPack(thandle, status.get());"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","{","node->temporaries->data[1] = op_data->scratch_tensor_index + 1;","TfLiteTensor* scratch_buffer = GetTemporary(context, node, \/*index=*\/1);","const TfLiteTensor* rhs = op_context->rhs;","int rhs_rank = NumDimensions(rhs);","TfLiteIntArray* scratch_buffer_size = TfLiteIntArrayCreate(rhs_rank);"],"label":1}
{"cve":"PYSEC-2021-171","code_chunks":["    OP_REQUIRES_OK(context, context->input(\"sparse_values\", &input_values));","    OP_REQUIRES_OK(context, context->input(\"sparse_shape\", &input_shape));","    OP_REQUIRES_OK(context, GetMap(context, true \/* is_writing *\/, &map));","","    OP_REQUIRES(context, TensorShapeUtils::IsMatrix(input_indices->shape()),","                errors::InvalidArgument(","                    \"Input indices should be a matrix but received shape \","],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (isdigit(c)) {","return syntaxerror(tok,","\"invalid digit '%c' in octal literal\", c);","}","}"],"label":1}
{"cve":"CVE-2021-3796","code_chunks":["* released the line.  At the same time we let know that the","* line will be changed.","*\/","ptr = ml_get_buf(curbuf, curwin->w_cursor.lnum, TRUE);","if (cap->nchar == Ctrl_E || cap->nchar == Ctrl_Y)","{"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {","        constant value;","","        if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {"],"label":0}
{"cve":"CVE-2018-5805","code_chunks":["{  4162462,2338,1779, 1,33, 1, 2, 0,0x94,0,0,\"Kodak\",\"C330\",3160 },","{  2247168,1232, 912, 0, 0,16, 0, 0,0x00,0,0,\"Kodak\",\"C330\" },","{  3370752,1232, 912, 0, 0,16, 0, 0,0x00,0,0,\"Kodak\",\"C330\" },","{  6163328,2864,2152, 0, 0, 0, 0, 0,0x94,0,0,\"Kodak\",\"C603\" },","{  6166488,2864,2152, 0, 0, 0, 0, 0,0x94,0,0,\"Kodak\",\"C603\",3160 },","{   460800, 640, 480, 0, 0, 0, 0, 0,0x00,0,0,\"Kodak\",\"C603\" },"],"label":1}
{"cve":"CVE-2021-4188","code_chunks":["    len = alen - head;","    tail = head + len;","  }","","  \/* size check *\/","  if (mrb_array_p(rpl)) {","    argc = RARRAY_LEN(rpl);"],"label":0}
{"cve":"PYSEC-2021-718","code_chunks":["              next_execution_plan_index_to_plan_allocation_ - 1));","        }","      }","    }","  }","","  return status;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static void eb_mul_rnaf_imp(eb_t r, const eb_t p, const bn_t k) {","int i, l, n;","int8_t naf[RLC_FB_BITS + 1];","eb_t t[1 << (EB_WIDTH - 2)];",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["}","","TfLiteTensor* log_probability_output =","GetOutput(context, node, top_paths * 3);","TfLiteIntArray* log_probability_output_shape_array = TfLiteIntArrayCreate(2);","log_probability_output_shape_array->data[0] = batch_size;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","BYTE cacheVersion;","","if (length < 8)","return FALSE;",""],"label":1}
{"cve":"CVE-2022-23560","code_chunks":["for (; i < orig_idx.size(); i++) {","int orig_dim = traversal_order_[i];","orig_idx[orig_dim] = indices[i];","}","","for (; i < indices.size(); i++) {","const int block_idx = traversal_order_[i] - orig_rank;"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["","for (e = LIST_HEAD(l); e; ELEMENT_NEXT(e)) {","vrrp = ELEMENT_DATA(e);","fprintf(file, \"VRRP Instance: %s\\n\", vrrp->iname);","fprintf(file, \"  Advertisements:\\n\");","fprintf(file, \"    Received: %\" PRIu64 \"\\n\", vrrp->stats->advert_rcvd);"],"label":1}
{"cve":"CVE-2023-5217","code_chunks":["","      ASSERT_EQ(vpx_codec_enc_config_default(iface, &cfg, 0), VPX_CODEC_OK);","                        cfg.g_threads = 4;","      EXPECT_NO_FATAL_FAILURE(","          InitCodec(*iface, kInitWidth, kInitHeight, &enc.ctx, &cfg));","      if (IsVP9(iface)) {","        EXPECT_EQ(vpx_codec_control_(&enc.ctx, VP9E_SET_TILE_COLUMNS, 6),"],"label":0}
{"cve":"CVE-2020-27788","code_chunks":["}","}","}","if ((Elf32_Dyn::DT_INIT==upx_dt_init || !upx_dt_init)","&&  Elf32_Shdr::SHT_DYNAMIC == sh_type) {","unsigned const n = get_te32(&shdr->sh_size) \/ sizeof(Elf32_Dyn);"],"label":1}
{"cve":"CVE-2018-20762","code_chunks":["\t\t\t\tvisible = 1;","\t\t\t} else if (!strcmp(arg, \"-uncache\")) {","\t\t\t\tdo_uncache = GF_TRUE;","\t\t\t}","\t\t\telse if (!strcmp(arg, \"-exit\")) auto_exit = GF_TRUE;","\t\t\telse if (!stricmp(arg, \"-views\")) {","\t\t\t\tviews = argv[i+1];"],"label":0}
{"cve":"CVE-2023-2006","code_chunks":["","\/*"," * Clean up a dead client connections."," *\/","void rxrpc_put_client_conn(struct rxrpc_connection *conn)","{","\tconst void *here = __builtin_return_address(0);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* t = GetInput(context, node, i);","TF_LITE_ENSURE_EQ(context, t->dims->size, t0->dims->size);","TF_LITE_ENSURE_EQ(context, t->type, input_type);","for (int d = 0; d < t0->dims->size; ++d) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["else {","int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}"],"label":1}
{"cve":"CVE-2022-29228","code_chunks":["constexpr const char* GetAccessTokenBodyFormatString =","\"grant_type=authorization_code&code={0}&client_id={1}&client_secret={2}&redirect_uri={3}\";","","}"],"label":1}
{"cve":"CVE-2018-8800","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2020-24870","code_chunks":["for (int i = 0; i < colors; i++)","FORCC","cc[i][c] = tiff_ifd[sidx].dng_color[colidx].calibration[i][c];","}",""],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["","if (factories->find(plugin_id) != factories->end()) {","return tsl::Status(","tsl::error::ALREADY_EXISTS,","absl::StrFormat(\"Attempting to register factory for plugin %s when \"","\"one has already been registered\",","plugin_name));"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["fp8_t l;","ep_t *_p = RLC_ALLOCA(ep_t, m);","ep2_t *_q = RLC_ALLOCA(ep2_t, m);","int i, j, len = bn_bits(a) + 1;","int8_t s[RLC_FP_BITS + 1];","","if (m == 0) {"],"label":1}
{"cve":"CVE-2016-8649","code_chunks":["if (!options)","options = &attach_static_default_options;","","init_pid = lxc_cmd_get_init_pid(name, lxcpath);","if (init_pid < 0) {","ERROR(\"failed to get the init pid\");"],"label":0}
{"cve":"CVE-2021-32439","code_chunks":["\t\t\tstsc->nb_entries += 1;","\t\t}","\t\tnew_chunk_idx = next_entry_first_chunk;","\t}","\tent->isEdited = (Media_IsSelfContained(mdia, StreamDescIndex)) ? 1 : 0;","\tent->sampleDescriptionIndex = StreamDescIndex;","\tent->samplesPerChunk = nb_pack;"],"label":0}
{"cve":"CVE-2016-10012","code_chunks":["sshpkt_put_u8(struct ssh *ssh, u_char val)","{","return sshbuf_put_u8(ssh->state->outgoing_packet, val);","}","","int"],"label":1}
{"cve":"CVE-2018-8791","code_chunks":["{","x = x >> 1;","x = x + 1;","color = -x;","}","else"],"label":1}
{"cve":"PYSEC-2019-234","code_chunks":["            const Index input_total_size = data_size;","  const Index input_outer_dim_size = segment_ids.dimension(0);","  const Index input_inner_dim_size = input_total_size \/ input_outer_dim_size;","","  const int OuterDimTileSize = 8;","","  const Index input_outer_dim_num_stripe ="],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp48_exp_cyc_sps(fp48_t c, const fp48_t a, const int *b, int len, int sign) {","int i, j, k, w = len;","fp48_t t, *u = RLC_ALLOCA(fp48_t, w);","","if (len == 0) {"],"label":1}
{"cve":"CVE-2018-20174","code_chunks":["int i;","uint16 num_updates;","","in_uint16_le(s, num_updates);   \/* rectangles *\/","","for (i = 0; i < num_updates; i++)"],"label":0}
{"cve":"CVE-2020-9432","code_chunks":["  {","    if (exts)","    {","      openssl_sk_x509_extension_totable(L, exts);","    }","    else","      lua_pushnil(L);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp2_exp_cyc_sim(fp2_t e, const fp2_t a, const bn_t b, const fp2_t c, const bn_t d) {","int i, l, n0, n1, l0, l1;","int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], *_k, *_m;","fp2_t r, t0[1 << (EP_WIDTH - 2)];","fp2_t s, t1[1 << (EP_WIDTH - 2)];"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["he C name of the type.","","This"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["struct strbuf dst;","int w = 0;","","strbuf_init(&dst, sb_src->len);","","while (src < end) {"],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["#if defined(CONFIG_FIT)","\/* This cannot be done earlier, we need complete FIT image in RAM first *\/","if (genimg_get_format ((void *)addr) == IMAGE_FORMAT_FIT) {","if (!fit_check_format (fit_hdr)) {","bootstage_error(BOOTSTAGE_ID_NAND_FIT_READ);","puts (\"** Bad FIT image format\\n\");","return 1;"],"label":1}
{"cve":"PYSEC-2020-282","code_chunks":["auto do_work = [&resource, &bucketized_features, &cached_tree_ids,","&cached_node_ids, &output_partial_logits,","&output_node_ids, latest_tree,","this](int32 start, int32 end) {","for (int32 i = start; i < end; ++i) {","int32 tree_id = cached_tree_ids(i);","int32 node_id = cached_node_ids(i);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteIntArray* input_dims = input->dims;","int input_dims_size = input_dims->size;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["keyword_ty o = (keyword_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_RETURN_NONE;","}","","result = PyType_GenericNew(keyword_type, NULL, NULL);"],"label":0}
{"cve":"CVE-2019-13218","code_chunks":["      if (f->current_loc + frame_samples > sample_number) {","         return 1;       } else if (f->current_loc + frame_samples + max_frame_samples > sample_number) {","                  vorbis_pump_first_frame(f);","      } else {","                  f->current_loc += frame_samples;","         f->previous_length = 0;","         maybe_start_packet(f);"],"label":0}
{"cve":"CVE-2022-0695","code_chunks":["return NULL;","}","","if (r_buf_fread_at (bf->buf, 0, (ut8*)&psxheader, \"8c17i\", 1) < sizeof (psxexe_header)) {","eprintf (\"Truncated Header\\n\");","free (sect);","r_list_free (ret);"],"label":1}
{"cve":"CVE-2023-23143","code_chunks":["if (si->slice_type > 9) return -1;","","pps_id = gf_bs_read_ue_log(bs, \"pps_id\");","if ((pps_id<0) || (pps_id > 255))","return -1;","si->pps = &avc->pps[pps_id];","si->pps->id = pps_id;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus LeakyReluEval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output = GetOutput(context, node, 0);","const auto* params =","reinterpret_cast<TfLiteLeakyReluParams*>(node->builtin_data);","const LeakyReluOpData* data ="],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void bn_read_str(bn_t a, const char *str, size_t len, unsigned int radix) {","int sign, i, j;","char c;",""],"label":0}
{"cve":"CVE-2020-15121","code_chunks":["r_return_val_if_fail (s, NULL);","const char *p;","int ret, len = 0, delta = 0;","char *dn;","RBuffer *b = r_buf_new ();","if (!b) {"],"label":0}
{"cve":"CVE-2022-0417","code_chunks":["\t}","\telse if (STRNCMP(p, \"screenline\", 10) == 0)","\t{","\t    p += 10;","\t    culopt_flags_new |= CULOPT_SCRLINE;","\t}",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, SizeOfDimension(filter, 0), 1);","","if (hasBias) {","bias = GetInput(context, node, kBiasTensor);","if (data_type == kTfLiteUInt8 || data_type == kTfLiteInt8) {","TF_LITE_ENSURE_TYPES_EQ(context, bias->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);"],"label":1}
{"cve":"CVE-2019-13134","code_chunks":["default: value=1.0*pixels[i]; break;","}","if (value > max_value)","max_value=value;","else","if (value < min_value)"],"label":1}
{"cve":"CVE-2019-11413","code_chunks":["for (i = 0; i < MAXSUB; ++i)","sub->sub[i].sp = sub->sub[i].ep = NULL;","","return !match(prog->start, sp, sp, prog->flags | eflags, sub);","}","","#ifdef TEST"],"label":1}
{"cve":"CVE-2018-5730","code_chunks":["            has_fail_count) {","            st = krb5_add_int_mem_ldap_mod(&mods, \"krbLoginFailedCount\",","                                           LDAP_MOD_INCREMENT, 1);","            if (st != 0)","                goto cleanup;","        } else {","#endif \/* LDAP_MOD_INCREMENT *\/"],"label":0}
{"cve":"CVE-2021-44109","code_chunks":["","sendmsg.N1N2MessageTransferRspData = &N1N2MessageTransferRspData;","","switch (n2InfoContent->ngap_ie_type) {","if (!n2buf) {","ogs_error(\"[%s] No N2 SM Content\", amf_ue->supi);","return OGS_ERROR;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2020-36177","code_chunks":["#ifdef SHOW_GEN","            printf(\".\");","            fflush(stdout);","#endif","            \/* generate value *\/","            err = wc_RNG_GenerateBlock(rng, buf, primeSz);","            if (err == 0) {"],"label":0}
{"cve":"CVE-2021-31255","code_chunks":["\tgf_list_del(ptr->quality_segment_url_modifiers);","","\twhile (gf_list_count(ptr->fragment_run_entry_table)) {","\t\tgf_free(gf_list_get(ptr->fragment_run_entry_table, 0));","\t\tgf_list_rem(ptr->fragment_run_entry_table, 0);","\t}","\tgf_list_del(ptr->fragment_run_entry_table);"],"label":0}
{"cve":"CVE-2016-4997","code_chunks":["if (!ip_checkentry(&e->ip))","return -EINVAL;","","err = xt_check_entry_offsets(e, e->target_offset, e->next_offset);","if (err)","return err;",""],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["int ahead_tok_kind;","","memcpy(&ahead_tok, tok, sizeof(ahead_tok));","ahead_tok_kind = tok_get(&ahead_tok, &ahead_tok_start,","&ahead_tok_end);",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["FrontendReset(data->state);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* axis;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));","TF_LITE_ENSURE_EQ(context, NumElements(axis), 1);","TF_LITE_ENSURE(context,","axis->type == kTfLiteInt32 || axis->type == kTfLiteInt64);"],"label":0}
{"cve":"CVE-2017-6889","code_chunks":["void CLASS foveon_dp_load_raw()","{","unsigned c, roff[4], row, col, diff;","ushort huff[1024], vpred[2][2], hpred[2];","","fseek (ifp, 8, SEEK_CUR);","foveon_huff (huff);"],"label":0}
{"cve":"CVE-2023-22742","code_chunks":["if (key != NULL) {","cert.type |= GIT_CERT_SSH_MD5;","memcpy(&cert.hash_md5, key, 16);","}","","if (cert.type == 0) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["","\tif (bn_is_zero(b)) {","\t\treturn fp12_set_dig(c, 1);","\t}","","\tif ((bn_bits(b) > RLC_DIG) && ((w << 3) > bn_bits(b))) {","\t\tsize_t _l[4];"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const bool is_soft_nms = NumInputs(node) == 6;","","const TfLiteTensor* input_boxes;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kInputTensorBoxes, &input_boxes));","const int num_boxes = SizeOfDimension(input_boxes, 0);","const TfLiteTensor* input_scores;"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["enum fsck_msg_id msg_missing, enum fsck_msg_id msg_type,","struct fsck_options *options, const char *blob_type)","{","int ret = 0;","struct oidset_iter iter;","const struct object_id *oid;"],"label":0}
{"cve":"PYSEC-2019-234","code_chunks":["return;","}","const auto segment_flat = segment_ids.flat<Index>();","const Index output_rows = internal::SubtleMustCopy(static_cast<Index>(","num_segments.dtype() == DT_INT32 ? num_segments.scalar<int32>()()",": num_segments.scalar<int64>()()));","OP_REQUIRES(context, output_rows >= 0,"],"label":1}
{"cve":"CVE-2022-29340","code_chunks":["if (!skip_logs) {","GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Read Box type %s (0x%08X) at position \"LLU\" has size 0 but is not at root\/file level. Forbidden, skipping end of parent box !\\n\", gf_4cc_to_str(type), type, start));","return GF_SKIP_BOX;","}","return GF_OK;","}"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["void TSL_SetPayload(TSL_Status* s, const char* key, const char* value) {","s->status.SetPayload(key, value);","}"],"label":1}
{"cve":"CVE-2023-22490","code_chunks":["path = get_repo_path(repo_name, &is_bundle);","if (path) {","FREE_AND_NULL(path);","repo = absolute_pathdup(repo_name);","} else if (strchr(repo_name, ':')) {","repo = repo_name;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, input_to_output_weights->dims->size, 2);","TF_LITE_ENSURE_EQ(context, input_to_output_weights->dims->data[1], n_input);","","const TfLiteTensor* recurrent_to_output_weights =","GetInput(context, node, lstm::full::kRecurrentToOutputWeightsTensor);","TF_LITE_ENSURE_EQ(context, recurrent_to_output_weights->dims->size, 2);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2018-14498","code_chunks":["ERREXIT(cinfo, JERR_PPM_TOOLARGE);","*ptr++ = rescale[temp];","temp  = UCH(*bufferptr++) << 8;","temp |= UCH(*bufferptr++);","if (temp > maxval)","ERREXIT(cinfo, JERR_PPM_TOOLARGE);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","output->type = kTfLiteInt32;","","SetTensorToPersistentRo(output);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["ep2_t t;","bn_t _k;","int8_t u, naf[RLC_DIG + 1];","size_t l;","","ep2_null(t);","bn_null(_k);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* indices;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kIndices, &indices));","const TfLiteTensor* updates;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kUpdates, &updates));"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["void strbuf_utf8_align(struct strbuf *buf, align_type position, unsigned int width,","const char *s)","{","size_t slen = strlen(s);","int display_len = utf8_strnwidth(s, slen, 0);","int utf8_compensation = slen - display_len;",""],"label":0}
{"cve":"CVE-2019-13305","code_chunks":["              {","                *q++='\\n';","                (void) WriteBlob(image,q-pixels,pixels);","                q=pixels;","              }","            (void) strncpy((char *) q,buffer,extent);","            q+=extent;"],"label":0}
{"cve":"CVE-2021-32686","code_chunks":["\t * SSL_SESSION_free() may cause crash (due to double free?) on 1.0.x.","\t * As OpenSSL docs specifies to not calling SSL_SESSION_free() after","\t * SSL_free(), perhaps it is safer to obey this, the leak amount seems","\t * to be relatively small (<500 bytes) and should occur once only in","\t * the library lifetime.","#if OPENSSL_VERSION_NUMBER >= 0x10101000L","\tSSL_SESSION_free(ssl_sess);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus EvalImpl(TfLiteContext* context, const TfLiteTensor* input,","TfLiteNode* node) {","std::map<T, int> unique_values;","TfLiteTensor* output_indexes = GetOutput(context, node, 1);","std::vector<T> output_values;","I* indexes = GetTensorData<I>(output_indexes);","const T* data = GetTensorData<T>(input);"],"label":1}
{"cve":"CVE-2023-2839","code_chunks":["ctx->valid_ps_flags |= 1;","break;","list = ctx->pps;","ctx->valid_ps_flags |= 1<<1;","break;","assert(0);"],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["{","uchar pixel[10];","unsigned iten = 0, isix, i, buffer = 0, todo[16];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width > 32767 || raw_height > 32767)","throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"CVE-2018-8800","code_chunks":["{","size = bufsize;","}","else","{","in_uint8s(s, 2);\t\/* pad *\/"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["context->ReportError(context, \"Current does not support more than 1 axis.\");","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);","TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);",""],"label":1}
{"cve":"CVE-2022-2549","code_chunks":["","DUMP_IND(sdump);","gf_fprintf(sdump->trace, \"<fieldValue name=\\\"%s\\\" \", field.name);","if (gf_sg_vrml_is_sf_field(field.fieldType)) {","if (field.fieldType == GF_SG_VRML_SFNODE) {","gf_fprintf(sdump->trace, \">\\n\");"],"label":1}
{"cve":"CVE-2020-27787","code_chunks":["            fo->write(h3, sizeof(*h3));","        }","    }","    else {","        assert(false);      }","}",""],"label":0}
{"cve":"PYSEC-2022-85","code_chunks":["DataType dt = output.dtype();","const auto& original_output_shape = output.shape();","int64_t output_size = DataTypeSize(BaseType(dt));","int num_dims = std::max(1, original_output_shape.dim_size());","auto output_shape = MaybeGetMinimumShape(original_output_shape, num_dims,","found_unknown_shapes);"],"label":1}
{"cve":"CVE-2016-6912","code_chunks":["gdImageWebpCtx(im, out, -1);","out->gd_free(out);","}",""],"label":1}
{"cve":"CVE-2018-8796","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["break;","","","{ if (yang_read_extcomplex_str(trg, ext_instance, \"units\", ext_name, s,","0, LY_STMT_UNITS)) {","YYABORT;","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  const int64_t channel_count = input->dims->data[1];","","  const int64_t output_width = params->spectrogram->output_frequency_channels();","","  float* output_flat = GetTensorData<float>(output);","","  std::vector<float> input_for_channel(sample_count);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["*data->invoke_count += 1;","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const uint8_t* input_data = GetTensorData<uint8_t>(input);","int size = NumElements(input->dims);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["          GetTensorShape(output), GetTensorData<uint8_t>(output));","    }","  } else if (output->type == kTfLiteInt8) {","    reference_ops::ResizeNearestNeighbor(","        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),","        GetTensorShape(size), GetTensorData<int32>(size),","        GetTensorShape(output), GetTensorData<int8_t>(output));"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["                                   context, input1, input2, &output_size));","  } else {","    output_size = TfLiteIntArrayCopy(input1->dims);","  }","","  return context->ResizeTensor(context, output, output_size);","}"],"label":0}
{"cve":"CVE-2019-13217","code_chunks":["c->value_bits = get_bits(f, 4)+1;","c->sequence_p = get_bits(f,1);","if (c->lookup_type == 1) {","c->lookup_values = lookup1_values(c->entries, c->dimensions);","} else {","c->lookup_values = c->entries * c->dimensions;","}"],"label":1}
{"cve":"CVE-2018-16643","code_chunks":["\"UnexpectedEndOfFile\",image->filename);","break;","}","(void) fputc(c,file);","}","(void) fclose(file);","if (c == EOF)"],"label":1}
{"cve":"PYSEC-2022-124","code_chunks":["Populate(src_data, indices, level + 1, prev_idx * shape_of_level + i,","src_data_ptr, dest_data);","}","} else {"],"label":1}
{"cve":"CVE-2020-27787","code_chunks":["unsigned const *const buckets = &hashtab[2];","unsigned const *const chains = &buckets[nbucket]; (void)chains;","","unsigned const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);","if (!nbucket"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":[" * Collect attributes for path into the array pointed to by check->all_attrs."," * If check->check_nr is non-zero, only attributes in check[] are collected."," * Otherwise all attributes are collected."," *\/","static void collect_some_attrs(struct index_state *istate,","\t\t\t       const char *path,","\t\t\t       struct attr_check *check)"],"label":0}
{"cve":"CVE-2021-26927","code_chunks":["samedtype = false;","break;","}","}","","\/* Is the component data type indicated in the IHDR box consistent"],"label":1}
{"cve":"CVE-2018-10539","code_chunks":["}","else {","int bytes_to_copy = (chunk_header.ckSize + 1) & ~1L;","char *buff = malloc (bytes_to_copy);","","if (debug_logging_mode)","error_line (\"extra unknown chunk \\\"%c%c%c%c\\\" of %d bytes\","],"label":1}
{"cve":"CVE-2020-14147","code_chunks":["  else {","    int i;","    for (i = size - 1; i >= 0; i--) {","      buff[i] = (value & 0xff);","      value >>= 8;","    }","  }"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["if (type == OBJ_BLOB)","ret |= fsck_blob(oid, buf, size, options);","else","ret |= report(options,","oid, type,","FSCK_MSG_GITMODULES_BLOB,"],"label":1}
{"cve":"CVE-2022-1035","code_chunks":["assert ( *(GF_Node **)field.far_ptr);","gf_dump_vrml_node(sdump, *(GF_Node **)field.far_ptr, 0, NULL);","return;","list = * ((GF_ChildNodeItem **) field.far_ptr);","assert( list );"],"label":1}
{"cve":"CVE-2018-20176","code_chunks":["STREAM s;","int length;","int tagval;","struct stream packet;","","s = tcp_recv(NULL, 4);"],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["","if (delta_layer)","{","g_debug (\"Using OCI delta %s for layer %s\", delta_layer->digest, layer->digest);","expected_digest = image_config->rootfs.diff_ids[i]; \/* The delta recreates the uncompressed tar so use that digest *\/","}"],"label":1}
{"cve":"CVE-2023-23946","code_chunks":["\tif (!S_ISDIR(iter->base.st.st_mode)) {","\t\tsaved_errno = ENOTDIR;","\t\tgoto error_out;","\t}","","\treturn dir_iterator;",""],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["    }","","    PyErr_Format(PyExc_TypeError, \"expected some sort of cmpop, but got %R\", obj);","    return 1;","}","","int"],"label":0}
{"cve":"CVE-2016-1245","code_chunks":["  return CMD_SUCCESS;","}","","ALIAS (no_ipv6_nd_reachable_time,","       no_ipv6_nd_reachable_time_val_cmd,","       \"no ipv6 nd reachable-time <1-3600000>\",","       NO_STR"],"label":0}
{"cve":"CVE-2021-3331","code_chunks":["    ProtocolDefined = true;","  }","  else if (IsProtocolUrl(Url, SftpProtocol, ProtocolLen))","  {","    AFSProtocol = fsSFTPonly;","    APortNumber = SshPortNumber;","    MoveStr(Url, MaskedUrl, ProtocolLen);"],"label":0}
{"cve":"CVE-2020-5210","code_chunks":["choose_windows(s)","const char *s;","{","register int i;","","for (i = 0; winchoices[i].procs; i++) {","if ('+' == winchoices[i].procs->name[0])"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["    else if (NCH(exc) == 2) {","        expr_ty expression;","        asdl_seq *suite_seq;","","        expression = ast_for_expr(c, CHILD(exc, 1));","        if (!expression)","            return NULL;"],"label":0}
{"cve":"CVE-2023-39354","code_chunks":["UINT32 originalSize)","{","UINT32 left = originalSize;","","while (left > 4)","{"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));",""],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["int fd;","FILE *fp;","struct attr_stack *res;","char buf[2048];","int lineno = 0;","","if (flags & READ_ATTR_NOFOLLOW)"],"label":1}
{"cve":"CVE-2023-25671","code_chunks":["    res_attrs.push_back(output_attrs.getDictionary(context));","    ++res_num;","  }","    for (const std::string& output : signature.control_output()) {","    NamedAttrList output_attrs;","    output_attrs.append(\"tfg.name\", builder.getStringAttr(output));","    res_attrs.push_back(output_attrs.getDictionary(context));"],"label":0}
{"cve":"CVE-2019-15141","code_chunks":["            break;","          if (image->previous == (Image *) NULL)","            {","              status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,","                image->rows);","              if (status == MagickFalse)","                break;"],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["","\/* format list *\/","med->desc.fmt_count = 0;","while (*scanner->curptr == ' ') {","pj_str_t fmt;","","pj_scan_get_char(scanner);"],"label":1}
{"cve":"CVE-2016-5418","code_chunks":["break;","} else {","\/* Note: This effectively disables deep directory","* support when security checks are enabled.","* Otherwise, very long pathnames that trigger","* an error here could evade the sandbox."],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["}","if (tmp == NULL || tmp == Py_None) {","Py_CLEAR(tmp);","arg = NULL;","}","else {"],"label":0}
{"cve":"CVE-2018-8800","code_chunks":["STREAM s;","int length;","int tagval;","struct stream packet;","","s = tcp_recv(NULL, 4);"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"arg\\\" missing from arg\");","return 1;","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["      return EvalForIndexType<float>(context, node, indices);","      return EvalForIndexType<int32_t>(context, node, indices);","      return EvalForIndexType<int64_t>(context, node, indices);","      return EvalForIndexType<int8_t>(context, node, indices);","      return EvalForIndexType<uint8_t>(context, node, indices);","      TF_LITE_KERNEL_LOG(","          context,"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["context->ReportError(context, \"Current does not support more than 1 axis.\");","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);","TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);",""],"label":1}
{"cve":"CVE-2020-1916","code_chunks":["out << formatStaticString(item);","if (RuntimeOption::EvalPerfDataMap) {","auto const len = std::min<size_t>(item->size(), 255);","std::string str(item->data(), len);"],"label":1}
{"cve":"CVE-2018-20786","code_chunks":["create_pty_only(term_T *term, jobopt_T *opt)","{","create_vterm(term, term->tl_rows, term->tl_cols);","","term->tl_job = job_alloc();","if (term->tl_job == NULL)"],"label":1}
{"cve":"CVE-2020-24369","code_chunks":["if (p->lineinfo == NULL)  \/* no debug information? *\/","return 0;","while (oldpc++ < newpc) {","if (p->lineinfo[oldpc] != 0)","return (luaG_getfuncline(p, oldpc - 1) != luaG_getfuncline(p, newpc));","}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\tint d;","","\tif (bit < 0) {","\t\tRLC_THROW(ERR_NO_VALID);","\t\treturn;","\t}",""],"label":0}
{"cve":"CVE-2018-8794","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["                    context->ResizeTensor(context, fw_output, fw_output_size));","","    const bool is_hybrid_op = IsHybridOp(input, fw_input_to_output_weights);","","  TfLiteIntArrayFree(node->temporaries);","  if (is_hybrid_op) {","    node->temporaries = TfLiteIntArrayCreate("],"label":0}
{"cve":"CVE-2024-23327","code_chunks":["}","}","","if (proxy_protocol_header_.has_value() &&","!cb_->filterState().hasData<Network::ProxyProtocolFilterState>(","Network::ProxyProtocolFilterState::key())) {"],"label":1}
{"cve":"PYSEC-2021-400","code_chunks":["                    total_grad += stats_summary[feature_idx](node_id, bucket, 0);","          total_hess += stats_summary[feature_idx](node_id, bucket, 1);","          cum_grad.push_back(total_grad);","          cum_hess.push_back(total_hess);","        }","                if (total_hess < min_node_weight) {","                    continue;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, SizeOfDimension(indices, 0),","SizeOfDimension(weights, 0));","","const TfLiteTensor* value = GetInput(context, node, 4);"],"label":1}
{"cve":"CVE-2022-45909","code_chunks":["        char const *display = NULL;","        url_t url[1];","        msg_param_t const *params = NULL;","        char const *comment = NULL;","        int rc ;","","                s = strncpy( buf, uri.c_str(), MAX_SIP_URI_LEN ) ;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params =","reinterpret_cast<TfLiteResizeBilinearParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2022-41859","code_chunks":["int save, i, rbits, qr_or_qnr, save_is_odd = 0, cmp;","unsigned int skip;","","ctx = HMAC_CTX_new();","if (ctx == NULL) {","DEBUG(\"failed allocating HMAC context\");"],"label":1}
{"cve":"PYSEC-2020-323","code_chunks":["return shape1.Dims(index1);"],"label":1}
{"cve":"CVE-2021-40566","code_chunks":["ctx->hdr_store = gf_realloc(ctx->hdr_store, sizeof(char)*ctx->hdr_store_alloc);","}","memcpy(ctx->hdr_store + ctx->hdr_store_size, data, sizeof(char)*pck_size);","if (byte_offset != GF_FILTER_NO_BO) {"],"label":1}
{"cve":"CVE-2018-10191","code_chunks":["mrb_value *regs_a = regs + a;","struct REnv *e = uvenv(mrb, c);","","if (!e) {"],"label":1}
{"cve":"CVE-2019-13306","code_chunks":["  \/*","    Open output image file.","  *\/","  assert(image_info != (const ImageInfo *) NULL);","  assert(image_info->signature == MagickCoreSignature);","  assert(image != (Image *) NULL);","  assert(image->signature == MagickCoreSignature);"],"label":0}
{"cve":"CVE-2020-14397","code_chunks":["sraSpanRemove(sraSpan *span) {","span->_prev->_next = span->_next;","span->_next->_prev = span->_prev;","}"],"label":1}
{"cve":"CVE-2022-0695","code_chunks":["if (!pe || !pe->b) {","return 0LL;","}","ut8 b[512] = {0};","ZERO_FILL (b);","entry = PE_ (r_bin_pe_get_entrypoint) (pe);","if (r_buf_read_at (pe->b, entry->paddr, b, sizeof (b)) != sizeof (b)) {"],"label":0}
{"cve":"CVE-2022-41895","code_chunks":["errors::InvalidArgument(","\"Paddings must be non-negative: \", before, \", \", after));","","const int64_t out_size = in0.dim_size(d) - (before + after);","if (offset_ == 0) {          OP_REQUIRES(context, before <= out_size && after <= out_size,","errors::InvalidArgument(\"paddings must be no greater \"","\"than the output dimension size: \","],"label":1}
{"cve":"CVE-2018-16393","code_chunks":["\trapdu->apdu.data = &rapdu->sbuf[0];","\trapdu->apdu.resp = &rapdu->rbuf[0];","\trapdu->apdu.resplen = sizeof(rapdu->rbuf);","","\tif (new_rapdu)","\t\t*new_rapdu = rapdu;",""],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","","int","Ta3Tokenizer_Get(struct tok_state *tok, char **p_start, char **p_end)","{","    int result = tok_get(tok, p_start, p_end);","    if (tok->decoding_erred) {"],"label":0}
{"cve":"CVE-2019-20807","code_chunks":["#endif","char_u\t\t*(*fgetline)(int, void *, int),","void\t\t*cookie)\t\t\/* argument for fgetline() *\/","{","char_u\t\t*p;","linenr_T\t\tlnum;","long\t\tn;"],"label":0}
{"cve":"CVE-2022-24754","code_chunks":["if (tp_id == PJSUA_INVALID_ID)","return;","","pj_assert(tp_id >= 0 && tp_id < (int)PJ_ARRAY_SIZE(pjsua_var.tpdata));","tpdata = &pjsua_var.tpdata[tp_id];","","flag = pjsip_transport_get_flag_from_type(tpdata->type);"],"label":1}
{"cve":"CVE-2022-1382","code_chunks":["\t\tbs->paddr = (ut64)se->offset * bin->alignment;","\t\tbs->name = r_str_newf (\"%s.%\" PFMT64d, se->flags & IS_MOVEABLE ? \"MOVEABLE\" : \"FIXED\", bs->paddr);","\t\tbs->is_segment = true;","\t\tr_list_append (segments, bs);","\t}","\tbin->segments = segments;","\treturn segments;"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_key.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/ca_cert.pem\"","exact: localhost","san_type: URI","exact: 127.0.0.1","san_type: IP_ADDRESS"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);","if (*out == NULL) goto failed;"],"label":1}
{"cve":"CVE-2022-0559","code_chunks":["R_API bool r_io_bank_map_add_top(RIO *io, const ut32 bankid, const ut32 mapid) {","\tRIOBank *bank = r_io_bank_get (io, bankid);","\tRIOMap *map = r_io_map_get (io, mapid);","\tr_return_val_if_fail (io && bank && map, false);","\tRIOMapRef *mapref = _mapref_from_map (map);","\tif (!mapref) {","\t\treturn false;"],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["{","if(!image)","throw LIBRAW_EXCEPTION_IO_CORRUPT;","","int bypp = tiff_bps <= 8 ? 1 : 2;","int bufsize = width * 3 * bypp;"],"label":0}
{"cve":"CVE-2016-5842","code_chunks":["{","  assert(image != (Image *) NULL);","  assert(image->signature == MagickCoreSignature);","  if (image->debug != MagickFalse)","    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",","      image->filename);","  if (image->properties == (void *) NULL)"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_frame_acknowledge_capability_set(wStream* s, rdpSettings* settings)","{","if (Stream_GetRemainingLength(s) < 4)","return FALSE;","","if (settings->ServerMode)"],"label":0}
{"cve":"PYSEC-2021-451","code_chunks":["errors::InvalidArgument(","\"Rank of input SparseTensor should be > 1, but saw rank: \", rank));","","TensorShape tensor_input_shape(input_shape->vec<int64>());","gtl::InlinedVector<int64, 8> std_order(rank);","std::iota(std_order.begin(), std_order.end(), 0);","SparseTensor input_st;"],"label":1}
{"cve":"PYSEC-2022-83","code_chunks":["*t = op_def.output_arg(i).experimental_full_type();","","for (int j = 0; j < t->args_size(); j++) {","auto* arg = t->mutable_args(i);","if (arg->type_id() == TFT_VAR) {","const auto* attr = attrs.Find(arg->s());","if (attr == nullptr) {"],"label":1}
{"cve":"CVE-2017-6890","code_chunks":["void CLASS foveon_load_camf()","{","unsigned type, wide, high, i, j, row, col, diff;","ushort huff[258], vpred[2][2] = {{512,512},{512,512}}, hpred[2];","","fseek (ifp, meta_offset, SEEK_SET);","type = get4();  get4();  get4();"],"label":1}
{"cve":"CVE-2020-1916","code_chunks":["    if (esc[c]) {","      *r++ = '\\\\';","      *r++ = hex[c >> 4];","      *r++ = hex[c & 0xf];","    } else {","      *r++ = c;","    }"],"label":0}
{"cve":"CVE-2021-31259","code_chunks":["","\tsinf = isom_get_sinf_entry(trak, sampleDescriptionIndex, GF_ISOM_ADOBE_SCHEME, NULL);","","\tif (!sinf) return GF_BAD_PARAM;","","\tif (outOriginalFormat) {","\t\t*outOriginalFormat = sinf->original_format->data_format;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2022-23562","code_chunks":["errors::InvalidArgument(","\"Requires start >= limit when delta < 0: \", start, \"\/\", limit));","}","int64_t size = 0;","if (std::is_integral<T>::value) {","size = static_cast<int64_t>("],"label":1}
{"cve":"CVE-2017-16355","code_chunks":["inferApplicationInfo(info);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["    } else if (TYPE(CHILD(n, 1)) == classdef) {","      thing = ast_for_classdef(c, CHILD(n, 1), decorator_seq);","    } else if (TYPE(CHILD(n, 1)) == async_funcdef) {","      thing = ast_for_async_funcdef(c, CHILD(n, 1), decorator_seq);","    }","    return thing;","}"],"label":0}
{"cve":"PYSEC-2021-845","code_chunks":["","void ComputeAsync(OpKernelContext* context, DoneCallback done) final {","const Tensor& input = context->input(0);","const Tensor& rhs = context->input(1);","const int ndims = input.dims();","const int64 n = input.dim_size(ndims - 1);"],"label":0}
{"cve":"CVE-2020-36254","code_chunks":["size = size * 10 + (*cp++ - '0');","if (*cp++ != ' ')","SCREWUP(\"size not delimited\");","if ((strchr(cp, '\/') != NULL) || (strcmp(cp, \"..\") == 0)) {","run_err(\"error: unexpected filename: %s\", cp);","exit(1);","}"],"label":1}
{"cve":"CVE-2023-24824","code_chunks":["cmark_node_type cmark_syntax_extension_add_node(int is_inline) {","cmark_node_type *ref = !is_inline ? &CMARK_NODE_LAST_BLOCK : &CMARK_NODE_LAST_INLINE;","","if ((*ref & CMARK_NODE_VALUE_MASK) >= CMARK_NODE_TYPE_BLOCK_LIMIT) {","assert(false);","return (cmark_node_type) 0;","}"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["    node->temporaries->data[kFwRowSums] =","        op_data->scratch_tensor_index + kFwRowSums;","    TfLiteTensor* fw_row_sums;","    TF_LITE_ENSURE_OK(","        context, GetTemporarySafe(context, node, kFwRowSums, &fw_row_sums));","    fw_row_sums->type = kTfLiteInt32;","    fw_row_sums->allocation_type = kTfLiteArenaRwPersistent;"],"label":0}
{"cve":"CVE-2017-6889","code_chunks":["void CLASS foveon_dp_load_raw()","{","unsigned c, roff[4], row, col, diff;","ushort huff[512], vpred[2][2], hpred[2];","","fseek (ifp, 8, SEEK_CUR);","foveon_huff (huff);"],"label":1}
{"cve":"CVE-2018-8799","code_chunks":["int i;","uint16 num_updates;","","in_uint16_le(s, num_updates);   \/* rectangles *\/","","for (i = 0; i < num_updates; i++)"],"label":0}
{"cve":"CVE-2017-6887","code_chunks":["#endif","            ab[c] = getreal(type);","      }","      break;","    case 50728: \/* AsShotNeutral *\/","      FORCC asn[c] = getreal(type);","      break;"],"label":0}
{"cve":"PYSEC-2020-258","code_chunks":["      *ret = Tensor(requested_dtype == DT_INVALID ? DT_FLOAT : requested_dtype,","                    state.inferred_shape);","      return Status::OK();","","      return errors::Unimplemented(\"Missing Python -> Tensor conversion for \",","                                   DataTypeString(state.inferred_dtype));","  }"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      }","","            TF_LITE_ENSURE_OK(context, PopulatePrecomputedZPTimesWeightsWithBias(","                                     context, op_data, node));","    } else {","                  PopulateQuantizedLstmParams8x8_8(context, node,","                                       &op_data->integer_lstm_param);"],"label":0}
{"cve":"CVE-2021-41197","code_chunks":["      }","    };","","    RunIfBoxIndexIsValid<Device>(context, box_index.tensor<int32, 1>(),","                                 batch_size, std::move(compute_callback),","                                 std::move(done));","  }"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["","                if (kwarg)","                    arg = kwarg;","","                \/* arg will be equal to the last argument processed *\/","                arg->type_comment = NEW_TYPE_COMMENT(ch);","                i += 1;"],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["WCHAR* pUnicodeString = new WCHAR[lCount + 1];","WCHAR* pStart = pUnicodeString;","","LONG lIndex = 0;","while (lIndex < lCount)","{"],"label":0}
{"cve":"CVE-2023-4322","code_chunks":["static void cmd_sdbk(Sdb *db, const char *input) {","const char *arg = (input[0] == ' ')? input + 1: \"*\";","char *out = sdb_querys (db, NULL, 0, arg);","if (out) {","r_cons_println (out);","free (out);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["return PyBytes_DecodeEscape(s, len, NULL, 0, NULL);","}"],"label":1}
{"cve":"CVE-2023-44488","code_chunks":["        2 * mi_cols_aligned_to_sb(cm->mi_cols) * MAX_MB_PLANE,","        sizeof(*cm->above_context));","    if (!cm->above_context) goto fail;","","    vpx_free(cm->above_seg_context);","    cm->above_seg_context = (PARTITION_CONTEXT *)vpx_calloc(","        mi_cols_aligned_to_sb(cm->mi_cols), sizeof(*cm->above_seg_context));"],"label":0}
{"cve":"CVE-2018-20181","code_chunks":["\tlast_line = 0;","\tindexh = 0;","\twhile (indexh < height)","\t{","\t\tout = (org_out + width * height * 4) - ((indexh + 1) * width * 4);","\t\tcolor = 0;","\t\tthis_line = out;"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["\t\t\tstats_file, errno, strerror(errno));","\t\treturn;","\t}","","","\tLIST_FOREACH(vrrp_data->vrrp, vrrp, e) {","\t\tfprintf(file, \"VRRP Instance: %s\\n\", vrrp->iname);"],"label":0}
{"cve":"PYSEC-2020-114","code_chunks":["  dlm_tensor->deleter = &DLManagedTensorDeleter;","  dlm_tensor->dl_tensor.ctx = tf_dlm_context;","  int ndim = tensor->dims();","  dlm_tensor->dl_tensor.ndim = ndim;","  dlm_tensor->dl_tensor.data = tf_dlm_data;","  dlm_tensor->dl_tensor.dtype = tf_dlm_type;",""],"label":0}
{"cve":"CVE-2022-21722","code_chunks":["    PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_common), PJ_ETOOSMALL);","","    \/* RPSI uses pt==RTCP_PSFB and FMT==3 *\/","    if (hdr->pt != RTCP_PSFB || hdr->count != 3)","\treturn PJ_ENOTFOUND;","","    rpsi_len = (pj_ntohs((pj_uint16_t)hdr->length)-2) * 4;"],"label":0}
{"cve":"CVE-2023-46728","code_chunks":["    if (range) {","        debugs(73, 3, static_cast<void*>(range) << \" for \" << reason);","        delete range;","        range = nullptr;","    }","                }",""],"label":0}
{"cve":"CVE-2018-8795","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["return NULL;","","i += 2; \/* the star and the name *\/","if (i < NCH(n) && TYPE(CHILD(n, i)) == COMMA)","i += 1; \/* the comma, if present *\/","","if (i < NCH(n) && TYPE(CHILD(n, i)) == TYPE_COMMENT) {"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["return ::tsl::OkStatus();","} else if (result == CUDA_ERROR_NOT_FOUND) {","return tsl::Status(","tsl::error::NOT_FOUND,","absl::StrFormat(\"not a device pointer %p; %s\",","reinterpret_cast<void*>(dptr), ToString(result)));","}"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["}","strbuf_addbuf(sb, &local_sb);","} else {","int sb_len = sb->len, offset = 0;","if (c->flush_type == flush_left)","offset = padding - len;","else if (c->flush_type == flush_both)"],"label":1}
{"cve":"CVE-2018-20181","code_chunks":["uint32 length;","struct stream packet = *s;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","","if (!s_check_rem(s, length))"],"label":0}
{"cve":"CVE-2022-28927","code_chunks":["filtered_nodelist.emplace_back(rule.substr(2));","}","#ifndef NO_JS_RUNTIME","else if(startsWith(rule, \"script:\"))","{","script_safe_runner(ext.js_runtime, ext.js_context, [&](qjs::Context &ctx){","std::string script = fileGet(rule.substr(7), true);"],"label":1}
{"cve":"CVE-2023-45145","code_chunks":["","if (af == AF_INET6 && anetV6Only(err,s) == ANET_ERR) goto error;","if (anetSetReuseAddr(err,s) == ANET_ERR) goto error;","if (anetListen(err,s,p->ai_addr,p->ai_addrlen,backlog) == ANET_ERR) s = ANET_ERR;","goto end;","}","if (p == NULL) {"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["return tsl::errors::Internal(\"Unimplemented activation mode \",","dnn::ActivationModeString(activation_mode));","}","","auto act_desc = cudnn_frontend::PointWiseDescBuilder()",".setMode(cudnn_activation_mode)"],"label":1}
{"cve":"CVE-2018-12321","code_chunks":["ut8 pos = (offset+1)%4 ? 1 + 4 - (offset+1)%4 : 1;","","if (op_byte == 0xaa) {","if (pos + 8 + 8 > len) {","return op->size;","}","const int min_val = (ut32)(UINT (data, pos + 4));"],"label":0}
{"cve":"CVE-2022-0519","code_chunks":["\tut64 offset = 0;","\tif (sz < 8) {","\t\treturn NULL;","\t}","\tRBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);","\toffset += 6;","\tif (attr && sz >= offset) {"],"label":0}
{"cve":"CVE-2023-2837","code_chunks":["assert(ent);","\/*truncate input buffer*\/","parser->line_size -= (u32) strlen(entityStart);","entityStart[0] = 0;","","parser->in_entity = GF_FALSE;"],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["              imgdata.process_warnings |= LIBRAW_WARN_NO_METADATA ;","      }","#endif","  if (!timestamp)","      {","#ifdef LIBRAW_LIBRARY_BUILD","          imgdata.process_warnings |= LIBRAW_WARN_NO_METADATA ;"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["goto error;","}","","make_canonical(ctx, LY_TYPE_INT64, value_, &num, NULL);","","if (store) {","\/* store the result *\/"],"label":1}
{"cve":"CVE-2018-12326","code_chunks":["if (config.eval_ldb) return;","if (config.hostsocket != NULL)","len = snprintf(config.prompt,sizeof(config.prompt),\"redis %s\",","config.hostsocket);","else","len = anetFormatAddr(config.prompt, sizeof(config.prompt),"],"label":1}
{"cve":"CVE-2017-12663","code_chunks":["sizeof(*colormap));","if ((pixels == (unsigned char *) NULL) ||","(colormap == (unsigned char *) NULL))","ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"],"label":1}
{"cve":"CVE-2017-12664","code_chunks":["              (void) WriteBlobByte(image,ScaleQuantumToChar(ClampToQuantum(","                image->colormap[count].blue)));","            }","            offset+=2+count*4;","          }","      else  \/* Map colors to Palm standard colormap *\/","        {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_EQ(context, input_to_output_weights->dims->size, 2);","  TF_LITE_ENSURE_EQ(context, input_to_output_weights->dims->data[1], n_input);","","  const TfLiteTensor* recurrent_to_output_weights;","  TF_LITE_ENSURE_OK(","      context,","      GetInputSafe(context, node, lstm::full::kRecurrentToOutputWeightsTensor,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["GetTemporary(context, node, data->scaling_factors_index));","int32_t* input_offset_ptr = GetTensorData<int32_t>(","GetTemporary(context, node, data->input_offset_index));","","for (int b = 0; b < batch_size; ++b) {","const int offset = b * input_size;"],"label":1}
{"cve":"CVE-2021-3331","code_chunks":["void __fastcall TSessionData::DoLoad(THierarchicalStorage * Storage, bool PuttyImport, bool & RewritePassword)","{","","PortNumber = Storage->ReadInteger(L\"PortNumber\", PortNumber);"],"label":1}
{"cve":"CVE-2022-39347","code_chunks":["\t\t\tif (file->file_handle != INVALID_HANDLE_VALUE)","\t\t\t{","\t\t\t\tCloseHandle(file->file_handle);","\t\t\t\tfile->file_handle = INVALID_HANDLE_VALUE;","\t\t\t}","","#endif"],"label":0}
{"cve":"CVE-2023-47100","code_chunks":["* all of them are considered to be for that package.  For the purposes of","* parsing the rest of the property, strip it off *\/","if (non_pkg_begin == STRLENs(\"utf8::\") && memBEGINPs(name, name_len, \"utf8::\")) {","lookup_name +=  STRLENs(\"utf8::\");","j -=  STRLENs(\"utf8::\");","equals_pos -=  STRLENs(\"utf8::\");"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","DynamicBuffer buf;","StringRef str_ref = GetString(input, 0);","buf.AddString(str_ref);","buf.WriteToTensorAsVector(output);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* begin = GetInput(context, node, kBeginTensor);","const TfLiteTensor* size = GetInput(context, node, kSizeTensor);"],"label":1}
{"cve":"CVE-2020-28196","code_chunks":["*seq_out = NULL;","*count_out = 0;","while (len > 0) {","ret = get_tag(asn1, len, &t, &contents, &clen, &asn1, &len);","if (ret)","goto error;","if (!check_atype_tag(elemtype, &t)) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"ifs\\\" missing from comprehension\");","return 1;","}","else {","int res;"],"label":0}
{"cve":"CVE-2019-20392","code_chunks":["if (lys_getnext_data(module, lys_parent(siblings), name, strlen(name), LYS_ANYDATA, &snode) || !snode) {","LOGERR(siblings->module->ctx, LY_EINVAL, \"Failed to find \\\"%s\\\" as a sibling to \\\"%s:%s\\\".\",","name, lys_node_module(siblings)->name, siblings->name);","return NULL;"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["      filename: {{ test_rundir }}\/test\/config\/integration\/certs\/clientkey.pem",")EOF\";","","  std::string target;","  if (mtls) {","    target = yaml_mtls;","  } else {"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["  stride2 = trans_b ? ldb : 1;","  std::vector<int64_t> b_strides = {k * n, stride1, stride2};","  TF_ASSIGN_OR_RETURN(auto tensor_b,","                      CreateCudnnTensor(b_dims, b_strides, 'b', input_type,","                                        vector_size, vector_dim));","","  std::vector<int64_t> c_dims = {1, m, n};"],"label":0}
{"cve":"CVE-2020-12279","code_chunks":["void test_checkout_nasty__git_tilde1(void)","{","test_checkout_fails(\"refs\/heads\/git_tilde1\", \".git\/foobar\");","test_checkout_fails(\"refs\/heads\/git_tilde1\", \"git~1\/foobar\");","}","","\/* A tree that contains an entry \"git~2\", when we have forced the short"],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["","int key_size;","if (key.size() > max_key_size) {","raise_warning(\"Key size too large; supplied length: %d, max: %d\",","key.size(), max_key_size);","key_size = max_key_size;","} else {"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["arg_ty value;","res = obj2ast_arg(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"arguments field \\\"args\\\" changed size during iteration\");","goto failed;"],"label":1}
{"cve":"CVE-2020-5210","code_chunks":["    struct passwd *pw = get_unix_pw();","","    if (pw && sysopt.wizards && sysopt.wizards[0]) {","        if (check_user_string(sysopt.wizards))","            return TRUE;","    }","    wiz_error_flag = TRUE; \/* not being allowed into wizard mode *\/"],"label":0}
{"cve":"CVE-2022-31624","code_chunks":["result= write_log(message, csize + 1, take_lock);","if (message == big_buffer)","flogger_mutex_unlock(&lock_bigbuffer);","","return result;","}"],"label":1}
{"cve":"CVE-2021-31258","code_chunks":["\tif (e) return e;","","\t\tslc = NULL;","\t*slConfig = NULL;","\tswitch (entry->type) {","\t\tif (((GF_MPEGSampleEntryBox *)entry)->esd->desc->slConfig->predefined != SLPredef_MP4) return GF_BAD_PARAM;","\t\tslc = ((GF_MPEGSampleEntryBox *)entry)->slc;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["if (is_hybrid_op) {","op_data->compute_row_sums = true;","node->temporaries->data[1] = scratch_tensor_index + 1;","TfLiteTensor* input_quantized = GetTemporary(context, node, \/*index=*\/1);","input_quantized->type = weights_feature->type;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2021-42917","code_chunks":["  std::string strMMS;","  while( stream.peek() != '\\n' && stream.peek() != '\\r' )","    strMMS += stream.get();","","  CLog::Log(LOGINFO, \"Adding element {}\", strMMS);","  CFileItemPtr newItem(new CFileItem(strMMS));","  newItem->SetPath(strMMS);"],"label":0}
{"cve":"CVE-2020-9433","code_chunks":["  return openssl_push_check_result(L, ret, NULL);","}","#endif","","IMP_LUA_SK(X509, x509)","","#if 0"],"label":0}
{"cve":"CVE-2021-32139","code_chunks":["compressed_size = (u32) (size - 8);","gf_bs_read_data(bs, compb, compressed_size);","e = gf_gz_decompress_payload(compb, compressed_size, &uncomp_data, &osize);","if (e) {","GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Failed to uncompress payload for box type %s (0x%08X)\\n\", gf_4cc_to_str(otype), otype));","return e;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\teb_frb(t[0], t[1]);","\t\teb_frb(t[0], t[0]);","\t\teb_sub(t[1], t[0], t[1]);","","\t\teb_frb(t[0], t[2]);","\t\teb_frb(t[0], t[0]);","\t\teb_add(t[2], t[0], t[2]);"],"label":0}
{"cve":"CVE-2016-6823","code_chunks":["bmp_info.width=(ssize_t) image->columns;","bmp_info.height=(ssize_t) image->rows;","bmp_info.planes=1;","bmp_info.image_size=(unsigned int) (bytes_per_line*image->rows);","bmp_info.file_size+=bmp_info.image_size;","bmp_info.x_pixels=75*39;","bmp_info.y_pixels=75*39;"],"label":1}
{"cve":"PYSEC-2021-734","code_chunks":["  void Compute(OpKernelContext* context) override {","    INDEX_TYPE first_dimension;","    const Tensor first_partition_tensor =","        context->input(kFirstPartitionInputIndex);","    OP_REQUIRES(context, first_partition_tensor.NumElements() > 0,","                errors::InvalidArgument(\"Invalid first partition input. Tensor \"","                                        \"requires at least one element.\"));"],"label":0}
{"cve":"CVE-2017-12932","code_chunks":[],"label":1}
{"cve":"CVE-2018-20178","code_chunks":["\t\t\t\t\tcolor = CVAL(in);","\t\t\t\t\t*out = color;","\t\t\t\t\tout += 4;","\t\t\t\t\tindexw++;","\t\t\t\t\tcollen--;","\t\t\t\t}","\t\t\t\twhile (indexw < width && replen > 0)"],"label":0}
{"cve":"CVE-2022-1115","code_chunks":["      return;","","    p=q;","    count++;","","    while ((isspace((int) ((unsigned char) *p)) != 0) || (*p == ','))","      p++;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int len, dlen = strlen(data), result = 1;","uint8_t *buf = RLC_ALLOCA(uint8_t, 1 + 8 * RLC_PC_BYTES + dlen);","","g1_null(g1);","g2_null(g2);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["","cf.cf_flags = flags | PyCF_SOURCE_IS_UTF8;","","if (flags &","~(PyCF_MASK | PyCF_MASK_OBSOLETE | PyCF_DONT_IMPLY_DEDENT | PyCF_ONLY_AST))","{"],"label":1}
{"cve":"CVE-2022-39347","code_chunks":["return NULL;","","file = (DRIVE_FILE*)calloc(1, sizeof(DRIVE_FILE));"],"label":1}
{"cve":"CVE-2019-3556","code_chunks":["switch (m_kind) {","for (auto& it : *m_staticCache) {","folly::writeFull(file.fd(), it.first->data(), it.first->size());","folly::writeFull(file.fd(), \"\\n\", 1);","}","break;","{"],"label":0}
{"cve":"CVE-2022-31307","code_chunks":["njs_string_prop_t   string_prop;","njs_object_value_t  *object;","","value = args->value;","from = args->from;","to = args->to;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["OpContext op_context(context, node);","OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","const TfLiteTensor* lhs;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputLHSTensor, &lhs));","const TfLiteTensor* rhs;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params =","reinterpret_cast<TfLiteResizeNearestNeighborParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2021-40573","code_chunks":["\t\t}","\t\tstring_len++;","\t}","\tgf_free(buf);","\tif (!ptr->item_name || (!ptr->content_type && ptr->version < 2)) {","\t\tGF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[isoff] Infe without name or content type !\\n\"));","\t}"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["","\/* static *\/ tsl::StatusOr<int> GpuDriver::GetMultiprocessorCount(","CUdevice device) {","return GetSimpleAttribute<int>(device,","CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT);","}"],"label":1}
{"cve":"CVE-2016-10190","code_chunks":["int64_t target = h->is_streamed ? 0 : s->off;","","if (s->reconnect_delay > s->reconnect_delay_max)","return AVERROR(EIO);","","av_log(h, AV_LOG_INFO, \"Will reconnect at %\"PRId64\" error=%s.\\n\", s->off, av_err2str(read_ret));"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["col = (col\/tok->tabsize + 1) * tok->tabsize;","altcol = (altcol\/tok->alttabsize + 1)","* tok->alttabsize;","}","else if (c == '\\014')  {\/* Control-L (formfeed) *\/","col = altcol = 0; \/* For Emacs users *\/"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["          TfLiteTensor* out;","          TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out));","          int num = 1;","          for (int i = 0; i < a0->dims->size; ++i) {","            num *= a0->dims->data[i];","          }","          for (int i = 0; i < num; i++) {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"CVE-2017-11142","code_chunks":["}","}","","if (!eof) {","memmove(ZSTR_VAL(vars->str.s), vars->ptr, ZSTR_LEN(vars->str.s) = vars->end - vars->ptr);","}","return SUCCESS;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static void eb_mul_sim_plain(eb_t r, const eb_t p, const bn_t k, const eb_t q,","const bn_t m, const eb_t *t) {","int i, l, l0, l1, n0, n1, w, g;","int8_t naf0[RLC_FB_BITS + 1], naf1[RLC_FB_BITS + 1], *_k, *_m;","eb_t t0[1 << (EB_WIDTH - 2)];","eb_t t1[1 << (EB_WIDTH - 2)];"],"label":1}
{"cve":"CVE-2020-36316","code_chunks":["bn_read_bin(t, mask, k_len - RLC_MD_LEN - 1);","t->dp[0] ^= 0x01;","\/* m_len is now the size in bits of the modulus. *\/","bn_lsh(t, t, 8 * RLC_MD_LEN);","bn_add(m, t, m);","bn_lsh(m, m, 8);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["holdp = Stream_Pointer(s);","","if (!gcc_read_user_data_header(s, &type, &blockLength))","{","WLog_ERR(TAG, \"gcc_read_server_data_blocks: gcc_read_user_data_header failed\");"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["a->attr_nr = hashmap_get_size(&g_attr_hashmap.map);","","attr_hashmap_add(&g_attr_hashmap, a->name, namelen, a);","assert(a->attr_nr =="],"label":1}
{"cve":"CVE-2021-3772","code_chunks":["\t\t\t\t\t   const struct sctp_association *asoc,","\t\t\t\t\t   const union sctp_subtype type,","\t\t\t\t\t   void *arg,","\t\t\t\t\t   struct sctp_cmd_seq *commands)","{","\tstruct sctp_transport *transport = arg;",""],"label":0}
{"cve":"CVE-2023-23456","code_chunks":["    }","","    wrkmem[relocsize++] = 0;","    set_le32(wrkmem + relocsize, ih.entry);     relocsize += 4;","    set_le32(wrkmem + relocsize, relocsize + 4);","    relocsize += 4;","    memcpy(ibuf + usize, wrkmem, relocsize);"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["{","if(!image)","throw LIBRAW_EXCEPTION_IO_CORRUPT;","","int bypp = tiff_bps <= 8 ? 1 : 2;","int bufsize = width * 3 * bypp;"],"label":0}
{"cve":"CVE-2023-30188","code_chunks":["\t\targv[1] = p2.m_internal->m_value;","\t\targv[2] = p3.m_internal->m_value;","\t\targv[3] = p4.m_internal->m_value;","","\t\tret.m_internal->m_context = m_internal->m_context;","\t\tret.m_internal->m_value = m_internal->m_value->toObjectSmart()->call_func(sPropA.c_str(), 4, argv);","\t\treturn ret;"],"label":0}
{"cve":"CVE-2016-8654","code_chunks":["","\t} else {","","\t\tif (parity) {","\t\t\tlptr = &a[0];","\t\t\t\t\t\tlptr[0] = jpc_fix_asr(lptr[0], 1);","\t\t}"],"label":0}
{"cve":"CVE-2021-31257","code_chunks":["","streamType = 0;","esd = gf_isom_get_esd(file, i+1, 1);","if (esd) {","streamType = esd->decoderConfig->streamType;","if (!prev_ocr) {","prev_ocr = esd->OCRESID;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","OpContext op_context(context, node);","OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","const TfLiteTensor* lhs = GetInput(context, node, kInputLHSTensor);","const TfLiteTensor* rhs = GetInput(context, node, kInputRHSTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["                    GetInputSafe(context, node, kInputState, &input_state));","  TF_LITE_ENSURE_EQ(context, input_state->dims->size, 2);","  TF_LITE_ENSURE_EQ(context, input_state->dims->data[0], n_batch);","  const int n_output = input_state->dims->data[1];","","    const TfLiteTensor* gate_weight;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","if (tmp == NULL || tmp == Py_None) {","Py_CLEAR(tmp);","arg = NULL;","}","else {"],"label":0}
{"cve":"CVE-2019-17177","code_chunks":["\t\t\tif (arg->Flags == COMMAND_LINE_VALUE_BOOL)","\t\t\t\tfprintf(fp, \" (default:%s)\", arg->Default ? \"on\" : \"off\");","\t\t\telse if (arg->Default)","\t\t\t{","\t\t\t\tchar* value = tr_esc_str((LPSTR) arg->Default, FALSE);","\t\t\t\tfprintf(fp, \" (default:%s)\", value);","\t\t\t\tfree(value);"],"label":0}
{"cve":"PYSEC-2021-827","code_chunks":["    auto group_size = group_size_t.unaligned_flat<int32>()(0);","    if (group_size <= 0) {","      return errors::InvalidArgument(","          \"group_size must be positive integer but got \", group_size);","    }","    return Status::OK();","  }"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["input_quantized->type = kTfLiteInt8;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2018-12561","code_chunks":["              0, false, isConnected());","}","","bool RemoteFsDevice::canPlaySongs() const","{","    return details.isLocalFile() || HttpServer::self()->isAlive();","}"],"label":0}
{"cve":"PYSEC-2022-49","code_chunks":["bool found_unknown_shapes = false;","const auto& op_info = op_context.op_info;","TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,","OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,","&found_unknown_shapes));","int per_output_ops = dims.kx * dims.ky == 1 ? 1 : dims.kx * dims.ky - 1;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["goto failed;","}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["    0,                                  \/* tp_setattro *\/","    0,                                  \/* tp_as_buffer *\/","    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC |","        Py_TPFLAGS_BASETYPE,            \/* tp_flags *\/","    zip_doc,                            \/* tp_doc *\/","    (traverseproc)zip_traverse,    \/* tp_traverse *\/","    0,                                  \/* tp_clear *\/"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["            len = PyList_GET_SIZE(tmp);","            decorator_list = _Ta3_asdl_seq_new(len, arena);","            if (decorator_list == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;"],"label":0}
{"cve":"CVE-2022-39347","code_chunks":["BOOL drive_file_query_directory(DRIVE_FILE* file, UINT32 FsInformationClass, BYTE InitialQuery,","const WCHAR* path, UINT32 PathLength, wStream* output)","{","size_t length;","WCHAR* ent_path;"],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["addDummyHeaders(headers, state.range(0));","uint64_t size = 0;","for (auto _ : state) {","size += headers.byteSize().value();","}","benchmark::DoNotOptimize(size);","}"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["bssl::UniquePtr<X509> cert = readCertFromFile(TestEnvironment::substitute(","\"{{ test_rundir \"","\"}}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_multiple_dns_cert.pem\"));","envoy::type::matcher::v3::StringMatcher matcher;","matcher.set_exact(\"api.example.com\");","std::vector<SanMatcherPtr> subject_alt_name_matchers;"],"label":0}
{"cve":"CVE-2022-35940","code_chunks":["T limit = broadcast_limits ? limits(0) : limits(row);","T delta = broadcast_deltas ? deltas(0) : deltas(row);","OP_REQUIRES(context, delta != 0, InvalidArgument(\"Requires delta != 0\"));","rt_nested_splits(row + 1) ="],"label":1}
{"cve":"CVE-2018-20406","code_chunks":["_Unpickler_MemoGet(UnpicklerObject *self, Py_ssize_t idx)","{","if (idx < 0 || idx >= self->memo_size)","return NULL;","","return self->memo[idx];"],"label":1}
{"cve":"CVE-2021-40569","code_chunks":["extent_count = gf_bs_read_u16(bs);","location_entry->extent_entries = gf_list_new();","for (j = 0; j < extent_count; j++) {","GF_ItemExtentEntry *extent_entry = (GF_ItemExtentEntry *)gf_malloc(sizeof(GF_ItemExtentEntry));","if (!extent_entry) return GF_OUT_OF_MEM;","","gf_list_add(location_entry->extent_entries, extent_entry);"],"label":1}
{"cve":"CVE-2020-35538","code_chunks":["JDIMENSION in_row_group_ctr,","JSAMPARRAY output_buf)","{","my_upsample_ptr upsample = (my_upsample_ptr)cinfo->upsample;","register int y, cred, cgreen, cblue;","int cb, cr;","register JSAMPROW outptr;"],"label":1}
{"cve":"CVE-2022-41859","code_chunks":["\tHMAC_Update(hmac_ctx, cruft, BN_num_bytes(session->prime));","","\tmemset(cruft, 0, BN_num_bytes(session->prime));","\toffset = BN_num_bytes(session->prime) - BN_num_bytes(y);","\tBN_bn2bin(y, cruft + offset);","\tHMAC_Update(hmac_ctx, cruft, BN_num_bytes(session->prime));",""],"label":0}
{"cve":"CVE-2017-3733","code_chunks":["* wb->buf","*\/","","if (!SSL_USE_ETM(s) && mac_size != 0) {","if (s->method->ssl3_enc->mac(s, &wr[j],","&(outbuf[j][wr[j].length + eivlen]),","1) < 0)"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["excepthandler_ty o = (excepthandler_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["          static_cast<CallReporting*>(node->builtin_data);","            const TfLiteTensor* a0;","      TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &a0));","      TfLiteTensor* a1;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &a1));","      int num = a0->dims->data[0];","      for (int i = 0; i < num; i++) {"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["int utf8_strnwidth(const char *string, int len, int skip_ansi);"],"label":1}
{"cve":"CVE-2018-14362","code_chunks":["ret = pop_query(pop_data, buf, sizeof(buf));","if (ret == 0)","{","mutt_bcache_del(pop_data->bcache, ctx->hdrs[i]->data);","#ifdef USE_HCACHE","mutt_hcache_delete(hc, ctx->hdrs[i]->data, strlen(ctx->hdrs[i]->data));","#endif"],"label":1}
{"cve":"CVE-2021-42782","code_chunks":["\/* Remove the encompassing outer TLV of 0x7C and get the data *\/","body = sc_asn1_find_tag(card->ctx, rbuf,","r, 0x7C, &body_len);","if(!body) {","sc_debug(card->ctx, SC_LOG_DEBUG_VERBOSE, \"Could not find outer tag 0x7C in response\");","r =  SC_ERROR_INVALID_DATA;","goto err;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  }","","  if (input->type == kTfLiteInt16) {","    TF_LITE_ENSURE_EQ(context, weights->type, kTfLiteInt8);","    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);","    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);","  } else {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["accum_scratch_size));","}","node->temporaries->data[4] = op_data->scratch_tensor_index + 4;","TfLiteTensor* zero_points = GetTemporary(context, node, \/*index=*\/4);","zero_points->type = kTfLiteInt32;","zero_points->allocation_type = kTfLiteArenaRw;","int zero_points_dims[1] = {batch_size};"],"label":1}
{"cve":"CVE-2016-10268","code_chunks":["tstrip_t s, ns = TIFFNumberOfStrips(in);","uint32 row = 0;","_TIFFmemset(buf, 0, stripsize);","for (s = 0; s < ns; s++) {","tsize_t cc = (row + rowsperstrip > imagelength) ?","TIFFVStripSize(in, imagelength - row) : stripsize;","if (TIFFReadEncodedStrip(in, s, buf, cc) < 0"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["CHECK_HANDLE(handle, f);","int64_t ret = f->write(data, length);","if (ret < 0) {","raise_notice(\"fwrite(): send of %d bytes failed with errno=%d %s\",","data.size(), errno, folly::errnoStr(errno).c_str());","ret = 0;","}"],"label":1}
{"cve":"CVE-2021-37665","code_chunks":["ctx, input.dims() == 4,","errors::InvalidArgument(\"Current RequantizePerChannel operator\"","\"supports 4D tensors only.\"));","","const Tensor& input_min_vec = ctx->input(kInputMinVecIndex);","size_t depth = input_min_vec.NumElements();"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["\t\t\t struct strbuf *sb)","{","\tunsigned long beginning_of_body;","\tint indent = 4;","\tconst char *msg;","\tconst char *reencoded;","\tconst char *encoding;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty val;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2020-35534","code_chunks":["int32_t paramLength = 2 * subbandWidth + 4;","uint8_t *paramBuf = (uint8_t *)calloc(","1, sizeof(CrxBandParam) + sizeof(int32_t) * paramLength + progrDataSize);","","if (!paramBuf)"],"label":1}
{"cve":"CVE-2016-4303","code_chunks":["sid = j_id->valueint;","bytes_transferred = j_bytes->valueint;","retransmits = j_retransmits->valueint;","jitter = j_jitter->valuefloat;","cerror = j_errors->valueint;","pcount = j_packets->valueint;","SLIST_FOREACH(sp, &test->streams, streams)"],"label":1}
{"cve":"CVE-2021-4173","code_chunks":["\treturn NULL;","    }","","    \/*","     * \":function \/pat\": list functions matching pattern.","     *\/","    if (*eap->arg == '\/')"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["} else if (input->params.zero_point == op_context.output->params.zero_point &&","input->params.scale == op_context.output->params.scale) {","TF_LITE_ENSURE(","context,","reference_ops::Mean(","GetTensorData<integer_type>(input), input->dims->data,"],"label":1}
{"cve":"CVE-2023-40589","code_chunks":["","\t\t\t\tif (BitLength >= 15)","\t\t\t\t\treturn -1011;","","\t\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, CodeLEC, BitLength);","","\t\t\t\tif ((MatchLength - 2) >= 768)"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["\t\tCALLOC_ARRAY(res, 1);","\treturn res;","}","","static const char *git_etc_gitattributes(void)","{","\tstatic const char *system_wide;"],"label":0}
{"cve":"CVE-2020-4031","code_chunks":["int shadow_server_start(rdpShadowServer* server)","{","BOOL ipc;","BOOL status;","WSADATA wsaData;"],"label":0}
{"cve":"CVE-2022-30594","code_chunks":["","if (data & ~(unsigned long)PTRACE_O_MASK)","return -EINVAL;","","if (unlikely(data & PTRACE_O_SUSPEND_SECCOMP)) {"],"label":1}
{"cve":"CVE-2017-16818","code_chunks":["  smatch match;","","  if ((s == \"*\") && wildcards) {","    return ARN(Partition::wildcard, Service::wildcard, \"*\", \"*\", \"*\");","  } else if (regex_match(s, match, wildcards ? rx_wild : rx_no_wild)) {","    if (match.size() != 6) {","      return boost::none;"],"label":0}
{"cve":"CVE-2016-10249","code_chunks":["int i;","","if (numrows < 0 || numcols < 0) {","return 0;","}","","if (!(matrix = jas_malloc(sizeof(jas_matrix_t)))) {"],"label":1}
{"cve":"CVE-2018-16393","code_chunks":["\tif (apdu.sw1 == 0x69 && apdu.sw2 == 0x82)","\t\tfprintf(stderr, \"CHV1 not verified or invalid exponent value.\\n\");","\telse","\t\tfprintf(stderr, \"Card returned SW1=%02X, SW2=%02X.\\n\", apdu.sw1, apdu.sw2);","\treturn 1;","}",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["        return 1;","    }","    else {","        int res;","        res = obj2ast_int(tmp, &col_offset, arena);","        if (res != 0) goto failed;","        Py_CLEAR(tmp);"],"label":0}
{"cve":"CVE-2022-21655","code_chunks":["response_decoder->decodeHeaders(std::move(response_headers), false);","EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,","putResult(Upstream::Outlier::Result::LocalOriginConnectFailed, _));","EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(testing::InvokeWithoutArgs([] {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","int32_t* output_data = output->data.i32;","output_data[0] =","0;    output_data[0] = input_data[0] + weight_data[0];"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (indices->type) {","return EvalScatterNd<int32_t>(context, indices, updates, shape, output);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void bn_read_bin(bn_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"CVE-2016-10093","code_chunks":["cpStripToTile(uint8* out, uint8* in,","uint32 rows, uint32 cols, int outskew, int inskew)","{","while (rows-- > 0) {","uint32 j = cols;"],"label":1}
{"cve":"CVE-2017-6448","code_chunks":["sprintf (str, \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);","}","else {","sprintf (str, \" {v%i..v%i}, class+%i\", vC, vC + vA - 1, vB);"],"label":1}
{"cve":"CVE-2018-20217","code_chunks":["    krb5_pa_for_user for_user;","    krb5_data *for_user_data = NULL;","    char package[] = \"Kerberos\";","","    if (userid->user == NULL)","        return EINVAL;",""],"label":0}
{"cve":"CVE-2016-1000004","code_chunks":["xmlNodePtr SimpleXMLElement_exportNode(const Object& sxe) {","if (!sxe->instanceof(SimpleXMLElement_classof())) return nullptr;","auto data = Native::data<SimpleXMLElement>(sxe.get());","return php_sxe_get_first_node(data, data->nodep());","}"],"label":0}
{"cve":"CVE-2023-44488","code_chunks":["    ++frame_;","    unsigned int width = 0;","    unsigned int height = 0;","    ScaleForFrameNumber(frame_, kInitialWidth, kInitialHeight, &width, &height,","                        flag_codec_, smaller_width_larger_size_);","    SetSize(width, height);","    FillFrame();"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* seq_lengths_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSeqLengthsTensor,","&seq_lengths_tensor));","const TS* seq_lengths = GetTensorData<TS>(seq_lengths_tensor);"],"label":0}
{"cve":"CVE-2020-1918","code_chunks":["  }","","  struct MemberMemoInfo {","    String m_return_value;","    TypedValue m_ret_tv;","    int m_count{0};","  };"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["#else","  cudnnConvolutionBwdDataPreference_t preference =","      specify_workspace_limit","          ? CUDNN_CONVOLUTION_BWD_DATA_SPECIFY_WORKSPACE_LIMIT","          : CUDNN_CONVOLUTION_BWD_DATA_NO_WORKSPACE;","  cudnnConvolutionBwdDataAlgo_t algo_to_use;","  RETURN_IF_CUDNN_ERROR(cudnnGetConvolutionBackwardDataAlgorithm("],"label":0}
{"cve":"CVE-2020-27793","code_chunks":["if (input[4] != ' ') {","return r_cmd_java_handle_help (core, input);","}","for (; i < END_CMDS; i++) {","IFDBG r_cons_printf (\"Checking cmd: %s %d\\n\", JAVA_CMDS[i].name,","strncmp (input+5, JAVA_CMDS[i].name, JAVA_CMDS[i].name_len));","if (!strncmp (input + 5, JAVA_CMDS[i].name, JAVA_CMDS[i].name_len)) {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["#endif","#if defined(CONFIG_FIT)","fit_hdr = buf;","if (!fit_check_format (fit_hdr)) {","puts (\"Bad FIT image format\\n\");","return 1;","}"],"label":1}
{"cve":"CVE-2022-31624","code_chunks":["int error_code, const char *type, int take_lock)","{","size_t csize;","char message_loc[1024];","char *message= message_loc;","size_t message_size= sizeof(message_loc);","char *uh_buffer;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["aux_input_quantized->type = fw_input_weights->type;","aux_input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(aux_input_quantized->dims, aux_input->dims)) {"],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["void CLASS rollei_load_raw()","{","uchar pixel[10];","unsigned iten=0, isix, i, buffer=0, todo[16];","","isix = raw_width * raw_height * 5 \/ 8;","while (fread (pixel, 1, 10, ifp) == 10) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tif (bn_is_zero(b)) {","\t\tfp_set_dig(c, 1);","\t\treturn;","\t}","","","\t\/* Initialize table. *\/"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["return PyBytes_DecodeEscape(s, len, NULL, 0, NULL);","}"],"label":1}
{"cve":"CVE-2016-10011","code_chunks":["\t\t*keyp = key;","\t\tkey = NULL;","\t}","\tsshkey_free(key);","\tsshkey_free(cert);","\treturn r;","}"],"label":0}
{"cve":"CVE-2021-42778","code_chunks":["\tr = iso_ops->select_file(card, &tinfo_path, &file);","\tif (r != SC_SUCCESS || file->size == 0) {","\t\tsc_file_free(file);","\t\tLOG_FUNC_RETURN(card->ctx, SC_ERROR_NOT_SUPPORTED);","\t}","","\t\/* First two bytes lists 0x01, the second indicates length *\/"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["        if (status != kTfLiteOk) return status;","      }","      {","        node->temporaries","            ->data[offset + kRecurrentToForgetWeightsLedgerOffset] =","            op_data->ledger_index + kRecurrentToForgetWeightsLedgerOffset;","        const TfLiteTensor* recurrent_to_forget_weights ="],"label":0}
{"cve":"CVE-2019-20398","code_chunks":["static struct lys_node *","lys_node_dup_recursion(struct lys_module *module, struct lys_node *parent, const struct lys_node *node,","                       struct unres_schema *unres, int shallow, int finalize)","{","    struct lys_node *retval = NULL, *iter, *p;","    struct ly_ctx *ctx = module->ctx;","    int i, j, rc;"],"label":0}
{"cve":"PYSEC-2020-140","code_chunks":["OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));","OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,","errors::InvalidArgument(","\"Source format must be of length 4 or 5, received \"","\"src_format = \",","src_format));"],"label":0}
{"cve":"CVE-2018-13303","code_chunks":["init_get_bits8(&gb, buf, size);","err = ff_ac3_parse_header(&gb, hdr);","if (err < 0)","return AVERROR_INVALIDDATA;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["        }","        else {","            int res;","            res = obj2ast_string(tmp, &type_comment, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }"],"label":0}
{"cve":"CVE-2016-10167","code_chunks":["{","gdImagePtr im;","int black;","gdPoint points[] = {{50, 5}, {24, 86}, {93, 36}, {7, 36}, {76, 86}};","char *path;",""],"label":0}
{"cve":"CVE-2021-23520","code_chunks":["MemoryBlock data;","MemoryOutputStream mo (data, false);","builder.writeToStream (mo, nullptr);","MemoryInputStream mi (data, false);","","ZipFile zip (mi);",""],"label":1}
{"cve":"CVE-2022-28068","code_chunks":["static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev, RBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb) {","size_t i;","for (i = 0; i < abbrev->count - 1; i++) {","memset (&die->attr_values[i], 0, sizeof (die->attr_values[i]));"],"label":0}
{"cve":"CVE-2024-0727","code_chunks":["const PKCS7_CTX *ctx = ossl_pkcs7_get0_ctx(p7);","","if (ctype_nid == NID_pkcs7_signed) {","if (p7->d.sign == NULL)","return 0;","mdalgs = p7->d.sign->md_algs;"],"label":0}
{"cve":"CVE-2016-10162","code_chunks":["if (ent1->varname) {","if (!strcmp(ent1->varname, PHP_CLASS_NAME_VAR) &&","Z_TYPE(ent1->data) == IS_STRING && Z_STRLEN(ent1->data) &&","ent2->type == ST_STRUCT && Z_TYPE(ent2->data) == IS_ARRAY) {","zend_bool incomplete_class = 0;",""],"label":1}
{"cve":"CVE-2016-6912","code_chunks":["if (overflow2(gdImageSX(im) * 4, gdImageSY(im))) {","return;","}","","argb = (uint8_t *)gdMalloc(gdImageSX(im) * 4 * gdImageSY(im));","if (!argb) {"],"label":1}
{"cve":"CVE-2017-12664","code_chunks":["break;","}","else","{","if (compressionType == PALM_COMPRESSION_RLE)","{"],"label":1}
{"cve":"CVE-2019-13391","code_chunks":["  {","    p=GetCacheViewVirtualPixels(magnitude_view,0L,y,fourier_info->width,1UL,","      exception);","    if (p == (const PixelPacket *) NULL)","      break;","    indexes=GetCacheViewAuthenticIndexQueue(magnitude_view);","    for (x=0L; x < (ssize_t) fourier_info->width; x++)"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["","t = naf + len - 1;","ep2_set_infty(r);","for (i = len - 1; i >= 0; i--, t--) {","ep2_dbl(r, r);","","n = *t;"],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["TestHeaderMapImpl request_headers;","HttpTestUtility::addDefaultHeaders(request_headers);","request_headers.refreshByteSize();","std::string key = \"big\";","uint32_t head_room = 77;","uint32_t long_string_length ="],"label":0}
{"cve":"CVE-2019-17178","code_chunks":["len = format ? 13 : 4;","ds += len - 1;","tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));","","if (NULL == tmp)","{"],"label":1}
{"cve":"PYSEC-2020-215","code_chunks":["t import string_types","","import notebook","from no"],"label":1}
{"cve":"PYSEC-2021-834","code_chunks":["auto root = Scope::NewRootScope().ExitOnError();","","string two_file, three_file;","TF_ASSERT_OK(CreateTempFile(env, 2.0f, 1000, &two_file));","TF_ASSERT_OK(CreateTempFile(env, 3.0f, 1000, &three_file));","auto node1 = ops::ImmutableConst(root, DT_FLOAT, kFileTensorShape, two_file);"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["openEntity->betweenDecl = betweenDecl;","openEntity->internalEventPtr = NULL;","openEntity->internalEventEndPtr = NULL;","textStart = (const char *)entity->textPtr;","textEnd = (const char *)(entity->textPtr + entity->textLen);","\/* Set a safe default value in case 'next' does not get set *\/"],"label":1}
{"cve":"CVE-2024-0964","code_chunks":["import httpx","import markupsafe","import orjson","from fastapi import BackgroundTasks, Depends, FastAPI, HTTPException, status",""],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["uint8_t data_2 = 0;","char *text = NULL;","","if (!siz) goto shortbuf;","","if (event_data[0] >= 0x80) {","command = *event_data & 0xf0;"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["if (!end || end == start)","return 0;","width = strtol(start, &next, 10);","if (next == start || width == 0)","return 0;","if (width < 0) {"],"label":1}
{"cve":"CVE-2016-10171","code_chunks":["","if (bytecnt) {","wpc->channel_layout += nchans = *byteptr++;","bytecnt--;","",""],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["if (*event_data > 0x7f) {","do {","tmp_length = (tmp_length << 7) + (*event_data & 0x7f);","event_data++;","ret_cnt++;","} while (*event_data > 0x7f);"],"label":1}
{"cve":"CVE-2021-3996","code_chunks":["#define MNT_FS_DELETED\t(1 << 6) \/* target path in mountinfo contains \"(deleted)\" *\/"],"label":1}
{"cve":"PYSEC-2022-83","code_chunks":["          arg->set_type_id(TFT_PRODUCT);","          for (int i = 0; i < attr_list.type_size(); i++) {","            map_dtype_to_tensor(attr_list.type(i), arg->add_args());","          }","","        } else if (attr->value_case() == AttrValue::kType) {","          map_dtype_to_tensor(attr->type(), arg);"],"label":0}
{"cve":"CVE-2016-3134","code_chunks":["const struct xt_entry_target *t;","unsigned int verdict;","","if (!unconditional(e))","return false;","t = ipt_get_target_c(e);","if (strcmp(t->u.user.name, XT_STANDARD_TARGET) != 0)"],"label":0}
{"cve":"CVE-2022-2923","code_chunks":["\tga_clear(&spin.si_repsal);","\tga_clear(&spin.si_sal);","\tga_clear(&spin.si_map);","\tga_clear(&spin.si_comppat);","\tga_clear(&spin.si_prefcond);","\thash_clear_all(&spin.si_commonwords, 0);",""],"label":0}
{"cve":"CVE-2016-10167","code_chunks":["gdImageSetInterpolationMethod(src, GD_BILINEAR_FIXED);","dst = gdImageScale(src, 200, 200);","","color = gdImageGetPixel(dst, 99, 99);","gdTestAssertMsg(color == 0xffffff,","\"expected color ffffff, but got %x\\n\", color);"],"label":1}
{"cve":"CVE-2017-14608","code_chunks":["short buf[256];","int row, col, len, pred[2], ret, i;","","for (row=0; row < height; row++)","{","#ifdef LIBRAW_LIBRARY_BUILD"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int cp_vbnn_sig(ec_t r, bn_t z, bn_t h, const uint8_t *id, size_t id_len,","const uint8_t *msg, int msg_len, const bn_t sk, const ec_t pk) {","int len, result = RLC_OK;","uint8_t *buf = NULL, *buf_i, hash[RLC_MD_LEN];","bn_t n, y;","ec_t t;"],"label":1}
{"cve":"CVE-2022-0695","code_chunks":["if (!qo->kv) {","goto beach;","}","if (r_buf_fread_at (bf->buf, 0, (ut8 *)&lrec, \"ccss\", 1) < QNX_RECORD_SIZE) {","goto beach;","}","lmf_header_load (&qo->lmfh, bf->buf, qo->kv);"],"label":1}
{"cve":"CVE-2023-30186","code_chunks":["CheckFileDir();"],"label":1}
{"cve":"CVE-2017-14640","code_chunks":["","if (skip > index) return AP4_ERROR_INTERNAL;","","AP4_UI64 offset;","if (m_StcoAtom) {","AP4_UI32 offset_32;"],"label":1}
{"cve":"CVE-2022-41889","code_chunks":["if (attr_list_sizes != nullptr) (*attr_list_sizes)[key] = num_values;","","#define PARSE_LIST(c_type, parse_fn)                                      \\","std::unique_ptr<c_type[]> values(new c_type[num_values]);               \\","for (int i = 0; i < num_values; ++i) {                                  \\","tensorflow::Safe_PyObjectPtr py_value(PySequence_ITEM(py_list, i));   \\"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["        return NULL;","    }","    xmi_data += 4;","    xmi_size -= 4;","","    xmi_mdi = _WM_initMDI();","    _WM_midi_setup_divisions(xmi_mdi, xmi_divisions);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["GetInput(context, node, kDefaultValueTensor);","TfLiteTensor* output_tensor = GetOutput(context, node, 0);","","Subgraph* subgraph = reinterpret_cast<Subgraph*>(context->impl_);","auto& resources = subgraph->resources();"],"label":1}
{"cve":"CVE-2021-30022","code_chunks":["gf_bs_read_int_log(bs, 5, \"nal_unit_type\");","}","pps_id = gf_bs_read_ue_log(bs, \"pps_id\");","if (pps_id >= 255) {","return -1;","}","pps = &avc->pps[pps_id];"],"label":1}
{"cve":"CVE-2016-5418","code_chunks":["if (a->flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT) {","archive_set_error(&a->archive,","ARCHIVE_ERRNO_MISC,","\"Path contains '..'\");"],"label":1}
{"cve":"CVE-2020-1916","code_chunks":["return string_crypt(key, random_salt);","}","","if ((strlen(salt) > sizeof(\"$2X$00$\")) &&","(salt[0] == '$') &&","(salt[1] == '2') &&","(salt[2] >= 'a') && (salt[2] <= 'z') &&"],"label":1}
{"cve":"CVE-2018-20179","code_chunks":["\tinput += bytes_pro;","\tbytes_pro = process_plane(input, width, height, output + 2, size - total_pro);","\ttotal_pro += bytes_pro;","\tinput += bytes_pro;","\tbytes_pro = process_plane(input, width, height, output + 1, size - total_pro);","\ttotal_pro += bytes_pro;","\tinput += bytes_pro;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int cp_vbnn_ver(const ec_t r, const bn_t z, const bn_t h, const uint8_t *id,","size_t id_len, const uint8_t *msg, int msg_len, const ec_t mpk) {","int len, result = 0;","uint8_t *buf = NULL, *buf_i, hash[RLC_MD_LEN];","bn_t n, c, _h;"],"label":1}
{"cve":"CVE-2018-8797","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["      TF_LITE_ENSURE_OK(","          context, context->ResizeTensor(context, bw_activation_state_quantized,","                                         bw_activation_state_quantized_size));","    }","    node->temporaries->data[kFwCellStateQuantized] =","        op_data->scratch_tensor_index + kFwCellStateQuantized;","    TfLiteTensor* fw_cell_state_quantized;"],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["}","}"],"label":0}
{"cve":"CVE-2021-29537","code_chunks":["                      in_max, half_pixel_centers_, &output_data);","    Tensor* out_min = nullptr;","    OP_REQUIRES_OK(context, context->allocate_output(1, {}, &out_min));","    out_min->flat<float>()(0) = in_min;","","    Tensor* out_max = nullptr;","    OP_REQUIRES_OK(context, context->allocate_output(2, {}, &out_max));"],"label":0}
{"cve":"CVE-2019-13308","code_chunks":["if (status == MagickFalse)","continue;","Ar=GetCacheViewVirtualPixels(Ar_view,0,y,","MagickMax(Ar_image->columns,Cr_image->columns),1,exception);","Ai=GetCacheViewVirtualPixels(Ai_view,0,y,","MagickMax(Ai_image->columns,Ci_image->columns),1,exception);"],"label":1}
{"cve":"CVE-2022-4415","code_chunks":["","\/* Note that these strings are NUL terminated, because we made sure that a","* trailing NUL byte is in the buffer, though not included in the iov_len","* count (see process_socket() and gather_pid_metadata_*()) *\/","assert(((char*) iovec->iov_base)[iovec->iov_len] == 0);",""],"label":1}
{"cve":"CVE-2022-3299","code_chunks":["realsize = size * nmemb;","ptr = ogs_realloc(conn->memory, conn->size + realsize + 1);","if(!ptr) {","ogs_fatal(\"not enough memory (realloc returned NULL)\");"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2019-9917","code_chunks":["#ifdef HAVE_ICU","else if (sVar == \"clientencoding\") {","pUser->SetClientEncoding(sValue);","PutModule(\"ClientEncoding = \" + sValue);","}","#endif","else"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["return 1;","}","if (isinstance) {","*out = Load;","return 0;","}"],"label":1}
{"cve":"PYSEC-2021-465","code_chunks":["","void Compute(OpKernelContext* context) override {","const float in_min = context->input(2).flat<float>()(0);","const float in_max = context->input(3).flat<float>()(0);","","ImageResizerState st(align_corners_, false);"],"label":1}
{"cve":"PYSEC-2022-139","code_chunks":["  }","  return output_tensor_size;","}","","Status OpLevelCostEstimator::PredictDefaultNodeCosts(","    const int64_t num_compute_ops, const OpContext& op_context,","    bool* found_unknown_shapes, NodeCosts* node_costs) {"],"label":0}
{"cve":"CVE-2019-6978","code_chunks":["{","\tgdImagePtr im;","\tgdIOCtx *in = gdNewDynamicCtxEx(size, data, 0);","\tif(!in) {","\t\treturn 0;","\t}","\tim = gdImageCreateFromWBMPCtx(in);"],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["             ((whence == SEEK_CUR && off == 0) ||","              (whence == SEEK_SET && off == s->off)))","        return s->off;","    else if ((s->filesize == UINT64_MAX && whence == SEEK_END))","        return AVERROR(ENOSYS);","","    if (whence == SEEK_CUR)"],"label":0}
{"cve":"CVE-2021-36080","code_chunks":["    }","  else if (len < 0xf0)","    {","      bit_write_RC (dat, len);","      return length & 0xff;","    }","  else"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["","\t\t\tstatus = rdp_client_connect_license(rdp, s);","","\t\t\tif (status < 0)","\t\t\t\tWLog_DBG(TAG, \"%s: %s - rdp_client_connect_license() - %i\", __FUNCTION__,","\t\t\t\t         rdp_server_connection_state_string(rdp->state), status);",""],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["pj_scan_advance_n(scanner, 2, SKIP_WS);","","\/* get anything until newline (including whitespaces). *\/","pj_scan_get_until_chr(scanner, \"\\r\\n\", str);","","\/* newline. *\/"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["","#if FP_WIDTH > 2","\t\tfp2_sqr(t0[0], a);","\t\tfp2_mul(t0[1], t0[0], a);","\t\tfor (int i = 2; i < (1 << (FP_WIDTH - 2)); i++) {","\t\t\tfp2_mul(t0[i], t0[i - 1], t0[0]);","\t\t}"],"label":0}
{"cve":"PYSEC-2021-705","code_chunks":["                          data_format_,","                          tensor_in.shape()};","","    functor::MaxPoolGradBackwardNoMask<T>()(","        data_format_, tensor_in.flat<T>().data(), tensor_out.flat<T>().data(),","        params.tensor_in_batch, params.out_height, params.out_width,","        params.depth, params.tensor_in_rows, params.tensor_in_cols,"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_key.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/ca_cert.pem\"","exact: localhost","san_type: URI","exact: 127.0.0.1","san_type: IP_ADDRESS"],"label":0}
{"cve":"CVE-2022-40138","code_chunks":["assert(isLazy() && \"Laziness has not been checked\");","PerfSection perf(\"Lazy function compilation\");","auto *provider = (hbc::BCProviderLazy *)runtimeModule_->getBytecode();","auto *func = provider->getBytecodeFunction();","auto *lazyData = func->getLazyCompilationData();","SourceErrorManager &manager = lazyData->context->getSourceErrorManager();"],"label":0}
{"cve":"CVE-2016-4562","code_chunks":["    *type;","","  DrawInfo","    *clone_info;","","  ImageInfo","    *image_info;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* in_tensor = GetInput(context, node, 0);","TfLiteTensor* out_tensor = GetOutput(context, node, 0);","TfLiteIntArray* new_size = TfLiteIntArrayCopy(in_tensor->dims);","return context->ResizeTensor(context, out_tensor, new_size);","};"],"label":1}
{"cve":"CVE-2017-6448","code_chunks":["\t\t\t} else {","\t\t\t\tsnprintf (str, sizeof (str), \" v%i, 0x%\"PFMT64x, vA, offset);","\t\t\t}","\t\t\tstrasm = r_str_concat (strasm, str);","\t\t\tbreak;","\t\t\tvA = (buf[1] & 0x0f);","\t\t\tvB = (buf[1] & 0xf0) >> 4;"],"label":0}
{"cve":"CVE-2016-1904","code_chunks":["#endif","","","cmd = zend_string_alloc(2 * l, 0);","","for (x = 0, y = 0; x < l; x++) {","int mb_len = php_mblen(str + x, (l - x));"],"label":1}
{"cve":"CVE-2020-13396","code_chunks":["return SEC_E_INVALID_TOKEN;","}","","Stream_Read_UINT32(s, message->NegotiateFlags); \/* NegotiateFlags (4 bytes) *\/","context->NegotiateFlags = message->NegotiateFlags;",""],"label":1}
{"cve":"CVE-2018-10538","code_chunks":["}","else {","int bytes_to_copy = (chunk_header.ckSize + 1) & ~1L;","char *buff = malloc (bytes_to_copy);","","if (debug_logging_mode)","error_line (\"extra unknown chunk \\\"%c%c%c%c\\\" of %d bytes\","],"label":1}
{"cve":"CVE-2018-7254","code_chunks":["else {","int bytes_to_copy = (uint32_t) caf_chunk_header.mChunkSize;","char *buff = malloc (bytes_to_copy);","","if (debug_logging_mode)","error_line (\"extra unknown chunk \\\"%c%c%c%c\\\" of %d bytes\","],"label":1}
{"cve":"CVE-2021-44758","code_chunks":["*\/","","ret = send_accept (minor_status,","ctx,","&mech_output_token,","1,"],"label":1}
{"cve":"CVE-2018-19045","code_chunks":["#ifdef _MEM_CHECK_","\tmem_log_init(PACKAGE_NAME, \"Parent process\");","#endif","","\t\/* Some functionality depends on kernel version, so get the version here *\/","\tif (uname(&uname_buf))","\t\tlog_message(LOG_INFO, \"Unable to get uname() information - error %d\", errno);"],"label":0}
{"cve":"CVE-2023-46852","code_chunks":["    }","","    struct proxy_hook *hook = &hooks[pr.command];","    int hook_ref = hook->lua_ref;","                if (c->tag && hook->tagged) {","        struct proxy_hook_tagged *pht = hook->tagged;","        while (pht->lua_ref) {"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["static int add_attributes(PyTypeObject* type, char**attrs, int num_fields)","{","int i, result;","_Py_IDENTIFIER(_attributes);","PyObject *s, *l = PyTuple_New(num_fields);","if (!l)","return 0;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TF_LITE_ENSURE(context, NumDimensions(input) >= 2);","if (input->type != kTfLiteFloat32) {","context->ReportError(context,"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","const TfLiteTensor* multipliers = GetInput(context, node, kInputMultipliers);","","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context, ResizeOutput(context, node));"],"label":1}
{"cve":"CVE-2016-6873","code_chunks":["if (v.isArray()) {","Array subarr1 = v.toArray();","const ArrNR& arr_value = value.toArrNR();","php_array_replace_recursive(seen, couldRecur(v, subarr1),","subarr1, arr_value);","v = subarr1;","} else {"],"label":1}
{"cve":"CVE-2015-8631","code_chunks":["{","static generic_ret              ret;","char                            *prime_arg;","gss_buffer_desc                 client_name,","service_name;"],"label":1}
{"cve":"CVE-2018-12559","code_chunks":["    RemoteFsDevice::Details det;","","    det.name=name->text().trimmed();","    switch (t) {","    case Type_SshFs: {","        det.url.setHost(sshHost->text().trimmed());","        det.url.setUserName(sshUser->text().trimmed());"],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["register char *s = scanner->curptr;","","if (s >= scanner->end) {","pj_scan_syntax_err(scanner);","return;","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  const TfLiteTensor* axis;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","  output->type = input->type;","  if (IsConstantTensor(axis)) {","    int axis_value;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","ruy::profiler::ScopeLabel label(\"MirrorPad\");","const TfLiteTensor* input_tensor = GetInput(context, node, 0);","const TfLiteTensor* padding_matrix = GetInput(context, node, 1);","auto* params =","reinterpret_cast<TfLiteMirrorPaddingParams*>(node->builtin_data);",""],"label":1}
{"cve":"CVE-2018-19842","code_chunks":["return TT_EOF;","}","while (begin && str[*begin] && isspace ((ut8)str[*begin])) {","++(*begin);","}",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, \/*index=*\/0, &output));","","  int32_t* output_data = output->data.i32;","  *output_data = *(input1->data.i32) + *(input2->data.i32);","  return kTfLiteOk;"],"label":0}
{"cve":"CVE-2019-20392","code_chunks":["return NULL;","}","","if (lys_getnext_data(module, lys_parent(siblings), name, strlen(name), LYS_ANYDATA, &snode) || !snode) {","LOGERR(siblings->module->ctx, LY_EINVAL, \"Failed to find \\\"%s\\\" as a sibling to \\\"%s:%s\\\".\",","name, lys_node_module(siblings)->name, siblings->name);","return NULL;"],"label":1}
{"cve":"CVE-2022-0521","code_chunks":["\tRBinJavaCPTypeObj *obj;","\tut32 i = 0;","\tut64 offset = 0, curpos;","\tif (sz < 8) {","\t\treturn NULL;","\t}","\tRBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params =","reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);","","int32_t* out_buf = GetOutput(context, node, 0)->data.i32;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","  if (input_type == kTfLiteInt8) {","            VectorOfTensors<int8_t> all_inputs(*context, *node->inputs);","    for (int i = 0; i < node->inputs->size; ++i) {","      const TfLiteTensor* t;","      TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, i, &t));","      TF_LITE_ENSURE_EQ(context, t->params.scale, output->params.scale);"],"label":0}
{"cve":"CVE-2018-8792","code_chunks":["\tbytes_pro = process_plane(input, width, height, output + 3, size - total_pro);","\ttotal_pro += bytes_pro;","\tinput += bytes_pro;","\tbytes_pro = process_plane(input, width, height, output + 2, size - total_pro);","\ttotal_pro += bytes_pro;","\tinput += bytes_pro;","\tbytes_pro = process_plane(input, width, height, output + 1, size - total_pro);"],"label":0}
{"cve":"CVE-2021-3996","code_chunks":["DBG(TAB, ul_debug(\"tab parse error: [VFS options]\"));","goto fail;","}","","\/* (7) optional fields, terminated by \" - \" *\/","p = strstr(s, \" - \");"],"label":1}
{"cve":"CVE-2018-20177","code_chunks":["uint32 length;","struct stream packet = *s;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","","if (!s_check_rem(s, length))"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\tbn_rand(a, RLC_POS, bits);","\t\t} while (bn_bits(a) != bits);","\t\t\/* Check if (a - 1)\/2 is prime. *\/","\t\tbn_sub_dig(a, a, 1);","\t\tbn_rsh(a, a, 1);","\t\tif (bn_is_prime(a)) {","\t\t\t\/* Restore a. *\/"],"label":0}
{"cve":"CVE-2018-9336","code_chunks":["DeleteDNS(AF_INET6, item->data);","break;","","interface_data = (block_dns_data_t*)(item->data);","delete_block_dns_filters(interface_data->engine);","if (interface_data->metric_v4 >= 0)"],"label":1}
{"cve":"CVE-2023-46407","code_chunks":["","static void entropy_decoder_close(JXLEntropyDecoder *dec)","{","if (!dec)","return;","av_freep(&dec->window);"],"label":1}
{"cve":"CVE-2022-0156","code_chunks":["{","char_u  *p = skipwhite(((char_u **)newlines.ga_data)[idx]);","","if (ga_grow(gap, 1) == FAIL || ga_grow(freegap, 1) == FAIL)","goto erret;",""],"label":1}
{"cve":"CVE-2019-11815","code_chunks":["* restart with new parameters.  The assumption is that such reset","* events are few and far-between.","*\/","static void rds_tcp_sysctl_reset(struct net *net)","{","struct rds_tcp_connection *tc, *_tc;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["return 1;","}","if (isinstance) {","int lineno;","","if (_PyObject_HasAttrId(obj, &PyId_lineno)) {"],"label":1}
{"cve":"CVE-2017-18344","code_chunks":["struct timespec64 ts64;","bool sig_none;","","sig_none = (timr->it_sigev_notify & ~SIGEV_THREAD_ID) == SIGEV_NONE;","iv = timr->it_interval;","","\/* interval timer ? *\/"],"label":1}
{"cve":"CVE-2022-0695","code_chunks":["\t\tbool bigendian = true;","","\t\tfor (j = 0; fmt[j]; j++) {","\t\t\tswitch (fmt[j]) {","\t\t\t\tif (m == 1) {","\t\t\t\t\tm = r_num_get (NULL, &fmt[j]);","\t\t\t\t}"],"label":0}
{"cve":"CVE-2022-36019","code_chunks":["input_quantized.flat<quint8>());","AddInputFromArray<quint8>(bias_quantized.shape(),","bias_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});","AddInputFromArray<float>(TensorShape({1}), {input_max});"],"label":1}
{"cve":"CVE-2022-0849","code_chunks":["r_core_cmd0 (core, \"aeim\");","ESIL = core->anal->esil;","}","const char *spname = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);","if (!spname) {"],"label":1}
{"cve":"CVE-2023-28101","code_chunks":["","g_ptr_array_add (args, g_strdup (\"argv[0]\"));","","va_start (ap, context);","","while ((arg = va_arg (ap, const char *)) != NULL)","g_ptr_array_add (args, g_strdup (arg));"],"label":1}
{"cve":"CVE-2022-21725","code_chunks":["  } else if (dims.kx <= dims.sx && dims.ky <= dims.sy) {","        ops = dims.batch * dims.iz *","          (dims.ox * dims.oy * (dims.kx * dims.ky - 1) + dims.ix * dims.iy);","  } else {","            ops = dims.batch * dims.iz *","          (dims.ox * dims.oy * (dims.kx * dims.ky - 1) + dims.ix * dims.iy * 2);","  }"],"label":0}
{"cve":"PYSEC-2021-734","code_chunks":["}","for (INDEX_TYPE i = 0; i < row_split_size - 1; ++i) {","INDEX_TYPE row_length = row_split(i + 1) - row_split(i);","INDEX_TYPE real_length = std::min(output_size, row_length);","INDEX_TYPE parent_output_index_current = parent_output_index[i];",""],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["char time_buf[128];","","tm = localtime(&seconds);","strftime(time_buf, sizeof (time_buf), \"%Y\/%m\/%d %H:%M:%S\", tm);","ND_PRINT(\" (%s)\", time_buf);","}"],"label":1}
{"cve":"CVE-2019-16347","code_chunks":["#else","context->frbuff_p.p8 = p->frbuff.p8 + (u32)context->curY*p->width + i->posX;","#endif \/* NGIFLIB_ENABLE_CALLBACKS *\/","#ifndef NGIFLIB_INDEXED_ONLY","} else {","#ifdef NGIFLIB_ENABLE_CALLBACKS"],"label":1}
{"cve":"CVE-2016-4562","code_chunks":["          for (i=2; i < 4; i++)","          {","            GetNextToken(p,&p,MagickPathExtent,token);","            if (*token == ',')","              GetNextToken(p,&p,MagickPathExtent,token);","            x=StringToDouble(token,(char **) NULL);","            GetNextToken(p,&p,MagickPathExtent,token);"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["perrdetail err;","int iflags = PARSER_FLAGS(flags);","node *n;","","if (feature_version >= 7)","iflags |= PyPARSE_ASYNC_ALWAYS;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputDataTensor, &data));","const TfLiteTensor* segment_ids;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputSegmentIdsTensor,","&segment_ids));","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp8_read_bin(fp8_t a, const uint8_t *bin, size_t len) {","if (len != 8 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":0}
{"cve":"CVE-2022-0695","code_chunks":["\t\t\t}","\t\t\tptr->vaddr = ptr->paddr = ldata.offset;","\t\t\tptr->type = 'F'; \t\t\tr_list_append (fixups, ptr);","\t\t} else if (lrec.rec_type == LMF_RW_END_REC) {","\t\t\tr_buf_fread_at (bf->buf, offset, (ut8 *)&qo->rwend, \"si\", 1);","\t\t}","\t\toffset += lrec.data_nbytes;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","node->temporaries->data[kInputZeroPoints] =","op_data->scratch_tensor_index + kInputZeroPoints;","TfLiteTensor* input_zp = GetTemporary(context, node, kInputZeroPoints);","input_zp->type = kTfLiteFloat32;","input_zp->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(input_zp->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"CVE-2023-40032","code_chunks":["return( NULL );","","\/* End of haystack. There can't be a complete needle","* anywhere.","*\/","if( a == (gunichar) 0 )"],"label":1}
{"cve":"PYSEC-2020-271","code_chunks":["","m.def(\"TFE_ToDlpackCapsule\", [](py::handle& o) {","PyObject* eager_tensor_pyobject_ptr = o.ptr();","TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);","tensorflow::Safe_TF_StatusPtr status =","tensorflow::make_safe(TF_NewStatus());","void* dlm_ptr = tensorflow::TFE_HandleToDLPack(thandle, status.get());"],"label":1}
{"cve":"CVE-2016-2315","code_chunks":["static char *pool_strdup(const char *s)","{","char *r = pool_alloc(strlen(s) + 1);","strcpy(r, s);","return r;","}",""],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["for (int scratch_index = 0; scratch_index < 6; ++scratch_index) {","node->temporaries->data[scratch_index] =","op_data->scratch_tensor_index + scratch_index;","TfLiteTensor* scratch_tensor =","GetTemporary(context, node, scratch_index);","scratch_tensor->type = kTfLiteInt16;"],"label":1}
{"cve":"CVE-2016-5688","code_chunks":["MagickExport Image *CloneImage(const Image *image,const size_t columns,","const size_t rows,const MagickBooleanType detach,ExceptionInfo *exception)","{","Image","*clone_image;",""],"label":0}
{"cve":"CVE-2016-10156","code_chunks":["                        v->disabled = false;","","        if (t->stamp_path) {","                struct stat st;","","                if (stat(t->stamp_path, &st) >= 0)","                        t->last_trigger.realtime = timespec_load(&st.st_atim);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    node->temporaries->data[kBwCellStateQuantized] =","        op_data->scratch_tensor_index + kBwCellStateQuantized;","    TfLiteTensor* bw_cell_state_quantized;","    TF_LITE_ENSURE_OK(context,","                      GetTemporarySafe(context, node, kBwCellStateQuantized,","                                       &bw_cell_state_quantized));","    bw_cell_state_quantized->type = fw_input_to_output_weights->type;"],"label":0}
{"cve":"CVE-2020-36316","code_chunks":["}","*p_len = 1;","do {","(*p_len)++;","m_len--;","bn_rsh(t, m, 8 * m_len);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["GetOptionalInputTensor(context, node, kFwInputToInputWeightsTensor);","const TfLiteTensor* fw_input_to_forget_weights;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFwInputToForgetWeightsTensor,","&fw_input_to_forget_weights));","const TfLiteTensor* fw_input_to_cell_weights;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["GetTemporary(context, node, \/*index=*\/kFwRowSums);","fw_row_sums->type = kTfLiteInt32;","fw_row_sums->allocation_type = kTfLiteArenaRwPersistent;","int fw_row_sums_dims[2] = {num_row_sums, fw_num_units};"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["}","}","}","else if (rdp->mcs->messageChannelId && (channelId == rdp->mcs->messageChannelId))","{","if (!rdp->settings->UseRdpSecurityLayer)"],"label":1}
{"cve":"CVE-2021-30022","code_chunks":["\tfor (i=0; i<vps->num_ptl; i++) {","\t\tvvc_profile_tier_level(bs, &vps->ptl[i], i);","\t}","","\t\treturn vps_id;","}",""],"label":0}
{"cve":"CVE-2023-24824","code_chunks":["static bool S_can_contain(cmark_node *node, cmark_node *child) {","cmark_node *cur;","","if (node == NULL || child == NULL) {","return false;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp2_write_bin(uint8_t *bin, int len, const fp2_t a, int pack);"],"label":1}
{"cve":"CVE-2021-32672","code_chunks":["p = strstr(p,\"\\r\\n\"); if (!p) goto protoerr;","*p = '\\0'; p += 2;","*argcp = atoi(plen);","if (*argcp <= 0 || *argcp > 1024) goto protoerr;","","\/* Parse each argument. *\/"],"label":1}
{"cve":"CVE-2016-10060","code_chunks":["static MagickBooleanType ConcatenateImages(int argc,char **argv,","ExceptionInfo *exception )","{","FILE","*input,"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["","          \/* There's no good way to detect an error in strftime since a return","           * value of 0 isn't necessarily failure; if orig_name is an empty","           * string, the formatted string will be empty.","           *","           * However, the C90 standard says that, if there *is* a","           * buffer overflow, the content of the buffer is undefined,"],"label":0}
{"cve":"CVE-2023-28081","code_chunks":["if (!arr->attached(runtime)) {                                         \\","return runtime.raiseTypeError(\"Underlying ArrayBuffer detached\");    \\","}                                                                      \\","return HermesValue::encodeNumberValue(arr->at(runtime, k));            \\","}","switch (O->getKind()) {","#include \"hermes\/VM\/TypedArrays.def\""],"label":1}
{"cve":"CVE-2021-32055","code_chunks":["    iter->substr_cur = iter->substr_end;","    if (iter->substr_cur == iter->eostr)","      return 1;","","    iter->substr_end = strchr(iter->substr_cur, ',');","    if (!iter->substr_end)","      iter->substr_end = iter->eostr;"],"label":0}
{"cve":"CVE-2022-32545","code_chunks":["            if (i == (ssize_t) argc)","              ThrowDisplayException(OptionError,\"MissingArgument\",option);","            value=StringToDouble(argv[i],&p);","            (void) value;","            if ((p == argv[i]) && (LocaleCompare(\"unlimited\",argv[i]) != 0))","              ThrowDisplayInvalidArgumentException(option,argv[i]);","            break;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["UINT32 reserved;","WLog_INFO(TAG, \"SurfaceCommandsCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 12)","return FALSE;",""],"label":1}
{"cve":"CVE-2023-25933","code_chunks":["}","","Type mayBeBigInt =","op->getType().canBeBigInt() ? Type::createBigInt() : Type::createNoType();","","UOI->setType(Type::unionTy(numberResultType, mayBeBigInt));"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["ND_PRINT(\" %\" PRIu64, _i); \\","}","","#define DATEOUT() { time_t _t; struct tm *tm; char str[256]; \\","_t = (time_t) GET_BE_S_4(bp); \\"],"label":1}
{"cve":"CVE-2023-3012","code_chunks":["static GF_Err xml_sax_append_string(GF_SAXParser *parser, char *string)","{","u32 size = parser->line_size;","u32 nl_size = string ? (u32) strlen(string) : 0;","","if (!nl_size) return GF_OK;",""],"label":0}
{"cve":"CVE-2023-4678","code_chunks":["count = swf_get_16(read);","ft->nbGlyphs = count \/ 2;","offset_table = (u32*)gf_malloc(sizeof(u32) * ft->nbGlyphs);","offset_table[0] = 0;","for (i=1; i<ft->nbGlyphs; i++) offset_table[i] = swf_get_16(read);",""],"label":1}
{"cve":"CVE-2021-40563","code_chunks":["{","GF_List *list = NULL, *alt_list = NULL;","GF_NALUFFParam *sl;","u32 i, count;","u32 crc = gf_crc_32(data, size);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["tmp = ((keyword_ty)asdl_seq_GET(keywords, k))->arg;","if (tmp && !PyUnicode_Compare(tmp, key)) {","ast_error(c, chch,","\"keyword argument repeated\");","return NULL;","}","}"],"label":1}
{"cve":"CVE-2023-4758","code_chunks":["alBITMAPINFOHEADER bih;","","memcpy(&bih, hdrl_data + i, sizeof(alBITMAPINFOHEADER));","AVI->bitmap_info_header = (alBITMAPINFOHEADER *)","gf_malloc(str2ulong((unsigned char *)&bih.bi_size));"],"label":1}
{"cve":"CVE-2017-5209","code_chunks":["size_t len = (*size > 0) ? *size : strlen(buf);","if (len <= 0) return NULL;","unsigned char *outbuf = (unsigned char*)malloc((len\/4)*3+3);","const char *ptr = buf;","int p = 0;","size_t l = 0;"],"label":1}
{"cve":"CVE-2020-15192","code_chunks":["","m.def(\"TFE_ToDlpackCapsule\", [](py::handle& o) {","PyObject* eager_tensor_pyobject_ptr = o.ptr();","TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);","tensorflow::Safe_TF_StatusPtr status =","tensorflow::make_safe(TF_NewStatus());","void* dlm_ptr = tensorflow::TFE_HandleToDLPack(thandle, status.get());"],"label":1}
{"cve":"CVE-2023-28428","code_chunks":["if (st->flate.avail_out > 0)","return (-1);","for (; bufptr < bufsecond; remaining --, sptr ++)","*bufptr++ = *sptr;","for (; remaining > 0; remaining --, sptr ++, bufptr ++)","*bufptr = *sptr + bufptr[-(int)pbpixel];"],"label":1}
{"cve":"CVE-2016-2315","code_chunks":["if (parse_tree_gently(tree, revs->ignore_missing_links) < 0) {","if (revs->ignore_missing_links)","return;","die(\"bad tree object %s\", oid_to_hex(&obj->oid));","}",""],"label":1}
{"cve":"PYSEC-2021-419","code_chunks":["Status CreateTempFile(Env* env, float value, uint64 size, string* filename) {","const string dir = testing::TmpDir();","*filename = io::JoinPath(dir, strings::StrCat(\"file_\", value));","std::unique_ptr<WritableFile> file;"],"label":1}
{"cve":"CVE-2022-25139","code_chunks":["     *   vmcode_try_break to INVALID 1","     *   vmcode_try_continue to INVALID -1","     *   vmcode_try_return to a valid return value","     *\/","","    if (njs_is_valid(exit_value)) {","        return njs_vmcode_return(vm, NULL, exit_value);"],"label":0}
{"cve":"CVE-2021-41193","code_chunks":["","jzon_add_bool(jobj, \"update\",","msg->u.confconn.update);","jzon_add_str(jobj, \"tool\",","msg->u.confconn.tool);"],"label":1}
{"cve":"CVE-2021-30199","code_chunks":["static void latm_dmx_finalize(GF_Filter *filter)","{","\tGF_LATMDmxCtx *ctx = gf_filter_get_udta(filter);","\tif (ctx->bs) gf_bs_del(ctx->bs);","\tif (ctx->indexes) gf_free(ctx->indexes);","\tif (ctx->latm_buffer) gf_free(ctx->latm_buffer);","}"],"label":0}
{"cve":"CVE-2023-30188","code_chunks":["retValue->Clear();","","std::string commandA = U_TO_UTF8(command);",""],"label":1}
{"cve":"CVE-2021-32439","code_chunks":["{","GF_TimeToSampleBox *stts = stbl->TimeToSample;","","if (!nb_pack) nb_pack = 1;","if (stts->nb_entries) {","if (stts->entries[stts->nb_entries-1].sampleDelta == duration) {","stts->entries[stts->nb_entries-1].sampleCount += nb_pack;"],"label":1}
{"cve":"CVE-2019-11413","code_chunks":["","\/* splitting the empty string *\/","if (e == text) {","if (js_regexec(re->prog, text, &m, 0)) {","if (len == limit) return;","js_pushliteral(J, \"\");","js_setindex(J, -2, 0);"],"label":1}
{"cve":"CVE-2023-39975","code_chunks":["    return ret;","}","","static void","free_req_info(krb5_context context, struct tgs_req_info *t)","{","    krb5_free_kdc_req(context, t->req);"],"label":0}
{"cve":"CVE-2022-48571","code_chunks":["size_t len;","mc_resp *resp = c->resp;","","assert(c != NULL);","resp_reset(resp);","","if (c->noreply) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\tRLC_TRY {","\t\t\tif (u == NULL) {","\t\t\t\tRLC_THROW(ERR_NO_MEMORY);","\t\t\t}","\t\t\tfor (size_t i = 0; i < w; i++) {","\t\t\t\tfp24_null(u[i]);","\t\t\t\tfp24_new(u[i]);"],"label":0}
{"cve":"CVE-2018-20406","code_chunks":["Unpickler_set_memo(UnpicklerObject *self, PyObject *obj)","{","PyObject **new_memo;","Py_ssize_t new_memo_size = 0;","Py_ssize_t i;",""],"label":1}
{"cve":"CVE-2018-15501","code_chunks":["pkt->type = GIT_PKT_NG;","","line += 3; \/* skip \"ng \" *\/","if (!(ptr = strchr(line, ' ')))","goto out_err;","len = ptr - line;",""],"label":1}
{"cve":"CVE-2015-8631","code_chunks":["static generic_ret              ret;","char                            *prime_arg;","gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;","gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;","OM_uint32                       minor_stat;","kadm5_server_handle_t           handle;"],"label":0}
{"cve":"CVE-2023-1264","code_chunks":["{","putcmdline(typebuf.tb_buf[typebuf.tb_off","+ typebuf.tb_len - 1], FALSE);","c1 = 1;","}","}",""],"label":1}
{"cve":"CVE-2020-5310","code_chunks":["                       state->buffer + tile_y * row_byte_size,","                       current_tile_width","                    );","                }","            }","        }","    } else {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"CVE-2022-41895","code_chunks":["      MIRROR_PAD_GRAD_CASE(5);","        OP_REQUIRES(context, false,","                    errors::InvalidArgument(\"Unsupported rank: \",","                                            in0.shape().DebugString()));","    }","#undef MIRROR_PAD_GRAD_CASE","  }"],"label":0}
{"cve":"PYSEC-2020-125","code_chunks":["","auto do_work = [num_batches, samples_per_batch, &ctx, &bcast, &means,","&stddevs, &minvals, &maxvals, &gen, &output,","kStdDevsInsideBoundsToUseRandnSampler](int start_output,","int limit_output) {","random::PhiloxRandom gen_copy = gen;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["if (fc_params->weights_format != kTfLiteFullyConnectedWeightsFormatDefault) {","return false;","}","const TfLiteTensor* input = GetInput(context, node, kInput);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* fft_length;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFftLengthTensor, &fft_length));","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);"],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["todo[i]   = isix++;","todo[i+1] = buffer >> (14-i)*5;","}","for (i=0; i < 16; i+=2)"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["        op_data->scratch_tensor_index + kAuxInputZeroPoints;","    TfLiteTensor* aux_input_zp;","    TF_LITE_ENSURE_OK(","        context,","        GetTemporarySafe(context, node, kAuxInputZeroPoints, &aux_input_zp));","    aux_input_zp->type = kTfLiteFloat32;","    aux_input_zp->allocation_type = kTfLiteArenaRw;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(context, ResizeOutput(context, node));","}","const TfLiteTensor* top_k = GetInput(context, node, kInputTopK);","const int32 k = top_k->data.i32[0];","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const int32 row_size = input->dims->data[input->dims->size - 1];"],"label":1}
{"cve":"CVE-2022-39244","code_chunks":["","\/* check equal sign *\/","if (scanner->curptr+1 >= scanner->end || *(scanner->curptr+1) != '=') {","on_scanner_error(scanner);","return;","}"],"label":0}
{"cve":"PYSEC-2020-317","code_chunks":["            }","          }","        } else if (diff < cutoff) {","          ","          const T plusFactor = (normMin < T(0)) ? T(0) : normMin * normMin;","","          while (sample < limit_sample) {"],"label":0}
{"cve":"CVE-2022-41886","code_chunks":["","Tensor* output_t;","OP_REQUIRES_OK(","ctx, ctx->allocate_output(0,","TensorShape({images_t.dim_size(0), out_height,"],"label":1}
{"cve":"CVE-2018-9336","code_chunks":["    len = wcslen(sud->directory) + 1;","    size -= len;","    if (size <= 0)","    {","        MsgToEventLog(M_ERR, TEXT(\"Startup data ends at working directory\"));","        ReturnError(pipe, ERROR_STARTUP_DATA, L\"GetStartupData\", 1, &exit_event);","        goto err;"],"label":0}
{"cve":"PYSEC-2022-104","code_chunks":["  const auto rsqrt_cost = Eigen::internal::functor_traits<","      Eigen::internal::scalar_rsqrt_op<float>>::Cost;","  ops = dims.iz * (dims.batch * dims.ix * dims.iy * 11 + 5 + rsqrt_cost);","  node_costs->num_compute_ops = ops;","","  const int64_t size_nhwc =","      CalculateTensorSize(op_info.inputs(1), &found_unknown_shapes);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE(context, has_bias);","","if (has_bias) {","bias = GetInput(context, node, 2);","if (input_type == kTfLiteUInt8 || input_type == kTfLiteInt8) {","TF_LITE_ENSURE_TYPES_EQ(context, bias->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);"],"label":1}
{"cve":"CVE-2022-36026","code_chunks":["            InvalidArgument(\"input_max_tensor has incorrect size, was \",","                            input_max_tensor.dim_size(0), \" expected \", depth,","                            \" to match dim \", axis_, \" of the input \",","                            input_max_tensor.shape()));","      }","    } else {","      auto range_shape = (axis_ == -1) ? TensorShape({}) : TensorShape({depth});"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE(context, node->inputs->size > 0);","","const TfLiteTensor* cond;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &cond));","TF_LITE_ENSURE_EQ(context, cond->type, kTfLiteBool);","TF_LITE_ENSURE_EQ(context, NumElements(cond), 1);"],"label":0}
{"cve":"CVE-2016-9388","code_chunks":["{","jas_eprintf(\"warning: palettized images not fully supported\\n\");","numcolors = 1 << hdr->depth;","assert(numcolors <= RAS_CMAP_MAXSIZ);","actualnumcolors = hdr->maplength \/ 3;","for (i = 0; i < numcolors; i++) {","cmap->data[i] = 0;"],"label":1}
{"cve":"CVE-2016-8649","code_chunks":["{","int fret = -1;","const char* name;","char *command = NULL;","","name = lsm_name();"],"label":0}
{"cve":"CVE-2021-42782","code_chunks":["","r = piv_validate_general_authentication(card, data, datalen, rbuf, sizeof rbuf);","if (r < 0)","goto err;","","body = sc_asn1_find_tag(card->ctx, rbuf, r, 0x30, &bodylen);"],"label":1}
{"cve":"CVE-2020-13790","code_chunks":["      source->buffer_width = (size_t)w * 3 *","        ((maxval <= 255) ? sizeof(U_CHAR) : (2 * sizeof(U_CHAR)));","    else","      source->buffer_width = (size_t)w *","        ((maxval <= 255) ? sizeof(U_CHAR) : (2 * sizeof(U_CHAR)));","    source->iobuffer = (U_CHAR *)","      (*cinfo->mem->alloc_small) ((j_common_ptr)cinfo, JPOOL_IMAGE,"],"label":0}
{"cve":"CVE-2020-1712","code_chunks":["","                r = sd_bus_message_enter_container(q->reply, 'r', \"bba{ss}\");","                if (r >= 0)","                        r = sd_bus_message_read(q->reply, \"bb\", &authorized, &challenge);","                if (r < 0)","                        return r;",""],"label":0}
{"cve":"PYSEC-2019-227","code_chunks":["return;","}","const auto segment_flat = segment_ids.flat<Index>();","const Index output_rows = internal::SubtleMustCopy(static_cast<Index>(","num_segments.dtype() == DT_INT32 ? num_segments.scalar<int32>()()",": num_segments.scalar<int64>()()));","OP_REQUIRES(context, output_rows >= 0,"],"label":1}
{"cve":"CVE-2018-14055","code_chunks":["CString sLine = sData;","","sLine.Replace(\"\\n\", \"\");","sLine.Replace(\"\\r\", \"\");","","DEBUG(\"(\" << m_pNetwork->GetUser()->GetUserName() << \"\/\""],"label":0}
{"cve":"CVE-2022-1199","code_chunks":["ax25_for_each(s, &ax25_list) {","if (s->ax25_dev == ax25_dev) {","sk = s->sk;","sock_hold(sk);","spin_unlock_bh(&ax25_list_lock);","lock_sock(sk);"],"label":0}
{"cve":"CVE-2018-20178","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"CVE-2020-26267","code_chunks":["\"Source format must of length 4 or 5, received \"","\"src_format = \",","src_format)));","OP_REQUIRES(","context, dst_format.size() == 4 || dst_format.size() == 5,","errors::InvalidArgument(strings::StrCat("],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 codecPropertiesLength;","UINT16 remainingLength;","WLog_INFO(TAG, \"BitmapCodecsCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 5)","return FALSE;"],"label":1}
{"cve":"CVE-2016-9388","code_chunks":["int i;","","for (i = 0; i < numcmpts; ++i) {","data[i] = jas_matrix_create(jas_image_height(image), jas_image_width(image));","assert(data[i]);","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["if (!is_integer) {","node->temporaries->data[kScratchBuffer] =","op_data->scratch_tensor_index + kScratchBuffer;","TfLiteTensor* scratch_buffer = GetTemporary(context, node, kScratchBuffer);","scratch_buffer->type = input->type;","scratch_buffer->allocation_type = kTfLiteArenaRw;",""],"label":1}
{"cve":"CVE-2018-21010","code_chunks":["*r++ = (int) * out++;","*g++ = (int) * out++;","*b++ = (int) * out++;","}","r = g = b = NULL;","ok = 1;"],"label":1}
{"cve":"CVE-2017-9763","code_chunks":["if (grub_le_to_cpu32 (diro->inode.size) <= 60)","grub_strncpy (symlink,","diro->inode.symlink,","grub_le_to_cpu32 (diro->inode.size));","else","{"],"label":1}
{"cve":"CVE-2022-4254","code_chunks":["* @param[in] der_cert binary blog with the DER encoded certificate"],"label":1}
{"cve":"PYSEC-2020-307","code_chunks":["int ndim = tensor->dims();","dlm_tensor->dl_tensor.ndim = ndim;","dlm_tensor->dl_tensor.data = TFE_TensorHandleDevicePointer(h, status);","dlm_tensor->dl_tensor.dtype = GetDlDataType(data_type, status);","","std::vector<int64_t>* shape_arr = &tf_dlm_tensor_ctx->shape;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp18_write_bin(uint8_t *bin, size_t len, const fp18_t a) {","if (len != 18 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":0}
{"cve":"CVE-2021-32137","code_chunks":["","\t\te = stbl_GetSampleDTS(stbl->TimeToSample, sampleNumber, &DTS);","\tif (e) return e;","\tif (DTS != sample->DTS) return GF_BAD_PARAM;","","\t\tstbl_GetSampleInfos(stbl, sampleNumber, &off, &chunkNum, &descIndex, NULL);",""],"label":0}
{"cve":"CVE-2022-1237","code_chunks":["RList *segments = r_list_newf (free);","for (i = 0; i < bin->ne_header->SegCount; i++) {","RBinSection *bs = R_NEW0 (RBinSection);","NE_image_segment_entry *se = &bin->segment_entries[i];","if (!bs) {","return segments;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["lstm::full::kOutputLayerNormCoefficientsTensor)",": nullptr;","","TfLiteTensor* output = GetOutput(context, node, lstm::full::kOutputTensor);","","TfLiteLSTMParams lstm_params;","lstm_params.activation = params->activation;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params = reinterpret_cast<TfLiteDivParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["return true;","}","","raise_warning(\"IV passed is %d bytes long which is longer than the %d \"","\"expected by selected cipher, truncating\", piv.size(),","iv_required_len);","memcpy(iv_new, piv.data(), iv_required_len);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* indices;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kIndices, &indices));","const TfLiteTensor* updates;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kUpdates, &updates));"],"label":0}
{"cve":"CVE-2022-36017","code_chunks":["AddInputFromArray<qint32>(TensorShape({value_count}),","{-(1 << 23), 0, (1 << 23)});","AddInputFromArray<float>(TensorShape({1}), {-256.0f});","AddInputFromArray<float>(TensorShape({1}), {256.0f});","AddInputFromArray<float>(TensorShape({1}), {-1.0f});","AddInputFromArray<float>(TensorShape({1}), {1.0f});"],"label":1}
{"cve":"CVE-2017-12666","code_chunks":["magick_info=GetMagickInfo(write_info->magick,exception);","if ((magick_info == (const MagickInfo *) NULL) ||","(GetMagickMimeType(magick_info) == (const char *) NULL))","ThrowWriterException(CorruptImageError,\"ImageTypeNotSupported\");","(void) CopyMagickString(image->filename,write_info->filename,","MagickPathExtent);","blob_length=2048;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, NumDimensions(seq_lengths), 1);","","if (input->type != kTfLiteInt32 && input->type != kTfLiteFloat32 &&"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["input_to_forget_weights->type);","}","","const TfLiteTensor* recurrent_to_forget_weights ="],"label":1}
{"cve":"CVE-2019-19333","code_chunks":["goto error;","}","","make_canonical(ctx, LY_TYPE_DEC64, value_, &num, &type->info.dec64.dig);","","if (store) {","\/* store the result *\/"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* inputs;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputsTensor, &inputs));","const TfLiteTensor* sequence_length;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSequenceLengthTensor,","&sequence_length));"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_srt(bn_t c, bn_t a) {","bn_t h, l, m, t;","size_t bits;","int cmp;","","if (bn_sign(a) == RLC_NEG) {","RLC_THROW(ERR_NO_VALID);"],"label":0}
{"cve":"CVE-2017-1000251","code_chunks":["err = l2cap_connect_rsp(conn, &cmd, data);","break;","","err = l2cap_config_req(conn, &cmd, cmd_len, data);","break;",""],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["goto failed;","}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"CVE-2019-13217","code_chunks":["len <<= 1;","if (len == f->blocksize_0) return f->window[0];","if (len == f->blocksize_1) return f->window[1];","assert(0);","return NULL;","}",""],"label":1}
{"cve":"CVE-2021-32139","code_chunks":["\tITUNES_TAG(GF_ISOM_ITUNE_COPYRIGHT),","\tITUNES_TAG(GF_ISOM_ITUNE_TOOL),","\tITUNES_TAG(GF_ISOM_ITUNE_ENCODER),","\tITUNES_TAG(GF_ISOM_ITUNE_PURCHASE_DATE),","\tITUNES_TAG(GF_ISOM_ITUNE_PODCAST),","\tITUNES_TAG(GF_ISOM_ITUNE_PODCAST_URL),","\tITUNES_TAG(GF_ISOM_ITUNE_KEYWORDS),"],"label":0}
{"cve":"CVE-2021-33910","code_chunks":["assert(f);","assert(ret);","","p = strdupa(f);","if (!p)","return -ENOMEM;"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["static const struct git_attr *git_attr_internal(const char *name, int namelen)","{","struct git_attr *a;",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["if (projection_bias != nullptr) {","TF_LITE_ENSURE_EQ(context, projection_bias->dims->size, 1);","TF_LITE_ENSURE_EQ(context, projection_bias->dims->data[0], n_output);","}","","const bool projecton_tensors_consistent ="],"label":1}
{"cve":"PYSEC-2020-306","code_chunks":["","m.def(\"TFE_ToDlpackCapsule\", [](py::handle& o) {","PyObject* eager_tensor_pyobject_ptr = o.ptr();","TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);","tensorflow::Safe_TF_StatusPtr status =","tensorflow::make_safe(TF_NewStatus());","void* dlm_ptr = tensorflow::TFE_HandleToDLPack(thandle, status.get());"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["        return 1;","    }","    if (isinstance) {","        *out = Add;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject *)Sub_type);"],"label":0}
{"cve":"CVE-2022-45873","code_chunks":["        if (r < 0)","                return r;","","        r = RET_NERRNO(pipe2(error_pipe, O_CLOEXEC|O_NONBLOCK));","        if (r < 0)","                return r;",""],"label":0}
{"cve":"CVE-2022-41861","code_chunks":["\t\tfor (count = 0; count < masklen; count++) {","\t\t\ti = snprintf(p, outlen, \"%02x\", filter->u.generic.mask[count]);","\t\t\tp += i;","\t\t\toutlen -= i;","\t\t}","","\t\tstrcpy(p, \" \");"],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["\t\t\t    PJ_PERROR(2, (THIS_FILE, PJ_ETOOMANY,","\t\t\t\t\t  \"Error adding media bandwidth \"","\t\t\t\t\t  \"info, info is ignored\"));","\t\t    } else {","\t\t\tif (session->bandw_count < PJMEDIA_MAX_SDP_BANDW)","\t\t\t    session->bandw[session->bandw_count++] = bandw;","\t\t\telse"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2019-13308","code_chunks":["progress=0;","#if defined(MAGICKCORE_OPENMP_SUPPORT)","#pragma omp parallel for schedule(static) shared(progress,status) \\","magick_number_threads(images,complex_images,images->rows,1L)","#endif"],"label":1}
{"cve":"PYSEC-2021-462","code_chunks":["","TensorShape output_shape;","OP_REQUIRES_OK(context, TensorShapeUtils::MakeShape(","input_shape_t.data() + 1,","input_shape->NumElements() - 1, &output_shape));","","std::unordered_set<int64> visited;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  int num_elements = 0;","","  for (int i = 0; i < num_lookups; i++) {","    int idx = ids->data.i32[i];","    if (idx >= num_rows || idx < 0) {","      context->ReportError(context,","                           \"Embedding Lookup Sparse: index out of bounds. \""],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["struct all_attrs_item *all_attrs, int rem)","{","for (; rem > 0 && stack; stack = stack->prev) {","int i;","const char *base = stack->origin ? stack->origin : \"\";",""],"label":1}
{"cve":"CVE-2016-9392","code_chunks":["static int jpc_cod_dumpparms(jpc_ms_t *ms, FILE *out)","{","\tjpc_cod_t *cod = &ms->parms.cod;","\tint i;","\tfprintf(out, \"csty = 0x%02x;\\n\", cod->compparms.csty);","\tfprintf(out, \"numdlvls = %d; qmfbid = %d; mctrans = %d\\n\",","\t  cod->compparms.numdlvls, cod->compparms.qmfbid, cod->mctrans);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["auto it = id_map_.find(id);","if (it == id_map_.end()) {","return tsl::Status(","port::error::NOT_FOUND,","absl::StrFormat(\"could not find registered platform with id: %p\", id));","}","return it->second;"],"label":1}
{"cve":"CVE-2017-11462","code_chunks":["* the first call to init, and on all subsequent calls make the caller","* responsible for calling gss_delete_sec_context.  However, if the","* mechanism decided to delete the internal context, we should also","* delete the union context.","*\/","map_error(minor_status, mech);"],"label":1}
{"cve":"CVE-2018-5808","code_chunks":["switch (tag) {","#ifdef LIBRAW_LIBRARY_BUILD","imgdata.lens.FocalLengthIn35mmFormat = get2();","break;","stmread(imgdata.shootinginfo.BodySerial, len, ifp);","break;"],"label":1}
{"cve":"CVE-2020-36316","code_chunks":["static int pad_pkcs1(bn_t m, int *p_len, int m_len, int k_len, int operation) {","uint8_t *id, pad = 0;","int len, result = RLC_ERR;","bn_t t;","","bn_null(t);"],"label":0}
{"cve":"CVE-2016-10012","code_chunks":["\t}","\treturn r;","}","","int","ssh_packet_read_poll_seqnr(struct ssh *ssh, u_char *typep, u_int32_t *seqnr_p)","{"],"label":0}
{"cve":"CVE-2016-7514","code_chunks":["(0x01 << (7-bit))) != 0 ? 0 : 255,q);","SetPixelViaPixelInfo(image,image->colormap+(ssize_t)","ConstrainColormapIndex(image,GetPixelIndex(image,q),","exception),q);","q+=GetPixelChannels(image);","x++;"],"label":0}
{"cve":"CVE-2020-12887","code_chunks":["* \\return Return value is 0 in ok case and -1 in failure case","*\/","static int8_t sn_coap_parser_options_parse(struct coap_s *handle, uint8_t **packet_data_pptr, sn_coap_hdr_s *dst_coap_msg_ptr, uint8_t *packet_data_start_ptr, uint16_t packet_len)","{","uint8_t previous_option_number = 0;","int8_t  ret_status             = 0;"],"label":1}
{"cve":"CVE-2021-3772","code_chunks":["const struct sctp_endpoint *ep,","const struct sctp_association *asoc,","const union sctp_subtype type,","void *arg,","struct sctp_cmd_seq *commands)","{"],"label":1}
{"cve":"CVE-2021-23177","code_chunks":["\t\treturn (ret);","\t}","#if ARCHIVE_ACL_FREEBSD_NFS4","\telse if ((archive_acl_types(abstract_acl) &","\t    ARCHIVE_ENTRY_ACL_TYPE_NFS4) != 0) {","\t\tret = set_acl(a, fd, name, abstract_acl, mode,","\t\t    ARCHIVE_ENTRY_ACL_TYPE_NFS4, \"nfs4\");"],"label":0}
{"cve":"CVE-2018-8797","code_chunks":["{","color = CVAL(in);","*out = color;","out += 4;","indexw++;","collen--;"],"label":1}
{"cve":"CVE-2023-27601","code_chunks":["int delete_sdp_line( struct sip_msg * msg, char * s)","{","char * start,*end;",""],"label":1}
{"cve":"CVE-2019-3556","code_chunks":["      Debug::DebugInfo::recordDataMap(item->mutableData(),","                                      item->mutableData() + item->size(),","                                      \"Str-\" + str);","    }","  }","  return true;","}"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* axis;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));","TF_LITE_ENSURE_EQ(context, NumElements(axis), 1);","TF_LITE_ENSURE(context,","axis->type == kTfLiteInt32 || axis->type == kTfLiteInt64);"],"label":0}
{"cve":"CVE-2020-14147","code_chunks":["case '>': h->endian = BIG; return;","case '<': h->endian = LITTLE; return;","case '!': {","int a = getnum(L, fmt, MAXALIGN);","if (!isp2(a))","luaL_error(L, \"alignment %d is not a power of 2\", a);","h->align = a;"],"label":0}
{"cve":"CVE-2022-24754","code_chunks":["\t\t\t  &c[i].ext.aka.k);","\t\tpj_strdup(sess->pool, &sess->cred_info[i].ext.aka.op,","\t\t\t  &c[i].ext.aka.op);","\t\tpj_strdup(sess->pool, &sess->cred_info[i].ext.aka.amf,","\t\t\t  &c[i].ext.aka.amf);","\t    }",""],"label":0}
{"cve":"CVE-2024-0727","code_chunks":["","\/* Change password of safebag: only needs handle shrouded keybags *\/","","static int newpass_bag(PKCS12_SAFEBAG *bag, const char *oldpass,","                       const char *newpass,","                       OSSL_LIB_CTX *libctx, const char *propq)","{"],"label":0}
{"cve":"CVE-2023-6915","code_chunks":["goto delete;","xas_store(&xas, xa_mk_value(v));","} else {","if (!test_bit(bit, bitmap->bitmap))","goto err;","__clear_bit(bit, bitmap->bitmap);","xas_set_mark(&xas, XA_FREE_MARK);"],"label":1}
{"cve":"CVE-2021-4173","code_chunks":["","CLEAR_FIELD(ea);","ea.cmd = ea.arg = iptr->isn_arg.string;","define_function(&ea, NULL);","}","break;",""],"label":1}
{"cve":"CVE-2020-28896","code_chunks":[" * element in \"flag_list\"."," *\/","bool imap_has_flag(struct ListHead *flag_list, const char *flag)","{","  if (STAILQ_EMPTY(flag_list))","    return false;",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["        for (int row = 0; row < num_indices_to_sort; row++) {","      int temp = sorted_indices[row];","      sorted_indices[row] = box_indices_after_regular_non_max_suppression[temp];","      sorted_values[row] = scores_after_regular_non_max_suppression[temp];","    }","        for (int row = 0; row < num_indices_to_sort; row++) {","      box_indices_after_regular_non_max_suppression[row] = sorted_indices[row];"],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["void CLASS rollei_load_raw()","{","uchar pixel[10];","unsigned iten=0, isix, i, buffer=0, todo[16];","","isix = raw_width * raw_height * 5 \/ 8;","while (fread (pixel, 1, 10, ifp) == 10) {"],"label":1}
{"cve":"PYSEC-2021-782","code_chunks":["if (tuple[index].has_value()) {","return Status(errors::InvalidArgument(","\"The tensor for index '\", index, \"' for key '\", key.scalar<int64>()(),","\"' was already initialized '\", dtypes_.size(), \"'.\"));","}",""],"label":1}
{"cve":"CVE-2021-43860","code_chunks":["    {","      op->eol = g_strdup (var_metadata_lookup_string (sparse_cache, FLATPAK_SPARSE_CACHE_KEY_ENDOFLINE, NULL));","      op->eol_rebase = g_strdup (var_metadata_lookup_string (sparse_cache, FLATPAK_SPARSE_CACHE_KEY_ENDOFLINE_REBASE, NULL));","      op->token_type = GINT32_FROM_LE (var_metadata_lookup_int32 (sparse_cache, FLATPAK_SPARSE_CACHE_KEY_TOKEN_TYPE, op->token_type));","    }","","  return resolve_op_end (self, op, checksum, sideload_path, metadata_bytes, error);"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["goto error;","}","","make_canonical(ctx, LY_TYPE_INT16, value_, &num, NULL);","","if (store) {","\/* store the result *\/"],"label":1}
{"cve":"CVE-2017-16818","code_chunks":["      t->princ : t->noprinc;","","    auto o = parse_principal(pp->cct, w->id, string(s, l));","    if (o)","      pri.emplace(std::move(*o));","","    "],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["                asdl_seq_SET(names, i, val);","            }","            Py_CLEAR(tmp);","        }","        *out = Global(names, lineno, col_offset, arena);","        if (*out == NULL) goto failed;","        return 0;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["      break;","      TF_LITE_KERNEL_LOG(context, \"Type %s is currently not supported by TopK.\",","                         TfLiteTypeGetName(output_values->type));","      return kTfLiteError;","  }","","  return kTfLiteOk;"],"label":0}
{"cve":"CVE-2018-8791","code_chunks":["\t\t\t\t\t\tcontext_established = 1;","","\t\t\tif (!cssp_gss_wrap(gss_ctx, &pubkey, &blob))","\t\t\t\tgoto bail_out;","","\t\t\tif (!cssp_send_tsrequest(NULL, NULL, &blob))","\t\t\t\tgoto bail_out;"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["          cond_handle_(cond_handle),","          body_handle_(body_handle),","          done_(std::move(done)),","          lib_(CHECK_NOTNULL(ctx_->function_library())),","          opts_(ctx->step_id()) {","      SetRunOptions(ctx_, &opts_, false \/* always_collect_stats *\/);","      GetArgsFromContext(ctx, &args_, &loop_var_types_);"],"label":0}
{"cve":"CVE-2018-20178","code_chunks":["int i;","uint16 num_updates;","","in_uint16_le(s, num_updates);   \/* rectangles *\/","","for (i = 0; i < num_updates; i++)"],"label":0}
{"cve":"CVE-2022-37032","code_chunks":["if (! CHECK_FLAG (peer->cap, PEER_CAP_DYNAMIC_ADV))","{","plog_err (peer->log, \"%s [Error] BGP dynamic capability is not enabled\",","peer->host);","bgp_notify_send (peer,","BGP_NOTIFY_HEADER_ERR,"],"label":1}
{"cve":"CVE-2019-20630","code_chunks":["Bool same_pts = GF_FALSE;","","switch (stream_id) {","has_pes_header = GF_FALSE;","break;","}"],"label":1}
{"cve":"CVE-2022-0696","code_chunks":["    long\t*def,","    int\t\t*flags,","    int\t\t*complp,","    char_u\t**compl_arg,","    cmd_addr_T\t*addr_type_arg)","{","    char_u\t*p;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  const int batch_size = SizeOfDimension(inputs, 1);","","  const TfLiteTensor* sequence_length;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSequenceLengthTensor,","                                          &sequence_length));","  TF_LITE_ENSURE_EQ(context, NumDimensions(sequence_length), 1);","  TF_LITE_ENSURE_EQ(context, NumElements(sequence_length), batch_size);"],"label":0}
{"cve":"CVE-2018-16393","code_chunks":["return SC_ERROR_INVALID_ARGUMENTS;","}","","if (sec_attr == NULL) {","if (file->sec_attr != NULL)","free(file->sec_attr);","file->sec_attr = NULL;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","TF_LITE_ENSURE_TYPES_EQ(context, input->type, expected_type);","const int64_t num_elements = NumElements(input);","const T* in_data = GetTensorData<T>(input);"],"label":1}
{"cve":"CVE-2019-17546","code_chunks":["}","}","else if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 0),","p0, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)","&& img->stoponerr)","{","ret = 0;"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["\t\tbreak;","#endif","\t\tputs (\"Wrong image format for \\\"source\\\" command\\n\");","\t\treturn 1;","\t}","","\tdebug(\"** Script length: %ld\\n\", len);"],"label":0}
{"cve":"PYSEC-2020-115","code_chunks":["int ndim = tensor->dims();","dlm_tensor->dl_tensor.ndim = ndim;","dlm_tensor->dl_tensor.data = TFE_TensorHandleDevicePointer(h, status);","dlm_tensor->dl_tensor.dtype = GetDlDataType(data_type, status);","","std::vector<int64_t>* shape_arr = &tf_dlm_tensor_ctx->shape;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["arg_ty value;","res = obj2ast_arg(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"arguments field \\\"args\\\" changed size during iteration\");","goto failed;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* in_tensor = GetInput(context, node, 0);","TfLiteTensor* out_tensor = GetOutput(context, node, 0);","TfLiteIntArray* new_size = TfLiteIntArrayCopy(in_tensor->dims);","return context->ResizeTensor(context, out_tensor, new_size);","};"],"label":1}
{"cve":"CVE-2023-23456","code_chunks":["fi->readx(wrkmem + 4, rsize);","const unsigned overlay = file_size - fi->tell();","","if (find_le32(ibuf, 128, get_le32(\"UPX \")) >= 0)","throwAlreadyPacked();","if (rsize == 0)","throwCantPack(\"file is already compressed with another packer\");"],"label":1}
{"cve":"CVE-2017-11462","code_chunks":["","\t    \/* if the call failed, return with failure *\/","\t    if (status != GSS_S_COMPLETE) {","\t\tmap_error(minor_status, mech);","\t\tgoto error_out;","\t    }",""],"label":0}
{"cve":"CVE-2017-6439","code_chunks":["if (*object + size+1 > bplist->offset_table) {","PLIST_BIN_ERR(\"%s: BPLIST_UID data bytes point outside of valid range\\n\", __func__);","return NULL;","}","return parse_uid_node(object, size);",""],"label":1}
{"cve":"CVE-2019-19959","code_chunks":["      mTime = zipfileGetTime(apVal[4]);","    }","","    if( rc==SQLITE_OK && bIsDir ){","      \/* For a directory, check that the last character in the path is a","      ** '\/'. This appears to be required for compatibility with info-zip","      ** (the unzip command on unix). It does not create directories"],"label":0}
{"cve":"PYSEC-2020-125","code_chunks":["const int32 last_tree = resource->num_trees() - 1;","","auto do_work = [&resource, &bucketized_features, &output_debug_info,","last_tree](int32 start, int32 end) {","for (int32 i = start; i < end; ++i) {","boosted_trees::DebugOutput example_debug_info;","const auto& tree_logits = resource->node_value(0, 0);"],"label":1}
{"cve":"CVE-2021-44108","code_chunks":["if (at && length) {","SWITCH(data->header_field)","CASE(OGS_SBI_CONTENT_TYPE)","if (data->part[data->num_of_part].content_type)"],"label":1}
{"cve":"CVE-2018-8787","code_chunks":["\treturn TRUE;","}","","\/* Glyph Class *\/","static BOOL gdi_Glyph_New(rdpContext* context, const rdpGlyph* glyph)","{","\tBYTE* data;"],"label":0}
{"cve":"PYSEC-2020-272","code_chunks":["  }","","  auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);","  if (!status->status.ok()) {","    return nullptr;","  }",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["      reg.custom_name = \"fake_fused_op\";","","                  if (fail_delegate_node_invoke_) {","        reg.invoke = [](TfLiteContext* context,","                        TfLiteNode* node) -> TfLiteStatus {","          return kTfLiteError;","        };"],"label":0}
{"cve":"CVE-2020-36316","code_chunks":["uint8_t pad, h1[RLC_MD_LEN], h2[RLC_MD_LEN];","\/* MSVC does not allow dynamic stack arrays *\/","uint8_t *mask = RLC_ALLOCA(uint8_t, k_len);","int result = RLC_ERR;","bn_t t;","","bn_null(t);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* filter;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kWeightsTensor, &filter));","const TfLiteTensor* bias =","(node->inputs->size == 3)"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["FrontendReset(data->state);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(values, i, val);","            }","            Py_CLEAR(tmp);","        }"],"label":0}
{"cve":"CVE-2020-1918","code_chunks":["  return Variant(std::move(sock));","}","","","Variant HHVM_FUNCTION(socket_create,","                      int domain,","                      int type,"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ed_write_bin(uint8_t *bin, size_t len, const ed_t a, int pack) {","\ted_t t;","","\ted_null(t);","","\tmemset(bin, 0, len);",""],"label":0}
{"cve":"PYSEC-2021-309","code_chunks":["if (positions->type == kTfLiteInt32) {","switch (input->type) {","return Gather<float, int32_t>(context, *params, input, positions,","output);","return Gather<uint8_t, int32_t>(context, *params, input, positions,","output);","return Gather<int8_t, int32_t>(context, *params, input, positions,"],"label":0}
{"cve":"CVE-2021-21323","code_chunks":["ctx->request_url.is_empty()) {","return;","}","DCHECK_NE(ctx->request_identifier, 0UL);","","scoped_refptr<base::SequencedTaskRunner> task_runner ="],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));","TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);","TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);","","const TfLiteTensor* key;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &key));"],"label":0}
{"cve":"CVE-2023-28487","code_chunks":["const char *user, const char *tty)","{","char idbuf[7], *idstr, *cp;","struct eventlog *evlog = NULL;","const char *timestr;","int i, ret = -1;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["}","}","","TfLiteTensor* fw_output = GetOutput(context, node, kFwOutputTensor);","TfLiteIntArray* fw_output_size_array = TfLiteIntArrayCreate(3);","fw_output_size_array->data[0] = (time_major) ? max_time : batch_size;","fw_output_size_array->data[1] = (time_major) ? batch_size : max_time;"],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["void CLASS rollei_load_raw()","{","uchar pixel[10];","unsigned iten=0, isix, i, buffer=0, todo[16];","","isix = raw_width * raw_height * 5 \/ 8;","while (fread (pixel, 1, 10, ifp) == 10) {"],"label":1}
{"cve":"CVE-2016-10156","code_chunks":["va_start(ap, files);","while (files != NULL) {","_cleanup_free_ char *path = strappend(tmp_dir, files);","assert_se(touch_file(path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0) == 0);","files = va_arg(ap, const char *);","}","va_end(ap);"],"label":1}
{"cve":"CVE-2020-11044","code_chunks":["\t\tbreak;","","\t\t{","\t\t\tconst BOOL compressed = (orderType == ORDER_TYPE_BITMAP_COMPRESSED_V2);","\t\t\tCACHE_BITMAP_V2_ORDER* order =","\t\t\t    update_read_cache_bitmap_v2_order(update, s, compressed, extraFlags);",""],"label":0}
{"cve":"CVE-2018-20182","code_chunks":["\t\tpubkey->size = length;","\t}","","","\treturn True;","}",""],"label":0}
{"cve":"CVE-2020-11558","code_chunks":["","","void rtpo_del(GF_Box *s)","{","\tGF_RTPOBox *rtpo = (GF_RTPOBox *)s;","\tgf_free(rtpo);","}"],"label":0}
{"cve":"CVE-2018-14681","code_chunks":["return MSPACK_ERR_SEEK;","}","","\/* copy extension if present *\/","if (hdr->headers & MSKWAJ_HDR_HASFILEEXT) {","*fn++ = '.';"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","if (output->type != kTfLiteString) {","if (NumInputs(node) == 1 ||","IsConstantTensor(GetInput(context, node, kShapeTensor))) {"],"label":1}
{"cve":"CVE-2017-16909","code_chunks":["int row, col, i, j, sh = 0, pred[2], nonz[2];","","pana_bits(0);","for (row = 0; row < height; row++)","{","#ifdef LIBRAW_LIBRARY_BUILD","checkCancel();"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["      GetOptionalInputTensor(context, node, lstm::full::kProjectionBiasTensor);","","    TfLiteTensor* scratch_buffer;","  TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, kScratchBuffer,","                                              &scratch_buffer));","","  TfLiteTensor* output_state ="],"label":0}
{"cve":"PYSEC-2020-114","code_chunks":["  for (int i = ndim - 2; i >= 0; --i) {","    (*stride_arr)[i] = (*shape_arr)[i + 1] * (*stride_arr)[i + 1];","  }","","  dlm_tensor->dl_tensor.shape = shape_arr->data();","            dlm_tensor->dl_tensor.strides = stride_arr->data();",""],"label":0}
{"cve":"CVE-2020-1918","code_chunks":["sa->sun_family = AF_UNIX;","if (addr.length() > sizeof(sa->sun_path)) {","raise_warning(","\"Unix socket path length (%d) is larger than system limit (%lu)\",","addr.length(),","sizeof(sa->sun_path)",");"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["         fft_dynamic_working_area, fft_integer_working_area_data,","         fft_double_working_area_data);","  Rfft2dReorder(fft_height, fft_width, fft_input_output);","}","","void PrepareInputBuffer(const float* input_data, int input_height,","                        int input_width, int fft_height, int fft_width,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input_box_encodings =","GetInput(context, node, kInputTensorBoxEncodings);","TF_LITE_ENSURE_EQ(context, input_box_encodings->dims->data[0], kBatchSize);","const int num_boxes = input_box_encodings->dims->data[1];","TF_LITE_ENSURE(context, input_box_encodings->dims->data[2] >= kNumCoordBox);","const TfLiteTensor* input_anchors ="],"label":1}
{"cve":"CVE-2021-3796","code_chunks":["\t\t}","\t\telse if (nv_screengo(oap, FORWARD, cap->count1 - 1) == FAIL)","\t\t    clearopbeep(oap);","\t    }","\t    else","\t    {","\t\tif (cap->count1 > 1)"],"label":0}
{"cve":"CVE-2019-5489","code_chunks":["\tif (!vma || addr < vma->vm_start)","\t\treturn -ENOMEM;","\tmincore_walk.mm = vma->vm_mm;","\tend = min(vma->vm_end, addr + (pages << PAGE_SHIFT));","\terr = walk_page_range(addr, end, &mincore_walk);","\tif (err < 0)","\t\treturn err;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);","","const TfLiteTensor* input_resource_id_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputVariableId,","&input_resource_id_tensor));","TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);"],"label":0}
{"cve":"CVE-2016-5356","code_chunks":["struct\ttm tm;","","if (sscanf(line, \"%4d-%2d-%2d,%2d:%2d:%2d.%9d:\",","&yy, &mm, &dd, &hr, &min, &sec, &csec) == 7) {","\/* appears to be output to a control blade *\/","num_items_scanned = sscanf(line,"],"label":1}
{"cve":"CVE-2023-25670","code_chunks":["if (std::is_same<Toutput, quint8>::value ||","std::is_same<Toutput, qint8>::value) {","min_output_value = context->input(7).flat<float>()(0);","max_output_value = context->input(8).flat<float>()(0);","} else {","ComputeOutputRangeForInt32(context, &min_output_value, &max_output_value);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {","return 1;"],"label":1}
{"cve":"PYSEC-2020-292","code_chunks":["TfLiteTensor* output) {","int max_index = -1;","const int segment_id_size = segment_ids->dims->data[0];","if (segment_id_size > 0) {","max_index = segment_ids->data.i32[segment_id_size - 1];","}"],"label":1}
{"cve":"CVE-2016-4563","code_chunks":[],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","  TF_LITE_ENSURE(context, node->inputs->size > 0);","","    const TfLiteTensor* cond;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &cond));","        TF_LITE_ENSURE_EQ(context, cond->type, kTfLiteBool);","  TF_LITE_ENSURE_EQ(context, NumElements(cond), 1);"],"label":0}
{"cve":"CVE-2017-14172","code_chunks":["          {","            q=GetStringInfoDatum(profile);","            for (i=0; i < (ssize_t) length; i++)","              *q++=(unsigned char) ProfileInteger(image,hex_digits);","            (void) SetImageProfile(image,\"8bim\",profile,exception);","            profile=DestroyStringInfo(profile);","          }"],"label":0}
{"cve":"CVE-2019-15139","code_chunks":["ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");","}","x_status=XInitImage(ximage);","if (x_status == 0)","{","ximage=(XImage *) RelinquishMagickMemory(ximage);"],"label":1}
{"cve":"CVE-2022-24754","code_chunks":["char tmp_buf[48];","int hmac64_len;","","resikck.slen = PJSIP_AKA_RESLEN + PJSIP_AKA_IKLEN + PJSIP_AKA_CKLEN;","pj_assert(resikck.slen <= PJ_ARRAY_SIZE(tmp_buf));","resikck.ptr = tmp_buf;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor2, &input2));"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (tmp == NULL) goto failed;","res = obj2ast_expr(tmp, &lower, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","} else {","lower = NULL;"],"label":1}
{"cve":"CVE-2019-15945","code_chunks":["u8 *out = (u8 *) outbuf;","int i, count = 0;","int zero_bits;","size_t octets_left;","","if (outlen < octets_left)"],"label":0}
{"cve":"CVE-2018-12559","code_chunks":["{","int t=type->itemData(type->currentIndex()).toInt();","RemoteFsDevice::Details det;","","det.name=name->text().trimmed();","switch (t) {","case Type_SshFs: {"],"label":0}
{"cve":"CVE-2019-14816","code_chunks":["rate_ie = (void *)cfg80211_find_ie(WLAN_EID_EXT_SUPP_RATES,","params->beacon.tail,","params->beacon.tail_len);","if (rate_ie)","memcpy(bss_cfg->rates + rate_len, rate_ie + 1, rate_ie->len);","","return;"],"label":1}
{"cve":"CVE-2018-10861","code_chunks":["","if (m->fsid != mon->monmap->fsid) {","dout(0) << __func__ << \" drop message on fsid \" << m->fsid","<< \" != \" << mon->monmap->fsid << \" for \" << *m << dendl;"],"label":1}
{"cve":"CVE-2016-5356","code_chunks":["\t\tbuf[byte_offset + i] = (guint8)bytes[i];","\t}","","\treturn num_items_scanned;","}","","\/*"],"label":0}
{"cve":"CVE-2023-1605","code_chunks":["nimports++;","}","i += bin->symbols[i].n_numaux;","}","ut64 m_vaddr = UT64_MAX;","if (nimports) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp8_write_bin(uint8_t *bin, int len, const fp8_t a);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["char *","Ta3Tokenizer_FindEncoding(int fd)","{","    return Ta3Tokenizer_FindEncodingFilename(fd, NULL);","}","","#ifdef Py_DEBUG"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;"],"label":1}
{"cve":"CVE-2016-4562","code_chunks":["return(MagickFalse);","(void) QueryColorCompliance(\"#0000\",AllCompliance,","&clip_mask->background_color,exception);","clip_mask->background_color.alpha=(Quantum) TransparentAlpha;","(void) SetImageBackgroundColor(clip_mask,exception);","if (image->debug != MagickFalse)","(void) LogMagickEvent(DrawEvent,GetMagickModule(),\"\\nbegin clip-path %s\","],"label":1}
{"cve":"CVE-2017-9520","code_chunks":["\tRBinObject *binobj = binfile ? binfile->o: NULL;","\tRBinInfo *info = binobj ? binobj->info: NULL;","\tif (info) {","\t\tint va = info->has_va;","\t\tchar * arch = strdup(info->arch);","\t\tchar * cpu = info->cpu? strdup(info->cpu): NULL;","\t\tut16 bits = info->bits;"],"label":0}
{"cve":"CVE-2021-41864","code_chunks":["\/* Called from syscall or from eBPF program *\/","static int stack_map_delete_elem(struct bpf_map *map, void *key)","{","\tstruct bpf_stack_map *smap = container_of(map, struct bpf_stack_map, map);","\tstruct stack_map_bucket *old_bucket;","\tu32 id = *(u32 *)key;",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2016-6873","code_chunks":["Array ret = Array::attach(PackedArray::MakeReserve(args.size() + 1));","VarEnv* v = g_context->getOrCreateVarEnv();","if (v) {","PointerSet seen;","compact(seen, v, ret, varname);","if (!args.empty()) compact(seen, v, ret, args);","}"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","auto* params = reinterpret_cast<TfLiteArgMaxParams*>(node->builtin_data);","switch (params->output_type) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["                                        data));","","  data->input_zero_point = input->params.zero_point;","  data->filter_zero_point = filter->params.zero_point;","  data->output_zero_point = output->params.zero_point;","","  return kTfLiteOk;"],"label":0}
{"cve":"CVE-2019-20629","code_chunks":["assert( af_size<=183);","if (af_size>183)","GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[MPEG-2 TS] TS Packet %d Detected wrong adaption field size %u when control value is 3\\n\", ts->pck_number, af_size));","if (af_size) gf_m2ts_get_adaptation_field(ts, paf, data+5, af_size, hdr.pid);","pos += 1+af_size;","payload_size = 183 - af_size;"],"label":1}
{"cve":"PYSEC-2019-136","code_chunks":["return inst, sock, map","","def test_ctor(self):","inst, _, map = self._makeOneWithMap()","self.assertEqual(inst.addr, \"127.0.0.1\")","self.assertEqual(inst.sendbuf_len, 2048)"],"label":1}
{"cve":"PYSEC-2020-327","code_chunks":["TfLiteTensor* output) {","int max_index = -1;","const int segment_id_size = segment_ids->dims->data[0];","if (segment_id_size > 0) {","max_index = segment_ids->data.i32[segment_id_size - 1];","}"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (_PyObject_HasAttrId(obj, &PyId_values)) {","int res;","Py_ssize_t len;","Py_ssize_t i;","tmp = _PyObject_GetAttrId(obj, &PyId_values);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["        return NULL;","","    isinstance = PyObject_IsInstance(ast, req_type[mode]);","    if (isinstance == -1)","        return NULL;","    if (!isinstance) {","        PyErr_Format(PyExc_TypeError, \"expected %s node, got %.400s\","],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["cell_state_quantized->type = input_to_output_weights->type;","cell_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(cell_state_quantized->dims, cell_state->dims)) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["        }","        else {","            int res;","            res = obj2ast_expr(tmp, &value, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }"],"label":0}
{"cve":"PYSEC-2022-122","code_chunks":["TfLiteIntArray* TfLiteIntArrayCreate(int size) {","int alloc_size = TfLiteIntArrayGetSizeInBytes(size);","if (alloc_size <= 0) return NULL;","TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);","if (!ret) return ret;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["mod_ty o = (mod_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_RETURN_NONE;","}","","switch (o->kind) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const auto* input_dims_data = input_shape.DimsData();","int num_slices = 1;","for (int i = 0; i < input_dims_count - 2; ++i) {","num_slices *= input_dims_data[i];","}",""],"label":1}
{"cve":"CVE-2020-25669","code_chunks":["\tsunkbd->type = sunkbd->reset;","","\tif (sunkbd->type == 4) {\t\/* Type 4 keyboard *\/","\t\tsunkbd->layout = -2;","\t\tserio_write(sunkbd->serio, SUNKBD_CMD_LAYOUT);","\t\twait_event_interruptible_timeout(sunkbd->wait,","\t\t\t\t\t\t sunkbd->layout >= 0, HZ \/ 4);"],"label":0}
{"cve":"PYSEC-2021-810","code_chunks":[": std::ceil(std::abs((limit - start) \/ delta)));","Tensor* out = nullptr;","OP_REQUIRES_OK(context,","context->allocate_output(0, TensorShape({size}), &out));","auto flat = out->flat<T>();","T val = start;"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["bool& isvalid, CryptoKey& session_key) override;"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["uint8_t data_2 = 0;","char *text = NULL;","","if (!siz) goto shortbuf;","","if (event_data[0] >= 0x80) {","command = *event_data & 0xf0;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(values, i, val);","            }","            Py_CLEAR(tmp);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, node->outputs->size,","params->merge_outputs ? 1 : 2);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);","TF_LITE_ENSURE_EQ(context, input->dims->size, 3);","const bool time_major = params->time_major;"],"label":1}
{"cve":"CVE-2017-9990","code_chunks":["        dst = (uint32_t *)(p->data[0] + i * p->linesize[0]);","        if (end - ptr < 1)","            return AVERROR_INVALIDDATA;","        ptr += mod_strcspn(ptr, \"\\\"\") + 1;","        if (end - ptr < 1)","            return AVERROR_INVALIDDATA;",""],"label":0}
{"cve":"CVE-2016-4564","code_chunks":["      {","        if (primitive_info[j].coordinates != 3)","          {","            status=MagickFalse;","            break;","          }","        TraceRoundRectangle(primitive_info+j,primitive_info[j].point,"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","bool requires_broadcast = !HaveSameShapes(input1, input2);","switch (input1->type) {","Comparison<bool, reference_ops::NotEqualFn>(input1, input2, output,"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp4_write_bin(uint8_t *bin, int len, const fp4_t a);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","const TfLiteTensor* input;"],"label":0}
{"cve":"CVE-2023-41337","code_chunks":["                            *src = end;","                        });","                    }","                });","            }","        });","    });"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","","if (kernel_type == kFixedPointOptimized) {"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, \/*index=*\/0, &input1));","const TfLiteTensor* input2;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, \/*index=*\/1, &input2));","","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["if (parse_cookie(s, p, &s->cookie_dict))","av_log(h, AV_LOG_WARNING, \"Unable to parse '%s'\\n\", p);","} else if (!av_strcasecmp(tag, \"Icy-MetaInt\")) {","s->icy_metaint = strtoll(p, NULL, 10);","} else if (!av_strncasecmp(tag, \"Icy-\", 4)) {","if ((ret = parse_icy(s, tag, p)) < 0)","return ret;"],"label":1}
{"cve":"CVE-2019-16785","code_chunks":["    inst.outbuf_lock = DummyLock()","        return inst, sock, map","","    def test_ctor(self):","        inst, _, map = self._makeOneWithMap()","        self.assertEqual(inst.addr, \"127.0.0.1\")","        self.assertEqual(inst.sendbuf_l"],"label":0}
{"cve":"CVE-2022-36016","code_chunks":["if (t.args_size() != 3) {","return Status(error::INVALID_ARGUMENT,","absl::StrCat(\"illegal FOR_EACH type, expected 3 args, got \",","t.args_size()));","}",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* projection_bias =","GetOptionalInputTensor(context, node, lstm::full::kProjectionBiasTensor);","","TfLiteTensor* scratch_buffer = GetTemporary(context, node, kScratchBuffer);",""],"label":1}
{"cve":"CVE-2016-10190","code_chunks":["{","    HTTPContext *s = h->priv_data;","","    if (s->icy_metaint > 0) {","        size = store_icy(h, size);","        if (size < 0)","            return size;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* cond = GetInput(context, node, 0);","bool cond_value = cond->data.b[0];","","Subgraph* this_subgraph = reinterpret_cast<Subgraph*>(context->impl_);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp9_read_bin(fp9_t a, const uint8_t *bin, int len) {","if (len != 9 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["}","else if (isArg(i, argc, argv, NULL, \"--camp\")) {","}","else if (isArg(i, argc, argv, NULL, \"--no-camp\")) {","}","else if (isArg(i, argc, argv, NULL, \"--yscroll\", 1)) {"],"label":1}
{"cve":"CVE-2018-15861","code_chunks":["static bool","LookupModMask(struct xkb_context *ctx, const void *priv, xkb_atom_t field,","enum expr_value_type type, xkb_mod_mask_t *val_rtrn)","{","const char *str;","xkb_mod_index_t ndx;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2021-32139","code_chunks":["else if (type==GF_4CC('!', 's', 'i', 'x')) {","do_uncompress = GF_TRUE;","type = GF_ISOM_BOX_TYPE_SIDX;","}","else if (type==GF_4CC('!', 's', 's', 'x')) {","do_uncompress = GF_TRUE;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["","static struct PyModuleDef _astmodule = {","  PyModuleDef_HEAD_INIT, \"_ast\"","};","PyMODINIT_FUNC","PyInit__ast(void)","{"],"label":0}
{"cve":"CVE-2017-9144","code_chunks":["for (i=0; i < (ssize_t) number_pixels; i++)","for (x=0; x < (ssize_t) number_planes; x++)","{","ValidateColormapValue(image,(size_t) (x*map_length+","(*p & mask)),&index,exception);","*p=colormap[(ssize_t) index];","p++;"],"label":1}
{"cve":"CVE-2021-21378","code_chunks":["      ->mutable_allow_missing();","","  createAsyncMockAuthsAndVerifier(std::vector<std::string>{\"example_provider\", \"other_provider\"});","  EXPECT_CALL(mock_cb_, onComplete(Status::JwtUnknownIssuer));","","  auto headers = Http::TestRequestHeaderMapImpl{};","  context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);"],"label":0}
{"cve":"CVE-2023-25933","code_chunks":["    if (relativeIndex >= 0) {","        k = relativeIndex;","  } else {","            k = len + relativeIndex;","  }","","    if (k < 0 || k >= len) {"],"label":0}
{"cve":"CVE-2017-12664","code_chunks":["bit,","byte,","color,","*lastrow,","*one_row,","*ptr,","version;"],"label":1}
{"cve":"PYSEC-2020-258","code_chunks":["static const char* ConvertScalar(PyObject* v, Eigen::half* out) {","return ConvertOneFloat<Eigen::half>(v, out);","}"],"label":0}
{"cve":"CVE-2017-12664","code_chunks":["        if (last_row == (unsigned char *) NULL)","          {","            quantize_info=DestroyQuantizeInfo(quantize_info);","            ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");","          }","      }","    one_row=(unsigned char *) AcquireQuantumMemory(bytes_per_row,"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    TF_LITE_ENSURE_OK(","      context, CheckInputTensorDimensions(context, node, n_input, n_bw_output,","                                          n_bw_cell));","","    TfLiteTensor* bw_activation_state =","      GetVariableInput(context, node, kBwInputActivationStateTensor);","  TF_LITE_ENSURE(context, bw_activation_state != nullptr);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["","    ~State() {}","","    void Start() {","      int branch = branch_;","            if (branch < 0 || branch >= branch_handles_.size()) {","        branch = branch_handles_.size() - 1;"],"label":0}
{"cve":"CVE-2021-32438","code_chunks":["}","esd = gf_media_map_esd(dumper->file, track_num, 0);","sample_count = gf_isom_get_sample_count(dumper->file, dumper->trackID);","if (esd) {","if (esd->decoderConfig->objectTypeIndication<GF_CODECID_LAST_MPEG4_MAPPING) {","codec_id = gf_codecid_from_oti(esd->decoderConfig->streamType, esd->decoderConfig->objectTypeIndication);","#ifndef GPAC_DISABLE_AV_PARSERS"],"label":1}
{"cve":"CVE-2021-32494","code_chunks":["\t\t\t\t\t}","\t\t\t\t\tcursor += delta * 8;","\t\t\t\t\tif (!delta) {","\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","node->temporaries->data[kInputQuantized] =","op_data->scratch_tensor_index + kInputQuantized;","TfLiteTensor* input_quantized =","GetTemporary(context, node, kInputQuantized);"],"label":1}
{"cve":"CVE-2023-1264","code_chunks":["\t\t    if (typebuf.tb_len == 0","\t\t\t    || !(p_timeout","\t\t\t\t || (p_ttimeout && keylen == KEYLEN_PART_KEY)))","\t\t\t\t\t\twait_time = -1L;","\t\t    else if (keylen == KEYLEN_PART_KEY && p_ttm >= 0)","\t\t\twait_time = p_ttm;","\t\t    else"],"label":0}
{"cve":"CVE-2023-4322","code_chunks":["static void cmd_sdbk(Sdb *db, const char *input) {","char *out = (input[0] == ' ')","? sdb_querys (db, NULL, 0, input + 1)",": sdb_querys (db, NULL, 0, \"*\");","if (out) {","r_cons_println (out);","free (out);"],"label":1}
{"cve":"CVE-2020-5238","code_chunks":["if (yybm[0 + yych] & 64) {","goto yy30;","}","if (yych <= 0xE0) {","if (yych <= '\\\\') {","if (yych <= '\\n')"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int rand_check(uint8_t *buf, size_t size) {","int count = 0;","","for (int i = 1; i < size; i++) {"],"label":0}
{"cve":"CVE-2018-25032","code_chunks":["uchf *l_buf;          \/* buffer for literals or lengths *\/"],"label":1}
{"cve":"CVE-2018-20406","code_chunks":["        return -1;","    if (len < 2)","        return bad_readline();","","    \/* s[len-2] will usually be 'L' (and s[len-1] is '\\n'); we need to remove","       the 'L' before calling PyLong_FromString.  In order to maintain","       compatibility with Python 3.0.0, we don't actually *require*"],"label":0}
{"cve":"CVE-2018-16749","code_chunks":["","","if (logging != MagickFalse)","(void) LogMagickEvent(CoderEvent,GetMagickModule(),","\"    Copying jng_image pixels to main image.\");","image->columns=jng_width;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    zero_points->type = kTfLiteInt32;","    zero_points->allocation_type = kTfLiteArenaRw;","    int zero_points_dims[1] = {batch_size};","    if (!TfLiteIntArrayEqualsArray(zero_points->dims, 1, zero_points_dims)) {","      TfLiteIntArray* zero_points_size = TfLiteIntArrayCreate(1);","      zero_points_size->data[0] = batch_size;","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, zero_points,"],"label":0}
{"cve":"CVE-2019-19922","code_chunks":["u64 latest_idle_timestamp = 0;","int least_loaded_cpu = this_cpu;","int shallowest_idle_cpu = -1, si_cpu = -1;","int i;","","\/* Check if we have any choice: *\/"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensorCondition,","&input_condition));","const TfLiteTensor* input_x;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorX, &input_x));","const TfLiteTensor* input_y;"],"label":0}
{"cve":"CVE-2019-11924","code_chunks":["static_cast<ContentTypeType>(msg.type)));","}","","if (!msg.fragment) {","if (msg.type == ContentType::application_data) {","msg.fragment = folly::IOBuf::create(0);","} else {"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"args\\\" missing from arguments\");","return 1;","}","else {"],"label":0}
{"cve":"CVE-2016-5842","code_chunks":["if (endian == LSBEndian)","{","value=(unsigned int) ((buffer[3] << 24) | (buffer[2] << 16) |","(buffer[1] << 8 ) | (buffer[0]));","quantum.unsigned_value=(value & 0xffffffff);","return(quantum.signed_value);"],"label":1}
{"cve":"CVE-2021-3744","code_chunks":["\t\t\t\t   DMA_TO_DEVICE);","\tif (ret)","\t\treturn ret;","","\t\/* Save the workarea address since it is updated in order to perform","\t * the concatenation","\t *\/"],"label":0}
{"cve":"PYSEC-2020-298","code_chunks":["\"Source format must of length 4 or 5, received \"","\"src_format = \",","src_format)));","OP_REQUIRES(","context, dst_format.size() == 4 || dst_format.size() == 5,","errors::InvalidArgument(strings::StrCat("],"label":1}
{"cve":"CVE-2018-14360","code_chunks":["struct NntpServer *nserv = data;","struct NntpData *nntp_data = NULL;","char group[LONG_STRING] = \"\";","char desc[HUGE_STRING] = \"\";","char mod;","anum_t first, last;"],"label":0}
{"cve":"CVE-2021-32139","code_chunks":["} else {","gf_bs_write_u16(bs, a->font_table->fonts[j].fontID);","if (a->font_table->fonts[j].fontName) {","u32 len = (u32) strlen(a->font_table->fonts[j].fontName);","gf_bs_write_u8(bs, len);","gf_bs_write_data(bs, a->font_table->fonts[j].fontName, len);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));","TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);","TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);","","const TfLiteTensor* value;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &value));"],"label":0}
{"cve":"CVE-2018-8796","code_chunks":["uint32 length;","struct stream packet = *s;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","","if (!s_check_rem(s, length))"],"label":0}
{"cve":"CVE-2020-1712","code_chunks":["\"org.freedesktop.PolicyKit1.Authority\",","\"CheckAuthorization\");","if (r < 0)","return r;","","r = sd_bus_message_append("],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"PYSEC-2021-794","code_chunks":["const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor2, &input2));"],"label":0}
{"cve":"CVE-2019-19905","code_chunks":["                            break;","                        }","                        break; \/* while loop *\/","                    }","                }","                break;","            }"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["","\t\tbn_set_dig(_k, k);","","\t\tl = RLC_DIG + 1;","\t\tbn_rec_naf(naf, &l, _k, 2);","","\t\tep2_set_infty(t);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    TF_LITE_ENSURE_EQ(context, NumDimensions(value), 1);","  }","","  TfLiteTensor* hits;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &hits));","  TF_LITE_ENSURE_EQ(context, hits->type, kTfLiteUInt8);","  TfLiteIntArray* hitSize = TfLiteIntArrayCreate(1);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["std::unique_ptr<GpuTimer, GpuTimerDeleter> timer;","if (is_profiling) {","timer.reset(new GpuTimer(parent_));                          if (!timer->Init() || !timer->Start(AsGpuStream(stream))) {","return tsl::Status(port::error::INTERNAL, \"Failed to start timer\");","}","}",""],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["case T('b'): {","const XML_Char *valueText = NULL;","XMLWF_SHIFT_ARG_INTO(valueText, argc, argv, i, j);","","errno = 0;","XML_Char *afterValueText = (XML_Char *)valueText;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["          ? &context->tensors[node->temporaries->data[data->im2col_index]]","          : nullptr;","  TfLiteTensor* hwcn_weights =","      data->need_hwcn_weights","          ? &context->tensors[node->temporaries->data[data->hwcn_weights_index]]","          : nullptr;",""],"label":0}
{"cve":"CVE-2021-29537","code_chunks":["","void Compute(OpKernelContext* context) override {","const float in_min = context->input(2).flat<float>()(0);","const float in_max = context->input(3).flat<float>()(0);","","ImageResizerState st(align_corners_, false);"],"label":1}
{"cve":"CVE-2019-11411","code_chunks":["\t\t\t\t\tjs_putc(J, &sb, '.');","\t\t\t}","\t\t\twhile (point-- > 0)","\t\t\t\tjs_putc(J, &sb, '0');","\t\t}","","\t\tjs_putc(J, &sb, 0);"],"label":0}
{"cve":"PYSEC-2022-96","code_chunks":["    return PredictCostOfAnUnknownOp(op_context, node_costs);","  }","","  const int64_t num_boxes = op_context.op_info.inputs(1).shape().dim(0).size();","  const auto crop_shape = MaybeGetMinimumShape(","      op_context.op_info.outputs(0).shape(), 4, &found_unknown_shapes);","  const int64_t crop_height = crop_shape.dim(1).size();"],"label":0}
{"cve":"CVE-2018-16643","code_chunks":["            if (tile_image == (Image *) NULL)","              ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");","            if ((code == 0x9a) || (code == 0x9b) ||","                ((bytes_per_line & 0x8000) != 0))","              {","                if (ReadPixmap(image,&pixmap) == MagickFalse)","                  ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");"],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["static void copy_recurse_data(compiler_common *common, PCRE2_SPTR cc, PCRE2_SPTR ccend,","int type, int stackptr, int stacktop, BOOL has_quit)","{","delayed_mem_copy_status status;","PCRE2_SPTR alternative;","sljit_sw private_srcw[2];"],"label":0}
{"cve":"CVE-2016-10129","code_chunks":["\tif (!push->specs.length || !push->report_status)","\t\tpush->unpack_ok = 1;","\telse if ((error = parse_report(t, push)) < 0)","\t\tgoto done;","","\t\/* If progress is being reported write the final report *\/","\tif (cbs && cbs->push_transfer_progress) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const int input_size = NumElements(input) \/ SizeOfDimension(input, 0);","const int batch_size = SizeOfDimension(input, 0);","int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>(","GetTemporary(context, node, data->input_quantized_index));","float* scaling_factors_ptr = GetTensorData<float>(","GetTemporary(context, node, data->scaling_factors_index));"],"label":1}
{"cve":"CVE-2017-9144","code_chunks":["Read image header.","*\/","image->page.x=ReadBlobLSBShort(image);","image->page.y=ReadBlobLSBShort(image);","image->columns=ReadBlobLSBShort(image);","image->rows=ReadBlobLSBShort(image);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TfLiteIntArray* output_shape = TfLiteIntArrayCreate(input_dims_size);","for (int i = 0; i < input_dims_size; i++) {"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["\/* Note different signature for ast_for_call *\/","static expr_ty ast_for_call(struct compiling *, const node *, expr_ty);","","static PyObject *parsenumber(struct compiling *, const char *);","static expr_ty parsestrplus(struct compiling *, const node *n);"],"label":1}
{"cve":"CVE-2020-5291","code_chunks":["bool already_changed_uid)","{","assert (!keep_requested_caps || !is_privileged);","\/* Drop root uid *\/","if (is_privileged && !already_changed_uid &&","setuid (opt_sandbox_uid) < 0)"],"label":0}
{"cve":"CVE-2018-14680","code_chunks":["unsigned char *buf;","","\/* check arguments - most are already checked by chmd_fast_find *\/","if (chunk_num > chm->num_chunks) return NULL;","","\/* ensure chunk cache is available *\/","if (!chm->chunk_cache) {"],"label":1}
{"cve":"CVE-2018-20177","code_chunks":["\t\t\t\t\t}","\t\t\t\t\telse","\t\t\t\t\t{","\t\t\t\t\t\tx = x >> 1;","\t\t\t\t\t\tcolor = x;","\t\t\t\t\t}","\t\t\t\t\tx = last_line[indexw * 4] + color;"],"label":0}
{"cve":"CVE-2018-1000115","code_chunks":["    settings.sasl = false;","    settings.maxconns_fast = true;","    settings.lru_crawler = false;","    settings.lru_crawler_sleep = 100;","    settings.lru_crawler_tocrawl = 0;","    settings.lru_maintainer_thread = false;","    settings.lru_segmented = true;"],"label":0}
{"cve":"CVE-2021-3574","code_chunks":["if (sample_info[i] == EXTRASAMPLE_UNASSALPHA)","{","SetQuantumAlphaType(quantum_info,DisassociatedQuantumAlpha);","(void) SetImageProperty(image,\"tiff:alpha\",\"unassociated\",","exception);","}"],"label":1}
{"cve":"CVE-2021-38201","code_chunks":["EXPORT_SYMBOL_GPL(read_bytes_from_xdr_buf);","","static void __write_bytes_to_xdr_buf(const struct xdr_buf *subbuf,","\t\t\t\t     void *obj, unsigned int len)","{","\tunsigned int this_len;",""],"label":0}
{"cve":"CVE-2021-32439","code_chunks":["size \/= nb_pack_samples;","","if (stsz->sizes == NULL) {","if (! stsz->sampleCount && (stsz->type != GF_ISOM_BOX_TYPE_STZ2) ) {","stsz->sampleCount = nb_pack_samples;","stsz->sampleSize = size;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["aux_input_quantized->type = fw_input_to_output_weights->type;","aux_input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(aux_input_quantized->dims, aux_input->dims)) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["else {","int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}"],"label":1}
{"cve":"CVE-2021-30014","code_chunks":["","\tsi->irap_or_gdr_pic = gf_bs_read_int_log(bs, 1, \"irap_or_gdr_pic\");","\tsi->non_ref_pic = gf_bs_read_int_log(bs, 1, \"non_ref_pic\");","\tif (si->irap_or_gdr_pic)","\t\tsi->gdr_pic = gf_bs_read_int_log(bs, 1, \"gdr_pic\");","\tif ((si->inter_slice_allowed_flag = gf_bs_read_int_log(bs, 1, \"inter_slice_allowed_flag\")))","\t\tsi->intra_slice_allowed_flag = gf_bs_read_int_log(bs, 1, \"intra_slice_allowed_flag\");"],"label":0}
{"cve":"CVE-2019-19324","code_chunks":["int ret, sz_payload;","size_t pl_desize;","size_t out_size = 0;","uint8_t *decoded_pl;","","if( !p_cjwt || !p_payload ) {"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (!is_string_allowed) {","TF_LITE_ENSURE(context, input1->type != kTfLiteString);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2016-10161","code_chunks":["ZVAL_STRINGL(*rval, str, len, 0);","return 1;","}","#line 917 \"ext\/standard\/var_unserializer.c\"","yych = *++YYCURSOR;","if (yych == '+') goto yy47;","if (yych <= '\/') goto yy18;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["GetTemporary(context, node, \/*index=*\/kFwRowSums);","fw_row_sums->type = kTfLiteInt32;","fw_row_sums->allocation_type = kTfLiteArenaRwPersistent;","int fw_row_sums_dims[2] = {num_row_sums, fw_num_units};"],"label":1}
{"cve":"CVE-2023-51781","code_chunks":["static int atalk_compat_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)","{","\tvoid __user *argp = compat_ptr(arg);","\tstruct sock *sk = sock->sk;","","\tswitch (cmd) {","\t\treturn atalk_compat_routing_ioctl(sk, cmd, argp);"],"label":0}
{"cve":"PYSEC-2019-227","code_chunks":["const int64 inner_dim_size,","const int64 output_outer_dim_size,","const Index* segment_ids,","const T* input, T* output) {","const int64 input_total_size = input_outer_dim_size * inner_dim_size;","for (int64 input_index : GpuGridRangeX(input_total_size)) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["bn_t _k, n;","ep_t t[1 << (EP_WIDTH - 1)], q;","uint8_t win[RLC_FP_BITS + 1];","size_t l;","","if (bn_is_zero(k) || ep_is_infty(p)) {","ep_set_infty(r);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["}","if (!got_algos) {","return tsl::Status(","port::error::UNKNOWN,","absl::StrFormat(\"Listing algorithms failed for kind %d\", kind));","}",""],"label":1}
{"cve":"CVE-2022-35940","code_chunks":["    const Tensor& deltas_in = context->input(2);","","        OP_REQUIRES(context, starts_in.shape().dims() <= 1,","                InvalidArgument(\"starts must be a scalar or vector\"));","    OP_REQUIRES(context, limits_in.shape().dims() <= 1,","                InvalidArgument(\"limits must be a scalar or vector\"));","    OP_REQUIRES(context, deltas_in.shape().dims() <= 1,"],"label":0}
{"cve":"CVE-2023-26485","code_chunks":["","    break;","","    break;","","    BLANKLINE();","    break;"],"label":0}
{"cve":"CVE-2016-10266","code_chunks":["\t\t\treturn ((tmsize_t)(-1));","\t\t}","\t\t_TIFFmemcpy(buf, tif->tif_base + ma, size);","\t}","\treturn (size);","}",""],"label":0}
{"cve":"CVE-2021-3756","code_chunks":["name[name_size] = 0;","mylog(\"  attribute name %s %d %d %lX\\n\", name, datatype_size, dataspace_size,","ftell(reader->fhd));","","if (version == 3 && (flags & 3)) {","mylog(\"object OHDR attribute message must not have any flags set\\n\");"],"label":1}
{"cve":"CVE-2018-20748","code_chunks":["    if (!ReadFromRFBServer(client, buffer, msg.sct.length)) {","      free(buffer);","      return FALSE;","    }","","    buffer[msg.sct.length] = 0;",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["scaling_factors_size));","}","node->temporaries->data[3] = op_data->scratch_tensor_index + 3;","TfLiteTensor* accum_scratch = GetTemporary(context, node, \/*index=*\/3);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {num_units, batch_size};"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","const TfLiteTensor* bw_input_gate_bias =","GetOptionalInputTensor(context, node, kBwInputGateBiasTensor);","const TfLiteTensor* bw_forget_gate_bias =","GetInput(context, node, kBwForgetGateBiasTensor);"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["                                              ConnectionSecurityLevel security_level) const","{","    IListenSocket* socket = NULL;","    if (security_level != ConnectionSecurityLevel::PLAINTEXT) {","        socket = new SecureListenSocket(m_events, m_socketMultiplexer, family, security_level);","    }","    else {"],"label":0}
{"cve":"CVE-2016-3672","code_chunks":["if (current->flags & PF_RANDOMIZE)","random_factor = arch_mmap_rnd();","","mm->mmap_legacy_base = mmap_legacy_base(random_factor);","","if (mmap_is_legacy()) {","mm->mmap_base = mm->mmap_legacy_base;"],"label":1}
{"cve":"CVE-2023-4322","code_chunks":["static void cmd_anal_ucall_ref(RCore *core, ut64 addr) {","\tRAnalFunction *fcn = r_anal_get_function_at (core->anal, addr);","\tif (fcn) {","\t\tr_cons_printf (\" ; %s\", fcn->name);","\t} else {","\t\tr_cons_printf (\" ; 0x%\" PFMT64x, addr);","\t}"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2018-8897","code_chunks":["","#ifdef CONFIG_MATH_EMULATION","if (!boot_cpu_has(X86_FEATURE_FPU) && (read_cr0() & X86_CR0_EM)) {","struct math_emu_info info = { };","","cond_local_irq_enable(regs);"],"label":1}
{"cve":"CVE-2018-8794","code_chunks":["STREAM s;","int length;","int tagval;","struct stream packet;","","s = tcp_recv(NULL, 4);"],"label":0}
{"cve":"CVE-2020-11048","code_chunks":["","\tStream_Read_UINT32(s, monitorCount); \/* monitorCount (4 bytes) *\/","","\tif ((Stream_GetRemainingLength(s) \/ 20) < monitorCount)","\t\treturn FALSE;","","\tmonitorDefArray = (MONITOR_DEF*)calloc(monitorCount, sizeof(MONITOR_DEF));"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_rec_tnaf(int8_t *tnaf, size_t *len, const bn_t k, int8_t u, size_t m,","size_t w) {","int i, l;","bn_t tmp, r0, r1;","int8_t beta[64], gama[64];"],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["","scanner->curptr += N;","","if (PJ_SCAN_IS_PROBABLY_SPACE(*scanner->curptr) && skip_ws) {","pj_scan_skip_whitespace(scanner);","}","}"],"label":1}
{"cve":"CVE-2022-36026","code_chunks":["    }","  }","","  int axis_;","  bool signed_input_;","  bool range_given_;","  bool narrow_range_;"],"label":0}
{"cve":"CVE-2017-5507","code_chunks":["static Image *ReadMPCImage(const ImageInfo *image_info,ExceptionInfo *exception)","{","  char","    cache_filename[MagickPathExtent],","    id[MagickPathExtent],","    keyword[MagickPathExtent],","    *options;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","    TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","  TF_LITE_ENSURE(context,","                 begin->type == kTfLiteInt32 || begin->type == kTfLiteInt64);","  TF_LITE_ENSURE(context,","                 size->type == kTfLiteInt32 || size->type == kTfLiteInt64);","  TF_LITE_ENSURE_EQ(context, NumDimensions(begin), 1);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["ep4_t t1[1 << (EP_WIDTH \/ 2)];","ep4_t t[1 << EP_WIDTH];","bn_t n;","int l0, l1, w = EP_WIDTH \/ 2;","uint8_t w0[2 * RLC_FP_BITS], w1[2 * RLC_FP_BITS];","","bn_null(n);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","","TF_LITE_ENSURE_EQ(context, input1->dims->size, input2->dims->size);","for (int i = 0; i < input1->dims->size; ++i) {"],"label":1}
{"cve":"CVE-2017-6802","code_chunks":["      } else {         if ((out >= (comp_Prebuf.size + uncompressedSize)) ||","            (in >= p->size)) {","          printf(\"Corrupted stream\\n\");","          exit(-1);","        }","        dst[out++] = src[in++];","      }"],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["if (length > 0) {","memcpy(buffer, (const void *)(m_data + m_cursor), length);","}","m_cursor += length;","return length;","}"],"label":1}
{"cve":"PYSEC-2022-130","code_chunks":["InferenceContext* ctx = GetContext(node);","if (ctx == nullptr) {","return errors::InvalidArgument(\"SetUnknownShape: Missing context\");","}","if (output_port < 0 || output_port >= ctx->num_outputs()) {","return errors::InvalidArgument("],"label":0}
{"cve":"CVE-2020-35533","code_chunks":["  {","    if (ver1 == 0x40)","      max \/= 4;","    fseek(ifp, meta_offset + 562, SEEK_SET);","    split = get2();","  }",""],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        Py_CLEAR(tmp);","    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)ExceptHandler_type);","    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {"],"label":0}
{"cve":"CVE-2019-16786","code_chunks":["    inst.outbuf_lock = DummyLock()","        return inst, sock, map","","    def test_ctor(self):","        inst, _, map = self._makeOneWithMap()","        self.assertEqual(inst.addr, \"127.0.0.1\")","        self.assertEqual(inst.sendbuf_l"],"label":0}
{"cve":"CVE-2021-24025","code_chunks":["assertx(isStringType(type(class_name)));","strncpy(frame->class_name,","val(class_name).pstr->data(),","std::min(val(class_name).pstr->size(), strobelight::kClassNameMax));","frame->class_name[strobelight::kClassNameMax - 1] = '\\0';","}",""],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (!ti)","goto out;","asdl_seq_SET(type_ignores, i, ti);","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["          context, \"Updates of type '%s' are not supported by scatter_nd.\",","          TfLiteTypeGetName(updates->type));","      return kTfLiteError;","  }","  if (indices->type != shape->type) {","    context->ReportError(context, \"Indices and shape must have the same type.\");","    return kTfLiteError;"],"label":0}
{"cve":"CVE-2020-4030","code_chunks":["\t\t\treturn \"Invalid range\";","\t\t\treturn \"Custom error\";","\t\t\treturn \"Unknown\";","\t}","#else","\treturn \"Unknown\";","#endif"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["                tflite::micro::GetTensorData<int64_t>(input2), output_shape,","                output_data);","      break;","      requires_broadcast","          ? reference_ops::Broadcast4DSlowGreaterEqualWithScaling(","                data->params, input1_shape,","                tflite::micro::GetTensorData<uint8_t>(input1), input2_shape,"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["node->temporaries = TfLiteIntArrayCreate(kTemporaryNum);","","node->temporaries->data[kActivation] = *scratch_tensor_index;","TfLiteTensor* activation = GetTemporary(context, node, kActivation);","activation->type = input->type;","activation->allocation_type = kTfLiteArenaRw;","TfLiteIntArray* activation_size = TfLiteIntArrayCreate(2);"],"label":1}
{"cve":"CVE-2023-2006","code_chunks":["{","struct rxrpc_local *local = bundle->params.local;","bool need_put = false;","","if (atomic_dec_and_lock(&bundle->active, &local->client_bundles_lock)) {","if (!bundle->params.exclusive) {"],"label":0}
{"cve":"CVE-2023-51698","code_chunks":["ComicsDocument *comics_document = COMICS_DOCUMENT (document);","gchar *mime_type;","GFile *file;","file = g_file_new_for_uri (uri);","comics_document->archive_path = g_file_get_path (file);","g_object_unref (file);"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["","\t\tif (settings->RemoteFxCodec)","\t\t{","\t\t\t\/**","\t\t\t * If we are using RemoteFX the client MUST use a value greater","\t\t\t * than or equal to the value we've previously sent in the server to","\t\t\t * client multi-fragment update capability set (MS-RDPRFX 1.5)"],"label":0}
{"cve":"CVE-2016-8654","code_chunks":["\t\t\/* Copy the appropriate samples into the lowpass channel. *\/","\t\tdstptr = &a[(1 - parity) * stride];","\t\tsrcptr = &a[(2 - parity) * stride];","\t\tn = numrows - m - (!parity);","\t\twhile (n-- > 0) {","\t\t\tdstptr2 = dstptr;","\t\t\tsrcptr2 = srcptr;"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["void CLASS samsung_load_raw()","{","int row, col, c, i, dir, op[4], len[4];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width> 32768 || raw_height > 32768)      throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"PYSEC-2021-412","code_chunks":["if (group_key_t.dims() > 0) {","return errors::Internal(\"Unexpected dimensions on input group_key, got \",","group_key_t.shape().DebugString());","}","","auto group_size = group_size_t.unaligned_flat<int32>()(0);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["if (!settings->ServerMode && (preferredBitsPerPixel != settings->ColorDepth))","{","\/* The client must respect the actual color depth used by the server *\/","settings->ColorDepth = preferredBitsPerPixel;","}",""],"label":1}
{"cve":"CVE-2016-10092","code_chunks":["(unsigned long) strip, (unsigned long)rows);","return 0;","}","bufp += bytes_read;","}","","return 1;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input_tensor = GetInput(context, node, 0);","const TfLiteTensor* padding_matrix = GetInput(context, node, 1);","TfLiteTensor* output_tensor = GetOutput(context, node, 0);","","TF_LITE_ENSURE_EQ(context, NumDimensions(padding_matrix), 2);","TF_LITE_ENSURE_EQ(context, SizeOfDimension(padding_matrix, 0),"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  const bool time_major = params->time_major;","  const int n_batch = time_major ? input->dims->data[1] : input->dims->data[0];","  const int n_input = input->dims->data[2];","","  const TfLiteTensor* input_to_output_weights;","  TF_LITE_ENSURE_OK(","      context,"],"label":0}
{"cve":"CVE-2019-15140","code_chunks":["{","Frames = 1;","if (filepos != (unsigned int) filepos)","break;","if(SeekBlob(image,filepos,SEEK_SET) != filepos) break;","\/* printf(\"pos=%X\\n\",TellBlob(image)); *\/"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["*literal = decode_unicode_with_escapes(c, n, literal_start,","literal_end-literal_start);","if (!*literal)","return -1;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["          output);","    }","    case kTfLiteInt8: {","      OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","      TfLiteTensor* row_sums;","      TF_LITE_ENSURE_OK(context,","                        GetTemporarySafe(context, node, kRowSums, &row_sums));"],"label":0}
{"cve":"CVE-2023-40589","code_chunks":["ZeroMemory(&(ncrush->OffsetCache), sizeof(ncrush->OffsetCache));","}","","HistoryPtr = ncrush->HistoryPtr;","","if (!(flags & PACKET_COMPRESSED))","{"],"label":1}
{"cve":"CVE-2020-36315","code_chunks":["}","*p_len = 1;","do {","(*p_len)++;","m_len--;","bn_rsh(t, m, 8 * m_len);"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["","if (object_on_skiplist(options, oid))","return 0;","","if (oidset_contains(&options->gitmodules_found, oid)) {","struct config_options config_opts = { 0 };"],"label":0}
{"cve":"CVE-2018-20180","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["int lineno = 0;","struct stat st;","","if (flags & READ_ATTR_NOFOLLOW)","fd = open_nofollow(path, O_RDONLY);","else"],"label":0}
{"cve":"CVE-2021-46880","code_chunks":["ctx->error = ctx->xsc->error;","}","","\/* Clear whatever errors happened if we have any validated chain *\/","if (ctx->chains_count > 0)","ctx->error = X509_V_OK;"],"label":1}
{"cve":"PYSEC-2020-294","code_chunks":["int previous_segment_id = -1;","for (int i = 0; i < segment_id_size; i++) {","const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];","if (i == 0) {","TF_LITE_ENSURE_EQ(context, current_segment_id, 0);","} else {"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["    return PJ_SUCCESS;","}","","","\/* Get fingerprint of local DTLS-SRTP certificate. *\/","PJ_DEF(pj_status_t) pjmedia_transport_srtp_dtls_get_fingerprint(","                                pjmedia_transport *tp,"],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["void CLASS samsung_load_raw()","{","int row, col, c, i, dir, op[4], len[4];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width> 32768 || raw_height > 32768)      throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"CVE-2018-20761","code_chunks":["if (evt->navigate.to_url) fprintf(stderr, \"Go to URL: \\\"%s\\\"\\r\", evt->navigate.to_url);","break;","if (gf_term_is_supported_url(term, evt->navigate.to_url, 1, no_mime_check)) {","strcpy(the_url, evt->navigate.to_url);","fprintf(stderr, \"Navigating to URL %s\\n\", the_url);","gf_term_navigate_to(term, evt->navigate.to_url);","return 1;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2021-33910","code_chunks":["if (strlen(s) >= UNIT_NAME_MAX) \/* Return a slightly more descriptive error for this specific condition *\/","return -ENAMETOOLONG;","","\/* Refuse this if this got too long or for some other reason didn't result in a valid name *\/","if (!unit_name_is_valid(s, UNIT_NAME_INSTANCE))","return -EINVAL;",""],"label":1}
{"cve":"CVE-2018-12562","code_chunks":["","void RemoteFsDevice::saveProperties(const DeviceOptions &newOpts, const Details &nd)","{","    bool connected=isConnected();","    if (configured && (!connected || opts==newOpts) && (connected || details==nd)) {","        return;","    }"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus LogicalImpl(TfLiteContext* context, TfLiteNode* node,","                         bool (*func)(bool, bool)) {","  OpData* data = reinterpret_cast<OpData*>(node->user_data);","","  const TfLiteTensor* input1;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor1, &input1));"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["","cf.cf_flags = flags | PyCF_SOURCE_IS_UTF8;","","if (flags &","~(PyCF_MASK | PyCF_MASK_OBSOLETE | PyCF_DONT_IMPLY_DEDENT | PyCF_ONLY_AST))","{"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void bn_set_bit(bn_t a, size_t bit, int value) {","int d;","","if (bit < 0) {"],"label":0}
{"cve":"CVE-2018-14882","code_chunks":["\t\t\tND_PRINT((ndo,\"%s%s%s%s%s,\", F(ICMP6_RR_FLAGS_TEST, \"T\"),","                                  F(ICMP6_RR_FLAGS_REQRESULT, \"R\"),","                                  F(ICMP6_RR_FLAGS_FORCEAPPLY, \"A\"),","                                  F(ICMP6_RR_FLAGS_SPECSITE, \"S\"),","                                  F(ICMP6_RR_FLAGS_PREVDONE, \"P\")));","\t\t}","                ND_PRINT((ndo,\"seg=%u,\", rr6->rr_segnum));"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* row_sums = GetTemporary(context, node, \/*index=*\/5);","if (!op_data->float_weights_time_initialized) {","const float dequantization_scale = weights_time->params.scale;","const int8_t* weights_time_ptr = GetTensorData<int8_t>(weights_time);"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["assertx(isStringType(type(function_name)));","strncpy(frame->function,","val(function_name).pstr->data(),","std::min(val(function_name).pstr->size(),","strobelight::kFunctionMax));"],"label":1}
{"cve":"CVE-2023-5595","code_chunks":["GF_TextSample *txt = gf_isom_parse_text_sample(bs);","if (txt) {","times.vals[i] = (u32) s->DTS;","names.vals[i] = gf_strdup(txt->text);","gf_isom_delete_text_sample(txt);","}","gf_bs_del(bs);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2019-20016","code_chunks":["return MYSOFA_NO_MEMORY;","}","strcpy(value, \"\");","} else {","log(\"FHDB type 3 unsupported values: %12\" PRIX64 \"\\n\",unknown);","free(name);"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["AuthCapsInfo& caps_info, CryptoKey& session_key, uint64_t *auid = NULL) = 0;"],"label":1}
{"cve":"CVE-2017-18184","code_chunks":["bool","QPDF::allowModifyAnnotation()","{","    int R = 0;","    int P = 0;","    bool status = true;","    if (isEncrypted(R, P))"],"label":0}
{"cve":"CVE-2022-0521","code_chunks":["return NULL;","}","ut64 offset = 0;","RBinJavaVerificationObj *se = R_NEW0 (RBinJavaVerificationObj);","if (!se) {","return NULL;"],"label":0}
{"cve":"CVE-2016-10266","code_chunks":["rowsperstrip=td->td_rowsperstrip;","if (rowsperstrip>td->td_imagelength)","rowsperstrip=td->td_imagelength;","stripsperplane=((td->td_imagelength+rowsperstrip-1)\/rowsperstrip);","stripinplane=(strip%stripsperplane);","plane=(uint16)(strip\/stripsperplane);","rows=td->td_imagelength-stripinplane*rowsperstrip;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE(context, input_dims_size >= 1);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","TfLiteIntArray* output_shape = TfLiteIntArrayCreate(input_dims_size + 1);","for (int i = 0; i < input_dims_size; i++) {","output_shape->data[i] = input_dims->data[i];"],"label":1}
{"cve":"CVE-2022-1052","code_chunks":["free (mo->intrp);","free (mo->compiler);","if (mo->chained_starts) {","for (i = 0; i < mo->nsegs; i++) {","if (mo->chained_starts[i]) {","free (mo->chained_starts[i]->page_start);","free (mo->chained_starts[i]);"],"label":1}
{"cve":"CVE-2022-3957","code_chunks":["\t\tSVG_FontFamily *fontfamily;","\t\tGF_SAFEALLOC(fontfamily, SVG_FontFamily)","\t\treturn fontfamily;","\t}","\tbreak;","\t{","\t\tSVG_String *string;"],"label":0}
{"cve":"CVE-2021-29608","code_chunks":["for (INDEX_TYPE i = 0; i < row_split_size - 1; ++i) {","INDEX_TYPE row_length = row_split(i + 1) - row_split(i);","INDEX_TYPE real_length = std::min(output_size, row_length);","INDEX_TYPE parent_output_index_current = parent_output_index[i];","","if (parent_output_index_current == -1) {"],"label":1}
{"cve":"CVE-2022-0523","code_chunks":["\tif (error) {","\t\treturn NULL;","\t}","\tpyc_object *ret = get_array_object_generic (buffer, n);","\tif (ret) {","\t\tret->type = TYPE_SET;","\t}"],"label":0}
{"cve":"CVE-2018-16393","code_chunks":["while (0x80 != plaintext[cipher_len - 2] && (cipher_len - 2 > 0))","cipher_len--;","","if (2 == cipher_len)","return -1;","","memcpy(out, plaintext, cipher_len - 2);"],"label":1}
{"cve":"CVE-2018-12559","code_chunks":["int t=type->itemData(type->currentIndex()).toInt();","RemoteFsDevice::Details det;","","det.name=name->text().trimmed();","switch (t) {","case Type_SshFs: {"],"label":1}
{"cve":"CVE-2020-24370","code_chunks":["const char *name = NULL;","if (isLua(ci)) {","if (n < 0)  \/* access to vararg values? *\/","return findvararg(ci, -n, pos);","else","name = luaF_getlocalname(ci_func(ci)->p, n, currentpc(ci));","}"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["}","if (dict) {","res = Py_BuildValue(\"O()O\", Py_TYPE(self), dict);","Py_DECREF(dict);"],"label":1}
{"cve":"PYSEC-2021-629","code_chunks":["done);","","Tensor group_assignment = c->input(2);","","OP_REQUIRES_OK_ASYNC(","c,"],"label":1}
{"cve":"CVE-2022-0519","code_chunks":["}","RBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);","offset += 6;","IFDBG eprintf(\"r_bin_java_stack_map_table_attr_new: New stack map allocated.\\n\");","if (!attr) {","return NULL;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["      return copyToTensor(","          context, reinterpret_cast<std::complex<float>*>(input->data.c64),","          output, num_elements);","            TF_LITE_UNSUPPORTED_TYPE(context, input->type, \"Cast\");","  }","  return kTfLiteOk;","}"],"label":0}
{"cve":"CVE-2021-32439","code_chunks":["\t\t\tnewChunk = 1;","\t\tif (stbl->MaxSamplePerChunk && cur_ent->samplesPerChunk >= stbl->MaxSamplePerChunk)","\t\t\tnewChunk = 1;","\t}","","\t\tif (!newChunk) {","\t\tcur_ent->samplesPerChunk += nb_samp;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","output->type = input->type;","","return context->ResizeTensor(context, output,"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_cert.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_key.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/ca_cert.pem\"","- exact: localhost"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  if (data->requires_broadcast) {","    TF_LITE_ENSURE_OK(context, CalculateShapeForBroadcast(","                                   context, input1, input2, &output_size));","  } else {","    output_size = TfLiteIntArrayCopy(input1->dims);","  }",""],"label":0}
{"cve":"CVE-2020-27788","code_chunks":["                total_in += x.size;","            }","        }","        else {","                total_in += x.size;","        }","        hdr_u_len = 0;"],"label":0}
{"cve":"CVE-2017-14175","code_chunks":["  (void) CopyMagickString(buffer,\" \",MagickPathExtent);","  (void) WriteBlob(image,strlen(buffer),(unsigned char *) buffer);","  for (y=0; y < (ssize_t) image->rows; y++)","  {","    p=GetVirtualPixels(image,0,y,image->columns,1,exception);","    if (p == (const Quantum *) NULL)","      break;"],"label":0}
{"cve":"CVE-2015-8631","code_chunks":["    xdr_free(xdr_generic_ret, &ret);","","    if ((ret.code = new_server_handle(arg->api_version, rqstp, &handle)))","        goto exit_func;","","    if ((ret.code = check_handle((void *)handle)))","        goto exit_func;"],"label":0}
{"cve":"CVE-2022-1987","code_chunks":["            indx->entries[entry_number].tags[i].tagvalues_count = tagvalues_count;","            indx->entries[entry_number].tags_count++;","            i++;","        }","        free(ptagx);","    }","    \/* restore buffer maxlen *\/"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* invoke_count = GetOutput(context, node, kInvokeCount);","int32_t* invoke_count_data = GetTensorData<int32_t>(invoke_count);","","median_data[0] = sorting_buffer[size \/ 2];"],"label":1}
{"cve":"CVE-2023-4535","code_chunks":["\trest_len = priv->sym_crypt_buffer_len;","","\t\/* no input data from application (this is C_EncryptFinalize\/C_DecryptFinalize *\/","\tif (data == NULL) {","\t\tif (datalen != 0)","\t\t\tLOG_FUNC_RETURN(ctx, SC_ERROR_WRONG_LENGTH);","\t\tif (decipher) {"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2021-41136","code_chunks":["goto st24;","if ( ++p == pe )","goto _test_eof24;","#line 575 \"ext\/puma_http11\/http11_parser.c\"","switch( (*p) ) {","case 32: goto tr37;","case 34: goto st0;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["bool (*func)(bool, bool)) {","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"CVE-2017-11462","code_chunks":["","    ctx = (gss_union_ctx_id_t) *context_handle;","    if (GSSINT_CHK_LOOP(ctx))","\treturn (GSS_S_CALL_INACCESSIBLE_READ | GSS_S_NO_CONTEXT);","","    if (ctx->internal_ctx_id != GSS_C_NO_CONTEXT) {","\tstatus = gssint_delete_internal_sec_context(minor_status,"],"label":0}
{"cve":"CVE-2022-4066","code_chunks":["    char tmp[16];","    snprintf(tmp, sizeof(tmp), \"%X\\r\\n\", (unsigned int)res->buffer_pos);","    if ((w = write(req, tmp, strlen(tmp))) <= 0) {","      ONION_CALL_MAX_ONCE_PER_T_COUNT(1, ONION_WARNING, \"Error writing chunk encoding length (%X) %s. Aborting write. (x%u)\",","        (unsigned int)res->buffer_pos, strerror(errno));","      ","      return OCS_CLOSE_CONNECTION;"],"label":0}
{"cve":"CVE-2018-8784","code_chunks":["UINT32 distance;","BYTE* pbSegment;","size_t cbSegment = segmentSize - 1;","","if ((Stream_GetRemainingLength(stream) < segmentSize) || (segmentSize < 1))","return FALSE;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (exists_not_none(obj, &PyId_arg)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_arg);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    node->temporaries->data[kOutputStateScalingFactors] =","        op_data->scratch_tensor_index + kOutputStateScalingFactors;","    TfLiteTensor* output_state_sf;","    TF_LITE_ENSURE_OK(","        context, GetTemporarySafe(context, node, kOutputStateScalingFactors,","                                  &output_state_sf));","    output_state_sf->type = kTfLiteFloat32;"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["struct all_attrs_item *all_attrs, int rem)","{","for (; rem > 0 && stack; stack = stack->prev) {","unsigned i;","const char *base = stack->origin ? stack->origin : \"\";","","for (i = stack->num_matches; 0 < rem && 0 < i; i--) {"],"label":0}
{"cve":"CVE-2022-0476","code_chunks":["\t\tsdb_num_set (obj->kv, \"mdmp_comment_stream_w.offset\",","\t\t\tentry->location.rva, 0);","\t\tsdb_set (obj->kv, \"mdmp_comment_stream_w.format\",","\t\t\t\t\"s CommentW\", 0);","","\t\tbreak;","\t\t\/* TODO: Not yet fully parsed or utilised *\/"],"label":0}
{"cve":"CVE-2020-14402","code_chunks":["        cl->afterEncBufSize = maxRawSize;","        if (cl->afterEncBuf == NULL)","            cl->afterEncBuf = (char *)malloc(cl->afterEncBufSize);","        else","            cl->afterEncBuf = (char *)realloc(cl->afterEncBuf, cl->afterEncBufSize);","    }",""],"label":0}
{"cve":"CVE-2022-35970","code_chunks":["OP_REQUIRES(context, min.dim_size(0) == depth,","InvalidArgument(\"min has incorrect size, expected \", depth,","\" was \", min.dim_size(0)));","const Tensor& max = context->input(2);","OP_REQUIRES(context, max.dim_size(0) == depth,","InvalidArgument(\"max has incorrect size, expected \", depth,","\" was \", max.dim_size(0)));"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params =","reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);","","int32_t* out_buf = GetOutput(context, node, 0)->data.i32;"],"label":1}
{"cve":"CVE-2018-8799","code_chunks":["\t}","","\tif (g_redirect_flags & LB_LOAD_BALANCE_INFO)","\t{","\t\t\/* read length of load balance info blob *\/","\t\tin_uint32_le(s, g_redirect_lb_info_len);",""],"label":0}
{"cve":"CVE-2018-20458","code_chunks":["return NULL;","}","libname = (char *)(bin->b->buf + image_infos[idx].pathFileOffset);","\/* Locate lib hdr in cache *\/","data = bin->b->buf + liboff;","mh = (struct mach_header *)data;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            }","            Py_CLEAR(tmp);","        }","        if (lookup_attr_id(obj, &PyId_keywords, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {"],"label":0}
{"cve":"CVE-2017-9763","code_chunks":["void grubfs_free (GrubFS *gf) {","if (gf) {","if (gf->file && gf->file->device)","free (gf->file->device->disk);","free (gf->file);","free (gf);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["};","reg.invoke = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* a0 = GetInput(context, node, 0);","TfLiteTensor* a1 = GetOutput(context, node, 0);","int num = a0->dims->data[0];","for (int i = 0; i < num; i++) {"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputVariableId,","&input_resource_id_tensor));","int resource_id = input_resource_id_tensor->data.i32[0];","auto& resources = subgraph->resources();","auto* variable = resource::GetResourceVariable(&resources, resource_id);","TF_LITE_ENSURE(context, variable != nullptr);"],"label":0}
{"cve":"CVE-2022-37032","code_chunks":["bgp_capability_msg_parse (struct peer *peer, u_char *pnt, bgp_size_t length)","{","u_char *end;","struct capability_mp_data mpc;","struct capability_header *hdr;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input1));","    const TfLiteTensor* input2;","    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &input2));","    TfLiteTensor* output;","    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","","    TF_LITE_ENSURE_EQ(context, input1->dims->size, input2->dims->size);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (res != 0) goto failed;","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"test\\\" missing from IfExp\");","return 1;","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["reinterpret_cast<TfLiteAudioMicrofrontendParams*>(node->user_data);","FrontendReset(data->state);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2021-36978","code_chunks":["","qpdf_offset_t","Pl_Count::getCount() const","{","    return this->m->count;","}",""],"label":0}
{"cve":"CVE-2020-24870","code_chunks":["\t\t\tload_raw = &LibRaw::unpacked_load_raw;","\t\tif (is_raw > 1 && !shot_select)","\t\t\tfilters = 0;","\t\tmaximum = 0x3fff;","\t}","","\tif (load_raw == &LibRaw::sinar_4shot_load_raw)"],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["is not valid to have multiple BOMs.","*\/","else if (tok == XML_TOK_BOM) {","#  ifdef XML_DTD","if (! accountingDiffTolerated(parser, tok, s, next, __LINE__,","XML_ACCOUNT_DIRECT)) {","accountingOnAbort(parser);"],"label":1}
{"cve":"CVE-2020-28196","code_chunks":["","static krb5_error_code","decode_atype_to_ptr(const taginfo *t, const uint8_t *asn1, size_t len,","                    const struct atype_info *a, void **ptr_out)","{","    krb5_error_code ret;","    void *ptr;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["expr_ty value;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;"],"label":1}
{"cve":"CVE-2021-29519","code_chunks":["Status ValidateInput(const OpInputList& indices_list_in,","const OpInputList& values_list_in,","const OpInputList& shapes_list_in,","const OpInputList& dense_list_in) {","const auto size = indices_list_in.size();","for (int i = 0; i < size; i++) {","if (!TensorShapeUtils::IsMatrix(indices_list_in[i].shape())) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","    auto* first_new_tensor = static_cast<int*>(node->user_data);","","    const TfLiteTensor* tensor0;","    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &tensor0));","    TfLiteTensor* tensor1;","    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &tensor1));"],"label":0}
{"cve":"PYSEC-2021-810","code_chunks":["          context, start >= limit,","          errors::InvalidArgument(","              \"Requires start >= limit when delta < 0: \", start, \"\/\", limit));","    }","    int64_t size = 0;","    if (std::is_integral<T>::value) {","      size = static_cast<int64>("],"label":0}
{"cve":"CVE-2018-20175","code_chunks":["{","x = x >> 1;","x = x + 1;","color = -x;","}","else"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params =","reinterpret_cast<TfLiteLocalResponseNormParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  if (has_aux_input && !fw_use_cifg) {","    TF_LITE_ENSURE_EQ(context, fw_aux_input_to_input_weights->dims->data[0],","                      fw_input_to_input_weights->dims->data[0]);","  }","  TfLiteIntArray* fw_scratch_buffer_size = TfLiteIntArrayCreate(2);","  fw_scratch_buffer_size->data[0] = n_batch;","  if (fw_use_cifg) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["prod_scaling_factors->type = kTfLiteFloat32;","prod_scaling_factors->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(prod_scaling_factors->dims, 1,"],"label":1}
{"cve":"CVE-2021-43860","code_chunks":["if (xa_metadata == NULL)","g_message (\"Warning: No xa.metadata in local commit %s ref %s\", checksum, flatpak_decomposed_get_ref (op->ref));","else","metadata_bytes = g_bytes_new (xa_metadata, strlen (xa_metadata) + 1);","","if (g_variant_lookup (commit_metadata, \"xa.download-size\", \"t\", &download_size))","op->download_size = GUINT64_FROM_BE (download_size);"],"label":1}
{"cve":"CVE-2021-42779","code_chunks":["","LOG_FUNC_RETURN(ctx, rv);","}","","","static int"],"label":1}
{"cve":"CVE-2022-1031","code_chunks":["fcn->bp_off = fcn->stack - op->src[0]->delta;","}","if (op->dst && op->dst->reg && op->dst->reg->name && op->ptr > 0 && op->ptr != UT64_MAX) {","free(last_reg_mov_lea_name);","if ((last_reg_mov_lea_name = strdup(op->dst->reg->name))) {","last_reg_mov_lea_val = op->ptr;","last_is_reg_mov_lea = true;"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["placeholder++;","total_consumed++;","}","len = utf8_strnwidth(local_sb.buf, -1, 1);","","if (c->flush_type == flush_left_and_steal) {","const char *ch = sb->buf + sb->len - 1;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["}","if (_PyObject_HasAttrId(obj, &PyId_col_offset)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_col_offset);","if (tmp == NULL) goto failed;","res = obj2ast_int(tmp, &col_offset, arena);"],"label":1}
{"cve":"CVE-2018-14350","code_chunks":["s += 11;","SKIPWS(s);","ptmp = tmp;","while (isdigit((unsigned char) *s))","*ptmp++ = *s++;","*ptmp = '\\0';","if (mutt_str_atol(tmp, &h->content_length) < 0)"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteNode* node) {","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const int num_dims = NumDimensions(input);","TF_LITE_ENSURE(context, num_dims >= 2);","const TfLiteTensor* fft_length;"],"label":0}
{"cve":"CVE-2021-36080","code_chunks":["  dwg->header.section[SECTION_CLASSES_R13].size","      = dat->byte - dwg->header.section[SECTION_CLASSES_R13].address;","  LOG_TRACE (\"       Classes (end): %4u\\n\", (unsigned)dat->byte);","","  bit_write_RL (dat, 0x0DCA);   LOG_TRACE (\"unknown: %04X [RL]\\n\", 0x0DCA);","","  \/*------------------------------------------------------------"],"label":0}
{"cve":"CVE-2021-32791","code_chunks":["static char *oidc_cache_get_hashed_key(request_rec *r, const char *passphrase,","const char *key) {","char *input = apr_psprintf(r->pool, \"%s:%s\", passphrase, key);","char *output = NULL;","if (oidc_util_hash_string_and_base64url_encode(r, OIDC_JOSE_ALG_SHA256,","input, &output) == FALSE) {"],"label":1}
{"cve":"CVE-2021-42782","code_chunks":["sc_log(ctx, \"No EF_KEYD-Record found\\n\");","return 1;","}","for (i = 0; i < r; i += 2 + buf[i + 1]) {","if (buf[i] == 0xB6)","can_sign++;","if (buf[i] == 0xB8)"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)Global_type);","    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {","        asdl_seq* names;"],"label":0}
{"cve":"CVE-2016-10248","code_chunks":["\t\t\tgoto error;","\t\t}","\t\ttpcnt = (dataptr[0] << 24) | (dataptr[1] << 16) | (dataptr[2] << 8)","\t\t  | dataptr[3];","\t\tdatacnt -= 4;","\t\tdataptr += 4;",""],"label":0}
{"cve":"CVE-2018-20179","code_chunks":["UNUSED(mcs_data);","uint8 result;","uint32 length;","STREAM s;","struct stream packet;","RD_BOOL is_fastpath;"],"label":0}
{"cve":"CVE-2021-3331","code_chunks":["TSessionData * __fastcall TStoredSessionList::ParseUrl(UnicodeString Url,","  TOptions * Options, bool & DefaultsOnly, UnicodeString * FileName,","  bool * AProtocolDefined, UnicodeString * MaskedUrl, int Flags)","{","  TSessionData * Data = new TSessionData(L\"\");","  try","  {"],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["\/* This cannot be done earlier,","* we need complete FIT image in RAM first *\/","if (genimg_get_format((void *) addr) == IMAGE_FORMAT_FIT) {","if (!fit_check_format(fit_hdr)) {","bootstage_error(BOOTSTAGE_ID_IDE_FIT_READ);","puts(\"** Bad FIT image format\\n\");","return 1;"],"label":1}
{"cve":"CVE-2022-45873","code_chunks":["                        json_out = take_fdopen(&json_pipe[1], \"w\");","                        if (!json_out) {","                                r = -errno;","                                goto child_fail;","                        }","","                        r = json_variant_dump(package_metadata, JSON_FORMAT_FLUSH, json_out, NULL);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["        context, EvalQuantized<kernel_type>(context, node, params, data, input1,","                                            input2, output));","  } else {","    context->ReportError(","        context,","        \"Div only supports FLOAT32, INT32 and quantized UINT8 now, got %d.\",","        output->type);"],"label":0}
{"cve":"PYSEC-2021-614","code_chunks":["},","NodeComparatorName());","if (!internal_node_inserted) {","nodes->clear();","constant_control_deps->clear();","}"],"label":1}
{"cve":"CVE-2019-17546","code_chunks":["if (alpha)","{","if (TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, colorchannels),","pa, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)","&& img->stoponerr)","{","ret = 0;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInput);","TfLiteTensor* output = GetOutput(context, node, 0);","const TfLiteTensor* axis = GetInput(context, node, kAxis);","if (IsDynamicTensor(output)) {","int axis_value;","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2019-13302","code_chunks":["  }","#endif","  return(fourier_image);","}","\f","\/*","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"],"label":0}
{"cve":"CVE-2022-24792","code_chunks":["break;","}","","status = pj_file_setpos(fport[0]->fd, ch.len-read, PJ_SEEK_CUR);","if (status != PJ_SUCCESS) {","goto on_error;","}"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["else {","int res;","res = obj2ast_arguments(tmp, &args, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["GetInput(context, node, kRecurrentWeightsTensor);","const TfLiteTensor* bias = GetInput(context, node, kBiasTensor);","TfLiteTensor* hidden_state =","const_cast<TfLiteTensor*>(GetInput(context, node, kHiddenStateTensor));","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);",""],"label":1}
{"cve":"CVE-2021-3770","code_chunks":["if (errmsg == NULL)","{","int *oldarray = curbuf->b_p_vsts_array;","if (tabstop_set(*varp, &(curbuf->b_p_vsts_array)))","{","if (oldarray)","vim_free(oldarray);"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["","return EXIT_SUCCESS;","","free(value);","return EXIT_FAILURE;","}",""],"label":1}
{"cve":"CVE-2020-35538","code_chunks":["{","my_main_ptr main_ptr = (my_main_ptr)cinfo->main;","my_coef_ptr coef = (my_coef_ptr)cinfo->coef;","my_upsample_ptr upsample = (my_upsample_ptr)cinfo->upsample;","JDIMENSION i, x;","int y;","JDIMENSION lines_per_iMCU_row, lines_left_in_iMCU_row, lines_after_iMCU_row;"],"label":1}
{"cve":"CVE-2019-13391","code_chunks":["","if (status == MagickFalse)","continue;","Ar=GetCacheViewVirtualPixels(Ar_view,0,y,Ar_image->columns,1,exception);","Ai=GetCacheViewVirtualPixels(Ai_view,0,y,Ai_image->columns,1,exception);","Br=GetCacheViewVirtualPixels(Br_view,0,y,Br_image->columns,1,exception);"],"label":1}
{"cve":"CVE-2019-13219","code_chunks":["ady -= abs(base) * adx;","if (x1 > n) x1 = n;","if (x < x1) {","LINE_OP(output[x], inverse_db_table[y]);","for (++x; x < x1; ++x) {"],"label":1}
{"cve":"CVE-2018-5730","code_chunks":["        establish_links = TRUE;","    }","","    if (entry->mask & KADM5_LAST_SUCCESS) {","        memset(strval, 0, sizeof(strval));","        if ((strval[0]=getstringtime(entry->last_success)) == NULL)","            goto cleanup;"],"label":0}
{"cve":"PYSEC-2020-273","code_chunks":["","m.def(\"TFE_ToDlpackCapsule\", [](py::handle& o) {","PyObject* eager_tensor_pyobject_ptr = o.ptr();","TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);","tensorflow::Safe_TF_StatusPtr status =","tensorflow::make_safe(TF_NewStatus());","void* dlm_ptr = tensorflow::TFE_HandleToDLPack(thandle, status.get());"],"label":1}
{"cve":"CVE-2023-40589","code_chunks":["{","*HistoryPtr++ = *CopyOffsetPtr++;","CopyLength--;","}","","CopyOffsetPtr = HistoryBuffer;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":[],"label":1}
{"cve":"CVE-2022-32547","code_chunks":["%                                                                             %","+   G e t M a g i c k P r o p e r t y                                         %","%                                                                             %","%                                                                             %","%                                                                             %","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","%"],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["\/* Align data offset to 4-byte boundary *\/","fit_size = ALIGN(fdt_totalsize(fit_header), 4);","\/* External splash offset means the offset by end of FIT header *\/","external_splash_addr += location->offset + fit_size;","is_splash_external = true;","} else {"],"label":1}
{"cve":"CVE-2022-4254","code_chunks":["                            NULL);","    assert_int_equal(ret, 0);","    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert2_der),","                                        sizeof(test_cert2_der),","                                        &filter, &domains);","    assert_int_equal(ret, 0);","    assert_non_null(filter);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["                                   accum_scratch_dims)) {","      TfLiteIntArray* accum_size = TfLiteIntArrayCreate(2);","      accum_size->data[0] = n_cell;","      accum_size->data[1] = n_batch;","      TF_LITE_ENSURE_OK(","          context, context->ResizeTensor(context, accum_scratch, accum_size));","    }"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["PyUnicode_GET_LENGTH(state->last_str) != 0);","","\/* We've dealt with the literal now. It can't be leaked on further","errors. *\/"],"label":1}
{"cve":"CVE-2023-28487","code_chunks":["}","","static void","help(void)","{","    (void) printf(_(\"%s - replay sudo session logs\\n\\n\"), getprogname());","    print_usage(stdout);"],"label":0}
{"cve":"CVE-2022-37032","code_chunks":["{","if (meslist->key == index)","{","zlog_warn(\"message index %d [%s] found in position %d (max is %d)\",","index, meslist->str, i, max);","return meslist->str;","}"],"label":1}
{"cve":"PYSEC-2021-815","code_chunks":["    TTypes<float, 4>::ConstTensor stats_summary =","        stats_summary_t->tensor<float, 4>();","    const int32_t feature_dims = stats_summary_t->dim_size(1);","        const int32_t num_buckets = stats_summary_t->dim_size(2) - 1;","    const int32_t logits_dim = logits_dim_;","    const int32_t hessian_dim = stats_summary_t->dim_size(3) - logits_dim;","    OP_REQUIRES(context, hessian_dim > 0,"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["}","output_indexes_shape->data[num_dimensions - 1] = k;","output_values_shape->data[num_dimensions - 1] = k;","TfLiteTensor* output_indexes = GetOutput(context, node, kOutputIndexes);","TfLiteTensor* output_values = GetOutput(context, node, kOutputValues);"],"label":1}
{"cve":"CVE-2023-23456","code_chunks":["unsigned const imagesize = ih.imagesize;","unsigned const entry = ih.entry;","unsigned const relocsize = ih.relocsize;","if (!imagesize || file_size <= imagesize || file_size <= entry || file_size <= relocsize) {","printWarn(getName(), \"bad header; imagesize=%#x  entry=%#x  relocsize=%#x\", imagesize,","entry, relocsize);","return 0;"],"label":1}
{"cve":"CVE-2018-10538","code_chunks":["","        if (debug_logging_mode)","            error_line (\"chunk header indicated length = %lld\", dff_chunk_header.ckDataSize);","","        if (!strncmp (dff_chunk_header.ckID, \"FVER\", 4)) {","            uint32_t version;",""],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (!AsyncFor_type) return 0;","While_type = make_type(\"While\", stmt_type, While_fields, 3);","if (!While_type) return 0;","If_type = make_type(\"If\", stmt_type, If_fields, 3);","if (!If_type) return 0;","With_type = make_type(\"With\", stmt_type, With_fields, 3);"],"label":0}
{"cve":"CVE-2020-5209","code_chunks":["const char *s;","{","int i;","char *tmps = 0;","","for (i = 0; winchoices[i].procs; i++) {"],"label":0}
{"cve":"CVE-2020-5238","code_chunks":["yych = *(marker = p);","if (yych <= '\/') {","if (yych <= 0x1F) {","if (yych <= '\\t') {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static void eb_mul_sim_kbltz(eb_t r, const eb_t p, const bn_t k, const eb_t q,","const bn_t m, const eb_t *t) {","int i, l, l0, l1, n0, n1, w, g;","int8_t u, tnaf0[RLC_FB_BITS + 8], tnaf1[RLC_FB_BITS + 8], *_k, *_m;","eb_t t0[1 << (EB_WIDTH - 2)];","eb_t t1[1 << (EB_WIDTH - 2)];"],"label":1}
{"cve":"CVE-2022-35970","code_chunks":["","AddInputFromArray<qint32>(TensorShape({value_count}),","{-(1 << 23), 0, (1 << 23)});","AddInputFromArray<float>(TensorShape({1}), {-256.0f});","AddInputFromArray<float>(TensorShape({1}), {256.0f});"],"label":1}
{"cve":"CVE-2023-47016","code_chunks":["}","int j;","int count = 0;","for (j = 0; j < section->size; j += 8) {","ut64 addr64 = K_RPTR (buf + j);","ut64 paddr64 = section->paddr + paddr + j;","if (mode == R_K_CONSTRUCTOR_TO_ENTRY) {"],"label":1}
{"cve":"CVE-2021-29533","code_chunks":["CHECK_LT(min_box_col_clamp, width);","CHECK_LT(max_box_col_clamp, width);","","CHECK_LT(min_box_row, height);","CHECK_GE(max_box_row, 0);","CHECK_LT(min_box_col, width);"],"label":1}
{"cve":"CVE-2018-20179","code_chunks":["{","UNUSED(mcs_data);","uint8 result;","int length;","STREAM s;","RD_BOOL is_fastpath;","uint8 fastpath_hdr;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {","return 1;"],"label":1}
{"cve":"CVE-2021-43848","code_chunks":["    finalize_do_send(stream);","}","","static void tunnel_on_read(h2o_tunnel_t *_tunnel, const char *err, const void *bytes, size_t len)","{","    struct st_h2o_http3_server_stream_t *stream = _tunnel->data;",""],"label":0}
{"cve":"CVE-2020-15121","code_chunks":["close (s->fd);","#endif","return false;","}","sa.sin_addr = *((struct in_addr *)he->h_addr);","s->port = r_socket_port_by_name (port);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["tok->atbol = 1;","if (blankline || tok->level > 0) {","goto nextline;","}"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 controlInterest;","UINT16 detachInterest;","WLog_INFO(TAG, \"ControlCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 12)","return FALSE;"],"label":1}
{"cve":"CVE-2023-52266","code_chunks":["int Request::parse_request(const char *read_buffer, int read_size) {","    _total_req_size += read_size;","    if (_total_req_size > MAX_REQ_SIZE) {","        LOG_INFO(\"TOO BIG REQUEST WE WILL REFUSE IT! MAX_REQ_SIZE:%d\", MAX_REQ_SIZE);","        return -1;","    }","    LOG_DEBUG(\"read from client: size:%d, content:%.4096s\", read_size, read_buffer);"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["  EXPECT_EQ(envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::DNS,","            cvc_config.subjectAltNameMatchers()[0].san_type());","  EXPECT_EQ(\"second san\", cvc_config.subjectAltNameMatchers()[1].matcher().exact());","  EXPECT_EQ(envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::DNS,","            cvc_config.subjectAltNameMatchers()[1].san_type());","      EXPECT_EQ(1, cvc_config.verifyCertificateHashList().size());","  EXPECT_EQ(default_verify_certificate_hash, cvc_config.verifyCertificateHashList()[0]);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params =","reinterpret_cast<TfLiteSpaceToDepthParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2021-33910","code_chunks":["assert(ret);","","p = strdupa(f);","if (!p)","return -ENOMEM;",""],"label":1}
{"cve":"CVE-2017-12424","code_chunks":["(NULL != ptr)","#if KEEP_NIS_AT_END","&& ((NULL == ptr->line)","|| (('+' != ptr->line[0])","&& ('-' != ptr->line[0])))","#endif"],"label":0}
{"cve":"CVE-2020-11095","code_chunks":["\tif ((orderInfo->fieldFlags & WINDOW_ORDER_FIELD_NOTIFY_STATE) != 0)","\t{","\t\t\/* notify state should not be sent when version is 0 *\/","\t\tif (versionFieldPresent && iconStateOrder->version == 0)","\t\t\treturn FALSE;","","\t\tStream_Write_UINT32(s, iconStateOrder->state);"],"label":0}
{"cve":"CVE-2016-4563","code_chunks":["  affine_matrix->sx=1.0;","  affine_matrix->sy=1.0;","}","\f","\/*","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","%                                                                             %"],"label":0}
{"cve":"CVE-2022-0521","code_chunks":["\tut64 offset = 0;","\tRBinJavaVerificationObj *se = R_NEW0 (RBinJavaVerificationObj);","\tif (!se) {","\t\treturn NULL;","\t}","\tse->file_offset = buf_offset;","\tse->tag = buffer[offset];"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["                    text[tmp_length] = '\\0';","                    midi_setup_cuepoint(mdi, text);","","                    ret_cnt += tmp_length;","","                } else if ((event_data[0] == 0x20) && (event_data[1] == 0x01)) {","                    \/*"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2018-18314","code_chunks":["\t\t\t\t      than just initialized.  *\/","    SV* properties = NULL;    \/* Code points that match \\p{} \\P{} *\/","    SV* posixes = NULL;     \/* Code points that match classes like [:word:],","                               extended beyond the Latin1 range.  These have to","                               be kept separate from other code points for much","                               of this function because their handling  is","                               different under \/i, and for most classes under"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["output_state_sf->type = kTfLiteFloat32;","output_state_sf->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(output_state_sf->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"CVE-2020-11089","code_chunks":["{","WLog_ERR(TAG, \"Invalid RDP_NEG_RSP\");","nego->state = NEGO_STATE_FAIL;","return FALSE;","}","","Stream_Read_UINT8(s, nego->flags);"],"label":0}
{"cve":"CVE-2023-22742","code_chunks":["cert.type |= GIT_CERT_SSH_SHA256;","memcpy(&cert.hash_sha256, key, 32);","}","#endif","","key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA1);"],"label":1}
{"cve":"CVE-2021-3984","code_chunks":["{","pos_T\t    cursor_save;","pos_T\t    *trypos;","pos_T\t    *pos;","static pos_T    pos_copy;",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_EQ(context, input_to_forget_weights->dims->size, 2);","  TF_LITE_ENSURE_EQ(context, input_to_forget_weights->dims->data[0], n_cell);","  TF_LITE_ENSURE_EQ(context, input_to_forget_weights->dims->data[1], n_input);","","  const TfLiteTensor* input_to_cell_weights;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node,","                                          lstm::full::kInputToCellWeightsTensor,"],"label":0}
{"cve":"CVE-2018-20175","code_chunks":["{","color = CVAL(in);","*out = color;","out += 4;","indexw++;","collen--;"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["yang_read_extcomplex_str(struct lys_module *module, struct lys_ext_instance_complex *ext, const char *arg_name,","const char *parent_name, char **value, int parent_stmt, LY_STMT stmt)","{","int c;","const char **str, ***p = NULL;"],"label":0}
{"cve":"CVE-2018-20181","code_chunks":["ber_parse_header(STREAM s, int tagval, uint32 *length)","{","int tag, len;",""],"label":0}
{"cve":"CVE-2023-25671","code_chunks":["} else {","node_name = full_name.take_front(colon_sep);","output_name = full_name.drop_front(colon_sep + 1);","}","colon_sep = output_name.find_last_of(':');","if (colon_sep != StringRef::npos) {","unsigned long long value;"],"label":0}
{"cve":"CVE-2019-19646","code_chunks":["p->iTable = pItem->iCursor;","if( p->y.pTab->iPKey==iCol ){","p->iColumn = -1;","}else{","p->iColumn = (ynVar)iCol;","if( pTab->tabFlags & TF_HasGenerated ){"],"label":0}
{"cve":"CVE-2017-12595","code_chunks":["QPDFObjectHandle object;","","std::vector<std::vector<QPDFObjectHandle> > olist_stack;","olist_stack.push_back(std::vector<QPDFObjectHandle>());","enum state_e { st_top, st_start, st_stop, st_eof, st_dictionary, st_array };","std::vector<state_e> state_stack;","state_stack.push_back(st_top);"],"label":0}
{"cve":"CVE-2022-25885","code_chunks":["    {","\t\tTHROW_EXCEPTION(\"write is not a function, it should be you know...\");","        return 0;","    }","    Local<Function> func = Local<Function>::Cast(value);","    ","    Local<Value> args[1];"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["GetInput(context, node, kInputTensorBoxEncodings);","const TfLiteTensor* decoded_boxes =","&context->tensors[op_data->decoded_boxes_index];","const int num_boxes = input_box_encodings->dims->data[1];"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["\/* Sanity check *\/","PJ_ASSERT_RETURN(tp, PJ_EINVAL);","","pj_pool_release(loop->pool);","","return PJ_SUCCESS;"],"label":1}
{"cve":"CVE-2016-3134","code_chunks":["\tif (copy_from_user(name, user, sizeof(name)) != 0)","\t\treturn -EFAULT;","","\tname[XT_TABLE_MAXNAMELEN-1] = '\\0';","#ifdef CONFIG_COMPAT","\tif (compat)","\t\txt_compat_lock(NFPROTO_ARP);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["                    GetOutputSafe(context, node, kOutputTensor, &output));","  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","","  const TfLiteTensor* multipliers;","  TF_LITE_ENSURE_OK(","      context, GetInputSafe(context, node, kInputMultipliers, &multipliers));","    if (multipliers->type != kTfLiteInt32 && multipliers->type != kTfLiteInt64) {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["            PyErr_SetString(PyExc_TypeError, \"required field \\\"name\\\" missing from AsyncFunctionDef\");","            return 1;","        }","        else {","            int res;","            res = obj2ast_identifier(tmp, &name, arena);","            if (res != 0) goto failed;"],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["int fit_verify_header(unsigned char *ptr, int image_size,","struct image_tool_params *params)","{","if (fdt_check_header(ptr) != EXIT_SUCCESS || !fit_check_format(ptr))","return EXIT_FAILURE;","","return EXIT_SUCCESS;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");"],"label":0}
{"cve":"CVE-2020-5238","code_chunks":["bufsize_t _scan_table_cell_end(const unsigned char *p) {","  const unsigned char *start = p;","","  {","    unsigned char yych;","    static const unsigned char yybm[] = {","        0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 128, 128, 0, 0, 0, 0, 0, 0, 0,"],"label":0}
{"cve":"CVE-2021-4192","code_chunks":["end = end2;","if (top.col == MAXCOL || bot.col == MAXCOL || curswant == MAXCOL)","end = MAXCOL;","cols = win_linetabsize(wp, rex.line, (colnr_T)(rex.input - rex.line));","if (cols < start || cols > end - (*p_sel == 'e'))","return FALSE;","}"],"label":1}
{"cve":"CVE-2023-4322","code_chunks":["return false;","}","ut8 *buf = op->bytes;","const ut64 addr = op->addr;","ut64 dst = 0LL;","if (!op) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["                               input2, output);","    }","    case kTfLiteInt64: {","      return EvalImpl<int64_t>(context, data->requires_broadcast, input1,","                               input2, output);","    }","    case kTfLiteFloat32: {"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["PJ_UNUSED_ARG(ts);","","DTLS_LOCK(ds);","","if (!ds->ossl_ssl[idx]) {","DTLS_UNLOCK(ds);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["res = obj2ast_identifier(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"Global field \\\"names\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"CVE-2022-2129","code_chunks":["#endif",")","{","if (*eap->arg != NUL && curbuf_locked())","return;","","n = readonlymode;"],"label":1}
{"cve":"PYSEC-2022-111","code_chunks":["                        ThreadPoolHandleOp);","REGISTER_KERNEL_BUILDER(Name(\"ExperimentalThreadPoolHandle\").Device(DEVICE_CPU),","                        ThreadPoolHandleOp);","","REGISTER_KERNEL_BUILDER(Name(\"ThreadPoolDataset\").Device(DEVICE_CPU),","                        ThreadPoolDatasetOp);","REGISTER_KERNEL_BUILDER("],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["hidden_state_quantized->type = input_weights->type;","hidden_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(hidden_state_quantized->dims,"],"label":1}
{"cve":"CVE-2020-8037","code_chunks":["if (length <= 0)","return;","","b = (u_char *)malloc(length);","if (b == NULL)","return;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["      reinterpret_cast<TfLitePackParams*>(node->builtin_data);","","  TF_LITE_ENSURE_EQ(context, NumInputs(node), data->values_count);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","  const TfLiteTensor* input0;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input0));"],"label":0}
{"cve":"CVE-2019-19922","code_chunks":["cfs_b->distribute_running = 1;","raw_spin_unlock_irqrestore(&cfs_b->lock, flags);","\/* we can't nest cfs_b->lock while distributing bandwidth *\/","runtime = distribute_cfs_runtime(cfs_b, runtime,","runtime_expires);"],"label":1}
{"cve":"CVE-2018-8793","code_chunks":["\tint revcode;","\tuint8 * last_line;","\tuint8 * this_line;","\tuint8 * org_in;","\tuint8 * org_out;","","\torg_in = in;"],"label":0}
{"cve":"CVE-2022-35941","code_chunks":["        tensor_in_shape.dims() == 1 && tensor_in_shape.NumElements() == 4,","        errors::InvalidArgument(\"out_backprop must be 1-dimensional and 4 \"","                                \"elements\"));","        OP_REQUIRES(context, out_backprop.dims() == 4,","                errors::InvalidArgument(\"out_backprop must be 4-dimensional\"));","    TensorShape output_shape;","    auto shape_vec = tensor_in_shape.vec<int32>();"],"label":0}
{"cve":"CVE-2021-32628","code_chunks":["    for (i = start; i <= end; i++) {","        if (!sdsEncodedObject(argv[i]))","            continue;","        size_t len = sdslen(argv[i]->ptr);","        if (len > server.hash_max_ziplist_value) {","            hashTypeConvert(o, OBJ_ENCODING_HT);","            return;"],"label":0}
{"cve":"CVE-2018-18585","code_chunks":["if ((off_t)chm->chunk_size * (off_t)chm->num_chunks > chm->length) {","D((\"chunks larger than entire file\"))","return MSPACK_ERR_DATAFORMAT;","}","","\/* common sense checks on header section 1 fields *\/"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"targets\\\" missing from Delete\");","            return 1;","        }","        else {","            int res;","            Py_ssize_t len;"],"label":0}
{"cve":"CVE-2021-41227","code_chunks":["  Env* env = Env::Default();","  auto root = Scope::NewRootScope().ExitOnError();","","  string two_file, three_file;","  TF_ASSERT_OK(CreateTempFileFloat(env, 2.0f, 1000, &two_file));","  TF_ASSERT_OK(CreateTempFileFloat(env, 3.0f, 1000, &three_file));","  auto node1 = ops::ImmutableConst(root, DT_FLOAT, kFileTensorShape, two_file);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            items = _Ta3_asdl_seq_new(len, arena);","            if (items == NULL) goto failed;","            for (i = 0; i < len; i++) {","                withitem_ty val;"],"label":0}
{"cve":"CVE-2016-3134","code_chunks":["e->comefrom |= ((1 << hook) | (1 << NF_INET_NUMHOOKS));","","\/* Unconditional return\/END. *\/","if ((e->target_offset == sizeof(struct ip6t_entry) &&"],"label":1}
{"cve":"CVE-2017-14172","code_chunks":["Note spot names.","*\/","(void) FormatLocaleString(property,MagickPathExtent,\"ps:SpotColor-%.20g\",","(double) (spotcolor++));","for (q=command; *q != '\\0'; q++)","if (isspace((int) (unsigned char) *q) != 0)"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["    \/* First of all, flush stderr *\/","    tmp = _PyObject_CallMethodId(ferr, &PyId_flush, NULL);","    if (tmp == NULL)","        PyErr_Clear();","    else","        Py_DECREF(tmp);",""],"label":0}
{"cve":"CVE-2020-10931","code_chunks":["        req = &c->binary_header;","","        if (settings.verbose > 1) {","            \/* Dump the packet before we convert it to host order *\/","            int ii;","            fprintf(stderr, \"<%d Read binary protocol data:\", c->sfd);","            for (ii = 0; ii < sizeof(req->bytes); ++ii) {"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"CVE-2016-5350","code_chunks":["","\/* Get remaining data in buffer as a string *\/","","remaining = tvb_captured_length_remaining(tvb, offset);","if (remaining <= 0) {","if (data)","*data = g_strdup(\"\");"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));","TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);","TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);","","const TfLiteTensor* key;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &key));"],"label":0}
{"cve":"CVE-2022-47024","code_chunks":["{","Pixmap blank_pixmap = XCreatePixmap(gui.dpy, gui.wid, 1, 1, 1);","GC gc = XCreateGC(gui.dpy, blank_pixmap, (unsigned long)0, (XGCValues*)0);","XDrawPoint(gui.dpy, blank_pixmap, gc, 0, 0);","XFreeGC(gui.dpy, gc);"],"label":1}
{"cve":"PYSEC-2021-656","code_chunks":["ValidateInputs(ctx, *input_matrix, input_permutation_indices, &batch_size,","&num_rows);","","Tensor batch_ptr(cpu_allocator(), DT_INT32, TensorShape({batch_size + 1}));","auto batch_ptr_vec = batch_ptr.vec<int32>();"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["            PyErr_SetString(PyExc_TypeError, \"required field \\\"op\\\" missing from BinOp\");","            return 1;","        }","        else {","            int res;","            res = obj2ast_operator(tmp, &op, arena);","            if (res != 0) goto failed;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["\/*[clinic input]","eval as builtin_eval","","    source: object","    globals: object = None","    locals: object = None","    \/"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","const TfLiteTensor* fw_input_gate_bias =","GetOptionalInputTensor(context, node, kFwInputGateBiasTensor);","const TfLiteTensor* fw_forget_gate_bias =","GetInput(context, node, kFwForgetGateBiasTensor);"],"label":1}
{"cve":"CVE-2021-3997","code_chunks":["","                if (!FLAGS_SET(flags, REMOVE_PHYSICAL)) {","                        struct statfs s;","","                        if (statfs(path, &s) < 0)","                                return -errno;","                        if (is_physical_fs(&s))"],"label":0}
{"cve":"CVE-2021-24025","code_chunks":["raise_warning(\"Iv size incorrect; supplied length: %d, needed: %d\",","iv.size(), iv_size);","}","memcpy(iv_s, iv.data(), std::min(iv_size, iv.size()));","","mcrypt_generic_deinit(pm->m_td);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input_tensor = GetInput(context, node, 0);","const TfLiteTensor* padding_matrix = GetInput(context, node, 1);","TfLiteTensor* output_tensor = GetOutput(context, node, 0);","","TF_LITE_ENSURE_EQ(context, NumDimensions(padding_matrix), 2);","TF_LITE_ENSURE_EQ(context, SizeOfDimension(padding_matrix, 0),"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* inputs = GetInput(context, node, kInputsTensor);","const TfLiteTensor* sequence_length =","GetInput(context, node, kSequenceLengthTensor);","const CTCBeamSearchDecoderParams* option =","reinterpret_cast<CTCBeamSearchDecoderParams*>(node->user_data);",""],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"CVE-2024-24806","code_chunks":["","    if (d < de)","      *d++ = '.';","","    s = si;","  }",""],"label":0}
{"cve":"CVE-2018-9336","code_chunks":["    else","    {","        err = DeleteAddress(addr_row);","        if (err)","        {","            goto out;","        }"],"label":0}
{"cve":"CVE-2022-29226","code_chunks":["auto& crypto_util = Envoy::Common::Crypto::UtilitySingleton::get();","","auto token_secret = config_->tokenSecret();","std::vector<uint8_t> token_secret_vec(token_secret.begin(), token_secret.end());","const std::string pre_encoded_token =","Hex::encode(crypto_util.getSha256Hmac(token_secret_vec, token_payload));"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\tcache_glyph_v2->flags = (flags & 0x00F0) >> 4;","\tcache_glyph_v2->cGlyphs = (flags & 0xFF00) >> 8;","","\tfor (i = 0; i < cache_glyph_v2->cGlyphs; i++)","\t{","\t\tGLYPH_DATA_V2* glyph = &cache_glyph_v2->glyphData[i];",""],"label":0}
{"cve":"CVE-2020-5291","code_chunks":["      die_with_error (\"Creating new namespace failed\");","    }","","  ns_uid = opt_sandbox_uid;","  ns_gid = opt_sandbox_gid;","","  if (pid != 0)"],"label":0}
{"cve":"CVE-2023-51698","code_chunks":["GdkPixbuf *rotated_pixbuf = NULL;","ComicsDocument *comics_document = COMICS_DOCUMENT (document);","const char *page_path;","GError *error = NULL;","","page_path = g_ptr_array_index (comics_document->page_names, rc->page->index);"],"label":0}
{"cve":"PYSEC-2020-284","code_chunks":["  void Compute(OpKernelContext* ctx) override {","    const Tensor& val = ctx->input(0);","    auto session_state = ctx->session_state();","    OP_REQUIRES(ctx, session_state != nullptr,","                errors::FailedPrecondition(","                    \"GetSessionHandle called on null session state\"));","    int64 id = session_state->GetNewId();"],"label":0}
{"cve":"CVE-2021-25940","code_chunks":["  if (type != rest::RequestType::POST) {","    generateError(rest::ResponseCode::METHOD_NOT_ALLOWED, TRI_ERROR_HTTP_METHOD_NOT_ALLOWED);","    return RestStatus::DONE;","  }","","  bool parseSuccess = false;","  VPackSlice slice = this->parseVPackBody(parseSuccess);"],"label":0}
{"cve":"CVE-2020-5238","code_chunks":["{","unsigned char yych;","static const unsigned char yybm[] = {","0,   0,   0,   0,   0,   0,   0,   0,   0,   64,  0, 64, 64, 0, 0, 0,","0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 0,  0,  0, 0, 0,","64,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 0,  0,  0, 0, 0,"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* filter = GetInput(context, node, 1);","","TF_LITE_ENSURE_EQ(context, input->dims->size, 4);","TF_LITE_ENSURE_EQ(context, filter->dims->size, 4);"],"label":1}
{"cve":"CVE-2023-28101","code_chunks":["g_info (\"Unknown filesystem type %s\", filesystems[i]);","else","{","g_assert (mode == FLATPAK_FILESYSTEM_MODE_NONE || !remove);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["","\tRLC_TRY {","\t\t\/* Prepare the precomputation table. *\/","\t\tfor (i = 0; i < (1 << (EB_WIDTH - 2)); i++) {","\t\t\teb_null(t[i]);","\t\t\teb_new(t[i]);","\t\t}"],"label":0}
{"cve":"CVE-2023-32233","code_chunks":["\t\treturn iter.err;","","\treturn 0;","}","","static bool nft_lookup_reduce(struct nft_regs_track *track,","\t\t\t      const struct nft_expr *expr)"],"label":0}
{"cve":"CVE-2016-8649","code_chunks":["status = -1;","ret = lxc_read_nointr_expect(ipc_socket, &status, sizeof(status), &expected);","if (ret <= 0) {","ERROR(\"error using IPC to receive notification from initial process (0)\");","shutdown(ipc_socket, SHUT_RDWR);","rexit(-1);","}"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2016-5357","code_chunks":["pd = ws_buffer_start_ptr(buf);","","while(1) {","","\/* The last packet is not delimited by an empty line, but by EOF","* So accept EOF as a valid delimiter too"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["node->temporaries->data[kScratchBuffer] =","scratch_tensor_index + kScratchBuffer;","","TfLiteTensor* scratch_buffer = GetTemporary(context, node, kScratchBuffer);","scratch_buffer->type = input->type;","scratch_buffer->allocation_type = kTfLiteArenaRw;",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","*data->invoke_count += 1;","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const uint8_t* input_data = GetTensorData<uint8_t>(input);","int size = NumElements(input->dims);",""],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["\/* static *\/ tsl::Status GpuDriver::DestroyEvent(GpuContext* context,","CUevent* event) {","if (*event == nullptr) {","return tsl::Status(port::error::INVALID_ARGUMENT,","\"input event cannot be null\");","}",""],"label":1}
{"cve":"CVE-2017-5507","code_chunks":["if ((size_t) (p-comment+1) >= length)","{","*p='\\0';","length<<=1;","comment=(char *) ResizeQuantumMemory(comment,length+","MagickPathExtent,sizeof(*comment));"],"label":1}
{"cve":"CVE-2016-5352","code_chunks":["    guint tmp_len;","","#ifdef _DEBUG","#define MSGBUF_LEN 255","    CHAR msgbuf[MSGBUF_LEN];","#endif",""],"label":0}
{"cve":"PYSEC-2021-823","code_chunks":["","for (int32_t i = 0; i < rank; ++i) {","int64_t in_idx = data[i];","if (in_idx >= rank) {","return errors::InvalidArgument(\"perm dim \", in_idx,","\" is out of range of input rank \", rank);","}"],"label":1}
{"cve":"CVE-2022-26530","code_chunks":["state.args.colors.line = state.args.colors.inside;","} else if (line_mode == LM_RING) {","state.args.colors.line = state.args.colors.ring;","}","","#ifdef __linux__"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["bool MemFile::seek(int64_t offset, int whence \/* = SEEK_SET *\/) {","assertx(m_len != -1);","if (whence == SEEK_CUR) {","if (offset > 0 && offset < bufferedLen()) {","setReadPosition(getReadPosition() + offset);","setPosition(getPosition() + offset);","return true;"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["\tlen -= 2;","","\tif (ndo->ndo_vflag) {","\t\tND_PRINT(\"\\n\\t%s\", tok2str(ahcp1_msg_str, \"Unknown-%u\", type));","\t\tif (mbz != 0)","\t\t\tND_PRINT(\", MBZ %u\", mbz);","\t\tND_PRINT(\", Length %u\", body_len);"],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["FlatpakTransactionPrivate *priv = flatpak_transaction_get_instance_private (self);","GList *l;","","for (l = priv->ops; l != NULL; l = l->next)","{","FlatpakTransactionOperation *op = l->data;"],"label":0}
{"cve":"CVE-2021-3875","code_chunks":["if (lnum != MAXLNUM)","curwin->w_cursor.lnum = lnum;","","if (c == '\/' && curwin->w_cursor.lnum > 0)"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["inline void StringData::setSize(int len) {"],"label":1}
{"cve":"CVE-2021-4019","code_chunks":["|| (vim_strchr((char_u *)\"%_z@\", arg[1]) != NULL","&& arg[2] != NUL)))","{","STRCPY(d, \"\/\\\\\\\\\");","STRCPY(d + 3, arg + 1);","if (d[3] == '_' && d[4] == '$')"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    struct {","      int32_t num_strs;","      int32_t offsets[2];","      char str_data[3];","    } tensor_data;","  } data;","  data.tensor_data = {1, {12, 15}, {'A', 'B', 'C'}};"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteIntArray* input_dims = input->dims;","  int input_dims_size = input_dims->size;","  TF_LITE_ENSURE(context, input_dims_size >= 1);","","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["return NULL;","if (forbidden_name(c, classname, CHILD(n, 3), 0))","return NULL;","return ClassDef(classname, NULL, NULL, s, decorator_seq,","LINENO(n), n->n_col_offset, c->c_arena);","}"],"label":0}
{"cve":"CVE-2021-38383","code_chunks":["goto error;","}","","net_port_get(port, (union net_sockaddr *)ptr->ai_addr);","net_address_get(addr, sizeof(addr), (union net_sockaddr *)ptr->ai_addr);",""],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  reg_len.invoke = [](TfLiteContext* context, TfLiteNode* node) {","    const TfLiteTensor* a0;","    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &a0));","    TfLiteTensor* a1;","    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &a1));","    a1->data.i32[0] = a0->bytes;","    return kTfLiteOk;"],"label":0}
{"cve":"CVE-2020-14397","code_chunks":["    if(cl->screen->progressiveSliceHeight>0) {","\t    int height=cl->screen->progressiveSliceHeight,","\t    \ty=cl->progressiveSliceY;","\t    sraRegionPtr bbox=sraRgnBBox(updateRegion);","\t    sraRect rect;","\t    if(sraRgnPopRect(bbox,&rect,0)) {","\t\tsraRegionPtr slice;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output1 = GetOutput(context, node, 1);","TF_LITE_ENSURE_STATUS(context->ResizeTensor(","context, output1, TfLiteIntArrayCopy(input->dims)));","return kTfLiteOk;"],"label":1}
{"cve":"CVE-2019-16995","code_chunks":["* - hsr_dev->flags - i.e.","*\t\t\tIFF_MASTER\/SLAVE?","* - hsr_dev->priv_flags - i.e.","*\t\t\tIFF_EBRIDGE?","*\t\t\tIFF_TX_SKB_SHARING?","*\t\t\tIFF_HSR_MASTER\/SLAVE?"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["          input->type);","      return kTfLiteError;","  }","","  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);","","  if (IsConstantTensor(axis)) {"],"label":0}
{"cve":"CVE-2018-20762","code_chunks":["else if (!gui_mode && url_arg) {","char *ext;","","strcpy(the_url, url_arg);","ext = strrchr(the_url, '.');","if (ext && (!stricmp(ext, \".m3u\") || !stricmp(ext, \".pls\"))) {","GF_Err e = GF_OK;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["}","return nullptr;","}"],"label":0}
{"cve":"CVE-2022-0496","code_chunks":["\t\t\t\t\t\t\t\tdouble r_minor = r_major * radius;","\t\t\t\tdouble sweep_angle = ellipse_stop_angle-ellipse_start_angle;","\t\t\t\tint n = Calc::get_fragments_from_r(r_major, fn, fs, fa);","\t\t\t\tn = static_cast<int>(ceil(n * sweep_angle \/ (2 * M_PI)));","\t\t\t\tVector2d p1{0.0, 0.0};","\t\t\t\tfor (int i=0; i<=n; ++i) {","\t\t\t\t\tdouble a = (ellipse_start_angle + sweep_angle*i\/n);"],"label":0}
{"cve":"CVE-2022-4254","code_chunks":["if (ret == 0) {","\/* match *\/","ret = get_filter(ctx, r->parsed_mapping_rule, cert_content,","&filter);","if (ret != 0) {","CM_DEBUG(ctx, \"Failed to get filter\");","goto done;"],"label":1}
{"cve":"CVE-2022-23558","code_chunks":["int TfLiteIntArrayGetSizeInBytes(int size) {","static TfLiteIntArray dummy;","","int computed_size = sizeof(dummy) + sizeof(dummy.data[0]) * size;","#if defined(_MSC_VER)","computed_size -= sizeof(dummy.data[0]);","#endif"],"label":1}
{"cve":"CVE-2020-1917","code_chunks":["int64_t MemFile::readImpl(char *buffer, int64_t length) {","  assertx(m_len != -1);","  assertx(length > 0);","  assertx(m_cursor >= 0);","  int64_t remaining = m_len - m_cursor;","  if (remaining < length) length = remaining;","  if (length > 0) {"],"label":0}
{"cve":"CVE-2024-0727","code_chunks":["{","    STACK_OF(PKCS7) *asafes = NULL, *newsafes = NULL;","    STACK_OF(PKCS12_SAFEBAG) *bags = NULL;","    int i, bagnid, pbe_nid = 0, pbe_iter = 0, pbe_saltlen = 0, cipherid = NID_undef;","    PKCS7 *p7, *p7new;","    ASN1_OCTET_STRING *p12_data_tmp = NULL, *macoct = NULL;","    unsigned char mac[EVP_MAX_MD_SIZE];"],"label":0}
{"cve":"CVE-2022-44789","code_chunks":["}","if (js_hasproperty(J, -1, \"value\")) {","hasvalue = 1;","js_setproperty(J, -3, name);","}","","if (!writable) atts |= JS_READONLY;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["          for (int i = 0; i < num; i++) {","            out->data.f[i] = a0->data.f[i] + a1->data.f[i];","          }","          if (out->buffer_handle != kTfLiteNullBufferHandle) {","                        out->data_is_stale = true;","          }","          return kTfLiteOk;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TfLiteIntArray* output_shape = TfLiteIntArrayCreate(input_dims_size);","for (int i = 0; i < input_dims_size; i++) {"],"label":1}
{"cve":"CVE-2020-5238","code_chunks":["goto yy42;","if (yych <= 0xF4)","goto yy43;","}","}","yy29 : { return (bufsize_t)(p - start); }"],"label":1}
{"cve":"CVE-2022-3213","code_chunks":["\/*","Convert stripped TIFF image.","*\/","extent=4*(samples_per_pixel+1)*TIFFStripSize(tiff);","strip_pixels=(unsigned char *) AcquireQuantumMemory(extent,","sizeof(*strip_pixels));","if (strip_pixels == (unsigned char *) NULL)"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["CHECK_HANDLE(handle, f);","int64_t ret = f->write(data, length);","if (ret < 0) {","raise_notice(\"fwrite(): send of %d bytes failed with errno=%d %s\",","data.size(), errno, folly::errnoStr(errno).c_str());","ret = 0;","}"],"label":1}
{"cve":"CVE-2021-32786","code_chunks":["\t\t*err_desc = apr_psprintf(r->pool,","\t\t\t\t\"No hostname was parsed and starting with '\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);","\t\treturn FALSE;","\t} else if ((uri.hostname == NULL) && (strstr(url, \"\/\\\\\") == url)) {","\t\t*err_str = apr_pstrdup(r->pool, \"Malformed URL\");","\t\t*err_desc = apr_psprintf(r->pool,","\t\t\t\t\"No hostname was parsed and starting with '\/\\\\': %s\", url);"],"label":0}
{"cve":"CVE-2019-16778","code_chunks":["    const Tensor& num_segments = context->input(2);","    if (!UnsortedSegmentReductionDoValidation(this, context, data, segment_ids,","                                              num_segments)) {","      return;","    }","    const auto segment_flat = segment_ids.flat<Index>();","    const int64 output_rows = internal::SubtleMustCopy(static_cast<int64>("],"label":0}
{"cve":"CVE-2023-27114","code_chunks":["\t\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &val);","\t\t\t\tif (!(n > 0 && n < buf_len)) {","\t\t\t\t\tgoto err;","\t\t\t\t}","\t\t\t\top->len += n;","\t\t\t\tn = read_u32_leb128 (buf + op->len, buf + buf_len, &reserved);","\t\t\t\tif (!(n == 1 && op->len + n <= buf_len)) {"],"label":0}
{"cve":"CVE-2021-29605","code_chunks":["int alloc_size = TfLiteIntArrayGetSizeInBytes(size);","if (alloc_size <= 0) return NULL;","TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);","if (!ret) return ret;","ret->size = size;","return ret;"],"label":0}
{"cve":"PYSEC-2022-115","code_chunks":["      int64_t next_batch_index = indices->matrix<int64_t>()(i, 0);","      OP_REQUIRES(","          ctx, next_batch_index >= previous_batch_index,","          errors::Unimplemented(\"The SparseTensor must be ordered in the batch \"","                                \"dimension; handling arbitrarily ordered input \"","                                \"is not currently supported.\"));","      previous_batch_index = next_batch_index;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE(context, input_dims_size >= 1);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","TfLiteIntArray* output_shape = TfLiteIntArrayCreate(input_dims_size + 1);","for (int i = 0; i < input_dims_size; i++) {","output_shape->data[i] = input_dims->data[i];"],"label":1}
{"cve":"CVE-2022-28927","code_chunks":["        if(remark[0] == emoji_id[0] && remark[1] == emoji_id[1])","            remark.erase(0, 4);","        else","            break;","    }","    if(remark.empty())","        return orig_remark;"],"label":0}
{"cve":"CVE-2023-39355","code_chunks":["context->maxPlaneSize = context->maxWidth * context->maxHeight;","context->nTempStep = context->maxWidth * 4;","","void* tmp = winpr_aligned_recalloc(context->planesBuffer, context->maxPlaneSize, 4, 32);","if (!tmp)","return FALSE;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (!stmts)","goto out;","asdl_seq_SET(stmts, 0, Pass(n->n_lineno, n->n_col_offset,","arena));","if (!asdl_seq_GET(stmts, 0))","goto out;"],"label":1}
{"cve":"CVE-2021-38171","code_chunks":["            avio_write(pb, adts->pce_data, adts->pce_size);","            adts->pce_size = 0;","        }","    }","    avio_write(pb, pkt->data, pkt->size);","","    return 0;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (TYPE(CHILD(n, i)) == COMMA)","i += 1; \/* the comma, if present *\/","break;","assert(i);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["static_cast<double>(filter->params.scale);","if (bias) {","const double bias_scale = static_cast<double>(bias->params.scale);","const double scale_diff = std::abs(input_product_scale - bias_scale);","const double output_scale = static_cast<double>(output->params.scale);",""],"label":1}
{"cve":"CVE-2021-3772","code_chunks":["return SCTP_DISPOSITION_DELETE_TCB;","}","","err = (struct sctp_errhdr *)(chunk->skb->data);","","\/* When calculating the time extension, an implementation"],"label":1}
{"cve":"CVE-2022-35972","code_chunks":["input_quantized.flat<quint8>());","AddInputFromArray<quint8>(bias_quantized.shape(),","bias_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});","AddInputFromArray<float>(TensorShape({1}), {input_max});"],"label":1}
{"cve":"PYSEC-2021-251","code_chunks":["} else {","for (int64 i = 0; i < flat_in.size(); ++i) {","const char* in_data_bytes =","reinterpret_cast<const char*>(flat_in(i).data());","char* out_data_bytes = reinterpret_cast<char*>(out_data);","const char* p_in = in_data_bytes;"],"label":1}
{"cve":"CVE-2017-9226","code_chunks":["prev = p;","if (IS_SYNTAX_OP2(syn, ONIG_SYN_OP2_ESC_U_HEX4)) {","num = scan_unsigned_hexadecimal_number(&p, end, 4, enc);","if (num < 0) return ONIGERR_TOO_BIG_NUMBER;","if (p == prev) {  \/* can't read nothing. *\/","num = 0; \/* but, it's not error *\/"],"label":1}
{"cve":"CVE-2017-16909","code_chunks":["    if (!strncmp(model, \"RP_imx219\", 9) && sz >= 0x9cb600 && !fseek(ifp, -0x9cb600, SEEK_END) &&","        fread(head, 1, 0x20, ifp) && !strncmp(head, \"BRCM\", 4))","    {","      strcpy(make, \"Broadcom\");","      strcpy(model, \"RPi IMX219\");","      if (raw_height > raw_width)","        flip = 5;"],"label":0}
{"cve":"CVE-2021-41193","code_chunks":["}","","","void ecall_set_clients(struct ecall* ecall,","\t\t       struct list *clientl)","{","\tint err = 0;"],"label":0}
{"cve":"CVE-2021-36978","code_chunks":["    {","\tlval *= 85;","\tlval += (this->inbuf[i] - 33U);","    }","","    unsigned char outbuf[4];","    memset(outbuf, 0, 4);"],"label":0}
{"cve":"CVE-2022-4254","code_chunks":["","int sss_certmap_init(TALLOC_CTX *mem_ctx,","                     sss_certmap_ext_debug *debug, void *debug_priv,","                     struct sss_certmap_ctx **ctx)","{","    int ret;",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\tep_add(r, r, t[u \/ 2]);","\t\t\t} else if (u < 0) {","\t\t\t\tep_sub(r, r, t[-u \/ 2]);","\t\t\t}","\t\t}","\t\t\/* Convert r to affine coordinates. *\/","\t\tep_norm(r, r);"],"label":0}
{"cve":"CVE-2019-14816","code_chunks":["\t\tif (rate_ie->len > MWIFIEX_SUPPORTED_RATES)","\t\t\treturn;","\t\tmemcpy(bss_cfg->rates, rate_ie + 1, rate_ie->len);","\t\trate_len = rate_ie->len;","\t}","","\trate_ie = (void *)cfg80211_find_ie(WLAN_EID_EXT_SUPP_RATES,"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["*\/","pw_len = strlen(pw_epasswd);","if (pw_len == DESLEN || HAS_AGEINFO(pw_epasswd, pw_len)) {","strlcpy(des_pass, pass, sizeof(des_pass));","pass = des_pass;","}",""],"label":1}
{"cve":"CVE-2016-3134","code_chunks":["{","static const struct arpt_arp uncond;","","return e->target_offset == sizeof(struct arpt_entry) &&","memcmp(&e->arp, &uncond, sizeof(uncond)) == 0;","}"],"label":0}
{"cve":"CVE-2021-24025","code_chunks":["m_cursor = offset;","} else {","assertx(whence == SEEK_END);","m_cursor = m_len + offset;","}","setPosition(m_cursor);"],"label":1}
{"cve":"CVE-2016-5735","code_chunks":["png_set_filler(png_ptr, 65535L, PNG_FILLER_AFTER);","#else","fprintf(stderr, \"pngquant readpng:  image is neither RGBA nor GA\\n\");","png_destroy_read_struct(&png_ptr, &info_ptr, NULL);","mainprog_ptr->retval = WRONG_INPUT_COLOR_TYPE;","return mainprog_ptr->retval;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (_PyObject_HasAttrId(obj, &PyId_lineno)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_lineno);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"CVE-2023-28366","code_chunks":["db__message_store_find(context, msg->source_mid, &stored);","}","","if(stored && msg->source_mid != 0 &&"],"label":1}
{"cve":"CVE-2017-11399","code_chunks":["        s->samples=0;","        av_log(avctx, AV_LOG_ERROR, \"Error decoding frame\\n\");","        return AVERROR_INVALIDDATA;","    }","","    switch (s->bps) {","        for (ch = 0; ch < s->channels; ch++) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t_s0 = (n0 >> 7);","\t\t\tn0 = ((n0 ^ _s0) - _s0) >> 1;","\t\t\tn1 = reg1[i];","\t\t\t_s1 = (n1 >> 7);","\t\t\tn1 = ((n1 ^ _s1) - _s1) >> 1;","","\t\t\tfor (j = 0; j < (1 << (EP_WIDTH - 2)); j++) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp48_exp_cyc_sps(fp48_t c, const fp48_t a, const int *b, size_t len,","int sign) {","size_t i, j, k, w = len;","fp48_t t, *u = RLC_ALLOCA(fp48_t, w);","","if (len == 0) {"],"label":0}
{"cve":"CVE-2021-3928","code_chunks":["\t{","\t    \t    \t    arridx = sp->ts_arridx;\t    \t    len = byts[arridx];\t\t    \t    arridx += sp->ts_curi;\t    ","\t    if (sp->ts_prefixdepth == PFD_PREFIXTREE)","\t    {","\t\t\t\tfor (n = 0; n < len && byts[arridx + n] == 0; ++n)","\t\t    ;","\t\tsp->ts_curi += n;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["if (length < 6)","return FALSE;","","Stream_Read_UINT16(s, compDeskSupportLevel); \/* compDeskSupportLevel (2 bytes) *\/"],"label":1}
{"cve":"CVE-2022-4254","code_chunks":["    ret = sss_certmap_init(mem_ctx, NULL, NULL, &ctx);","    if (ret != 0) {","        DEBUG(SSSDBG_OP_FAILURE, \"sss_certmap_init failed.\\n\");","        return NULL;","    }","","    ret = sss_certmap_add_rule(ctx, 10, \"KRB5:<ISSUER>.*\","],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSeqLengthsTensor,","                                          &seq_lengths_tensor));","  const TS* seq_lengths = GetTensorData<TS>(seq_lengths_tensor);","","  auto* params =","      reinterpret_cast<TfLiteReverseSequenceParams*>(node->builtin_data);","  int seq_dim = params->seq_dim;"],"label":0}
{"cve":"CVE-2020-35964","code_chunks":["                        viv->audio_sample = av_rescale_q(viv->sb_blocks[i].packet_offset, av_make_q(s->streams[1]->codecpar->sample_rate, 1), av_inv_q(s->streams[0]->time_base));","                        viv->audio_sample += s->streams[1]->codecpar->sample_rate;","            viv->current_sb_entry = 0;","            return 1;","        }","    }","    return 0;"],"label":0}
{"cve":"CVE-2018-5729","code_chunks":["filter = NULL;","st = ENOMEM;","goto cleanup;","}","","\/* get the current subtree list *\/"],"label":1}
{"cve":"CVE-2018-19841","code_chunks":["","if (meta_bc == 4) {","if (*dp++ != (csum & 0xff) || *dp++ != ((csum >> 8) & 0xff) || *dp++ != ((csum >> 16) & 0xff) || *dp++ != ((csum >> 24) & 0xff))","return FALSE;","}","else {"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["        ds->clock[idx] = NULL;","    }","    ssl_destroy(ds, idx);","}","","static void dtls_on_destroy(void *arg) {","    dtls_srtp *ds = (dtls_srtp *)arg;"],"label":0}
{"cve":"CVE-2016-9583","code_chunks":["for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <","picomp->numrlvls; ++rlvlno, ++pirlvl) {","xstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +","picomp->numrlvls - rlvlno - 1));","ystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +","picomp->numrlvls - rlvlno - 1));"],"label":1}
{"cve":"CVE-2023-28487","code_chunks":["const char *iolog_file;","const char *tty, *tsid = NULL;","char exit_str[(((sizeof(int) * 8) + 2) \/ 3) + 2];","char sessid[7], offsetstr[64] = \"\";","size_t len = 0;","int i;"],"label":1}
{"cve":"CVE-2021-3881","code_chunks":["    while (ret == MOBI_SUCCESS) {","        if (bitcount <= 0) {","            bitcount += 32;","            buffer = mobi_buffer_fill64(buf_in);","        }","        uint32_t code = (buffer >> bitcount) & 0xffffffffU;","        \/* lookup code in table1 *\/"],"label":0}
{"cve":"CVE-2019-20392","code_chunks":["","    if (node->schema->nodetype == LYS_LEAF) {","        leaf = (struct lys_node_leaf *)node->schema;","","        \/* get know if there is a default value *\/","        if (leaf->dflt) {","            \/* leaf has a default value *\/"],"label":0}
{"cve":"CVE-2023-4678","code_chunks":["\t\t\tbreak;","\t\t}","","\t\tpay_start = (u32) gf_bs_get_position(ctx->bs);","","\t\tif (ctx->buffer_too_small) break;","\t\tif (mhas_size > gf_bs_available(ctx->bs)) {"],"label":0}
{"cve":"CVE-2022-3016","code_chunks":["    static void","qf_free_items(qf_list_T *qfl)","{","    qfline_T\t*qfp;","    qfline_T\t*qfpnext;","    int\t\tstop = FALSE;",""],"label":0}
{"cve":"CVE-2022-4254","code_chunks":["&filter, &domains);","assert_int_equal(ret, 0);","assert_non_null(filter);","assert_string_equal(filter, \"rule94=<I>O=IPA.DEVEL,CN=Certificate Authority\"","\"<S>O=IPA.DEVEL,CN=ipa-devel.ipa.devel\");","assert_non_null(domains);","assert_string_equal(domains[0], \"test.dom\");"],"label":1}
{"cve":"CVE-2021-36080","code_chunks":["bit_chain_free (hdl_dat);                                           \\","return error;                                                         \\","}                                                                       \\","error = dwg_encode_##token##_private (dat, hdl_dat, str_dat, obj);        \\","if (error & DWG_ERR_VALUEOUTOFBOUNDS && hdl_dat != dat)                   \\","bit_chain_free (hdl_dat);                                               \\"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kOutputShapeTensor, &output_shape));","const TfLiteTensor* weights;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kWeightsTensor, &weights));","const TfLiteTensor* input;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["         | '**' vfpdef [',']","       )","       vfpdef: NAME","","    *\/","    int i, j, k, nposargs = 0, nkwonlyargs = 0;","    int nposdefaults = 0, found_default = 0;"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["                             CHANNEL_TO_STRING(idx), size));","#endif","","    \/* This is DTLS packet, let's process it. Note that if DTLS nego has","     * been completed, this may be a retransmission (e.g: remote didn't","     * receive our last handshake packet) or just a stray.","     *\/"],"label":0}
{"cve":"CVE-2016-10009","code_chunks":["\tfor (i = 0; i < sockets_alloc; i++) {","\t\tswitch (sockets[i].type) {","\t\t\tn = MAXIMUM(n, sockets[i].fd);","\t\t\tbreak;","\t\t\tbreak;","\t\t\tfatal(\"Unknown socket type %d\", sockets[i].type);","\t\t\tbreak;"],"label":0}
{"cve":"CVE-2018-20181","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"CVE-2022-2980","code_chunks":["","\t\t    if (diff > 0)\t\t\t\t\tVIsual = start_visual;","\t\t    else if (diff < 0)\t\t\t\tVIsual = end_visual;","\t\t    else\t\t\t\t\t    {","\t\t\tif (curwin->w_cursor.col <","\t\t\t\t\t(start_visual.col + end_visual.col) \/ 2)","\t\t\t    VIsual = end_visual;"],"label":0}
{"cve":"CVE-2018-20406","code_chunks":["","assert(min_size > 0);","","\/* Find the smallest valid table size >= min_size. *\/","while (new_size < min_size && new_size > 0)","new_size <<= 1;"],"label":1}
{"cve":"CVE-2018-8794","code_chunks":["uint32 length;","struct stream packet = *s;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","","if (!s_check_rem(s, length))"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","const int resource_id = std::hash<std::string>{}(params->table_name);","","TfLiteTensor* resource_handle_tensor;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, kResourceHandleTensor,","&resource_handle_tensor));","auto* resource_handle_data ="],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["|| (parser->m_protocolEncodingName[i] & ~0x7f) != 0) {","encodingBuf[0] = '\\0';","break;","}","encodingBuf[i] = (char)parser->m_protocolEncodingName[i];","}"],"label":1}
{"cve":"CVE-2018-15859","code_chunks":["*elem_rtrn = xkb_atom_text(ctx, expr->field_ref.element);","*field_rtrn = xkb_atom_text(ctx, expr->field_ref.field);","*index_rtrn = NULL;","return (*elem_rtrn != NULL && *field_rtrn != NULL);","*elem_rtrn = xkb_atom_text(ctx, expr->array_ref.element);","*field_rtrn = xkb_atom_text(ctx, expr->array_ref.field);","*index_rtrn = expr->array_ref.entry;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["bn_t n, _k, _m;","ep2_t t[5];","int i, u_i, offset;","int8_t jsf[2 * (RLC_FP_BITS + 1)];","size_t l;",""],"label":0}
{"cve":"CVE-2020-35538","code_chunks":["      upsample->upmethod = jsimd_h2v1_merged_upsample;","    else","      upsample->upmethod = h2v1_merged_upsample;","    if (cinfo->out_color_space == JCS_RGB565) {","      if (cinfo->dither_mode != JDITHER_NONE) {","        upsample->upmethod = h2v1_merged_upsample_565D;","      } else {"],"label":0}
{"cve":"CVE-2022-35981","code_chunks":["output_size[2] * output_size[1] * output_size[0];","for (int64_t i = 0; i < num_reshaped_cols; ++i) {","for (int64_t j = 0; j < output_size[3]; ++j) {","DCHECK_EQ(tensor_out_dup_mat(j, i), tensor_out_mat(j, i));","}","}",""],"label":1}
{"cve":"PYSEC-2022-43065","code_chunks":["return;","}","","seg_data.SetSize((int)data_size - 1024);","","ReadFromFile(seg_data.buffer, 0, data_size - 1024);",""],"label":1}
{"cve":"CVE-2022-24786","code_chunks":["void *buf,","pj_size_t *length)","{","pjmedia_rtcp_common *hdr;","unsigned len;","","PJ_ASSERT_RETURN(session && buf && length, PJ_EINVAL);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["ep2_t a[BENCH];","","BENCH_FEW(\"ep2_null\", ep4_null(a[i]), 1);","","BENCH_FEW(\"ep2_new\", ep4_new(a[i]), 1);","for (int i = 0; i < BENCH; i++) {"],"label":1}
{"cve":"CVE-2021-3984","code_chunks":["\tpos_T\t*tryposBrace = find_start_brace();","","\t\t\tif (tryposBrace != NULL","\t\t&& (trypos->lnum != tryposBrace->lnum","\t\t    ? trypos->lnum < tryposBrace->lnum","\t\t    : trypos->col < tryposBrace->col))","\t    trypos = NULL;"],"label":0}
{"cve":"CVE-2017-9949","code_chunks":["  grub_memset (&info, 0, sizeof (info));","  if (! node->inode_read)","    {","      grub_ext2_read_inode (c->data, node->ino, &node->inode);","      if (!grub_errno)","\tnode->inode_read = 1;","      grub_errno = GRUB_ERR_NONE;"],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["  const char **eventPP;","  const char **eventEndPP;","  enum XML_Content_Quant quant;","","  if (enc == parser->m_encoding) {","    eventPP = &parser->m_eventPtr;","    eventEndPP = &parser->m_eventEndPtr;"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["{","if(len<1) return;   string[len-1]=0;","if(len<3) return;   len = strnlen(string,len-1);","for(int i=len-1; i>=0; i--)","{","if(isspace(string[i]))"],"label":1}
{"cve":"CVE-2016-1000005","code_chunks":["Variant HHVM_FUNCTION(mcrypt_get_block_size, const String& cipher,","const Variant& module \/* = null_string *\/) {","MCRYPT td = mcrypt_module_open((char*)cipher.data(),","(char*)MCG(algorithms_dir).data(),","(char*)module.asCStrRef().data(),","(char*)MCG(modes_dir).data());"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","  auto* params =","      reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);","","  TfLiteTensor* out_tensor;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));","  int32_t* out_buf = out_tensor->data.i32;"],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["p     += 6;","s->off = strtoll(p, NULL, 10);","if ((slash = strchr(p, '\/')) && strlen(slash) > 0)","s->filesize = strtoll(slash + 1, NULL, 10);","}","if (s->seekable == -1 && (!s->is_akamai || s->filesize != 2147483647))"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, 0);","","switch (input->type) {","return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);"],"label":1}
{"cve":"CVE-2019-15165","code_chunks":["\t\tpcap_snprintf(errbuf, PCAP_ERRBUF_SIZE,","\t\t    \"unsupported pcapng savefile version %u.%u\",","\t\t    shbp->major_version, shbp->minor_version);","\t\tgoto fail;","\t}","\tp->version_major = shbp->major_version;","\tp->version_minor = shbp->minor_version;"],"label":0}
{"cve":"CVE-2019-12904","code_chunks":["* of look-up table are shared between processes.  Modifying counters also","* causes checksums for pages to change and hint same-page merging algorithm","* that these pages are frequently changing.  *\/","gcm_table.counter_head++;","gcm_table.counter_tail++;",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 DrawNineGridCacheSize;","UINT16 DrawNineGridCacheEntries;","WLog_INFO(TAG, \"DrawNineGridCacheCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 12)","return FALSE;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["}","}"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["\tfor (i = 0; i < check->all_attrs_nr; i++) {","\t\tconst char *name = check->all_attrs[i].attr->name;","\t\tconst char *value = check->all_attrs[i].value;","\t\tstruct attr_check_item *item;","\t\tif (value == ATTR__UNSET || value == ATTR__UNKNOWN)","\t\t\tcontinue;","\t\titem = attr_check_append(check, git_attr(name));"],"label":0}
{"cve":"CVE-2018-8796","code_chunks":["ber_parse_header(STREAM s, int tagval, int *length)","{","int tag, len;",""],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["    if (!init_types())","        return NULL;","","    isinstance = PyObject_IsInstance(ast, req_type[mode]);","    if (isinstance == -1)","        return NULL;","    if (!isinstance) {"],"label":0}
{"cve":"CVE-2018-20181","code_chunks":["ber_parse_header(STREAM s, int tagval, int *length)","{","int tag, len;",""],"label":1}
{"cve":"CVE-2018-20181","code_chunks":["{","color = CVAL(in);","*out = color;","out += 4;","indexw++;","collen--;"],"label":1}
{"cve":"CVE-2022-29181","code_chunks":["if (NIL_P(data)) {","rb_raise(rb_eArgError, \"data cannot be nil\");","}","if (!(int)RSTRING_LEN(data)) {","rb_raise(rb_eRuntimeError, \"data cannot be empty\");","}"],"label":1}
{"cve":"CVE-2018-14682","code_chunks":["# endif","# define TOLOWER(x) tolower(x)","#else","# define TOLOWER(x) (((x)<0||(x)>256)?(x):mspack_tolower_map[(x)])","* LC_CTYPE=en_GB.utf-8 perl -Mlocale -le 'print map{ord(lc chr).\",\"} 0..255'","*\/","static const unsigned char mspack_tolower_map[256] = {"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["      sb.append(str->data(), size);","      sb.append(\"\\\";\");","      return sb.detach();","    }","      return s_Res;","","      break;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["auto* params =","reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2017-11719","code_chunks":["if (header_prefix == DNXHD_HEADER_HR2) {","ctx->data_offset = 0x170 + (ctx->mb_height << 2);","} else {","if (ctx->mb_height > 68 ||","(ctx->mb_height << frame->interlaced_frame) > (ctx->height + 15) >> 4) {"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["bool IsPadOpSupported(const TfLiteRegistration* registration,","const TfLiteNode* node, TfLiteContext* context) {","const TfLiteTensor* padding = GetInput(context, node, 1);","if (!IsConstantTensor(padding)) {","TF_LITE_KERNEL_LOG(context,","\"%s: Only constant padding is supported for PAD.\","],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* resolved_axis = GetTemporary(context, node, \/*index=*\/1);","if (IsDynamicTensor(op_context->output)) {","TF_LITE_ENSURE_OK(context,","ResizeTempAxis(context, op_context, resolved_axis));"],"label":1}
{"cve":"CVE-2023-25667","code_chunks":["w = width;","h = height;","c = channels;","return new uint8[frame_cnt * height * width * channels];","},","&error_string));","ASSERT_NE(imgdata, nullptr);"],"label":1}
{"cve":"CVE-2017-14502","code_chunks":["        \/* Calculate File CRC. *\/","        rar->crc_calculated = crc32(rar->crc_calculated, *buff,","          (unsigned)*size);","        rar->unp_offset = 0;","        return (ARCHIVE_OK);","      }","      *buff = NULL;"],"label":0}
{"cve":"CVE-2018-20176","code_chunks":["ber_parse_header(STREAM s, int tagval, uint32 *length)","{","int tag, len;",""],"label":0}
{"cve":"CVE-2018-20786","code_chunks":["","    static int","create_pty_only(term_T *term, jobopt_T *opt)","{","    if (create_vterm(term, term->tl_rows, term->tl_cols) == FAIL)","\treturn FAIL;",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context, ResizeOutput(context, node));"],"label":1}
{"cve":"CVE-2023-41337","code_chunks":["int decode_session_identifier(uint64_t *issued_at, ptls_iovec_t *psk, uint32_t *ticket_age_add, ptls_iovec_t *server_name,","uint16_t *key_exchange_id, uint16_t *csid, ptls_iovec_t *negotiated_protocol, const uint8_t *src,","const uint8_t *const end)","{"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["unsigned char *sCur = (unsigned char*)(*ppEexecBuffer);","while( sCur < (unsigned char*)(*ppEexecBuffer) + nLen && ( ' ' == *sCur || '\\t' == *sCur || '\\r' == *sCur || '\\n' == *sCur ) )","{","++sCur;","--nLen;","}"],"label":0}
{"cve":"CVE-2017-15672","code_chunks":["} else {","const uint8_t *p = c->bytestream_end;","for (f->slice_count = 0;","f->slice_count < MAX_SLICES && 3 < p - c->bytestream_start;","f->slice_count++) {","int trailer = 3 + 5*!!f->ec;","int size = AV_RB24(p-trailer);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["            Py_ssize_t i;","            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"With field \\\"items\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            items = _Py_asdl_seq_new(len, arena);"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["WLog_INFO(TAG, \"BrushCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 8)","return FALSE;","","Stream_Read_UINT32(s, brushSupportLevel); \/* brushSupportLevel (4 bytes) *\/"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const int num_dims = NumDimensions(input);","TF_LITE_ENSURE(context, num_dims >= 2);","const TfLiteTensor* fft_length;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFftLengthTensor, &fft_length));","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TF_LITE_ENSURE(context, IsPowerOfTwo(fft_length_data[0]));"],"label":0}
{"cve":"CVE-2023-52076","code_chunks":["extract_one_file(EpubDocument* epub_document,GError ** error)","{","GFile * outfile ;","gsize writesize = 0;"],"label":1}
{"cve":"CVE-2020-28896","code_chunks":["\/* RFC2595 demands we recheck CAPABILITY after TLS completes. *\/","if (imap_exec(adata, \"CAPABILITY\", IMAP_CMD_NO_FLAGS))","goto bail;","}","}","}"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["static const struct git_attr *git_attr_internal(const char *name, size_t namelen)","{","struct git_attr *a;",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","{","node->temporaries->data[0] = op_data->scratch_tensor_index;","TfLiteTensor* scratch_buffer = GetTemporary(context, node, \/*index=*\/0);","TfLiteIntArray* scratch_buffer_size = TfLiteIntArrayCreate(lhs_rank);","for (int i = 0; i < lhs_rank - 2; ++i) {","scratch_buffer_size->data[i] = lhs->dims->data[i];"],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t\top->len += n;","\t\t\t\t}","\t\t\t\tn = read_u32_leb128 (buf + op->len, buf + buf_len, &def);","\t\t\t\tif (!(n > 0 && n + op->len < buf_len)) {","\t\t\t\t\tgoto beach;"],"label":0}
{"cve":"CVE-2022-35970","code_chunks":["    OP_REQUIRES(","        context, TensorShapeUtils::IsVector(max.shape()),","        InvalidArgument(\"`max` must be rank 1 but is rank \", max.dims()));","    OP_REQUIRES(context, max.dim_size(0) == depth,","                InvalidArgument(\"max has incorrect size, expected \", depth,","                                \" was \", max.dim_size(0)));",""],"label":0}
{"cve":"CVE-2017-14175","code_chunks":["image->colormap[1].green=(Quantum) 0;","image->colormap[1].blue=(Quantum) 0;","if (image_info->ping != MagickFalse)","{","(void) CloseBlob(image);"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["sp->in_buffer_file_pos=0;","else","{","sp->in_buffer_file_togo=sp->tif->tif_dir.td_stripbytecount[sp->in_buffer_next_strile];","if (sp->in_buffer_file_togo==0)","sp->in_buffer_file_pos=0;","else if (sp->in_buffer_file_pos+sp->in_buffer_file_togo>sp->file_size)"],"label":1}
{"cve":"CVE-2020-11085","code_chunks":["CLIPRDR_FORMAT* formats = NULL;","UINT error = CHANNEL_RC_OK;","","asciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;","","index = 0;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["Py_XSETREF(tok->decoding_readline, readline);","","if (pos > 0) {","PyObject *bufobj = PyObject_CallObject(readline, NULL);","if (bufobj == NULL)","return 0;","Py_DECREF(bufobj);"],"label":1}
{"cve":"CVE-2020-8037","code_chunks":["\tlength -= hdrlength;","\tp += hdrlength;","","\tswitch (ptype) {","\t\tip_print(p, length);","\t\tbreak;","\t\tip6_print(ndo, p, length);"],"label":0}
{"cve":"CVE-2020-16587","code_chunks":["","","","if(partNumber<0 || partNumber> static_cast<int>(parts.size()))","{","throw IEX_NAMESPACE::IoExc(\"part number out of range\");","}"],"label":1}
{"cve":"CVE-2022-24949","code_chunks":["FATAL_FAIL(fd);","initServerSocket(fd);","local.sun_family = AF_UNIX; \/* local is declared before socket() ^ *\/","strcpy(local.sun_path, pipePath.c_str());","unlink(local.sun_path);","","FATAL_FAIL(::bind(fd, (struct sockaddr*)&local, sizeof(sockaddr_un)));"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"PYSEC-2021-744","code_chunks":["CHECK_GE(in.dims(), 2);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","TfLiteTensor* hits = GetOutput(context, node, 1);","const TfLiteTensor* lookup = GetInput(context, node, 0);","const TfLiteTensor* key = GetInput(context, node, 1);","const TfLiteTensor* value = GetInput(context, node, 2);",""],"label":1}
{"cve":"CVE-2021-3995","code_chunks":["\t}","","\t\/*","\t * Check if this is a fuse mount for the current user,","\t * if so then unmounting is allowed","\t *\/","\tif (is_fuse_usermount(cxt, &rc)) {"],"label":0}
{"cve":"CVE-2022-35940","code_chunks":["return 0;","}","return (std::is_integral<T>::value","? ((std::abs(limit - start) + std::abs(delta) - 1) \/","std::abs(delta))",": std::ceil(std::abs((limit - start) \/ delta)));"],"label":1}
{"cve":"CVE-2020-15888","code_chunks":["    checkstackGCp(L, nextra, where);  \/* ensure stack space *\/","    L->top = where + nextra;  \/* next instruction will need top *\/","  }","  for (i = 0; i < wanted && i < nextra; i++)","    setobjs2s(L, where + i, ci->func - nextra + i);","  for (; i < wanted; i++)   \/* complete required results with nil *\/","    setnilvalue(s2v(where + i));"],"label":0}
{"cve":"CVE-2023-28095","code_chunks":["address_str=get_adv_host(send_sock);","","if (hp && hp->port && hp->port->len)","port_str=hp->port;","else","port_str=get_adv_port(send_sock);"],"label":1}
{"cve":"CVE-2017-14175","code_chunks":["if (version == 10)","for (i=0; i < (ssize_t) (bytes_per_line*image->rows); (i+=2))","{","value=XBMInteger(image,hex_digits);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        }","","        for_ch = CHILD(sync_n, 1);","        t = ast_for_exprlist(c, for_ch, Store);","        if (!t)","            return NULL;","        expression = ast_for_expr(c, CHILD(sync_n, 3));"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(values, i, val);","            }","            Py_CLEAR(tmp);","        }"],"label":0}
{"cve":"CVE-2019-11502","code_chunks":["static void setup_private_mount(const char *snap_name)","{","uid_t uid = getuid();","gid_t gid = getgid();","char tmpdir[MAX_BUF] = { 0 };","","sc_must_snprintf(tmpdir, sizeof(tmpdir), \"\/tmp\/snap.%s_XXXXXX\", snap_name);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input_resource_id_tensor =","GetInput(context, node, kInputResourceIdTensor);","const int resource_id = input_resource_id_tensor->data.i32[0];","","const TfLiteTensor* key_tensor = GetInput(context, node, kKeyTensor);","const TfLiteTensor* value_tensor = GetInput(context, node, kValueTensor);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tif (len != 8 * RLC_FP_BYTES) {","\t\tRLC_THROW(ERR_NO_BUFFER);","\t\treturn;","\t}","\tfp4_read_bin(a[0], bin, 4 * RLC_FP_BYTES);","\tfp4_read_bin(a[1], bin + 4 * RLC_FP_BYTES, 4 * RLC_FP_BYTES);","}"],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["{","HTTPContext *s = h->priv_data;","\/* until next metadata packet *\/","int remaining = s->icy_metaint - s->icy_data_read;",""],"label":1}
{"cve":"CVE-2017-17081","code_chunks":["                            oys - dyys + dyxs * (x + 2),","                            oys - dyys + dyxs * (x + 3) };","","        for (y = 0; y < h; y++) {","            __asm__ volatile (","                \"movq      %0, %%mm4    \\n\\t\"","                \"movq      %1, %%mm5    \\n\\t\""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const int scratch_dimension[2] = {n_batch, n_cell};","if (!TfLiteIntArrayEqualsArray(scratch_tensor->dims, 2,","scratch_dimension)) {","TfLiteIntArray* scratch_buffer_size = TfLiteIntArrayCreate(2);","scratch_buffer_size->data[0] = n_batch;","scratch_buffer_size->data[1] = n_cell;"],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["assertx(isStringType(type(file_name)));","strncpy(frame->file_name,","val(file_name).pstr->data(),","std::min(val(file_name).pstr->size(), strobelight::kFileNameMax));","frame->file_name[strobelight::kFileNameMax - 1] = '\\0';","}",""],"label":1}
{"cve":"CVE-2020-14401","code_chunks":["case 1: pixel_value = *((unsigned char *)srcptr2);  break;","\/* fixme: endianness problem? *\/","for (z = 0; z < bytesPerPixel; z++)","pixel_value += (srcptr2[z] << (8 * z));","break;","}","\/*"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {","return 1;"],"label":1}
{"cve":"CVE-2022-24950","code_chunks":["  initServerSocket(fd);","  local.sun_family = AF_UNIX; \/* local is declared before socket() ^ *\/","  strncpy(local.sun_path, pipePath.c_str(), sizeof(local.sun_path));","  unlink(local.sun_path);","","  FATAL_FAIL(::bind(fd, (struct sockaddr*)&local, sizeof(sockaddr_un)));","  ::listen(fd, 5);"],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["    return \"\\\\xF4\";","    return \"\\\\xF5\";","    return \"\\\\xF6\";","    return \"\\\\xF7\";","    return \"\\\\xF8\";","    return \"\\\\xF9\";","    return \"\\\\xFA\";"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":[],"label":1}
{"cve":"CVE-2020-1916","code_chunks":["}","","string translated = translate_stack(transport->getParam(\"stack\").c_str(),","transport->getParam(\"bare\").empty());","transport->sendString(translated);","break;"],"label":1}
{"cve":"CVE-2021-3331","code_chunks":["}","","bool HasPassword = (UserInfo.Pos(L':') > 0);","UnicodeString RawUserName = CutToChar(UserInfo, L':', false);","UserName = DecodeUrlChars(RawUserName);",""],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["    op_tp.start();","  }","  ~ServerDispatcher() override {","    op_tp.stop();","  }","  bool ms_can_fast_dispatch_any() const override { return true; }","  bool ms_can_fast_dispatch(const Message *m) const override {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["GetOptionalInputTensor(context, node, kFwInputToInputWeightsTensor);","const TfLiteTensor* fw_input_to_forget_weights;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFwInputToForgetWeightsTensor,","&fw_input_to_forget_weights));","const TfLiteTensor* fw_input_to_cell_weights;"],"label":0}
{"cve":"CVE-2021-36978","code_chunks":["","QTC::TC(\"libtests\", \"Pl_ASCII85Decoder partial flush\",","(this->pos == 5) ? 0 : 1);","getNext()->write(outbuf, this->pos - 1);","","this->pos = 0;"],"label":1}
{"cve":"CVE-2018-16229","code_chunks":["ND_TCHECK2(*option, optlen);","","if (*option >= 128) {","ND_PRINT((ndo, \"CCID option %d\", *option));","switch (optlen) {","ND_PRINT((ndo, \" %u\", EXTRACT_16BITS(option + 2)));"],"label":1}
{"cve":"CVE-2020-35538","code_chunks":["jpeg_start_output(j_decompress_ptr cinfo, int scan_number)","{","  if (cinfo->global_state != DSTATE_BUFIMAGE &&","      cinfo->global_state != DSTATE_PRESCAN)","    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);","  \/* Limit scan number to valid range *\/","  if (scan_number <= 0)"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  const TfLiteEvalTensor* input =","      tflite::micro::GetEvalInput(context, node, kInputTensor);","  TfLiteEvalTensor* output =","      tflite::micro::GetEvalOutput(context, node, kOutputTensor);","","                            const float epsilon = 1e-6f;","  if (output->type == kTfLiteFloat32) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["return EvalFloat(input, input_weights, recurrent_weights, bias, params,","hidden_state, output);","case kTfLiteInt8: {","TfLiteTensor* input_quantized = GetTemporary(context, node, 0);"],"label":1}
{"cve":"CVE-2020-36177","code_chunks":["* saltLen       Length of salt to put in padding.","* bits          Length of key in bits.","* heap          Used for dynamic memory allocation.","* returns       the sum of salt length and SHA-256 digest size on success.","*               Otherwise, PSS_SALTLEN_E for an incorrect salt length,","*               WC_KEY_SIZE_E for an incorrect encoded message (EM) size"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["node->temporaries->data[kRecoveredCellWeights] =","scratch_tensor_index + kRecoveredCellWeights;","TfLiteTensor* recovered_cell_weights =","GetTemporary(context, node, kRecoveredCellWeights);","recovered_cell_weights->type = kTfLiteFloat32;","recovered_cell_weights->allocation_type = kTfLiteArenaRw;"],"label":1}
{"cve":"CVE-2021-37637","code_chunks":["if (DataTypeCanUseMemcpy(component.dtype())) {","const TensorBuffer* buffer = DMAHelper::buffer(&component);","memcpy(position, buffer->data(), buffer->size());","metadata->set_tensor_size_bytes(buffer->size());","} else {","TensorProto& proto = non_memcpy_components[non_memcpy_component_index++];"],"label":1}
{"cve":"CVE-2018-10861","code_chunks":["{","op->mark_osdmon_event(__func__);","MPoolOp *m = static_cast<MPoolOp*>(op->get_req());","","if (enforce_pool_op_caps(op)) {","return true;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["      const int input_offset_dims[1] = {height};","      if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1,","                                     input_offset_dims)) {","        TfLiteIntArray* input_offsets_size = TfLiteIntArrayCreate(1);","        input_offsets_size->data[0] = input_offset_dims[0];","        TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_offsets,","                                                         input_offsets_size));"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"AsyncFunctionDef field \\\"body\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(body, i, val);","            }"],"label":0}
{"cve":"CVE-2020-11939","code_chunks":["u_int32_t len = ntohl(*(u_int32_t*)&packet->payload[offset]);","offset += 4;","","\/* -1 for ';' *\/","if((offset >= packet->payload_packet_len) || (len >= packet->payload_packet_len-offset-1))","goto invalid_payload;"],"label":0}
{"cve":"CVE-2019-19947","code_chunks":["\tstruct kvaser_usb_net_priv *priv;","\tu8 channel = cmd->u.simple.channel;","","\tif (channel >= dev->nchannels) {","\t\tdev_err(&dev->intf->dev,","\t\t\t\"Invalid channel number (%d)\\n\", channel);","\t\treturn;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp6_read_bin(fp6_t a, const uint8_t *bin, int len) {","if (len != 6 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","  TfLiteQuantizationParams quantized;","  ASSERT_EQ(interpreter.SetTensorParametersReadWrite(0, kTfLiteFloat32, \"\", {3},","                                                     quantized),","            kTfLiteOk);","  ASSERT_EQ(interpreter.SetTensorParametersReadWrite(1, kTfLiteFloat32, \"\", {3},","                                                     quantized),"],"label":0}
{"cve":"CVE-2022-35972","code_chunks":["","AddInputFromArray<qint32>(TensorShape({value_count}),","{-(1 << 23), 0, (1 << 23)});","AddInputFromArray<float>(TensorShape({1}), {-256.0f});","AddInputFromArray<float>(TensorShape({1}), {256.0f});"],"label":1}
{"cve":"PYSEC-2021-242","code_chunks":["TfLiteIntArray* TfLiteIntArrayCreate(int size) {","TfLiteIntArray* ret =","(TfLiteIntArray*)malloc(TfLiteIntArrayGetSizeInBytes(size));","ret->size = size;","return ret;","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["output->type = input->type;","","return context->ResizeTensor(context, output,"],"label":1}
{"cve":"CVE-2016-9843","code_chunks":["}","","buf4 = (const z_crc_t FAR *)(const void FAR *)buf;","buf4--;","while (len >= 32) {","DOBIG32;","len -= 32;"],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["    iCanonCurFocal = 30;","    iCanonLensID = 234;","    iCanonMinFocal = 236;","    iCanonMaxFocal = 238;","    break;","    iCanonCurFocal = 35;","    iCanonLensID = 295;"],"label":0}
{"cve":"CVE-2016-5356","code_chunks":["{","int num_items_scanned, i;","unsigned int bytes[16];","","num_items_scanned = sscanf(rec, \"%02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x\",","&bytes[0], &bytes[1], &bytes[2], &bytes[3],"],"label":1}
{"cve":"CVE-2017-16818","code_chunks":["ceph_assert(shift > 0);"],"label":1}
{"cve":"CVE-2020-13396","code_chunks":["{","SECURITY_STATUS status = SEC_E_INVALID_TOKEN;","wStream* s;","size_t length;","size_t StartOffset;","size_t PayloadOffset;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["","\tif (bn_is_zero(d)) {","\t\treturn fp24_exp_cyc(e, a, b);","\t}","","\tfp24_null(r);","\tfp24_null(s);"],"label":0}
{"cve":"CVE-2020-15473","code_chunks":["int8_t hmac_size;","int8_t failed = 0;","\/* No u_ *\/int16_t ovpn_payload_len = packet->payload_packet_len;","","if(ovpn_payload_len >= 40) {","if(packet->tcp != NULL)"],"label":0}
{"cve":"PYSEC-2020-282","code_chunks":["                        Tensor* output_debug_info_t = nullptr;","    OP_REQUIRES_OK(","        context, context->allocate_output(\"examples_debug_outputs_serialized\",","                                          {batch_size}, &output_debug_info_t));","        auto output_debug_info = output_debug_info_t->flat<tstring>();","    const int32 last_tree = resource->num_trees() - 1;",""],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["        *out = ClassDef(name, bases, keywords, body, decorator_list, lineno,","                        col_offset, arena);","        if (*out == NULL) goto failed;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)Return_type);","    if (isinstance == -1) {"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2020-21674","code_chunks":["as->length = p - as->s;","\/* Re-allocate buffer for MBS. *\/","if (archive_string_ensure(as,","as->length + len * 2 + 1) == NULL)","return (-1);","p = as->s + as->length;","end = as->s + as->buffer_length - MB_CUR_MAX -1;"],"label":1}
{"cve":"CVE-2022-40138","code_chunks":["CodeBlock *newCodeBlock) {","if (LLVM_UNLIKELY(","newCodeBlock->lazyCompile(*this) == ExecutionStatus::EXCEPTION)) {","return ExecutionStatus::EXCEPTION;","}",""],"label":0}
{"cve":"CVE-2016-10161","code_chunks":["\t}","","\tlen3 = strspn(class_name, \"0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\\");","\tif (len3 != len)","\t{","\t\t*p = YYCURSOR + len3 - len;","\t\treturn 0;"],"label":0}
{"cve":"CVE-2022-2288","code_chunks":["\t    !gui.in_use &&","# endif","\t\tau_has_group((char_u *)\"FileExplorer\"))","\t{","\t    \t    \t    if (*eap->arg == NUL || !mch_isdir(eap->arg))","\t\teap->arg = dot_path;","\t}"],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["cc += 1 + IMM2_SIZE;","break;","","#if defined SUPPORT_UNICODE || PCRE2_CODE_UNIT_WIDTH != 8","i = (*cc == OP_XCLASS) ? GET(cc, 1) : 1 + 32 \/ (int)sizeof(PCRE2_UCHAR);","#else"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* transposed_weights =","GetTemporary(context, node, user_data->transposed_weights_index);","if (!IsConstantTensor(weights)) {","SetTensorToDynamic(transposed_weights);","} else {"],"label":1}
{"cve":"CVE-2021-32843","code_chunks":["max = vc->vc_cfgsize ? vc->vc_cfgsize : 0x100000000;","if ((newoff + ((unsigned) size)) > max)","goto bad;","error = (*vc->vc_cfgread)(DEV_SOFTC(vs), ((int) newoff), size, &value);","if (!error)","goto done;","}"],"label":1}
{"cve":"PYSEC-2020-125","code_chunks":["","","auto DoWork = [samples_per_alpha, num_alphas, &random, samples_flat,","alpha_flat](int start_output, int limit_output) {","","using Eigen::numext::exp;","using Eigen::numext::log;"],"label":1}
{"cve":"CVE-2019-13223","code_chunks":["      float acc = 0;","      for (j=0; j < n2; ++j)","         acc += x[j] * mcos[(2 * i + 1 + n2)*(2*j+1) & nmask];","      buffer[i] = acc;","   }","   free(x);","}"],"label":0}
{"cve":"CVE-2022-31307","code_chunks":["return NJS_DONE;","}","","return NJS_ERROR;","}",""],"label":1}
{"cve":"CVE-2018-5805","code_chunks":["\t top_margin = table[i].tm;","\twidth  = raw_width - left_margin - table[i].rm;","\theight = raw_height - top_margin - table[i].bm;","\tfilters = 0x1010101 * table[i].cf;","\tcolors = 4 - !((filters & filters >> 1) & 0x5555);","\tload_flags = table[i].lf;","\tswitch (tiff_bps = (fsize-data_offset)*8 \/ (raw_width*raw_height)) {"],"label":0}
{"cve":"CVE-2020-14147","code_chunks":["if (!isdigit(**fmt))  \/* no number? *\/","return df;  \/* return default value *\/","else {","int a = 0;","do {","if (a > (INT_MAX \/ 10) || a * 10 > (INT_MAX - (**fmt - '0')))"],"label":0}
{"cve":"CVE-2016-3134","code_chunks":["","\txt_unregister_targets(arpt_builtin_tg, ARRAY_SIZE(arpt_builtin_tg));","\tunregister_pernet_subsys(&arp_tables_net_ops);","\treturn ret;","}","","static void __exit arp_tables_fini(void)"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT32 maxRequestSize;","WLog_INFO(","TAG, \"MultifragmentUpdateCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));","","if (Stream_GetRemainingLength(s) < 4)"],"label":0}
{"cve":"CVE-2018-18314","code_chunks":["* ']'; the next character should be the ')' *\/","RExC_parse++;","assert(UCHARAT(RExC_parse) == ')');","","\/* Then the ')' matching the original '(' handled by this","* case: statement *\/"],"label":1}
{"cve":"CVE-2018-1129","code_chunks":["__le32 middle_crc;","__le32 data_crc;","} __attribute__ ((packed)) sigblock = {","1, mswab(AUTH_ENC_MAGIC), mswab<uint32_t>(4*4),","mswab<uint32_t>(header.crc), mswab<uint32_t>(footer.front_crc),","mswab<uint32_t>(footer.middle_crc), mswab<uint32_t>(footer.data_crc)"],"label":1}
{"cve":"CVE-2023-36054","code_chunks":["}","if (!xdr_krb5_kvno(xdrs, &objp->kvno)) {","return FALSE;","}","return TRUE;","}"],"label":1}
{"cve":"CVE-2022-1587","code_chunks":["delayed_mem_copy_status status;","PCRE2_SPTR alternative;","sljit_sw private_srcw[2];","sljit_sw shared_srcw[3];","sljit_sw kept_shared_srcw[2];","int private_count, shared_count, kept_shared_count;"],"label":0}
{"cve":"CVE-2017-9732","code_chunks":["\t\/* We have the complete length *\/","\tlen = ntohl(*(uint32_t *)len_buf);","","\t\/*","\t * We make sure recvd length is reasonable, allowing for some","\t * slop in enc overhead, beyond the actual maximum number of","\t * bytes of decrypted payload."],"label":0}
{"cve":"CVE-2018-10540","code_chunks":["}","else {","int bytes_to_copy = (int)(((dff_chunk_header.ckDataSize) + 1) & ~(int64_t)1);","char *buff = malloc (bytes_to_copy);","","if (debug_logging_mode)","error_line (\"extra unknown chunk \\\"%c%c%c%c\\\" of %d bytes\","],"label":1}
{"cve":"CVE-2018-11377","code_chunks":["INST_HANDLER (sbrx) {\t\/\/ SBRC Rr, b","int b = buf[0] & 0x7;","int r = ((buf[0] >> 4) & 0xf) | ((buf[1] & 0x01) << 4);","RAnalOp next_op;","","avr_op_analyze (anal,","&next_op,"],"label":1}
{"cve":"CVE-2016-5351","code_chunks":["","\/* get and check the body length (IEEE 802.1X-2004, pg. 25) *\/","bodyLength=pntoh16(data+offset+2);","if ((tot_len-offset-4) < bodyLength) { \/* Only check if frame is long enough for eapol header, ignore tailing garbage, see bug 9065 *\/","AIRPDCAP_DEBUG_PRINT_LINE(\"AirPDcapScanForKeys\", \"EAPOL body too short\", AIRPDCAP_DEBUG_LEVEL_3);","return AIRPDCAP_RET_NO_VALID_HANDSHAKE;","}"],"label":1}
{"cve":"CVE-2017-16909","code_chunks":["LIBRAW_WARN_FALLBACK_TO_AHD = 1 << 15"],"label":1}
{"cve":"CVE-2020-1899","code_chunks":["const char* p = m_buf;","assertx(p <= m_end);","int total = 0;","if (*p == 'S' && type() == VariableUnserializer::Type::APCSerialize) {","total = 2 + 8 + 1;","if (p + total > m_end) return false;","p++;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["size_t start, end, len;","UINT16 count = numberCapabilities;","","start = Stream_GetPosition(s);","while (numberCapabilities > 0 && Stream_GetRemainingLength(s) >= 4)","{"],"label":0}
{"cve":"CVE-2016-8649","code_chunks":[],"label":1}
{"cve":"CVE-2023-4682","code_chunks":["}","bytes -= todo;","nr    += todo;","AVI->track[AVI->aptr].audio_posb += todo;","}","","return nr;"],"label":1}
{"cve":"CVE-2018-8792","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"CVE-2018-14882","code_chunks":["{","const struct nd_rpl_dao *dao = (const struct nd_rpl_dao *)bp;","const char *dagid_str = \"<elided>\";","","ND_TCHECK(*dao);","if (length < ND_RPL_DAO_MIN_LEN)"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["gt_exp(hs[i], gt, x[i]);","}","","bn_rand_mod(d, n);"],"label":1}
{"cve":"CVE-2019-20636","code_chunks":["\t\t\t\tint add_cr)","{","\tint len;","","\tlen = snprintf(buf, max(size, 0),","\t\t       \"input:b%04Xv%04Xp%04Xe%04X-\",","\t\t       id->id.bustype, id->id.vendor,"],"label":0}
{"cve":"CVE-2022-28073","code_chunks":["\t\t}","\t} break;","\t\t__tableRegList (core, core->anal->reg, str + 1);","\t\tbreak;","\t\tr_reg_arena_zero (core->anal->reg);","\t\tbreak;","\t\t{"],"label":0}
{"cve":"PYSEC-2022-88","code_chunks":["}","","const NodeDef* input = node_map_->GetNode(NodeName(node.input(0)));","CHECK(input != nullptr) << \"node = \" << node.name()","<< \" input = \" << node.input(0);"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["  assignments_.insert({worker_address, new_stream_index});","  VLOG(1) << \"creating stream \" << new_stream_index","          << \" and assigning it to worker \" << worker_address;","","  return new_stream_index;","}",""],"label":0}
{"cve":"CVE-2016-2324","code_chunks":["static void mark_commit(struct commit *c, void *data)","{","mark_object(&c->object, NULL, NULL, data);","}","","struct recent_data {"],"label":1}
{"cve":"CVE-2020-1898","code_chunks":["inline typename V::VariantType FBUnserializer<V>::unserializeThing() {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2023-45145","code_chunks":["if (bind(s,sa,len) == -1) {","anetSetError(err, \"bind: %s\", strerror(errno));","close(s);","return ANET_ERR;","}",""],"label":0}
{"cve":"CVE-2020-35538","code_chunks":["my_upsample_ptr upsample;","","upsample = (my_upsample_ptr)","(*cinfo->mem->alloc_small) ((j_common_ptr)cinfo, JPOOL_IMAGE,","sizeof(my_upsampler));","cinfo->upsample = (struct jpeg_upsampler *)upsample;"],"label":1}
{"cve":"CVE-2023-22742","code_chunks":["LIBSSH2_SESSION *session,","LIBSSH2_KNOWNHOSTS *known_hosts,","git_transport_certificate_check_cb check_cb,","void *check_cb_payload,","const char *host,","int port)"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","            #define TF_LITE_SLICE(data_type, kernel_type)                                  \\","  {                                                                            \\","    TF_LITE_ENSURE_EQ(context, begins.size(), 4);                              \\","    TF_LITE_ENSURE_EQ(context, sizes.size(), 4);                               \\","    tflite::SliceParams op_params;                                             \\","    op_params.begin_count = 4;                                                 \\"],"label":0}
{"cve":"CVE-2020-36315","code_chunks":["\t\t\t\t\t\tresult = RLC_OK;","\t\t\t\t\t}","\t\t\t\t\tbn_read_bin(m, h2, RLC_MD_LEN);","\t\t\t\t\t*p_len = k_len - RLC_MD_LEN;","\t\t\t\t}","\t\t\t\tbreak;","\t\t}"],"label":0}
{"cve":"CVE-2023-30188","code_chunks":["LOGGER_SPEED_START","","if (retValue)","retValue->Clear();","","std::string commandA = U_TO_UTF8(command);"],"label":0}
{"cve":"CVE-2019-3560","code_chunks":["","    if (buf.empty() || !cursor.canAdvance(kPlaintextHeaderSize)) {","      return folly::none;","    }","","    TLSMessage msg;","    msg.type = static_cast<ContentType>(cursor.readBE<ContentTypeType>());"],"label":0}
{"cve":"CVE-2017-12667","code_chunks":["static Image *ReadMATImage(const ImageInfo *image_info,ExceptionInfo *exception)","{","Image *image, *image2=NULL,","*rotated_image;","register Quantum *q;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["goto failed;","}","asdl_seq_SET(body, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2017-12664","code_chunks":["    one=1;","    if ((bits_per_pixel < 16) &&","        (AcquireImageColormap(image,one << bits_per_pixel,exception) == MagickFalse))","      ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");","    GetPixelInfo(image,&transpix);","    if (bits_per_pixel == 16)  \/* Direct Color *\/","      {"],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["   *\/","  if (errnum < -10000) {","    errnum = (-errnum) - 10000;","#if HAVE_HSTRERROR","    return String(hstrerror(errnum), CopyString);","#endif","    return folly::format(\"Host lookup error {}\", errnum).str();"],"label":0}
{"cve":"CVE-2021-3881","code_chunks":["if (depth > MOBI_HUFFMAN_MAXDEPTH) {","debug_print(\"Too many levels of recursion: %zu\\n\", depth);","return MOBI_DATA_CORRUPT;","}","MOBI_RET ret = MOBI_SUCCESS;","int8_t bitcount = 32;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);","","TfLiteTensor* out_tensor;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));","int32_t* out_buf = out_tensor->data.i32;","const TfLiteTensor* hash;"],"label":0}
{"cve":"CVE-2020-9274","code_chunks":["    char alias[MAXALIASLEN + 1U];","    char dir[PATH_MAX + 1U];","","    if ((fp = fopen(ALIASES_FILE, \"r\")) == NULL) {","        return 0;","    }","    while (fgets(alias, sizeof alias, fp) != NULL) {"],"label":0}
{"cve":"CVE-2021-41131","code_chunks":["  from tuf.client.updater import Updater","","  # The only other module the client interacts with is 'tuf.settings'.  The","  # client accesses this module solely to set the repository directory.","  # This directory will hold the files downloaded from a remote repository.","  from tuf import settings","  settings.repositories_directory = 'local-repository'"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","","return context->ResizeTensor(context, output,"],"label":1}
{"cve":"CVE-2020-15212","code_chunks":["TfLiteTensor* output) {","int max_index = -1;","const int segment_id_size = segment_ids->dims->data[0];","if (segment_id_size > 0) {","max_index = segment_ids->data.i32[segment_id_size - 1];","}"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["switch(state) {","{","std::lock_guard<std::mutex> l(write_lock);","if (!outcoming_bl.length()) {","assert(state_after_send);","state = state_after_send;"],"label":0}
{"cve":"CVE-2018-14357","code_chunks":[" * information, even that not desired by buffy"," *\/","static void cmd_parse_status(struct ImapData *idata, char *s)","{","  char *value = NULL;","  struct Buffy *inc = NULL;","  struct ImapMbox mx;"],"label":0}
{"cve":"CVE-2018-12559","code_chunks":["static inline bool isMountable(const RemoteFsDevice::Details &d)","{","return RemoteFsDevice::constSshfsProtocol==d.url.scheme();","}","","QList<Device *> RemoteFsDevice::loadAll(MusicLibraryModel *m)"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\tRLC_THROW(ERR_NO_BUFFER);","\t\treturn;","\t}","\tfp2_read_bin(a[0], bin, 2 * RLC_FP_BYTES);","\tfp2_read_bin(a[1], bin + 2 * RLC_FP_BYTES, 2 * RLC_FP_BYTES);","\tfp2_read_bin(a[2], bin + 4 * RLC_FP_BYTES, 2 * RLC_FP_BYTES);","}"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  }","","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);","  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);"],"label":0}
{"cve":"CVE-2017-18344","code_chunks":["struct timespec64 ts64;","bool sig_none;","","sig_none = timr->it_sigev_notify == SIGEV_NONE;","iv = timr->it_interval;","","\/* interval timer ? *\/"],"label":0}
{"cve":"CVE-2022-3299","code_chunks":["    ogs_sbi_response_t *response = NULL;","    ogs_sbi_stream_t *stream = NULL;","    ogs_pkbuf_t *pkbuf = NULL;","    size_t padlen = 0;","","    ogs_assert(session);","    ogs_assert(frame);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["        *out = Num(n, lineno, col_offset, arena);","        if (*out == NULL) goto failed;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)Str_type);","    if (isinstance == -1) {","        return 1;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["}","isinstance = PyObject_IsInstance(obj, (PyObject*)BinOp_type);","if (isinstance == -1) {","return 1;","}","if (isinstance) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["        int num_inputs = node->inputs->size - 1;","  int num_outputs = node->outputs->size;","","  Subgraph* this_subgraph = reinterpret_cast<Subgraph*>(context->impl_);","  auto* subgraphs = this_subgraph->GetSubgraphs();","  TF_LITE_ENSURE(context, op_data->then_subgraph_index < subgraphs->size());","  TF_LITE_ENSURE(context, op_data->else_subgraph_index < subgraphs->size());"],"label":0}
{"cve":"CVE-2022-0521","code_chunks":["\t}","\tattr->type = R_BIN_JAVA_ATTR_TYPE_LOCAL_VARIABLE_TABLE_ATTR;","\tattr->info.local_variable_table_attr.table_length = R_BIN_JAVA_USHORT (buffer, offset);","\toffset += 2;","\tattr->info.local_variable_table_attr.local_variable_table =\\","\t\tr_list_newf (r_bin_java_local_variable_table_attr_entry_free);","\tfor (i = 0; i < attr->info.local_variable_table_attr.table_length; i++) {"],"label":0}
{"cve":"CVE-2019-3556","code_chunks":["","  for (int i = 0; i < value.size(); i++) {","    auto c = (unsigned char)value[i];","    if (esc[c]) {","      *r++ = '\\\\';","      *r++ = hex[c >> 4];","      *r++ = hex[c & 0xf];"],"label":0}
{"cve":"CVE-2020-9383","code_chunks":["","if (drive >= 0 && drive < N_DRIVE) {","new_fdc = FDC(drive);","current_drive = drive;","}","if (new_fdc >= N_FDC) {"],"label":0}
{"cve":"CVE-2022-0696","code_chunks":["get_user_commands(expand_T *xp UNUSED, int idx)","{","buf_T *buf = prevwin_curwin()->w_buffer;","","if (idx < buf->b_ucmds.ga_len)","return USER_CMD_GA(&buf->b_ucmds, idx)->uc_name;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp24_read_bin(fp24_t a, const uint8_t *bin, int len) {","if (len != 16 * RLC_FP_BYTES && len != 24 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["break;","}","","end = Stream_GetPosition(s);","diff = end - start;","if (diff != pduLength)"],"label":1}
{"cve":"CVE-2020-35538","code_chunks":["}","","\/* Calculate how many full iMCU rows we can skip. *\/","if (cinfo->upsample->need_context_rows)","lines_to_skip = ((lines_after_iMCU_row - 1) \/ lines_per_iMCU_row) *","lines_per_iMCU_row;"],"label":1}
{"cve":"CVE-2022-0519","code_chunks":["R_API RBinJavaAttrInfo *r_bin_java_local_variable_table_attr_new(RBinJavaObj *bin, ut8 *buffer, ut64 sz, ut64 buf_offset) {","RBinJavaLocalVariableAttribute *lvattr;","ut64 curpos = 0, offset = 6;","RBinJavaAttrInfo *attr;","ut32 i = 0;"],"label":1}
{"cve":"PYSEC-2022-84","code_chunks":["int64_t count = CalculateTensorElementCount(tensor, found_unknown_shapes);","int size = DataTypeSize(BaseType(tensor.dtype()));","VLOG(2) << \"Count: \" << count << \" DataTypeSize: \" << size;","return count * size;","}","","int64_t OpLevelCostEstimator::CalculateInputSize(const OpInfo& op_info,"],"label":1}
{"cve":"CVE-2019-11935","code_chunks":["         *\/","        SKIP_LONG_HEADER_SEP_MBSTRING(to_r, i);","        to_r[i] = ' ';","      }","    }","  } else {","    raise_warning(\"Missing To: field\");"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["ep2_t t1[1 << (EP_WIDTH \/ 2)];","ep2_t t[1 << EP_WIDTH];","bn_t n, _k, _m;","size_t l0, l1, w = EP_WIDTH \/ 2;","uint8_t w0[2 * RLC_FP_BITS], w1[2 * RLC_FP_BITS];","","bn_null(n);"],"label":0}
{"cve":"CVE-2018-14363","code_chunks":["static int nntp_hcache_namer(const char *path, char *dest, size_t destlen)","{","return snprintf(dest, destlen, \"%s.hcache\", path);","}","","\/**"],"label":1}
{"cve":"CVE-2022-24754","code_chunks":["    chal_sqnxoraka = (pj_uint8_t*) (nonce_bin.ptr + PJSIP_AKA_RANDLEN);","    chal_mac = (pj_uint8_t*) (nonce_bin.ptr + PJSIP_AKA_RANDLEN + ","\t\t\t      PJSIP_AKA_SQNLEN + PJSIP_AKA_AMFLEN);","","    \/* Copy k. op, and amf *\/","    pj_bzero(k, sizeof(k));","    pj_bzero(op, sizeof(op));"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteUnpackParams* data =","reinterpret_cast<TfLiteUnpackParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","switch (input->type) {","case kTfLiteFloat32: {","UnpackImpl<float>(context, node, input, data->num, data->axis);"],"label":1}
{"cve":"CVE-2022-29369","code_chunks":["ret = pnext->offset;","break;","}","","njs_mp_free(vm->mem_pool, next);",""],"label":1}
{"cve":"CVE-2019-16778","code_chunks":["","            const Index input_total_size = data_size;","  const Index input_outer_dim_size = segment_ids.dimension(0);","  const Index input_inner_dim_size = input_total_size \/ input_outer_dim_size;","","  const int OuterDimTileSize = 8;",""],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["goto error;","asdl_seq_SET(kwonlyargs, j++, arg);","i += 1; \/* the name *\/","if (i < NCH(n) && TYPE(CHILD(n, i)) == COMMA)","i += 1; \/* the comma, if present *\/","break;","\/* arg will be equal to the last argument processed *\/"],"label":1}
{"cve":"CVE-2023-2006","code_chunks":["","if (!rxnet->kill_all_client_conns) {","\/* If the number of connections is over the reap limit, we","* expedite discard by reducing the expiry timeout.  We must,","* however, have at least a short grace period to be able to do","* final-ACK or ABORT retransmission."],"label":1}
{"cve":"CVE-2016-10167","code_chunks":["path = gdTestFilePath2(\"gdimagecolor\", \"basic_exp.png\");","gdAssertImageEqualsToFile(path, im);","gdFree(path);","","gdImageDestroy(im);",""],"label":1}
{"cve":"CVE-2021-36082","code_chunks":["s_offset += 2;","tot_signature_algorithms_len = ndpi_min((sizeof(ja3.client.signature_algorithms) \/ 2) - 1, tot_signature_algorithms_len);","","#ifdef TLS_HANDLE_SIGNATURE_ALGORITMS","flow->protos.tls_quic_stun.tls_quic.num_tls_signature_algorithms = ndpi_min(tot_signature_algorithms_len \/ 2, MAX_NUM_TLS_SIGNATURE_ALGORITHMS);",""],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["\t\t\t\tut32 flag = 0, offset = 0;","\t\t\t\tsize_t n = read_u32_leb128 (buf + 2, buf + buf_len, &flag);","\t\t\t\tif (!(n > 0 && n < buf_len)) {","\t\t\t\t\tgoto err;","\t\t\t\t}","\t\t\t\top->len += n;","\t\t\t\tn = read_u32_leb128 (buf + op->len, buf + buf_len, &offset);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int i, j;","int8_t *naf = NULL;","ep_t *_p = RLC_ALLOCA(ep_t, n);","size_t l, *_l = RLC_ALLOCA(size_t, n);","","RLC_TRY {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteConvParams* params, OpData* data,","const TfLiteTensor* input,","const TfLiteTensor* filter,","const TfLiteTensor* bias,","TfLiteTensor* im2col, TfLiteTensor* output) {","float output_activation_min, output_activation_max;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","const TfLiteTensor* input_boxes;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kInputTensorBoxes, &input_boxes));","const int num_boxes = SizeOfDimension(input_boxes, 0);","const TfLiteTensor* input_scores;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2020-5291","code_chunks":["{","assert (!keep_requested_caps || !is_privileged);","\/* Drop root uid *\/","if (geteuid () == 0 && setuid (opt_sandbox_uid) < 0)","die_with_error (\"unable to drop root uid\");",""],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["}","}","","return tsl::Status(port::error::INTERNAL,","absl::StrCat(\"cudnn library could not create a handle: \",","CudnnStatusToString(status)));","}"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["}","","int cmp_len = s1_len - offset;","if (cmp_len < s2_len) cmp_len = s2_len;","if (cmp_len > length) cmp_len = length;",""],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2021-38160","code_chunks":["\treturn err;","}","","static const struct virtio_device_id id_table[] = {","\t{ VIRTIO_ID_CONSOLE, VIRTIO_DEV_ANY_ID },","\t{ 0 },","};"],"label":0}
{"cve":"CVE-2022-0523","code_chunks":["\tbool error = false;","\tut32 n = get_ut32 (buffer, &error);","\tif (n > ST32_MAX) {","\t\teprintf (\"bad marshal data (set size out of range)\\n\");","\t\treturn NULL;","\t}","\tif (error) {"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["pj_pool_t *pool;","pj_status_t status;","","pool = pj_pool_create(srtp->pool->factory, \"dtls%p\",","2000, 256, NULL);","ds = PJ_POOL_ZALLOC_T(pool, dtls_srtp);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["bn_add(u, t0, t1);","bn_add(v, t2, t3);","bn_rsh(t0, u, bn_bits(u) - RLC_DIG);","_x = t0->dp[0];","bn_rsh(t1, v, bn_bits(u) - RLC_DIG);","_y = t1->dp[0];"],"label":1}
{"cve":"CVE-2018-20406","code_chunks":["_pickle_UnpicklerMemoProxy_copy_impl(UnpicklerMemoProxyObject *self)","\/*[clinic end generated code: output=e12af7e9bc1e4c77 input=97769247ce032c1d]*\/","{","size_t i;","PyObject *new_memo = PyDict_New();","if (new_memo == NULL)","return NULL;"],"label":0}
{"cve":"CVE-2018-16229","code_chunks":["else if (optlen == 4)","ND_PRINT((ndo, \" %u\", EXTRACT_16BITS(option + 2)));","else","ND_PRINT((ndo, \" optlen != 4 or 6\"));","break;","if (optlen > 2) {","ND_PRINT((ndo, \" \"));"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["      DenseLshProjection(hash, input, weight, out_buf);","      break;","      SparseLshProjection(hash, input, weight, out_buf);","      break;","      return kTfLiteError;","  }",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["                                       &cell_state_quantized));","    cell_state_quantized->type = input_to_output_weights->type;","    cell_state_quantized->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqual(cell_state_quantized->dims, cell_state->dims)) {","      TfLiteIntArray* cell_state_quantized_size =","          TfLiteIntArrayCopy(cell_state->dims);","      TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"PYSEC-2022-125","code_chunks":["}","","if (sparsity.dim_metadata_size == kDimMetadataSizeRandomSparse) {","optimized_ops::FullyConnectedSparseWeight(","sparsity, op_params, GetTensorShape(input),","GetTensorData<float>(input), GetTensorShape(filter),"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* input_weights;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","const TfLiteTensor* recurrent_weights;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["        }","      }","    }","    return;","  }","","  \/* Destination is palette based *\/"],"label":0}
{"cve":"CVE-2021-32439","code_chunks":["GF_Err stbl_AppendSize(GF_SampleTableBox *stbl, u32 size, u32 nb_pack)","{","u32 i;","if (!nb_pack) nb_pack = 1;","","if (!stbl->SampleSize->sampleCount) {","stbl->SampleSize->sampleSize = size;"],"label":1}
{"cve":"CVE-2018-12562","code_chunks":["    if (currentMountStatus) {","        return true;","    }","    clear();","    return false;","}",""],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["int i;","","for (i = a->num_attr - 1; rem > 0 && i >= 0; i--) {","const struct git_attr *attr = a->state[i].attr;","const char **n = &(all_attrs[attr->attr_nr].value);","const char *v = a->state[i].setto;"],"label":1}
{"cve":"CVE-2021-32613","code_chunks":["static void rebase_buffer(struct MACH0_(obj_t) *obj, ut64 off, RIODesc *fd, ut8 *buf, int count) {","if (obj->rebasing_buffer) {","return;","}","obj->rebasing_buffer = true;","ut64 eob = off + count;","int i = 0;"],"label":0}
{"cve":"CVE-2021-3770","code_chunks":["{","    switch (magic_overruled)","    {","\tcase OPTION_MAGIC_ON:      return TRUE;","\tcase OPTION_MAGIC_OFF:     return FALSE;","\tcase OPTION_MAGIC_NOT_SET: break;","    }"],"label":0}
{"cve":"PYSEC-2020-126","code_chunks":["\"Cannot select both scientific and shortest notation\"));","format_ = \"%\";","if (width > -1) {","strings::Appendf(&format_, \"%s%d\", fill_string.c_str(), width);","}","if (precision > -1) {","strings::Appendf(&format_, \".%d\", precision);"],"label":1}
{"cve":"CVE-2021-30022","code_chunks":["i = 0;","spss = NULL;","while ((spss = (GF_NALUFFParamArray *)gf_list_enum(hvcc->param_array, &i))) {","if (spss->type == GF_HEVC_NALU_SEQ_PARAM)","break;","spss = NULL;"],"label":1}
{"cve":"CVE-2019-11413","code_chunks":["else","goto end;","}","if (!js_regexec(re->prog, source, &m, REG_NOTBOL))","goto loop;","}",""],"label":1}
{"cve":"PYSEC-2021-246","code_chunks":["    OP_REQUIRES_OK(ctx, ctx->input(\"b_values\", &b_values_t));","","    OP_REQUIRES(ctx,","                TensorShapeUtils::IsVector(a_values_t->shape()) &&","                    TensorShapeUtils::IsVector(b_values_t->shape()),","                errors::InvalidArgument(","                    \"Input values should be vectors but received shapes: \","],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["req::ptr<XMLDocumentData> doc() const { return m_node->doc(); }"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["\tfor (i = 0; i < check->all_attrs_nr; i++) {","\t\tconst char *name = check->all_attrs[i].attr->name;","\t\tconst char *value = check->all_attrs[i].value;","\t\tstruct attr_check_item *item;","\t\tif (value == ATTR__UNSET || value == ATTR__UNKNOWN)","\t\t\tcontinue;","\t\titem = attr_check_append(check, git_attr(name));"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* input_weights;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","const TfLiteTensor* recurrent_weights;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2021-20224","code_chunks":["pixel=(unsigned char) *indexes++;","*q|=((pixel & 0x01) << 5);","pixel=(unsigned char) (GetPixelOpacity(p) == (Quantum)","TransparentOpacity ? 1 : 0);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["Stream_Read_UINT32(s, blockLen);   \/* blockLen (4 bytes) *\/","Stream_Read_UINT16(s, numCapsets); \/* numCapsets (2 bytes) *\/","","if (blockType != 0xCBC0)","return FALSE;",""],"label":1}
{"cve":"CVE-2016-8654","code_chunks":["if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {","\/* We have no choice but to commit suicide in this case. *\/","abort();","}","}"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    }","    if (tmp == NULL || tmp == Py_None) {","        Py_CLEAR(tmp);","        type_comment = NULL;","    }","    else {","        int res;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, hidden_state->dims->data[0], batch_size);","TF_LITE_ENSURE_EQ(context, hidden_state->dims->data[1], num_units);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TfLiteIntArray* output_size_array = TfLiteIntArrayCreate(3);","output_size_array->data[0] = (time_major) ? max_time : batch_size;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["input->type == kTfLiteInt16) {","node->temporaries->data[data->scratch_tensor_index] =","data->scratch_tensor_id;","TfLiteTensor* scratch_buffer ="],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","TF_LITE_ENSURE(context, node->inputs->size > 0);","","const TfLiteTensor* cond = GetInput(context, node, 0);","TF_LITE_ENSURE_EQ(context, cond->type, kTfLiteBool);","TF_LITE_ENSURE_EQ(context, NumElements(cond), 1);",""],"label":1}
{"cve":"CVE-2018-14461","code_chunks":["tlen -= msg_len+4;","}","return pdu_len+4;","ND_PRINT((ndo, \"\\n\\t\\t packet exceeded snapshot\"));","return 0;","}",""],"label":1}
{"cve":"CVE-2022-0695","code_chunks":["\t\t\tptr->size = ptr->vsize;","\t\t\tptr->add = true;","\t\t \tr_list_append (sections, ptr);","\t\t} else if (lrec.rec_type == LMF_LOAD_REC) {","\t\t\tRBinSection *ptr = R_NEW0 (RBinSection);","\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) != sizeof (lmf_data)) {","\t\t\t\tgoto beach;"],"label":0}
{"cve":"CVE-2016-3134","code_chunks":["e->comefrom |= ((1 << hook) | (1 << NF_INET_NUMHOOKS));","","\/* Unconditional return\/END. *\/","if ((e->target_offset == sizeof(struct ipt_entry) &&"],"label":1}
{"cve":"CVE-2018-8792","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"CVE-2016-6873","code_chunks":["static void compact(VarEnv* v, Array &ret, const Variant& var) {","if (var.isArray()) {","for (ArrayIter iter(var.getArrayData()); iter; ++iter) {","compact(v, ret, iter.second());","}","} else {","String varname = var.toString();"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void bn_srt(bn_t c, bn_t a) {","bn_t h, l, m, t;","int bits, cmp;","","if (bn_sign(a) == RLC_NEG) {","RLC_THROW(ERR_NO_VALID);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["for (i = l - 1; i >= 0; i--) {","ep_dbl(r, r);","","u = naf[i];","if (u > 0) {","ep_add(r, r, t[u \/ 2]);"],"label":1}
{"cve":"CVE-2022-28796","code_chunks":["\t * to make sure that we serialise special journal-locked operations","\t * too.","\t *\/","\tmutex_lock(&journal->j_barrier);","}","","\/**"],"label":0}
{"cve":"CVE-2022-47933","code_chunks":["  const bool ipfs_disabled = IsIpfsResolveMethodDisabled(prefs);","","  if (ipfs_disabled || !brave::IsRegularProfile(ctx->browser_context)) {","        if (has_ipfs_scheme &&","        ctx->resource_type != blink::mojom::ResourceType::kMainFrame) {","      ctx->blocked_by = brave::kOtherBlocked;","    }"],"label":0}
{"cve":"CVE-2022-1987","code_chunks":["debug_print(\"Label length too long: %zu\\n\", label_length);","return MOBI_DATA_CORRUPT;","}","char text[INDX_LABEL_SIZEMAX];","\/* FIXME: what is ORDT1 for? *\/","if (ordt->ordt2) {","label_length = mobi_getstring_ordt(ordt, buf, (unsigned char*) text, label_length);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["output_state_sf->type = kTfLiteFloat32;","output_state_sf->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(output_state_sf->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"CVE-2021-32139","code_chunks":["if (a->font_table) {","fount_count = a->font_table->entry_count;","for (j=0; j<fount_count; j++) {","size += 3;","if (a->font_table->fonts[j].fontName) size += (u32) strlen(a->font_table->fonts[j].fontName);","}"],"label":1}
{"cve":"CVE-2018-14680","code_chunks":["  struct mspack_system *sys = self->system;","  struct mschmd_sec_mscompressed *sec;","  unsigned char *data;","  off_t length, offset;","","  sec = (struct mschmd_sec_mscompressed *) file->section;",""],"label":0}
{"cve":"CVE-2020-12062","code_chunks":["\tif (src != NULL && !iamrecursive && !Tflag) {","\t\t\/*","\t\t * Prepare to try to restrict incoming filenames to match","\t\t * the requested destination file glob.","\t\t *\/","\t\tif (brace_expand(src, &patterns, &npatterns) != 0)","\t\t\tfatal(\"%s: could not expand pattern\", __func__);"],"label":0}
{"cve":"CVE-2018-14357","code_chunks":["imap_quote_string(term, sizeof(term), pat->p.str);","mutt_buffer_addstr(buf, term);","mutt_buffer_addch(buf, ' ');",""],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["auto it = id_map_.find(id);","if (it == id_map_.end()) {","return tsl::Status(","tsl::error::NOT_FOUND,","absl::StrFormat(\"could not find registered platform with id: %p\", id));","}","return it->second;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"PYSEC-2020-307","code_chunks":["  if (!status->status.ok()) {","    return nullptr;","  }","","  const Tensor* tensor = GetTensorFromHandle(h, status);","  TF_DataType data_type = static_cast<TF_DataType>(tensor->dtype());",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fb_read_str(fb_t a, const char *str, size_t len, unsigned int radix) {","bn_t t;","","bn_null(t);"],"label":0}
{"cve":"CVE-2022-0849","code_chunks":["}","if ((f = r_core_flag_get_by_spaces (core->flags, dst))) {","r_meta_set_string (core->anal, R_META_TYPE_COMMENT, cur, f->name);","} else if ((str = is_string_at (mycore, dst, NULL))) {","char *str2 = r_str_newf (\"esilref: '%s'\", str);","r_str_replace_char (str2, '%', '&');"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["return 1;","}"],"label":1}
{"cve":"CVE-2020-6018","code_chunks":["const void *pAdditionalAuthenticationData, size_t cbAuthenticationData",") {","unsigned long long pcbPlaintextData_longlong;","","const int nDecryptResult = crypto_aead_aes256gcm_decrypt_afternm(","static_cast<unsigned char*>( pPlaintextData ), &pcbPlaintextData_longlong,"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["                                       &aux_input_sf));","    aux_input_sf->type = kTfLiteFloat32;","    aux_input_sf->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqualsArray(aux_input_sf->dims, 1, scaling_dims)) {","      TfLiteIntArray* aux_input_sf_size = TfLiteIntArrayCreate(1);","      aux_input_sf_size->data[0] = n_batch;","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, aux_input_sf,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["return kTfLiteError;","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);","TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);",""],"label":1}
{"cve":"CVE-2018-20179","code_chunks":["","\t\t\/* FIXME: skip total length *\/","\t\tin_uint8s(s, 2);","","\t\t\/* read session_id *\/","\t\tin_uint32_le(s, g_redirect_session_id);","\t}"],"label":0}
{"cve":"CVE-2022-0559","code_chunks":["r_io_submap_set_to (bd, r_io_submap_from (sm) - 1);","entry = r_rbnode_next (entry);","}","while (entry && r_io_submap_to (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {","RRBNode *next = r_rbnode_next (entry);","bool a = r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);","if (!a) {"],"label":1}
{"cve":"CVE-2021-37671","code_chunks":["if (tuple[index].has_value()) {","return Status(errors::InvalidArgument(","\"The tensor for index '\", index, \"' for key '\", key.scalar<int64>()(),","\"' was already initialized '\", dtypes_.size(), \"'.\"));","}",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["            const TfLiteTensor* tensor0;","      TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &tensor0));","      TfLiteTensor* tensor1;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &tensor1));","      TfLiteIntArray* newSize = TfLiteIntArrayCopy(tensor0->dims);","      return context->ResizeTensor(context, tensor1, newSize);","    };"],"label":0}
{"cve":"CVE-2020-15474","code_chunks":["      printf(\"TLS [server][session_id_len: %u][cipher: %04X]\\n\", session_id_len, ja3.cipher[0]);","#endif","","      offset += 2 + 1;","","      if((offset + 1) < packet->payload_packet_len) \/* +1 because we are goint to read 2 bytes *\/","\textension_len = ntohs(*((u_int16_t*)&packet->payload[offset]));"],"label":0}
{"cve":"CVE-2018-8792","code_chunks":["STREAM s;","int length;","int tagval;","struct stream packet;","","s = tcp_recv(NULL, 4);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      break;","      MaxEvalQuantizedInt16<kernel_type>(context, node, params, data, input,","                                         output);","      break;","      TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",","                         TfLiteTypeGetName(input->type));","      return kTfLiteError;"],"label":0}
{"cve":"CVE-2021-32847","code_chunks":["","\tswitch (type) {","\t\terr = blockif_read(sc->bc, &io->io_req);","\t\tbreak;","\t\terr = blockif_write(sc->bc, &io->io_req);","\t\tbreak;","\t\t\/* We currently limit the discard to one segment in the initial negotiation"],"label":0}
{"cve":"CVE-2022-2566","code_chunks":["        sc->spherical->projection = AV_SPHERICAL_EQUIRECTANGULAR;","","        if (av_stristr(buffer, \"<GSpherical:StereoMode>\") && !sc->stereo3d) {","            enum AVStereo3DType mode;","","            if (av_stristr(buffer, \"left-right\"))","                mode = AV_STEREO3D_SIDEBYSIDE;"],"label":0}
{"cve":"CVE-2017-6800","code_chunks":["            printf(\"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\\n\");","            if ((vlTemp.data = (BYTE*)DecompressRTF(mapidata, &(vlTemp.size))) != NULL) {","              printf(\"%s\\n\", vlTemp.data);","              free(vlTemp.data);","            }","            printf(\"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\\n\");","          } else {"],"label":0}
{"cve":"CVE-2021-42781","code_chunks":["\t\tcobj.flags |= SC_PKCS15_CO_FLAG_MODIFIABLE;","","\trv = sc_pkcs15emu_add_x509_cert(p15card, &cobj, &cinfo);","","\tLOG_FUNC_RETURN(p15card->card->ctx, rv);","}",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["res = -1;","goto cleanup;","}"],"label":1}
{"cve":"CVE-2023-38408","code_chunks":["k_flag++;","break;","if (strcmp(optarg, \"no-restrict-websafe\") == 0)","restrict_websafe  = 0;","else","fatal(\"Unknown -O option\");","break;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["excepthandler_ty o = (excepthandler_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_RETURN_NONE;","}","","switch (o->kind) {"],"label":0}
{"cve":"CVE-2021-32791","code_chunks":["char *input = apr_psprintf(r->pool, \"%s:%s\", passphrase, key);","char *output = NULL;","if (oidc_util_hash_string_and_base64url_encode(r, OIDC_JOSE_ALG_SHA256, input, &output)","== FALSE) {","oidc_error(r, \"oidc_util_hash_string_and_base64url_encode returned an error\");","return NULL;"],"label":0}
{"cve":"CVE-2018-6334","code_chunks":["          temp_filename=\"\";","          free(param);","          free(filename);","          continue;","        }","      }",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["prod_scaling_factors->type = kTfLiteFloat32;","prod_scaling_factors->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(prod_scaling_factors->dims, 1,"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","  Subgraph* this_subgraph = reinterpret_cast<Subgraph*>(context->impl_);","  auto* subgraphs = this_subgraph->GetSubgraphs();","","        int active_branch_subgraph_index =","      cond_value ? op_data->then_subgraph_index : op_data->else_subgraph_index;","  Subgraph& active_branch_subgraph ="],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInput, &input));","const TfLiteTensor* axis;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","DynamicBuffer buf;","StringRef str_ref = GetString(input, 0);","buf.AddString(str_ref);","buf.WriteToTensorAsVector(output);"],"label":1}
{"cve":"CVE-2017-3733","code_chunks":["\/* Ignore if inappropriate ciphersuite *\/","if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD","&& s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)","s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;","} else if (type == TLSEXT_TYPE_extended_master_secret) {","s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;","if (!s->hit)"],"label":1}
{"cve":"CVE-2018-10538","code_chunks":["DS64Chunk ds64_chunk;","uint32_t bcount;","","CLEAR (WaveHeader);","CLEAR (ds64_chunk);","infilesize = DoGetFileSize (infile);"],"label":0}
{"cve":"CVE-2018-14362","code_chunks":["#ifdef USE_HCACHE","    hc = pop_hcache_open(pop_data, ctx->path);","#endif","","    for (i = 0, j = 0, ret = 0; ret == 0 && i < ctx->msgcount; i++)","    {","      if (ctx->hdrs[i]->deleted && ctx->hdrs[i]->refno != -1)"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      TfLiteIntArray* output_state_sf_size = TfLiteIntArrayCreate(1);","      output_state_sf_size->data[0] = n_batch;","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, output_state_sf,","                                                       output_state_sf_size));","    }","    node->temporaries->data[kProductScalingFactors] =","        op_data->scratch_tensor_index + kProductScalingFactors;"],"label":0}
{"cve":"CVE-2017-12595","code_chunks":["    return QPDFObjectHandle(new QPDF_Real(value, decimal_places));","}","","QPDFObjectHandle","QPDFObjectHandle::newName(std::string const& name)","{","    return QPDFObjectHandle(new QPDF_Name(name));"],"label":0}
{"cve":"CVE-2018-20178","code_chunks":["\ttotal_pro += bytes_pro;","\treturn size == total_pro;","}","","\/* main decompress function *\/","RD_BOOL","bitmap_decompress(uint8 * output, int width, int height, uint8 * input, int size, int Bpp)"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["  fputc (0xff, ofp);","  fputc (0xd8, ofp);","  if (strcmp (thumb+6, \"Exif\")) {","    memcpy (exif, \"\\xff\\xe1  Exif\\0\\0\", 10);","    exif[1] = htons (8 + sizeof th);","    fwrite (exif, 1, sizeof exif, ofp);","    tiff_head (&th, 0);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["Py_DECREF(id);","return NULL;","}","PyTuple_SET_ITEM(c->c_normalize_args, 1, id);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int i, j;","int8_t *naf = NULL;","ed_t *_p = RLC_ALLOCA(ed_t, n);","size_t l, *_l = RLC_ALLOCA(size_t, n);","","RLC_TRY {"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["{","uchar pixel[10];","unsigned iten = 0, isix, i, buffer = 0, todo[16];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width > 32767 || raw_height > 32767)","throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"CVE-2017-9608","code_chunks":["                dctx->remaining = 0;","                break;","            }","        }","    }","","    if (pic_found && !dctx->remaining) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  OpData* data = static_cast<OpData*>(node->user_data);","","  if (input->type == kTfLiteInt8) {","    TF_LITE_ENSURE_EQ(context, weights_feature->type, kTfLiteInt8);","    TF_LITE_ENSURE_EQ(context, weights_time->type, kTfLiteInt16);","    TF_LITE_ENSURE_EQ(context, activation_state->type, kTfLiteInt16);","    if (bias != nullptr) {"],"label":0}
{"cve":"CVE-2021-46784","code_chunks":["continue;","}","} else {","memset(line, '\\0', TEMP_BUF_SIZE);","continue;","}"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["{","tok->done = E_TABSPACE;","tok->cur = tok->inp;","return ERRORTOKEN;","}",""],"label":0}
{"cve":"CVE-2017-1000251","code_chunks":["#define L2CAP_DEFAULT_RX_WINDOW\t\t1"],"label":1}
{"cve":"PYSEC-2019-227","code_chunks":["    const int64 segment_offset = input_index % inner_dim_size;","    const Index output_segment_index = segment_ids[input_segment_index];","    if (output_segment_index < 0 ||","        output_segment_index >= output_outer_dim_size) {","      continue;","    }","    const int64 output_index ="],"label":0}
{"cve":"PYSEC-2021-734","code_chunks":["        *result = first_partition_tensor.shape().dim_size(0) - 1;","        return Status::OK();","        return errors::InvalidArgument(","            \"Cannot handle type \",","            RowPartitionTypeToString(first_partition_type));","    }","  }"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["\tchar sav_cp;","\tunsigned port_num;","\tint res;","","\taddr->ss_family = (strchr(ip, ':')) ? AF_INET6 : AF_INET;","","\tif (port) {"],"label":0}
{"cve":"PYSEC-2022-68","code_chunks":["        int max_retained_node_index = 0;","  for (int execution_plan_index = 0;","       execution_plan_index < execution_plan_.size(); ++execution_plan_index) {","    max_retained_node_index = std::max(max_retained_node_index,","                                       execution_plan_[execution_plan_index]);","  }","  nodes_and_registration_.resize(max_retained_node_index + 1);"],"label":0}
{"cve":"CVE-2021-30020","code_chunks":["","","GF_EXPORT","s32 gf_hevc_read_pps(u8 *data, u32 size, HEVCState *hevc)","{","GF_BitStream *bs;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t}","\tRLC_FINALLY {","\t\tfor (i = 0; i < 5; i++) {","\t\t\tep4_free(t[i]);","\t\t}","\t}","}"],"label":0}
{"cve":"CVE-2018-18314","code_chunks":["","        \/* Set up the data structure so that any errors will be properly","         * reported.  See the comments at the definition of","         * REPORT_LOCATION_ARGS for details *\/","        RExC_precomp_adj = orig_parse - RExC_precomp;","\tRExC_start =  RExC_parse = SvPV(substitute_parse, len);","        RExC_adjusted_start = RExC_start + prefix_end;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");"],"label":1}
{"cve":"CVE-2019-17534","code_chunks":["{","VipsObjectClass *class = VIPS_OBJECT_GET_CLASS( gif );","GifFileType *file = gif->file;","ColorMapObject *map = file->Image.ColorMap ?","file->Image.ColorMap : file->SColorMap;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["        }","        if (lookup_attr_id(obj, &PyId_args, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"args\\\" missing from FunctionDef\");","            return 1;"],"label":0}
{"cve":"CVE-2018-15473","code_chunks":["struct sshbuf *b;","struct sshkey *key = NULL;","char *pkalg, *userstyle = NULL, *key_s = NULL, *ca_s = NULL;","u_char *pkblob, *sig, have_sig;","size_t blen, slen;","int r, pktype;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["      break;","      memset(GetTensorData<int32_t>(output), 0, num_elements * sizeof(int32_t));","      break;","      memset(GetTensorData<float>(output), 0, num_elements * sizeof(float));","      break;","      context->ReportError(context,","                           \"ZerosLike only currently supports int64, int32, \""],"label":0}
{"cve":"CVE-2016-3136","code_chunks":["return -ENOMEM;","","\/* Use second interrupt-in endpoint for reading. *\/","priv->read_urb = port->serial->port[1]->interrupt_in_urb;","priv->read_urb->context = port;","","spin_lock_init(&priv->lock);"],"label":1}
{"cve":"CVE-2018-8799","code_chunks":["\t\t\t\t\t*out = color;","\t\t\t\t\tout += 4;","\t\t\t\t\tindexw++;","\t\t\t\t\tcollen--;","\t\t\t\t}","\t\t\t\twhile (indexw < width && replen > 0)","\t\t\t\t{"],"label":0}
{"cve":"CVE-2021-3331","code_chunks":["CipherList = Storage->ReadString(L\"Cipher\", CipherList);","KexList = Storage->ReadString(L\"KEX\", KexList);","HostKeyList = Storage->ReadString(L\"HostKey\", HostKeyList);","GssLibList = Storage->ReadString(L\"GSSLibs\", GssLibList);","GssLibCustom = Storage->ReadString(L\"GSSCustom\", GssLibCustom);","PublicKeyFile = Storage->ReadString(L\"PublicKeyFile\", PublicKeyFile);","AddressFamily = static_cast<TAddressFamily>"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        return \"Load\";","        return \"Store\";","        return \"Del\";","        return \"AugLoad\";","        return \"AugStore\";","        return \"Param\";","        abort();"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output = GetOutput(context, node, 0);","DynamicBuffer buf;","StringRef str_ref = GetString(input, 0);","buf.AddString(str_ref);","buf.WriteToTensorAsVector(output);"],"label":1}
{"cve":"CVE-2016-6871","code_chunks":["static Variant HHVM_FUNCTION(bcsqrt, const String& operand,","int64_t scale \/* = -1 *\/) {","scale = adjust_scale(scale);","bc_num result;","bc_init_num(&result);","SCOPE_EXIT {"],"label":0}
{"cve":"CVE-2016-10167","code_chunks":["{","gdImagePtr im;","int effects[] = {","gdEffectReplace, gdEffectAlphaBlend, gdEffectNormal,","gdEffectOverlay, gdEffectMultiply","};"],"label":0}
{"cve":"CVE-2020-23928","code_chunks":["","i=0;","if (ptr->size<8) return GF_ISOM_INVALID_FILE;","tmp_strsize =(u32)ptr->size-8;","tmp_str = gf_malloc(sizeof(char)*tmp_strsize);","if (!tmp_str) return GF_OUT_OF_MEM;","memset(tmp_str, 0, sizeof(char)*tmp_strsize);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["fp24_copy(c, u[0]);","}","","for (i = j; i < k; i++) {","fp24_mul(c, c, u[i]);","}",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["GetInput(context, node, kInputTensorClassPredictions);","const int num_boxes = input_box_encodings->dims->data[1];","const int num_classes = op_data->num_classes;","TF_LITE_ENSURE_EQ(context, input_class_predictions->dims->data[0],"],"label":1}
{"cve":"PYSEC-2021-376","code_chunks":["<Purpose>","  'test_updater.py' provides a collection of methods that test the public \/","  non-public methods and functions of 'tuf.client.updater.py'.","","  The 'unittest_toolbox.py' module was created to provide additional testing","  tools, such as automatically deleting temporary files created in test cases.","  For more information, see 'tests\/unittest_toolbox.py'."],"label":0}
{"cve":"CVE-2017-12665","code_chunks":["              *opacity++=ScaleQuantumToChar((Quantum) (GetPixelAlpha(image,p)));","            p+=GetPixelChannels(image);","          }","          count+=EncodeImage(image,scanline,bytes_per_line,packed_scanline);","          if (image->previous == (Image *) NULL)","            {","              status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["\t\t hb_back_server_messenger->get_myaddr()) ||","\t       (osdmap->get_hb_front_addr(whoami) != entity_addr_t() &&","                !osdmap->get_hb_front_addr(whoami).probably_equals(","\t\t  hb_front_server_messenger->get_myaddr()))) {","      if (!osdmap->is_up(whoami)) {","\tif (service.is_preparing_to_stop() || service.is_stopping()) {","\t  service.got_stop_ack();"],"label":0}
{"cve":"CVE-2018-17204","code_chunks":["if (strcmp(\"hash\", prop->selection_method)","&& strcmp(\"dp_hash\", prop->selection_method)) {","OFPPROP_LOG(&bad_ofmsg_rl, false,","\"ntr selection method '%s' is not supported\",","prop->selection_method);","return OFPERR_OFPBPC_BAD_VALUE;"],"label":1}
{"cve":"CVE-2019-13308","code_chunks":["status=MagickFalse;","continue;","}","for (x=0; x < (ssize_t) images->columns; x++)","{","switch (op)","{"],"label":1}
{"cve":"CVE-2017-15377","code_chunks":["","\/* we might have already have this content matched by the mpm.","* (if there is any other reason why we'd want to avoid checking","*  it here, please fill it in) *\/","","\/* rule parsers should take care of this *\/"],"label":1}
{"cve":"CVE-2016-3178","code_chunks":["\t\t\tsyslog(LOG_ERR, \"bad request (location contains forbidden chars)\");","\t\t\tgoto error;","\t\t}","\t\tsyslog(LOG_INFO, \"location='%.*s'\", l, p);","\t\tnewserv->location = malloc(l + 1);","\t\tif(!newserv->location) {","\t\t\tsyslog(LOG_ERR, \"cannot allocate memory\");"],"label":0}
{"cve":"CVE-2019-13311","code_chunks":["{","if (LocaleCompare(\"map\",option+1) == 0)","{","(void) SyncImagesSettings(mogrify_info,*images,exception);","if (*option == '+')","{"],"label":1}
{"cve":"CVE-2022-36026","code_chunks":["","    string round_mode_string;","    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"round_mode\", &round_mode_string));","    OP_REQUIRES(","        ctx,","        (round_mode_string == \"HALF_UP\" || round_mode_string == \"HALF_TO_EVEN\"),","        InvalidArgument(\"Round mode string must be \""],"label":0}
{"cve":"PYSEC-2020-258","code_chunks":["const double as_double = PyFloat_AS_DOUBLE(v);","*out = static_cast<T>(as_double);","if (TF_PREDICT_FALSE(CheckForOverflow<T>(as_double, out))) {","return ErrorOutOfRangeDouble;","}","return nullptr;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input_resource_id_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputResourceIdTensor,","&input_resource_id_tensor));","int resource_id = input_resource_id_tensor->data.i32[0];","","TfLiteTensor* output_tensor;"],"label":0}
{"cve":"CVE-2023-50247","code_chunks":["    conn->super.stats.num_packets.received += 1;","    if (packet->ecn != 0)","        conn->super.stats.num_packets.received_ecn_counts[get_ecn_index_from_bits(packet->ecn)] += 1;","","    \/* state updates, that are triggered by the receipt of a packet *\/","    switch (epoch) {","        \/* update max_ingress_udp_payload_size if necessary *\/"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp_prime_set_pairf(const bn_t x, int pairf) {","bn_t p, t0, t1;","ctx_t *ctx = core_get();","int len = bn_bits(x) + 1;","int8_t s[RLC_FP_BITS + 1];","","bn_null(p);"],"label":1}
{"cve":"CVE-2018-25032","code_chunks":["if (s->lookahead >= MIN_MATCH && s->strstart > 0) {","scan = s->window + s->strstart - 1;","prev = *scan;","if (prev == *++scan && prev == *++scan && prev == *++scan) {","strend = s->window + s->strstart + MAX_MATCH;","do {"],"label":1}
{"cve":"CVE-2016-4563","code_chunks":["          {","            if (graphic_context[n]->dash_pattern != (double *) NULL)","              graphic_context[n]->dash_pattern=(double *)","                RelinquishMagickMemory(graphic_context[n]->dash_pattern);","            if (IsPoint(q) != MagickFalse)","              {","                const char"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp9_write_bin(uint8_t *bin, size_t len, const fp9_t a) {","if (len != 9 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["return &context->tensors[tensor_index];","} else {"],"label":0}
{"cve":"CVE-2021-3772","code_chunks":["__sctp_sf_do_9_2_reshutack(struct net *net, const struct sctp_endpoint *ep,","const struct sctp_association *asoc,","const union sctp_subtype type, void *arg,","struct sctp_cmd_seq *commands)","{","struct sctp_chunk *chunk = arg;","struct sctp_chunk *reply;"],"label":0}
{"cve":"CVE-2018-20763","code_chunks":["e = gf_dm_sess_process(sess);","if (!e) {","strncpy(the_url, gf_dm_sess_get_cache_name(sess), sizeof(the_url) - 1);","the_url[sizeof(the_cfg) - 1] = 0;","}","gf_dm_sess_del(sess);","}"],"label":1}
{"cve":"CVE-2017-10929","code_chunks":["\t    len = size;","","\t  grub_memcpy (tmp_buf + real_offset, buf, len);","","\t  grub_disk_cache_invalidate (disk->dev->id, disk->id, sector);","","\t  if ((disk->dev->write) (disk, sector, 1, tmp_buf) != GRUB_ERR_NONE)"],"label":0}
{"cve":"CVE-2021-31262","code_chunks":["trak = gf_isom_get_track_from_file(the_file, trackNumber);","if (!trak || !trak->Media || !DescriptionIndex) return NULL;","entry = (GF_MPEGVisualSampleEntryBox*)gf_list_get(trak->Media->information->sampleTable->SampleDescription->child_boxes, DescriptionIndex - 1);","if (!entry || !entry->av1_config) return NULL;","return AV1_DuplicateConfig(entry->av1_config->config);","}",""],"label":1}
{"cve":"CVE-2019-13311","code_chunks":["        node = (Stack *)RelinquishMagickMemory(node);","        break;","      }","","      break;","    }","    if (LocaleCompare(\")\",option) == 0) {"],"label":0}
{"cve":"CVE-2023-36327","code_chunks":["#define bn_get_prime \tRLC_PREFIX(bn_get_prime)"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["pj_bzero(&rtcp_cb, sizeof(rtcp_cb));","rtcp_cb.on_read_complete = &on_rx_rtcp;","","status = pj_ioqueue_register_sock(pool, ioqueue, tp->rtcp_sock, tp,"],"label":1}
{"cve":"PYSEC-2020-306","code_chunks":["  int ndim = tensor->dims();","  dlm_tensor->dl_tensor.ndim = ndim;","  dlm_tensor->dl_tensor.data = tf_dlm_data;","  dlm_tensor->dl_tensor.dtype = tf_dlm_type;","","  std::vector<int64_t>* shape_arr = &tf_dlm_tensor_ctx->shape;","  std::vector<int64_t>* stride_arr = &tf_dlm_tensor_ctx->strides;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["","if (is_async && c->c_feature_version < 5) {","ast_error(c, n,","\"Async functions are only supported in Python 3.5 and greater\");","return NULL;","}",""],"label":1}
{"cve":"CVE-2020-27764","code_chunks":["break;","}","{","result=(MagickRealType) ((size_t) pixel ^ (size_t) (value+0.5));","break;","}","}"],"label":1}
{"cve":"CVE-2018-14363","code_chunks":["unsigned short bcache = 1;","","\/* see if we already have the message in body cache *\/","msg->fp = mutt_bcache_get(pop_data->bcache, h->data);","if (msg->fp)","return 0;",""],"label":1}
{"cve":"CVE-2016-10190","code_chunks":["char line[MAX_URL_SIZE];","int err = 0;","","s->chunksize = UINT64_MAX;","","for (;;) {","if ((err = http_get_line(s, line, sizeof(line))) < 0)"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputResourceIdTensor,","                                          &input_resource_id_tensor));","  const int resource_id = input_resource_id_tensor->data.i32[0];","","  const TfLiteTensor* key_tensor;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kKeyTensor, &key_tensor));"],"label":0}
{"cve":"CVE-2022-2453","code_chunks":["\t\t\t}","\t\t}","","\t\t\/*predictiveMFField*\/","\t\tif (codec->info->config.UsePredictiveMFField) {","\t\t\tflag = gf_bs_read_int(bs, 1);","\t\t\tif (flag) {"],"label":0}
{"cve":"CVE-2016-10172","code_chunks":["","        sp = buffer;","","        if (*sp++ == 'w' && *sp == 'v' && *++sp == 'p' && *++sp == 'k' &&","            !(*++sp & 1) && sp [2] < 16 && !sp [3] && (sp [2] || sp [1] || *sp >= 24) && sp [5] == 4 &&","            sp [4] >= (MIN_STREAM_VERS & 0xff) && sp [4] <= (MAX_STREAM_VERS & 0xff) && sp [18] < 3 && !sp [19]) {","                memcpy (wphdr, buffer, sizeof (*wphdr));"],"label":0}
{"cve":"CVE-2016-5357","code_chunks":["char *line, int *err, gchar **err_info)","{","int\t\tsec;","int\t\tdsec;","char\t\tcap_int[NETSCREEN_MAX_INT_NAME_LENGTH];","char\t\tdirection[2];"],"label":0}
{"cve":"CVE-2017-18344","code_chunks":["}","","static void common_hrtimer_arm(struct k_itimer *timr, ktime_t expires,","\t\t\t       bool absolute, bool sigev_none)","{","\tstruct hrtimer *timer = &timr->it.real.timer;","\tenum hrtimer_mode mode;"],"label":0}
{"cve":"CVE-2023-0302","code_chunks":["value->attr_form = def->attr_form;","value->attr_name = def->attr_name;","value->block.data = NULL;","value->string.content = NULL;","value->string.offset = 0;","",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["            TfLiteTensor* output0;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output0));","      SetTensorToDynamic(output0);","            const TfLiteTensor* input;","      TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","      TfLiteTensor* output1;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &output1));"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)Call_type);","    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t}","","\t\teb_set_infty(t[0]);","\t\teb_copy(t[1], q);","\t\tif (bn_sign(m) == RLC_NEG) {","\t\t\teb_neg(t[1], t[1]);","\t\t}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp8_read_bin(fp8_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"CVE-2018-20178","code_chunks":["{","x = x >> 1;","x = x + 1;","color = -x;","}","else"],"label":1}
{"cve":"CVE-2021-31260","code_chunks":["\t\t","\t\te = stsd_on_child_box((GF_Box*)trak->Media->information->sampleTable->SampleDescription, (GF_Box *) entry, GF_FALSE);","\t\tif (e) return e;","\t\tif(outStreamIndex) *outStreamIndex = gf_list_count(trak->Media->information->sampleTable->SampleDescription->child_boxes);","\t}","\treturn GF_OK;","}"],"label":0}
{"cve":"CVE-2023-25671","code_chunks":["      value_info.resize(output_num + 1, Value{});","    if (!value_info[output_num]) {","            value_info[output_num] = builder_.create<GetResultOp>(","          loc_, base_operation[1], output_name, output_num);","    }","    return value_info[output_num];","  }"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(values, i, val);","            }","            Py_CLEAR(tmp);","        }"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TfLiteIntArray* output_shape = TfLiteIntArrayCreate(input_dims_size);","for (int i = 0; i < input_dims_size; i++) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["RLC_FINALLY {","bn_free(n);","bn_free(_k);","for (i = 0; i < (1 << (EP_WIDTH - 1)); i++) {","ep_free(t[i]);","}","ep_free(q);"],"label":1}
{"cve":"CVE-2018-11219","code_chunks":["size_t ld;","const char *data = luaL_checklstring(L, 2, &ld);","size_t pos = luaL_optinteger(L, 3, 1) - 1;","int n = 0;  \/* number of results *\/","defaultoptions(&h);","while (*fmt) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int util(void) {","int l, code = RLC_ERR;","gt_t a, b, c;","uint8_t bin[24 * RLC_PC_BYTES];",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, SizeOfDimension(filter, 0), 1);","","if (hasBias) {","bias = GetInput(context, node, kBiasTensor);","if (data_type == kTfLiteUInt8 || data_type == kTfLiteInt8) {","TF_LITE_ENSURE_TYPES_EQ(context, bias->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    isinstance = PyObject_IsInstance(obj, (PyObject*)Constant_type);","    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {","        constant value;",""],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["ctx->last_error = PJMEDIA_SDP_EINVER;","","\/* check equal sign *\/","if (*(scanner->curptr+1) != '=') {","on_scanner_error(scanner);","return;","}"],"label":1}
{"cve":"CVE-2016-9841","code_chunks":["\/* copy state to local variables *\/","state = (struct inflate_state FAR *)strm->state;","in = strm->next_in - OFF;","last = in + (strm->avail_in - 5);","out = strm->next_out - OFF;","beg = out - (start - strm->avail_out);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["Subgraph& active_branch_subgraph =","*(*subgraphs)[active_branch_subgraph_index];","for (int i = 0; i < active_branch_subgraph.inputs().size(); ++i) {","const TfLiteTensor* input = GetInput(context, node, i + 1);","TfLiteTensor* subgraph_input =","active_branch_subgraph.tensor(active_branch_subgraph.inputs()[i]);","TF_LITE_ENSURE_EQ(context, input->bytes, subgraph_input->bytes);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\tbn_add(p, p, t);","\t\t\t} else {","\t\t\t\tbn_set_2b(t, -f[i]);","\t\t\t\tbn_sub(p, p, t);","\t\t\t}","\t\t}","\t\tif (f[0] > 0) {"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["static void rdp_read_bitmap_codec_guid(wStream* s, GUID* guid)","{","BYTE g[16];","Stream_Read(s, g, 16);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t}","","\t\t\/* Convert r to affine coordinates. *\/","\t\tep_norm(r, r);","\t} RLC_CATCH_ANY {","\t\tRLC_THROW(ERR_CAUGHT);","\t} RLC_FINALLY {"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["            return 1;","        }","        else {","            int res;","            Py_ssize_t len;","            Py_ssize_t i;","            if (!PyList_Check(tmp)) {"],"label":0}
{"cve":"PYSEC-2019-234","code_chunks":["#undef DEFINE_SORTED_GPU_SPECS","#undef DEFINE_REAL_UNSORTED_GPU_SPECS_INDEX","#undef DEFINE_SUM_UNSORTED_GPU_SPECS_INDEX","#undef DEFINE_REAL_GPU_SPECS","#undef DEFINE_SUM_GPU_SPECS","","}  }"],"label":0}
{"cve":"CVE-2021-32785","code_chunks":["\tif ((reply->str == NULL)","\t\t\t|| (reply->len != strlen(reply->str))) {","\t\toidc_error(r,","\t\t\t\t\"redisCommand reply->len (%d) != strlen(reply->str): '%s'\",","\t\t\t\t(int )reply->len, reply->str);","\t\tgoto end;","\t}"],"label":0}
{"cve":"CVE-2019-19646","code_chunks":["sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);","sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);","jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);","zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,","pTab->aCol[j].zName);"],"label":1}
{"cve":"CVE-2020-4030","code_chunks":["}","","if (NO_PRECISION == precision)","{","length = INT_MAX;","}"],"label":1}
{"cve":"CVE-2019-19333","code_chunks":["                    lys_sub_module_remove_devs_augs((struct lys_module *)models->parsed_submodules[i]);","                    lys_submodule_module_data_free((struct lys_submodule *)models->parsed_submodules[i]);","                    lys_submodule_free((struct lys_submodule *)models->parsed_submodules[i], NULL);","                }","            }","","            models->parsed_submodules_count = i;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["}","else","{","bufobj = PyObject_CallObject(tok->decoding_readline, NULL);","if (bufobj == NULL)","goto error;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\tRLC_THROW(ERR_CAUGHT);","\t\t}","\t\tRLC_FINALLY {","\t\t\tbn_free(n);","\t\t\tbn_free(u);","\t\t\tfor (int i = 0; i < 4; i++) {","\t\t\t\tbn_free(_b[i]);"],"label":0}
{"cve":"CVE-2018-11379","code_chunks":["strncpy (res->file_name, (const char*)","basename, sizeof (res->file_name));","res->file_name[sizeof (res->file_name) - 1] = 0;","rsds_hdr.free ((struct SCV_RSDS_HEADER*) &rsds_hdr);"],"label":1}
{"cve":"CVE-2018-20178","code_chunks":["\tint collen;","\tint replen;","\tint color;","\tint x;","\tint revcode;","\tuint8 * last_line;","\tuint8 * this_line;"],"label":0}
{"cve":"CVE-2024-0322","code_chunks":["ctx->byte_offset = byte_offset - ctx->ac3_buffer_size;","}","}","}","","if (ctx->ac3_buffer_size + pck_size > ctx->ac3_buffer_alloc) {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}"],"label":1}
{"cve":"PYSEC-2022-126","code_chunks":["explicit RangeOp(OpKernelConstruction* context) : OpKernel(context) {}","","void Compute(OpKernelContext* context) override {","const Tensor& start_in = context->input(0);","const Tensor& limit_in = context->input(1);"],"label":0}
{"cve":"CVE-2019-1010208","code_chunks":["PIO_STACK_LOCATION irpSp = IoGetCurrentIrpStackLocation (Irp);","NTSTATUS ntStatus;","","switch (irpSp->Parameters.DeviceIoControl.IoControlCode)","{","if (ValidateIOBufferSize (Irp, sizeof (LONG), ValidateOutput))"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["","#ifdef HAVE_INNETGR","    \/* Use system innetgr() function. *\/","    if (innetgr(netgr, lhost, user, domain) == 1) {","\trc = true;","    } else if (lhost != shost) {","\tif (innetgr(netgr, shost, user, domain) == 1)"],"label":0}
{"cve":"CVE-2018-20179","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2022-39244","code_chunks":["    for (i=0; i<sdp->media_count; ++i) {","\tconst pjmedia_sdp_media *m = sdp->media[i];","\tunsigned j;","","\t\/* Validate the m= line. *\/","\tCHECK( m->desc.media.slen != 0, PJMEDIA_SDP_EINMEDIA);","\tCHECK( m->desc.transport.slen != 0, PJMEDIA_SDP_EINMEDIA);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["expr_ty o = (expr_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_RETURN_NONE;","}","","switch (o->kind) {"],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["inline void StringData::setSize(int len) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\tif (n1 < 0) {","\t\t\t\tfp2_inv_cyc(s, t1[-n1 \/ 2]);","\t\t\t\tfp2_mul(r, r, s);","\t\t\t}","\t\t}","","\t\tfp2_copy(e, r);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* scratch_buffer =","GetTemporary(context, node, data->scratch_tensor_index);","if (IsDynamicTensor(scratch_buffer)) {","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["}","","","static stmt_ty","ast_for_async_stmt(struct compiling *c, const node *n)","{"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["AuthCapsInfo& caps_info, CryptoKey& session_key, uint64_t *auid = NULL) override;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\tbn_free(x);","\t\t\tfor (int i = 0; i < 8; i++) {","\t\t\t\tbn_free(_b[i]);","\t\t\t\tfp24_free(t[i]);","\t\t\t}","\t\t}","\t} else {"],"label":0}
{"cve":"CVE-2022-0476","code_chunks":["static void read_module(RBuffer *b, ut64 addr, struct minidump_module *module) {","st64 o_addr = r_buf_seek (b, 0, R_BUF_CUR);","r_buf_seek (b, addr, R_BUF_SET);","module->base_of_image = r_buf_read_le64 (b);","module->size_of_image = r_buf_read_le32 (b);","module->check_sum = r_buf_read_le32 (b);"],"label":1}
{"cve":"CVE-2019-17177","code_chunks":["size_t mincodes, size_t numcodes, unsigned maxbitlen)","{","unsigned* lengths;","unsigned error = 0;","while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; \/*trim zeroes*\/","tree->maxbitlen = maxbitlen;"],"label":0}
{"cve":"CVE-2023-0302","code_chunks":["\t\t\t\tconst ut8 *nbuf = parse_attr_value (buf, buf_end - buf,","\t\t\t&abbrev->defs[i],","\t\t\t&die->attr_values[i],","\t\t\thdr, debug_str, debug_str_len);","\t\tif (nbuf) {","\t\t\tbuf = nbuf;","\t\t} else {"],"label":0}
{"cve":"CVE-2017-12664","code_chunks":["q+=GetPixelChannels(image);","}","if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)","status=MagickFalse;","}","image_view=DestroyCacheView(image_view);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","","switch (input->type) {","return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);"],"label":0}
{"cve":"CVE-2021-32628","code_chunks":["* or return an error. Automatically generated IDs might","* overflow (and wrap-around) when incrementing the sequence","part. *\/","if (streamCompareID(&id,&s->last_id) <= 0) return C_ERR;","","\/* Add the new entry. *\/","raxIterator ri;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["      context, node, lstm::full::kCellToForgetWeightsTensor);","  const TfLiteTensor* cell_to_output_weights = GetOptionalInputTensor(","      context, node, lstm::full::kCellToOutputWeightsTensor);","","  const TfLiteTensor* input_gate_bias =","      GetOptionalInputTensor(context, node, lstm::full::kInputGateBiasTensor);","  const TfLiteTensor* forget_gate_bias;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["}","if (_PyObject_LookupAttrId(obj, &PyId_body, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"body\\\" missing from ExceptHandler\");"],"label":1}
{"cve":"CVE-2023-28095","code_chunks":["\t\tif (msg->via1->rport)","\t\t\tlen -= msg->via1->rport->size+1; \/* include ';' *\/","\t}","","\t\/* check if received needs to be added or via rport has to be added *\/","\tif (rport_buf || received_test(msg)) {","\t\tif ((received_buf=received_builder(msg,&received_len))==0) {"],"label":0}
{"cve":"CVE-2024-1433","code_chunks":["void EventPluginsManager::loadPlugin(const QString &pluginId)","{","QPluginLoader loader(\"plasmacalendarplugins\/\" + pluginId);","","if (!loader.load()) {","qWarning() << \"Could not create Plasma Calendar Plugin: \" << pluginId;"],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["}","op->len += n;","}","break;","{","ut32 count = 0, *table = NULL, def = 0;"],"label":1}
{"cve":"CVE-2021-41099","code_chunks":["if (type == SDS_TYPE_5) type = SDS_TYPE_8;","","hdrlen = sdsHdrSize(type);","assert(hdrlen + newlen + 1 > len);  \/* Catch size_t overflow *\/","if (oldtype==type) {","newsh = s_realloc(sh, hdrlen+newlen+1);","if (newsh == NULL) return NULL;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["Stream_GetPointer(s, bm);","rdp_read_capability_set_header(s, &length, &type);","WLog_INFO(TAG, \"%s \", receiving ? \"Receiving\" : \"Sending\");","em = bm + length;","","if (Stream_GetRemainingLength(s) < (size_t)(length - 4))"],"label":1}
{"cve":"CVE-2023-0302","code_chunks":["size_t chlen = __str_ansi_length (str + i);","if (chlen > 1) {","r_str_cpy (str + i, str + i + chlen);","} else {","i++;","}"],"label":0}
{"cve":"CVE-2023-30188","code_chunks":["\t\tCString ret;","\t\tif (!m_internal->m_value.is_init() && (m_internal->m_nativeType == CDocBuilderValue_Private::ptString))","\t\t{","\t\t\twchar_t* pValue = m_internal->m_nativeValue.sValue;","\t\t\tsize_t len = wcslen(pValue);","\t\t\twchar_t* buffer = new wchar_t[len + 1];","\t\t\tmemcpy(buffer, pValue, len * sizeof(wchar_t));"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, aux_input_zp,","                                                       aux_input_zp_size));","    }","    node->temporaries->data[kOutputStateZeroPoints] =","        op_data->scratch_tensor_index + kOutputStateZeroPoints;","    TfLiteTensor* output_state_zp;","    TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2019-19947","code_chunks":["struct kvaser_cmd *cmd;","int rc;","","cmd = kzalloc(sizeof(*cmd), GFP_KERNEL);","if (!cmd)","return -ENOMEM;",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputResourceIdTensor,","&input_resource_id_tensor));","int resource_id = input_resource_id_tensor->data.i32[0];","","const TfLiteTensor* key_tensor;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2021-32439","code_chunks":["}","ent->sampleCount --;","","if (nb_packed_samples>1)","nb_extra = 1;","","if (stts->alloc_size <= stts->nb_entries + nb_extra) {"],"label":1}
{"cve":"CVE-2022-0695","code_chunks":["\t\t\tptr->size = ptr->vsize;","\t\t\tptr->add = true;","\t\t \tr_list_append (sections, ptr);","\t\t} else if (lrec.rec_type == LMF_FIXUP_REC) {","\t\t\tRBinReloc *ptr = R_NEW0 (RBinReloc);","\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) != sizeof (lmf_data)) {","\t\t\t\tgoto beach;"],"label":0}
{"cve":"CVE-2017-14175","code_chunks":["    {","      data=(unsigned char *) RelinquishMagickMemory(data);","      ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");","    }","  \/*","    Convert X bitmap image to pixel packets.","  *\/"],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["return FALSE;","","if (external_metadata)","op->external_metadata = g_bytes_new (external_metadata, strlen (external_metadata) + 1);","","return TRUE;","}"],"label":1}
{"cve":"CVE-2022-35970","code_chunks":["       -368.677, -1049.6,  -486.608, 1745.67,  95.4821, 396.261,  -254.368,","       -404.388, 786.57,   -1.94961, 198.63,   -1024.0, 785.183,  235.33,","       -43.0953, 241.605,  -245.314, 470.627,  186.144, 186.319,  -219.522,","       1304.84,  385.977,  -358.874, -755.635, 360.122, -865.936, 54.8904,","       -509.235});","","  AddInputFromArray<quint8>(input_quantized.shape(),"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_EQ(context, bw_input_to_output_weights->dims->size, 2);","  TF_LITE_ENSURE_EQ(context, bw_input_to_output_weights->dims->data[1],","                    n_input);","  TF_LITE_ENSURE_EQ(context, bw_input_to_output_weights->type,","                    fw_input_to_output_weights->type);","","  const TfLiteTensor* fw_recurrent_to_output_weights;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* top_k;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTopK, &top_k));","TF_LITE_ENSURE_TYPES_EQ(context, top_k->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, NumElements(top_k), 1);","const int32 k = *GetTensorData<int32_t>(top_k);",""],"label":0}
{"cve":"CVE-2019-14868","code_chunks":["    } else {","        d = number(str, &last, shp->inarith ? 0 : 10, NULL);","        if (*last && !shp->inarith && sh_isstate(shp, SH_INIT)) {","                        d = number(str, &last, 0, NULL);","        }","        if (*last) {","            if (sh_isstate(shp, SH_INIT)) {"],"label":0}
{"cve":"CVE-2017-6436","code_chunks":["","if (*object + size+1 > bplist->offset_table) {","PLIST_BIN_ERR(\"%s: BPLIST_UID data bytes point outside of valid range\\n\", __func__);","return NULL;","}","return parse_uid_node(object, size);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["                                resolved_axis, temp_buffer));","      } else {","        uint32_t* temp_buffer = static_cast<uint32_t*>(","            context->GetScratchBuffer(context, op_data->temp_buffer_idx));","        TF_LITE_ENSURE(","            context,","            reference_ops::QuantizedMeanOrSum("],"label":0}
{"cve":"CVE-2018-20467","code_chunks":["bmp_info.height);","(void) LogMagickEvent(CoderEvent,GetMagickModule(),","\"  Bits per pixel: %.20g\",(double) bmp_info.bits_per_pixel);","switch (bmp_info.compression)","{","{"],"label":1}
{"cve":"CVE-2018-8794","code_chunks":["int i;","uint16 num_updates;","","in_uint16_le(s, num_updates);   \/* rectangles *\/","","for (i = 0; i < num_updates; i++)"],"label":0}
{"cve":"CVE-2021-44108","code_chunks":["break;","","DEFAULT","ogs_log_hexdump(OGS_LOG_FATAL, (unsigned char *)at, length);","ogs_error(\"Unknown content_type [%s]\",","data->part[data->num_of_part].content_type);","END"],"label":1}
{"cve":"PYSEC-2022-69","code_chunks":["block_size_.resize(block_map_.size());","for (int i = 0; i < original_rank; i++) {","if (block_dim < block_map_.size() && block_map_[block_dim] == i) {","int orig_dim = traversal_order_[original_rank + block_dim];","block_size_[block_dim] = dense_size[orig_dim];","blocked_shape_[i] = dense_shape_[i] \/ dense_size[orig_dim];"],"label":1}
{"cve":"CVE-2020-6017","code_chunks":["#define DECODE_ERROR( ... ) do { \\","ConnectionState_ProblemDetectedLocally( k_ESteamNetConnectionEnd_Misc_InternalError, __VA_ARGS__ ); \\","return false; } while(false)","","#define EXPECT_BYTES(n,pszWhatFor) \\","do { \\"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["reinterpret_cast<TfLiteSpaceToDepthParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInput);","TfLiteTensor* output = GetOutput(context, node, 0);","const TfLiteTensor* axis = GetInput(context, node, kAxis);","if (IsDynamicTensor(output)) {","int axis_value;","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2023-28101","code_chunks":["g_print (_(\"\\nInfo: app %s%s%s branch %s%s%s is end-of-life, with reason:\\n\"),","on, ref_name, off, on, ref_branch, off);","}","g_print (\"   %s\\n\", reason);","}","}",""],"label":1}
{"cve":"CVE-2017-7189","code_chunks":["\t\t\t\t(const struct sockaddr *)&unix_addr, (socklen_t) XtOffsetOf(struct sockaddr_un, sun_path) + xparam->inputs.namelen,","\t\t\t\txparam->op == STREAM_XPORT_OP_CONNECT_ASYNC, xparam->inputs.timeout,","\t\t\t\txparam->want_errortext ? &xparam->outputs.error_text : NULL,","\t\t\t\t&err);","","\t\txparam->outputs.error_code = err;",""],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;"],"label":1}
{"cve":"CVE-2020-14398","code_chunks":["    getsockopt(socket, SOL_SOCKET, SO_ERROR, &so_error, &len);","    if (so_error!=0)","      return FALSE;","#endif","    return TRUE;","  }",""],"label":0}
{"cve":"CVE-2016-5358","code_chunks":["{","\tstatic hf_register_info hf[] = {","\t  { &hf_pktap_hdrlen,","\t    { \"Header length\", \"pktap.hdrlen\",","\t      FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL } },","\t  { &hf_pktap_rectype,","\t    { \"Record type\", \"pktap.rectype\","],"label":0}
{"cve":"CVE-2017-9763","code_chunks":["      fpos += grub_le_to_cpu16 (dirent.direntlen);","    }","","  return 0;","}","","\/* Open a file named NAME and initialize FILE.  *\/"],"label":0}
{"cve":"CVE-2019-18853","code_chunks":["FILE","*file;","","Image","*image,","*next;"],"label":0}
{"cve":"CVE-2020-1921","code_chunks":["const String& setSize(int len) {"],"label":1}
{"cve":"CVE-2020-15202","code_chunks":["auto do_work = [&resource, &bucketized_features, &cached_tree_ids,","&cached_node_ids, &output_partial_logits,","&output_node_ids, latest_tree,","this](int32 start, int32 end) {","for (int32 i = start; i < end; ++i) {","int32 tree_id = cached_tree_ids(i);","int32 node_id = cached_node_ids(i);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["return 1;","}"],"label":1}
{"cve":"CVE-2020-12062","code_chunks":["sink(1, vect, src);","if (setimes) {","setimes = 0;","if (utimes(vect[0], tv) == -1)"],"label":1}
{"cve":"CVE-2021-26927","code_chunks":["with the data in the code stream? *\/","if ((samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)) ||","(!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)) {","jas_eprintf(\"warning: component data type mismatch (IHDR)\\n\");","}","","\/* Is the compression type supported? *\/"],"label":1}
{"cve":"CVE-2022-1587","code_chunks":["BOOL *needs_control_head, BOOL *has_quit, BOOL *has_accept)","{","int length = 1;","int size;","PCRE2_SPTR alternative;"],"label":1}
{"cve":"CVE-2022-29205","code_chunks":["  } else if (type == TF_ATTR_FUNC) {","                                    tensorflow::StringPiece func_name;","    if (!ParseStringValue(key, py_value, status, &func_name)) {","      PyObject* name_attr = PyObject_GetAttrString(py_value, \"name\");","      if (name_attr == nullptr ||","          !ParseStringValue(key, name_attr, status, &func_name)) {","        TF_SetStatus("],"label":0}
{"cve":"CVE-2021-31259","code_chunks":["seig_entry = gf_list_get(sgdesc->group_descriptions, sgdesc->default_description_index-1);","else","seig_entry = gf_list_get(sgdesc->group_descriptions, 0);","if (!seig_entry->key_info[0])","seig_entry = NULL;","break;","}"],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["\t\t\tputs(\"** Bad FIT image format\\n\");","\t\t\treturn 1;","\t\t}","\t\tbootstage_mark(BOOTSTAGE_ID_IDE_FIT_READ_OK);","\t}","#endif",""],"label":0}
{"cve":"CVE-2018-14353","code_chunks":["        break;","      dlen -= 2;","      *pt++ = '\\\\';","      *pt++ = *s;","    }","    else","    {"],"label":0}
{"cve":"CVE-2021-23521","code_chunks":["MemoryBlock data;","MemoryOutputStream mo (data, false);","builder.writeToStream (mo, nullptr);","MemoryInputStream mi (data, false);","","ZipFile zip (mi);",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","const int num_elements = NumElements(input);"],"label":0}
{"cve":"CVE-2016-2315","code_chunks":["if (obj->flags & (UNINTERESTING | SEEN))","return;","obj->flags |= SEEN;","show(obj, path, name, cb_data);","}","","\/*"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteNode* node, int index) {","if (context->tensors != nullptr) {","return &context->tensors[node->inputs->data[index]];","} else {","return context->GetTensor(context, node->inputs->data[index]);","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["    if (lookup_attr_id(obj, &PyId_arg, &tmp) < 0) {","        return 1;","    }","    if (tmp == NULL || tmp == Py_None) {","        Py_CLEAR(tmp);","        arg = NULL;","    }"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["            TfLiteTensor* scratch_buffer;","      TF_LITE_ENSURE_OK(context,","                        GetTemporarySafe(context, node, 0, &scratch_buffer));","      return lstm_eval::EvalFloat(","          input, input_to_input_weights, input_to_forget_weights,","          input_to_cell_weights, input_to_output_weights,","          recurrent_to_input_weights, recurrent_to_forget_weights,"],"label":0}
{"cve":"CVE-2021-22550","code_chunks":["primitives::AllocateUntrustedBuffers(kPoolIncrement, kPoolEntrySize);","for (int i = 0; i < kPoolIncrement; i++) {","if (!buffers[i] ||","!TrustedPrimitives::IsOutsideEnclave(buffers[i], kPoolEntrySize)) {","abort();","}"],"label":1}
{"cve":"CVE-2022-0156","code_chunks":["if (get_function_args(&p, ')', &newargs,","eap->cmdidx == CMD_def ? &argtypes : NULL, FALSE,","NULL, &varargs, &default_args, eap->skip,","eap, line_to_free) == FAIL)","goto errret_2;","whitep = p;",""],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["#if defined(XML_DTD)"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* output_shape;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kOutputShapeTensor, &output_shape));","const TfLiteTensor* weights;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2016-9841","code_chunks":["strm->next_in = in + OFF;","strm->next_out = out + OFF;","strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));","strm->avail_out = (unsigned)(out < end ?","257 + (end - out) : 257 - (out - end));"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["    TfLiteTensor* output;","    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &output));","    TF_LITE_ENSURE_EQ(context, output->bytes, subgraph_output->bytes);","    memcpy(output->data.raw, subgraph_output->data.raw, output->bytes);","  }","  return kTfLiteOk;","}"],"label":0}
{"cve":"CVE-2022-39347","code_chunks":["UINT32 id, UINT32 DesiredAccess, UINT32 CreateDisposition,","UINT32 CreateOptions, UINT32 FileAttributes, UINT32 SharedAccess)","{","DRIVE_FILE* file;","","if (!base_path || (!path && (PathWCharLength > 0)))"],"label":0}
{"cve":"CVE-2022-41911","code_chunks":["string ret;","const T* array = reinterpret_cast<const T*>(data);","","const gtl::InlinedVector<int64_t, 4> shape = tensor_shape.dim_sizes();","if (shape.empty()) {","for (int64_t i = 0; i < limit; ++i) {"],"label":1}
{"cve":"CVE-2022-0630","code_chunks":["mrb_assert(mrb_hash_p(hash));","for (i=a+1; i<lim; i+=2) {","mrb_hash_set(mrb, hash, regs[i], regs[i+1]);","}","mrb_gc_arena_restore(mrb, ai);"],"label":1}
{"cve":"CVE-2020-15214","code_chunks":["int previous_segment_id = -1;","for (int i = 0; i < segment_id_size; i++) {","const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];","if (i == 0) {","TF_LITE_ENSURE_EQ(context, current_segment_id, 0);","} else {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE(context, bw_cell_state != nullptr);","","if (!params->merge_outputs) {","TfLiteTensor* bw_output = GetOutput(context, node, kBwOutputTensor);","TfLiteIntArray* bw_output_size = TfLiteIntArrayCreate(3);","bw_output_size->data[0] = time_major ? max_time : n_batch;","bw_output_size->data[1] = time_major ? n_batch : max_time;"],"label":1}
{"cve":"CVE-2021-40568","code_chunks":["if (si->slice_type > 9) return -1;","","pps_id = gf_bs_read_ue_log(bs, \"pps_id\");","if (pps_id > 255)","return -1;","si->pps = &avc->pps[pps_id];","si->pps->id = pps_id;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        PyErr_SetString(PyExc_TypeError, \"required field \\\"is_async\\\" missing from comprehension\");","        return 1;","    }","    else {","        int res;","        res = obj2ast_int(tmp, &is_async, arena);","        if (res != 0) goto failed;"],"label":0}
{"cve":"CVE-2021-3574","code_chunks":["rows_remaining=image->rows-y;","if ((ssize_t) (y+rows) < (ssize_t) image->rows)","rows_remaining=rows;","for (x=0; x < (ssize_t) image->columns; x+=columns)","{","size_t"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["}","","node->temporaries->data[2] = scratch_tensor_index + 2;","TfLiteTensor* scaling_factors = GetTemporary(context, node, \/*index=*\/2);","scaling_factors->type = kTfLiteFloat32;","scaling_factors->allocation_type = kTfLiteArenaRw;","int scaling_dims[1] = {batch_size};"],"label":1}
{"cve":"CVE-2018-5805","code_chunks":["void CLASS identify()","{","static const short pana[][6] = {","{ 3130, 1743,  4,  0, -6,  0 },","{ 3130, 2055,  4,  0, -6,  0 },"],"label":0}
{"cve":"CVE-2018-14882","code_chunks":["                                  (i & NI_NODEADDR_FLAG_COMPAT) ? \"C\" : \"\",","                                  (i & NI_NODEADDR_FLAG_ALL) ? \"A\" : \"\",","                                  (i & NI_NODEADDR_FLAG_TRUNCATE) ? \"T\" : \"\"));","\t\t\tbreak;","\t\t\tif (needcomma)","\t\t\t\tND_PRINT((ndo,\", \"));","\t\t\tND_PRINT((ndo,\"unknown\"));"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["return 1;","}"],"label":1}
{"cve":"CVE-2023-52267","code_chunks":["LOG_INFO(\"TOO BIG REQUEST WE WILL REFUSE IT! MAX_REQ_SIZE:%d\", MAX_REQ_SIZE);","return -1;","}","LOG_DEBUG(\"read from client: size:%d, content:%.4096s\", read_size, read_buffer);","ssize_t nparsed = http_parser_execute(&_parser, &_settings, read_buffer, read_size);","if (nparsed != read_size) {","std::string err_msg = \"unkonw\";"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["return d;","}","assert(0);","\/* NOTREACHED *\/","#endif","}"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["Network::TransportSocketFactoryPtr XfccIntegrationTest::createClientSslContext(bool mtls) {","const std::string yaml_tls = R\"EOF(","filename: {{ test_rundir }}\/test\/config\/integration\/certs\/cacert.pem","exact: \"lyft.com\"","exact: \"www.lyft.com\""],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t}","\t\t}","\t\tRLC_CATCH_ANY {","\t\t\tRLC_THROW(ERR_CAUGHT);","\t\t}","\t\tRLC_FINALLY {","\t\t\tfor (size_t i = 0; i < w; i++) {"],"label":0}
{"cve":"CVE-2023-4720","code_chunks":["v1 = swf_read_int(read, 8);","val = swf_read_sint(read, 8);","val = (val<<8)&0xFF00;","val |= (v1&0xFF);","return val;","}"],"label":1}
{"cve":"CVE-2016-4997","code_chunks":["if (!ip_checkentry(&e->ip))","return -EINVAL;","","ret = xt_compat_check_entry_offsets(e,","e->target_offset, e->next_offset);","if (ret)","return ret;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tfp24_t r, t0[1 << (EP_WIDTH - 2)];","\tfp24_t s, t1[1 << (EP_WIDTH - 2)];","\tsize_t l, l0, l1;","","\tif (bn_is_zero(b)) {","\t\treturn fp24_exp_cyc(e, c, d);","\t}"],"label":0}
{"cve":"CVE-2022-25297","code_chunks":["(fsFileName.begin()->string() != \".\" &&","fsFileName.begin()->string() != \"..\")))","{","filesystem::path fsUploadPath(utils::toNativePath("],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                stmt_ty val;","                res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"Try field \\\"finalbody\\\" changed size during iteration\");","                    goto failed;","                }"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["    ldout(cct, 0) << \"AuthNoneAuthorizeHandle::verify_authorizer() failed to decode\" << dendl;","    return false;","  }","","  caps_info.allow_all = true;","","  return true;"],"label":0}
{"cve":"PYSEC-2021-846","code_chunks":["output_shape.set_dim(0, output_rows);"],"label":1}
{"cve":"CVE-2019-1010247","code_chunks":["","char *s_poll_interval = NULL;","oidc_util_get_request_parameter(r, \"poll\", &s_poll_interval);","if (s_poll_interval == NULL)","s_poll_interval = \"3000\";"],"label":1}
{"cve":"CVE-2019-11498","code_chunks":["}","else if (!strncmp (dff_chunk_header.ckID, \"DSD \", 4)) {","","if (!config->num_channels) {","error_line (\"%s is not a valid .DFF file!\", infilename);","return WAVPACK_SOFT_ERROR;","}"],"label":1}
{"cve":"CVE-2019-13217","code_chunks":["ady -= abs(base) * adx;","if (x1 > n) x1 = n;","if (x < x1) {","LINE_OP(output[x], inverse_db_table[y]);","for (++x; x < x1; ++x) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["}","int accum_dim_lhs = adj_x ? extended_lhs_shape.Dims(output_rank - 2)",": extended_lhs_shape.Dims(output_rank - 1);","int accum_dim_rhs = adj_y ? extended_rhs_shape.Dims(output_rank - 1)",": extended_rhs_shape.Dims(output_rank - 2);",""],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["op->txt = r_str_newf (\"%s %d\", opdef->txt, op->val);","}","op->len += n;","}","break;","{"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input_tensor));","const TfLiteTensor* padding_matrix;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &padding_matrix));","TfLiteTensor* output_tensor;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output_tensor));"],"label":0}
{"cve":"CVE-2020-11089","code_chunks":["\t\t               \/* TODO: MAX_IRP_THREADS has been thought to avoid a","\t\t                * flooding of pending requests. Use","\t\t                * WaitForMultipleObjects() when available in winpr","\t\t                * for threads.","\t\t                *\/","\t}",""],"label":0}
{"cve":"CVE-2019-14868","code_chunks":["if (ptr) *ptr = (char *)str;","return 0;","}","errno = 0;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\tBYTE numIconCaches;","\tUINT16 numIconCacheEntries;","\tWLog_INFO(TAG, \"WindowListCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));","","\tif (Stream_GetRemainingLength(s) < 7)","\t\treturn FALSE;",""],"label":0}
{"cve":"CVE-2016-7515","code_chunks":["number_planes++;","number_pixels=(MagickSizeType) image->columns*image->rows;","if ((number_pixels*number_planes) != (size_t) (number_pixels*number_planes))","ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");","pixel_info_length=image->columns*image->rows*MagickMax(number_planes,4);","pixel_info=AcquireVirtualMemory(pixel_info_length,sizeof(*pixels));"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["OpData* op_data) {","const TfLiteTensor* input_box_encodings;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorBoxEncodings,","&input_box_encodings));","TF_LITE_ENSURE_EQ(context, input_box_encodings->dims->data[0], kBatchSize);"],"label":0}
{"cve":"CVE-2022-36017","code_chunks":["  AddInputFromArray<float>(TensorShape({}), {-1.0f});","  AddInputFromArray<float>(TensorShape({}), {1.0f});","  TF_ASSERT_OK(RunOpKernel());","  Tensor expected(allocator(), DT_QUINT8, TensorShape({value_count}));","  test::FillValues<quint8>(&expected, {0, 128, 255});","  test::ExpectTensorEqual<quint8>(expected, *GetOutput(0));","  test::ExpectTensorEqual<float>(test::AsScalar<float>(-1.0f), *GetOutput(1));"],"label":0}
{"cve":"CVE-2023-26485","code_chunks":["    break;","","    CR();","    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),","        false, LITERAL);","    CR();","    break;"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["switch (ea.cmdidx)","{","ea.arg = p;","line = compile_nested_function(&ea, &cctx, &line_to_free);","break;","","line = compile_return(p, check_return_type,"],"label":1}
{"cve":"PYSEC-2021-815","code_chunks":["    OP_REQUIRES(context, node_id_range_t->dim_size(0) == 2,","                errors::InvalidArgument(","                    \"node_id_range must be a rank 1 tensor with shape=[2], but \"","                    \"given node_id_range has shape \",","                    node_id_range_t->dim_size(0), \" on its first dim\"));","    const auto node_id_range = node_id_range_t->vec<int32>();","    const int32_t node_id_first = node_id_range(0);      const int32_t node_id_last = node_id_range(1);           OpInputList stats_summary_list;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["_m = naf1 + l - 1;","","fp2_set_dig(r, 1);","for (i = l - 1; i >= 0; i--, _k--, _m--) {","fp2_sqr(r, r);","","n0 = *_k;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["} else {","PyObject* buf = tok->decoding_buffer;","if (buf == NULL) {","buf = PyObject_CallObject(tok->decoding_readline, NULL);","if (buf == NULL) {","error_ret(tok);","return 1;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_desktop_composition_capability_set(wStream* s, UINT16 length,","rdpSettings* settings)","{","if (length < 6)","return FALSE;","","Stream_Seek_UINT16(s); \/* compDeskSupportLevel (2 bytes) *\/"],"label":1}
{"cve":"CVE-2024-0964","code_chunks":["s EmptyQueue","from typing import TYPE_CHECKING, Any, AsyncIterator, Dict, List, Optional, Type","","import fastapi","import httpx","import markupsafe"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        if (_PyObject_LookupAttrId(obj, &PyId_key, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"key\\\" missing from DictComp\");","            return 1;","        }"],"label":0}
{"cve":"CVE-2022-40138","code_chunks":["CAPTURE_IP(calleeBlock->lazyCompile(runtime));","curCodeBlock = calleeBlock;","CAPTURE_IP_SET();","goto tailCall;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2022-29369","code_chunks":["}","","\/* NaN and void values are not comparable with anything. *\/","if (isnan(num1) || isnan(num2)) {","return -1;","}"],"label":1}
{"cve":"CVE-2023-0433","code_chunks":["return FALSE;","if (*p == COM_START)","{","if (*(ml_get(lnum) + leader1_len) == NUL)","return FALSE;","if (leader2_flags == NULL || leader2_len == 0)","return FALSE;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp9_write_bin(uint8_t *bin, int len, const fp9_t a);"],"label":1}
{"cve":"CVE-2020-1913","code_chunks":["  }","","#ifdef HERMESVM_INDIRECT_THREADING","  static void *opcodeDispatch[] = {","#define DEFINE_OPCODE(name) &&case_##name,","#include \"hermes\/BCGen\/HBC\/BytecodeList.def\"","      &&case__last};"],"label":0}
{"cve":"CVE-2021-29609","code_chunks":["std::vector<T> out_values;","const int num_dims = a_shape->dim_size(0);","","int64 i = 0, j = 0;","T s;","while (i < a_nnz && j < b_nnz) {"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  }","","      output->type = kTfLiteInt64;","","      if (!IsConstantTensor(cond_tensor)) {","    SetTensorToDynamic(output);","    return kTfLiteOk;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["}","}","","TfLiteTensor* fw_output = GetOutput(context, node, kFwOutputTensor);","TfLiteIntArray* fw_output_size_array = TfLiteIntArrayCreate(3);","fw_output_size_array->data[0] = (time_major) ? max_time : batch_size;","fw_output_size_array->data[1] = (time_major) ? batch_size : max_time;"],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["int status;","debug_decl(sudo_auth_end_session, SUDOERS_DEBUG_AUTH);","","for (auth = auth_switch; auth->name; auth++) {","if (auth->end_session && !IS_DISABLED(auth)) {","status = (auth->end_session)(auth);"],"label":0}
{"cve":"CVE-2022-0359","code_chunks":["    return s;","}","#endif","","\/*"," * Read the 'wildmode' option, fill wim_flags[]."," *\/"],"label":0}
{"cve":"CVE-2023-1264","code_chunks":["vgetorpeek(int advance)","{","int\t\tc, c1;","int\t\ttimedout = FALSE;\t\t\t\t\t\t\t\t\t\t\t    int\t\tmapdepth = 0;\t\t    int\t\tmode_deleted = FALSE;       int\t\tnew_wcol, new_wrow;","#ifdef FEAT_GUI","int\t\tshape_changed = FALSE;  #endif"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2023-22742","code_chunks":["cert.type |= GIT_CERT_SSH_SHA256;","memcpy(&cert.hash_sha256, key, 32);","}","#endif","","key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA1);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["        }","        if (lookup_attr_id(obj, &PyId_orelse, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"orelse\\\" missing from If\");","            return 1;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep2_mul_basic(ep2_t r, const ep2_t p, const bn_t k) {","int i, l;","ep2_t t;","","ep2_null(t);"],"label":1}
{"cve":"CVE-2019-20392","code_chunks":["lys_getnext_data(const struct lys_module *mod, const struct lys_node *parent, const char *name, int nam_len,","LYS_NODE type, const struct lys_node **ret)","{","const struct lys_node *node;",""],"label":1}
{"cve":"CVE-2023-27600","code_chunks":["\t\t\t\t\t\tfound.len++;","\t\t\t\t\t}","","\t\t\t\t\t\/* when trimming the very last payload, avoid trailing ws *\/","\t\t\t\t\tif (cur == lmp->u.value + lmp->len) {","\t\t\t\t\t\ttmp = found.s;","\t\t\t\t\t\twhile (*(--tmp) == ' ') {"],"label":0}
{"cve":"CVE-2022-40299","code_chunks":["  if (pi->language!= LANG_SINGULAR)","  {","    Print(\"cannot edit type %d\\n\",pi->language);","    close(f);","    f=NULL;","  }","  else"],"label":0}
{"cve":"CVE-2023-35852","code_chunks":["int allow_save = 1;","if (ConfGetBool(\"datasets.rules.allow-write\", &allow_save)) {","if (!allow_save) {","SCLogError(SC_ERR_INVALID_SIGNATURE,","\"Rules containing save\/state datasets have been disabled\");","return -1;"],"label":0}
{"cve":"CVE-2021-29527","code_chunks":["return;","}","","CHECK_GT(output_width, 0);"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["setSanMatchers(std::vector<envoy::type::matcher::v3::StringMatcher> san_matchers) {"],"label":1}
{"cve":"CVE-2019-19324","code_chunks":["    decoded_pl = malloc( pl_desize + 1 );","","    if( !decoded_pl ) {","        return ENOMEM;","    }","","    memset( decoded_pl, 0, ( pl_desize + 1 ) );"],"label":0}
{"cve":"CVE-2018-6767","code_chunks":["","if (do_rf64) {","strncpy (ds64hdr.ckID, \"ds64\", sizeof (ds64hdr.ckID));","ds64hdr.ckSize = sizeof (ds64_chunk);","CLEAR (ds64_chunk);","ds64_chunk.riffSize64 = total_riff_bytes;","ds64_chunk.dataSize64 = total_data_bytes;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["    TF_LITE_ENSURE_OK(","        context, GetTemporarySafe(context, node, \/*index=*\/4, &zero_points));","    zero_points->type = kTfLiteInt32;","    zero_points->allocation_type = kTfLiteArenaRw;","    int zero_points_dims[1] = {batch_size};","    if (!TfLiteIntArrayEqualsArray(zero_points->dims, 1, zero_points_dims)) {","      TfLiteIntArray* zero_points_size = TfLiteIntArrayCreate(1);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2020-23928","code_chunks":["\t\tISOM_DECREASE_SIZE(ptr, 8)","\t\tsre->first_segment = gf_bs_read_u32(bs);","\t\tsre->fragment_per_segment = gf_bs_read_u32(bs);","\t\tgf_list_insert(ptr->segment_run_entry_table, sre, i);","\t}","","\treturn GF_OK;"],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["* that to happen, a parameter entity parsing handler must have attempted","* to suspend the parser, which fails and raises an error.  The parser can","* be aborted, but can't be suspended.","*\/","if (parser->m_parsingStatus.parsing == XML_FINISHED)","return XML_ERROR_ABORTED;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteUnpackParams* data =","reinterpret_cast<TfLiteUnpackParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","switch (input->type) {","case kTfLiteFloat32: {","UnpackImpl<float>(context, node, input, data->num, data->axis);"],"label":1}
{"cve":"CVE-2019-13308","code_chunks":["if (status == MagickFalse)","continue;","Ar=GetCacheViewVirtualPixels(Ar_view,0,y,","MagickMax(Ar_image->columns,Cr_image->columns),1,exception);","Ai=GetCacheViewVirtualPixels(Ai_view,0,y,","MagickMax(Ai_image->columns,Ci_image->columns),1,exception);"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["ErrorSourceProto error_source_proto;","error_source_proto.set_error_source(error_source);","status.SetPayload(tensorflow::kErrorSource,","error_source_proto.SerializeAsString());","}","}",""],"label":1}
{"cve":"CVE-2021-4173","code_chunks":["\tif (name == NULL && (fudi.fd_dict == NULL || !paren) && !eap->skip)","\t{","\t    \/*","\t     * Return on an invalid expression in braces, unless the expression","\t     * evaluation has been cancelled due to an aborting error, an","\t     * interrupt, or an exception.","\t     *\/"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"finalbody\\\" missing from Try\");","            return 1;","        }","        else {"],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["if (fit_image_get_data_and_size(fit, image_noffset, &data, &size)) {","err_msg = \"Can't get image data\/size\";","printf(\"error!\\n%s for '%s' hash node in '%s' image node\\n\",","err_msg, fit_get_name(fit, noffset, NULL),","fit_get_name(fit, image_noffset, NULL));","return 0;"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["","CephXServiceTicketInfo auth_ticket_info;","","bool isvalid = cephx_verify_authorizer(cct, keys, iter, auth_ticket_info, authorizer_reply);","","if (isvalid) {","caps_info = auth_ticket_info.ticket.caps;"],"label":1}
{"cve":"PYSEC-2022-103","code_chunks":["platform_info.xla_device_metadata()->client(),","platform_info.xla_device_metadata()->jit_device_type());","return Status::OK();","}","","auto platform =","se::MultiPlatformManager::PlatformWithId(platform_info.platform_id());"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["if (*hmi_data > 0x7f) {","do {","note[hmi_tmp].length = (note[hmi_tmp].length << 7) | (*hmi_data & 0x7F);","hmi_data++;","hmi_track_offset[i]++;"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["const char *next = start; \/* XmlContentTok doesn't always set the last arg *\/","int tok = XmlContentTok(parser->m_encoding, start, end, &next);","switch (tok) {","#ifdef XML_DTD"],"label":1}
{"cve":"CVE-2023-26157","code_chunks":["{","  r2007_page *page = pages_map;","","  while (page != NULL)","    {","      if (page->id == id)","        break;"],"label":0}
{"cve":"PYSEC-2022-101","code_chunks":["","if (props_->fwd_type_fn == nullptr) {","return;","}","","std::vector<Node*> input_nodes(props_->input_types.size(), nullptr);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\twhile (radix > 0) {","\t\tif (radix != 1 && radix % 2 == 1)","\t\t\treturn 0;","\t\tradix = radix \/ 2;","\t}","\treturn 1;","}"],"label":0}
{"cve":"CVE-2022-23586","code_chunks":["        gnode->set_op(FunctionLibraryDefinition::kDeviceArgOp);","      } else {","        gnode->set_op(FunctionLibraryDefinition::kArgOp);","      }","      DataType dtype = arg_def.is_ref() ? MakeRefType(dtypes[i]) : dtypes[i];","      AddAttr(\"T\", dtype, gnode);","      AddAttr(\"index\", arg_index, gnode);"],"label":0}
{"cve":"CVE-2020-15474","code_chunks":["u_int16_t p_offset, u_int16_t certificate_len) {","struct ndpi_packet_struct *packet = &flow->packet;","u_int num_found = 0, i;","char buffer[64] = { '\\0' }, rdnSeqBuf[1024] = { '\\0' };","u_int rdn_len = 0;","","#ifdef DEBUG_TLS"],"label":1}
{"cve":"CVE-2019-16718","code_chunks":["*p = 0;","if (r->bin->prefix) {","r_cons_printf (\"k bin\/pe\/%s\/%d=%s.%s\\n\",","module, symbol->ordinal, r->bin->prefix, symname);","} else {","r_cons_printf (\"k bin\/pe\/%s\/%d=%s\\n\","],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["\t\treturn 0;","","\t\/* If DPL is deployed, set is_dpl_apply_status as TRUE. *\/","\tif (!get_dpl_apply_status())","\t\tis_dpl_apply_status = true;","","\t\/*"],"label":0}
{"cve":"CVE-2021-24025","code_chunks":["          cipher_ctx,","          nullptr,","          &result_len,","          (unsigned char*)aad.data(),","          aad.size())) {","    raise_warning(\"Setting of additional application data failed\");","    return false;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":[],"label":1}
{"cve":"CVE-2019-12973","code_chunks":["","x = y = 0U;","while (y < height) {","int c = getc(IN);","if (c == EOF) {"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  if (has_bias) {","    bias = GetOptionalInputTensor(context, node, kBiasTensor);","    if (bias) {","      if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {","        TF_LITE_ENSURE_TYPES_EQ(context, bias->type, kTfLiteInt32);","        if (input->type == kTfLiteInt8) {","          TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);"],"label":0}
{"cve":"CVE-2021-38597","code_chunks":["","#ifdef HAVE_OCSP","\/* trust for the lifetime of the responder's cert*\/","if (cert->ocspNoCheckSet && verify == VERIFY_OCSP)","verify = NO_VERIFY;","#endif"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* fft_length;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFftLengthTensor, &fft_length));","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);"],"label":0}
{"cve":"CVE-2021-37688","code_chunks":["} else {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\tif (n > 0) {","\t\t\tep4_add(r, r, table[n \/ 2]);","\t\t}","\t\tif (n < 0) {","\t\t\tep4_sub(r, r, table[-n \/ 2]);","\t\t}","\t}"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"arg\\\" missing from arg\");","return 1;","}","else {"],"label":0}
{"cve":"CVE-2018-6340","code_chunks":["    const char *hostname = LMCD_SERVER_HOSTNAME(instance);","    in_port_t port = LMCD_SERVER_PORT(instance);","","    stat = stats + server_id;","","    Array server_stats = memcache_build_stats(&data->m_memcache, stat, &ret);","    if (ret != MEMCACHED_SUCCESS) {"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["                PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {"],"label":0}
{"cve":"CVE-2020-1898","code_chunks":["V::vectorAppend(ret, unserializeThing());"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["PyObject*","ast2obj_alias(void* _o)","{","    alias_ty o = (alias_ty)_o;","    PyObject *result = NULL, *value = NULL;","    if (!o) {","        Py_RETURN_NONE;"],"label":0}
{"cve":"CVE-2021-25940","code_chunks":["}","","void AuthenticationFeature::collectOptions(std::shared_ptr<ProgramOptions> options) {","  options->addOldOption(\"server.disable-authentication\",","                        \"server.authentication\");","  options->addOldOption(\"server.disable-authentication-unix-sockets\",","                        \"server.authentication-unix-sockets\");"],"label":0}
{"cve":"CVE-2023-32233","code_chunks":["{","struct nft_dynset *priv = nft_expr_priv(expr);","","priv->set->use++;","}","","static void nft_dynset_destroy(const struct nft_ctx *ctx,"],"label":1}
{"cve":"CVE-2022-45909","code_chunks":["            string s ;","            meta.toMessageFormat(s) ;","            msg_destroy(m) ;    ","            string data = s + \"|\" + pData->getTransactionId() + \"|Msg sent:|\" + DR_CRLF + encodedMessage ;","","            m_pController->getClientController()->route_api_response( pData->getClientMsgId(), \"OK\", data ) ;"," "],"label":0}
{"cve":"CVE-2016-9392","code_chunks":["}","if (!siz->width || !siz->height || !siz->tilewidth ||","!siz->tileheight || !siz->numcomps || siz->numcomps > 16384) {","return -1;","}","if (siz->tilexoff >= siz->width || siz->tileyoff >= siz->height) {"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["  ldout(async_msgr->cct, 10) << __func__ << \" \" << seq << dendl;","  std::lock_guard<std::mutex> l(write_lock);","  if (out_q.count(CEPH_MSG_PRIO_HIGHEST) == 0)","    return;","  list<pair<bufferlist, Message*> >& rq = out_q[CEPH_MSG_PRIO_HIGHEST];","  while (!rq.empty()) {","    pair<bufferlist, Message*> p = rq.front();"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["    int blankline, nonascii;","","    *p_start = *p_end = NULL;","    tok->start = NULL;","    blankline = 0;","","    \/* Get indentation level *\/"],"label":0}
{"cve":"CVE-2016-8649","code_chunks":["\tstatus = 1;","\tret = lxc_write_nointr(ipc_socket, &status, sizeof(status));","\tif (ret != sizeof(status)) {","\t\tERROR(\"Error using IPC to notify initial process for initialization (1): %s.\", strerror(errno));","\t\tshutdown(ipc_socket, SHUT_RDWR);","\t\trexit(-1);","\t}"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      return EvalImpl<kernel_type, kTfLiteUInt8>(context, node);","      return EvalImpl<kernel_type, kTfLiteInt8>(context, node);","      return EvalImpl<kernel_type, kTfLiteInt16>(context, node);","      TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",","                         TfLiteTypeGetName(input->type));","      return kTfLiteError;","  }"],"label":0}
{"cve":"CVE-2023-26123","code_chunks":["#endif","#if defined(PLATFORM_WEB)","if (strchr(text, '\\'') != NULL) TRACELOG(LOG_WARNING, \"SYSTEM: Provided Clipboard could be potentially malicious, avoid [\\'] character\");","else emscripten_run_script(TextFormat(\"navigator.clipboard.writeText('%s')\", text));","#endif","}"],"label":0}
{"cve":"CVE-2021-41208","code_chunks":["                errors::InvalidArgument(","                    \"feature_indices dim0 should be <= gradients dim0 * \"","                    \"feature_shape[1]. features_indices dim0: \",","                    num_sparse_entries, \" gradients dim0: \", batch_size,","                    \", feature_shape[1]: \", feature_dims));","","        StatsPartitionMap stats_map;"],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["\tif (fstat(fd, sbuf) < 0) {","\t\tfprintf(stderr, \"%s: Can't stat %s: %s\\n\",","\t\t\tcmdname, fname, strerror(errno));","\t\tgoto err;","\t}","","\tif (size_inc) {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty value;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE(context,","                 data->type == kTfLiteInt32 || data->type == kTfLiteFloat32);","  TF_LITE_ENSURE_EQ(context, segment_ids->type, kTfLiteInt32);","","  if (!IsConstantTensor(data) || !IsConstantTensor(segment_ids)) {","    SetTensorToDynamic(output);","    return kTfLiteOk;"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["  const int num_requested_algos = 5;","  int num_returned_algos = 0;","  cudnnConvolutionBwdDataAlgoPerf_t perf_results[num_requested_algos];","","  RETURN_IF_CUDNN_ERROR(cudnnGetConvolutionBackwardDataAlgorithm_v7(","      cudnn.handle(), filter.handle(), output_nd.handle(), conv.handle(),","      input_nd.handle(), num_requested_algos, &num_returned_algos,"],"label":0}
{"cve":"CVE-2022-23547","code_chunks":["\/* Get pointer to the string in the message *\/","value.ptr = ((char*)buf + ATTR_HDR_LEN + 4);","value.slen = attr->hdr.length - 4;","\/* Make sure the length is never negative *\/","if (value.slen < 0)"],"label":1}
{"cve":"CVE-2022-43995","code_chunks":["#endif","","int","sudo_passwd_cleanup(struct passwd *pw, sudo_auth *auth, bool force)","{","    char *pw_epasswd = auth->data;","    debug_decl(sudo_passwd_cleanup, SUDOERS_DEBUG_AUTH);"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["if (bits & 0x04) {","LOGVAL(ctx, LYE_TOOMANY, LY_VLOG_LYD, parent, \"value attributes\", parent->schema->name);","return -1;","} else if (parent->schema->nodetype & LYS_LIST) {","LOGVAL(ctx, LYE_INATTR, LY_VLOG_LYD, parent, attr->name);","return -1;"],"label":1}
{"cve":"CVE-2016-7514","code_chunks":["","ResetMagickMemory(&stream, 0, sizeof(z_stream));","stream.data_type=Z_BINARY;","(void) ReadBlob(image,compact_size,compact_pixels);","","stream.next_in=(Bytef *)compact_pixels;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","","LeakyReluOpData* data = reinterpret_cast<LeakyReluOpData*>(node->user_data);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    int* class_indices = sorted_class_indices.data() + row * num_classes;","    DecreasingPartialArgSort(box_scores, num_classes, num_categories_per_anchor,","                             class_indices);","    max_scores[row] = box_scores[class_indices[0]];","  }","    std::vector<int> selected;","  TF_LITE_ENSURE_STATUS(NonMaxSuppressionSingleClassHelper("],"label":0}
{"cve":"CVE-2023-39976","code_chunks":["chunk += sizeof(uint32_t);","","\/* log message *\/","msg_len = qb_vsnprintf_serialize(chunk, max_size, cs->format, ap);"],"label":1}
{"cve":"CVE-2018-5808","code_chunks":["}","","void CLASS parse_qt (int end)","{","  unsigned save, size;","  char tag[4];",""],"label":0}
{"cve":"CVE-2020-15471","code_chunks":["int diff; \/* No unsigned ! *\/","u_int32_t a1 = a + 4;","","diff = ndpi_min(packet->payload_packet_len-a1, sizeof(flow->initial_binary_bytes));","","if(diff > 0) {","memcpy(&flow->initial_binary_bytes, &packet->payload[a1], diff);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2022-23606","code_chunks":["sotwOrDelta() == Grpc::SotwOrDelta::UnifiedSotw","? \"GRPC\"",": \"DELTA_GRPC\")),","cluster_creator_(&ConfigHelper::buildStaticCluster) {","if (sotwOrDelta() == Grpc::SotwOrDelta::UnifiedSotw ||","sotwOrDelta() == Grpc::SotwOrDelta::UnifiedDelta) {"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["* @param[in] data2 If \\p type is #LY_TYPE_BITS: (int *) type bit field length,","*                                #LY_TYPE_DEC64: (uint8_t *) number of fraction digits (position of the floating point),","*                                otherwise ignored.","* @return 1 if a conversion took place, 0 if the value was kept the same.","*\/","static int","make_canonical(struct ly_ctx *ctx, int type, const char **value, void *data1, void *data2)"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\/* Compute the w-NAF representation of k. *\/","\t\tl = sizeof(naf);","\t\tbn_rec_naf(naf, &l, k, EP_WIDTH);","","\t\tep4_set_infty(r);","\t\tfor (i = l - 1; i >= 0; i--) {","\t\t\tep4_dbl(r, r);"],"label":0}
{"cve":"CVE-2022-24950","code_chunks":["FATAL_FAIL(sockFd);","initSocket(sockFd);","remote.sun_family = AF_UNIX;","strcpy(remote.sun_path, pipePath.c_str());","","VLOG(3) << \"Connecting to \" << endpoint << \" with fd \" << sockFd;","int result ="],"label":1}
{"cve":"CVE-2016-10161","code_chunks":["\tINIT_PZVAL(*rval);","","\tif (!strncmp(start + 2, \"NAN\", 3)) {","\t\tZVAL_DOUBLE(*rval, php_get_nan());","\t} else if (!strncmp(start + 2, \"INF\", 3)) {","\t\tZVAL_DOUBLE(*rval, php_get_inf());","\t} else if (!strncmp(start + 2, \"-INF\", 4)) {"],"label":0}
{"cve":"CVE-2022-24792","code_chunks":["\t    ","\t    return (no_loop? PJ_EEOF: PJ_SUCCESS);","","\t} else if (fport->cb) {","\t    status = (*fport->cb)(this_port, fport->base.port_data.pdata);","\t}",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","  const TfLiteTensor* value;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kValueTensor, &value));","","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));"],"label":0}
{"cve":"CVE-2018-7254","code_chunks":["                    formatstr, caf_audio_format.mFormatFlags, caf_audio_format.mSampleRate);","                error_line (\"packet = %d bytes and %d frames\",","                    caf_audio_format.mBytesPerPacket, caf_audio_format.mFramesPerPacket);","                error_line (\"channels per frame = %d, bits per channel = %d\",","                    caf_audio_format.mChannelsPerFrame, caf_audio_format.mBitsPerChannel);","            }",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["(NumInputs(node) == 4)","? GetOptionalInputTensor(context, node, kBiasTensor)",": nullptr;","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","TfLiteTensor* col2im = data->has_col2im"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* cond_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputConditionTensor,","&cond_tensor));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["\/\/ Make sure there is no re-scaling needed for Int8 quantized kernel. This","VectorOfTensors<int8_t> all_inputs(*context, *node->inputs);","for (int i = 0; i < node->inputs->size; ++i) {","const TfLiteTensor* t = GetInput(context, node, i);","TF_LITE_ENSURE_EQ(context, t->params.scale, output->params.scale);","TF_LITE_ENSURE_EQ(context, t->params.zero_point,","output->params.zero_point);"],"label":1}
{"cve":"CVE-2016-6875","code_chunks":["bool hasVarTag );"],"label":1}
{"cve":"CVE-2018-14357","code_chunks":["void imap_quote_string(char *dest, size_t dlen, const char *src)","{","static const char quote[] = \"\\\"\\\\\";","char *pt = dest;","const char *s = src;",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteIntArray* input_dims = input->dims;","int input_dims_size = input_dims->size;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["          \/*aux_input_zp=*\/nullptr,","          GetTemporary(context, node, kOutputStateZeroPoints), row_sums,","          row_sums_size, &op_data->compute_row_sums,","          CpuBackendContext::GetFromContext(context));","    }","      TF_LITE_KERNEL_LOG(context, \"Type %s is not currently supported.\",","                         TfLiteTypeGetName(input_to_output_weights->type));"],"label":0}
{"cve":"PYSEC-2021-731","code_chunks":["TfLiteIntArray* TfLiteIntArrayCreate(int size) {","TfLiteIntArray* ret =","(TfLiteIntArray*)malloc(TfLiteIntArrayGetSizeInBytes(size));","ret->size = size;","return ret;","}"],"label":1}
{"cve":"CVE-2023-0302","code_chunks":["value->kind = DW_AT_KIND_STRING;","value->string.offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end);","if (debug_str && value->string.offset < debug_str_len) {","const char *ds = (const char *)(debug_str + value->string.offset);","value->string.content = strdup (ds); \t\t} else {","value->string.content = NULL; \t\t}","break;"],"label":1}
{"cve":"CVE-2018-5808","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[]={0,0};","","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2016-10161","code_chunks":["yych = *++YYCURSOR;","if (yych != '{') goto yy18;","++YYCURSOR;","#line 678 \"ext\/standard\/var_unserializer.re\"","{","long elements = parse_iv(start + 2);","\/* use iv() not uiv() in order to check data range *\/"],"label":1}
{"cve":"CVE-2023-51042","code_chunks":[" *"," * @parser: command submission parser context"," * @addr: VM address"," * @bo: resulting BO of the mapping found"," * @map: Placeholder to return found BO mapping"," *"," * Search the buffer objects in the command submission context for a certain"],"label":0}
{"cve":"CVE-2020-11089","code_chunks":["Stream_Seek(irp->input, 28);","\/* DesiredAccess(4) AllocationSize(8), FileAttributes(4) *\/","\/* SharedAccess(4) CreateDisposition(4), CreateOptions(4) *\/","Stream_Read_UINT32(irp->input, PathLength);","status = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)Stream_Pointer(irp->input), PathLength \/ 2,","&path, 0, NULL, NULL);"],"label":1}
{"cve":"CVE-2022-28927","code_chunks":["    {","        if(ext.remove_emoji)","            x.Remark = trim(removeEmoji(x.Remark));","","        nodeRename(x, ext.rename_array, ext);","","        if(ext.add_emoji)"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","node->temporaries->data[kInputQuantized] =","op_data->scratch_tensor_index + kInputQuantized;","TfLiteTensor* input_quantized =","GetTemporary(context, node, kInputQuantized);"],"label":1}
{"cve":"CVE-2018-1000050","code_chunks":["         for (j=0; j < n; ++j)","            f->channel_buffers[i][left+j] =","               f->channel_buffers[i][left+j]*w[    j] +","               f->previous_window[i][     j]*w[n-1-j];","      }","   }",""],"label":0}
{"cve":"PYSEC-2022-140","code_chunks":["DataType dt = output.dtype();","const auto& original_output_shape = output.shape();","int64_t output_size = DataTypeSize(BaseType(dt));","int num_dims = std::max(1, original_output_shape.dim_size());","auto output_shape = MaybeGetMinimumShape(original_output_shape, num_dims,","found_unknown_shapes);"],"label":1}
{"cve":"CVE-2022-48571","code_chunks":["        pthread_mutex_unlock(&c->thread->stats.mutex);","","        \/* Beginning of UDP packet is the request ID; save it. *\/","        c->request_id = buf[0] * 256 + buf[1];","","        \/* If this is a multi-packet request, drop it. *\/","        if (buf[4] != 0 || buf[5] != 1) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["bn_t a, b, c, d[3], e[3];","crt_t crt;","dig_t f;","int len;","","bn_null(a);","bn_null(b);"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["  if (opts.forcePHPArrays)      vs.setForcePHPArrays();","  if (opts.warnOnHackArrays)    vs.setHackWarn();","  if (opts.warnOnPHPArrays)     vs.setPHPWarn();","  if (opts.ignoreLateInit)      vs.setIgnoreLateInit();","  if (opts.serializeProvenanceAndLegacy) vs.setSerializeProvenanceAndLegacy();","    return vs.serialize(value, true, true);","}"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* input_weights;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","const TfLiteTensor* recurrent_weights;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2022-24786","code_chunks":["p = (pj_uint8_t*)hdr + sizeof(*hdr);","for (i = 0; i < sli_cnt; ++i) {","\/* 'first' takes 13 bit *\/","*p++  = (pj_uint8_t)((sli[i].first >> 5) & 0xFF);   \/* 8 MSB bits *\/","*p    = (pj_uint8_t)((sli[i].first & 31) << 3);\t    \/* 5 LSB bits *\/","\/* 'number' takes 13 bit *\/"],"label":1}
{"cve":"CVE-2019-19905","code_chunks":["\/* convert any tab to space, condense consecutive spaces into one,","remove leading and trailing spaces (exception: if there is nothing","but spaces, one of them will be kept even though it leads\/trails) *\/","mungspaces(strcpy(buf, origbuf));","","\/* find the '=' or ':' *\/","bufp = find_optparam(buf);"],"label":1}
{"cve":"CVE-2018-20406","code_chunks":["};","","static PyObject *","UnpicklerMemoProxy_New(UnpicklerObject *unpickler)","{","    UnpicklerMemoProxyObject *self;",""],"label":0}
{"cve":"CVE-2018-20181","code_chunks":["\t\t       \"cssp_read_tsrequest(), expected BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, got %x\",","\t\t       s->p[0]);","\t\treturn False;","\t}","","\t\tif (s->p[1] < 0x80)","\t\tlength = s->p[1] - 2;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["GetTemporary(context, node, kCellStateQuantized);","cell_state_quantized->type = input_to_output_weights->type;","cell_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(cell_state_quantized->dims, cell_state->dims)) {"],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["\t\t       char *const argv[])","{","\tchar *boot_device = NULL;","\tint idx;","\tulong addr, offset = 0;","\tstruct mtd_info *mtd;","#if defined(CONFIG_CMD_MTDPARTS)"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (positions->type == kTfLiteInt32) {","switch (input->type) {"],"label":1}
{"cve":"CVE-2021-30145","code_chunks":["goto exit_mf;","}","","char *fname = talloc_size(mf, strlen(filename) + 32);","","#if HAVE_GLOB","if (!strchr(filename, '%')) {"],"label":1}
{"cve":"CVE-2023-0302","code_chunks":["while (str[i]) {","size_t chlen = __str_ansi_length (str + i);","if (chlen > 1) {","r_str_cpy (str + i + 1, str + i + chlen);","}"],"label":1}
{"cve":"CVE-2020-5209","code_chunks":["            continue;","        raw_printf(\"        %s\", winchoices[i].procs->name);","    }","","    nh_terminate(EXIT_FAILURE);","}",""],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["assertx(key);","assertx(salt);","","char random_salt[12];","if (!*salt) {","memcpy(random_salt,\"$1$\",3);"],"label":0}
{"cve":"CVE-2019-15903","code_chunks":["int tok","= XmlPrologTok(parser->m_internalEncoding, textStart, textEnd, &next);","result = doProlog(parser, parser->m_internalEncoding, textStart, textEnd,","tok, next, &next, XML_FALSE);","} else","#endif \/* XML_DTD *\/","result = doContent(parser, parser->m_tagLevel, parser->m_internalEncoding,"],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["debug_decl(sudo_auth_begin_session, SUDOERS_DEBUG_AUTH);","","for (auth = auth_switch; auth->name; auth++) {","if (auth->begin_session && !IS_DISABLED(auth)) {","int status = (auth->begin_session)(ctx, pw, user_env, auth);","switch (status) {"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["\t\t    line = compile_for(p, &cctx);","\t\t    break;","\t\t    line = compile_endfor(p, &cctx);","\t\t    cctx.ctx_had_return = FALSE;","\t\t    break;","\t\t    line = compile_continue(p, &cctx);","\t\t    break;"],"label":0}
{"cve":"PYSEC-2021-812","code_chunks":["        shape_map,","    const std::function<bool(const Node*)>& consider,","    int64_t max_constant_size_in_bytes,","    std::unordered_map<const Node*, std::vector<Tensor>>*","        shape_replacement_map) {","  if (n->IsConstant()) {","        return n->output_type(0) != DT_RESOURCE;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["(NumInputs(node) == 4)","? GetOptionalInputTensor(context, node, kBiasTensor)",": nullptr;","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","TfLiteTensor* col2im = data->has_col2im"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp9_read_bin(fp9_t a, const uint8_t *bin, size_t len) {","\tif (len != 9 * RLC_FP_BYTES) {","\t\tRLC_THROW(ERR_NO_BUFFER);","\t\treturn;","\t}","\tfp3_read_bin(a[0], bin, 3 * RLC_FP_BYTES);","\tfp3_read_bin(a[1], bin + 3 * RLC_FP_BYTES, 3 * RLC_FP_BYTES);"],"label":0}
{"cve":"CVE-2021-30145","code_chunks":["","static const struct {","    const char *type;","    const char *codec;","} type2format[] = {","    { \"bmp\",            \"bmp\" },","    { \"dpx\",            \"dpx\" },"],"label":0}
{"cve":"CVE-2018-12561","code_chunks":["            }","        }","        QString sshfs=Utils::findExe(\"sshfs\");","        if (sshfs.isEmpty()) {","            emit error(tr(\"\\\"sshfs\\\" is not installed!\"));","            return;","        }"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_rec_tnaf_mod(bn_t r0, bn_t r1, const bn_t k, int u, int m) {","bn_t t, t0, t1, t2, t3;","","bn_null(t);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["        }","        else {","            int res;","            res = obj2ast_arguments(tmp, &args, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["if (e != NULL) {","bn_set_dig(e, 1);","}","return;","}",""],"label":0}
{"cve":"CVE-2021-41220","code_chunks":["done);","","Tensor group_assignment = c->input(2);","","OP_REQUIRES_OK_ASYNC(","c,"],"label":1}
{"cve":"PYSEC-2020-97","code_chunks":["                                 history, greasemonkey)","from qutebrowser.browser.webengine import (webview, webengineelem, tabhistory,","                                           interceptor, webenginequtescheme,","                                           cookies, webenginedownloads,","                                           webenginesettings, certificateerror)","from qutebrowser.misc import miscwidgets, objects","from "],"label":0}
{"cve":"PYSEC-2020-284","code_chunks":["void Compute(OpKernelContext* ctx) override {","const Tensor& val = ctx->input(0);","auto session_state = ctx->session_state();","OP_REQUIRES(ctx, session_state != nullptr,","errors::FailedPrecondition(","\"GetSessionHandle called on null session state\"));"],"label":0}
{"cve":"CVE-2019-19324","code_chunks":["if( !p_jwt || !p_in || !p_sign ) {","ret = EINVAL;","goto end;","}","","if( IS_RSA_ALG( p_jwt->header.alg ) ) {"],"label":0}
{"cve":"CVE-2022-0890","code_chunks":["switch (status) {","if (resume) {","mrb_raise(mrb, E_FIBER_ERROR, \"resuming transferred fiber\");","}","break;","mrb_raise(mrb, E_FIBER_ERROR, \"double resume\");","break;"],"label":0}
{"cve":"CVE-2021-41131","code_chunks":["oaded from a remote repository.","from tuf import settings","settings.repositories_directory = 'local-repository'","","# Next, the client creates a dictionary object containing the repository","# mirrors.  The client may download content from any one of these mirrors.","# In the example below, a single mirror named 'mirror1' is defined.  The"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["\t\t\t\t\/*","\t\t\t\t * There is no checked out .gitattributes file","\t\t\t\t * there, but we might have it in the index.","\t\t\t\t * We allow operation in a sparsely checked out","\t\t\t\t * work tree, so read from it.","\t\t\t\t *\/","\t\t\t\tres = read_attr_from_index(istate, path, flags);"],"label":0}
{"cve":"CVE-2022-29340","code_chunks":["\tFBOX_DEFINE_FLAGS(GF_ISOM_BOX_TYPE_TKHD, tkhd, \"trak\", 1, 0x000001 | 0x000002 | 0x000004 | 0x000008),","\tBOX_DEFINE( GF_ISOM_BOX_TYPE_TREF, tref, \"trak\"),","\tBOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_MDIA, mdia, \"trak\"),","\tBOX_DEFINE_CHILD( GF_ISOM_BOX_TYPE_MFRA, mfra, \"file\"),","\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_MFRO, mfro, \"mfra\", 0),","\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_TFRA, tfra, \"mfra\", 1),","\tFBOX_DEFINE( GF_ISOM_BOX_TYPE_ELNG, elng, \"mdia\", 0),"],"label":0}
{"cve":"CVE-2022-39269","code_chunks":["static pj_status_t transport_media_create(pjmedia_transport *tp,","\t\t\t\t          pj_pool_t *sdp_pool,","\t\t\t\t\t  unsigned options,","\t\t\t\t          const pjmedia_sdp_session *sdp_remote,","\t\t\t\t\t  unsigned media_index)","{","    struct transport_srtp *srtp = (struct transport_srtp*) tp;"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["\"}}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_multiple_dns_cert.pem\"));","envoy::type::matcher::v3::StringMatcher matcher;","matcher.set_exact(\"api.example.com\");","std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>"],"label":1}
{"cve":"CVE-2018-13006","code_chunks":["","\tswitch (a->type) {","\t\tif (ptr->tfhd) ERROR_ON_DUPLICATED_BOX(a, ptr)","\t\t\tptr->tfhd = (GF_TrackFragmentHeaderBox *) a;","\t\treturn GF_OK;","\t\treturn gf_list_add(ptr->TrackRuns, a);","\t\tif (ptr->sdtp) ERROR_ON_DUPLICATED_BOX(a, ptr)"],"label":0}
{"cve":"PYSEC-2021-608","code_chunks":["context, multiples_array[i] >= 0,","errors::InvalidArgument(\"Expected multiples[\", i, \"] >= 0, but got \",","multiples_array[i]));","output_shape.AddDim(input.dim_size(i) * multiples_array[i]);","}","if (output_shape == input.shape()) {","context->set_output(0, input);"],"label":1}
{"cve":"CVE-2016-10129","code_chunks":["}","","git__free(pkt);","}","","int git_pkt_buffer_flush(git_buf *buf)"],"label":1}
{"cve":"CVE-2020-13396","code_chunks":["context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;","context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;","AvTimestamp = ntlm_av_pair_get((NTLM_AV_PAIR*)message->TargetInfo.Buffer,","message->TargetInfo.Len, MsvAvTimestamp, &cbAvTimestamp);","","if (AvTimestamp)"],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["{","if (len < 1)","return;   string[len - 1] = 0;","if (len < 3)","return;   len = strnlen(string, len - 1);","for (int i = len - 1; i >= 0; i--)"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["Stream_Read_UINT16(s, numCapsets); \/* numCapsets (2 bytes) *\/","","if (blockType != 0xCBC0)","return FALSE;","","if (blockLen != 8)"],"label":1}
{"cve":"CVE-2021-33910","code_chunks":["_cleanup_free_ char *p = NULL;","char *s;","","assert(f);","assert(ret);",""],"label":0}
{"cve":"CVE-2023-32233","code_chunks":["{","struct nft_lookup *priv = nft_expr_priv(expr);","","priv->set->use++;","}","","static void nft_lookup_destroy(const struct nft_ctx *ctx,"],"label":1}
{"cve":"CVE-2018-20180","code_chunks":["\t\tif (s->p[1] < 0x80)","\t\tlength = s->p[1] - 2;","\telse if (s->p[1] == 0x81)","\t\tlength = s->p[2] - 1;","\telse if (s->p[1] == 0x82)","\t\tlength = (s->p[2] << 8) | s->p[3];","\telse"],"label":0}
{"cve":"CVE-2020-1921","code_chunks":["","int key_size;","if (key.size() > max_key_size) {","raise_warning(\"Key size too large; supplied length: %d, max: %d\",","key.size(), max_key_size);","key_size = max_key_size;","} else {"],"label":1}
{"cve":"CVE-2018-20174","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["                      GetTemporarySafe(context, node, kProductScalingFactors,","                                       &prod_scaling_factors));","    prod_scaling_factors->type = kTfLiteFloat32;","    prod_scaling_factors->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqualsArray(prod_scaling_factors->dims, 1,","                                   scaling_dims)) {","      TfLiteIntArray* prod_scaling_factors_size = TfLiteIntArrayCreate(1);"],"label":0}
{"cve":"CVE-2022-27650","code_chunks":["capabilities->effective_len = exec_options.cap_size;","","capabilities->inheritable = dup_array (exec_options.cap, exec_options.cap_size);","capabilities->inheritable_len = exec_options.cap_size;","","capabilities->bounding = dup_array (exec_options.cap, exec_options.cap_size);"],"label":1}
{"cve":"CVE-2020-1917","code_chunks":["}","","if (piv.size() < iv_required_len) {","raise_warning(\"IV passed is only %d bytes long, cipher \"","\"expects an IV of precisely %d bytes, padding with \\\\0\",","piv.size(), iv_required_len);","memcpy(iv_new, piv.data(), piv.size());"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","TfLiteIntArray* outputSize = TfLiteIntArrayCreate(NumDimensions(value));","","outputSize->data[0] = SizeOfDimension(lookup, 0);"],"label":1}
{"cve":"CVE-2022-4399","code_chunks":["if (l) {","\/* save the note *\/","l += 6;","if (db_update(name,l))","return 1;","","\/* let the user know *\/"],"label":1}
{"cve":"CVE-2019-20911","code_chunks":["if (dwg->header.version > R_11)","{","Dwg_Object_Ref *restrict seqend = _obj->seqend;","\/* if shifted in check_POLYLINE_handles() seqend might be empty *\/","if (!seqend)","{ \/* either the first or last *\/"],"label":1}
{"cve":"CVE-2023-36327","code_chunks":["TEST_ASSERT(result == RLC_OK, end);","len = RLC_BN_BITS \/ 8 + 1;","rand_bytes(buf, 1);","in = buf[0] % bn_get_prime(47);","TEST_ASSERT(cp_bdpe_enc(buf, &len, in, pub) == RLC_OK, end);","TEST_ASSERT(cp_bdpe_dec(&out, buf, len, prv) == RLC_OK, end);"],"label":1}
{"cve":"CVE-2018-16451","code_chunks":["","if (request) {","ND_TCHECK2(w[12 * 2], 2);","paramlen = EXTRACT_LE_16BITS(w + 9 * 2);","param = buf + EXTRACT_LE_16BITS(w + 10 * 2);","datalen = EXTRACT_LE_16BITS(w + 11 * 2);"],"label":1}
{"cve":"CVE-2017-12668","code_chunks":["    pcx_info.planes=1;","    if ((image->storage_class == DirectClass) || (image->colors > 256))","      {","        pcx_info.planes=3;","        if (image->alpha_trait != UndefinedPixelTrait)","          pcx_info.planes++;","      }"],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["int err = 0;","SCOPE_EXIT {","if (log) {","log->setInt(\"errno\", err);","log->setStr(\"new_user\", uname);","StructuredLog::log(\"hhvm_lightprocess_error\", *log);"],"label":0}
{"cve":"CVE-2023-1906","code_chunks":["          if (SyncAuthenticPixels(image,exception) == MagickFalse)","            break;","          if (image->previous == (Image *) NULL)","            {","              status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,","                image->rows);","              if (status == MagickFalse)"],"label":0}
{"cve":"CVE-2016-2324","code_chunks":["continue;","if (obj->type == OBJ_TAG) {","obj->flags |= SEEN;","show_object(obj, NULL, name, data);","continue;","}","if (!path)"],"label":1}
{"cve":"CVE-2021-44109","code_chunks":["        }","","        if (n1buf) {","            gmmbuf = gmm_build_dl_nas_transport(sess,","                    OGS_NAS_PAYLOAD_CONTAINER_N1_SM_INFORMATION, n1buf, 0, 0);","            ogs_assert(gmmbuf);","        }"],"label":0}
{"cve":"CVE-2022-1907","code_chunks":["result->value[i++] = (char) *data++;","}","\/* self closing tag '\/>' *\/","if (*(data - 1) == '\/' && *data == '>') {","--data; --i;","}","result->end = data;"],"label":1}
{"cve":"CVE-2020-28196","code_chunks":["","*retrep = NULL;","ret = get_tag((uint8_t *)code->data, code->length, &t, &contents,","&clen, &remainder, &rlen);","if (ret)","return ret;","\/* rlen should be 0, but we don't check it (and due to padding in"],"label":1}
{"cve":"CVE-2022-0559","code_chunks":["bool inserted = false;","","if (!tree->root) {","tree->root = _node_new (data, NULL);","if (!tree->root) {","return false;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["","node *n = Ta3Parser_ParseStringObject(s, filename,","&_Ta3Parser_Grammar, start, &err,","&iflags);","if (flags == NULL) {","localflags.cf_flags = 0;"],"label":1}
{"cve":"CVE-2018-20181","code_chunks":["int i;","uint16 num_updates;","","in_uint16_le(s, num_updates);   \/* rectangles *\/","","for (i = 0; i < num_updates; i++)"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["      continue_stmt: 'continue'","      return_stmt: 'return' [testlist]","      yield_stmt: yield_expr","      yield_expr: 'yield' testlist | 'yield' 'from' test","      raise_stmt: 'raise' [test [',' test [',' test]]]","    *\/","    node *ch;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["            context->GetScratchBuffer(context, op_data->temp_buffer_idx));","        TF_LITE_ENSURE(","            context,","            reference_ops::Mean(tflite::micro::GetTensorData<uint8_t>(input),","                                input->dims->data, input->dims->size,","                                tflite::micro::GetTensorData<uint8_t>(output),","                                output->dims->data, output->dims->size,"],"label":0}
{"cve":"CVE-2018-20178","code_chunks":["uint32 length;","struct stream packet = *s;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","","if (!s_check_rem(s, length))"],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["","auto allocsz = sizeof(gdImage)","+ sy * (sizeof(int *) + sizeof(unsigned char *))","+ sx * sy * (sizeof(int) + sizeof(unsigned char));","if (UNLIKELY(precheckOOM(allocsz))) {","return NULL;"],"label":1}
{"cve":"CVE-2018-8795","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["    if (!strcmp(line,\"X  \"))","      raw_width = atoi(val);","    if (!strcmp(line,\"Y  \"))","      raw_height = atoi(val);","    if (!strcmp(line,\"TX \"))","      thumb_width = atoi(val);","    if (!strcmp(line,\"TY \"))"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2023-28428","code_chunks":["","\t  st->remaining      -= (size_t)rbytes;","\t  st->flate.next_in  = (Bytef *)st->cbuffer;","\t  st->flate.avail_in = (uInt)rbytes;","\t}","","        avail_in  = st->flate.avail_in;"],"label":0}
{"cve":"CVE-2017-15365","code_chunks":["return !sortcmp_lex_string(et->dbname, db, system_charset_info);","}","","","\/*","Checks whether an event has equal `db` and `name`"],"label":1}
{"cve":"CVE-2016-10167","code_chunks":["dst = gdImageRotateInterpolated(src, 30.0, black);","","path = gdTestFilePath2(\"gdimagerotate\", \"php_bug_65070_exp.png\");","gdAssertImageEqualsToFile(path, dst);","gdFree(path);",""],"label":1}
{"cve":"CVE-2015-8631","code_chunks":["rqstp->rq_cred.oa_flavor);","if (errmsg != NULL)","krb5_free_error_message(NULL, errmsg);","gss_release_buffer(&minor_stat, &client_name);","gss_release_buffer(&minor_stat, &service_name);",""],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["comprehension_ty o = (comprehension_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"PYSEC-2020-307","code_chunks":["(*stride_arr)[i] = (*shape_arr)[i + 1] * (*stride_arr)[i + 1];","}","","dlm_tensor->dl_tensor.shape = &(*shape_arr)[0];"],"label":1}
{"cve":"CVE-2022-0695","code_chunks":["return 0LL;","}","ut8 b[512];","ZERO_FILL (b);","entry = PE_ (r_bin_pe_get_entrypoint) (pe);","if (r_buf_read_at (pe->b, entry->paddr, b, 512) < 1) {"],"label":1}
{"cve":"CVE-2017-1000251","code_chunks":["\t\t\t\tgoto done;","\t\t\tbreak;","\t\t}","","\t\tsk->sk_state = BT_DISCONN;","\t\tsk->sk_err = ECONNRESET;","\t\tl2cap_sock_set_timer(sk, HZ * 5);"],"label":0}
{"cve":"PYSEC-2021-806","code_chunks":["context, multiples_array[i] >= 0,","errors::InvalidArgument(\"Expected multiples[\", i, \"] >= 0, but got \",","multiples_array[i]));","output_shape.AddDim(input.dim_size(i) * multiples_array[i]);","}","if (output_shape == input.shape()) {","context->set_output(0, input);"],"label":1}
{"cve":"CVE-2021-4193","code_chunks":["\t\t&& (pre == 'O' || pre == 'o') && vim_isodigit(ptr[2])","\t\t&& (maxlen == 0 || maxlen > 2))","\t    \t    ptr += 2;","\telse","\t{","\t    \t    pre = 0;","\t    if (what & STR2NR_OCT)"],"label":0}
{"cve":"CVE-2020-1918","code_chunks":["  std::sort(patterns.begin(), patterns.end(), comparator);","","  {","    uint16_t last_h = -1;                 int size = patterns.size();","    for(int i = 0; i != size; ++i) {","            uint16_t h = patterns[i].hash(m - B, B) & HASH_TAB_MASK;","      if (h != last_h) {"],"label":0}
{"cve":"CVE-2021-42781","code_chunks":["\tmemcpy(dobj.label, label, label_len);","\tmemcpy(dinfo.app_label, app, app_len);","\tif (oid_len)","\t\tsc_asn1_decode_object_id(oid, oid_len, &dinfo.app_oid);","","\tif (flags & OBERTHUR_ATTR_MODIFIABLE)","\t\tdobj.flags |= SC_PKCS15_CO_FLAG_MODIFIABLE;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["#endif","\t\t(void)flag;","\t} RLC_CATCH_ANY {","\t\tRLC_THROW(ERR_CAUGHT);","\t}","\tRLC_FINALLY {","\t\tbn_free(n);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["    return kTfLiteError;","  }","","    const TfLiteTensor* fft_length;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kFftLengthTensor, &fft_length));","  const RuntimeShape fft_length_shape = GetTensorShape(fft_length);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["        op_data->scratch_tensor_index + kScalingFactors;","    TfLiteTensor* scaling_factors;","    TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, kScalingFactors,","                                                &scaling_factors));","    scaling_factors->type = kTfLiteFloat32;","    scaling_factors->allocation_type = kTfLiteArenaRw;","    int scaling_dims[1] = {batch_size};"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["ga_copy_string(garray_T *gap, char_u *p)","{","char_u *cp = vim_strsave(p);",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["reinterpret_cast<TfLiteAudioMicrofrontendParams*>(node->user_data);","FrontendReset(data->state);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["}","if (_PyObject_HasAttrId(obj, &PyId_col_offset)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_col_offset);","if (tmp == NULL) goto failed;","res = obj2ast_int(tmp, &col_offset, arena);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    bw_activation_state_quantized->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqual(bw_activation_state_quantized->dims,","                             bw_activation_state->dims)) {","      TfLiteIntArray* bw_activation_state_quantized_size =","          TfLiteIntArrayCopy(bw_activation_state->dims);","      TF_LITE_ENSURE_OK(","          context, context->ResizeTensor(context, bw_activation_state_quantized,"],"label":0}
{"cve":"CVE-2018-8798","code_chunks":["\tint x;","\tint revcode;","\tuint8 * last_line;","\tuint8 * this_line;","\tuint8 * org_in;","\tuint8 * org_out;",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const int num_dims = NumDimensions(input);","TF_LITE_ENSURE(context, num_dims >= 2);","const TfLiteTensor* fft_length;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFftLengthTensor, &fft_length));","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TF_LITE_ENSURE(context, IsPowerOfTwo(fft_length_data[0]));"],"label":0}
{"cve":"CVE-2016-10161","code_chunks":["","return 1;","}","#line 1268 \"ext\/standard\/var_unserializer.c\"","yych = *++YYCURSOR;","if (yych <= ',') {","if (yych != '+') goto yy18;"],"label":1}
{"cve":"CVE-2020-11087","code_chunks":["\t{","\t\tcredentials->identity.User = (UINT16*)malloc(message->UserName.Len);","","\t\tif (!credentials->identity.User)","\t\t\tgoto fail;","","\t\tCopyMemory(credentials->identity.User, message->UserName.Buffer, message->UserName.Len);"],"label":0}
{"cve":"CVE-2021-41136","code_chunks":["#line 50 \"ext\/puma_http11\/http11_parser.rl\"","\t{","    parser->request_method(parser, PTR_TO(mark), LEN(mark, p));","  }","\tgoto st3;","\tif ( ++p == pe )","\t\tgoto _test_eof3;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void md_hmac(uint8_t *mac, const uint8_t *in, size_t in_len, const uint8_t *key,","size_t key_len) {","#if MD_MAP == SH224 || MD_MAP == SH256 || MD_MAP == B2S160 || MD_MAP == B2S256","#define block_size 64","#elif MD_MAP == SH384 || MD_MAP == SH512"],"label":0}
{"cve":"CVE-2022-0696","code_chunks":["#endif","curbuf;","","if (idx < buf->b_ucmds.ga_len)","return USER_CMD_GA(&buf->b_ucmds, idx)->uc_name;"],"label":1}
{"cve":"CVE-2024-0727","code_chunks":["int ctype_nid = OBJ_obj2nid(p7->type);","const PKCS7_CTX *ctx = ossl_pkcs7_get0_ctx(p7);","","if (ctype_nid == NID_pkcs7_signed)"],"label":1}
{"cve":"CVE-2018-20406","code_chunks":["if (new_memo == NULL)","return -1;","","for (i = 0; i < new_memo_size; i++) {","Py_XINCREF(unpickler->memo[i]);","new_memo[i] = unpickler->memo[i];","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":[".prepare =","[](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context,","tflite::GetInputSafe(context, node, 0, &input));","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2016-3134","code_chunks":["newinfo->hook_entry[h] = hook_entries[h];","if ((unsigned char *)e - base == underflows[h]) {","if (!check_underflow(e)) {","pr_err(\"Underflows must be unconditional and \"","\"use the STANDARD target with \""],"label":1}
{"cve":"CVE-2016-10158","code_chunks":["if (s_den == 0) {","return 0;","} else {","return php_ifd_get32s(value, motorola_intel) \/ s_den;","}","","case TAG_FMT_SSHORT:    return php_ifd_get16u(value, motorola_intel);"],"label":1}
{"cve":"PYSEC-2021-419","code_chunks":["Status CreateTempFileFloat(Env* env, float value, uint64 size,","string* filename) {","const string dir = testing::TmpDir();","*filename = io::JoinPath(dir, strings::StrCat(\"file_\", value));","std::unique_ptr<WritableFile> file;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","ch = CHILD(n, i+1);  \/* tfpdef or COMMA *\/","if (TYPE(ch) == COMMA) {","int res = 0;","i += 2; \/* now follows keyword only arguments *\/",""],"label":1}
{"cve":"CVE-2018-20786","code_chunks":[],"label":1}
{"cve":"CVE-2022-41895","code_chunks":["void Compute(OpKernelContext* context) override {","const Tensor& in0 = context->input(0);","const Tensor& in1 = context->input(1);","const int dims = in0.dims();","constexpr int kMinDims = 0;","constexpr int kMaxDims = 5;"],"label":0}
{"cve":"CVE-2022-29694","code_chunks":["}","if (block) {","QLIST_INSERT_BEFORE(block, new_block, next);","} else if (last_block) {","QLIST_INSERT_AFTER(last_block, new_block, next);","} else { \/* list is empty *\/"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["GetOutput(context, node, kSoftNMSOutputTensorSelectedScores);","output_num_selected_indices =","GetOutput(context, node, kSoftNMSOutputTensorNumSelectedIndices);","if (!is_max_output_size_const) {","SetTensorSizes(context, output_selected_indices, {max_output_size_value});","SetTensorSizes(context, output_selected_scores, {max_output_size_value});"],"label":1}
{"cve":"CVE-2018-8791","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"PYSEC-2022-138","code_chunks":["*t = op_def.output_arg(i).experimental_full_type();","","for (int j = 0; j < t->args_size(); j++) {","auto* arg = t->mutable_args(i);","if (arg->type_id() == TFT_VAR) {","const auto* attr = attrs.Find(arg->s());","if (attr == nullptr) {"],"label":1}
{"cve":"CVE-2020-1917","code_chunks":["assertx(m_len != -1);","assertx(length > 0);","assertx(m_cursor >= 0);","int64_t remaining = m_len - m_cursor;","if (remaining < length) length = remaining;","if (length > 0) {"],"label":0}
{"cve":"CVE-2022-2566","code_chunks":["            av_free(buffer);","            return AVERROR_INVALIDDATA;","        }","        offset += to_read;","    }","","    *data = buffer;"],"label":0}
{"cve":"CVE-2018-14360","code_chunks":["if (!nserv || !line)","return 0;","","if (sscanf(line, \"%s \" ANUM \" \" ANUM \" %c %[^\\n]\", group, &last, &first, &mod, desc) < 4)","return 0;","","nntp_data = nntp_data_find(nserv, group);"],"label":1}
{"cve":"PYSEC-2022-71","code_chunks":["errors::InvalidArgument(","\"Requires start >= limit when delta < 0: \", start, \"\/\", limit));","}","int64_t size = 0;","if (std::is_integral<T>::value) {","size = static_cast<int64_t>("],"label":1}
{"cve":"CVE-2018-20174","code_chunks":["STREAM s;","int length;","int tagval;","struct stream packet;","","s = tcp_recv(NULL, 4);"],"label":0}
{"cve":"CVE-2018-11219","code_chunks":["        break;","      }","      case 'c': {","        if (size == 0) {","          if (n == 0 || !lua_isnumber(L, -1))","            luaL_error(L, \"format 'c0' needs a previous size\");","          size = lua_tonumber(L, -1);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["auto* params = reinterpret_cast<TfLiteMulParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"],"label":1}
{"cve":"CVE-2016-10248","code_chunks":["} else {","\/* We are dealing with non-ROI (i.e., background) data. *\/","mag <<= bgshift;","mask = (1 << numbps) - 1;","\/* Perform a basic sanity check on the sample value. *\/","\/* Some implementations write garbage in the unused","most-significant bit planes introduced by ROI shifting."],"label":1}
{"cve":"CVE-2021-4193","code_chunks":["}","}","else","{","for (;;)","{"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  const float score_threshold = *GetTensorData<float>(input_score_threshold);","","  TfLiteTensor* output_selected_indices = nullptr;","  TfLiteTensor* output_selected_scores = nullptr;","  TfLiteTensor* output_num_selected_indices = nullptr;","","  if (is_soft_nms) {"],"label":0}
{"cve":"PYSEC-2021-612","code_chunks":["                     limit_in.shape().dim_size(0) == 1),","                errors::InvalidArgument(\"limit must be a scalar, not shape \",","                                        limit_in.shape().DebugString()));","    OP_REQUIRES(context,","                TensorShapeUtils::IsScalar(delta_in.shape()) ||","                    (TensorShapeUtils::IsVector(delta_in.shape()) &&","                     delta_in.shape().dim_size(0) == 1),"],"label":0}
{"cve":"CVE-2017-12932","code_chunks":["\t\treturn 0;","\t}","","\treturn finish_nested_data(UNSERIALIZE_PASSTHRU);","}","#line 1330 \"ext\/standard\/var_unserializer.c\"","\tyych = *++YYCURSOR;"],"label":0}
{"cve":"CVE-2020-5215","code_chunks":["        if (error == ErrorFoundInt64) {","          error = Int64Converter::Convert(obj, &state, ret);","        }","        if (error == ErrorFoundFloat) {","          error = FloatConverter::Convert(obj, &state, ret);","        }","                        RETURN_STRING_AS_STATUS(error);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\tfp54_back_cyc_sim(u, u, w);","","\t\t\tfp54_copy(c, u[0]);","\t\t\tfor (i = 1; i < w; i++) {","\t\t\t\tfp54_mul(c, c, u[i]);","\t\t\t}","\t\t}"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["static void rdp_read_capability_set_header(wStream* s, UINT16* length, UINT16* type)","{","Stream_Read_UINT16(s, *type);   \/* capabilitySetType *\/","Stream_Read_UINT16(s, *length); \/* lengthCapability *\/"],"label":1}
{"cve":"CVE-2023-24832","code_chunks":["llvm_unreachable(\"Accessing debug info from a lazy module\");"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["      TF_LITE_ENSURE_OK(","          context, GetTemporarySafe(context, node, kFwActivationStateQuantized,","                                    &fw_activation_state_quantized));","      TfLiteTensor* bw_activation_state_quantized;","      TF_LITE_ENSURE_OK(","          context, GetTemporarySafe(context, node, kBwActivationStateQuantized,","                                    &bw_activation_state_quantized));"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output =","GetOutput(context, node, ops::builtin::lstm::full::kOutputTensor);","","std::vector<int> intermediate_tensor_indexes(node->intermediates->size);","for (int i = 0; i < node->intermediates->size; ++i) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input_tensor));","const TfLiteTensor* padding_matrix;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &padding_matrix));","TfLiteTensor* output_tensor;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output_tensor));"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputResourceIdTensor,","&input_resource_id_tensor));","int resource_id = input_resource_id_tensor->data.i32[0];","","const TfLiteTensor* key_tensor;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["input_to_forget_weights->type);","}","","const TfLiteTensor* recurrent_to_forget_weights ="],"label":1}
{"cve":"CVE-2023-46853","code_chunks":["                }","                s++;","                break;","        }","    }","","            pr->tokens[curtoken] = s - pr->request;"],"label":0}
{"cve":"CVE-2021-30020","code_chunks":["static","s32 hevc_parse_slice_segment(GF_BitStream *bs, HEVCState *hevc, HEVCSliceInfo *si)","{","\tu32 i, j;","\tu32 num_ref_idx_l0_active = 0, num_ref_idx_l1_active = 0;","\tHEVC_PPS *pps;","\tHEVC_SPS *sps;"],"label":0}
{"cve":"PYSEC-2021-596","code_chunks":["const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor2, &input2));"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params =","reinterpret_cast<TfLiteAudioSpectrogramParams*>(node->user_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2021-43860","code_chunks":["          g_debug (\"Got updated metadata for %s\", remote);","          some_updated = TRUE;","        }","    }","","  if (some_updated)","    {"],"label":0}
{"cve":"CVE-2022-28068","code_chunks":["ut64 result;","switch (size) {","result = READ16 (*buf); break;","result = READ32 (*buf); break;","result = READ64 (*buf); break;","result = 0;"],"label":1}
{"cve":"PYSEC-2022-115","code_chunks":["OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(indices->shape()),","errors::InvalidArgument(","\"Input indices should be a matrix but received shape \",","indices->shape().DebugString()));","","const auto num_indices = indices->NumElements();"],"label":1}
{"cve":"CVE-2016-9391","code_chunks":["","\/* We can reliably get at most 31 bits since ISO\/IEC 9899 only","guarantees that a long can represent values up to 2^31-1. *\/","if (n < 0 || n >= 32) {","return -1;","}",""],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_set_bit(bn_t a, int bit, int value);"],"label":1}
{"cve":"CVE-2020-28097","code_chunks":["display_desc = \"EGA+\";","request_resource(&ioport_resource,","&ega_console_resource);","} else {","static struct resource mda1_console_resource =","{ .name\t= \"mda\","],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["setup_ret = 6;","goto _XMI_Next_Event;","}","if ((setup_ret = _WM_SetupMidiEvent(xmi_mdi,xmi_data,0)) == 0) {","goto _xmi_end;","}",""],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteNode* node) {","std::map<T, int> unique_values;","TfLiteTensor* output_indexes;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &output_indexes));","std::vector<T> output_values;","I* indexes = GetTensorData<I>(output_indexes);"],"label":0}
{"cve":"PYSEC-2021-656","code_chunks":["                 ++batch_index) {","              const SparseMatrix& cholesky_factor =","                  sparse_cholesky_factors[batch_index];","              const int64 nnz = cholesky_factor.nonZeros();","","              std::copy(cholesky_factor.outerIndexPtr(),","                        cholesky_factor.outerIndexPtr() + num_rows + 1,"],"label":0}
{"cve":"CVE-2018-20182","code_chunks":["STREAM s;","int length;","int tagval;","struct stream packet;","","s = tcp_recv(NULL, 4);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","    for (int i = 0; i < batch_size; ++i) {","    TF_LITE_ENSURE(context,","                   max_time >= GetTensorData<int32_t>(sequence_length)[i]);","  }","","      std::vector<optimized_ops::TTypes<float>::UnalignedConstMatrix> input_list_t;"],"label":0}
{"cve":"CVE-2020-36315","code_chunks":["\t\t\t\t\tpad = 0;","\t\t\t\t\tfor (int i = 0; i < RLC_MD_LEN; i++) {","\t\t\t\t\t\tpad |= h1[i] ^ h2[i];","\t\t\t\t\t}","\t\t\t\t\tbn_mod_2b(m, m, 8 * m_len);","\t\t\t\t\t*p_len = bn_size_bin(m);","\t\t\t\t\t(*p_len)--;"],"label":0}
{"cve":"CVE-2017-12664","code_chunks":["            for (x = 0;  x < (ssize_t) bytes_per_row;  x += 8)","            {","              tptr = tmpbuf;","              for (bit=0, byte=0; bit < (unsigned char) MagickMin(8,(ssize_t) bytes_per_row-x); bit++)","              {","                if ((y == 0) || (last_row[x + bit] != one_row[x + bit]))","                  {"],"label":0}
{"cve":"CVE-2016-8654","code_chunks":["register int n;","register int i;","int m;","int hstartrow;","","\/* Get a buffer. *\/","if (bufsize > QMFB_SPLITBUFSIZE) {"],"label":0}
{"cve":"CVE-2021-23520","code_chunks":["                                                   { \"c\/d\",                  true  },","                                                   { \"..\/e\/f\",               false },","                                                   { \"..\/..\/g\/h\",            false },","                                                   { \"i\/..\/j\",               true  },","                                                   { \"k\/l\/..\/\",              true  },","                                                   { \"m\/n\/..\/..\/\",           false },","                                                   { \"o\/p\/..\/..\/..\/\",        false } };"],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["{","uchar pixel[10];","unsigned iten = 0, isix, i, buffer = 0, todo[16];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width > 32767 || raw_height > 32767)","throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"CVE-2018-20177","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"CVE-2018-12322","code_chunks":["\t\top->type = R_ANAL_OP_TYPE_RET;","\t\top->cycles = 6;","\t\top->stackop = R_ANAL_STACK_INC;","\t\top->stackptr = -3;","\t\t\t\t\t\tr_strbuf_set (&op->esil, \"0x101,sp,+,[1],flags,=,0x102,sp,+,[2],pc,=,3,sp,+=\");","\t\tbreak;","\t\t\top->type = R_ANAL_OP_TYPE_NOP;"],"label":0}
{"cve":"CVE-2019-13225","code_chunks":["  node = onig_node_new_str(s, end);","  if (IS_NULL(node)) return ONIGERR_MEMORY;","","  r = update_string_node_case_fold(reg, node);","  if (r != 0) {","    onig_node_free(node);","    return r;"],"label":0}
{"cve":"CVE-2017-1000251","code_chunks":["scid   = __le16_to_cpu(rsp->scid);","flags  = __le16_to_cpu(rsp->flags);","result = __le16_to_cpu(rsp->result);","","BT_DBG(\"scid 0x%4.4x flags 0x%2.2x result 0x%2.2x\",","scid, flags, result);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2022-2566","code_chunks":["\/* Build a list of open-GOP key samples *\/","sc->open_key_samples_count = 0;","for (uint32_t i = 0; i < sc->sync_group_count; i++)","if (sc->sync_group[i].index == cra_index)","sc->open_key_samples_count += sc->sync_group[i].count;","av_freep(&sc->open_key_samples);","sc->open_key_samples = av_calloc(sc->open_key_samples_count, sizeof(*sc->open_key_samples));"],"label":1}
{"cve":"CVE-2020-15204","code_chunks":["","void Compute(OpKernelContext* ctx) override {","const Tensor& val = ctx->input(0);","int64 id = ctx->session_state()->GetNewId();","TensorStore::TensorAndKey tk{val, id, requested_device()};","OP_REQUIRES_OK(ctx, ctx->tensor_store()->AddTensor(name(), tk));",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["          GetTemporary(context, node, kOutputStateZeroPoints), row_sums,","          row_sums_size, &op_data->compute_row_sums,","          CpuBackendContext::GetFromContext(context));","    }","      TF_LITE_KERNEL_LOG(context, \"Type %s is not currently supported.\",","                         TfLiteTypeGetName(input_to_output_weights->type));","      return kTfLiteError;"],"label":0}
{"cve":"CVE-2016-10156","code_chunks":["\/* The timer has never run before,","* make sure a stamp file exists.","*\/","touch_file(t->stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0);","}","","t->result = TIMER_SUCCESS;"],"label":1}
{"cve":"CVE-2018-5808","code_chunks":["gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,255);","else","gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,65535);","fseek (ifp, data_offset, SEEK_SET);"],"label":1}
{"cve":"CVE-2018-14679","code_chunks":["{","  struct mspack_system *sys = self->system;","  unsigned char *data = NULL;","  int len;","","  if (!file || !file->section || (file->section->id != 0)) {","    self->error = MSPACK_ERR_DATAFORMAT;"],"label":0}
{"cve":"CVE-2023-25801","code_chunks":["                      pooling_ratio_[i]));","    }","    OP_REQUIRES(","        context, pooling_ratio_[0] == 1 && pooling_ratio_[3] == 1,","        errors::Unimplemented(\"Fractional average pooling is not yet \"","                              \"supported on the batch nor channel dimension.\"));","    OP_REQUIRES_OK(context, context->GetAttr(\"deterministic\", &deterministic_));"],"label":0}
{"cve":"PYSEC-2021-806","code_chunks":["    HandleCase<DT>(context, multiples_array, result); \\","    return;                                           \\","  }","","#define HANDLE_TYPE_NAME(T) HANDLE_TYPE(DataTypeToEnum<T>::value)","","        TF_CALL_bool(HANDLE_TYPE_NAME);"],"label":0}
{"cve":"CVE-2021-43848","code_chunks":["            return H2O_HTTP3_ERROR_FRAME_UNEXPECTED;","            break;","        }","        return 0;","    }","    stream->recvbuf.handle_input = handle_input_expect_data;",""],"label":0}
{"cve":"CVE-2019-10672","code_chunks":["if (y < sy && x < sx) {","j = ((x * sy + y) * size) + b;","((char*)data->data)[j] = output[i];","}","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["        context->ReportError(","            context, \"Indices of type '%s' are not supported by scatter_nd.\",","            TfLiteTypeGetName(indices->type));","        return kTfLiteError;","    }","  } else {","    SetTensorToDynamic(output);"],"label":0}
{"cve":"CVE-2022-29228","code_chunks":["","if (found_bearer_token_) {","if (config_->forwardBearerToken()) {","setBearerToken(*request_headers_, access_token_);","}"],"label":1}
{"cve":"CVE-2022-1714","code_chunks":["ut8 ehdr[sizeof (Elf_(Ehdr))] = {0};","int i, len;","if (r_buf_read_at (bin->b, 0, e_ident, EI_NIDENT) == -1) {","R_LOG_ERROR (\"read (magic)\");","return false;","}","sdb_set (bin->kv, \"elf_type.cparse\", \"enum elf_type { ET_NONE=0, ET_REL=1,\""],"label":1}
{"cve":"CVE-2017-9763","code_chunks":["\t\t\t\t\t\t\t} else eprintf (\"Unknown store path\\n\");","\t\t\tbreak;","\t\t\tinput++;","\t\t\tif (*input == ' ')","\t\t\t\tinput++;","\t\t\tptr = strchr (input, ' ');","\t\t\tif (ptr) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["hidden_state_quantized->type = input_weights->type;","hidden_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(hidden_state_quantized->dims,"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["      return context->ResizeTensor(context, tensor1, newSize);","    };","","    reg.invoke = [](TfLiteContext* context, TfLiteNode* node) {","      CallReporting* call_reporting =","          static_cast<CallReporting*>(node->builtin_data);","            const TfLiteTensor* a0;"],"label":0}
{"cve":"CVE-2020-15471","code_chunks":["\tpacket->empty_line_position_set = 1;","      }","","      if(packet->parsed_lines >= (NDPI_MAX_PARSE_LINES_PER_PACKET - 1))","\treturn;","","      packet->parsed_lines++;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(","context, CheckDimensionsMatch(context, indices, output_shape, values));","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","output->type = values->type;","TF_LITE_ENSURE_EQ(context, NumDimensions(output_shape), 1);",""],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_cert.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_key.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/ca_cert.pem\"","- exact: localhost"],"label":1}
{"cve":"CVE-2019-13045","code_chunks":["rec->alternate_nick = g_strdup(src->alternate_nick);","rec->sasl_mechanism = src->sasl_mechanism;","rec->sasl_username = src->sasl_username;","rec->sasl_password = src->sasl_password;","*dest = (SERVER_CONNECT_REC *) rec;","}"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2017-7866","code_chunks":["","while (zstream.avail_in > 0) {","av_bprint_get_buffer(bp, 1, &buf, &buf_size);","if (!buf_size) {","ret = AVERROR(ENOMEM);","goto fail;"],"label":1}
{"cve":"CVE-2018-11381","code_chunks":["}","if (type == R_STRING_TYPE_DETECT) {","char *w = (char *)buf + needle + rc - from;","if ((to - needle) > 5) {","bool is_wide32 = needle + rc + 2 < to && !w[0] && !w[1] && !w[2] && w[3] && !w[4];","if (is_wide32) {"],"label":1}
{"cve":"CVE-2019-20807","code_chunks":["\t    \t    if (regmatch.endp[0] > str)","\t\tcol = 0;","\t    else","\t\t\t\tcol = (*mb_ptr2len)(regmatch.endp[0]);","\t    str = regmatch.endp[0];","\t}",""],"label":0}
{"cve":"CVE-2019-19044","code_chunks":["","if (args->bcl_start != args->bcl_end) {","bin = kcalloc(1, sizeof(*bin), GFP_KERNEL);","if (!bin)","return -ENOMEM;","","ret = v3d_job_init(v3d, file_priv, &bin->base,"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["                             : lhs->dims->data[lhs_rank - 1];","  const int num_units = op_context->params->adj_x","                            ? lhs->dims->data[lhs_rank - 1]","                            : lhs->dims->data[lhs_rank - 2];","","    {","    node->temporaries->data[0] = op_data->scratch_tensor_index;"],"label":0}
{"cve":"CVE-2020-15945","code_chunks":["    if (L->top < ci->top)","      L->top = ci->top;  \/* correct top to run hook *\/","  }","  if (L->hookmask & LUA_MASKRET) {  \/* is return hook on? *\/","    int ftransfer;","    ci->func += delta;  \/* if vararg, back to virtual 'func' *\/","    ftransfer = cast(unsigned short, firstres - ci->func);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["    }","    TPUVariableInfo var_info(\/*device_ordinal_id=*\/0, \/*use_fast_mem=*\/false);","    TF_RETURN_IF_ERROR(ParseTPUVariableInfor(","        node, tpu_metadata.num_cores_per_replica, &var_info));","        if (tpu_metadata.num_cores_per_replica > 1)","      device_ordinal = var_info.device_ordinal;",""],"label":0}
{"cve":"CVE-2022-35981","code_chunks":["        output_size[2] * output_size[1] * output_size[0];","    for (int64_t i = 0; i < num_reshaped_cols; ++i) {","      for (int64_t j = 0; j < output_size[3]; ++j) {","        OP_REQUIRES(context, tensor_out_dup_mat(j, i) == tensor_out_mat(j, i),","                    errors::InvalidArgument(","                        \"tensor_out_dup is not the same as tensor_out\"));","      }"],"label":0}
{"cve":"CVE-2022-39316","code_chunks":["cbSegment = segmentSize - 1;","","if ((Stream_GetRemainingLength(stream) < segmentSize) || (segmentSize < 1) ||","(segmentSize > UINT32_MAX))","return FALSE;",""],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2022-28068","code_chunks":["RBinDwarfAttrValue *attribute = &die->attr_values[i];","","bool is_valid_string_form = (attribute->attr_form == DW_FORM_strp ||","attribute->attr_form == DW_FORM_string) &&","attribute->string.content;","if (attribute->attr_name == DW_AT_comp_dir && is_valid_string_form) {"],"label":1}
{"cve":"CVE-2017-9608","code_chunks":["if (dctx->remaining <= 0)","return dctx->remaining;","}","if (buf_size - i >= dctx->remaining && (!dctx->interlaced || dctx->cur_field)) {","int remaining = dctx->remaining;"],"label":1}
{"cve":"CVE-2017-9228","code_chunks":["{","int r;","","if (*state == CCS_RANGE)","return ONIGERR_CHAR_CLASS_VALUE_AT_END_OF_RANGE;",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["\/* Identifier (most frequent token!) *\/","nonascii = 0;","if (is_potential_identifier_start(c)) {","\/* Process b\"\", r\"\", u\"\", br\"\" and rb\"\" *\/","int saw_b = 0, saw_r = 0, saw_u = 0, saw_f = 0;","while (1) {","if (!(saw_b || saw_u || saw_f) && (c == 'b' || c == 'B'))"],"label":1}
{"cve":"CVE-2017-17081","code_chunks":["const int dyh = (dyy - (1 << (16 + shift))) * (h - 1);","const int dxh = dxy * (h - 1);","const int dyw = dyx * (w - 1);","int need_emu  =  (unsigned) ix >= width  - w ||"],"label":1}
{"cve":"CVE-2021-31262","code_chunks":["\tGF_LHVCLayerInformation* ptr = (GF_LHVCLayerInformation *)entry;","\tu32 i, count;","","\tif (!ptr) return GF_BAD_PARAM;","\tgf_bs_read_int(bs, 2);","\tcount = gf_bs_read_int(bs, 6);","\tfor (i = 0; i < count; i++) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, prev_state->dims->data[0], num_batches);","TF_LITE_ENSURE_EQ(context, prev_state->dims->data[1], activation_depth);","","TfLiteTensor* activation_out = GetOutput(context, node, kOutputActivation);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["asdl_seq* defaults;","","if (lookup_attr_id(obj, &PyId_args, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","*data->invoke_count += 1;","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const uint8_t* input_data = GetTensorData<uint8_t>(input);","int size = NumElements(input->dims);",""],"label":1}
{"cve":"CVE-2022-35973","code_chunks":["      const bool transpose_a = true;","  const int a_rows = 1;","  const int a_cols = 1;","  const int b_rows = 1;","  const int b_cols = 1;","  const bool transpose_b = false;","  TF_ASSERT_OK(NodeDefBuilder(\"quantized_mat_mul_op\", \"QuantizedMatMul\")"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["theline = eap->getline(':', eap->cookie, indent, getline_options);","if (theline != NULL)","{","if (*eap->cmdlinep == *line_to_free)","*eap->cmdlinep = theline;","vim_free(*line_to_free);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["    reference_ops::NonMaxSuppression(","        input_boxes->data.f, num_boxes, input_scores->data.f,","        max_output_size_value, iou_threshold, score_threshold, soft_nms_sigma,","        output_selected_indices->data.i32, output_selected_scores->data.f,","        output_num_selected_indices->data.i32);","    ResetUnusedElementsToZeroes(","        max_output_size_value, *output_num_selected_indices->data.i32,"],"label":0}
{"cve":"PYSEC-2022-95","code_chunks":["","  string Name(int node_index, int output_index) const {","    if (output_index == 0) {","      return Name(node_index);","    } else {","      return strings::StrCat(Name(node_index), \":\", output_index);","    }"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["RLC_TRY {","fp8_new(r);","fp8_new(s);","for (i = 0; i < (1 << (FP_WIDTH - 2)); i ++) {","fp8_null(t[i]);","fp8_new(t[i]);","}"],"label":1}
{"cve":"CVE-2020-14403","code_chunks":["seg = data+(j*w);                                                 \\","if (seg[x] != cl) {break;}                                        \\","i = x;                                                            \\","while ((seg[i] == cl) && (i < w)) i += 1;                         \\","i -= 1;                                                           \\","if (j == y) vx = hx = i;                                          \\","if (i < vx) vx = i;                                               \\"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void bn_read_str(bn_t a, const char *str, int len, int radix) {","int sign, i, j;","char c;",""],"label":1}
{"cve":"CVE-2016-10190","code_chunks":["sizeof(headers) - len);","if (!has_header(s->headers, \"\\r\\nRange: \") && !post && (s->off > 0 || s->end_off || s->seekable == -1)) {","len += av_strlcatf(headers + len, sizeof(headers) - len,","\"Range: bytes=%\"PRId64\"-\", s->off);","if (s->end_off)","len += av_strlcatf(headers + len, sizeof(headers) - len,","\"%\"PRId64, s->end_off - 1);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    int isinstance;","","    isinstance = PyObject_IsInstance(obj, (PyObject *)Load_type);","    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["ep2_t t1[1 << (EP_WIDTH \/ 2)];","ep2_t t[1 << EP_WIDTH];","bn_t n, _k, _m;","int l0, l1, w = EP_WIDTH \/ 2;","uint8_t w0[2 * RLC_FP_BITS], w1[2 * RLC_FP_BITS];","","bn_null(n);"],"label":1}
{"cve":"CVE-2020-36315","code_chunks":["bn_read_bin(m, h1, RLC_MD_LEN);","*p_len = k_len - 2 * RLC_MD_LEN - 2 - m_len;","bn_lsh(m, m, *p_len * 8);","bn_lsh(m, m, 8);","bn_add_dig(m, m, 0x01);","\/* Make room for the real message. *\/"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["    int vector_size, vector_dim;","  std::tie(vector_size, vector_dim) =","      GetTensorVectorSizeAndDim(input_descriptor, input_type);","  std::vector<int64_t> input_dims = input_descriptor.vectorized_dims(","      dnn::DataLayout::kBatchDepthYX, vector_size, vector_dim);","  std::vector<int64_t> input_strides = input_descriptor.vectorized_strides(","      dnn::DataLayout::kBatchDepthYX, vector_size, vector_dim);"],"label":0}
{"cve":"CVE-2018-8099","code_chunks":["entry.flags = ntohs(source.flags);","","if (entry.flags & GIT_IDXENTRY_EXTENDED) {","uint16_t flags_raw;","size_t flags_offset;",""],"label":1}
{"cve":"CVE-2016-2324","code_chunks":["static void mark_commit(struct commit *c, void *data)","{","mark_object(&c->object, NULL, data);","}","","struct recent_data {"],"label":0}
{"cve":"CVE-2020-14404","code_chunks":["            }                                                                   \\","                                                                                \\","            cl->updateBuf[startUblen] |= rfbHextileAnySubrects;                 \\","                                                                                \\","            if (mono) {                                                         \\","                if (!validFg || (newFg != fg)) {                                \\","                    validFg = TRUE;                                             \\"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* in_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &in_tensor));","TfLiteTensor* out_tensor;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));"],"label":0}
{"cve":"CVE-2020-1712","code_chunks":["                        sd_bus_error_copy(ret_error, e);","                        return -sd_bus_error_get_errno(e);","                }","","                r = sd_bus_message_enter_container(q->reply, 'r', \"bba{ss}\");","                if (r >= 0)","                        r = sd_bus_message_read(q->reply, \"bb\", &authorized, &challenge);"],"label":0}
{"cve":"CVE-2018-20459","code_chunks":["int i, j;","char buf[128];","ArmOpcode aop = {.off = off};","for (i = j = 0; i < sizeof (buf) - 1 && str[j]; i++, j++) {","if (str[j] == '#') {","i--; continue;","}"],"label":0}
{"cve":"CVE-2021-44109","code_chunks":["ogs_assert(data);","","if (data->num_of_part < OGS_SBI_MAX_NUM_OF_PART && at && length) {","SWITCH(data->header_field)","CASE(OGS_SBI_CONTENT_TYPE)","ogs_assert(data->part[data->num_of_part].content_type == NULL);"],"label":0}
{"cve":"CVE-2018-15473","code_chunks":["","\tif (mechs == 0) {","\t\tdebug(\"Mechanism negotiation is not supported\");","\t\treturn (0);","\t}","","\tdo {"],"label":0}
{"cve":"PYSEC-2022-49","code_chunks":["","Status OpLevelCostEstimator::PredictFusedBatchNorm(","    const OpContext& op_context, NodeCosts* node_costs) const {","  bool found_unknown_shapes = false;","  const auto& op_info = op_context.op_info;","            TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,","                      OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,"],"label":0}
{"cve":"CVE-2017-6448","code_chunks":["vA = (int) buf[1];","vB = (buf[3] << 8) | buf[2];","vC = (buf[5] << 8) | buf[4];","sprintf (str, \" {v%i..v%i}, [%04x]\", vC, vC + vA - 1, vB);","strasm = r_str_concat (strasm, str);","break;","vA = (int) (buf[1] & 0xf0) >> 4;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","{","node->temporaries->data[1] = op_data->scratch_tensor_index + 1;","TfLiteTensor* scratch_buffer = GetTemporary(context, node, \/*index=*\/1);","const TfLiteTensor* rhs = op_context->rhs;","int rhs_rank = NumDimensions(rhs);","TfLiteIntArray* scratch_buffer_size = TfLiteIntArrayCreate(rhs_rank);"],"label":1}
{"cve":"CVE-2018-8098","code_chunks":["git_index_entry entry = {{0}};","bool compressed = index->version >= INDEX_VERSION_NUMBER_COMP;","char *tmp_path = NULL;","","if (INDEX_FOOTER_SIZE + minimal_entry_size > buffer_size)","return -1;",""],"label":0}
{"cve":"CVE-2019-15162","code_chunks":["#endif","","crypt_password = crypt(password, user_password);","if (crypt_password == NULL)","{","pcap_snprintf(errbuf, PCAP_ERRBUF_SIZE, \"Authentication failed\");"],"label":1}
{"cve":"CVE-2015-8631","code_chunks":["ret.code = KADM5_BAD_PRINCIPAL;","goto exit_func;","}","","if (CHANGEPW_SERVICE(rqstp)","|| !kadm5int_acl_check(handle->context, rqst2name(rqstp), ACL_DELETE,"],"label":1}
{"cve":"CVE-2022-28073","code_chunks":["r_num_math (core->num, arg + 1));","r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);","r_core_cmdf (core, \".dr*%d\", bits);","} else {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp_write_str(char *str, int len, const fp_t a, int radix);"],"label":1}
{"cve":"CVE-2017-12424","code_chunks":["\t\tdb->ops->free (nentry);","\t\terrno = ENOMEM;","\t\treturn 0;","\t}","","\tp->eptr = nentry;","\tp->line = NULL;"],"label":0}
{"cve":"CVE-2018-14466","code_chunks":["UNALIGNED_MEMCPY(&rxent->client, &ip->ip_src, sizeof(uint32_t));","UNALIGNED_MEMCPY(&rxent->server, &ip->ip_dst, sizeof(uint32_t));","rxent->dport = dport;","rxent->serviceId = EXTRACT_32BITS(&rxh->serviceId);","rxent->opcode = EXTRACT_32BITS(bp + sizeof(struct rx_header));","}",""],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2019-1010208","code_chunks":["\tInitializeObjectAttributes (&objectAttributes, &fullFileName, OBJ_CASE_INSENSITIVE | OBJ_KERNEL_HANDLE, NULL, NULL);","","\tntStatus = ZwCreateFile (volumeHandle,","\t\tSYNCHRONIZE | GENERIC_READ,","\t\t&objectAttributes,","\t\t&ioStatus,","\t\tNULL,"],"label":0}
{"cve":"CVE-2021-28041","code_chunks":["u_char ctype;","int r;","u_int seconds, maxsign = 0;","","while (sshbuf_len(m)) {","if ((r = sshbuf_get_u8(m, &ctype)) != 0) {"],"label":0}
{"cve":"CVE-2020-15121","code_chunks":["r_return_val_if_fail (s, NULL);","const char *p;","int ret, len = 0, bufsz = 32768, delta = 0;","char *dn, *buf = calloc (1, bufsz + 32); \tif (!buf) {","return NULL;","}"],"label":1}
{"cve":"CVE-2019-12111","code_chunks":["static void copyIPv6IfDifferent(void * dest, const void * src)","{","if(dest != src) {","memcpy(dest, src, sizeof(struct in6_addr));","}","}"],"label":1}
{"cve":"CVE-2020-15121","code_chunks":["close (2);","}","close (sh_err[0]);","close (sh_err[1]);","exit (r_sandbox_system (cmd, 0));","outputptr = strdup (\"\");"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["int res;","Py_ssize_t len;","Py_ssize_t i;","tmp = _PyObject_GetAttrId(obj, &PyId_values);","if (tmp == NULL) goto failed;","if (!PyList_Check(tmp)) {"],"label":1}
{"cve":"PYSEC-2021-766","code_chunks":["\"updates.shape \", updates.shape().DebugString(),","\", indices.shape \", indices.shape().DebugString(),","\", params.shape \", params->shape().DebugString()));","","const int64_t N_big = indices.NumElements();","OP_REQUIRES("],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TF_LITE_ENSURE(context, NumDimensions(input) <= 4);",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tint i, l;","\tbn_t t;","\tdig_t t0, mask;","\tint8_t u_i;","","\tbn_null(t);",""],"label":0}
{"cve":"CVE-2023-47016","code_chunks":["\t}","\tint type;","\tstruct section_t *section;","\tr_vector_foreach (sections, section) {","\t\tif (section->size == 0) {","\t\t\tcontinue;","\t\t}"],"label":0}
{"cve":"CVE-2022-25139","code_chunks":["njs_value_t         ctor, val, on_fulfilled, on_rejected, *value;","njs_promise_t       *promise;","njs_function_t      *fulfilled, *rejected;","njs_async_ctx_t     *ctx;","njs_native_frame_t  *active;","","active = &vm->active_frame->native;"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_cert.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_key.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/ca_cert.pem\"","exact: localhost","san_type: URI","exact: 127.0.0.1","san_type: IP_ADDRESS"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["g2_t g2;","gt_t e, u, v;","bn_t k, n;","int len, dlen = strlen(data), result = 1;","uint8_t *buf = RLC_ALLOCA(uint8_t, 1 + 8 * RLC_FP_BYTES + dlen);","","g1_null(g1);"],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["\/* Align data offset to 4-byte boundary *\/","fit_size = ALIGN(fdt_totalsize(fit_header), 4);","\/* External splash offset means the offset by end of FIT header *\/","external_splash_addr += location->offset + fit_size;","is_splash_external = true;","} else {"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["{","  unsigned idx, num;","  char *pos, *cp, *dp;","","  for (idx=0; idx < meta_length; idx += sget4(pos+8)) {","    pos = meta_data + idx;","    if (strncmp (pos, \"CMb\", 3)) break;"],"label":0}
{"cve":"CVE-2019-13220","code_chunks":["if (x1 > n) x1 = n;","if (x < x1) {","LINE_OP(output[x], inverse_db_table[y]);","for (++x; x < x1; ++x) {","err += ady;","if (err >= adx) {"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2018-20179","code_chunks":["\t{","\t\t\trv = bitmap_decompress1(output, width, height, input, size);","\t\t\tbreak;","\t\t\trv = bitmap_decompress2(output, width, height, input, size);","\t\t\tbreak;","\t\t\trv = bitmap_decompress3(output, width, height, input, size);","\t\t\tbreak;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\t\t\t\tbreak;","","\t\t\t\tif (!rdp_print_frame_acknowledge_capability_set(&sub))","\t\t\t\t\treturn FALSE;","","\t\t\t\tbreak;",""],"label":0}
{"cve":"CVE-2022-0443","code_chunks":["vim_free(buf->b_p_vsts_nopaste);","buf->b_p_vsts_nopaste = NULL;","vim_free(buf->b_p_vsts_array);","buf->b_p_vsts_array = NULL;","clear_string_option(&buf->b_p_vts);","VIM_CLEAR(buf->b_p_vts_array);"],"label":1}
{"cve":"CVE-2021-29602","code_chunks":["                                  const TfLiteTensor* filter,","                                  const TfLiteTensor* bias,","                                  TfLiteTensor* output) {","  float output_activation_min, output_activation_max;","  CalculateActivationRange(params->activation, &output_activation_min,","                           &output_activation_max);","  const int batch_size = SizeOfDimension(input, 0);"],"label":0}
{"cve":"CVE-2022-24792","code_chunks":["    PJ_ASSERT_RETURN(port->info.signature == SIGNATURE, PJ_EINVALIDOP);","","    PJ_LOG(1, (THIS_FILE, \"pjmedia_wav_playlist_set_eof_cb() is deprecated. \"","    \t       \"Use pjmedia_wav_playlist_set_eof_cb2() instead.\"));","","    fport = (struct playlist_port*) port;",""],"label":0}
{"cve":"CVE-2023-28486","code_chunks":["\t\t    sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,","\t\t\t\"failed to double remaining delay timeout\");","\t\t}","            }","\t    break;","\t    speed_factor *= 2;","\t    if (sudo_ev_pending(closure->delay_ev, SUDO_EV_TIMEOUT, &ts)) {"],"label":0}
{"cve":"CVE-2023-25933","code_chunks":["if (!arr->attached(runtime)) {                                         \\","return runtime.raiseTypeError(\"Underlying ArrayBuffer detached\");    \\","}                                                                      \\","return HermesValue::encodeNumberValue(arr->at(runtime, k));            \\","}","switch (O->getKind()) {","#include \"hermes\/VM\/TypedArrays.def\""],"label":1}
{"cve":"CVE-2018-14055","code_chunks":["        for (const auto& it2 : it.second) {","            File.Write(\"\\n\");","","            File.Write(SingleLine(sIndentation + \"<\" + it.first + \" \" +","                                  it2.first + \">\") +","                       \"\\n\");","            it2.second.m_pSubConfig->Write(File, iIndentation + 1);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["ReluOpData* data = reinterpret_cast<ReluOpData*>(node->user_data);","TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input = GetInput(context, node, 0);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["    TF_LITE_ENSURE_OK(","        context, GetOutputSafe(context, node, kNMSOutputTensorSelectedIndices,","                               &output_selected_indices));","    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node,","                                             kNMSOutputTensorNumSelectedIndices,","                                             &output_num_selected_indices));","    if (!is_max_output_size_const) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params =","reinterpret_cast<TfLiteLocalResponseNormParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["\t\t\tbreak;","\t\tcase 20003:\t\t\/* Write *\/","\t\t\tND_PRINT(\" tid\");","\t\t\tUBIK_VERSIONOUT();","\t\t\tND_PRINT(\" file\");","\t\t\tINTOUT();","\t\t\tND_PRINT(\" pos\");"],"label":0}
{"cve":"CVE-2022-0476","code_chunks":["0);","","offset = entry->location.rva + sizeof (memory_list);","for (i = 0; i < memory_list.number_of_memory_ranges; i++) {","struct minidump_memory_descriptor *desc = R_NEW (struct minidump_memory_descriptor);","if (!desc) {","break;"],"label":1}
{"cve":"CVE-2022-36017","code_chunks":["","void Compute(OpKernelContext* ctx) override {","const Tensor& input = ctx->input(0);","const float input_min_float = ctx->input(1).flat<float>()(0);","const float input_max_float = ctx->input(2).flat<float>()(0);","const float requested_output_min_float = ctx->input(3).flat<float>()(0);"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["parser->m_declAttributeType = atypeENTITIES;","goto checkAttListDeclHandler;","parser->m_declAttributeType = atypeNMTOKEN;","goto checkAttListDeclHandler;","parser->m_declAttributeType = atypeNMTOKENS;","if (dtd->keepProcessing && parser->m_attlistDeclHandler)"],"label":1}
{"cve":"CVE-2017-9763","code_chunks":["      struct find_file_closure cc;","","      \/* Extract the actual part from the pathname.  *\/","      next = grub_strchr (name, '\/');","      if (next)","\t{","\t  \/* Remove all leading slashes.  *\/"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["size_t l, n;","int8_t naf[RLC_FP_BITS + 1];","ep2_t t[1 << (EP_WIDTH - 2)];","","RLC_TRY {","\/* Prepare the precomputation table. *\/"],"label":0}
{"cve":"CVE-2019-1010317","code_chunks":["                                if (descriptions [i].mChannelLabel == label) {","                                    config->channel_mask |= 1 << (label - 1);","                                    channel_reorder [i] = cindex++;","                                    break;","                                }","","                        "],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["goto theend;","}","","ufunc = define_function(eap, lambda_name, line_to_free);","if (ufunc == NULL)","{","r = eap->skip ? OK : FAIL;"],"label":1}
{"cve":"CVE-2021-45985","code_chunks":["        setobjs2s(L, ci->func + i, func + i);","      func = ci->func;  \/* moved-down function *\/","      for (; narg1 <= nfixparams; narg1++)","        setnilvalue(s2v(func + narg1));  \/* complete missing arguments *\/","      ci->top = func + 1 + fsize;  \/* top for new function *\/","      lua_assert(ci->top <= L->stack_last);","      ci->u.l.savedpc = p->code;  \/* starting point *\/"],"label":0}
{"cve":"CVE-2019-17178","code_chunks":["","\t\/* The tag used as header in the manpage *\/","\tfprintf(fp, \"<refsect1>\\n\");","\tfprintf(fp, \"\\t<title>Options<\/title>\\n\");","\tfprintf(fp, \"\\t\\t<variablelist>\\n\");","","\t\/* Iterate over argument struct and write data to docbook 4.5"],"label":0}
{"cve":"CVE-2019-14495","code_chunks":["break;","}","printstr(&pp, \"<h3>Please be careful editing config file remotely<\/h3>\");","printstr(&pp, \"<form method=\\\"POST\\\" action=\\\"\/U\\\"><textarea cols=\\\"80\\\" rows=\\\"30\\\" name=\\\"conffile\\\">\");","while(fgets(buf, 256, fp)){","printstr(&pp, buf);","}"],"label":1}
{"cve":"CVE-2018-20786","code_chunks":["INTERNAL void vterm_allocator_free(VTerm *vt, void *ptr)","{","(*vt->allocator->free)(ptr, vt->allocdata);","}","","void vterm_get_size(const VTerm *vt, int *rowsp, int *colsp)"],"label":1}
{"cve":"CVE-2018-16640","code_chunks":["alpha_image_info=(ImageInfo *) NULL;","color_image_info=(ImageInfo *) NULL;","","logging=LogMagickEvent(CoderEvent,GetMagickModule(),","\"  Enter ReadOneJNGImage()\");",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","output->type = input->type;","if (IsConstantTensor(axis)) {","int axis_value;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"body\\\" missing from Try\");","            return 1;","        }","        else {","            int res;","            Py_ssize_t len;"],"label":0}
{"cve":"CVE-2020-5209","code_chunks":["flags.initrole = i;","break;","}","\/* else raw_printf(\"Unknown option: %s\", *argv); *\/","}","}",""],"label":1}
{"cve":"CVE-2018-20406","code_chunks":["            if (PyErr_Occurred()) {","                Py_DECREF(iterator);","                return NULL;","            }","        }","        Py_DECREF(iterator);","    }"],"label":0}
{"cve":"CVE-2016-1000004","code_chunks":["  return false;","}","","static Array HHVM_METHOD(SimpleXMLElement, getNamespaces,","                         bool recursive \/* = false *\/) {","  auto data = Native::data<SimpleXMLElement>(this_);","  Array ret = Array::Create();"],"label":0}
{"cve":"CVE-2018-14357","code_chunks":["imap_quote_string(term, sizeof(term), pat->p.str);","mutt_buffer_addstr(buf, term);","mutt_buffer_addch(buf, ' ');",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params =","reinterpret_cast<TfLiteResizeNearestNeighborParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2018-12561","code_chunks":["    }","    case Type_File: {","        QString path=fileFolder->text().trimmed();","        if (path.isEmpty()) {","            path=\"\/\";","        }","        det.url.setPath(path);"],"label":0}
{"cve":"CVE-2019-3556","code_chunks":["m_scalableCache->snapshotKeys(keys);","}","for (auto& key: keys) {","out << key.c_str() << \"\\n\";"],"label":1}
{"cve":"CVE-2021-32628","code_chunks":["if (o->encoding != OBJ_ENCODING_ZIPLIST) return;","","for (i = start; i <= end; i++) {","if (sdsEncodedObject(argv[i]) &&","sdslen(argv[i]->ptr) > server.hash_max_ziplist_value)","{"],"label":1}
{"cve":"CVE-2018-20742","code_chunks":["void ocall_malloc(size_t size, uint8_t **ret) {","*ret = static_cast<uint8_t *>(malloc(size));","}"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT32 railSupportLevel;","","if (Stream_GetRemainingLength(s) < 4)","return FALSE;",""],"label":0}
{"cve":"CVE-2019-15026","code_chunks":["        memcpy(ITEM_data(it), buf, res);","        memset(ITEM_data(it) + res, ' ', it->nbytes - res - 2);","        do_item_update(it);","    } else if (it->refcount > 1) {","        item *new_it;","        uint32_t flags;","        FLAGS_CONV(it, flags);"],"label":0}
{"cve":"CVE-2016-10161","code_chunks":["\t\t\tgoto yy70;","\t\t} else {","\t\t\tif (yych <= '\/') goto yy18;","\t\t\tif (yych <= '9') goto yy58;","\t\t\tgoto yy18;","\t\t}","\t} else {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\tfp9_read_bin(a[1][1], bin + 9 * RLC_FP_BYTES, 9 * RLC_FP_BYTES);","\t\tfp9_read_bin(a[2][0], bin + 18 * RLC_FP_BYTES, 9 * RLC_FP_BYTES);","\t\tfp9_read_bin(a[2][1], bin + 27 * RLC_FP_BYTES, 9 * RLC_FP_BYTES);","\t\tfp54_back_cyc(a, a);","\t}","\tif (len == 54 * RLC_FP_BYTES) {","\t\tfp18_read_bin(a[0], bin, 18 * RLC_FP_BYTES);"],"label":0}
{"cve":"CVE-2019-25048","code_chunks":["#define PTHREAD_MUTEX_INITIALIZER\t{ 0, 0, 0, 0, 0, 0 }"],"label":1}
{"cve":"CVE-2016-3672","code_chunks":["\tunsigned long gap = rlimit(RLIMIT_STACK);","","\tif (gap < MIN_GAP)","\t\tgap = MIN_GAP;","\telse if (gap > MAX_GAP)","\t\tgap = MAX_GAP;",""],"label":0}
{"cve":"CVE-2021-42778","code_chunks":["char *name;","int r;","","LOG_FUNC_CALLED(card->ctx);","","if (tname == NULL) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","const TfLiteTensor* input_gate_bias =","GetOptionalInputTensor(context, node, kInputGateBiasTensor);","const TfLiteTensor* forget_gate_bias =","GetInput(context, node, kForgetGateBiasTensor);"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["\t\t\telse","\t\t\t\tND_PRINT(\"LQI %u, \", GET_U_1(bp + 8));","","\t\t\tzep_print_ts(ndo, bp + 9);","\t\t\tseq_no = GET_BE_U_4(bp + 17);","\t\t\tinner_len = GET_U_1(bp + 31);","\t\t\tND_PRINT(\", seq# = %u, inner len = %u\","],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["GetInput(context, node, kRecurrentWeightsTensor);","const TfLiteTensor* bias = GetInput(context, node, kBiasTensor);","TfLiteTensor* hidden_state =","const_cast<TfLiteTensor*>(GetInput(context, node, kHiddenStateTensor));","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);",""],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["}","","TfLiteTensor CreateQuantizedTensor(const int16_t* data, TfLiteIntArray* dims,","                                   float scale, int zero_point,","                                   bool is_variable) {","  TfLiteTensor result = CreateTensor(dims, is_variable);","  result.type = kTfLiteInt16;"],"label":0}
{"cve":"PYSEC-2021-740","code_chunks":["        context, fixed_length % sizeof(T) == 0,","        errors::InvalidArgument(","            \"fixed_length (\", fixed_length,","            \") must be a multiple of the size of out_type (\", sizeof(T), \")\"));","","    OP_REQUIRES(context, fixed_length > 0,","                errors::InvalidArgument(\"fixed_length (\", fixed_length,"],"label":0}
{"cve":"CVE-2018-5804","code_chunks":["    { 5344, 3584, 126,100,  0,  2 },","    { 5360, 3516, 158, 51,  0,  0 },","    { 5568, 3708,  72, 38,  0,  0 },","    { 5632, 3710,  96, 17,  0,  0, 0, 16, 0, 0, 0x49 },","    { 5712, 3774,  62, 20, 10,  2 },","    { 5792, 3804, 158, 51,  0,  0 },","    { 5920, 3950, 122, 80,  2,  0 },"],"label":0}
{"cve":"CVE-2022-35973","code_chunks":["AddInputFromArray<float>(TensorShape({1}), {0});","AddInputFromArray<float>(TensorShape({1}), {255.0f});","TF_ASSERT_OK(RunOpKernel());","Tensor expected(allocator(), DT_QINT32, TensorShape({a_cols, b_cols}));","test::FillValues<qint32>(&expected, {"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["text[tmp_length] = '\\0';","midi_setup_copyright(mdi, text);","","ret_cnt += tmp_length;","","} else if (event_data[0] == 0x03) {"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["  }","","      if (mode.is_single_run_aead &&","      !EVP_DecryptUpdate(","          cipher_ctx, nullptr, &result_len, nullptr, decoded_data.size())) {","    raise_warning(\"Setting of data length failed\");","    return false;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(body, i, value);"],"label":1}
{"cve":"PYSEC-2021-827","code_chunks":["if (group_key_t.dims() > 0) {","return errors::Internal(\"Unexpected dimensions on input group_key, got \",","group_key_t.shape().DebugString());","}","","auto group_size = group_size_t.unaligned_flat<int32>()(0);"],"label":1}
{"cve":"PYSEC-2021-629","code_chunks":["    }","            NodeDef sub_node;","    sub_node.add_input(c->def().input(0));","    sub_node.add_input(c->def().input(0));","    sub_node.set_device(c->def().device());","    SetAttrValue(data_type_, &(*sub_node.mutable_attr())[\"T\"]);","    merge_op_ = BuildOpKernel(c, reduction, &sub_node);"],"label":0}
{"cve":"CVE-2020-24371","code_chunks":["          \/* white objects are simply removed *\/","          if (!iswhite(curr)) {  \/* not white? *\/","            lua_assert(isold(curr));","            if (getage(curr) == G_TOUCHED2)  \/* advance from G_TOUCHED2... *\/","              changeage(curr, G_TOUCHED2, G_OLD);  \/* ... to G_OLD *\/","            gray2black(curr);  \/* make it black *\/","          }"],"label":0}
{"cve":"CVE-2018-20839","code_chunks":["continue;","}","","if (verify_vc_kbmode(fd_d) < 0)","continue;","","toggle_utf8(ttyname, fd_d, utf8);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);","","const TfLiteTensor* lookup = GetInput(context, node, 0);","TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);","TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);",""],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (!vararg)","return NULL;","","i += 2; \/* the star and the name *\/"],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["tiff_ifd[tiff_nifds-1].t_shutter =","shutter = libraw_powf64(2.0, expo);","break;","if ((fabs(ape = getreal(type))<256.0) && (!aperture))","aperture = libraw_powf64(2.0, ape\/2);","break;"],"label":1}
{"cve":"CVE-2022-23567","code_chunks":["","const auto indices_mat = indices_t->matrix<int64_t>();","const auto shape_vec = shape_t->vec<int64_t>();","const auto lhs_dims = BCast::FromShape(TensorShape(shape_vec));","const auto rhs_dims = BCast::FromShape(dense_t->shape());","BCast b(lhs_dims, rhs_dims, false);","auto VecGreaterEq = [](ArraySlice<int64_t> lhs, ArraySlice<int64_t> rhs) {"],"label":1}
{"cve":"CVE-2023-41337","code_chunks":["}","#endif","","SSL_CTX_set_session_id_context(identity->ossl, H2O_SESSID_CTX, H2O_SESSID_CTX_LEN);","setup_ecc_key(identity->ossl);","if (cipher_suite != NULL && SSL_CTX_set_cipher_list(identity->ossl, (*cipher_suite)->data.scalar) != 1) {","h2o_configurator_errprintf(cmd, *cipher_suite, \"failed to setup SSL cipher suite\\n\");"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["return 1;","}","if (isinstance) {","int lineno;","","if (_PyObject_HasAttrId(obj, &PyId_lineno)) {"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["    LOG(ERROR) << \"injecting CUDA init error; initialization will fail\";","  } else {","    res = cuInit(0 \/* = flags *\/);","  }","","  if (res == CUDA_SUCCESS) {","    return ::tsl::OkStatus();"],"label":0}
{"cve":"CVE-2019-20016","code_chunks":[" 00000240  46 52 48 50 00 08 00 00  00 02 00 10 00 00 00 00  |FRHP............|"," 00000250  00 00 00 00 00 00 ff ff  ff ff ff ff ff ff a3 0b  |................|"," 00000260  00 00 00 00 00 00 1e 03  00 00 00 00 00 00 00 10  |................|"," 00000270  00 00 00 00 00 00 00 08  00 00 00 00 00 00 00 08  |................|"," 00000280  00 00 00 00 00 00 16 00  00 00 00 00 00 00 00 00  |................|"," 00000290  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|"," 000002a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 04 00  |................|"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["dynamic_cvc->set_allow_expired_certificate(false);","dynamic_cvc->mutable_trusted_ca()->set_filename(TestEnvironment::substitute(","\"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/ca_cert.pem\"));","dynamic_cvc->add_match_subject_alt_names()->set_exact(\"second san\");","const std::string dynamic_verify_certificate_spki =","\"QGJRPdmx\/r5EGOFLb2MTiZp2isyC0Whht7iazhzXaCM=\";","dynamic_cvc->add_verify_certificate_spki(dynamic_verify_certificate_spki);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["stmt_ty o = (stmt_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["      &context->tensors[op_data->decoded_boxes_index];","","  TfLiteTensor* detection_boxes;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensorDetectionBoxes,","                                  &detection_boxes));","  TfLiteTensor* detection_classes;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","const TfLiteTensor* multipliers;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* top_k;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTopK, &top_k));","TF_LITE_ENSURE_TYPES_EQ(context, top_k->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, NumElements(top_k), 1);","const int32 k = *GetTensorData<int32_t>(top_k);",""],"label":0}
{"cve":"CVE-2017-11522","code_chunks":["image = CloneImage(IMimage,0,0,MagickFalse,exception);","image_info=(ImageInfo *) CloneImageInfo(IMimage_info);","if (image_info == (ImageInfo *) NULL)","ThrowWriterException(ResourceLimitError, \"MemoryAllocationFailed\");","","\/* Define these outside of the following \"if logging()\" block so they will","* show in debuggers."],"label":1}
{"cve":"CVE-2021-32439","code_chunks":["u32 *newSizes;","if (!stsz \/*|| !size *\/ || !sampleNumber) return GF_BAD_PARAM;","","if (sampleNumber > stsz->sampleCount + 1) return GF_BAD_PARAM;","","CHECK_PACK(GF_BAD_PARAM)"],"label":0}
{"cve":"PYSEC-2021-451","code_chunks":["","    OP_REQUIRES(context, TensorShapeUtils::IsMatrix(input_indices->shape()),","                errors::InvalidArgument(","                    \"Input indices should be a matrix but received shape \",","                    input_indices->shape().DebugString()));","","    OP_REQUIRES(context, TensorShapeUtils::IsVector(input_values->shape()),"],"label":0}
{"cve":"CVE-2022-35979","code_chunks":["","AddInputFromArray<quint8>(input_quantized.shape(),","input_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});","AddInputFromArray<float>(TensorShape({1}), {input_max});"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["    HHVM_RC_STR(MCRYPT_MODE_NOFB, \"nofb\");","    HHVM_RC_STR(MCRYPT_MODE_OFB, \"ofb\");","    HHVM_RC_STR(MCRYPT_MODE_STREAM, \"stream\");","    HHVM_RC_STR(MCRYPT_PANAMA, \"panama\");","    HHVM_RC_INT(MCRYPT_RAND, RAND);","    HHVM_RC_STR(MCRYPT_RC2, \"rc2\");","    HHVM_RC_STR(MCRYPT_RC6, \"rc6\");"],"label":0}
{"cve":"CVE-2017-6448","code_chunks":["sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);","}","} else if (buf[0] == 0x1c || buf[0] == 0x1f || buf[0] == 0x22) {","flag_str = R_ASM_GET_NAME (a, 'c', vB);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input_to_forget_weights =","GetInput(context, node, lstm::full::kInputToForgetWeightsTensor);","TF_LITE_ENSURE_EQ(context, input_to_forget_weights->dims->size, 2);","TF_LITE_ENSURE_EQ(context, input_to_forget_weights->dims->data[0], n_cell);","TF_LITE_ENSURE_EQ(context, input_to_forget_weights->dims->data[1], n_input);",""],"label":1}
{"cve":"CVE-2016-4563","code_chunks":["\f","\/*","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","%                                                                             %","%                                                                             %","%                                                                             %","+   T r a c e P r i m i t i v e                                               %"],"label":0}
{"cve":"PYSEC-2021-245","code_chunks":["return tensorflow::Status::OK();","return errors::InvalidArgument(","\"Unsupported partition type:\",","RowPartitionTypeToString(partition_type));"],"label":1}
{"cve":"CVE-2021-41131","code_chunks":[" # client accesses this module solely to set the repository directory.","  # This directory will hold the files downloaded from a remote repository.","  from tuf import settings","  settings.repositories_directory = 'local-repository'","","  # Next, the client creates a dictionary object containing the repository","  # mirrors.  The client may download content from any one of these mirrors."],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input2 = GetInput(context, node, 1);","TfLiteTensor* output = GetOutput(context, node, 0);","","TF_LITE_ENSURE_EQ(context, input1->dims->size, input2->dims->size);","for (int i = 0; i < input1->dims->size; ++i) {"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2016-4564","code_chunks":["\/*","Interpret graphic primitive.","*\/","GetNextToken(q,&q,extent,keyword);","if (*keyword == '\\0')","break;","if (*keyword == '#')"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["bool Monitor::ms_verify_authorizer(Connection *con, int peer_type,","int protocol, bufferlist& authorizer_data,","bufferlist& authorizer_reply,","bool& isvalid, CryptoKey& session_key)","{","dout(10) << \"ms_verify_authorizer \" << con->get_peer_addr()","<< \" \" << ceph_entity_type_name(peer_type)"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void rand_seed(uint8_t *buf, int size);"],"label":1}
{"cve":"CVE-2018-8098","code_chunks":["\treturn error;","}","","void git_index_snapshot_release(git_vector *snap, git_index *index)","{","\tgit_vector_free(snap);",""],"label":0}
{"cve":"CVE-2018-14357","code_chunks":["  {","    if (conn->account.type == MUTT_ACCT_TYPE_IMAP)","    {","      idata = conn->data;","      if (idata->state >= IMAP_AUTHENTICATED && now >= idata->lastread + ImapKeepalive)","      {","        imap_check(idata, 1);"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["cs, date_match, runas_match, cmnd_match, cb_data);","}","","if (cmnd_match != UNSPEC) {","\/*","* If user is running command as themselves,","* set ctx->runas.pw = ctx->user.pw."],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["return &context->tensors[tensor_index];","} else {"],"label":0}
{"cve":"CVE-2022-23565","code_chunks":["std::unordered_map<string, const OpDef::AttrDef*> a1_set;","for (const OpDef::AttrDef& def : a1) {","if (a1_set.find(def.name()) != a1_set.end()) {","LOG(ERROR) << \"AttrDef names must be unique, but '\" << def.name()","<< \"' appears more than once\";","}"],"label":0}
{"cve":"PYSEC-2021-259","code_chunks":["int64 total_size = 0;","for (auto& component : element) {","if (DataTypeCanUseMemcpy(component.dtype())) {","total_size += DMAHelper::buffer(&component)->size();","} else {","non_memcpy_components.emplace_back();","component.AsProtoTensorContent(&non_memcpy_components.back());"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["bitmapCache->update = ((freerdp*)settings->instance)->update;","bitmapCache->context = bitmapCache->update->context;","bitmapCache->cells =","(BITMAP_V2_CELL*)calloc(settings->BitmapCacheV2NumCells, sizeof(BITMAP_V2_CELL));","","if (!bitmapCache->cells)"],"label":0}
{"cve":"CVE-2016-10161","code_chunks":["\t\t\tif (yych <= '9') goto yy58;","\t\t\tif (yych <= 'H') goto yy18;","\t\t\tgoto yy56;","\t\t} else {","\t\t\tif (yych != 'N') goto yy18;","\t\t}","\t}"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["for (int i = 0; i < node->outputs->size; ++i) {","TfLiteTensor* output = GetOutput(context, node, i);","TfLiteTensor* subgraph_output =","active_branch_subgraph.tensor(active_branch_subgraph.outputs()[i]);","TfLiteIntArray* output_size = TfLiteIntArrayCopy(subgraph_output->dims);","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2021-4173","code_chunks":["ex_function(exarg_T *eap)","{","(void)define_function(eap, NULL);","}","","\/*"],"label":1}
{"cve":"PYSEC-2021-827","code_chunks":["                                              \/*group_size*\/ c->input(1),","                                              \/*group_key*\/ c->input(2),","                                              \/*instance_key*\/ c->input(3)),","                         done_with_cleanup);","    col_params->instance.shape = c->input(0).shape();","    col_params->merge_op = merge_op_.get();","    col_params->final_op = final_op_.get();"],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["\t )","    {","      is_raw = 0;","#ifdef LIBRAW_LIBRARY_BUILD","      RUN_CALLBACK(LIBRAW_PROGRESS_IDENTIFY,1,2);","#endif","      return;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["l = RLC_MAX(l0, l1);","if (bn_sign(b) == RLC_NEG) {","for (i = 0; i < l0; i++) {","naf0[i] = -naf0[i];","}","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* seq_lengths;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2018-25032","code_chunks":["\/* Try to guess if it is profitable to stop the current block here *\/","if ((s->last_lit & 0x1fff) == 0 && s->level > 2) {","\/* Compute an upper bound for the compressed length *\/","ulg out_length = (ulg)s->last_lit*8L;","ulg in_length = (ulg)((long)s->strstart - s->block_start);","int dcode;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","bool requires_broadcast = !HaveSameShapes(input1, input2);","switch (input1->type) {","Comparison<float, reference_ops::LessFn>(input1, input2, output,"],"label":1}
{"cve":"CVE-2017-16910","code_chunks":["    fseek(ifp, 12, SEEK_CUR);","    is_raw = get4();","    fseeko(ifp, rdvo + 8 + shot_select * 4, SEEK_SET);","    data_offset = get4();","  }","}",""],"label":0}
{"cve":"CVE-2021-31261","code_chunks":["\t\tif (remove_ocr) esd->OCRESID = 0;","\t\telse if (esd->OCRESID == esd->ESID) esd->OCRESID = 0;","","\t\tgf_list_add(iod->ESDescriptors, esd);","","\t\tif (is_ok) {","\t\t\tu32 has_a, has_v, has_i_a, has_i_v;"],"label":0}
{"cve":"CVE-2017-12664","code_chunks":["flags|=PALM_HAS_TRANSPARENCY_FLAG;","}","*ptr++=(unsigned char) ((color16 >> 8) & 0xff);","*ptr++=(unsigned char) (color16 & 0xff);","p+=GetPixelChannels(image);","}"],"label":1}
{"cve":"CVE-2016-2315","code_chunks":["","bitmap_pos = bitmap_position(object->oid.hash);","","if (bitmap_pos < 0) {","char *name = path_name(path, last);","bitmap_pos = ext_index_add_object(object, name);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int fb_get_bit(const fb_t a, size_t bit) {","\tint d;","","\tRLC_RIP(bit, d, bit);","","\treturn (a[d] >> bit) & 1;","}"],"label":0}
{"cve":"CVE-2017-6194","code_chunks":["if (amount < n_got || amount > UT32_MAX) {","goto out_error;","}","struct reloc_struct_t *got_table = calloc (1, n_got * sizeof (ut32));","if (got_table) {","ut32 offset = 0;","for (i = 0; i < n_got ; offset += 4, i++) {"],"label":1}
{"cve":"CVE-2021-46784","code_chunks":["","","                        icon_url = mimeGetIconURL(\"internal-image\");","                        break;","","","                        icon_url = mimeGetIconURL(\"internal-sound\");"],"label":0}
{"cve":"CVE-2018-20174","code_chunks":["\t\t\t       update_type);","\t}","\tui_end_update();","}","","","\/* Process TS_LOGIN_INFO_EXTENDED data structure *\/"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp6_write_bin(uint8_t *bin, int len, const fp6_t a);"],"label":1}
{"cve":"CVE-2021-21413","code_chunks":["Context::Scope context_scope{context_handle};","Local<Value> key_inner = key->CopyInto();","Local<Object> object = Local<Object>::Cast(Deref(reference));","bool allow = [&]() {","if (!inherit) {","if (key_inner->IsName()) {"],"label":1}
{"cve":"CVE-2018-8796","code_chunks":["\tRD_BOOL rv = False;","","\tswitch (Bpp)","\t{","\t\t\trv = bitmap_decompress1(output, width, height, input, size);","\t\t\tbreak;","\t\t\trv = bitmap_decompress2(output, width, height, input, size);"],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["      priv->needs_resolve = FALSE;","      priv->needs_tokens = FALSE;","      if (!resolve_ops (self, cancellable, error))","        return FALSE;","","      \/* We might need tokens early, if reading individual commits needs it,","       * otherwise we try to delay to bunch the requests *\/"],"label":0}
{"cve":"CVE-2022-29226","code_chunks":["}","","const auto query_parameters = Http::Utility::parseQueryString(path_str);","if (query_parameters.find(queryParamsError()) != query_parameters.end()) {","sendUnauthorizedResponse();","return Http::FilterHeadersStatus::StopIteration;"],"label":1}
{"cve":"CVE-2018-15501","code_chunks":["\t * of the protocol. Not knowing what to do with an empty","\t * line, we should return an error upon hitting one.","\t *\/","\tif (len == PKT_LEN_SIZE) {","\t\tgiterr_set_str(GITERR_NET, \"Invalid empty packet\");","\t\treturn GIT_ERROR;","\t}"],"label":0}
{"cve":"CVE-2018-1129","code_chunks":["if (!HAVE_FEATURE(features, CEPHX_V2)) {","","struct {","__u8 v;","__le64 magic;","__le32 len;"],"label":0}
{"cve":"CVE-2022-4415","code_chunks":["(void) iovw_put_string_field_free(iovw, \"COREDUMP_PROC_LIMITS=\", t);","","p = procfs_file_alloca(pid, \"cgroup\");","if (read_full_virtual_file(p, &t, NULL) >=0)","(void) iovw_put_string_field_free(iovw, \"COREDUMP_PROC_CGROUP=\", t);"],"label":1}
{"cve":"CVE-2023-23457","code_chunks":["e_phnum = get_te16(&ehdri.e_phnum);","e_shnum = get_te16(&ehdri.e_shnum);","unsigned const e_phentsize = get_te16(&ehdri.e_phentsize);","if (ehdri.e_ident[Elf32_Ehdr::EI_CLASS]!=Elf32_Ehdr::ELFCLASS32","|| sizeof(Elf32_Phdr) != e_phentsize","|| (Elf32_Ehdr::ELFDATA2MSB == ehdri.e_ident[Elf32_Ehdr::EI_DATA]","&& &N_BELE_RTP::be_policy != bele)"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kOutputShapeTensor, &output_shape));","const TfLiteTensor* weights;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kWeightsTensor, &weights));","const TfLiteTensor* input;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["return;","}","","RLC_RIP(bits, digits, bits);","","if (digits > 0) {"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\tUINT32 drawGDIPlusSupportLevel;","\tUINT32 drawGdiplusCacheLevel;","","\tif (Stream_GetRemainingLength(s) < 36)","\t\treturn FALSE;","","\tStream_Read_UINT32(s, drawGDIPlusSupportLevel); \/* drawGDIPlusSupportLevel (4 bytes) *\/"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      const int offset = b * input_size;","      tensor_utils::SymmetricQuantizeFloats(","          input_ptr + offset, input_size, quantized_input_ptr_batch + offset,","          &unused_min, &unused_max, &scaling_factors_ptr[b]);","      scaling_factors_ptr[b] *= filter->params.scale;","    }","  }"],"label":0}
{"cve":"CVE-2023-5595","code_chunks":["switch (trak->Media->handler->handlerType) {","break;","return GF_BAD_PARAM;","}","","txt = (GF_Tx3gSampleEntryBox*)gf_list_get(trak->Media->information->sampleTable->SampleDescription->child_boxes, descriptionIndex - 1);","if (!txt) return GF_BAD_PARAM;"],"label":0}
{"cve":"CVE-2021-33910","code_chunks":["assert(ret);","","p = strdupa(f);","if (!p)","return -ENOMEM;",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  TfLiteIntArray* bw_scratch_buffer_size = TfLiteIntArrayCreate(2);","  bw_scratch_buffer_size->data[0] = n_batch;","  if (bw_use_cifg) {","        bw_scratch_buffer_size->data[1] = n_bw_cell * 3;","  } else {","        bw_scratch_buffer_size->data[1] = n_bw_cell * 4;","  }"],"label":0}
{"cve":"CVE-2022-28049","code_chunks":["","if (code->ctor) {","\/* Array of the form [,,,], [1,,]. *\/","if (array->object.fast_array) {","value = array->start;","length = array->length;",""],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {"],"label":1}
{"cve":"CVE-2021-38160","code_chunks":["while ((buf = virtqueue_get_buf(vq, &len))) {","spin_unlock(&portdev->c_ivq_lock);","","buf->len = len;","buf->offset = 0;","","handle_control_message(vq->vdev, portdev, buf);"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["    }","  }","","  return make_tv<KindOfInt64>(length);","}","","int64_t HHVM_FUNCTION(strlen,"],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["      usage(argv[0], XMLWF_EXIT_USAGE_ERROR);","          }","  }","  if (i == argc) {","    useStdin = 1;","    processFlags &= ~XML_MAP_FILE;","    i--;"],"label":0}
{"cve":"CVE-2016-9583","code_chunks":["jas_eprintf(\"warning: stopping decode prematurely as requested\\n\");","return 0;","}","if (jas_getdbglevel() >= 1) {","jas_eprintf(\"packet offset=%08ld prg=%d cmptno=%02d \"","\"rlvlno=%02d prcno=%03d lyrno=%02d\\n\", (long)"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","    const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TF_LITE_ENSURE(context, NumDimensions(input) >= 2);"],"label":0}
{"cve":"CVE-2022-24950","code_chunks":["int PipeSocketHandler::connect(const SocketEndpoint& endpoint) {","  lock_guard<std::recursive_mutex> mutexGuard(globalMutex);","","  string pipePath = endpoint.name();","  sockaddr_un remote;","","  int sockFd = ::socket(AF_UNIX, SOCK_STREAM, 0);"],"label":0}
{"cve":"CVE-2018-20179","code_chunks":["STREAM s;","int length;","int tagval;","struct stream packet;","","s = tcp_recv(NULL, 4);"],"label":0}
{"cve":"CVE-2022-29209","code_chunks":["void operator&(const T&)const {}"],"label":1}
{"cve":"CVE-2016-10167","code_chunks":["    int red[3], blue[3];","    int x, y, i, j;","    char *path;","","    red[0] = gdTrueColorAlpha(0, 0, 255, 127);","    red[1] = gdTrueColorAlpha(0, 0, 255, 63);","    red[2] = gdTrueColorAlpha(0, 0, 255, 0);"],"label":0}
{"cve":"CVE-2022-0695","code_chunks":["r_list_append (sections, ptr);","} else if (lrec.rec_type == LMF_FIXUP_REC) {","RBinReloc *ptr = R_NEW0 (RBinReloc);","if (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {","goto beach;","}"],"label":1}
{"cve":"CVE-2020-12062","code_chunks":["}","","int","okname(char *cp0)","{","\tint c;","\tchar *cp;"],"label":0}
{"cve":"CVE-2023-45145","code_chunks":["        return ANET_ERR;","    }","","    if (sa->sa_family == AF_LOCAL && perm)","        chmod(((struct sockaddr_un *) sa)->sun_path, perm);","","    if (listen(s, backlog) == -1) {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["n->n_end_lineno, n->n_end_col_offset, c->c_arena);","return Yield(exp, LINENO(n), n->n_col_offset,","n->n_end_lineno, n->n_end_col_offset, c->c_arena);","}"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["reinterpret_cast<TfLiteSpaceToDepthParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2021-32439","code_chunks":["GF_Err stbl_AddSize(GF_SampleSizeBox *stsz, u32 sampleNumber, u32 size, u32 nb_pack_samples)","{","u32 i, k;","u32 *newSizes;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["BOOL guidRemoteFx = FALSE;","BOOL guidRemoteFxImage = FALSE;","","if (length < 5)","return FALSE;",""],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["                pj_sockaddr_init(pj_AF_INET(), &ap.rem_addr, 0, 0);","","            if (use_rtcp_mux) {","                \/* Using RTP & RTCP multiplexing *\/","                pj_sockaddr_cp(&ap.rem_rtcp, &ds->rem_addr);","            } else if (pj_sockaddr_has_addr(&ds->rem_rtcp)) {","                pj_sockaddr_cp(&ap.rem_rtcp, &ds->rem_rtcp);"],"label":0}
{"cve":"CVE-2021-31566","code_chunks":["\t\t\tle->fixup |=TODO_MODE_BASE;","\t\t\tle->mode = mode_final;","\t\t}","\t\treturn (ARCHIVE_OK);","\t}","","\t\/*"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["  int64_t processed_batches = 0;","  while (processed_batches < num_batches) {","    int64_t num_batches_per_split =","        std::min(max_batches_per_split, num_batches - processed_batches);","    int64_t offset_input = processed_batches * elements_per_batch_input *","                           CudnnDataTypeToByteSize(cudnn_input_type);","    int64_t offset_output = processed_batches * elements_per_batch_output *"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["    str[0] = '(';","    memcpy(str+1, expr_start, len);","    str[len+1] = ')';","    str[len+2] = 0;","","    cf.cf_flags = PyCF_ONLY_AST;","    mod_n = PyParser_SimpleParseStringFlagsFilename(str, \"<fstring>\","],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["struct sljit_label *caseless_loop;","jump_list *no_match = NULL;","int source_reg = COUNT_MATCH;","int source_end_reg = ARGUMENTS;","int char1_reg = STACK_LIMIT;","#endif \/* SUPPORT_UNICODE *\/",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);"],"label":0}
{"cve":"CVE-2022-47934","code_chunks":["kIPFSResolveMethod, static_cast<int>(IPFSResolveMethodTypes::IPFS_LOCAL));","","auto brave_request_info = std::make_shared<brave::BraveRequestInfo>(url);","brave_request_info->resource_type = blink::mojom::ResourceType::kMainFrame;","brave_request_info->browser_context = profile()->GetOffTheRecordProfile(","Profile::OTRProfileID::CreateUnique(\"incognito\"), true);","int rc = ipfs::OnBeforeURLRequest_IPFSRedirectWork(brave::ResponseCallback(),"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["                PyErr_Format(PyExc_TypeError, \"ExceptHandler field \\\"body\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            body = _Py_asdl_seq_new(len, arena);","            if (body == NULL) goto failed;","            for (i = 0; i < len; i++) {"],"label":0}
{"cve":"PYSEC-2021-842","code_chunks":["output_shape.set_dim(0, output_rows);"],"label":1}
{"cve":"CVE-2023-48014","code_chunks":["dim_bit_offset[i] += dimension_id_len[j];","}","dimension_id_len[num_scalability_types - 1] = 1 + (5 - dim_bit_offset[num_scalability_types - 1]);","dim_bit_offset[num_scalability_types] = 6;","}","}"],"label":1}
{"cve":"PYSEC-2021-607","code_chunks":["done);","const int crop_height = grads.dim_size(1);","const int crop_width = grads.dim_size(2);","OP_REQUIRES_ASYNC(","context, crop_height > 0 && crop_width > 0,"],"label":1}
{"cve":"CVE-2016-6873","code_chunks":["VarEnv* v, Array &ret, const Variant& var) {","if (var.isArray()) {","auto adata = var.getArrayData();","auto check = couldRecur(var, adata);","if (check && !seen.insert(adata).second) {","raise_warning(\"compact(): recursion detected\");"],"label":0}
{"cve":"CVE-2019-19063","code_chunks":["rtlpriv->hw = hw;","rtlpriv->usb_data = kcalloc(RTL_USB_MAX_RX_COUNT, sizeof(u32),","GFP_KERNEL);","if (!rtlpriv->usb_data)","return -ENOMEM;","","\/* this spin lock must be initialized early *\/"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    TF_LITE_ENSURE_OK(context,","                      ExpandTensorDim(context, *input, axis_value, output));","  }","  if (output->type == kTfLiteString) {","    TfLiteTensorRealloc(input->bytes, output);","  }","  memcpy(output->data.raw, input->data.raw, input->bytes);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp4_read_bin(fp4_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"CVE-2023-28428","code_chunks":["if (st->filter == PDFIO_FILTER_NONE)","{","if (bytes > st->remaining)","rbytes = _pdfioFileRead(st->pdf, buffer, st->remaining);","else","rbytes = _pdfioFileRead(st->pdf, buffer, bytes);"],"label":0}
{"cve":"CVE-2015-8631","code_chunks":["            errmsg = krb5_get_error_message(handle->context, ret.code);","","        log_done(\"kadm5_chpass_principal\", prime_arg, errmsg,","                 &client_name, &service_name, rqstp);","","        if (errmsg != NULL)","            krb5_free_error_message(handle->context, errmsg);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteNode* node) {","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input = tflite::GetInput(context, node, kInputTensor);","if (input->type != kTfLiteUInt8) return kTfLiteError;","if (NumElements(input->dims) == 0) return kTfLiteError;",""],"label":1}
{"cve":"CVE-2017-3737","code_chunks":["# define SSL_ST_ERR                      0x05"],"label":1}
{"cve":"CVE-2019-17178","code_chunks":["tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));","","if (NULL == tmp)","{","fprintf(stderr,  \"Could not reallocate string buffer.\\n\");","exit(-3);"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["assertx(isStringType(type(function_name)));","strncpy(frame->function,","val(function_name).pstr->data(),","std::min(val(function_name).pstr->size(),","strobelight::kFunctionMax));"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\t\tif (!rdp_write_jpeg_server_capability_container(s, settings))","\t\t\t\treturn FALSE;","\t\t}","\t\telse","\t\t{","\t\t\tStream_Write_UINT8(s, RDP_CODEC_ID_JPEG); \/* codecID *\/",""],"label":0}
{"cve":"CVE-2022-0519","code_chunks":["R_API RBinJavaAttrInfo *r_bin_java_annotation_default_attr_new(RBinJavaObj *bin, ut8 *buffer, ut64 sz, ut64 buf_offset) {","ut64 offset = 0;","RBinJavaAttrInfo *attr = NULL;","attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);","offset += 6;","if (attr && sz >= offset) {","attr->type = R_BIN_JAVA_ATTR_TYPE_ANNOTATION_DEFAULT_ATTR;"],"label":1}
{"cve":"CVE-2020-15473","code_chunks":["    flow->ovpn_counter++;","    ","    if(failed) {","      NDPI_EXCLUDE_PROTO(ndpi_struct, flow);","    }","  }","}"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {","        *out = BitOr;","        return 0;","    }"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["                                tsl::strings::HumanReadableNumBytes(size), size,","                                device_ordinal, result.opaque());","  return OwningDeviceMemory(result, device_ordinal, this);","}","","tsl::Status StreamExecutorMemoryAllocator::Deallocate(int device_ordinal,","                                                      DeviceMemoryBase mem) {"],"label":0}
{"cve":"CVE-2022-23547","code_chunks":["pj_stun_errcode_attr *attr;","pj_str_t value;","","PJ_UNUSED_ARG(msghdr);","","\/* Create the attribute *\/"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["        pjmedia_ice_transport_info *ice_info;","","        pjmedia_transport_info_init(&info);","        pjmedia_transport_get_info(ds->srtp->member_tp, &info);","        ice_info = (pjmedia_ice_transport_info*)","                   pjmedia_transport_info_get_spc_info(","                                    &info, PJMEDIA_TRANSPORT_TYPE_ICE);"],"label":0}
{"cve":"CVE-2021-30014","code_chunks":["fmt->pic_width_luma_samples = gf_bs_read_int_log_idx(bs, 16, \"pic_width_luma_samples\", idx);","fmt->pic_height_luma_samples = gf_bs_read_int_log_idx(bs, 16, \"pic_height_luma_samples\", idx);","chroma_bitdepth_present_flag = gf_bs_read_int_log_idx(bs, 1, \"chroma_bitdepth_present_flag\", idx);","if (chroma_bitdepth_present_flag) {","fmt->chroma_format_idc = gf_bs_read_int_log_idx(bs, 2, \"chroma_format_idc\", idx);",""],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (exists_not_none(obj, &PyId_arg)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_arg);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"CVE-2023-0818","code_chunks":["char *sOK;","char szLineConv[2048];","unsigned short *sptr;","","memset(szLine, 0, sizeof(char)*lineSize);","sOK = gf_fgets(szLine, lineSize, txt_in);","if (!sOK) return NULL;"],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["void CxImage::Startup(uint32_t imagetype)","{","pDib = pDibLimit = pSelection = pAlpha = NULL;","ppLayers = ppFrames = NULL;","memset(&head,0,sizeof(BITMAPINFOHEADER));","memset(&info,0,sizeof(CXIMAGEINFO));"],"label":0}
{"cve":"CVE-2022-35972","code_chunks":["","  AddInputFromArray<qint32>(TensorShape({value_count}),","                            {-(1 << 23), 0, (1 << 23)});","  AddInputFromArray<float>(TensorShape({}), {-256.0f});","  AddInputFromArray<float>(TensorShape({}), {256.0f});","  AddInputFromArray<float>(TensorShape({}), {0.01f});","  AddInputFromArray<float>(TensorShape({}), {1.0f});"],"label":0}
{"cve":"CVE-2020-1918","code_chunks":["assertx(isStringType(type(function_name)));","strncpy(frame->function,","val(function_name).pstr->data(),","std::min(val(function_name).pstr->size(),","strobelight::kFunctionMax));"],"label":1}
{"cve":"PYSEC-2021-451","code_chunks":["void Compute(OpKernelContext* context) override {","const Tensor* input_indices;","const Tensor* input_values;","const Tensor* input_shape;","SparseTensorsMap* map;",""],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from excepthandler\");","return 1;"],"label":0}
{"cve":"CVE-2016-4562","code_chunks":["box_p[5],","box_q[5],","center,","offset,","*path_p,","*path_q;"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["bool DefaultCertValidator::verifyCertificateSpkiList(","    X509* cert, const std::vector<std::vector<uint8_t>>& expected_hashes) {","  X509_PUBKEY* pubkey = X509_get_X509_PUBKEY(cert);","  if (pubkey == nullptr) {","    return false;","  }","  uint8_t* spki = nullptr;"],"label":0}
{"cve":"CVE-2017-9763","code_chunks":["goto fail;","","return data;","","if (grub_errno == GRUB_ERR_OUT_OF_RANGE)","grub_error (GRUB_ERR_BAD_FS, \"not an ext2 filesystem\");"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","    const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInput, &input));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","  const TfLiteTensor* axis;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));"],"label":0}
{"cve":"CVE-2023-51782","code_chunks":["\t\t\tdevname = dev->name;","","\t\tseq_printf(seq, \"%-10s %-9s \",","\t\t\t   rose2asc(rsbuf, &rose->dest_addr),","\t\t\t   ax2asc(buf, &rose->dest_call));","","\t\tif (ax25cmp(&rose->source_call, &null_ax25_address) == 0)"],"label":0}
{"cve":"CVE-2021-3997","code_chunks":["_cleanup_(free_todo_entries) TodoEntry *todos = NULL;","size_t n_todo = 0;","_cleanup_free_ char *dirname = NULL; \/* Set when we are recursing and want to delete ourselves *\/","int ret = 0, r;","","\/* Return the first error we run into, but nevertheless try to go on."],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp8_write_bin(uint8_t *bin, size_t len, const fp8_t a) {","if (len != 8 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":0}
{"cve":"CVE-2021-33366","code_chunks":["\t\tgf_bs_write_int(bs, li->layer_id, 6);","\t\tgf_bs_write_int(bs, li->min_TemporalId, 3);","\t\tgf_bs_write_int(bs, li->max_TemporalId, 3);","\t\tgf_bs_write_int(bs, 0, 1);","\t\tgf_bs_write_int(bs, li->sub_layer_presence_flags, 7);","\t}","\treturn GF_OK;"],"label":0}
{"cve":"CVE-2018-12559","code_chunks":["if (RemoteFsDevice::constSambaAvahiProtocol==details.url.scheme()) {","Avahi::self();","QUrlQuery q(details.url);","if (q.hasQueryItem(constServiceNameQuery)) {","details.serviceName=q.queryItemValue(constServiceNameQuery);"],"label":1}
{"cve":"PYSEC-2021-245","code_chunks":["            RowPartitionTypeToString(partition_type));","    }","  }","","  Status GetFirstDimensionSize(OpKernelContext* context, INDEX_TYPE* result) {","    const Tensor first_partition_tensor =","        context->input(kFirstPartitionInputIndex);"],"label":0}
{"cve":"CVE-2022-39347","code_chunks":["irp->IoStatus = STATUS_UNSUCCESSFUL;","Stream_Write_UINT32(irp->output, 0); \/* Length *\/","}","else if (!drive_file_query_directory(file, FsInformationClass, InitialQuery, path, PathLength,","irp->output))"],"label":1}
{"cve":"CVE-2018-12561","code_chunks":["void RemoteDevicePropertiesWidget::update(const RemoteFsDevice::Details &d, bool create, bool isConnected)","{","int t=d.isLocalFile() ? Type_File : Type_SshFs;","setEnabled(d.isLocalFile() || !isConnected);","infoLabel->setVisible(create);","orig=d;"],"label":0}
{"cve":"CVE-2016-8690","code_chunks":["if ((c = jas_stream_getc(in)) == EOF) {","return -1;","}","v |= (c << 24);","if (--n <= 0) {","break;","}"],"label":1}
{"cve":"CVE-2018-16300","code_chunks":["ND_PRINT((ndo, \"+%x\", aflags & 0xf));","ND_PRINT((ndo, \"]: \"));","}","\/* FIXME check for recursion *\/"],"label":1}
{"cve":"CVE-2023-30187","code_chunks":["void CNativeControlEmbed::CreateObjectBuilderInContext(const std::string& name, JSSmart<CJSContext> context)","{","v8::Isolate* current = CV8Worker::GetCurrent();","context->m_internal->m_global->Set(current, name.c_str(), v8::FunctionTemplate::New(current, NSNativeControl::CreateNativeObjectBuilder));","}"],"label":1}
{"cve":"CVE-2023-51698","code_chunks":["g_ptr_array_free (comics_document->page_names, TRUE);","}","g_clear_pointer (&comics_document->page_positions, g_hash_table_destroy);","g_clear_object (&comics_document->archive);","g_free (comics_document->archive_path);","g_free (comics_document->archive_uri);"],"label":0}
{"cve":"CVE-2018-14357","code_chunks":["imap_quote_string(term, sizeof(term), pat->p.str);","mutt_buffer_addstr(buf, term);","mutt_buffer_addch(buf, ' ');",""],"label":1}
{"cve":"PYSEC-2021-550","code_chunks":["if (DataTypeCanUseMemcpy(component.dtype())) {","const TensorBuffer* buffer = DMAHelper::buffer(&component);","memcpy(position, buffer->data(), buffer->size());","metadata->set_tensor_size_bytes(buffer->size());","} else {","TensorProto& proto = non_memcpy_components[non_memcpy_component_index++];"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void bn_set_2b(bn_t a, int b);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  int* resolved_axis = static_cast<int*>(","      context->GetScratchBuffer(context, op_data->resolved_axis_idx));","  switch (input->type) {","      TF_LITE_ENSURE(","          context,","          reference_ops::ReduceGeneric<float>(","              tflite::micro::GetTensorData<float>(input), input->dims->data,"],"label":0}
{"cve":"CVE-2023-6039","code_chunks":["","cancel_delayed_work_sync(&dev->wq);","","phydev = net->phydev;","","phy_unregister_fixup_for_uid(PHY_KSZ9031RNX, 0xfffffff0);"],"label":1}
{"cve":"CVE-2019-15162","code_chunks":["#endif","","crypt_password = crypt(password, user_password);","if (crypt_password == NULL)","{","pcap_snprintf(errbuf, PCAP_ERRBUF_SIZE, \"Authentication failed\");"],"label":1}
{"cve":"CVE-2019-20911","code_chunks":["int error = 0;","int realloced = 0;","","\/* Keep the previous full chain  *\/","abs_dat = *dat;",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["node->temporaries = TfLiteIntArrayCreate(2);    }","node->temporaries->data[kFwScratchBuffer] =","op_data->scratch_tensor_index + kFwScratchBuffer;","TfLiteTensor* fw_scratch_buffer ="],"label":1}
{"cve":"CVE-2020-12887","code_chunks":[],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2023-1906","code_chunks":["\/*","Convert stripped TIFF image.","*\/","extent=4*MagickMax(image->columns*(samples_per_pixel+extra_samples)*","(image->depth+7)\/8,(size_t) TIFFStripSize(tiff));","strip_pixels=(unsigned char *) AcquireQuantumMemory(extent,","sizeof(*strip_pixels));"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["                std::min<int64_t>(","                  val(class_name).pstr->size(),","                  strobelight::kClassNameMax","                ));","        frame->class_name[strobelight::kClassNameMax - 1] = '\\0';","      }",""],"label":0}
{"cve":"CVE-2020-15852","code_chunks":["\t\/*","\t * Make sure that the TSS limit is covering the IO bitmap. It might have","\t * been cut down by a VMEXIT to 0x67 which would cause a subsequent I\/O","\t * access from user space to trigger a #GP because tbe bitmap is outside","\t * the TSS limit.","\t *\/","\trefresh_tss_limit();"],"label":0}
{"cve":"CVE-2021-40569","code_chunks":["\t}","\treturn GF_OK;","}","","#ifndef GPAC_DISABLE_ISOM_WRITE","GF_Err infe_box_write(GF_Box *s, GF_BitStream *bs)","{"],"label":0}
{"cve":"CVE-2016-10250","code_chunks":["} else {","box->datalen = box->len - JP2_BOX_HDRLEN(false);","}","if (box->len != 0 && box->len < 8) {","goto error;","}"],"label":1}
{"cve":"CVE-2022-21725","code_chunks":["bool found_unknown_shapes = false;","const auto& op_info = op_context.op_info;","ConvolutionDimensions dims = OpDimensionsFromInputs(","op_info.inputs(0).shape(), op_info, &found_unknown_shapes);","","int64_t ops = dims.batch * dims.ox * dims.oy * dims.oz * dims.kx * dims.ky;"],"label":1}
{"cve":"CVE-2022-1212","code_chunks":["","      if (e) {","        mrb_value *regs_a = regs + a;","","        if (b < MRB_ENV_LEN(e)) {","          e->stack[b] = *regs_a;","          mrb_write_barrier(mrb, (struct RBasic*)e);"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["args << \"--profile-dir\" << QString::fromStdString(\"\\\"\" + barrier::DataDirectories::profile().u8string() + \"\\\"\");","#endif","","if ((barrierType() == barrierClient && !clientArgs(args, app))"],"label":1}
{"cve":"CVE-2017-7189","code_chunks":["if (*(str) == '[' && str_len > 1) {","\/* IPV6 notation to specify raw address with port (i.e. [fe80::1]:80) *\/","p = memchr(str + 1, ']', str_len - 2);","if (!p || *(p + 1) != ':') {","if (get_err) {","*err = strpprintf(0, \"Failed to parse IPv6 address \\\"%s\\\"\", str);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["GetTemporary(context, node, kFftIntegerWorkingAreaTensor);","TfLiteIntArray* fft_integer_working_area_shape = TfLiteIntArrayCreate(1);","fft_integer_working_area_shape->data[0] =","2 + static_cast<int>(sqrt(fft_working_length));","TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, fft_integer_working_area,","fft_integer_working_area_shape));"],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["HeaderEntry* name() override { return inline_headers_.name##_; }                                 \\"],"label":1}
{"cve":"CVE-2016-6912","code_chunks":["        rv = NULL;","    } else {","        rv = gdDPExtractData(out, size);","    }","\tout->gd_free(out);","\treturn rv;","}"],"label":0}
{"cve":"CVE-2018-8796","code_chunks":["\t\t\t\t\tx = CVAL(in);","\t\t\t\t\tif (x & 1)","\t\t\t\t\t{","\t\t\t\t\t\tx = x >> 1;","\t\t\t\t\t\tx = x + 1;","\t\t\t\t\t\tcolor = -x;","\t\t\t\t\t}"],"label":0}
{"cve":"CVE-2018-17206","code_chunks":["            return OFPERR_OFPBIC_DUP_INST;","        }","        out[type] = inst;","    }","","    if (left) {","        VLOG_WARN_RL(&rl, \"bad instruction format at offset %\"PRIuSIZE,"],"label":0}
{"cve":"CVE-2023-51698","code_chunks":["\tComicsDocument *comics_document = COMICS_DOCUMENT (document);","\tgchar *mime_type;","\tGFile *file;","\tfile = g_file_new_for_uri (uri);","\tcomics_document->archive_path = g_file_get_path (file);","\tg_object_unref (file);",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);","  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);","","  return context->ResizeTensor(context, output, output_shape);","}"],"label":0}
{"cve":"CVE-2016-5842","code_chunks":["if (endian == LSBEndian)","{","value=(unsigned short) ((buffer[1] << 8) | buffer[0]);","return((unsigned short) (value & 0xffff));","}","value=(unsigned short) ((((unsigned char *) buffer)[0] << 8) |"],"label":1}
{"cve":"PYSEC-2022-69","code_chunks":["} else {","const auto& array_segments = dim_metadata_[metadata_idx];","const auto& array_indices = dim_metadata_[metadata_idx + 1];","for (int i = array_segments[prev_idx]; i < array_segments[prev_idx + 1];","i++) {","indices[level] = array_indices[i];"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["        chunk_length[i] += (*hmp_data++ << 16);","        chunk_length[i] += (*hmp_data++ << 24);","        chunk_ofs[i] += 4;","","        if (chunk_length[i] > hmp_size) {","            _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_NOT_HMP, \"file too short\", 0);","            goto _hmp_end;"],"label":0}
{"cve":"CVE-2020-1919","code_chunks":["m_cursor = offset;","} else {","assertx(whence == SEEK_END);","m_cursor = m_len + offset;","}","setPosition(m_cursor);"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["lazyClassToStringHelper(value.toLazyClassVal());","auto const size = str->size();","if (size >= RuntimeOption::MaxSerializedStringSize) {","throw Exception(\"Size of serialized string (%d) exceeds max\", size);","}","StringBuffer sb;","sb.append(\"s:\");"],"label":1}
{"cve":"CVE-2018-20786","code_chunks":["  vt->cols = cols;","","  if(vt->parser.callbacks && vt->parser.callbacks->resize)","    (*vt->parser.callbacks->resize)(rows, cols, vt->parser.cbdata);","}","","int vterm_get_utf8(const VTerm *vt)"],"label":0}
{"cve":"PYSEC-2021-242","code_chunks":["int alloc_size = TfLiteIntArrayGetSizeInBytes(size);","if (alloc_size <= 0) return NULL;","TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);","if (!ret) return ret;","ret->size = size;","return ret;"],"label":0}
{"cve":"CVE-2021-31255","code_chunks":["ISOM_DECREASE_SIZE(ptr, 1)","ptr->quality_entry_count = gf_bs_read_u8(bs);","for (i=0; i<ptr->quality_entry_count; i++) {","int j=0;","tmp_strsize=(u32)ptr->size;","while (tmp_strsize) {"],"label":1}
{"cve":"CVE-2017-1000251","code_chunks":["{","struct l2cap_pinfo *pi = l2cap_pi(sk);","struct l2cap_conf_req *req = data;","struct l2cap_conf_rfc rfc = { .mode = L2CAP_MODE_BASIC };","void *ptr = req->data;","","BT_DBG(\"sk %p\", sk);"],"label":1}
{"cve":"CVE-2016-9583","code_chunks":["JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {","for (pi->compno = pchg->compnostart, pi->picomp =","&pi->picomps[pi->compno]; pi->compno < pi->numcomps &&","pi->compno < JAS_CAST(int, pchg->compnoend); ++pi->compno, ++pi->picomp) {","if (pi->rlvlno >= pi->picomp->numrlvls) {","continue;","}"],"label":1}
{"cve":"CVE-2019-13222","code_chunks":["   int i,j;","   int n2 = n >> 1, nmask = (n << 3) - 1;","   memcpy(x, buffer, sizeof(*x) * n);","   for (i=0; i < 8*n; ++i)","      mcos[i] = (float) cos(M_PI \/ 4 * i \/ n);","   for (i=0; i < n; ++i) {","      float acc = 0;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["*data->invoke_count += 1;","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const uint8_t* input_data = GetTensorData<uint8_t>(input);","int size = NumElements(input->dims);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["\/*xDesc=*\/input_nd.handle(),","\/*wDesc=*\/filter.handle(), \/*convDesc=*\/conv.handle(),","\/*yDesc=*\/output_nd.handle(),","\/*algo=*\/ToConvForwardAlgo(algorithm_desc),","\/*sizeInBytes=*\/&size_in_bytes));","}"],"label":1}
{"cve":"CVE-2016-2324","code_chunks":["\t\/* Add all refs from the index file *\/","\tadd_index_objects_to_pending(revs, 0);","","\t\/* Add all external refs *\/","\tfor_each_ref(add_one_ref, revs);","","\t\/* detached HEAD is not included in the list above *\/"],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["{","if(len<1) return;   string[len-1]=0;","if(len<3) return;   len = strnlen(string,len-1);","for(int i=len-1; i>=0; i--)","{"],"label":1}
{"cve":"CVE-2020-26215","code_chunks":["t import string_types","","import notebook","from no"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["}","node->temporaries->data[kAccumScratch] =","op_data->scratch_tensor_index + kAccumScratch;","TfLiteTensor* accum_scratch = GetTemporary(context, node, kAccumScratch);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {std::max(fw_num_units, bw_num_units),"],"label":1}
{"cve":"PYSEC-2022-49","code_chunks":["  node_costs->num_output_bytes_accessed = {output_size};","  node_costs->max_memory = output_size;","","  if (found_unknown_shapes) {","    node_costs->inaccurate = true;","    node_costs->num_nodes_with_unknown_shapes = 1;","  }"],"label":0}
{"cve":"CVE-2020-9432","code_chunks":["      BIGNUM *bn = BN_get(L, 2);","      serial = BN_to_ASN1_INTEGER(bn, NULL);","      BN_free(bn);","    }","    luaL_argcheck(L, serial != NULL, 2, \"not accept\");","    ret = X509_set_serialNumber(cert, serial);","    ASN1_INTEGER_free(serial);"],"label":0}
{"cve":"CVE-2018-6560","code_chunks":["\/* First try to match any leftover at the start *\/","if (client->auth_end_offset > 0)","{","gsize left = strlen (AUTH_END_STRING) - client->auth_end_offset;","gsize to_match = MIN (left, buffer->pos);","\/* Matched at least up to to_match *\/"],"label":1}
{"cve":"CVE-2020-11089","code_chunks":["\t\t\tStream_Write_UINT64(output, lpNumberOfFreeClusters); \/* AvailableAllocationUnits *\/","\t\t\tStream_Write_UINT32(output, lpSectorsPerCluster);    \/* SectorsPerAllocationUnit *\/","\t\t\tStream_Write_UINT32(output, lpBytesPerSector);       \/* BytesPerSector *\/","\t\t\tbreak;","","\t\t\tStream_Write_UINT32(output, 8); \/* Length *\/",""],"label":0}
{"cve":"CVE-2018-5816","code_chunks":["    if (width == 4100) width -= 4;","    if (width == 4080) width -= 24;","    if (width == 9280) { width -= 6; height -= 6; }","    if (load_raw == &CLASS unpacked_load_raw)","      load_flags = 4;","    tiff_bps = 12;","    if (!strcmp(model,\"E-300\") ||"],"label":0}
{"cve":"CVE-2021-26927","code_chunks":["\tdec->pclr = 0;","\tdec->image = 0;","\tdec->chantocmptlut = 0;","\tdec->cmap = 0;","\tdec->colr = 0;","\treturn dec;","}"],"label":0}
{"cve":"CVE-2021-3997","code_chunks":["","                r = fstatat_harder(fd, fname, &st, AT_SYMLINK_NOFOLLOW, flags);","                if (r < 0)","                        return r;","","                is_dir = S_ISDIR(st.st_mode);","        }"],"label":0}
{"cve":"CVE-2016-10129","code_chunks":["if (reading_from_buf) {","\/* We had an existing partial packet, so add the new","* packet to the buffer and parse the whole thing *\/","git_buf_put(data_pkt_buf, data_pkt->data, data_pkt->len);","line = data_pkt_buf->ptr;","line_len = data_pkt_buf->size;"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["                        to, ToString(result)));","  }","","  return ::tsl::OkStatus();","}","","\/* static *\/ tsl::StatusOr<int> GpuDriver::GetMaxOccupiedBlocksPerCore("],"label":0}
{"cve":"CVE-2017-13146","code_chunks":["%                                                                             %","%   W r i t e M A T L A B I m a g e                                           %","%                                                                             %","%                                                                             %","%                                                                             %","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["return 1;","}","else {","int res;","res = obj2ast_boolop(tmp, &op, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2021-3331","code_chunks":["}","","bool HasPassword = (UserInfo.Pos(L':') > 0);","UnicodeString RawUserName = CutToChar(UserInfo, L':', false);","UserName = DecodeUrlChars(RawUserName);",""],"label":1}
{"cve":"CVE-2017-11368","code_chunks":["req_data.data = (char *)pa_data->contents;","","code = decode_krb5_pa_s4u_x509_user(&req_data, s4u_x509_user);","if (code)","return code;","","code = verify_s4u_x509_user_checksum(context,"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["{","unsigned i;","free(e->origin);","for (i = 0; i < e->num_matches; i++) {","struct match_attr *a = e->attrs[i];","size_t j;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, node->inputs->size, 1);","TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);","","const TfLiteTensor* input_resource_id_tensor ="],"label":1}
{"cve":"CVE-2016-2847","code_chunks":["","pipe = kzalloc(sizeof(struct pipe_inode_info), GFP_KERNEL);","if (pipe) {","pipe->bufs = kzalloc(sizeof(struct pipe_buffer) * PIPE_DEF_BUFFERS, GFP_KERNEL);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kOutputShapeTensor, &output_shape));","const TfLiteTensor* weights;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kWeightsTensor, &weights));","const TfLiteTensor* input;"],"label":0}
{"cve":"CVE-2018-16393","code_chunks":["\t\telse","\t\t\tr = sc_pkcs15emu_add_rsa_prkey(p15card, &prkey_obj, &prkey_info);","\t\tif (r < 0)","\t\t\treturn SC_ERROR_INTERNAL;","\t}","","\treturn SC_SUCCESS;"],"label":0}
{"cve":"CVE-2021-41136","code_chunks":["\t} else if ( (*p) > 57 ) {","\t\tif ( 65 <= (*p) && (*p) <= 90 )","\t\t\tgoto st37;","\t} else","\t\tgoto st37;","\tgoto st0;","\tif ( ++p == pe )"],"label":0}
{"cve":"CVE-2017-16818","code_chunks":["ECMAScript | optimize);","smatch match;","if (regex_match(a->resource, match, rx)) {","ceph_assert(match.size() == 3);","","if (match[1] == \"user\") {","return Principal::user(std::move(a->account),"],"label":1}
{"cve":"CVE-2016-2324","code_chunks":["","fprintf(out, \"%s \", oid_to_hex(&obj->oid));","for (p = name; *p && *p != '\\n'; p++)","fputc(*p, out);","fputc('\\n', out);",""],"label":1}
{"cve":"CVE-2020-1917","code_chunks":["CHECK_HANDLE(handle, f);","int64_t ret = f->write(data, length);","if (ret < 0) {","raise_notice(\"fwrite(): send of %d bytes failed with errno=%d %s\",","data.size(), errno, folly::errnoStr(errno).c_str());","ret = 0;","}"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["res = obj2ast_identifier(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"Global field \\\"names\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"CVE-2020-36177","code_chunks":["\/*"," * Xilinx hardened crypto acceleration."," *"," * Returns 0 on success and negative values on error."," *\/","static int wc_RsaFunctionSync(const byte* in, word32 inLen, byte* out,","                          word32* outLen, int type, RsaKey* key, WC_RNG* rng)"],"label":0}
{"cve":"CVE-2019-16346","code_chunks":["if(p->mode & NGIFLIB_MODE_INDEXED) {","#endif \/* NGIFLIB_INDEXED_ONLY *\/","#ifdef NGIFLIB_ENABLE_CALLBACKS","context->line_p.p8 = p->frbuff.p8 + (u32)context->curY*p->width;","context->frbuff_p.p8 = context->line_p.p8 + i->posX;","#else"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    TfLiteTensor* input_quantized;","    TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, \/*index=*\/0,","                                                &input_quantized));","    input_quantized->type = input_weights->type;","    input_quantized->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {","      TfLiteIntArray* input_quantized_size = TfLiteIntArrayCopy(input->dims);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TfLiteIntArray* output_shape = TfLiteIntArrayCreate(input_dims_size);","for (int i = 0; i < input_dims_size; i++) {"],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,255);","else","gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,65535);","fseek (ifp, data_offset, SEEK_SET);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["ep_t t;","bn_t _k;","int8_t u, naf[RLC_DIG + 1];","size_t l;","","ep_null(t);","bn_null(_k);"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["","\t\t\t\tbreak;","","\t\t\t\tif (!rdp_print_color_cache_capability_set(&sub))","\t\t\t\t\treturn FALSE;","","\t\t\t\tbreak;"],"label":0}
{"cve":"CVE-2020-36316","code_chunks":["\t\t\t\tbn_zero(m);","\t\t\t\tbn_lsh(m, m, 8);","\t\t\t\tbn_add_dig(m, m, RSA_PRV);","","\t\t\t\t*p_len = k_len - 3 - m_len - len;","\t\t\t\tfor (int i = 0; i < *p_len; i++) {","\t\t\t\t\tbn_lsh(m, m, 8);"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["UINT32 flags;","UINT32 VCChunkSize;","","if (length < 8)","return FALSE;",""],"label":1}
{"cve":"CVE-2021-20271","code_chunks":["    if (!headerIsEntry(h, RPMTAG_HEADERIMMUTABLE)) {","\tv3 = 1;","\theaderConvert(h, HEADERCONV_RETROFIT_V3);","    } else if (headerIsEntry(h, RPMTAG_OLDFILENAMES)) {","\theaderConvert(h, HEADERCONV_COMPRESSFILELIST);","\tv3 = 1;","    }"],"label":0}
{"cve":"CVE-2021-36978","code_chunks":["getNext()->write(&ch, 1);","","this->pos = 0;","this->inbuf[0] = '0';","this->inbuf[1] = '0';","this->inbuf[2] = '\\0';"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["}","","MultiPlatformManagerImpl& Impl() {","  static MultiPlatformManagerImpl* impl = new MultiPlatformManagerImpl;","  return *impl;","}",""],"label":0}
{"cve":"CVE-2016-4562","code_chunks":["(void) SetImageArtifact(image,key,token);","(void) FormatLocaleString(key,MagickPathExtent,\"%s-type\",name);","(void) SetImageArtifact(image,key,type);","(void) FormatLocaleString(key,MagickPathExtent,\"%s-geometry\",name);","(void) FormatLocaleString(geometry,MagickPathExtent,","\"%gx%g%+.15g%+.15g\",","MagickMax(fabs(bounds.x2-bounds.x1+1.0),1.0),"],"label":1}
{"cve":"CVE-2021-32439","code_chunks":["GF_Err stbl_AppendDegradation(GF_SampleTableBox *stbl, u16 DegradationPriority)","{","\tif (!stbl->DegradationPriority) {","\t\tstbl->DegradationPriority = (GF_DegradationPriorityBox *) gf_isom_box_new_parent(&stbl->child_boxes, GF_ISOM_BOX_TYPE_STDP);","\t\tif (!stbl->DegradationPriority) return GF_OUT_OF_MEM;","\t}",""],"label":0}
{"cve":"CVE-2020-9434","code_chunks":["    lua_pushboolean(L, (X509_cmp_time(X509_get0_notAfter(cert), &time)     >= 0","                        && X509_cmp_time(X509_get0_notBefore(cert), &time) <= 0));","    PUSH_ASN1_TIME(L, X509_get0_notBefore(cert));","    PUSH_ASN1_TIME(L, X509_get0_notAfter(cert));","    return 3;","  }","  else if (lua_gettop(L) == 3)"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["mod_ty o = (mod_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["","bool CudnnSupport::DoMatMul(Stream* stream,","                            const DeviceMemory<float>& input_data,","                            const DeviceMemory<float>& weights,","                            const dnn::BatchDescriptor& input_dimensions,","                            const dnn::BatchDescriptor& output_dimensions,","                            DeviceMemory<float>* output_data) {"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["","    \/* Query group plugin for %:name groups. *\/","    if (*group == ':' && def_group_plugin) {","\tif (group_plugin_query(user, group + 1, pw) == true)","\t    matched = true;","\tgoto done;","    }"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ASSERT_EQ(aux_input->dims->data[1], input->dims->data[1]);","}","","TfLiteTensor* fw_output = GetOutput(context, node, kFwOutputTensor);","TfLiteTensor* fw_activation_state =","GetVariableInput(context, node, kFwInputActivationStateTensor);","TF_LITE_ENSURE(context, fw_activation_state != nullptr);"],"label":1}
{"cve":"CVE-2022-29226","code_chunks":["FilterConfigSharedPtr getConfig() {","envoy::extensions::filters::http::oauth2::v3::OAuth2Config p;","auto* endpoint = p.mutable_token_endpoint();","endpoint->set_cluster(\"auth.example.com\");"],"label":1}
{"cve":"CVE-2018-5808","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[]={0,0};","","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":1}
{"cve":"CVE-2019-19481","code_chunks":["\t\/* if the info byte is 1, then the cert is compressed, decompress it *\/","\tif ((cert_type & 0x3) == 1) {","#ifdef ENABLE_ZLIB","\t\tr = sc_decompress_alloc(&priv->cache_buf, &priv->cache_buf_len,","\t\t\tcert_ptr, cert_len, COMPRESSION_AUTO);","#else","\t\tsc_log(card->ctx, \"CAC compression not supported, no zlib\");"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* key = GetInput(context, node, 1);","const TfLiteTensor* value = GetInput(context, node, 2);","","const int num_rows = SizeOfDimension(value, 0);","const int row_bytes = value->bytes \/ num_rows;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["}","else {","int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2021-3889","code_chunks":["if (depth > MOBI_HUFFMAN_MAXDEPTH) {","debug_print(\"Too many levels of recursion: %zu\\n\", depth);","return MOBI_DATA_CORRUPT;","}","MOBI_RET ret = MOBI_SUCCESS;","int8_t bitcount = 32;"],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["\t\t\t\t}","\t\t\t} else {","\t\t\t\tmemcpy(dst,src,min(info.dwEffWidth,dwBytesperline));","\t\t\t}","\t\t}","\t}","\treturn true;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["reinterpret_cast<TfLiteResizeNearestNeighborParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["        context, GetInputSafe(context, node, kInputTensorSigma, &input_sigma));","    const float soft_nms_sigma = *GetTensorData<float>(input_sigma);","    if (soft_nms_sigma < 0) {","      context->ReportError(context, \"Invalid sigma value for soft NMS: %f\",","                           soft_nms_sigma);","      return kTfLiteError;","    }"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["if (!sudo_nss_can_continue(nss, m))","break;","}","if (match != UNSPEC) {","if (info.cmnd_path != NULL) {","\/* Update cmnd, cmnd_stat, cmnd_status from matching entry. *\/","free(ctx->user.cmnd);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["}","else","{","bufobj = PyObject_CallObject(tok->decoding_readline, NULL);","if (bufobj == NULL)","goto error;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["ep4_norm(t[0], t[0]);","#endif","","#if EP_DEPTH > 2","ep4_add(t[1], t[0], p);","for (i = 2; i < (1 << (EP_DEPTH - 2)); i++) {"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["absl::little_endian::Store32(","const_cast<char*>(error_payload.data()),","static_cast<uint32_t>(EvalErrorDetail::kDynamicValueDependence));","error.SetPayload(kEvalErrorDetailUrl, error_payload);","return error;","}"],"label":1}
{"cve":"CVE-2017-15377","code_chunks":["            }","        }","","    } else if (smd->type == DETECT_PCRE) {","        SCLogDebug(\"inspecting pcre\");","        DetectPcreData *pe = (DetectPcreData *)smd->ctx;","        uint32_t prev_buffer_offset = det_ctx->buffer_offset;"],"label":0}
{"cve":"CVE-2023-44488","code_chunks":["int last_w = cpi->oxcf.width;","int last_h = cpi->oxcf.height;","","vp9_init_quantizer(cpi);","if (cm->profile != oxcf->profile) cm->profile = oxcf->profile;","cm->bit_depth = oxcf->bit_depth;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["        scratch_tensor_index + kOutputStateQuantized;","    TfLiteTensor* output_state_quantized;","    TF_LITE_ENSURE_OK(context,","                      GetTemporarySafe(context, node, kOutputStateQuantized,","                                       &output_state_quantized));","    output_state_quantized->type = input_to_output_weights->type;","    output_state_quantized->allocation_type = kTfLiteArenaRw;"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["const struct match_attr *a, int rem)","{","size_t i;","","for (i = a->num_attr; rem > 0 && i > 0; i--) {","const struct git_attr *attr = a->state[i - 1].attr;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["GetTemporary(context, node, kFftIntegerWorkingAreaTensor);","TfLiteIntArray* fft_integer_working_area_shape = TfLiteIntArrayCreate(1);","fft_integer_working_area_shape->data[0] =","2 + static_cast<int>(sqrt(fft_working_length));","TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, fft_integer_working_area,","fft_integer_working_area_shape));"],"label":1}
{"cve":"CVE-2020-5238","code_chunks":["yych = *(marker = p);","if (yych <= '{') {","if (yych <= 0x1F) {","if (yych <= '\\t') {"],"label":1}
{"cve":"CVE-2022-24786","code_chunks":["    pjmedia_rtcp_fb_common *hdr = (pjmedia_rtcp_fb_common*) buf;","    pj_uint8_t *p;","    pj_uint8_t padlen;","    pj_size_t rpsi_len;","","    PJ_ASSERT_RETURN(buf && rpsi, PJ_EINVAL);","    PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_fb_common), PJ_ETOOSMALL);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["return kTfLiteError;","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","output->type = updates->type;","","if (IsConstantTensor(shape)) {"],"label":1}
{"cve":"CVE-2020-11089","code_chunks":["return ERROR_INVALID_DATA;","","Stream_Seek(irp->input, PathLength); \/* Path (variable) *\/","assert(PathLength == 0);             \/* MS-RDPESP 2.2.2.2 *\/","#ifndef _WIN32","*     DesiredAccess     = 0x00100080: SYNCHRONIZE | FILE_READ_ATTRIBUTES"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int digits = 0;","","bn_copy(c, a);","","RLC_RIP(bits, digits, bits);",""],"label":0}
{"cve":"CVE-2016-9391","code_chunks":["(int) qcd->compparms.qntsty, qcd->compparms.numguard, qcd->compparms.numstepsizes);","for (i = 0; i < qcd->compparms.numstepsizes; ++i) {","fprintf(out, \"expn[%d] = 0x%04x; mant[%d] = 0x%04x;\\n\",","i, (unsigned) JPC_QCX_GETEXPN(qcd->compparms.stepsizes[i]),"],"label":1}
{"cve":"CVE-2022-47024","code_chunks":["Pixmap blank_pixmap = XCreatePixmap(gui.dpy, gui.wid, 1, 1, 1);","GC gc = XCreateGC(gui.dpy, blank_pixmap, (unsigned long)0, (XGCValues*)0);","","if (gc != NULL)","{","XDrawPoint(gui.dpy, blank_pixmap, gc, 0, 0);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* input_weights;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","const TfLiteTensor* recurrent_weights;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2022-36016","code_chunks":["Status SubstituteForEach(AttrMap& attrs, FullTypeDef& t) {","DCHECK_EQ(t.args_size(), 3);","","const auto& cont = t.args(0);","const auto& tmpl = t.args(1);"],"label":1}
{"cve":"CVE-2023-52266","code_chunks":["if (hc != NULL) {","hc->_ctx_status = CONTEXT_READ_OVER;","}","delete td;","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* tensor0 = GetInput(context, node, 0);","TfLiteTensor* tensor1 = GetOutput(context, node, 0);","TfLiteIntArray* newSize = TfLiteIntArrayCopy(tensor0->dims);","return context->ResizeTensor(context, tensor1, newSize);","};"],"label":1}
{"cve":"CVE-2019-11498","code_chunks":["if (!strncmp (prop_chunk, \"SND \", 4)) {","char *cptr = prop_chunk + 4, *eptr = prop_chunk + dff_chunk_header.ckDataSize;","uint16_t numChannels = 0, chansSpecified, chanMask = 0;","uint32_t sampleRate;","","while (eptr - cptr >= sizeof (dff_chunk_header)) {","memcpy (&dff_chunk_header, cptr, sizeof (dff_chunk_header));"],"label":1}
{"cve":"CVE-2022-3178","code_chunks":["","GF_Err prhd_box_write(GF_Box *s, GF_BitStream *bs)","{","\tGF_Err e;","\tGF_ProjectionHeaderBox *ptr = (GF_ProjectionHeaderBox *)s;","","\te = gf_isom_full_box_write(s, bs);"],"label":0}
{"cve":"CVE-2020-28196","code_chunks":["    *retrep = NULL;","    ret = get_tag((uint8_t *)code->data, code->length, &t, &contents,","                  &clen, &remainder, &rlen, 0);","    if (ret)","        return ret;","    \/* rlen should be 0, but we don't check it (and due to padding in","     * non-length-preserving enctypes, it will sometimes be nonzero). *\/"],"label":0}
{"cve":"CVE-2019-19922","code_chunks":["{","u64 runtime = 0, slice = sched_cfs_bandwidth_slice();","unsigned long flags;","u64 expires;","","\/* confirm we're still not at a refresh boundary *\/","raw_spin_lock_irqsave(&cfs_b->lock, flags);"],"label":1}
{"cve":"CVE-2020-15121","code_chunks":["\tif ((dn = (char*)r_str_casestr (buf, \"\\n\\n\"))) {","\t\tdelta += 2;","\t} else if ((dn = (char*)r_str_casestr (buf, \"\\r\\n\\r\\n\"))) {","\t\tdelta += 4;","\t} else {","\t\tgoto exit;","\t}"],"label":0}
{"cve":"CVE-2018-20458","code_chunks":["memset (bin, 0, sizeof (struct r_bin_dyldcache_obj_t));","if (!buf) {","return r_bin_dyldcache_free (bin);","}","bin->b = r_buf_new();","if (!r_buf_set_bytes (bin->b, buf, size)) {"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["pRgb[i].rgbReserved = (uint8_t)0;","}","} else {","hFile->Read((void*)pRgb,DibNumColors(&bmpHeader) * sizeof(RGBQUAD),1);","for (uint32_t i=0; i<head.biClrUsed; i++) pRgb[i].rgbReserved=0;","}","}"],"label":1}
{"cve":"CVE-2018-17205","code_chunks":["    }","    unixctl_command_reply(conn, ds_cstr(&results));","    ds_destroy(&results);","}","","static void","ofproto_unixctl_init(void)"],"label":0}
{"cve":"CVE-2022-23565","code_chunks":["                                   o1.control_output().end());","  std::set<string> control_output2(o2.control_output().begin(),","                                   o2.control_output().end());","  if (control_output1 != control_output2) return false;","","      OpDef o1_copy = o1;","  OpDef o2_copy = o2;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["}","#endif","","\/**"," * Read surface commands capability set.\\n"," * @msdn{dd871563}"," * @param s stream"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["opts.remote_execution = true;","","std::vector<Tensor> dummy_args;","std::vector<Tensor>* dummy_rets = new std::vector<Tensor>;","Notification done;","Status status;"],"label":1}
{"cve":"CVE-2016-10156","code_chunks":["","                timespec_store(&ts[0], stamp);","                ts[1] = ts[0];","                r = futimens(fd, ts);","        } else","                r = futimens(fd, NULL);","        if (r < 0)"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["ctx->user.uid == ctx->runas.list_pw->pw_uid) {","cmnd_match = ALLOW;","runas_match = ALLOW;","} else if (date_match != DENY) {","\/*","* To list another user's prilileges, the runas"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","const TfLiteTensor* filter;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &filter));","","data->need_hwcn_weights ="],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["const size_t len = RLC_FP_BITS + 1;","int i, j, m;","bn_t _k[8], q, x;","int8_t *naf = RLC_ALLOCA(int8_t, 8 * n * len);","size_t l, *_l = RLC_ALLOCA(size_t, 8 * n);",""],"label":0}
{"cve":"CVE-2022-4843","code_chunks":["return -1;","}","const int read_len = R_MIN (len, r_io_submap_to (sm) - addr + 1);","if (map->perm & R_PERM_RELOC) {","return map->reloc_map->read (io, map, addr, buf, read_len);","}","const ut64 paddr = addr - r_io_map_from (map) + map->delta;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["encoding = (char *)PyMem_MALLOC(strlen(tok->encoding) + 1);","if (encoding)","strcpy(encoding, tok->encoding);","}","Ta3Tokenizer_Free(tok);","return encoding;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["      TF_LITE_ENSURE_OK(context,","                        GetTemporarySafe(context, node, 3, &accum_scratch));","      TfLiteTensor* zero_points;","      TF_LITE_ENSURE_OK(context,","                        GetTemporarySafe(context, node, 4, &zero_points));","      TfLiteTensor* row_sums;","      TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, 5, &row_sums));"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  auto* params =","      reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);","  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","  const TfLiteTensor* hash;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &hash));"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE(context, has_bias);","","if (has_bias) {","bias = GetInput(context, node, 2);","if (input_type == kTfLiteUInt8 || input_type == kTfLiteInt8) {","TF_LITE_ENSURE_TYPES_EQ(context, bias->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);"],"label":1}
{"cve":"CVE-2021-3658","code_chunks":["\t\t\t\t\tbtd_opts.mode == BT_MODE_BREDR)","\t\tgoto load;","","\tadapter->database = btd_gatt_database_new(adapter);","\tif (!adapter->database) {","\t\tbtd_error(adapter->dev_id,","\t\t\t\t\"Failed to create GATT database for adapter\");"],"label":0}
{"cve":"PYSEC-2020-293","code_chunks":["    return kTfLiteOk;","  }","","  return ResizeOutputTensor(context, data, segment_ids, output);","}","","TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","output->type = kTfLiteInt32;","","SetTensorToPersistentRo(output);"],"label":1}
{"cve":"CVE-2018-25032","code_chunks":["zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);","","ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);","ds->d_buf = overlay + ds->lit_bufsize\/sizeof(ush);"],"label":1}
{"cve":"CVE-2023-39975","code_chunks":["","if (t->req->kdc_options & (KDC_OPT_VALIDATE | KDC_OPT_RENEW)) {","\/* Copy the whole header ticket except for authorization data. *\/","ticket_reply = *t->header_tkt;","enc_tkt_reply = *t->header_tkt->enc_part2;","enc_tkt_reply.authorization_data = NULL;"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["","if (object_on_skiplist(options, oid))","return 0;","","if (oidset_contains(&options->gitmodules_found, oid)) {","struct config_options config_opts = { 0 };"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    TF_LITE_ENSURE_EQ(context, NumOutputs(node), 3 * top_paths + 1);","","  const TfLiteTensor* inputs;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputsTensor, &inputs));","  TF_LITE_ENSURE_EQ(context, NumDimensions(inputs), 3);","    TF_LITE_ENSURE_EQ(context, inputs->type, kTfLiteFloat32);"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["With(asdl_seq * items, asdl_seq * body, int lineno, int col_offset, int","end_lineno, int end_col_offset, PyArena *arena)","{","stmt_ty p;","p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (TYPE(CHILD(n, 0)) == ASYNC) {","is_async = 1;","}",""],"label":1}
{"cve":"CVE-2020-11085","code_chunks":["error = CHANNEL_RC_NO_MEMORY;","goto error_out;","}","CopyMemory(formats[index].formatName, szFormatName, 32);","formats[index].formatName[32] = '\\0';","}"],"label":1}
{"cve":"CVE-2021-3772","code_chunks":["","\t\t\t\tinittag = ntohl(initack->init_hdr.init_tag);","\t\t\t\tsctp_add_cmd_sf(commands, SCTP_CMD_UPDATE_INITTAG,","\t\t\t\t\t\tSCTP_U32(inittag));","\t\t\t}","\t\t}",""],"label":0}
{"cve":"CVE-2019-19947","code_chunks":["struct kvaser_cmd *cmd;","int err;","","cmd = kmalloc(sizeof(*cmd), GFP_ATOMIC);","if (!cmd)","return -ENOMEM;",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));",""],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["","if (local_cmdmod.cmod_flags & CMOD_LEGACY)","{","char_u *start = ea.cmd;","","switch (ea.cmdidx)"],"label":1}
{"cve":"CVE-2018-14461","code_chunks":["","\/* bail out if non-verbose *\/","if (ndo->ndo_vflag < 1)","return 0;","","\/* ok they seem to want to know everything - lets fully decode it *\/"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* lookup;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));","const TfLiteTensor* value;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &value));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));"],"label":0}
{"cve":"CVE-2022-28073","code_chunks":["\t\t\tr_write_be32 (src, value);","\t\t} else {","\t\t\tr_write_le32 (src, value);","\t\t}","\t\tbreak;","\t\tif (reg->big_endian) {","\t\t\tr_write_be16 (src, value);"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["\t    {","\t\t\t\tend = p + STRLEN(p) - 1;","\t\twhile (end > p && VIM_ISWHITE(*end))","\t\t    --end;","\t\tif (end > p + 1 && *end == '{' && VIM_ISWHITE(end[-1]))","\t\t{","\t\t    int\t    is_block;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["            int res;","            Py_ssize_t len;","            Py_ssize_t i;","            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"AsyncWith field \\\"body\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["}","","if (node->inputs->size > 2) {","const TfLiteTensor* bias = GetInput(context, node, kBias);","if (!IsFloatType(bias->type) || !IsConstantTensor(bias)) {","return false;","}"],"label":1}
{"cve":"PYSEC-2017-101","code_chunks":["    GRPC_CALL_INTERNAL_UNREF(&exec_ctx, parent, \"child\");","  }","","  GPR_ASSERT(!c->destroy_called);","  c->destroy_called = 1;","  cancel = gpr_atm_acq_load(&c->any_ops_sent_atm) &&","           !gpr_atm_acq_load(&c->received_final_op_atm);"],"label":0}
{"cve":"CVE-2022-24792","code_chunks":["","    \/* Check arguments. *\/","    PJ_ASSERT_RETURN(pool && filename && p_port, PJ_EINVAL);","","    \/* Check the file really exists. *\/","    if (!pj_file_exists(filename)) {","\treturn PJ_ENOTFOUND;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        if (res != 0) goto failed;","        Py_CLEAR(tmp);","    }","    if (_PyObject_LookupAttrId(obj, &PyId_annotation, &tmp) < 0) {","        return 1;","    }","    if (tmp == NULL || tmp == Py_None) {"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["                if (!kw)","                    return NULL;","                asdl_seq_SET(keywords, nkeywords++, kw);","            }","        }","    }",""],"label":0}
{"cve":"CVE-2023-46001","code_chunks":["","i=0;","while ((map = (GF_UserDataMap*)gf_list_enum(udta->recordList, &i))) {","if ((map->boxType == GF_ISOM_BOX_TYPE_UUID) && !memcmp(map->uuid, UUID, 16)) goto found;","else if (map->boxType == UserDataType) goto found;","","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["}","node->temporaries->data[kAccumScratch] =","op_data->scratch_tensor_index + kAccumScratch;","TfLiteTensor* accum_scratch = GetTemporary(context, node, kAccumScratch);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {n_cell, n_batch};"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_EQ(context, input->dims->size, 3);","  const bool time_major = params->time_major;","  const int batch_size =","      (time_major) ? input->dims->data[1] : input->dims->data[0];","  const int max_time =","      (time_major) ? input->dims->data[0] : input->dims->data[1];","  const int fw_num_units = fw_input_weights->dims->data[0];"],"label":0}
{"cve":"CVE-2016-2324","code_chunks":["","bitmap_pos = bitmap_position(object->oid.hash);","","if (bitmap_pos < 0) {","char *name = path_name(path, last);","bitmap_pos = ext_index_add_object(object, name);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["reinterpret_cast<TfLiteAudioSpectrogramParams*>(node->user_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["    reg.invoke = [](TfLiteContext* context, TfLiteNode* node) {","      CallReporting* call_reporting =","          static_cast<CallReporting*>(node->builtin_data);","            const TfLiteTensor* a0;","      TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &a0));","      TfLiteTensor* a1;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &a1));"],"label":0}
{"cve":"CVE-2017-3733","code_chunks":["        seq = RECORD_LAYER_get_read_sequence(&ssl->rlayer);","        hash = ssl->read_hash;","    }","","    t = EVP_MD_CTX_size(hash);","    OPENSSL_assert(t >= 0);","    md_size = t;"],"label":0}
{"cve":"CVE-2022-3213","code_chunks":["\/*","Convert stripped TIFF image.","*\/","extent=4*(samples_per_pixel+1)*TIFFStripSize(tiff);","strip_pixels=(unsigned char *) AcquireQuantumMemory(extent,","sizeof(*strip_pixels));","if (strip_pixels == (unsigned char *) NULL)"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["          if (node->inputs->size == 2) {","            input1 = GetInput(context, node, 0);","            input2 = GetInput(context, node, 1);","          } else {","            input1 = GetInput(context, node, 0);","            input2 = input1;","          }"],"label":0}
{"cve":"CVE-2018-14357","code_chunks":["char *buf = mutt_str_strdup(src);","imap_utf_encode(idata, &buf);","","imap_quote_string(dest, dlen, buf, false);","","FREE(&buf);","}"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,255);","else","gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,65535);","fseek (ifp, data_offset, SEEK_SET);"],"label":1}
{"cve":"PYSEC-2021-412","code_chunks":["OP_REQUIRES_OK_ASYNC(c, LookupResource(c, HandleFromInput(c, 1), &resource),","done);","","Tensor group_assignment = c->input(2);","","OP_REQUIRES_OK_ASYNC("],"label":1}
{"cve":"CVE-2021-24028","code_chunks":["const auto* fieldInfo = findFieldInfo(iprot, readState, structInfo);","if (fieldInfo) {","void* unionVal = getMember(*fieldInfo, object);","structInfo.unionExt->initMember[fieldInfo - structInfo.fieldInfos](","unionVal);","read(iprot, *fieldInfo->typeInfo, readState, unionVal);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    memset(fft_double_working_area_data, 0, fft_double_working_area->bytes);","    Rfft2dImpl(fft_height, fft_width, fft_input_output,","               fft_integer_working_area_data, fft_double_working_area_data);","    PrepareOutputBuffer(output_data, fft_height, fft_width, fft_input_output);","    input_data += input_slice_size;","    output_data += output_slice_size;","  }"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static void ep2_mul_sim_plain(ep2_t r, const ep2_t p, const bn_t k,","const ep2_t q, const bn_t m, const ep2_t *t) {","int i, l, l0, l1, n0, n1, w, gen;","int8_t naf0[2 * RLC_FP_BITS + 1], naf1[2 * RLC_FP_BITS + 1], *_k, *_m;","ep2_t t0[1 << (EP_WIDTH - 2)];","ep2_t t1[1 << (EP_WIDTH - 2)];"],"label":1}
{"cve":"CVE-2022-0849","code_chunks":["\t\t\t\t\t\ti += (msz > 0)? msz: minopsize;","\t\t\t\t\t}","\t\t\t\t\tr_pvector_free (list);","\t\t\t\t\tgoto loopback;","#elif 0","\t\t\t\t\t{","\t\t\t\t\t\tint msz = r_meta_get_size (core->anal, meta->type);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);","","TfLiteTensor* out_tensor;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));","int32_t* out_buf = out_tensor->data.i32;","const TfLiteTensor* hash;"],"label":0}
{"cve":"PYSEC-2022-49","code_chunks":["&found_unknown_shapes);","Padding padding_enum;","if (padding == \"VALID\") {","padding_enum = Padding::VALID;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","const TfLiteTensor* ids;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &ids));","const TfLiteTensor* indices;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &indices));","const TfLiteTensor* dense_shape;"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["goto error;","}","","make_canonical(ctx, LY_TYPE_UINT8, value_, &unum, NULL);","","if (store) {","\/* store the result *\/"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","DynamicBuffer buf;","StringRef str_ref = GetString(input, 0);","buf.AddString(str_ref);","buf.WriteToTensorAsVector(output);"],"label":1}
{"cve":"CVE-2017-6448","code_chunks":["sprintf (str, \" v%i, string+%i\", vA, vB);","} else {","sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);","}"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["const std::string client_ctx_yaml = R\"EOF(","filename: \"{{ test_rundir }}\/test\/config\/integration\/certs\/upstreamcacert.pem\"","- san_type: IP_ADDRESS","exact: \"127.0.0.1\"",")EOF\";",""],"label":0}
{"cve":"CVE-2019-13223","code_chunks":["c->value_bits = get_bits(f, 4)+1;","c->sequence_p = get_bits(f,1);","if (c->lookup_type == 1) {","c->lookup_values = lookup1_values(c->entries, c->dimensions);","} else {","c->lookup_values = c->entries * c->dimensions;","}"],"label":1}
{"cve":"PYSEC-2020-114","code_chunks":["return nullptr;","}","","auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);","if (!status->status.ok()) {","return nullptr;"],"label":0}
{"cve":"CVE-2023-25801","code_chunks":["    OP_REQUIRES_OK(context, context->GetAttr(\"deterministic\", &deterministic_));","    OP_REQUIRES_OK(context, context->GetAttr(\"seed\", &seed_));","    OP_REQUIRES_OK(context, context->GetAttr(\"seed2\", &seed2_));","    if (deterministic_) {","            if ((seed_ == 0) && (seed2_ == 0)) {","        seed_ = random::New64();","        seed2_ = random::New64();"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"key\\\" missing from DictComp\");","            return 1;","        }","        else {","            int res;","            res = obj2ast_expr(tmp, &key, arena);"],"label":0}
{"cve":"CVE-2022-26530","code_chunks":["break;","}","}","","wordexp_t p;","while (strstr(image->path, \"  \")) {"],"label":1}
{"cve":"CVE-2020-35538","code_chunks":["LOCAL(void)","h2v2_merged_upsample_565D_internal(j_decompress_ptr cinfo,","                                   JSAMPIMAGE input_buf,","                                   JDIMENSION in_row_group_ctr,","                                   JSAMPARRAY output_buf)","{","  my_merged_upsample_ptr upsample = (my_merged_upsample_ptr)cinfo->upsample;"],"label":0}
{"cve":"CVE-2019-13220","code_chunks":["   f->first_decode = FALSE;","   f->samples_output = 0;","   f->channel_buffer_start = 0;","   f->channel_buffer_end = 0;","}","","static int vorbis_search_for_page_pushdata(vorb *f, uint8 *data, int data_len)"],"label":0}
{"cve":"CVE-2022-37032","code_chunks":["const extern char *bgp_type_str[];"],"label":1}
{"cve":"CVE-2018-14362","code_chunks":["NetInc, h->content->length + h->content->offset - 1);","","\/* see if we can put in body cache; use our cache as fallback *\/","msg->fp = mutt_bcache_put(pop_data->bcache, h->data);","if (!msg->fp)","{","\/* no *\/"],"label":1}
{"cve":"CVE-2016-7529","code_chunks":["*xcfdata,","*xcfodata;","","xcfdata=(XCFPixelInfo *) AcquireQuantumMemory(data_length,sizeof(*xcfdata));","if (xcfdata == (XCFPixelInfo *) NULL)","ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",","image->filename);"],"label":1}
{"cve":"CVE-2016-4562","code_chunks":["GetNextToken(q,&q,extent,token);","weight=ParseCommandOption(MagickWeightOptions,MagickFalse,token);","if (weight == -1)","weight=StringToUnsignedLong(token);","graphic_context[n]->weight=(size_t) weight;","break;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp18_write_bin(uint8_t *bin, int len, const fp18_t a) {","if (len != 18 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","TfLiteTensor* hits;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &hits));","const TfLiteTensor* lookup;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));"],"label":0}
{"cve":"CVE-2023-30188","code_chunks":["void CNativeControlEmbed::CreateObjectBuilderInContext(const std::string& name, JSSmart<CJSContext> context)","{","v8::Isolate* current = CV8Worker::GetCurrent();","context->m_internal->m_global->Set(current, name.c_str(), v8::FunctionTemplate::New(current, NSNativeControl::CreateNativeObjectBuilder));","}"],"label":1}
{"cve":"CVE-2018-19841","code_chunks":["            while (wcount--) {","                csum = (csum * 3) + csptr [0] + (csptr [1] << 8);","                csptr += 2;","            }","","            WavpackLittleEndianToNative ((WavpackHeader *) buffer, WavpackHeaderFormat);","#endif"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["                      bw_aux_input_weights->dims->data[1]);","  }","","  if (IsHybridOp(input, fw_input_weights)) {","    OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","    op_data->fw_compute_row_sums = true;","    op_data->bw_compute_row_sums = true;"],"label":0}
{"cve":"CVE-2021-24028","code_chunks":["readState.readFieldBegin(iprot);","if (readState.atStop()) {","structInfo.unionExt->clear(object);","readState.readStructEnd(iprot);","return;","}"],"label":0}
{"cve":"PYSEC-2021-309","code_chunks":["        return Gather<int64_t, int32_t>(context, *params, input, positions,","                                        output);","        return Gather<bool, int32_t>(context, *params, input, positions,","                                     output);","        return GatherStrings<int32_t>(context, input, positions, output);","        context->ReportError(context, \"Type '%s' is not supported by gather.\",","                             TfLiteTypeGetName(input->type));"],"label":0}
{"cve":"CVE-2020-35534","code_chunks":["compDataSize += 8 * sizeof(int32_t) * tile->width;","}","","planeComp->compBuf = (uint8_t *)malloc(compDataSize);","if (!planeComp->compBuf)","return -1;",""],"label":1}
{"cve":"CVE-2019-17177","code_chunks":["tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));","","if (NULL == tmp)","{"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);","    reference_integer_ops::L2Normalization(","        data.input_zero_point, outer_size, depth,","        tflite::micro::GetTensorData<int8_t>(input),","        tflite::micro::GetTensorData<int8_t>(output));","  } else {","    TF_LITE_KERNEL_LOG(context, \"Output type is %s, requires float.\","],"label":0}
{"cve":"CVE-2020-14398","code_chunks":["i = 0;","} else {","rfbClientErr(\"read (%d: %s)\\n\",errno,strerror(errno));","return FALSE;","}","} else {"],"label":1}
{"cve":"CVE-2022-1276","code_chunks":["}","}","if (tree->cdr->car) {       \/* keyword arguments *\/","if (n == 14) {","pop_n(n);","genop_2(s, OP_ARRAY, cursp(), n);","push();"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static void ep_mul_glv_imp(ep_t r, const ep_t p, const bn_t k) {","int l, l0, l1, i, n0, n1, s0, s1;","int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], *t0, *t1;","bn_t n, _k, k0, k1, v1[3], v2[3];","ep_t q, t[1 << (EP_WIDTH - 2)];"],"label":1}
{"cve":"CVE-2019-13134","code_chunks":["        {","          MemoryInfo","            *rle_info;","","          \/*","            Convert run-length encoded raster pixels.","          *\/"],"label":0}
{"cve":"CVE-2021-29608","code_chunks":["  }","","  void Compute(OpKernelContext* context) override {","    INDEX_TYPE first_dimension;","    const Tensor first_partition_tensor =","        context->input(kFirstPartitionInputIndex);","    OP_REQUIRES(context, first_partition_tensor.NumElements() > 0,"],"label":0}
{"cve":"CVE-2019-3563","code_chunks":["auto b = c.read<char>();","if (b == '\\n' && terminatorType_ != TerminatorType::CARRIAGENEWLINE) {","return i;","} else if (terminatorType_ != TerminatorType::NEWLINE &&","b == '\\r' && !c.isAtEnd() && c.read<char>() == '\\n') {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["      float* output_data = output_flat +","                           (audio_channel * spectrogram_samples *","                            params->dct_coefficient_count) +","                           (spectrogram_sample * params->dct_coefficient_count);","      for (int i = 0; i < params->dct_coefficient_count; ++i) {","        output_data[i] = mfcc_output[i];","      }"],"label":0}
{"cve":"CVE-2022-31031","code_chunks":["    }","","    msg_len = pj_ntohs(msg->hdr->length);","    if (msg_len != buf_len - sizeof(pjstun_msg_hdr)) {","\tPJ_LOG(4,(THIS_FILE, \"Error: invalid msg_len %d (expecting %d)\", ","\t\t\t     msg_len, buf_len - sizeof(pjstun_msg_hdr)));","\treturn PJLIB_UTIL_ESTUNINMSGLEN;"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["","m_pLogWindow->startNewInstance();","","appendLogInfo(\"starting \" + QString(barrierType() == barrierServer ? \"server\" : \"client\"));","","qDebug() << args;",""],"label":1}
{"cve":"CVE-2023-0302","code_chunks":["\t\t\t\t\tr_meta_set (core->anal, R_META_TYPE_COMMENT, addr, 1, text);","\t\t\t\t\tfree (text);","\t\t\t\t} else {","\t\t\t\t\tr_meta_set (core->anal, R_META_TYPE_COMMENT, addr, 1, p);","\t\t\t\t}","\t\t\t} else {","\t\t\t\tr_meta_set (core->anal, R_META_TYPE_COMMENT, addr, 1, p);"],"label":0}
{"cve":"CVE-2022-1071","code_chunks":["      goto L_MAKE_LAMBDA;","    }","","    CASE(OP_RANGE_INC, B) {","      regs[a] = mrb_range_new(mrb, regs[a], regs[a+1], FALSE);","      mrb_gc_arena_restore(mrb, ai);","      NEXT;"],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["* For example we got the checksum but need to auth to get the commit, but the","* checksum we got was the version already installed.","*\/","g_assert (op->resolved_commit != NULL);","mark_op_resolved (op, op->resolved_commit, NULL, NULL, NULL);","continue;"],"label":1}
{"cve":"CVE-2019-5489","code_chunks":["}","","if (pmd_trans_unstable(pmd)) {","__mincore_unmapped_range(addr, end, vma, vec);","goto out;","}",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["}","case kTfLiteInt8: {","OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","TfLiteTensor* row_sums = GetTemporary(context, node, kRowSums);","const int row_sums_size = row_sums->dims->data[0];","return lstm_eval::EvalHybrid(","input, input_to_input_weights,"],"label":1}
{"cve":"CVE-2018-20178","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus PrepareHashtable(TfLiteContext* context, TfLiteNode* node) {","  TF_LITE_ENSURE_EQ(context, NumInputs(node), 0);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","  TF_LITE_ENSURE(context, node->user_data != nullptr);","  const auto* params =","      reinterpret_cast<const TfLiteHashtableParams*>(node->user_data);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["expr_ty o = (expr_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"CVE-2020-1917","code_chunks":["assertx(isStringType(type(function_name)));","strncpy(frame->function,","val(function_name).pstr->data(),","std::min(val(function_name).pstr->size(),","strobelight::kFunctionMax));"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\treturn FALSE;","","\tif (!rdp_write_pointer_capability_set(s, settings) ||","\t    !rdp_write_input_capability_set(s, settings) ||","\t    !rdp_write_brush_capability_set(s, settings) ||","\t    !rdp_write_glyph_cache_capability_set(s, settings) ||","\t    !rdp_write_virtual_channel_capability_set(s, settings) ||"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  const TfLiteTensor* limit;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kLimitTensor, &limit));","  const TfLiteTensor* delta;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDeltaTensor, &delta));","","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2016-9583","code_chunks":["\t\t  picomp->numrlvls; ++rlvlno, ++pirlvl) {","\t\t\tpirlvl_destroy(pirlvl);","\t\t}","\t\tjas_free(picomp->pirlvls);","\t}","}",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["GetOptionalInputTensor(context, node, kFwInputToInputWeightsTensor);","const TfLiteTensor* fw_input_to_forget_weights;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFwInputToForgetWeightsTensor,","&fw_input_to_forget_weights));","const TfLiteTensor* fw_input_to_cell_weights;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2019-6976","code_chunks":["{","void *buf;","","buf = g_malloc( size );","","if( object ) {","g_signal_connect( object, \"postclose\","],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["#ifndef PGEN","#if PY_MINOR_VERSION >= 4","fd = _Py_dup(fd);","#endif","#else","fd = dup(fd);"],"label":1}
{"cve":"CVE-2018-5809","code_chunks":["{","if (len < 1)","return;   string[len - 1] = 0;","if (len < 3)","return;   len = strnlen(string, len - 1);","for (int i = len - 1; i >= 0; i--)"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["{","if (len < 1)","return;   string[len - 1] = 0;","if (len < 3)","return;   len = strnlen(string, len - 1);","for (int i = len - 1; i >= 0; i--)"],"label":0}
{"cve":"CVE-2020-6018","code_chunks":["\t\treturn false;","\t}","","    unsigned long long cbEncryptedDataAndTag_longlong;","    crypto_aead_aes256gcm_encrypt_afternm(","\t\tstatic_cast<unsigned char*>( pEncryptedDataAndTag ), &cbEncryptedDataAndTag_longlong,","\t\tstatic_cast<const unsigned char*>( pPlaintextData ), cbPlaintextData,"],"label":0}
{"cve":"CVE-2020-11058","code_chunks":["{","WINPR_UNUSED(settings);","if (length > 4)","Stream_Seek_UINT16(s); \/* fontSupportFlags (2 bytes) *\/","","if (length > 6)"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["","\/*[clinic input]","eval as builtin_eval","","    source: object","    globals: object = None","    locals: object = None"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","  const TfLiteTensor* ids;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &ids));","  TF_LITE_ENSURE_EQ(context, NumDimensions(ids), 1);","  TF_LITE_ENSURE_EQ(context, ids->type, kTfLiteInt32);",""],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["","#undef FORYX","#undef PREDICTOR","","#ifdef NO_JPEG","void CLASS kodak_jpeg_load_raw() {}","void CLASS lossy_dng_load_raw() {}"],"label":0}
{"cve":"CVE-2020-35534","code_chunks":["img->tiles = (CrxTile *)malloc(","sizeof(CrxTile) * nTiles +","sizeof(CrxPlaneComp) * nTiles * img->nPlanes +","sizeof(CrxSubband) * nTiles * img->nPlanes * img->subbandCount);","if (!img->tiles)","return -1;"],"label":1}
{"cve":"CVE-2022-0695","code_chunks":["offset += lrec.data_nbytes;","","for (;;) {","if (r_buf_fread_at (bf->buf, offset, (ut8 *)&lrec, \"ccss\", 1) < QNX_RECORD_SIZE) {","goto beach;","}","offset += sizeof (lmf_record);"],"label":1}
{"cve":"PYSEC-2021-400","code_chunks":["const int32_t num_buckets = stats_summary_t->dim_size(2) - 1;","const int32_t logits_dim = logits_dim_;","const int32_t hessian_dim = stats_summary_t->dim_size(3) - logits_dim;","DCHECK_GT(hessian_dim, 0);"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["<< \"Options:\\n\"","<< \"  -a, --address <address>  listen for clients on the given address.\\n\"","<< \"  -c, --config <pathname>  use the named configuration file instead.\\n\"","<< HELP_COMMON_INFO_1 << WINAPI_INFO << HELP_SYS_INFO << HELP_COMMON_INFO_2 << \"\\n\"","<< \"Default options are marked with a *\\n\"","<< \"\\n\"","<< \"The argument for --address is of the form: [<hostname>][:<port>].  The\\n\""],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["            return 1;","        }","        else {","            int res;","            Py_ssize_t len;","            Py_ssize_t i;","            if (!PyList_Check(tmp)) {"],"label":0}
{"cve":"CVE-2019-13298","code_chunks":["if (image->channel_map[image->channel_map[channel].offset].traits == UndefinedPixelTrait)"],"label":1}
{"cve":"PYSEC-2021-844","code_chunks":["output_shape.set_dim(0, output_rows);"],"label":1}
{"cve":"CVE-2019-19924","code_chunks":["static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){","assert( p->nOp>0 || p->aOp==0 );","assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );","if( p->nOp ){","assert( p->aOp );","sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);"],"label":1}
{"cve":"CVE-2016-3136","code_chunks":["\tif (priv->last_lsr & MCT_U232_LSR_ERR) {","\t\ttty = tty_port_tty_get(&port->port);","\t\t\/* Overrun Error *\/","\t\tif (priv->last_lsr & MCT_U232_LSR_OE) {","\t\t}","\t\t\/* Parity Error *\/","\t\tif (priv->last_lsr & MCT_U232_LSR_PE) {"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["break;","}","FALLTHROUGH;","if (group_matches(m->name, ctx->runas.gr))","group_matched = m->negated ? DENY : ALLOW;","break;"],"label":1}
{"cve":"CVE-2023-25801","code_chunks":["pooling_ratio_[i]));","}","OP_REQUIRES(","context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,","errors::Unimplemented(\"Fractional average pooling is not yet \"","\"supported on the batch nor channel dimension.\"));","OP_REQUIRES_OK(context, context->GetAttr(\"deterministic\", &deterministic_));"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void ed_write_bin(uint8_t *bin, int len, const ed_t a, int pack) {","ed_t t;","","ed_null(t);"],"label":1}
{"cve":"CVE-2022-23560","code_chunks":["Populate(src_data, indices, level + 1, prev_idx * shape_of_level + i,","src_data_ptr, dest_data);","}","} else {"],"label":1}
{"cve":"PYSEC-2020-273","code_chunks":["if (!status->status.ok()) {","return nullptr;","}","","auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);","if (!status->status.ok()) {"],"label":0}
{"cve":"CVE-2018-20175","code_chunks":["","\t\t\tif (!cssp_read_tsrequest(&token, NULL))","\t\t\t\tgoto bail_out;","","\t\t\tinput_tok.value = token.data;","\t\t\tinput_tok.length = s_length(&token);","\t\t}"],"label":0}
{"cve":"CVE-2022-36015","code_chunks":["  }","","  c->set_output(0, c->Vector(static_cast<int64_t>(size)));","  return Status::OK();","}","","}"],"label":0}
{"cve":"PYSEC-2022-96","code_chunks":["ops += (mul_cost * 2 + sub_cost + add_cost) * crop_height * num_boxes;","ops += (mul_cost * 2 + sub_cost + add_cost) * crop_height * crop_width *","num_boxes;","if (use_bilinear_interp) {"],"label":1}
{"cve":"CVE-2016-2315","code_chunks":["\t\tif (!strcmp(arg, \"--header\")) {","\t\t\trevs.verbose_header = 1;","\t\t\tcontinue;","\t\t}","\t\tif (!strcmp(arg, \"--timestamp\")) {","\t\t\tinfo.show_timestamp = 1;","\t\t\tcontinue;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_TYPES_EQ(context, top_k->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, NumElements(top_k), 1);","const int32 k = *GetTensorData<int32_t>(top_k);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const int num_dimensions = NumDimensions(input);"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["                                                     ((struct lys_node_inout *)tpdf_parent)->tpdf_size, \"typedefs\");","                                        break;","                                        YANG_ADDELEM(((struct lys_node_notif *)tpdf_parent)->tpdf,","                                                     ((struct lys_node_notif *)tpdf_parent)->tpdf_size, \"typedefs\");","                                        break;","                                        \/* typedef is already allocated *\/","                                        break;"],"label":0}
{"cve":"CVE-2016-10251","code_chunks":["pi->ystep = pi->picomp->vsamp * (1 << (pirlvl->prcheightexpn +","pi->picomp->numrlvls - 1));","for (rlvlno = 1, pirlvl = &pi->picomp->pirlvls[1];","rlvlno < pi->picomp->numrlvls; ++rlvlno, ++pirlvl) {","pi->xstep = JAS_MIN(pi->xstep, pi->picomp->hsamp * (1 <<","(pirlvl->prcwidthexpn + pi->picomp->numrlvls -"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["input_offset_ptr);","break;","case kCblasOptimized: {","TfLiteTensor* row_sums ="],"label":1}
{"cve":"CVE-2019-16778","code_chunks":["for (int input_index : GpuGridRangeX(input_total_size)) {","const Index input_segment_index = input_index \/ inner_dim_size;","const Index segment_offset = input_index % inner_dim_size;","const Index output_segment_index = segment_ids[input_segment_index];","if (output_segment_index < 0 || output_segment_index >= output_total_size) {","continue;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fb_write_bin(uint8_t *bin, int len, const fb_t a) {","bn_t t;","","bn_null(t);"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["void DCR_CLASS dcr_parse_tiff (DCRAW* p, int base)","{","int doff, max_samp=0, raw=-1, thm=-1, i;","struct dcr_jhead jh;",""],"label":0}
{"cve":"CVE-2016-5418","code_chunks":["{","char *dest, *src;","char separator = '\\0';","","dest = src = path;","if (*src == '\\0') {"],"label":0}
{"cve":"CVE-2017-11368","code_chunks":["    krb5_db_entry               *princ;","","    *princ_ptr = NULL;","","    pa_data = krb5int_find_pa_data(kdc_context,","                                   request->padata, KRB5_PADATA_S4U_X509_USER);","    if (pa_data != NULL) {"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["res = obj2ast_arg(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"arguments field \\\"args\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 cacheFlags;","BYTE pad2;","BYTE numCellCaches;","BITMAP_CACHE_V2_CELL_INFO bitmapCacheV2CellInfo[5];","WLog_INFO(TAG, \"BitmapCacheV2CapabilitySet (length %\" PRIu16 \"):\", length);",""],"label":1}
{"cve":"PYSEC-2020-307","code_chunks":["if (!status->status.ok()) {","return nullptr;","}","","auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);","if (!status->status.ok()) {"],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["} else if (pcxHeader.ColorPlanes == 4 && pcxHeader.BitsPerPixel == 8){","for (x = 0; x < Width; x++){","SetPixelColor(x,y2,RGB(pcxplanes[x],pcxplanes[pcxHeader.BytesPerLine + x],pcxplanes[2*pcxHeader.BytesPerLine + x]));","AlphaSet(x,y2,pcxplanes[3*pcxHeader.BytesPerLine + x]);","}","continue;","#endif \t\t} else if (pcxHeader.ColorPlanes == 1) {"],"label":1}
{"cve":"CVE-2015-8631","code_chunks":["        if (errmsg != NULL)","            krb5_free_error_message(handle->context, errmsg);","    }","    free(prime_arg);","    gss_release_buffer(&minor_stat, &client_name);","    gss_release_buffer(&minor_stat, &service_name);","    free_server_handle(handle);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["        else {","            int res;","            Py_ssize_t len;","            Py_ssize_t i;","            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"FunctionDef field \\\"body\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["","node *n = Ta3Parser_ParseStringObject(s, filename,","&_Ta3Parser_Grammar, start, &err,","&iflags);","if (flags == NULL) {","localflags.cf_flags = 0;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int fb_size_str(const fb_t a, int radix) {","bn_t t;","int digits = 0;","","bn_null(t);",""],"label":1}
{"cve":"CVE-2022-21732","code_chunks":["DatasetBase* input,","int32_t num_threads,","DatasetBase** output) {","OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads));","*output = new Dataset(ctx,","DatasetContext(DatasetContext::Params(","{PrivateThreadPoolDatasetOp::kDatasetType,"],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["return err;","} while (!*line);    \/* skip CR LF from last chunk *\/","","s->chunksize = strtoll(line, NULL, 16);","","av_log(NULL, AV_LOG_TRACE, \"Chunked encoding data size: %\"PRId64\"'\\n\","],"label":1}
{"cve":"CVE-2018-8799","code_chunks":["ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);","xfree(bmpdata);","continue;","}","",""],"label":1}
{"cve":"CVE-2018-18838","code_chunks":["while(*s && d < e) {","if(unlikely(*s == '%')) {","if(likely(s[1] && s[2])) {","*d++ = from_hex(s[1]) << 4 | from_hex(s[2]);","s += 2;","}","}"],"label":1}
{"cve":"CVE-2017-7500","code_chunks":["","\t\/* Run fsm file post hook for all plugins *\/","\trpmpluginsCallFsmFilePost(plugins, fi, fpath,","\t\t\t\t  sb.st_mode, action, rc);","","        \/* XXX Failure to remove is not (yet) cause for failure. *\/","        if (!strict_erasures) rc = 0;"],"label":0}
{"cve":"PYSEC-2021-750","code_chunks":["context, size == 1,","errors::InvalidArgument(","\"Input 0 (file_pattern) must be a string scalar; got a tensor of \",","size, \"elements\"));","}","const string& file_pattern = file_pattern_t.flat<tstring>()(0);",""],"label":1}
{"cve":"CVE-2018-8794","code_chunks":["{","color = CVAL(in);","*out = color;","out += 4;","indexw++;","collen--;"],"label":1}
{"cve":"CVE-2022-1381","code_chunks":["\t\t\tbreak;","\t\t}","\t\tif (win == NULL)","\t\t    win = lastwin;","\t\tex_win_close(eap->forceit, win, NULL);","\t    }","\t}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["RLC_TRY {","fp2_new(r);","fp2_new(s);","for (i = 0; i < (1 << (FP_WIDTH - 2)); i ++) {","fp2_null(t[i]);","fp2_new(t[i]);","}"],"label":1}
{"cve":"CVE-2021-46784","code_chunks":["}               \/* while loop *\/","","if (outbuf.size() > 0) {","entry->append(outbuf.rawBuf(), outbuf.size());","\/* now let start sending stuff to client *\/","entry->flush();"],"label":1}
{"cve":"CVE-2019-13304","code_chunks":["          ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");","        (void) SetQuantumEndian(image,quantum_info,MSBEndian);","        quantum_info->min_is_white=MagickTrue;","        pixels=GetQuantumPixels(quantum_info);","        for (y=0; y < (ssize_t) image->rows; y++)","        {","          register const PixelPacket"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","output->type = input->type;","return context->ResizeTensor(context, output,"],"label":1}
{"cve":"CVE-2018-18311","code_chunks":["const int nlen = strlen(nam);","const int vlen = strlen(val);","char * const new_env =","(char*)safesysmalloc((nlen + vlen + 2) * sizeof(char));"],"label":1}
{"cve":"CVE-2021-42782","code_chunks":["priv->obj_cache[enumtag].obj_len,","0x53, &bodylen);","","if (body == NULL)","LOG_FUNC_RETURN(card->ctx, SC_ERROR_OBJECT_NOT_VALID);","","\/* get the certificate out *\/"],"label":1}
{"cve":"CVE-2018-20180","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"CVE-2016-2847","code_chunks":["\t\twake_up_interruptible(&pipe->wait);","\tret = -ERESTARTSYS;","\tgoto err;","","\tif (!--pipe->writers)","\t\twake_up_interruptible(&pipe->wait);","\tret = -ERESTARTSYS;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["","k = naf + l - 1;","","for (i = l - 1; i >= 0; i--, k--) {","fp8_sqr_cyc(r, r);","","if (*k > 0) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumDimensions(seq_lengths), 1);","","if (input->type != kTfLiteInt32 && input->type != kTfLiteFloat32 &&"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["const bn_t m) {","bn_t n, _k, _m;","ep_t t[5];","int i, l, u_i, offset;","int8_t jsf[2 * (RLC_FP_BITS + 1)];","","if (bn_is_zero(k) || ep_is_infty(p)) {"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\tStream_Write_UINT16(s, (UINT16)settings->GlyphSupportLevel); \/* glyphSupportLevel (2 bytes) *\/","\tStream_Write_UINT16(s, 0);                                 \/* pad2Octets (2 bytes) *\/","\trdp_capability_set_finish(s, (UINT16)header, CAPSET_TYPE_GLYPH_CACHE);","\treturn TRUE;","}","","#ifdef WITH_DEBUG_CAPABILITIES"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["  CudnnTensorDescriptor input_tensor_desc(","      input_desc, ToCudnnDataType(input_type, input_desc.layout()));","  CudnnTensorDescriptor output_tensor_desc(","      output_desc, ToCudnnDataType(output_type, output_desc.layout()));","  auto cudnn = cudnn_->GetHandle(parent_, stream);","  const auto status = [&] {","    RETURN_IF_CUDNN_ERROR(cudnnTransformTensor("],"label":0}
{"cve":"CVE-2019-20421","code_chunks":["}","","io_->seek(restore,BasicIo::beg);","io_->seek(subBox.length, Exiv2::BasicIo::cur);","restore = io_->tell();","}","break;"],"label":1}
{"cve":"CVE-2016-3134","code_chunks":["\tstruct xt_table_info *private = table->private;","\tint ret = 0;","\tvoid *loc_cpu_entry;","","\tcounters = alloc_counters(table);","\tif (IS_ERR(counters))","\t\treturn PTR_ERR(counters);"],"label":0}
{"cve":"CVE-2021-32791","code_chunks":["goto out;","","if (value != NULL) {","if (oidc_cache_crypto_encrypt(r, value,"],"label":1}
{"cve":"CVE-2022-23576","code_chunks":["const auto& original_output_shape = output.shape();","int64_t output_size = DataTypeSize(BaseType(dt));","int num_dims = std::max(1, original_output_shape.dim_size());","auto output_shape = MaybeGetMinimumShape(original_output_shape, num_dims,","found_unknown_shapes);","for (const auto& dim : output_shape.dim()) {"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["    }","    else {","        return mainLoop();","    }","}","","int"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["<< \"Options:\\n\"","<< \"  -a, --address <address>  listen for clients on the given address.\\n\"","<< \"  -c, --config <pathname>  use the named configuration file instead.\\n\"","<< HELP_COMMON_INFO_1 << WINAPI_INFO << HELP_SYS_INFO << HELP_COMMON_INFO_2 << \"\\n\"","<< \"Default options are marked with a *\\n\"","<< \"\\n\"","<< \"The argument for --address is of the form: [<hostname>][:<port>].  The\\n\""],"label":1}
{"cve":"CVE-2018-20176","code_chunks":["int i;","uint16 num_updates;","","in_uint16_le(s, num_updates);   \/* rectangles *\/","","for (i = 0; i < num_updates; i++)"],"label":0}
{"cve":"CVE-2022-1437","code_chunks":["RList *res = r_list_newf ((RListFree)r_bin_symbol_free);","r_return_val_if_fail (res && bf->o && bf->o->bin_obj, res);","RCoreSymCacheElement *element = bf->o->bin_obj;","size_t i;","HtUU *hash = ht_uu_new0 ();","if (!hash) {"],"label":1}
{"cve":"CVE-2019-11924","code_chunks":["expectSame(buf, \"0123456789\");","return getBuf(\"16000000\");","}));","EXPECT_NO_THROW(read_.read(queue_));","}"],"label":1}
{"cve":"CVE-2022-1207","code_chunks":["\t\t\tbreak;","\t\t\top->type = R_ANAL_OP_TYPE_CMP;","\t\t\tbreak;","\t\t\tif (buf[0] == 0xb0) {","\t\t\t\top->type = R_ANAL_OP_TYPE_NOP;","\t\t\t}","\t\t\tbreak;"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["      cuDeviceGetAttribute(&value, CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X, device);","  if (res != CUDA_SUCCESS) {","    LOG(ERROR) << \"failed to query max grid dim x: \" << ToString(res);","    return false;","  }","  *x = value;",""],"label":0}
{"cve":"CVE-2021-41216","code_chunks":["","for (int32_t i = 0; i < rank; ++i) {","int64_t in_idx = data[i];","if (in_idx >= rank) {","return errors::InvalidArgument(\"perm dim \", in_idx,","\" is out of range of input rank \", rank);","}"],"label":1}
{"cve":"CVE-2022-4415","code_chunks":["assert(fd >= 0);","assert(uid_is_valid(uid));","","#if HAVE_ACL","int r;",""],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["m_cursor = offset;","} else {","assertx(whence == SEEK_END);","m_cursor = m_len + offset;","}","setPosition(m_cursor);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","  auto* params = reinterpret_cast<TfLiteMulParams*>(node->builtin_data);","  OpData* data = reinterpret_cast<OpData*>(node->user_data);","","  const TfLiteTensor* input1;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor1, &input1));"],"label":0}
{"cve":"CVE-2017-1000251","code_chunks":["__u8\t\tconf_retry;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","auto* params = reinterpret_cast<TfLiteShapeParams*>(node->builtin_data);","switch (params->out_type) {"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        }","        else {","            int res;","            Py_ssize_t len;","            Py_ssize_t i;","            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"ExtSlice field \\\"dims\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"],"label":0}
{"cve":"CVE-2023-46407","code_chunks":["        ctx->next = ret;","        if (ctx->container)","            ctx->skip += ctx->next;","    }","","    if (ctx->container && ctx->next >= 0) {","        ret = skip_boxes(ctx, ctx->pc.buffer, ctx->pc.index);"],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["size_t CxMemFile::Read(void *buffer, size_t size, size_t count)","{","if (buffer==NULL) return 0;",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);","OpData* data = static_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"],"label":1}
{"cve":"CVE-2018-11379","code_chunks":["\t\t\t\trsds_hdr.guid.data4[6],","\t\t\t\trsds_hdr.guid.data4[7],","\t\t\t\trsds_hdr.age);","\t\t\tbasename = r_file_basename ((char*) rsds_hdr.file_name);","\t\t\tstrncpy (res->file_name, (const char*)","\t\t\t\tbasename, sizeof (res->file_name));","\t\t\tres->file_name[sizeof (res->file_name) - 1] = 0;"],"label":0}
{"cve":"CVE-2019-16778","code_chunks":["return;","}","const auto segment_flat = segment_ids.flat<Index>();","const Index output_rows = internal::SubtleMustCopy(static_cast<Index>(","num_segments.dtype() == DT_INT32 ? num_segments.scalar<int32>()()",": num_segments.scalar<int64>()()));","OP_REQUIRES(context, output_rows >= 0,"],"label":1}
{"cve":"CVE-2019-10714","code_chunks":["      if (AsciiMap[c] != AsciiMap[d])","        return(AsciiMap[c]-(int) AsciiMap[d]);","      if (c == 0)","        return(0);","      p++;","      q++;","    }"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_rec_tnaf_get(uint8_t *t, int8_t *beta, int8_t *gama, int8_t u,","size_t w) {","if (u == -1) {","switch (w) {","*t = 2;"],"label":0}
{"cve":"CVE-2017-14608","code_chunks":["        imgdata.color.WB_Coeffs[LIBRAW_WBI_Tungsten][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_Tungsten][3] =","        imgdata.color.WB_Coeffs[LIBRAW_WBI_Flash][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_Flash][3] =","        imgdata.color.WB_Coeffs[LIBRAW_WBI_Cloudy][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_Cloudy][3] =","        imgdata.color.WB_Coeffs[LIBRAW_WBI_Shade][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_Shade][3] =","        imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_D][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_D][3] =","        imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_N][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_N][3] =","        imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_W][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_W][3] ="],"label":0}
{"cve":"CVE-2018-8795","code_chunks":["\t\t\twhile (indexw < width)","\t\t\t{","\t\t\t\tcode = CVAL(in);","\t\t\t\treplen = code & 0xf;","\t\t\t\tcollen = (code >> 4) & 0xf;","\t\t\t\trevcode = (replen << 4) | collen;","\t\t\t\tif ((revcode <= 47) && (revcode >= 16))"],"label":0}
{"cve":"CVE-2022-41860","code_chunks":["es_attribute_count = 0;","","\/* big enough to have even a single attribute *\/","if (attrlen < 5) {","fr_strerror_printf(\"EAP-Sim attribute too short: %d < 5\", attrlen);","return 0;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["GetTemporary(context, node, kBwCellStateQuantized);","bw_cell_state_quantized->type = fw_input_to_output_weights->type;","bw_cell_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(bw_cell_state_quantized->dims,"],"label":1}
{"cve":"CVE-2022-0521","code_chunks":["\tif (sz < 8) {","\t\treturn NULL;","\t}","\tRBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);","\tif (!attr) {","\t\treturn NULL;","\t}"],"label":0}
{"cve":"CVE-2016-2315","code_chunks":["{","size_t len = strlen(s) + 1;","char *r = pool_alloc(len);","memcpy(r, s, len);","return r;","}"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["const std::string server_type,"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int i, n;","int8_t tnaf[RLC_FB_BITS + 8], u;","eb_t t[1 << (EB_WIDTH - 2)];","size_t l;","","if (eb_curve_opt_a() == RLC_ZERO) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 2);","","  TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);","  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","","  TF_LITE_ENSURE(context, params->spectrogram->Initialize(params->window_size,","                                                          params->stride));"],"label":0}
{"cve":"CVE-2020-1888","code_chunks":["if (UNLIKELY(ch1 != '0' || ch2 != '0' || dch3 < 0 || dch4 < 0)) {","return false;","}","out = (dch3 << 4) | dch4;"],"label":1}
{"cve":"CVE-2020-11096","code_chunks":["s, update_approximate_cache_bitmap_v2_order(cache_bitmap_v2, compressed, flags)))","return FALSE;","","bitsPerPixelId = BPP_CBR2[cache_bitmap_v2->bitmapBpp];","*flags = (cache_bitmap_v2->cacheId & 0x0003) | (bitsPerPixelId << 3) |","((cache_bitmap_v2->flags << 7) & 0xFF80);",""],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (!o) {","Py_RETURN_NONE;","}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep2_map_from_field(ep2_t p, const uint8_t *uniform_bytes, int len);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output = GetOutput(context, node, 0);","DynamicBuffer buf;","StringRef str_ref = GetString(input, 0);","buf.AddString(str_ref);","buf.WriteToTensorAsVector(output);"],"label":1}
{"cve":"CVE-2018-20761","code_chunks":["ext = strrchr(szName, '.');","if (ext && strlen(ext) > 19) ext = NULL;","","if (ext && strlen(ext) > 1) {","strcpy(szExt, &ext[1]);","strlwr(szExt);","#ifndef FFMPEG_DEMUX_ENABLE_MPEG2TS"],"label":1}
{"cve":"CVE-2018-14056","code_chunks":["CString CWebSock::GetSkinPath(const CString& sSkinName) {","CString sRet = CZNC::Get().GetZNCPath() + \"\/webskins\/\" + sSkinName;","","if (!CFile::IsDir(sRet)) {","sRet = CZNC::Get().GetCurPath() + \"\/webskins\/\" + sSkinName;"],"label":1}
{"cve":"CVE-2021-3770","code_chunks":["curwin->w_p_list = 0;","#ifdef FEAT_VARTABS","new_ts_str = eap->arg;","if (!tabstop_set(eap->arg, &new_vts_array))","return;","while (vim_isdigit(*(eap->arg)) || *(eap->arg) == ',')","++(eap->arg);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","const int resource_id = std::hash<std::string>{}(params->table_name);","","TfLiteTensor* resource_handle_tensor =","GetOutput(context, node, kResourceHandleTensor);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["context, context->ResizeTensor(context, activation, activation_size));","","node->temporaries->data[kConcat] = (*scratch_tensor_index) + kConcat;","TfLiteTensor* concat = GetTemporary(context, node, kConcat);","concat->type = input->type;","concat->allocation_type = kTfLiteArenaRw;","TfLiteIntArray* concat_size = TfLiteIntArrayCreate(2);"],"label":1}
{"cve":"CVE-2022-1907","code_chunks":["                if (data <= data_end && *(data - 1) == '\/' && *data == '>') {","                    --data; --i;","                }","                result->end = data;","                result->value[i] = '\\0';","                return MOBI_SUCCESS;","            }"],"label":0}
{"cve":"CVE-2022-35971","code_chunks":["    const float input_min_float = input_min.flat<float>()(0);","    const float input_max_float = input_max.flat<float>()(0);","    const float requested_output_min_float =","        requested_output_min.flat<float>()(0);","    const float requested_output_max_float =","        requested_output_max.flat<float>()(0);",""],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["LOG(ERROR) << \"failed to query ECC status: \" << ToString(res);","return false;","}","","*result = value;","return true;"],"label":1}
{"cve":"CVE-2023-22738","code_chunks":["nation","from vantage6.server.resource.common._schema import UserSchema","","","module_name = logger_name(__name__)"],"label":1}
{"cve":"CVE-2016-4562","code_chunks":["if (clone_info->stroke_pattern != (Image *) NULL)","clone_info->fill_pattern=CloneImage(clone_info->stroke_pattern,0,0,","MagickTrue,exception);","clone_info->stroke.alpha=(Quantum) TransparentAlpha;","clone_info->stroke_width=0.0;","clone_info->fill_rule=NonZeroRule;","status=MagickTrue;"],"label":1}
{"cve":"CVE-2020-15121","code_chunks":["R_API char *r_socket_http_post (const char *url, const char *data, int *code, int *rlen) {","RSocket *s;","char *uri = strdup (url);","if (!uri) {"],"label":1}
{"cve":"CVE-2018-14681","code_chunks":["\tif (lit_run) READ_HUFFSYM_SAFE(MATCHLEN2, len);","\telse         READ_HUFFSYM_SAFE(MATCHLEN1, len);","","\tif (len > 0) {","\t    len += 2;","\t    lit_run = 0; \/* not the end of a literal run *\/","\t    READ_HUFFSYM_SAFE(OFFSET, j); offset = j << 6;"],"label":0}
{"cve":"CVE-2019-6978","code_chunks":["void *rv;","gdIOCtx *out = gdNewDynamicCtx(2048, NULL);","gdImageWBMPCtx(im, fg, out);","rv = gdDPExtractData(out, size);","out->gd_free(out);",""],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["std::unique_ptr<GpuTimer, GpuTimerDeleter> timer;","if (profile_result) {","timer.reset(new GpuTimer(parent_));                          if (!timer->Init() || !timer->Start(AsGpuStream(stream))) {","return tsl::Status(port::error::INTERNAL, \"Failed to start timer\");","}","}","auto side_input_data_ptr = (side_input_scale_ == 0)"],"label":1}
{"cve":"PYSEC-2021-649","code_chunks":["          sparse_handles_t(b) = handle;","        }","      }","    }","","    context->set_output(0, sparse_handles);","  }"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int fp_get_bit(const fp_t a, int bit);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus EvalImpl(TfLiteContext* context, const TfLiteTensor* input,","                      TfLiteNode* node) {","  auto* params = reinterpret_cast<TfLiteUniqueParams*>(node->builtin_data);","  if (params == nullptr) {","    context->ReportError(context, \"Null params passed\");","    return kTfLiteError;","  }"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (!o) {","Py_RETURN_NONE;","}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","  const TfLiteType type = input1->type;","  if (type != kTfLiteInt32 && type != kTfLiteFloat32) {","    TF_LITE_KERNEL_LOG(context, \"Unsupported data type %s.\",","                       TfLiteTypeGetName(type));","    return kTfLiteError;","  }"],"label":0}
{"cve":"CVE-2016-10167","code_chunks":["gdAssertImageEqualsToFile(path, im);","gdFree(path);","","gdImageDestroy(im);","","return gdNumFailures();"],"label":0}
{"cve":"CVE-2023-51698","code_chunks":["\t\t\t\tgdk_pixbuf_loader_write (loader, (guchar *) buf, size, NULL);","\t\t\t}","\t\t\tg_free (buf);","\t\t\tgdk_pixbuf_loader_close (loader, NULL);","\t\t\tbreak;","\t\t}","\t}"],"label":0}
{"cve":"CVE-2021-26926","code_chunks":["\t\treturn -1;","\t}","","\treturn 0;","}","","static jp2_dec_t *jp2_dec_create(void)"],"label":0}
{"cve":"CVE-2017-6194","code_chunks":["\t\t\tamount = n_got *  sizeof (ut32);","\t\t\tif (amount < n_got || amount > UT32_MAX) {","\t\t\t\tgoto out_error;","\t\t\t}","\t\t\tstruct reloc_struct_t *got_table = calloc (","\t\t\t\t1, n_got * sizeof (struct reloc_struct_t));","\t\t\tif (got_table) {"],"label":0}
{"cve":"CVE-2019-15226","code_chunks":["uint64_t HeaderMapImpl::appendToHeader(HeaderString& header, absl::string_view data) {","  if (data.empty()) {","    return 0;","  }","  uint64_t byte_size = 0;","  if (!header.empty()) {","    header.append(\",\", 1);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2020-5208","code_chunks":["uint32_t offset, uint32_t length, uint8_t *frubuf)","{","static uint32_t fru_data_rqst_size = 20;","uint32_t off = offset, tmp, finish;","struct ipmi_rs * rsp;","struct ipmi_rq req;","uint8_t msg_data[4];"],"label":1}
{"cve":"CVE-2023-32233","code_chunks":["\t\t\tif (!nest)","\t\t\t\tgoto nla_put_failure;","","\t\t\tfor (i = 0; i < priv->num_exprs; i++) {","\t\t\t\tif (nft_expr_dump(skb, NFTA_LIST_ELEM,","\t\t\t\t\t\t  priv->expr_array[i], reset))","\t\t\t\t\tgoto nla_put_failure;"],"label":0}
{"cve":"CVE-2022-39318","code_chunks":["if (!Buffer)","Stream_Seek(user_data->data, (NumberOfPackets * 12));","","iso_packet_size = BufferSize \/ NumberOfPackets;"],"label":1}
{"cve":"CVE-2016-5357","code_chunks":["return FALSE;","","if (!parse_netscreen_hex_dump(wth->random_fh, pkt_len, cap_int,","cap_dst, phdr, buf, err, err_info))","return FALSE;","return TRUE;","}"],"label":1}
{"cve":"CVE-2018-8799","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2021-32791","code_chunks":["msg = apr_psprintf(r->pool, \"from %s cache backend for %skey %s\",","cfg->cache->name, encrypted ? \"encrypted \" : \"\", key);","if (rc == TRUE)","if (*value != NULL)","oidc_debug(r, \"cache hit: return %d bytes %s\",","*value ? (int )strlen(*value) : 0, msg);"],"label":1}
{"cve":"CVE-2021-32439","code_chunks":["stts->nb_entries = 1;","stts->entries = gf_malloc(sizeof(GF_SttsEntry));","if (!stts->entries) return GF_OUT_OF_MEM;","stts->entries[0].sampleCount = nb_packed_samples;"],"label":1}
{"cve":"CVE-2020-15121","code_chunks":["\t\t\treturn BIO_read (s->bio, buf, len);","\t\t}","\t\treturn SSL_read (s->sfd, buf, len);","\t}","#endif","\t\tint r = recv (s->fd, buf, len, 0);","\tD { eprintf (\"READ \"); int i; for (i = 0; i<len; i++) { eprintf (\"%02x \", buf[i]); } eprintf (\"\\n\"); }"],"label":0}
{"cve":"CVE-2022-3957","code_chunks":["while (*content == ' ') content++;","if (strstr(content, \"defer\")) {","par->defer = 1;","content += 4;","} else {","content = attribute_content;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","DynamicBuffer buf;","StringRef str_ref = GetString(input, 0);","buf.AddString(str_ref);","buf.WriteToTensorAsVector(output);"],"label":1}
{"cve":"CVE-2020-15121","code_chunks":["\tchar *uri = strdup (url);","\tif (!uri) {","\t\treturn NULL;","\t}","","\tif (!host) {","\t\tfree (uri);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["                         bool (*func)(bool, bool)) {","  OpData* data = reinterpret_cast<OpData*>(node->user_data);","","  const TfLiteTensor* input1;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor1, &input1));","  const TfLiteTensor* input2;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["return EvalFloat(input, input_weights, recurrent_weights, bias, params,","hidden_state, output);","case kTfLiteInt8: {","TfLiteTensor* input_quantized = GetTemporary(context, node, 0);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, bias->dims->data[0], num_units);","}","","const TfLiteTensor* state = GetInput(context, node, kStateTensor);"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["    rc = SSL_export_keying_material(ds->ossl_ssl[idx], material,","                                    sizeof(material), \"EXTRACTOR-dtls_srtp\",","                                    19, NULL, 0, 0);","    if (rc == 0) {","        status = PJMEDIA_SRTP_EINKEYLEN;","        goto on_return;","    }"],"label":0}
{"cve":"CVE-2020-1921","code_chunks":["memcpy(key_s, key.data(), key.size());","","if (iv.size() != iv_size) {","raise_warning(\"Iv size incorrect; supplied length: %d, needed: %d\","],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["if (lhs_dim != rhs_dim) {","if (lhs_dim != 1) {","TF_LITE_ENSURE_EQ(context, rhs_dim, 1);","}","}","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["    TfLiteTensor* bw_row_sums;","    TF_LITE_ENSURE_OK(","        context,","        GetTemporarySafe(context, node, \/*index=*\/kBwRowSums, &bw_row_sums));","    bw_row_sums->type = kTfLiteInt32;","    bw_row_sums->allocation_type = kTfLiteArenaRwPersistent;","    int bw_row_sums_dims[2] = {num_row_sums, bw_num_units};"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static void rand_hash(uint8_t *out, int out_len, uint8_t *in, int in_len) {","uint32_t j = util_conv_big(8 * out_len);","int len = RLC_CEIL(out_len, RLC_MD_LEN);","uint8_t* buf = RLC_ALLOCA(uint8_t, 1 + sizeof(uint32_t) + in_len);","uint8_t hash[RLC_MD_LEN];",""],"label":1}
{"cve":"CVE-2020-4030","code_chunks":["trio_class_t* self, TRIO_CONST char* string,","trio_flags_t flags, int width, int precision)","{","int length;","int ch;","","assert(VALID(self));"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* key_tensor = GetInput(context, node, kKeyTensor);","const TfLiteTensor* value_tensor = GetInput(context, node, kValueTensor);","","Subgraph* subgraph = reinterpret_cast<Subgraph*>(context->impl_);","auto& resources = subgraph->resources();"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["    ds->rem_fprint_status = PJ_EPENDING;","    ds->rem_addr = param->rem_addr;","    ds->rem_rtcp = param->rem_rtcp;","    ds->setup = param->is_role_active? DTLS_SETUP_ACTIVE:DTLS_SETUP_PASSIVE;","","    \/* Pending start SRTP *\/","    ds->pending_start = PJ_TRUE;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\tif (len != 18 * RLC_FP_BYTES) {","\t\tRLC_THROW(ERR_NO_BUFFER);","\t\treturn;","\t}","\tfp9_write_bin(bin, 9 * RLC_FP_BYTES, a[0]);","\tfp9_write_bin(bin + 9 * RLC_FP_BYTES, 9 * RLC_FP_BYTES, a[1]);","}"],"label":0}
{"cve":"PYSEC-2020-321","code_chunks":["  for (const auto& node : graph_def.node()) {","    TF_RETURN_IF_ERROR(ValidateNode(node));","  }","","  if (graph_def.has_library()) {","    const FunctionDefLibrary& library = graph_def.library();","    for (const auto& function : library.function()) {"],"label":0}
{"cve":"CVE-2023-46407","code_chunks":["duration = jxl_u32(gb, 0, 1, 0, 0, 0, 0, 8, 32);","if (meta->have_timecodes)","skip_bits_long(gb, 32);","frame->is_last = get_bits1(gb);","} else {","frame->is_last = 0;"],"label":1}
{"cve":"CVE-2020-15888","code_chunks":["int n;  \/* number of returns *\/","CallInfo *ci;","checkstackGCp(L, LUA_MINSTACK, func);  \/* ensure minimum stack size *\/","L->ci = ci = next_ci(L);","ci->nresults = nresults;","ci->callstatus = CIST_C;","ci->top = L->top + LUA_MINSTACK;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, 0);","","switch (input->type) {","return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["                if (tok->indent+1 >= MAXINDENT) {","                    tok->done = E_TOODEEP;","                    tok->cur = tok->inp;","                    return ERRORTOKEN;","                }","                if (altcol <= tok->altindstack[tok->indent]) {","                    return indenterror(tok);"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["return false;","}","","LOG((CLOG_NOTE \"server fingerprint (SHA1): %s (SHA256): %s\",","barrier::format_ssl_fingerprint(fingerprint_sha1.data).c_str(),","barrier::format_ssl_fingerprint(fingerprint_sha256.data).c_str()));",""],"label":1}
{"cve":"CVE-2020-35533","code_chunks":["FORC(4) jh->huff[2 + c] = jh->huff[1];","FORC(jh->sraw) jh->huff[1 + c] = jh->huff[0];","}","jh->row = (ushort *)calloc(jh->wide * jh->clrs, 4);","merror(jh->row, \"ljpeg_start()\");","return zero_after_ff = 1;","}"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["}","tensorflow::Status s(static_cast<tensorflow::error::Code>(error_code),","error_message);","s.SetPayload(tsl::CoordinationErrorPayloadKey(), \"testing error payload\");","OP_REQUIRES_OK(ctx, coord_agent->ReportError(s));","}","};"],"label":1}
{"cve":"CVE-2019-3556","code_chunks":["void PCRECache::dump(const std::string& filename) {","std::ofstream out(filename.c_str());","switch (m_kind) {","for (auto& it : *m_staticCache) {","out << it.first->data() << \"\\n\";"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["fp24_t l;","ep_t *_p = RLC_ALLOCA(ep_t, m);","ep4_t *_q = RLC_ALLOCA(ep4_t, m);","int i, j, len = bn_bits(a) + 1;","int8_t s[RLC_FP_BITS + 1];","","if (m == 0) {"],"label":1}
{"cve":"CVE-2021-41208","code_chunks":["const int32_t logits_dim = logits_dim_;","const int32_t hessian_dim =","stats_summaries_list[0].dim_size(3) - logits_dim;","DCHECK_GT(hessian_dim, 0);","DCHECK_LE(hessian_dim, logits_dim * logits_dim);"],"label":1}
{"cve":"CVE-2020-9433","code_chunks":["{","const char *email = lua_tostring(L, 2);","lua_pushboolean(L, X509_check_email(cert, email, strlen(email), 0));","}","else","{"],"label":1}
{"cve":"CVE-2023-39354","code_chunks":["\t\t\t\treturn FALSE;","","\t\t\tFillMemory(context->priv->PlaneBuffers[i], originalSize, 0xFF);","\t\t}","\t\telse if (planeSize < originalSize)","\t\t{","\t\t\tif (!nsc_rle_decode(rle, rleSize, context->priv->PlaneBuffers[i],"],"label":0}
{"cve":"CVE-2019-13307","code_chunks":["","number_threads=(size_t) GetMagickResourceLimit(ThreadResource);","pixels=(PixelChannels **) AcquireQuantumMemory(number_threads,","sizeof(*pixels));","if (pixels == (PixelChannels **) NULL)","return((PixelChannels **) NULL);"],"label":1}
{"cve":"CVE-2022-36026","code_chunks":["OP_REQUIRES_OK(ctx, ctx->GetAttr(\"num_bits\", &num_bits_));","OP_REQUIRES(ctx, num_bits_ > 0 && num_bits_ < (signed_input_ ? 62 : 63),","InvalidArgument(\"num_bits is out of range: \", num_bits_,","\" with signed_input_ \", signed_input_));","OP_REQUIRES_OK(ctx, ctx->GetAttr(\"range_given\", &range_given_));","OP_REQUIRES_OK(ctx, ctx->GetAttr(\"input_min\", &input_min_));"],"label":0}
{"cve":"CVE-2021-32139","code_chunks":["}","","#endif \/*GPAC_DISABLE_ISOM_WRITE*\/","","GF_Box *hclr_box_new()","{","\tISOM_DECL_BOX_ALLOC(GF_TextHighlightColorBox, GF_ISOM_BOX_TYPE_HCLR);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["goto error;","asdl_seq_SET(kwonlyargs, j++, arg);","i += 1; \/* the name *\/","if (i < NCH(n) && TYPE(CHILD(n, i)) == COMMA)","i += 1; \/* the comma, if present *\/","break;","\/* arg will be equal to the last argument processed *\/"],"label":1}
{"cve":"CVE-2023-50247","code_chunks":["","static int on_ack_stream(quicly_sentmap_t *map, const quicly_sent_packet_t *packet, int acked, quicly_sent_t *sent)","{","quicly_conn_t *conn = (quicly_conn_t *)((char *)map - offsetof(quicly_conn_t, egress.loss.sentmap));","int ret;",""],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","    const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInput, &input));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","  const TfLiteTensor* axis;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));"],"label":0}
{"cve":"CVE-2020-9434","code_chunks":["{","X509 * cert = CHECK_OBJECT(1, X509, \"openssl.x509\");","size_t sz;","const char *ip = luaL_checklstring(L, 2, &sz);","int flags = luaL_optint(L, 3, 0);","int ret = X509_check_ip(cert, (const unsigned char*)ip, sz, flags);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["#endif","\t\tfp9_neg(qn, qy);","","\t\tbn_rec_naf(s, &len, a, 2);","\t\tfor (i = len - 2; i >= 0; i--) {","\t\t\tfp54_sqr(r, r);","\t\t\tpp_dbl_k54(l, rx, ry, rz, _p);"],"label":0}
{"cve":"CVE-2019-13225","code_chunks":["}","","if (IS_NOT_NULL(Else)) {","len += SIZE_OP_JUMP;","tlen = compile_length_tree(Else, reg);","if (tlen < 0) return tlen;","len += tlen;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    scratch_buffer_size->data[lhs_rank - 1] = lhs->dims->data[lhs_rank - 2];","","    scratch_buffer->type = op_context->lhs->type;","    scratch_buffer->allocation_type = kTfLiteArenaRw;","    TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, scratch_buffer,","                                                     scratch_buffer_size));","  }"],"label":0}
{"cve":"PYSEC-2020-327","code_chunks":["int previous_segment_id = -1;","for (int i = 0; i < segment_id_size; i++) {","const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];","if (i == 0) {","TF_LITE_ENSURE_EQ(context, current_segment_id, 0);","} else {"],"label":0}
{"cve":"CVE-2022-32546","code_chunks":["Set PCL render geometry.","*\/","width=(size_t) floor(bounds.x2-bounds.x1+0.5);","height=(size_t) floor(bounds.y2-bounds.y1+0.5);","if (width > page.width)","page.width=width;"],"label":1}
{"cve":"PYSEC-2021-578","code_chunks":["ctx, input.dims() == 4,","errors::InvalidArgument(\"Current RequantizePerChannel operator\"","\"supports 4D tensors only.\"));","","const Tensor& input_min_vec = ctx->input(kInputMinVecIndex);","size_t depth = input_min_vec.NumElements();"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["reinterpret_cast<TfLiteResizeBilinearParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["(NumInputs(node) == 4)","? GetOptionalInputTensor(context, node, kBiasTensor)",": nullptr;","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","TfLiteTensor* col2im = data->has_col2im"],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["","    \/*","     * Special case checking the \"validate\", \"list\" and \"kill\" pseudo-commands.","     *\/","    if (pwflag) {","\tdebug_return_uint(sudoers_lookup_pseudo(snl, ctx, now, callback,","\t    cb_data, pwflag));"],"label":0}
{"cve":"CVE-2022-0476","code_chunks":["\"TokenListSize TokenListEntries ListHeaderSize ElementHeaderSize\", 0);","","offset = entry->location.rva + sizeof (token_info_list);","for (i = 0; i < token_info_list.number_of_entries; i++) {","struct minidump_token_info *info = R_NEW (struct minidump_token_info);","if (!info) {","break;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":[" * @param settings settings"," * @return if the operation completed successfully"," *\/","","static BOOL rdp_read_large_pointer_capability_set(wStream* s, rdpSettings* settings)","{","\tUINT16 largePointerSupportFlags;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const int num_dims = NumDimensions(input);","TF_LITE_ENSURE(context, num_dims >= 2);","const TfLiteTensor* fft_length;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFftLengthTensor, &fft_length));","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TF_LITE_ENSURE(context, IsPowerOfTwo(fft_length_data[0]));"],"label":0}
{"cve":"CVE-2018-20762","code_chunks":["if (evt->navigate.to_url) fprintf(stderr, \"Go to URL: \\\"%s\\\"\\r\", evt->navigate.to_url);","break;","if (gf_term_is_supported_url(term, evt->navigate.to_url, 1, no_mime_check)) {","strcpy(the_url, evt->navigate.to_url);","fprintf(stderr, \"Navigating to URL %s\\n\", the_url);","gf_term_navigate_to(term, evt->navigate.to_url);","return 1;"],"label":1}
{"cve":"CVE-2019-9162","code_chunks":["","\treturn nf_conntrack_helper_register(&snmp_trap_helper);","}","","static void __exit nf_nat_snmp_basic_fini(void)","{","\tRCU_INIT_POINTER(nf_nat_snmp_hook, NULL);"],"label":0}
{"cve":"CVE-2020-27764","code_chunks":["break;","}","{","result=(MagickRealType) ((size_t) pixel & (size_t) (value+0.5));","break;","}","{"],"label":1}
{"cve":"CVE-2021-32686","code_chunks":["goto on_return;","","pj_grp_lock_add_ref(glock);","asock_cfg.grp_lock = ssock->param.grp_lock = glock;","pj_grp_lock_add_handler(ssock->param.grp_lock, ssock->pool, ssock,","ssl_on_destroy);","}"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["","    void Start() {","      FHandle handle = cond_ ? then_handle_ : else_handle_;","      rets_.clear();","      profiler::TraceMe trace_me(\"IfOp\");","      lib_->Run(","                    opts_, handle, args_, &rets_,"],"label":0}
{"cve":"CVE-2022-43995","code_chunks":["sudo_passwd_verify(struct passwd *pw, char *pass, sudo_auth *auth, struct sudo_conv_callback *callback)","{","char sav, *epass;","char *pw_epasswd = auth->data;","size_t pw_len;","int matched = 0;"],"label":1}
{"cve":"CVE-2022-4202","code_chunks":["s32 neg = (s32) val - (1<<nb_bits);","if (neg < -FIX_ONE \/ 2)","return 2 * gf_divfix(INT2FIX(neg\/2), lsr->res_factor);","return gf_divfix(INT2FIX(neg), lsr->res_factor);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","const TfLiteTensor* multipliers;"],"label":0}
{"cve":"CVE-2019-17177","code_chunks":["tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));","","if (NULL == tmp)","{","fprintf(stderr,  \"Could not reallocate string buffer.\\n\");","exit(-3);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["bn_copy(x, y);","bn_copy(y, t0);","} else {","bn_rsh(u, x, bn_bits(x) - 2 * RLC_DIG);","bn_rsh(v, y, bn_bits(x) - 2 * RLC_DIG);"],"label":1}
{"cve":"CVE-2023-5377","code_chunks":["s->size += 1;","if (ptr->layout.definedLayout==0) {","u32 i;","for (i=0; i<ptr->layout.channels_count; i++) {","s->size+=1;","if (ptr->layout.layouts[i].position==126)"],"label":1}
{"cve":"CVE-2018-20763","code_chunks":["\t\t}","\t\tif (odi.buffer>=0) fprintf(stderr, \" - Buffer: %d ms\", odi.buffer);","\t\tif (odi.db_unit_count) fprintf(stderr, \" - DB: %d AU\", odi.db_unit_count);","\t\tif (odi.cb_max_count) fprintf(stderr, \" - CB: %d\/%d CUs\", odi.cb_unit_count, odi.cb_max_count);","","\t\tfprintf(stderr, \"\\n\");","\t\tind = indent;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, hidden_state->dims->data[0], batch_size);","TF_LITE_ENSURE_EQ(context, hidden_state->dims->data[1], num_units);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TfLiteIntArray* output_size_array = TfLiteIntArrayCreate(2);","output_size_array->data[0] = batch_size;"],"label":1}
{"cve":"CVE-2022-2817","code_chunks":["f_assert_fails(typval_T *argvars, typval_T *rettv)","{","char_u\t*cmd;","garray_T\tga;","int\t\tsave_trylevel = trylevel;"],"label":0}
{"cve":"CVE-2021-21261","code_chunks":["else","{","for (i = 0; extra_args != NULL && extra_args[i] != NULL; i++)","g_ptr_array_add (flatpak_argv, g_strdup (extra_args[i]));","}","","expose_pids = (arg_flags & FLATPAK_SPAWN_FLAGS_EXPOSE_PIDS) != 0;"],"label":1}
{"cve":"CVE-2016-10167","code_chunks":["};","int red[3], blue[3];","int x, y, i, j;","char *path;","","red[0] = gdTrueColorAlpha(0, 0, 255, 127);"],"label":1}
{"cve":"PYSEC-2022-75","code_chunks":["InferenceContext* ctx = GetContext(node);","if (ctx == nullptr) {","return errors::InvalidArgument(\"SetUnknownShape: Missing context\");","}","if (output_port < 0 || output_port >= ctx->num_outputs()) {","return errors::InvalidArgument("],"label":0}
{"cve":"CVE-2021-25939","code_chunks":[": ApplicationFeature(server, \"ServerSecurity\"),","_enableFoxxApi(true),","_enableFoxxStore(true),","_hardenedRestApi(false) {","setOptional(false);","startsAfter<application_features::GreetingsFeaturePhase>();","}"],"label":1}
{"cve":"CVE-2022-24792","code_chunks":["\/* Read the headers of each stream. *\/","for (i = 0; i < avi_hdr.avih_hdr.num_streams; i++) {","pj_size_t elem = 0;","pj_ssize_t size_to_read;","","\/* Read strl header *\/","status = file_read(fport[0]->fd, &avi_hdr.strl_hdr[i],"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["    }","","        node->temporaries->data[kInputZeroPoints] =","        op_data->scratch_tensor_index + kInputZeroPoints;","    TfLiteTensor* input_zp;","    TF_LITE_ENSURE_OK(","        context, GetTemporarySafe(context, node, kInputZeroPoints, &input_zp));"],"label":0}
{"cve":"CVE-2016-5358","code_chunks":["  static ei_register_info ei[] = {","     { &ei_error, { \"rpcap.error.expert\", PI_SEQUENCE, PI_NOTE, \"Error\", EXPFILL }},","     { &ei_if_unknown, { \"rpcap.if_unknown\", PI_SEQUENCE, PI_NOTE, \"Unknown address family\", EXPFILL }},","     { &ei_no_more_data, { \"rpcap.no_more_data\", PI_MALFORMED, PI_ERROR, \"No more data in packet\", EXPFILL }},","     { &ei_caplen_too_big, { \"rpcap.caplen_too_big\", PI_MALFORMED, PI_ERROR, \"Caplen is bigger than the remaining message length\", EXPFILL }},","  };",""],"label":0}
{"cve":"CVE-2019-20911","code_chunks":["{","dwg_free_UNKNOWN_OBJ (dat, obj);","}","else if (klass && !is_entity)","{","dwg_free_UNKNOWN_OBJ (dat, obj);"],"label":1}
{"cve":"CVE-2021-46463","code_chunks":["","static const njs_value_t  string_constructor = njs_string(\"constructor\");","","if (njs_is_object(x)) {","object = njs_object_proto_lookup(njs_object(x), NJS_PROMISE,","njs_object_t);"],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["\t\t\t\top->len += 8;","\t\t\t} else {","\t\t\t\tgoto err;","\t\t\t}","\t\t\tbreak;","\t\t\tgoto err;","\t\t}"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["node->temporaries->data[kScratchBuffer] =","scratch_tensor_index + kScratchBuffer;","","TfLiteTensor* scratch_buffer = GetTemporary(context, node, kScratchBuffer);","scratch_buffer->type = input->type;","scratch_buffer->allocation_type = kTfLiteArenaRw;",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);","op_data->is_layer_norm_lstm = is_layer_norm_lstm;","","const TfLiteTensor* input = GetInput(context, node, lstm::full::kInputTensor);","TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);","TF_LITE_ENSURE(context, input->dims->size > 1);","const auto* params ="],"label":1}
{"cve":"CVE-2018-10537","code_chunks":["int ParseRiffHeaderConfig (FILE *infile, char *infilename, char *fourcc, WavpackContext *wpc, WavpackConfig *config)","{","int is_rf64 = !strncmp (fourcc, \"RF64\", 4), got_ds64 = 0;","int64_t total_samples = 0, infilesize;","RiffChunkHeader riff_chunk_header;","ChunkHeader chunk_header;"],"label":1}
{"cve":"CVE-2017-7189","code_chunks":["#ifdef HAVE_IPV6","if (*(str) == '[' && str_len > 1) {","\/* IPV6 notation to specify raw address with port (i.e. [fe80::1]:80) *\/","char *p = memchr(str + 1, ']', str_len - 2), *e = NULL;","if (!p || *(p + 1) != ':') {","if (get_err) {"],"label":0}
{"cve":"CVE-2021-30020","code_chunks":["if (vui_flag_pos) *vui_flag_pos = 0;","","sps_id = gf_bs_read_int_log(bs, 4, \"sps_id\");","if (sps_id >= 16) {"],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["\t\/* 1. Test if splash is in FIT internal data. *\/","\tif (!fit_image_get_data(fit_header, node_offset, &internal_splash_data, &internal_splash_size))","\t\tmemmove((void *)bmp_load_addr, internal_splash_data, internal_splash_size);","\t\/* 2. Test if splash is in FIT external data with fixed position. *\/","\telse if (!fit_image_get_data_position(fit_header, node_offset, &external_splash_addr))","\t\tis_splash_external = true;","\t\/* 3. Test if splash is in FIT external data with offset. *\/"],"label":0}
{"cve":"CVE-2016-6912","code_chunks":["\tif (out == NULL) {","\t\treturn NULL;","\t}","\tif (_gdImageWebpCtx(im, out, quality)) {","        rv = NULL;","    } else {","        rv = gdDPExtractData(out, size);"],"label":0}
{"cve":"CVE-2016-2052","code_chunks":["","this->blob = OT::Sanitizer<OT::_mtx>::sanitize (face->reference_table (_mtx_tag));","if (unlikely (!this->num_advances ||","2 * (this->num_advances + this->num_metrics) < hb_blob_get_length (this->blob)))","{","this->num_metrics = this->num_advances = 0;","hb_blob_destroy (this->blob);"],"label":1}
{"cve":"CVE-2021-39212","code_chunks":["p=GetCoderInfo(module,exception);","if (p != (CoderInfo *) NULL)","(void) CopyMagickString(module_name,p->name,MagickPathExtent);","rights=ReadPolicyRights;","if (IsRightsAuthorized(ModulePolicyDomain,rights,module_name) == MagickFalse)","{","errno=EPERM;"],"label":1}
{"cve":"CVE-2021-33910","code_chunks":["","                \/* Truncate trailing slashes and skip leading slashes *\/","                delete_trailing_chars(p, \"\/\");","                s = unit_name_escape(skip_leading_chars(p, \"\/\"));","        }","        if (!s)","                return -ENOMEM;"],"label":0}
{"cve":"CVE-2019-17178","code_chunks":["tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));","","if (NULL == tmp)","{"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","  const TfLiteTensor* input_resource_id_tensor;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputResourceIdTensor,","                                          &input_resource_id_tensor));","  TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);"],"label":0}
{"cve":"CVE-2022-0525","code_chunks":["codegen(s, rhs, VAL);","pop();","sp = cursp();","}","break;","","\/* keep evaluation order *\/"],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["static int","reportProcessingInstruction(XML_Parser parser, const ENCODING *enc,","const char *start, const char *end) {","const XML_Char *target;","XML_Char *data;","const char *tem;"],"label":1}
{"cve":"CVE-2018-20685","code_chunks":["\t\t\t\tcp += j;","\t\t\t} while (amt > 0);","","\t\t\tif (count == bp->cnt) {","\t\t\t\t\/* Keep reading so we stay sync'd up. *\/","\t\t\t\tif (wrerr == NO) {","\t\t\t\t\tif (atomicio(vwrite, ofd, bp->buf,"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["EXPECT_EQ(TestEnvironment::readFileToStringForTest(TestEnvironment::substitute(ca_cert)),","cvc_config.caCert());","EXPECT_EQ(2, cvc_config.subjectAltNameMatchers().size());","EXPECT_EQ(\"first san\", cvc_config.subjectAltNameMatchers()[0].exact());"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["            if (c)","              {","                imgdata.lens.nikon.NikonLensFStops = a*b*(12\/c);","                imgdata.lens.makernotes.LensFStops =","                  (float)imgdata.lens.nikon.NikonLensFStops \/12.0f;","              }","          }"],"label":0}
{"cve":"CVE-2017-18922","code_chunks":["                      \"CTX: readlen=%d readPos=%p \"","                      \"writeTo=%p \"","                      \"state=%d toRead=%d remaining=%d \"","                      \" nReadRaw=%d carrylen=%d carryBuf=%p\\n\",","                      __func__, len,","                      wsctx->readlen, wsctx->readPos,","                      wsctx->writePos,"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["}","","res = xcalloc(1,","sizeof(*res) +","sizeof(struct attr_state) * num_attr +","(is_macro ? 0 : namelen + 1));"],"label":1}
{"cve":"CVE-2022-29780","code_chunks":["und = 0;","p = NULL;","end = NULL;","","for (i = 0; i < length; i++) {","if (p >= end) {"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["const void\t*data;","size_t\t\tsize;","char\t\t*err_msg = \"\";","","if (strchr(name, '@')) {","\/*"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\tbn_grow(a, len);","\t\ta->used = len;","\t\ta->sign = RLC_POS;","\t\tdv_copy(a->dp, raw, len);","\t\tbn_trim(a);","\t} RLC_CATCH_ANY {","\t\tRLC_THROW(ERR_CAUGHT);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  fft_width = fft_length_data[1];","  int fft_working_length = std::max(fft_height, fft_width \/ 2);","  int half_fft_working_length = fft_working_length \/ 2;","","    TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));"],"label":0}
{"cve":"CVE-2018-12562","code_chunks":["{","int t=type->itemData(type->currentIndex()).toInt();","RemoteFsDevice::Details det;","","det.name=name->text().trimmed();","switch (t) {","case Type_SshFs: {"],"label":0}
{"cve":"CVE-2021-24025","code_chunks":["return true;","}","","raise_warning(\"IV passed is %d bytes long which is longer than the %d \"","\"expected by selected cipher, truncating\", piv.size(),","iv_required_len);","memcpy(iv_new, piv.data(), iv_required_len);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* cond_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputConditionTensor,","&cond_tensor));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["bn_read_bin(t, bin, len);","","\/* Reject values out of bounds. *\/","if (bn_sign(t) == RLC_NEG || bn_cmp(t, &core_get()->prime) != RLC_LT) {","RLC_THROW(ERR_NO_VALID);","} else {"],"label":1}
{"cve":"CVE-2019-13311","code_chunks":["WandPrivate MagickBooleanType CLIListOperatorImages(MagickCLI *cli_wand,","const char *option,const char *arg1n,const char *arg2n)","{","const char    \/* percent escaped versions of the args *\/","*arg1,","*arg2;"],"label":0}
{"cve":"CVE-2018-9336","code_chunks":["{","MsgToEventLog(M_SYSERR, TEXT(\"PeekNamedPipeAsync failed\"));","ReturnLastError(pipe, L\"PeekNamedPipeAsync\");","goto err;","}","","size = bytes \/ sizeof(*data);"],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["struct image_tool_params *params)","{","if (fdt_check_header(ptr) != EXIT_SUCCESS ||","fit_check_format(ptr, IMAGE_SIZE_INVAL))","return EXIT_FAILURE;",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  TfLiteTensor* output_tensor;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output_tensor));","  if (IsDynamicTensor(output_tensor)) {","    auto output_size = GetPaddedOutputShape(input_tensor, padding_matrix);","    if (output_size == nullptr) {","      return kTfLiteError;","    }"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_bitmap_cache_host_support_capability_set(wStream* s, rdpSettings* settings)","{","\tBYTE cacheVersion;","","\tif (Stream_GetRemainingLength(s) < 4)","\t\treturn FALSE;",""],"label":0}
{"cve":"CVE-2018-20749","code_chunks":["FILEXFER_ALLOWED_OR_CLOSE_AND_RETURN(\"\", cl, NULL);","","\/*","We later alloc length+1, which might wrap around on 32-bit systems if length equals","0XFFFFFFFF, i.e. SIZE_MAX for 32-bit systems. On 64-bit systems, a length of 0XFFFFFFFF","will safely be allocated since this check will never trigger and malloc() can digest length+1"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void md_map_sh224(uint8_t *hash, const uint8_t *msg, size_t len) {","SHA224Context ctx;","","if (SHA224Reset(&ctx) != shaSuccess) {"],"label":0}
{"cve":"CVE-2017-6439","code_chunks":["\t\t*items_read = i;","\t}","\tif (items_written) {","\t\t*items_written = p;","\t}","\toutbuf[p] = 0;",""],"label":0}
{"cve":"CVE-2023-0302","code_chunks":["\t\tp = file;","\t}","#else","\tp = file;","#endif","\tchar *fileline = r_str_newf (\"%s|%\"PFMT64d, p, line);","\tr_str_ansi_strip (fileline);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        }","        if (_PyObject_LookupAttrId(obj, &PyId_op, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"op\\\" missing from BinOp\");","            return 1;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","    Tensor<HW, DataType::INT32> paddings;","    RETURN_IF_ERROR(reader->ReadTensor(1, &paddings));","","    if (paddings.shape.h == 4 && paddings.shape.w == 2) {","            attr.prepended = BHWC(paddings.data[0], paddings.data[2],","                            paddings.data[4], paddings.data[6]);"],"label":0}
{"cve":"CVE-2021-4110","code_chunks":["if (!mrb_proc_p(proc)) {","mrb_raise(mrb, E_ARGUMENT_ERROR, \"not a proc\");","}","mrb_proc_copy(mrb_proc_ptr(self), mrb_proc_ptr(proc));","return self;","}",""],"label":1}
{"cve":"CVE-2019-11413","code_chunks":["source = checkstring(J, 0);","re = js_toregexp(J, 1);","","if (js_regexec(re->prog, source, &m, 0)) {","js_copy(J, 0);","return;","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (output->type) {","case kTfLiteInt32: {"],"label":1}
{"cve":"CVE-2019-19333","code_chunks":["","return 0;","}","","static const char *","ident_val_add_module_prefix(const char *value, const struct lyxml_elem *xml, struct ly_ctx *ctx)"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void bn_mxp_slide(bn_t c, const bn_t a, const bn_t b, const bn_t m) {","bn_t tab[RLC_TABLE_SIZE], t, u, r;","size_t l, w = 1;","uint8_t *win = RLC_ALLOCA(uint8_t, bn_bits(b));","","if (win == NULL) {"],"label":0}
{"cve":"CVE-2021-33361","code_chunks":["","return GF_OK;","}","","GF_Box *asrt_box_new()","{"],"label":1}
{"cve":"CVE-2018-20180","code_chunks":["STREAM s;","int length;","int tagval;","struct stream packet;","","s = tcp_recv(NULL, 4);"],"label":0}
{"cve":"PYSEC-2021-811","code_chunks":["void TensorSliceReader::LoadShard(int shard) const {","  CHECK_LT(shard, sss_.size());","  if (sss_[shard] || !status_.ok()) {","    return;    }","  string value;","  SavedTensorSlices sts;","  const string fname = fnames_[shard];"],"label":0}
{"cve":"CVE-2023-28097","code_chunks":["int number;","char *p;","int  size;","","p = buffer;","\/* search the beginning of the number *\/","while ( p<end && (*p==' ' || *p=='\\t' || (*p=='\\r' && *(p+1)=='\\n') ||"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static void ep4_mul_fix_ordin(ep4_t r, const ep4_t *table, const bn_t k) {","int8_t naf[2 * RLC_FP_BITS + 1], *t;","size_t len;","int n;","","if (bn_is_zero(k)) {","ep4_set_infty(r);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp3_read_bin(fp3_t a, const uint8_t *bin, size_t len) {","if (len != 3 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":0}
{"cve":"CVE-2016-9841","code_chunks":["else if (op & 16) {                     \/* length base *\/","len = (unsigned)(here.val);","op &= 15;                           \/* number of extra bits *\/","if (op) {","if (bits < op) {","hold += (unsigned long)(PUP(in)) << bits;"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["for (i=0; i < p->colors; i++)\t\t\/* Multiply out XYZ colorspace *\/","for (j=0; j < 3; j++)","for (cam_rgb[i][j] = k=0; k < 3; k++)","cam_rgb[i][j] += cam_xyz[i][k] * xyz_rgb[k][j];","","for (i=0; i < p->colors; i++) {\t\t\/* Normalize cam_rgb so that *\/"],"label":1}
{"cve":"CVE-2022-29228","code_chunks":["const auto& bearer_prefix = bearerPrefix();","if (absl::StartsWithIgnoreCase(value, bearer_prefix)) {","const size_t start = bearer_prefix.length();","return std::string(StringUtil::ltrim(value.substr(start)));","}","}"],"label":1}
{"cve":"CVE-2021-40524","code_chunks":["    struct stat st;","    struct tm *t;","","    if (!name || !*name) {","        addreply_noformat(501, MSG_MISSING_ARG);","    } else if (stat(name, &st)) {","#ifdef DEBUG"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE(context, params->cell_clip >= 0);","TF_LITE_ENSURE(context, params->proj_clip >= 0);","","const TfLiteTensor* input_to_forget_weights ="],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2017-9763","code_chunks":["char * buf = grub_malloc (EXT2_BLOCK_SIZE (data));","if (!buf) {","return -1;","}","struct grub_ext4_extent_header *leaf;","struct grub_ext4_extent *ext;","int i;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp4_read_bin(fp4_t a, const uint8_t *bin, size_t len) {","if (len != 4 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":0}
{"cve":"CVE-2021-33910","code_chunks":["                \/* Truncate trailing slashes and skip leading slashes *\/","                delete_trailing_chars(p, \"\/\");","                s = unit_name_escape(skip_leading_chars(p, \"\/\"));","        }","        if (!s)","                return -ENOMEM;",""],"label":0}
{"cve":"CVE-2016-10161","code_chunks":["\t\t\tgoto yy18;","\t\t} else {","\t\t\tif (yych <= '-') goto yy55;","\t\t\tif (yych <= '.') goto yy60;","\t\t\tgoto yy18;","\t\t}","\t} else {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* value = GetInput(context, node, 2);","","const int num_rows = SizeOfDimension(value, 0);","const int row_bytes = value->bytes \/ num_rows;"],"label":1}
{"cve":"CVE-2023-39976","code_chunks":["qb_log(LOG_INFO, \"Message %d %d - %s\", lpc, lpc%600, buffer);","}","","qb_log_blackbox_write_to_file(\"blackbox.dump\");"],"label":1}
{"cve":"CVE-2016-10189","code_chunks":["\t\treturn FALSE;","\t}","}","","void imcb_file_canceled(struct im_connection *ic, file_transfer_t *file, char *reason)","{","\tbee_t *bee = ic->bee;"],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,255);","else","gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,65535);","fseek (ifp, data_offset, SEEK_SET);"],"label":1}
{"cve":"CVE-2023-2006","code_chunks":["","dead = __refcount_dec_and_test(&bundle->ref, &r);","","_debug(\"PUT B=%x %d\", d, r);","if (dead)","rxrpc_free_bundle(bundle);","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["                                                &float_weights_time));","    float_weights_time->type = kTfLiteFloat32;","        float_weights_time->allocation_type = kTfLiteArenaRwPersistent;","    if (!TfLiteIntArrayEqual(float_weights_time->dims, weights_time->dims)) {","      TfLiteIntArray* float_weights_time_size =","          TfLiteIntArrayCopy(weights_time->dims);","      TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2016-8649","code_chunks":["\tfor (fd = 0; fd <= 2; fd++) {","\t\tflags = fcntl(fd, F_GETFL);","\t\tif (flags < 0)","\t\t\tcontinue;","\t\tif (flags & FD_CLOEXEC)","\t\t\tif (fcntl(fd, F_SETFL, flags & ~FD_CLOEXEC) < 0)","\t\t\t\tSYSERROR(\"Unable to clear CLOEXEC from fd\");"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus MockCustom::Invoke(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = tflite::GetInput(context, node, 0);","const int32_t* input_data = input->data.i32;","const TfLiteTensor* weight = tflite::GetInput(context, node, 1);","const uint8_t* weight_data = weight->data.uint8;","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["const String& setSize(int len) {"],"label":1}
{"cve":"CVE-2022-1115","code_chunks":["        if (tiff_status == -1)","          {","            generic_info=RelinquishVirtualMemory(generic_info);","            break;","          }","        p+=(image->columns*image->rows)-1;","        for (y=0; y < (ssize_t) image->rows; y++)"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","const int resource_id = std::hash<std::string>{}(params->table_name);","","TfLiteTensor* resource_handle_tensor =","GetOutput(context, node, kResourceHandleTensor);"],"label":1}
{"cve":"CVE-2018-12559","code_chunks":["","    connectionNote->setVisible(!d.isLocalFile() && isConnected);","    sshFolder->setText(QString());","    sshHost->setText(QString());","    sshUser->setText(QString());","    fileFolder->setText(QString());",""],"label":0}
{"cve":"CVE-2022-2289","code_chunks":["    }","","                if (!curbuf->b_changed)","    {","\tchange_warning(0);","\tif (diff_buf_idx(curbuf) != idx_to)","\t{"],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["\t}","","\treturn 0;","","\tdpbp_close(dflt_mc_io, MC_CMD_NO_FLAGS, dflt_dpbp->dpbp_handle);","\tdpbp_destroy(dflt_mc_io,","\t\t     dflt_dprc_handle,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","auto* params = reinterpret_cast<TfLiteShapeParams*>(node->builtin_data);","switch (params->out_type) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    TF_LITE_ENSURE_TYPES_EQ(context, top_k->type, kTfLiteInt32);","    TF_LITE_ENSURE_EQ(context, NumElements(top_k), 1);","  const int32 k = *GetTensorData<int32_t>(top_k);","","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  const int num_dimensions = NumDimensions(input);"],"label":0}
{"cve":"CVE-2019-20911","code_chunks":["","#define LOG_POS","","int i, num_eed = obj->tio.object->num_eed;","for (i = 0; i < num_eed; i++)","{"],"label":1}
{"cve":"CVE-2017-11399","code_chunks":["skip_bits_long(&s->gb, offset);","}","","if (!nblocks || nblocks > INT_MAX) {","av_log(avctx, AV_LOG_ERROR, \"Invalid sample count: %\"PRIu32\".\\n\",","nblocks);","return AVERROR_INVALIDDATA;"],"label":1}
{"cve":"CVE-2019-20392","code_chunks":["    return ret;","","    if (*trg != target) {","        \/* target is duplication of the original target in different context,","         * free it due to the error *\/","        lyd_free_withsiblings(target);","    }"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","","\/* Reuse len to be the length of the utf-8 input string. *\/","len = expr_end - expr_start;","\/* Allocate 3 extra bytes: open paren, close paren, null byte. *\/","str = PyMem_RawMalloc(len + 3);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2022-40138","code_chunks":["if (!callable) {","return false;","}","","while (BoundFunction *b = dyn_vmcast<BoundFunction>(callable)) {","callable = b->getTarget(runtime);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["QuantizeMultiplier(real_multiplier, &data->multiplier, &exponent);","data->shift = exponent;","}","TfLiteTensor* temp_sum = GetTemporary(context, node, \/*index=*\/2);","if (!IsConstantTensor(op_context.axis)) {","SetTensorToDynamic(temp_sum);","return kTfLiteOk;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const auto* params =","reinterpret_cast<const TfLiteGatherParams*>(node->builtin_data);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* positions;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2018-11380","code_chunks":["}","#undef CASE","","for (i = 0; i < bin->nsects; i++) {","if ((bin->sects[i].flags & SECTION_TYPE) == stype) {","for (j=0, sym=-1; bin->sects[i].reserved1+j < bin->nindirectsyms; j++)"],"label":1}
{"cve":"CVE-2020-1898","code_chunks":["Array arr = Array::CreateDArray();","while (p < n && buf[p] != (char)(kCodePrefix | FB_CS_STOP)) {","Variant key;","int err = fb_compact_unserialize_from_buffer(key, buf, n, p);","if (err) {"],"label":1}
{"cve":"CVE-2023-25667","code_chunks":["const int height = max_frame_height;","const int channel = 3;","if (!expand_animations) target_num_frames = 1;","","uint8* const dstdata =","allocate_output(target_num_frames, width, height, channel);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\/* Convert r to affine coordinates. *\/","\t\ted_norm(r, r);","\t\tif (bn_sign(k) == RLC_NEG) {","\t\t\ted_neg(r, r);","\t\t}","\t}","\tRLC_CATCH_ANY {"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["cond_handle_(cond_handle),","body_handle_(body_handle),","done_(std::move(done)),","lib_(CHECK_NOTNULL(ctx_->function_library())) {","SetRunOptions(ctx_, &opts_, false \/* always_collect_stats *\/);","GetArgsFromContext(ctx, &args_, &loop_var_types_);","body_frame_ ="],"label":1}
{"cve":"CVE-2022-40138","code_chunks":["CallResult<HermesValue> Runtime::interpretFunctionImpl(","CodeBlock *newCodeBlock) {","newCodeBlock->lazyCompile(*this);","","#if defined(HERMES_MEMORY_INSTRUMENTATION) || !defined(NDEBUG)","const inst::Inst *ip = getCurrentIP();"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["GetCudnnConvolutionBackwardFilterAlgo(const CudnnHandle& cudnn,","const CudnnTensorDescriptor& input_nd,","const CudnnFilterDescriptor& filter,","const CudnnConvolutionDescriptor& conv,","const CudnnTensorDescriptor& output_nd,","bool specify_workspace_limit,"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["for (i = 0; i < w; i++) {","fp24_null(u[i]);","fp24_new(u[i]);","}","fp24_new(t);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","        node->temporaries->data[kAccumScratch] =","        scratch_tensor_index + kAccumScratch;","    TfLiteTensor* accum_scratch;","    TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, kAccumScratch,","                                                &accum_scratch));","    accum_scratch->type = kTfLiteInt32;"],"label":0}
{"cve":"CVE-2021-41202","code_chunks":["errors::InvalidArgument(","\"Requires start >= limit when delta < 0: \", start, \"\/\", limit));","}","int64_t size = (std::is_integral<T>::value","? ((std::abs(limit - start) + std::abs(delta) - 1) \/","std::abs(delta))"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["envoy::extensions::transport_sockets::tls::v3::CertificateValidationContext default_cvc;","default_cvc.set_allow_expired_certificate(true);","default_cvc.mutable_trusted_ca()->set_inline_bytes(\"fake trusted ca\");","default_cvc.add_match_subject_alt_names()->set_exact(\"first san\");","default_cvc.add_verify_certificate_hash(default_verify_certificate_hash);","envoy::extensions::transport_sockets::tls::v3::CertificateValidationContext merged_cvc =","default_cvc;"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["if(len<1) return;   string[len-1]=0;","if(len<3) return;   len = strnlen(string,len-1);","for(int i=len-1; i>=0; i--)","{","if(isspace(string[i]))","string[i]=0;"],"label":1}
{"cve":"CVE-2022-39244","code_chunks":["","    if (!pj_scan_is_eof(scanner) && PJ_SCAN_IS_PROBABLY_SPACE(*s) &&","\tscanner->skip_ws)","    {","\tpj_scan_skip_whitespace(scanner);","    }","}"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","","  int batches = input->dims->data[0];","  int height = input->dims->data[1];","  int width = input->dims->data[2];","  int channels_out = input->dims->data[3];",""],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","isinstance = PyObject_IsInstance(obj, (PyObject*)UnaryOp_type);","if (isinstance == -1) {","return 1;","}","if (isinstance) {"],"label":1}
{"cve":"CVE-2018-9336","code_chunks":["DeleteDNS(AF_INET6, item->data);","break;","","interface_data = (block_dns_data_t*)(item->data);","delete_block_dns_filters(interface_data->engine);","if (interface_data->metric_v4 >= 0)"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","const int num_elements = NumElements(input);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fb_read_str(fb_t a, const char *str, int len, int radix) {","bn_t t;","","bn_null(t);"],"label":1}
{"cve":"CVE-2019-17177","code_chunks":["\t\t\tfree(tmp);","\t\ttmp = tmp2;","\t}","","\tif (NULL == tmp)","\t{","\t\tfprintf(stderr,  \"Could not allocate string buffer.\\n\");"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["                       padding->name);","    return false;","  }","  const int32_t* padding_data = GetTensorData<int32_t>(padding);","  if (!(padding_data[0] == 0 && padding_data[1] == 0)) {","    TF_LITE_KERNEL_LOG(","        context, \"%s: Padding for batch dimension is not supported in PAD.\","],"label":0}
{"cve":"CVE-2022-0521","code_chunks":["R_API RBinJavaAttrInfo *r_bin_java_synthetic_attr_new(RBinJavaObj *bin, ut8 *buffer, ut64 sz, ut64 buf_offset) {","ut64 offset = 0;","RBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);","if (!attr) {","return NULL;","}"],"label":1}
{"cve":"CVE-2022-24786","code_chunks":["unsigned nack_cnt,","const pjmedia_rtcp_fb_nack nack[])","{","pjmedia_rtcp_fb_common *hdr;","pj_uint8_t *p;","unsigned len, i;",""],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2022-3213","code_chunks":["              if (image->colorspace == CMYKColorspace)","                quantum_type=BlackQuantum;","              break;","            }","            case 4: quantum_type=AlphaQuantum; break;","            default: break;","          }"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp6_read_bin(fp6_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"CVE-2018-16643","code_chunks":["    filename);","  (void) FormatLocaleString(message,MagickPathExtent,\"%lux%lu\",width,height);","  (void) CloneString(&read_info->size,message);","  (void) FormatLocaleString(message,MagickPathExtent,\"%lu\",density);","  (void) CloneString(&read_info->density,message);","  read_info->orientation=(OrientationType) orientation;","  image=ReadImage(read_info,exception);"],"label":0}
{"cve":"CVE-2016-3134","code_chunks":["{","static const struct ip6t_ip6 uncond;","","return memcmp(ipv6, &uncond, sizeof(uncond)) == 0;","}",""],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\t\t{","\t\t\t\tWLog_ERR(TAG, \"rdp_decrypt failed\");","\t\t\t\treturn FALSE;","\t\t\t}","\t\t}","\t}",""],"label":0}
{"cve":"CVE-2019-20393","code_chunks":["break;","","","{ if (yang_read_extcomplex_str(trg, ext_instance, \"contact\", ext_name, s,","0, LY_STMT_CONTACT)) {","YYABORT;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteIntArray* input_dims = input->dims;","int input_dims_size = input_dims->size;"],"label":0}
{"cve":"CVE-2020-35538","code_chunks":["\/*"," * Finish up after an output pass in buffered-image mode."," *"," * Returns FALSE if suspended.  The return value need be inspected only if"," * a suspending data source is used."," *\/",""],"label":0}
{"cve":"CVE-2018-17182","code_chunks":["{","\tpr_emerg(\"mm %px mmap %px seqnum %llu task_size %lu\\n\"","#ifdef CONFIG_MMU","\t\t\"get_unmapped_area %px\\n\"","#endif","\t\t\"mmap_base %lu mmap_legacy_base %lu highest_vm_end %lu\\n\"","\t\t\"pgd %px mm_users %d mm_count %d pgtables_bytes %lu map_count %d\\n\""],"label":0}
{"cve":"CVE-2021-24025","code_chunks":["assertx(isStringType(type(file_name)));","strncpy(frame->file_name,","val(file_name).pstr->data(),","std::min(val(file_name).pstr->size(), strobelight::kFileNameMax));","frame->file_name[strobelight::kFileNameMax - 1] = '\\0';","}",""],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["if (inputFlags & TS_INPUT_FLAG_MOUSE_HWHEEL)","settings->HasHorizontalWheel = TRUE;","","if (inputFlags & INPUT_FLAG_UNICODE)","settings->UnicodeInput = TRUE;",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["const uint8_t *msg, int msg_len, const bn_t sk, const ec_t pk) {","size_t len;","uint8_t *buf = NULL, *buf_i, hash[RLC_MD_LEN];","bn_t n, y;","ec_t t;","int result = RLC_OK;"],"label":0}
{"cve":"CVE-2020-11046","code_chunks":["{","WINPR_UNUSED(update);","return Stream_SafeSeek(s, 2); \/* pad2Octets (2 bytes) *\/","\/**","* The Synchronize Update is an artifact from the","* T.128 protocol and should be ignored."],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["GetInput(context, node, kInputTensorClassPredictions);","const int num_boxes = input_box_encodings->dims->data[1];","const int num_classes = op_data->num_classes;","TF_LITE_ENSURE_EQ(context, input_class_predictions->dims->data[0],"],"label":1}
{"cve":"CVE-2020-36315","code_chunks":["\t\t\t\t\t*p_len = 1;","\t\t\t\t\tdo {","\t\t\t\t\t\t(*p_len)++;","\t\t\t\t\t\tm_len--;","\t\t\t\t\t\tbn_rsh(t, m, 8 * m_len);","\t\t\t\t\t\tpad = (uint8_t)t->dp[0];","\t\t\t\t\t} while (pad == 0 && m_len > 0);"],"label":0}
{"cve":"CVE-2015-8631","code_chunks":["{","static generic_ret              ret;","char                            *prime_arg;","gss_buffer_desc                 client_name,","service_name;"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["{","time_t t;","char buf[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss UTC\")];","","if (len != 4)","goto invalid;"],"label":0}
{"cve":"CVE-2018-20762","code_chunks":["AVFormatContext *ctx;","AVOutputFormat *fmt_out;","Bool ret = GF_FALSE;","char *ext, szName[1024], szExt[20];","const char *szExtList;","FFDemux *ffd;","if (!plug || !url)"],"label":0}
{"cve":"CVE-2017-16818","code_chunks":["","    return \"s3:PutObjectTagging\";","","    return \"s3:PutObjectVersionTagging\";","","    return \"s3:GetObjectTagging\";",""],"label":0}
{"cve":"CVE-2021-4110","code_chunks":["if (a->body.irep) {","\/* already initialized proc *\/","return;","}","a->flags = b->flags;","a->body = b->body;","a->upper = b->upper;"],"label":0}
{"cve":"CVE-2016-7525","code_chunks":["static inline size_t GetPSDRowSize(Image *image)","{","if (image->depth == 1)","return((image->columns+7)\/8);","else","return(image->columns*GetPSDPacketSize(image));","}"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["BYTE suppressOutputSupport;","","if (length < 24)","return FALSE;","","WLog_INFO(TAG, \"GeneralCapabilitySet (length %\" PRIu16 \"):\", length);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_window_activation_capability_set(wStream* s, rdpSettings* settings)","{","WINPR_UNUSED(settings);","if (Stream_GetRemainingLength(s) < 8)","return FALSE;","","Stream_Seek_UINT16(s); \/* helpKeyFlag (2 bytes) *\/"],"label":0}
{"cve":"CVE-2017-12662","code_chunks":["        (void) ThrowMagickException(exception,GetMagickModule(),","          MissingDelegateError,\"DelegateLibrarySupportNotBuiltIn\",\"`%s' (JP2)\",","          image->filename);","        break;","      }","#endif","#if !defined(MAGICKCORE_ZLIB_DELEGATE)"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (NCH(ch) == 1)","nargs++;","else if (TYPE(CHILD(ch, 1)) == comp_for)","ngens++;","else if (TYPE(CHILD(ch, 0)) == STAR)","nargs++;"],"label":1}
{"cve":"PYSEC-2022-103","code_chunks":["client_options.set_intra_op_parallelism_threads(","device->tensorflow_cpu_worker_threads()->num_threads);","","string allowed_gpus ="],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["      *(*subgraphs)[active_branch_subgraph_index];","  for (int i = 0; i < active_branch_subgraph.inputs().size(); ++i) {","    const TfLiteTensor* input;","    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, i + 1, &input));","    TfLiteTensor* subgraph_input =","        active_branch_subgraph.tensor(active_branch_subgraph.inputs()[i]);","    TF_LITE_ENSURE_EQ(context, input->bytes, subgraph_input->bytes);"],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["","    \/* Exactly equal? *\/","    if (pj_stricmp(t1, t2) == 0)","\treturn PJ_SUCCESS;","","    \/* Check if boths are RTP\/AVP based *\/","    t1_proto = pjmedia_sdp_transport_get_proto(t1);"],"label":0}
{"cve":"PYSEC-2021-507","code_chunks":["for (int index = out_start; index < out_end; ++index) {","int input_backprop_index = out_arg_max_flat(index);","FastBoundsCheck(input_backprop_index - in_start, in_end - in_start);","input_backprop_flat(input_backprop_index) += out_backprop_flat(index);","}","}","};"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["GetTemporary(context, node, kBwCellStateQuantized);","bw_cell_state_quantized->type = fw_input_to_output_weights->type;","bw_cell_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(bw_cell_state_quantized->dims,"],"label":1}
{"cve":"CVE-2021-3772","code_chunks":["\t\t\/* Skip the chunk.  *\/","\t\treturn SCTP_DISPOSITION_DISCARD;","\t\t\/* Generate an ERROR chunk as response. *\/","\t\thdr = unk_chunk->chunk_hdr;","\t\terr_chunk = sctp_make_op_error(asoc, unk_chunk,","\t\t\t\t\t       SCTP_ERROR_UNKNOWN_CHUNK, hdr,","\t\t\t\t\t       SCTP_PAD4(ntohs(hdr->length)),"],"label":0}
{"cve":"CVE-2022-1237","code_chunks":["return NULL;","}","","ut16 *modref = malloc (bin->ne_header->ModRefs * sizeof (ut16));","if (!modref) {","return NULL;","}"],"label":1}
{"cve":"PYSEC-2020-135","code_chunks":["int previous_segment_id = -1;","for (int i = 0; i < segment_id_size; i++) {","const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];","if (i == 0) {","TF_LITE_ENSURE_EQ(context, current_segment_id, 0);","} else {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","const float* input_ptr = GetTensorData<float>(input);","TfLiteTensor* quantized_input_tensor;","TF_LITE_ENSURE_OK(context,","GetTemporarySafe(context, node, data->input_quantized_index,","&quantized_input_tensor));"],"label":0}
{"cve":"PYSEC-2020-293","code_chunks":["int previous_segment_id = -1;","for (int i = 0; i < segment_id_size; i++) {","const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];","if (i == 0) {","TF_LITE_ENSURE_EQ(context, current_segment_id, 0);","} else {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, 0);","","switch (input->type) {","return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);"],"label":1}
{"cve":"CVE-2018-12562","code_chunks":["static inline bool isMountable(const RemoteFsDevice::Details &d)","{","return RemoteFsDevice::constSshfsProtocol==d.url.scheme();","}","","QList<Device *> RemoteFsDevice::loadAll(MusicLibraryModel *m)"],"label":0}
{"cve":"CVE-2023-28101","code_chunks":["    return;","","  qsort (options, g_strv_length (options), sizeof (const char *), cmpstringp);","","  if (old_metadata)","    old_options = g_key_file_get_string_list (old_metadata, FLATPAK_METADATA_GROUP_CONTEXT, group, NULL, NULL);",""],"label":0}
{"cve":"CVE-2018-14882","code_chunks":["ND_PRINT((ndo,\" (\"));\t\/*)*\/","switch (EXTRACT_16BITS(&ni6->ni_qtype)) {","ND_PRINT((ndo,\"noop\"));","break;","ND_PRINT((ndo,\"supported qtypes\"));","i = EXTRACT_16BITS(&ni6->ni_flags);"],"label":1}
{"cve":"CVE-2023-46728","code_chunks":["","ACLFilledChecklist ch(nullptr, request, nullptr);","ch.dst_peer_name = conn->getPeer() ? conn->getPeer()->name : nullptr;","ch.dst_addr = conn->remote;","",""],"label":1}
{"cve":"CVE-2020-26215","code_chunks":["t import string_types","","import notebook","from no"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2022-35973","code_chunks":["AddInputFromArray<float>(TensorShape({1}), {1.0f});","AddInputFromArray<float>(TensorShape({1}), {256.0f});","TF_ASSERT_OK(RunOpKernel());","Tensor expected(allocator(), DT_QINT32, TensorShape({a_cols, b_cols}));","test::FillValues<qint32>(&expected, {-1});"],"label":1}
{"cve":"CVE-2021-32613","code_chunks":["\t\tret = get_dict_object (buffer);","\t\tbreak;","\t\tret = get_set_object (buffer);","\t\tbreak;","\t\tret = R_NEW0 (pyc_object);","\t\tbreak;","\t\teprintf (\"Get not implemented for type 0x%x\\n\", type);"],"label":0}
{"cve":"CVE-2016-8649","code_chunks":["status = 2;","ret = lxc_write_nointr(ipc_sockets[0], &status, sizeof(status));","if (ret <= 0) {","ERROR(\"error using IPC to notify attached process for initialization (2)\");","goto cleanup_error;","}",""],"label":1}
{"cve":"CVE-2020-15193","code_chunks":["return nullptr;","}","","auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);","if (!status->status.ok()) {","return nullptr;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["reinterpret_cast<TfLiteUnpackParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","switch (input->type) {","case kTfLiteFloat32: {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["map_fn(PT, t);                                            \\","\/* compare sign of y and sign of t; fix if necessary *\/   \\","neg = neg != fp_sgn0(PT->y, k);                             \\","fp_neg(t, PT->y);                                          \\","dv_copy_cond(PT->y, t, RLC_FP_DIGS, neg);                  \\"],"label":1}
{"cve":"CVE-2021-33910","code_chunks":["_cleanup_free_ char *p = NULL;","char *s;","","assert(f);","assert(ret);",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* temp_sum = GetTemporary(context, node, \/*index=*\/2);","if (IsDynamicTensor(op_context.output)) {","TF_LITE_ENSURE_OK(context,","ResizeTempAxis(context, &op_context, resolved_axis));"],"label":1}
{"cve":"CVE-2016-10093","code_chunks":["tdata_t tilebuf;","uint32 imagew = TIFFScanlineSize(in);","uint32 tilew  = TIFFTileRowSize(in);","int64 iskew = (int64)imagew - (int64)tilew;","uint8* bufp = (uint8*) buf;","uint32 tw, tl;","uint32 row;"],"label":0}
{"cve":"CVE-2022-1586","code_chunks":["{","SLJIT_ASSERT(*cc == XCL_PROP || *cc == XCL_NOTPROP);","cc++;","if (*cc == PT_CLIST && *cc == XCL_PROP)","{","other_cases = PRIV(ucd_caseless_sets) + cc[1];","while (*other_cases != NOTACHAR)"],"label":1}
{"cve":"CVE-2022-0173","code_chunks":["\t}","\tif (r_io_submap_from (bd) < r_io_submap_from (sm) &&","\t\tr_io_submap_to (sm) < r_io_submap_to (bd)) {","\t\t\t\tRIOSubMap *bdsm = R_NEWCOPY (RIOSubMap, bd);","\t\tif (!bdsm) {","\t\t\tfree (sm);","\t\t\tfree (mapref);"],"label":0}
{"cve":"CVE-2018-5810","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[] = {0, 0};","if(width > 2064) return 0.f;","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":0}
{"cve":"CVE-2022-3299","code_chunks":["response->h.uri = ogs_strdup(url);","ogs_assert(response->h.uri);","","ogs_debug(\"[%d:%s] %s\",","response->status, response->h.method, response->h.uri);","","if (conn->memory) {"],"label":1}
{"cve":"CVE-2016-6874","code_chunks":["TypedValue HHVM_FUNCTION(array_intersect_key,","                         const Variant& container1,","                         const Variant& container2,","                         const Array& args \/* = null array *\/) {","  ARRAY_INTERSECT_PRELUDE()","      if (!moreThanTwo && isArrayType(c1.m_type) && isArrayType(c2.m_type)) {","    auto ad2 = c2.m_data.parr;"],"label":0}
{"cve":"CVE-2021-41136","code_chunks":["goto st22;","if ( ++p == pe )","goto _test_eof22;","#line 530 \"ext\/puma_http11\/http11_parser.c\"","switch( (*p) ) {","case 43: goto st22;","case 58: goto st23;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    scaling_factors->type = kTfLiteFloat32;","    scaling_factors->allocation_type = kTfLiteArenaRw;","    int scaling_dims[1] = {batch_size};","    if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {","      TfLiteIntArray* scaling_factors_size = TfLiteIntArrayCreate(1);","      scaling_factors_size->data[0] = batch_size;","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, scaling_factors,"],"label":0}
{"cve":"CVE-2020-1911","code_chunks":["      if (LLVM_UNLIKELY(desc.flags.accessor || !desc.flags.writable)) {","        return false;","      }","","      assert(","          !receiverHandle->isHostObject() && !receiverHandle->isProxyObject() &&","          \"getOwnNamedDescriptor never sets hostObject or proxyObject flags\");"],"label":0}
{"cve":"CVE-2020-14147","code_chunks":["static int getnum (lua_State *L, const char **fmt, int df) {","  if (!isdigit(**fmt))  \/* no number? *\/","    return df;  \/* return default value *\/","  else {","    int a = 0;","    do {","      if (a > (INT_MAX \/ 10) || a * 10 > (INT_MAX - (**fmt - '0')))"],"label":0}
{"cve":"CVE-2018-20406","code_chunks":["{","size_t i;","size_t perturb;","size_t mask = (size_t)self->mt_mask;","PyMemoEntry *table = self->mt_table;","PyMemoEntry *entry;","Py_hash_t hash = (Py_hash_t)key >> 3;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(values, i, val);","            }","            Py_CLEAR(tmp);","        }"],"label":0}
{"cve":"CVE-2022-33099","code_chunks":["va_start(argp, fmt);","msg = luaO_pushvfstring(L, fmt, argp);  \/* format message *\/","va_end(argp);","if (isLua(ci))  \/* if Lua function, add source:line information *\/","luaG_addinfo(L, msg, ci_func(ci)->p->source, getcurrentline(ci));","luaG_errormsg(L);","}"],"label":1}
{"cve":"PYSEC-2020-256","code_chunks":["GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,","const absl::Span<const int>& seq_lengths, bool time_major,","cudnnDataType_t data_type) {","CHECK_GT(max_seq_length, 0);","int dims[] = {batch_size, data_size, 1};","int strides[] = {dims[1] * dims[2], dims[2], 1};","TensorDescriptor tensor_desc = CreateTensorDescriptor();"],"label":1}
{"cve":"CVE-2022-4254","code_chunks":["                ret = 0;","                goto done;","            }","        }","    }","","    ret = ENOENT;"],"label":0}
{"cve":"CVE-2018-1000118","code_chunks":["    if (iter != std::end(kBlacklist) && switch_name == *iter) {","      return true;","    }","  }","","  return false;","}"],"label":0}
{"cve":"CVE-2021-32439","code_chunks":["GF_Err stbl_AddDTS(GF_SampleTableBox *stbl, u64 DTS, u32 *sampleNumber, u32 LastAUDefDuration, u32 nb_packed_samples)","{","u32 i, j, sampNum;","u64 *DTSs, curDTS;"],"label":1}
{"cve":"CVE-2024-1433","code_chunks":["    QPluginLoader loader(\"plasmacalendarplugins\/\" + QDir::cleanPath(pluginId));","","    if (!loader.load()) {","        qWarning() << \"Could not create Plasma Calendar Plugin: \" << pluginId;","        qWarning() << loader.errorString();","        return;","    }"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["void MainWindow::checkFingerprint(const QString& line)","{","QRegExp fingerprintRegex(\".*server fingerprint \\\\(SHA1\\\\): ([A-F0-9:]+) \\\\(SHA256\\\\): ([A-F0-9:]+)\");","if (!fingerprintRegex.exactMatch(line)) {","return;","}"],"label":1}
{"cve":"CVE-2022-21732","code_chunks":["int64_t num_threads = 0;","OP_REQUIRES_OK(","ctx, ParseScalarArgument<int64_t>(ctx, \"num_threads\", &num_threads));","OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads));","*output = new Dataset(ctx, input, num_threads);","}",""],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["        \/*labelLengths=*\/labels_lengths_data.data(),","        \/*inputLengths=*\/input_lengths_data.data(),","        \/*algo=*\/algo,","        \/*ctcLossDesc=*\/cudnn_ctc_loss_desc.handle(),","        \/*sizeInBytes=*\/&workspace_size_in_bytes));","  }","  *ctc_loss_algo_id = algo;"],"label":0}
{"cve":"CVE-2018-20179","code_chunks":["\t}","\ttotal_pro = 1;","\tbytes_pro = process_plane(input, width, height, output + 3, size - total_pro);","\ttotal_pro += bytes_pro;","\tinput += bytes_pro;","\tbytes_pro = process_plane(input, width, height, output + 2, size - total_pro);","\ttotal_pro += bytes_pro;"],"label":0}
{"cve":"CVE-2020-9432","code_chunks":["{","  {\"parse\",       openssl_x509_parse},","  {\"export\",      openssl_x509_export},","  {\"check\",       openssl_x509_check},","#if OPENSSL_VERSION_NUMBER > 0x10002000L","  {\"check_host\",  openssl_x509_check_host},","  {\"check_email\", openssl_x509_check_email},"],"label":0}
{"cve":"CVE-2019-1010247","code_chunks":["\t}","","\treturn oidc_handle_unauthenticated_user(r, c);","}","","\/*"," * main routine: handle \"mixed\" OIDC\/OAuth authentication"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["arguments_ty o = (arguments_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_RETURN_NONE;","}","","result = PyType_GenericNew(arguments_type, NULL, NULL);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","node->temporaries->data[kAccumScratch] =","scratch_tensor_index + kAccumScratch;","TfLiteTensor* accum_scratch = GetTemporary(context, node, kAccumScratch);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {n_cell, n_batch};"],"label":1}
{"cve":"CVE-2019-13454","code_chunks":["Image","*i;","","assert((*images) != (const Image *) NULL);","assert((*images)->signature == MagickCoreSignature);","if ((*images)->debug != MagickFalse)"],"label":0}
{"cve":"CVE-2017-12678","code_chunks":["    { \"CRA\", \"AENC\" },","    { \"ETC\", \"ETCO\" },","    { \"GEO\", \"GEOB\" },","    { \"IPL\", \"TIPL\" },","    { \"MCI\", \"MCDI\" },","    { \"MLL\", \"MLLT\" },","    { \"POP\", \"POPM\" },"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["*out = NULL;","return 0;","}","isinstance = PyObject_IsInstance(obj, (PyObject*)Slice_type);","if (isinstance == -1) {","return 1;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","","return context->ResizeTensor(context, output,"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;"],"label":1}
{"cve":"CVE-2018-12559","code_chunks":["            for (const QString &ap: askPassList) {","                askPass=Utils::findExe(ap);","                if (!askPass.isEmpty()) {","                    break;","                }","            }",""],"label":0}
{"cve":"CVE-2020-1712","code_chunks":["if (!q)","return;","","sd_bus_slot_unref(q->slot);","","if (q->registry && q->request)"],"label":0}
{"cve":"CVE-2017-16909","code_chunks":["      thumb_length = len;","    }","    if (type == 0x1818)","    {","      shutter = powf64(2.0f, -int_to_float((get4(), get4())));","      aperture = powf64(2.0f, int_to_float(get4()) \/ 2);","#ifdef LIBRAW_LIBRARY_BUILD"],"label":0}
{"cve":"CVE-2022-24786","code_chunks":["","    return PJ_SUCCESS;","}","","","\/*"," * Check whether the specified payload contains RTCP feedback Reference"],"label":0}
{"cve":"CVE-2022-35970","code_chunks":["","float input_min = context->input(1).flat<float>()(0);","float input_max = context->input(2).flat<float>()(0);","float input_scale = (input_max - input_min) \/ 255.0f;","","OP_REQUIRES(context, input_min < input_max,"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus ResizeOutputTensors(TfLiteContext* context, TfLiteNode* node,","                                 const TfLiteTensor* input,","                                 const TfLiteTensor* size_splits,","                                 const TfLiteTensor* axis) {","  int axis_value = GetTensorData<int>(axis)[0];","  if (axis_value < 0) {","    axis_value += NumDimensions(input);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["STATUS.SetPayload(PAYLOAD_KEY, PAYLOAD_VALUE);                         \\"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tuint8_t out[RLC_BN_BITS \/ 8 + 1];","\tsize_t out_len;","\tdig_t prime = 0xFB;","","\tbdpe_null(pub);","\tbdpe_null(prv);",""],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["","    \/* Create certificate *\/","    cert = X509_new();","    if (!cert) goto on_error;","","    \/* Set version to 3 (2 = x509v3) *\/","    X509_set_version(cert, 2);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ed_read_bin(ed_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\t\t\t\t\t\treturn FALSE;","","\t\t\t\t\t\tif (colConvBits != 1)","\t\t\t\t\t\t\treturn FALSE;","","\t\t\t\t\t\tif (transformBits != 1)","\t\t\t\t\t\t\treturn FALSE;"],"label":0}
{"cve":"CVE-2018-10861","code_chunks":["      pending_inc.old_pg_upmap_items.insert(p.first);","    }","  }","    {","    auto it = pending_inc.new_pg_upmap_items.begin();","    while (it != pending_inc.new_pg_upmap_items.end()) {","      if (it->first.pool() == pool) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static void ep_mul_reg_imp(ep_t r, const ep_t p, const bn_t k) {","bn_t _k;","int i, j, l, n;","int8_t s, reg[1 + RLC_CEIL(RLC_FP_BITS + 1, EP_WIDTH - 1)];","ep_t t[1 << (EP_WIDTH - 2)], u, v;",""],"label":1}
{"cve":"CVE-2020-5209","code_chunks":["    return FALSE;","}","","void","sethanguphandler(handler)","void FDECL((*handler), (int));","{"],"label":0}
{"cve":"CVE-2019-19054","code_chunks":["return -ENOMEM;","","spin_lock_init(&state->rx_kfifo_lock);","if (kfifo_alloc(&state->rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL))","return -ENOMEM;","","state->dev = dev;"],"label":1}
{"cve":"CVE-2023-28095","code_chunks":["\t} else return 0;","","\t\/* string with request's characteristic value ... use it ... *\/","\tif (char_v) {","\t\tif (memcpy(begin,char_v,MD5_LEN)) {","\t\t\tbegin+=MD5_LEN; size-=MD5_LEN;","\t\t} else return 0;"],"label":0}
{"cve":"PYSEC-2021-811","code_chunks":["TensorSlice slice;","  {","    mutex_lock l(mu_);","    const TensorSliceSet* tss = gtl::FindPtrOrNull(tensors_, name);","    if (tss == nullptr) {","      return errors::NotFound(name, \" not found in checkpoint file\");","    }"],"label":0}
{"cve":"CVE-2019-17178","code_chunks":["dst->data = realloc(newItems, newItems->size);","","if (!dst->data)","{"],"label":1}
{"cve":"CVE-2021-32845","code_chunks":["}","","while (vq_has_descs(vq)) {","vq_getchain(vq, &idx, &iov, 1, NULL);","","len = (int) read(sc->vrsc_fd, iov.iov_base, iov.iov_len);",""],"label":1}
{"cve":"PYSEC-2020-286","code_chunks":["if (node_value.has_tensor()) {","const PartialTensorShape node_shape(node_value.tensor().tensor_shape());","if (node_shape.num_elements() < 0) {","return errors::FailedPrecondition(","\"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\",","node.op(), \"\\\") which initializes from a tensor with \","],"label":1}
{"cve":"CVE-2016-9843","code_chunks":["    do {","        \/* apply zeros operator for this bit of len2 *\/","        gf2_matrix_square(even, odd);","        if (len2 & 1)","            crc1 = gf2_matrix_times(even, crc1);","        len2 >>= 1;",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input_resource_id_tensor =","GetInput(context, node, kInputResourceIdTensor);","int resource_id = input_resource_id_tensor->data.i32[0];","","TfLiteTensor* output_tensor = GetOutput(context, node, kOutputTensor);","auto* output_data = GetTensorData<std::int64_t>(output_tensor);"],"label":1}
{"cve":"CVE-2019-3556","code_chunks":["char *string_crypt(const char *key, const char *salt) {","assertx(key);","assertx(salt);","","char random_salt[12];","if (!*salt) {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE(context, seq_lengths[i] <= SizeOfDimension(input, seq_dim));","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","reference_ops::ReverseSequence<T, TS>(","seq_lengths, seq_dim, batch_dim, GetTensorShape(input),"],"label":1}
{"cve":"CVE-2022-1052","code_chunks":["\t\t\t\t\t\t\t\tevent_details.addr_div = addr_div;","\t\t\t\t\t\t\t\tevent_details.diversity = diversity;","","\t\t\t\t\t\t\t\tcarry_on = callback (context, (RFixupEventDetails *) &event_details);","\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tcase R_FIXUP_EVENT_REBASE: {"],"label":0}
{"cve":"CVE-2021-44078","code_chunks":["","QLIST_FOREACH(block, &uc->ram_list.blocks, next)","{","if (block->offset <= mr->addr &&","block->used_length >= (mr->end - mr->addr)) {","break;","}"],"label":1}
{"cve":"CVE-2018-5800","code_chunks":["      float sq3x=powf(x1*x1*x2,1.0f\/3.0f);","      float B = (y2-y1+shift*(3*x1-3.0f*sq3x)) \/ (x2+2.0f*x1-3.0f*sq3x);","      float A = (shift - B)*3.0f*powf(x1*x1,1.0f\/3.0f);","      float CC = y2 - A*powf(x2,1.0f\/3.0f)-B*x2;","      for(int i=0;i<=TBLN;i++)","        {","          float X = (float)i;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["return EvalFloat(input, input_weights, recurrent_weights, bias, params,","hidden_state, output);","case kTfLiteInt8: {","TfLiteTensor* input_quantized = GetTemporary(context, node, 0);"],"label":1}
{"cve":"PYSEC-2022-286","code_chunks":["from octoprint.util import sv, time_this","","# ~~ GCODE file handling","","_file_cache = {}","_file_cache_mutex = threading.RLock()"],"label":0}
{"cve":"CVE-2018-20178","code_chunks":["\t\t\tif (!cssp_send_tsrequest(NULL, NULL, &blob))","\t\t\t\tgoto bail_out;","","\t\t\tcontext_established = 1;","\t\t}","","\t\ti++;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["        }","        *out = Subscript(value, slice, ctx, lineno, col_offset, arena);","        if (*out == NULL) goto failed;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)Starred_type);","    if (isinstance == -1) {"],"label":0}
{"cve":"CVE-2022-31002","code_chunks":["continue;","}","","h1 = s[i + 1], h2 = s[i + 2];","","if (!IS_HEX(h1) || !IS_HEX(h2)) {","*d = '\\0';"],"label":1}
{"cve":"CVE-2022-3299","code_chunks":["\/* HEADERS or DATA frame with +END_STREAM flag *\/","if (frame->hd.flags & NGHTTP2_FLAG_END_STREAM) {","","ogs_debug(\"[%s] %s\", request->h.method, request->h.uri);","","if (request->http.content_length && request->http.content) {"],"label":1}
{"cve":"CVE-2021-3770","code_chunks":["tabstop_set(p_vts, &buf->b_p_vts_array);","else","buf->b_p_vts_array = NULL;","#endif"],"label":1}
{"cve":"CVE-2023-30847","code_chunks":["     However, currently h2o_http1client_connect doesn't provide an interface to enforce estabilishing a new connection. In other","     words, there is a chance that we would use a pool connection here.","","     OTOH, the probability of seeing such issue is rare; it would only happen if the same destination identified by its host:port is","     accessed in both ways (i.e. in one path with use_proxy_protocol set and in the other path without).","","     So I leave this as it is for the time being."],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int cp_sokaka_key(uint8_t *key, size_t key_len, const char *id1,","const sokaka_t k, const char *id2) {","int len1 = strlen(id1), len2 = strlen(id2);","int size, first = 0, result = RLC_OK;","uint8_t *buf;","g1_t p;","g2_t q;"],"label":1}
{"cve":"PYSEC-2022-73","code_chunks":["      return false;","    }","    if (!ps[i].FromProto(proto).ok()) {","      return false;","    }","  }","  return true;"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["    size_t dynamic_shared_memory_bytes) {","  ScopedActivateContext activation(context);","","  int max_blocks;","  RETURN_IF_CUDA_RES_ERROR(","      cuOccupancyMaxActiveBlocksPerMultiprocessor(","          &max_blocks, kernel, threads_per_block, dynamic_shared_memory_bytes),"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["BYTE bitmapCacheV3CodecId;","","WINPR_UNUSED(settings);","if (length < 5)","return FALSE;",""],"label":1}
{"cve":"CVE-2022-1451","code_chunks":["R_API ut8 *r_bin_java_get_attr_buf(RBinJavaObj *bin, ut64 sz, const ut64 offset, const ut8 *buf, const ut64 len) {","int pending = len - offset;","const ut8 *a_buf = offset + buf;","ut8 *attr_buf = (ut8 *) calloc (pending + 1, 1);","if (!attr_buf) {","eprintf (\"Unable to allocate enough bytes (0x%04\"PFMT64x","\") to read in the attribute.\\n\", sz);"],"label":0}
{"cve":"CVE-2021-3772","code_chunks":["*\/","pkt = sctp_abort_pkt_new(net, ep, NULL, init, errhdr, len);","","if (!pkt)","goto out;","sctp_add_cmd_sf(commands, SCTP_CMD_SEND_PKT, SCTP_PACKET(pkt));"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\tif (!rdp_read_bitmap_codec_guid(s, &codecGuid)) \/* codecGuid (16 bytes) *\/","\t\t\treturn FALSE;","\t\tif (Stream_GetRemainingLength(s) < 3)","\t\t\treturn FALSE;","\t\tStream_Read_UINT8(s, codecId);             \/* codecId (1 byte) *\/","\t\tWLog_INFO(TAG, \"\\tcodecGuid: 0x\");","\t\trdp_print_bitmap_codec_guid(&codecGuid);"],"label":0}
{"cve":"CVE-2021-35939","code_chunks":["\t    rc = 0;","    }","    if (_fsm_debug)","\trpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%04o) %s\\n\", __func__,","\t       path, (unsigned)(mode & 07777),","\t       (rc < 0 ? strerror(errno) : \"\"));","    if (rc < 0)\trc = RPMERR_CHMOD_FAILED;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["          TF_LITE_ENSURE_STATUS(context->ResizeTensor(","              context, output, TfLiteIntArrayCopy(input1->dims)));","          return kTfLiteOk;","        };","      }","","      return reg;"],"label":0}
{"cve":"CVE-2020-36316","code_chunks":["\/* Make room for the real message. *\/","bn_lsh(m, m, m_len * 8);","break;","m_len = k_len - 1;","bn_rsh(t, m, 8 * m_len);","if (!bn_is_zero(t)) {"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["\"Mismatch between cudnn conv and algorithm descriptors.\");","}","","size_t size_in_bytes;","if (algorithm_desc.workspace_size()) {","size_in_bytes = *algorithm_desc.workspace_size();"],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["user_matched = m->negated ? DENY : ALLOW;","break;","}","if (user_matched != UNSPEC) {","if (matching_user != NULL && m->type != ALIAS)","*matching_user = m;","break;"],"label":1}
{"cve":"CVE-2021-32844","code_chunks":["max = vc->vc_cfgsize ? vc->vc_cfgsize : 0x100000000;","if ((newoff + ((unsigned) size)) > max)","goto bad;","error = (*vc->vc_cfgwrite)(DEV_SOFTC(vs), ((int) newoff), size,"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* axis_tensor;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kAxisTensor, &axis_tensor));","int axis = GetTensorData<int32_t>(axis_tensor)[0];"],"label":0}
{"cve":"CVE-2018-17182","code_chunks":["void dump_mm(const struct mm_struct *mm)","{","pr_emerg(\"mm %px mmap %px seqnum %d task_size %lu\\n\"","#ifdef CONFIG_MMU","\"get_unmapped_area %px\\n\"","#endif"],"label":1}
{"cve":"CVE-2021-46463","code_chunks":["    context->values->start[context->index] = *njs_arg(args, nargs, 1);","","    if (--(*context->remaining_elements) == 0) {","        njs_mp_free(vm->mem_pool, context->remaining_elements);","","        njs_set_array(&argument, context->values);",""],"label":0}
{"cve":"CVE-2020-7042","code_chunks":["","\ttunnel.state = STATE_CONNECTING;","\tret = 0;","","\t\tlog_debug(\"Starting IO through the tunnel\\n\");","\tio_loop(&tunnel);",""],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (!For_type) return 0;","AsyncFor_type = make_type(\"AsyncFor\", stmt_type, AsyncFor_fields, 4);","if (!AsyncFor_type) return 0;","While_type = make_type(\"While\", stmt_type, While_fields, 3);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["Assign(asdl_seq * targets, expr_ty value, int lineno, int col_offset, int","end_lineno, int end_col_offset, PyArena *arena)","{","stmt_ty p;","if (!value) {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"orelse\\\" missing from Try\");","            return 1;","        }","        else {"],"label":0}
{"cve":"CVE-2016-10161","code_chunks":["\t\t\tgoto yy65;","\t\t} else {","\t\t\tif (yych == 'e') goto yy65;","\t\t\tgoto yy18;","\t\t}","\t}","\t++YYCURSOR;"],"label":0}
{"cve":"CVE-2022-2817","code_chunks":["expected = tv_get_string_buf_chk(tv, buf);","if (!pattern_match(expected, actual, FALSE))","{","error_found = TRUE;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2018-15859","code_chunks":["","    if (result <= 0 || result > XKB_MAX_GROUPS) {","        log_err(ctx, \"Group index %u is out of range (1..%d)\\n\",","                result, XKB_MAX_GROUPS);","        return false;","    }",""],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["return 1;","}","if (isinstance) {","asdl_seq* dims;","","if (_PyObject_HasAttrId(obj, &PyId_dims)) {"],"label":1}
{"cve":"CVE-2022-0158","code_chunks":["len = get_env_len(arg);","if (len == 0)","{","semsg(_(e_syntax_error_at_str), start - 1);","return FAIL;","}",""],"label":1}
{"cve":"CVE-2022-0417","code_chunks":["#endif","\t}","","\t\tp_sm = 0;\t\t    \tp_sta = 0;\t\t    #ifdef FEAT_CMDL_INFO","\tif (p_ru)","\t    status_redraw_all();    \tp_ru = 0;\t\t    #endif","#ifdef FEAT_RIGHTLEFT"],"label":0}
{"cve":"CVE-2022-41860","code_chunks":["eapsim_attribute = attr[0];","eapsim_len = attr[1] * 4;","","if (eapsim_len > attrlen) {","fr_strerror_printf(\"EAP-Sim attribute %d (no.%d) has length longer than data (%d > %d)\",","eapsim_attribute, es_attribute_count, eapsim_len, attrlen);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["errstr = PyObject_Str(value);","if (errstr) {","char *s = \"\";","char buf[128];","s = _PyUnicode_AsString(errstr);","PyOS_snprintf(buf, sizeof(buf), \"(unicode error) %s\", s);"],"label":1}
{"cve":"CVE-2022-0676","code_chunks":["\tint *deps = NULL;","\ttarget_libs = r_sys_getenv (\"R_DYLDCACHE_FILTER\");","\tif (target_libs) {","\t\ttarget_lib_names = r_str_split_list (target_libs, \":\", 0);","\t\tif (!target_lib_names) {","\t\t\tr_list_free (bins);","\t\t\treturn NULL;"],"label":0}
{"cve":"CVE-2020-11087","code_chunks":["Stream_Free(s, FALSE);","return SEC_E_INTERNAL_ERROR;","}","","if (ntlm_read_message_fields_buffer(s, &(message->NtChallengeResponse)) <","0) \/* NtChallengeResponse *\/"],"label":1}
{"cve":"CVE-2022-1907","code_chunks":["length--;","}","\/* self closing tag '\/>' *\/","if (*(data - 1) == '\/' && *data == '>') {","value--;","}","*value = '\\0';"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t}","\tRLC_FINALLY {","\t\tfor (size_t i = 0; i < (1 << (EP_WIDTH - 1)); i++) {","\t\t\ted_free(t[i]);","\t\t}","\t\ted_free(q);","\t}"],"label":0}
{"cve":"CVE-2021-3997","code_chunks":["const struct stat *root_dev) {","","struct stat st;","int r, q = 0;","","assert(fd >= 0);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {"],"label":1}
{"cve":"CVE-2022-0519","code_chunks":["R_API RBinJavaAttrInfo *r_bin_java_synthetic_attr_new(RBinJavaObj *bin, ut8 *buffer, ut64 sz, ut64 buf_offset) {","ut64 offset = 0;","RBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);","if (!attr) {","return NULL;","}"],"label":1}
{"cve":"CVE-2021-40812","code_chunks":["\t\/* 8-bit colours *\/","\tif (!im->trueColor) {","\t\tfor(i = 0; i< im->colorsTotal; ++i) {","\t\t\tgdPutC(gdImageBlue(im, i), out);","\t\t\tgdPutC(gdImageGreen(im, i), out);","\t\t\tgdPutC(gdImageRed(im, i), out);","\t\t\tgdPutC(0, out);"],"label":0}
{"cve":"CVE-2021-30218","code_chunks":["writefile(const char *name, struct string *s)","{","\tFILE *f;","\tint ret;","","\tf = fopen(name, \"w\");","\tif (!f) {"],"label":0}
{"cve":"CVE-2021-31258","code_chunks":["if (((GF_MPEGSampleEntryBox *)entry)->esd->desc->slConfig->predefined != SLPredef_MP4) return GF_BAD_PARAM;","slc = & ((GF_MPEGSampleEntryBox *)entry)->slc;","break;","if (((GF_MPEGAudioSampleEntryBox *)entry)->esd->desc->slConfig->predefined != SLPredef_MP4) return GF_BAD_PARAM;"],"label":1}
{"cve":"CVE-2020-11085","code_chunks":["","\t\twhile (Stream_GetRemainingLength(&sub1) >= 4)","\t\t{","\t\t\tStream_Read_UINT32(&sub1, formats[index].formatId); \/* formatId (4 bytes) *\/","","\t\t\tformats[index].formatName = NULL;",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_rec_tnaf_mod(bn_t r0, bn_t r1, const bn_t k, int u, size_t m) {","bn_t t, t0, t1, t2, t3;","","bn_null(t);"],"label":0}
{"cve":"PYSEC-2021-764","code_chunks":["void AddBatchOffsets(OpKernelContext* ctx, Tensor* indices,","                       const Tensor& params) {","    int64_t batch_size = 1;      for (int idx = 0; idx < batch_dims_; ++idx) {","      batch_size *= params.dim_size(idx);","    }","    OP_REQUIRES(","        ctx, batch_size != 0,"],"label":0}
{"cve":"CVE-2023-5377","code_chunks":["\t}","\treturn GF_OK;","}","","GF_Err proj_type_box_size(GF_Box *s)","{","\tGF_ProjectionTypeBox *ptr = (GF_ProjectionTypeBox *)s;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["tmp = ((keyword_ty)asdl_seq_GET(keywords, k))->arg;","if (tmp && !PyUnicode_Compare(tmp, key)) {","ast_error(c, chch,","\"keyword argument repeated\");","return NULL;","}","}"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["}","for (c=0; c < 16; c+=2) {","i = len[((c & 1) << 1) | (c >> 3)];","RAW(row,col+c) = ((signed) ph1_bits(i) << (32-i) >> (32-i)) +","(dir ? RAW(row+(~c | -2),col+c) : col ? RAW(row,col+(c | -2)) : 128);","if (c == 14) c = -1;"],"label":1}
{"cve":"CVE-2018-14879","code_chunks":["","\twhile (*p)","\t\tlen += strlen(*p++) + 1;","","\tbuf = (char *)malloc(len);","\tif (buf == NULL)","\t\terror(\"copy_argv: malloc\");"],"label":0}
{"cve":"CVE-2021-42779","code_chunks":["\t}","","\tLOG_FUNC_RETURN(ctx, SC_SUCCESS);","}","","","static int"],"label":0}
{"cve":"CVE-2016-9583","code_chunks":["switch (jpc_dec_lookahead(in)) {","return 0;","break;","break;","return -1;","break;"],"label":0}
{"cve":"CVE-2020-28196","code_chunks":["free_atype_ptr(const struct atype_info *a, void *val)","{","    switch (a->type) {","         break;","    case atype_ptr: {","        const struct ptr_info *ptrinfo = a->tinfo;","        void *ptr = LOADPTR(val, ptrinfo);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["scaling_factors_size));","}","node->temporaries->data[3] = op_data->scratch_tensor_index + 3;","TfLiteTensor* accum_scratch = GetTemporary(context, node, \/*index=*\/3);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {num_units, batch_size};"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["ts = seconds + (nanoseconds \/ 1000000000);","nanoseconds %= 1000000000;","if (NULL == (tm = gmtime(&ts)))","ND_PRINT(\"gmtime() error\");","else if (0 == strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm))","ND_PRINT(\"strftime() error\");"],"label":1}
{"cve":"CVE-2020-24371","code_chunks":["gray2black(curr);  \/* make it black, for next barrier *\/","changeage(curr, G_TOUCHED1, G_TOUCHED2);","p = next;  \/* keep it in the list and go to next element *\/","}","else {  \/* everything else is removed *\/","\/* white objects are simply removed *\/"],"label":0}
{"cve":"PYSEC-2021-847","code_chunks":["                                input.dim_size(ndims - 2), \" != \", n),","        done);","    OP_REQUIRES_ASYNC(context, rhs.dim_size(ndims - 2) == n,","                      errors::InvalidArgument(","                          \"Input matrix and right-hand side must have the \"","                          \"same number of rows, got \",","                          n, \" != \", rhs.dim_size(ndims - 2)),"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\tnumberCapabilities = 14;","","\tif (!rdp_write_general_capability_set(s, settings) ||","\t    !rdp_write_bitmap_capability_set(s, settings) ||","\t    !rdp_write_order_capability_set(s, settings) ||","\t    !rdp_write_pointer_capability_set(s, settings) ||","\t    !rdp_write_input_capability_set(s, settings) ||"],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["if(len<1) return;   string[len-1]=0;","if(len<3) return;   len = strnlen(string,len-1);","for(int i=len-1; i>=0; i--)","{","if(isspace(string[i]))","string[i]=0;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["        if (lookup_attr_id(obj, &PyId_iter, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"iter\\\" missing from AsyncFor\");","            return 1;","        }"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["        context, output, TfLiteIntArrayCopy(input1->dims)));","    return kTfLiteOk;","  };","","  reg.invoke = [](TfLiteContext* context, TfLiteNode* node) {","        const TfLiteTensor* a0;","    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &a0));"],"label":0}
{"cve":"CVE-2022-33099","code_chunks":["\/* collect total length and number of strings *\/","for (n = 1; n < total && tostring(L, s2v(top - n - 1)); n++) {","size_t l = vslen(s2v(top - n - 1));","if (l_unlikely(l >= (MAX_SIZE\/sizeof(char)) - tl))","luaG_runerror(L, \"string length overflow\");","tl += l;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["GetTemporary(context, node, kAuxInputQuantized);","aux_input_quantized->type = fw_input_weights->type;","aux_input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(aux_input_quantized->dims, aux_input->dims)) {"],"label":1}
{"cve":"CVE-2020-28196","code_chunks":["    return 0;","}","","static krb5_error_code","decode_atype_to_ptr(const taginfo *t, const uint8_t *asn1, size_t len,","                    const struct atype_info *a, void **ptr_out)","{"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["rdpSettings* settings)","{","WINPR_UNUSED(settings);","if (length < 40)","return FALSE;",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["node->temporaries = TfLiteIntArrayCreate(2);    }","node->temporaries->data[kFwScratchBuffer] =","op_data->scratch_tensor_index + kFwScratchBuffer;","TfLiteTensor* fw_scratch_buffer ="],"label":1}
{"cve":"CVE-2022-21655","code_chunks":["","  if (!generic_conn_pool) {","    sendNoHealthyUpstreamResponse();","    cleanup();","    return;","  }","  UpstreamRequestPtr upstream_request = std::make_unique<UpstreamRequest>("],"label":0}
{"cve":"CVE-2018-25032","code_chunks":["        }","        if (bstate == block_done) {","            if (flush == Z_PARTIAL_FLUSH) {","                _tr_align(s);","            } else if (flush != Z_BLOCK) { \/* FULL_FLUSH or SYNC_FLUSH *\/","                _tr_stored_block(s, (char*)0, 0L, 0);","                \/* For a full flush, this empty block will be recognized"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  for (int i = 0; i < input_dims_count - 2; ++i) {","    num_slices *= input_dims_data[i];","  }","","  int input_height = input_dims_data[input_dims_count - 2];","  int input_width = input_dims_data[input_dims_count - 1];","  int input_slice_size = input_height * input_width;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        else {","            int res;","            res = obj2ast_arguments(tmp, &args, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }","        if (_PyObject_LookupAttrId(obj, &PyId_body, &tmp) < 0) {"],"label":0}
{"cve":"CVE-2018-8796","code_chunks":["int i;","uint16 num_updates;","","in_uint16_le(s, num_updates);   \/* rectangles *\/","","for (i = 0; i < num_updates; i++)"],"label":0}
{"cve":"CVE-2016-6871","code_chunks":["  scale = adjust_scale(scale);","  bc_num result;","  bc_init_num(&result);","  SCOPE_EXIT {","    bc_free_num(&result);","  };","  php_str2num(&result, (char*)operand.data());"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["             * node itself, so we are supposed only to free the allocated data here ... *\/","            lys_extension_instances_free(ctx, target->ext[n]->ext, target->ext[n]->ext_size, NULL);","            lydict_remove(ctx, target->ext[n]->arg_value);","            free(target->ext[n]);","","            \/* and prepare the new structure *\/","            new = malloc(sizeof **target->ext);"],"label":0}
{"cve":"CVE-2023-47470","code_chunks":["goto fail;","}","for (int i = 0; i < sps->num_ref_pic_list_in_sps[1]; ++i)","ref_pic_list_struct(gb, &sps->rpls[1][i]);","}","}"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["\t\tbytesConsumed += 1;","","\t\t\t\tND_PRINT(\"Format %s (%u), HwInfo %s (%u), Timestamp \",","\t\t         tok2str(ts_format_str, \"Unknown\", ts_format),","\t\t         ts_format,","\t\t         tok2str(hw_info_str, \"Unknown\", hw_info),","\t\t         hw_info);"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["rdpSettings* settings)","{","WINPR_UNUSED(settings);","if (length < 12)","return FALSE;",""],"label":1}
{"cve":"CVE-2020-23930","code_chunks":["sprintf(nhml, \"sampleRate=\\\"%d\\\" numChannels=\\\"%d\\\" \", ctx->sr, ctx->chan);","gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));","p = gf_filter_pid_get_property(ctx->ipid, GF_PROP_PID_AUDIO_FORMAT);","sprintf(nhml, \"bitsPerSample=\\\"%d\\\" \", gf_audio_fmt_bit_depth(p->value.uint));","gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));","}",""],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["AsyncFor(expr_ty target, expr_ty iter, asdl_seq * body, asdl_seq * orelse,","string type_comment, int lineno, int col_offset, int end_lineno, int","end_col_offset, PyArena *arena)","{","stmt_ty p;","if (!target) {"],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["          {","            if (type == 9) imgdata.other.FlashEC = getreal(type) \/ 256.0f;","            else imgdata.other.FlashEC = (float) ((signed short) fgetc(ifp)) \/ 6.0f;","          }","         else if (tag == 0x007e)","           {","             imgdata.color.linear_max[0] ="],"label":0}
{"cve":"CVE-2021-38203","code_chunks":["","btrfs_block_rsv_release(fs_info, &fs_info->chunk_block_rsv,","trans->chunk_bytes_reserved, NULL);","atomic64_sub(trans->chunk_bytes_reserved, &cur_trans->chunk_bytes_reserved);","cond_wake_up(&cur_trans->chunk_reserve_wait);"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["yang_read_extcomplex_str(struct lys_module *module, struct lys_ext_instance_complex *ext, const char *arg_name,","const char *parent_name, char *value, int parent_stmt, LY_STMT stmt)","{","int c;","const char **str, ***p = NULL;"],"label":1}
{"cve":"CVE-2018-12561","code_chunks":["{","if (Type_SshFs==type->itemData(type->currentIndex()).toInt() && 0==sshPort->value()) {","sshPort->setValue(22);","}","if (Type_Samba==type->itemData(type->currentIndex()).toInt() && 0==smbPort->value()) {"],"label":1}
{"cve":"CVE-2018-5804","code_chunks":["void CLASS identify()","{","static const short pana[][6] = {","{ 3130, 1743,  4,  0, -6,  0 },","{ 3130, 2055,  4,  0, -6,  0 },"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["      plugin_id = default_factories_[platform_id].FACTORY_VAR;                \\","                                                                              \\","      if (plugin_id == kNullPlugin) {                                         \\","        return tsl::Status(                                                   \\","            tsl::error::FAILED_PRECONDITION,                                  \\","            \"No suitable \" PLUGIN_STRING                                      \\","            \" plugin registered. Have you linked in a \" PLUGIN_STRING         \\"],"label":0}
{"cve":"CVE-2023-28366","code_chunks":["\t\t\t}else if(rc2 == MOSQ_ERR_NO_SUBSCRIBERS){","\t\t\t\tif(send__puback(context, mid, MQTT_RC_NO_MATCHING_SUBSCRIBERS, NULL)) rc = 1;","\t\t\t}else{","\t\t\t\trc = rc2;","\t\t\t}","\t\t\tbreak;","\t\t\tif(dup == 0){"],"label":0}
{"cve":"CVE-2016-6873","code_chunks":["Variant &v = arr1.lvalAt(key, AccessFlags::Key);","auto subarr1 = v.toArray().copy();","php_array_merge_recursive(seen,","couldRecur(v, subarr1),","subarr1,","value.toArray());","v.unset();       v = subarr1;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2022-41889","code_chunks":["          ++offset;","        }","      }","    }","    TFE_OpSetAttrShapeList(op, key, dims.get(), num_dims.get(), num_values,","                           status);","    if (!status->status.ok()) return false;"],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["\t        if (tWB < 0x100) {","\t            imgdata.color.WB_Coeffs[tWB][0] = get2();","\t            imgdata.color.WB_Coeffs[tWB][1] = imgdata.color.WB_Coeffs[tWB][3] = get2();","\t            imgdata.color.WB_Coeffs[tWB][2] = get2();","\t        } else fseek(ifp, 6, SEEK_CUR);","\t    }","\t}"],"label":0}
{"cve":"CVE-2021-28041","code_chunks":["}","break;","if ((r = sshbuf_get_cstring(m, &ext_name, NULL)) != 0) {","error_fr(r, \"parse constraint extension\");","goto err;","}"],"label":1}
{"cve":"CVE-2021-45933","code_chunks":["}","","if (ping->stat == MQTT_MSG_BEGIN) {","#ifdef WOLFMQTT_MULTITHREAD","\/* Lock send socket mutex *\/","rc = wm_SemLock(&client->lockSend);"],"label":1}
{"cve":"CVE-2017-11462","code_chunks":["                        input_chan_bindings,","                        src_name,","                        mech_type,","                        output_token,","                        ret_flags,","                        time_rec,","                        d_cred)"],"label":0}
{"cve":"CVE-2022-41859","code_chunks":["* now we can savely construct PWE","*\/","BN_bin2bn(xbuf, primebytelen, x_candidate);","if (!EC_POINT_set_compressed_coordinates(session->group, session->pwe,","x_candidate, save_is_odd, NULL)) {","goto fail;"],"label":1}
{"cve":"CVE-2017-9763","code_chunks":["","if (grub_disk_read (data->disk,","((grub_disk_addr_t)","grub_le_to_cpu32 (indir[rblock \/ perblock]))","<< log2_blksz,"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["keyword_ty o = (keyword_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static void ed_mul_naf_imp(ed_t r, const ed_t p, const bn_t k) {","int l, i, n;","int8_t naf[RLC_FP_BITS + 1];","ed_t t[1 << (ED_WIDTH - 2)];",""],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    else {","        int res;","        res = obj2ast_int(tmp, &end_lineno, arena);","        if (res != 0) goto failed;","        Py_CLEAR(tmp);","    }","    if (_PyObject_LookupAttrId(obj, &PyId_end_col_offset, &tmp) < 0) {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["        return EvalQuantized<kernel_type>(context, node, params, data, input,","                                          filter, bias, output);","      } else {","        context->ReportError(context,","                             \"Unhandled fully-connected weights format\");","        return kTfLiteError;","      }"],"label":0}
{"cve":"CVE-2021-43845","code_chunks":["const pjmedia_rtcp_xr_pkt\t      *rtcp_xr = (pjmedia_rtcp_xr_pkt*) pkt;","const pjmedia_rtcp_xr_rb_rr_time  *rb_rr_time = NULL;","const pjmedia_rtcp_xr_rb_dlrr     *rb_dlrr = NULL;","const pjmedia_rtcp_xr_rb_stats    *rb_stats = NULL;","const pjmedia_rtcp_xr_rb_voip_mtc *rb_voip_mtc = NULL;","const pjmedia_rtcp_xr_rb_header   *rb_hdr = (pjmedia_rtcp_xr_rb_header*)"],"label":0}
{"cve":"CVE-2018-6334","code_chunks":["if (!strcasecmp(key, \"name\")) {","if (param) {","free(param);","}","param = php_ap_getword_conf(&pair);","} else if (!strcasecmp(key, \"filename\")) {"],"label":1}
{"cve":"CVE-2020-26270","code_chunks":["GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,","cudnnDataType_t data_type) {","if (max_seq_length <= 0) {","return port::Status(port::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");","}","int dims[] = {batch_size, data_size, 1};"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["PyObject *res;","_Py_IDENTIFIER(__dict__);","PyObject *dict = _PyObject_GetAttrId(self, &PyId___dict__);","if (dict == NULL) {","if (PyErr_ExceptionMatches(PyExc_AttributeError))","PyErr_Clear();"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["return \"Param\";","assert(0);","return \"(unknown)\";","}"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["\t\tdrop_all_attr_stacks();","","\tdirection = new_direction;","}","","static struct attr_stack *read_attr_from_file(const char *path, unsigned flags)","{"],"label":0}
{"cve":"CVE-2023-28487","code_chunks":["int i;","debug_decl(new_logline, SUDO_DEBUG_UTIL);","","sudo_lbuf_init(&lbuf, NULL, 0, NULL, 0);","","if (ISSET(flags, EVLOG_RAW) || evlog == NULL) {"],"label":0}
{"cve":"CVE-2016-10544","code_chunks":["break;","}","dynamicInflationBuffer.append(inflationBuffer, LARGE_BUFFER_SIZE - inflationStream.avail_out);","} while (err == Z_BUF_ERROR);","","inflateReset(&inflationStream);"],"label":1}
{"cve":"CVE-2018-15857","code_chunks":["darray_append(expr->keysym_list.symsNumEntries, numEntries);","darray_concat(expr->keysym_list.syms, append->keysym_list.syms);","","FreeStmt((ParseCommon *) &append);","","return expr;","}"],"label":1}
{"cve":"CVE-2018-14016","code_chunks":["static bool r_bin_mdmp_init_directory(struct r_bin_mdmp_obj *obj) {","int i;","ut8 *directory_base;","struct minidump_directory *entry;","","directory_base = obj->b->buf + obj->hdr->stream_directory_rva;"],"label":1}
{"cve":"CVE-2021-21323","code_chunks":["    NOTREACHED();","  }","};","","void OnBeforeURLRequestAdBlockTP(const ResponseCallback& next_callback,","                                 std::shared_ptr<BraveRequestInfo> ctx) {","  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);"],"label":0}
{"cve":"CVE-2018-20182","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void rand_seed(void (*callback)(uint8_t *, int, void *), void *arg);"],"label":1}
{"cve":"CVE-2021-41208","code_chunks":["OP_REQUIRES_OK(context, context->input_list(\"stats_summary_list\",","&stats_summary_list));","const int64_t num_buckets = stats_summary_list[0].dim_size(1);","DCHECK_EQ(stats_summary_list[0].dim_size(2), 2);","std::vector<TTypes<float, 3>::ConstTensor> stats_summary;","stats_summary.reserve(stats_summary_list.size());","for (const auto& tensor : stats_summary_list) {"],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["\t\t\t{","\t\t\t\tint i;","","\t\t\t\tprintf(\"   Uncompressing part %d ... \", part);","\t\t\t\t\/*","\t\t\t\t * If we've got less than 4 MB of malloc()","\t\t\t\t * space, use slower decompression algorithm"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["node->temporaries","->data[offset + kRecurrentToOutputWeightsLedgerOffset] =","op_data->ledger_index + kRecurrentToOutputWeightsLedgerOffset;","const TfLiteTensor* recurrent_to_output_weights =","GetInput(context, node, kRecurrentToOutputWeightsTensor);","TfLiteTensor* recurrent_to_output_weights_ledger ="],"label":1}
{"cve":"CVE-2022-1714","code_chunks":["","ret = op->size = msp430_decode_command (buf, len, &cmd);","if (mask & R_ANAL_OP_MASK_DISASM) {","if (ret < 1) {","op->mnemonic = strdup (\"invalid\");"],"label":1}
{"cve":"CVE-2018-14017","code_chunks":["ut64 offset = 0;","ut16 name_idx;","st64 nsz;","","if (!buffer || ((int) sz) < 4 || buf_offset < 0) {","eprintf (\"r_bin_Java_read_next_attr_from_buffer: invalid buffer size %d\\n\", (int) sz);","return NULL;"],"label":0}
{"cve":"CVE-2019-11924","code_chunks":["}","","while (true) {","auto message = read(socketBuf);","if (!message) {","return folly::none;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    }","  }","","    TfLiteTensor* fw_output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kFwOutputTensor, &fw_output));","  TfLiteIntArray* fw_output_size_array = TfLiteIntArrayCreate(3);"],"label":0}
{"cve":"PYSEC-2021-705","code_chunks":["for (int index = out_start; index < out_end; ++index) {","int input_backprop_index = out_arg_max_flat(index);","FastBoundsCheck(input_backprop_index - in_start, in_end - in_start);","input_backprop_flat(input_backprop_index) += out_backprop_flat(index);","}","}","};"],"label":1}
{"cve":"PYSEC-2021-462","code_chunks":["      auto output_indices_t = output_indices.matrix<int64>();","      auto output_values_t = output_values.vec<T>();","","      for (int i = 0; i < num_entries; ++i) {","        for (int d = 1; d < rank; ++d) {","          output_indices_t(i, d - 1) = indices(i, d);","        }"],"label":0}
{"cve":"CVE-2017-14172","code_chunks":["(IsStringTrue(option) != MagickFalse))","(void) ConcatenateMagickString(options,\"-dEPSCrop \",MagickPathExtent);","if (fitPage != MagickFalse)","(void) ConcatenateMagickString(options,\"-dEPSFitPage \",MagickPathExtent);","}","(void) CopyMagickString(filename,read_info->filename,MagickPathExtent);","(void) AcquireUniqueFilename(filename);"],"label":1}
{"cve":"CVE-2017-16909","code_chunks":["int row, col, i, j, sh = 0, pred[2], nonz[2];","","pana_bits(0);","for (row = 0; row < height; row++)","{","#ifdef LIBRAW_LIBRARY_BUILD","checkCancel();"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["","\treturn name;","}","","char *reencode_string_len(const char *in, size_t insz,","\t\t\t  const char *out_encoding, const char *in_encoding,","\t\t\t  size_t *outsz)"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 pad2Octets;","WLog_INFO(TAG, \"GlyphCacheCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 52)","return FALSE;",""],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (exists_not_none(obj, &PyId_arg)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_arg);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["\tint user_match = userlist_matches(nss->parse_tree, ctx->user.pw, &us->users);","\tif (user_match != ALLOW) {","\t    if (callback != NULL && user_match == DENY) {","\t\tcallback(nss->parse_tree, us, user_match, NULL, UNSPEC, NULL,","\t\t    UNSPEC, UNSPEC, UNSPEC, cb_data);","\t    }","\t    continue;"],"label":0}
{"cve":"CVE-2022-0713","code_chunks":["}","size_t i;","ut8 *cursor = b + R_CS_EL_OFF_SEGS;","for (i = 0; i < hdr->n_segments && cursor < end; i++) {","RCoreSymCacheElementSegment *seg = &result->segments[i];","seg->paddr = seg->vaddr = r_read_le64 (cursor);","cursor += 8;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["          accum_scratch, fw_output,","          GetTemporary(context, node, kInputZeroPoints),","          GetTemporary(context, node, kAuxInputZeroPoints),","          GetTemporary(context, node, kOutputStateZeroPoints), fw_row_sums,","          fw_row_sums_size, &op_data->compute_fw_row_sums,","          CpuBackendContext::GetFromContext(context));","      TF_LITE_ENSURE_OK(context, fw_pass_status);"],"label":0}
{"cve":"CVE-2022-4415","code_chunks":["                return r;","","        \/* The following are optional, but we use them if present. *\/","        r = get_process_exe(pid, &t);","        if (r >= 0)","                r = iovw_put_string_field_free(iovw, \"COREDUMP_EXE=\", t);","        if (r < 0)"],"label":0}
{"cve":"CVE-2018-8800","code_chunks":["\t\t\t\twhile (indexw < width && collen > 0)","\t\t\t\t{","\t\t\t\t\tcolor = CVAL(in);","\t\t\t\t\t*out = color;","\t\t\t\t\tout += 4;","\t\t\t\t\tindexw++;","\t\t\t\t\tcollen--;"],"label":0}
{"cve":"CVE-2018-8791","code_chunks":["\t\t\t\t\tx = last_line[indexw * 4] + color;","\t\t\t\t\t*out = x;","\t\t\t\t\tout += 4;","\t\t\t\t\tindexw++;","\t\t\t\t\treplen--;","\t\t\t\t}","\t\t\t}"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["            if (!ly_strequal(value, *value_, 1)) {","                \/* update the changed value *\/","                lydict_remove(ctx, *value_);","                *value_ = value;","            }","        }",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static void ep4_mul_glv_imp(ep4_t r, const ep4_t p, const bn_t k) {","int sign, i, j, l, _l[8];","bn_t n, _k[8], u, v;","int8_t naf[8][RLC_FP_BITS + 1];","ep4_t q[8];"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["return 1;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["                    GetInputSafe(context, node, kFftLengthTensor, &fft_length));","  const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","","  if (output->type != kTfLiteComplex64) {"],"label":0}
{"cve":"CVE-2022-29181","code_chunks":["if (NIL_P(data)) {","rb_raise(rb_eArgError, \"data cannot be nil\");","}","if (!(int)RSTRING_LEN(data)) {","rb_raise(rb_eRuntimeError, \"data cannot be empty\");","}"],"label":1}
{"cve":"CVE-2018-20749","code_chunks":["*\/","if (length>0) {","buffer=malloc((uint64_t)length+1);","if (buffer!=NULL) {","if ((n = rfbReadExact(cl, (char *)buffer, length)) <= 0) {","if (n != 0)"],"label":1}
{"cve":"CVE-2020-11089","code_chunks":["UINT32 PathLength;","if (!Stream_SafeSeek(irp->input, 28))","return ERROR_INVALID_DATA;","\/* DesiredAccess(4) AllocationSize(8), FileAttributes(4) *\/","\/* SharedAccess(4) CreateDisposition(4), CreateOptions(4) *\/","if (Stream_GetRemainingLength(irp->input) < 4)"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const auto* params =","reinterpret_cast<const TfLiteGatherParams*>(node->builtin_data);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* positions;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2021-3770","code_chunks":["\t    {","\t\tif (!isprint(str[0]) || !isprint(str[1]))","\t\t    continue;","","\t\tname_buf[0] = 't';","\t\tname_buf[1] = '_';","\t\tname_buf[2] = str[0];"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["for (int i = 0; i < node->outputs->size; ++i) {","TfLiteTensor* output = GetOutput(context, node, i);","TfLiteTensor* subgraph_output =","active_branch_subgraph.tensor(active_branch_subgraph.outputs()[i]);","TfLiteIntArray* output_size = TfLiteIntArrayCopy(subgraph_output->dims);","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    recovered_cell_weights->type = kTfLiteFloat32;","    recovered_cell_weights->allocation_type = kTfLiteArenaRw;","    int recovered_cell_dims[1] = {n_cell};","    if (!TfLiteIntArrayEqualsArray(recovered_cell_weights->dims, 1,","                                   recovered_cell_dims)) {","      TfLiteIntArray* recovered_cell_weights_size = TfLiteIntArrayCreate(1);","      recovered_cell_weights_size->data[0] = n_cell;"],"label":0}
{"cve":"CVE-2022-35939","code_chunks":["      break;","      status = ScatterNd<IndicesT, int32_t>(indices, updates, output);","      break;","      status = ScatterNd<IndicesT, int64_t>(indices, updates, output);","      break;","      TF_LITE_KERNEL_LOG(","          context, \"Updates of type '%s' are not supported by scatter_nd.\","],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  TfLiteTensor* output_state = GetVariableInput(","      context, node, ops::builtin::lstm::full::kOutputStateTensor);","  TF_LITE_ENSURE(context, output_state != nullptr);","  TfLiteTensor* cell_state = GetVariableInput(","      context, node, ops::builtin::lstm::full::kCellStateTensor);","  TF_LITE_ENSURE(context, cell_state != nullptr);",""],"label":0}
{"cve":"CVE-2016-9841","code_chunks":["        }","        else if ((op & 64) == 0) {              \/* 2nd level length code *\/","            here = lcode[here.val + (hold & ((1U << op) - 1))];","            goto dolen;","        }","        else if (op & 32) {                     \/* end-of-block *\/","            Tracevv((stderr, \"inflate:         end of block\\n\"));"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["res = -1;","goto cleanup;","}"],"label":1}
{"cve":"CVE-2022-0521","code_chunks":["return NULL;","}","RBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);","if (!attr) {","return NULL;","}"],"label":0}
{"cve":"CVE-2021-33910","code_chunks":["assert(f);","assert(ret);","","p = strdupa(f);","if (!p)","return -ENOMEM;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TF_LITE_ENSURE(context, NumDimensions(input) <= 4);",""],"label":1}
{"cve":"CVE-2019-3561","code_chunks":["if (pos >= 0) {","ptr = bstrrstr(input + pos, len - pos, s, s_len);","} else {","ptr = bstrrstr(input, len + std::min(pos + s_len, 0), s, s_len);","}","} else {","if (pos >= 0) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["auto status = make_ledger(input_to_output_weights->sparsity, context,","input_to_output_weights_ledger);","if (status != kTfLiteOk) return status;","}","{","node->temporaries->data[offset + kRecurrentToInputWeightsLedgerOffset] ="],"label":1}
{"cve":"CVE-2021-37491","code_chunks":["txNew.vin.push_back(CTxIn(coin.outpoint,CScript(),","nSequence));","","nBytes = CalculateMaximumSignedTxSize(txNew, this);","if (nBytes < 0) {","strFailReason = _(\"Signing transaction failed\");"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["\/* static *\/ bool GpuDriver::GetDriverVersion(int* driver_version) {","  CUresult res = cuDriverGetVersion(driver_version);","  if (res != CUDA_SUCCESS) {","    LOG(ERROR) << \"failed to query driver version: \" << ToString(res);","    return false;","  }",""],"label":0}
{"cve":"PYSEC-2022-49","code_chunks":["      strides = {1, sy, sx, 1};","    } else {","      strides = {1, 1, sy, sx};","    }","","    auto& op_info = op_context.op_info;","    SetCpuDevice(&op_info);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["                goto failed;","            }","            asdl_seq_SET(kwonlyargs, i, val);","        }","        Py_CLEAR(tmp);","    }","    if (_PyObject_LookupAttrId(obj, &PyId_kw_defaults, &tmp) < 0) {"],"label":0}
{"cve":"CVE-2018-20179","code_chunks":["uint32 length;","struct stream packet = *s;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","","if (!s_check_rem(s, length))"],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["unsigned kodak, entries, tag, type, len, save, c;","double expo,ape;","","kodak = !strncmp(make,\"EASTMAN\",7) && tiff_nifds < 3;","entries = get2();","if(!strncmp(make,\"Hasselblad\",10) && (tiff_nifds > 3) && (entries > 512)) return;"],"label":0}
{"cve":"CVE-2022-24792","code_chunks":["    pj_size_t frame_size;","    pj_status_t status;","","    pj_assert(fport->base.info.signature == SIGNATURE);","","            frame_size = frame->size;",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus SimpleOpEval(TfLiteContext* context, TfLiteNode* node) {","  const TfLiteTensor* input1;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, \/*index=*\/0, &input1));","  const TfLiteTensor* input2;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, \/*index=*\/1, &input2));","","  TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2022-29226","code_chunks":["{Http::Headers::get().Path.get(), \"\/test?role=bearer&token=xyz-queryparam-token\"},","{Http::Headers::get().Host.get(), \"traffic.example.com\"},","{Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},","{Http::Headers::get().Scheme.get(), \"https\"},","};",""],"label":0}
{"cve":"CVE-2022-0521","code_chunks":["return NULL;","}","ut64 offset = 0;","RBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);","offset += 6;","if (!attr) {"],"label":1}
{"cve":"PYSEC-2020-301","code_chunks":["GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,","const absl::Span<const int>& seq_lengths, bool time_major,","cudnnDataType_t data_type) {","CHECK_GT(max_seq_length, 0);","int dims[] = {batch_size, data_size, 1};","int strides[] = {dims[1] * dims[2], dims[2], 1};","TensorDescriptor tensor_desc = CreateTensorDescriptor();"],"label":1}
{"cve":"CVE-2019-11413","code_chunks":["int main(int argc, char **argv)","{","\tconst char *error;","\tconst char *s;","\tReprog *p;","\tResub m;","\tint i;"],"label":0}
{"cve":"CVE-2023-24808","code_chunks":["\t\t  break;","","\t\t  ch = '\\b';","\t\t  break;","","\t\t  ch = '\\f';","\t\t  break;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["hidden_state_quantized->type = input_weights->type;","hidden_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(hidden_state_quantized->dims,"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);","","const TfLiteTensor* input_resource_id_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputVariableId,","&input_resource_id_tensor));","TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);"],"label":0}
{"cve":"CVE-2021-3753","code_chunks":["count = PIT_TICK_RATE \/ count;","kd_mksound(count, ticks);","break;","}","","\/*"],"label":1}
{"cve":"CVE-2021-3996","code_chunks":["{ \"ascii\",\t    no_argument,       NULL, 'a'\t\t },","{ \"bytes\",\t    no_argument,       NULL, 'b'\t\t },","{ \"canonicalize\",   no_argument,       NULL, 'c'\t\t },","{ \"deleted\",        no_argument,       NULL, FINDMNT_OPT_DELETED },","{ \"direction\",\t    required_argument, NULL, 'd'\t\t },","{ \"df\",\t\t    no_argument,       NULL, 'D'\t\t },","{ \"evaluate\",\t    no_argument,       NULL, 'e'\t\t },"],"label":1}
{"cve":"CVE-2018-14357","code_chunks":["  OptKeepQuiet = false;","  if (!imap_passive)","    ImapPassive = false;","","  return rc;","}",""],"label":0}
{"cve":"CVE-2016-7906","code_chunks":["      image->alpha_trait=UndefinedPixelTrait;","      break;","    }","    {","      if (image->colorspace != CMYKColorspace)","        {","          if (IssRGBCompatibleColorspace(image->colorspace) == MagickFalse)"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\tbdpe_new(pub);","\tbdpe_new(prv);","","\tBENCH_ONE(\"cp_bdpe_gen\", cp_bdpe_gen(pub, prv, prime, RLC_BN_BITS), 1);","","\tBENCH_RUN(\"cp_bdpe_enc\") {","\t\tout_len = RLC_BN_BITS \/ 8 + 1;"],"label":0}
{"cve":"CVE-2021-21261","code_chunks":["const char *val = NULL;","g_variant_get_child (arg_envs, i, \"{&s&s}\", &var, &val);","","env = g_environ_setenv (env, var, val, TRUE);","}","","g_ptr_array_add (flatpak_argv, g_strdup (\"flatpak\"));"],"label":1}
{"cve":"CVE-2023-25136","code_chunks":["compat_kex_proposal(struct ssh *ssh, char *p)","{","if ((ssh->compat & (SSH_BUG_CURVE25519PAD|SSH_OLD_DHGEX)) == 0)","return p;","debug2_f(\"original KEX proposal: %s\", p);","if ((ssh->compat & SSH_BUG_CURVE25519PAD) != 0)","if ((p = match_filter_denylist(p,"],"label":1}
{"cve":"CVE-2019-19242","code_chunks":["** constant.","*\/","int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);","int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);","if( aff>SQLITE_AFF_BLOB ){","static const char zAff[] = \"B\\000C\\000D\\000E\";","assert( SQLITE_AFF_BLOB=='A' );"],"label":1}
{"cve":"CVE-2016-4303","code_chunks":["int i;","cJSON *n = 0, *p = 0, *a = cJSON_CreateArray();","for ( i = 0; a && i < count; ++i ) {","n = cJSON_CreateString( strings[i] );","if ( ! i )","a->child = n;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["        return 1;","    }","    if (isinstance) {","        *out = In;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject *)NotIn_type);"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["}","if (tok->altwarning) {","#ifdef PGEN","PySys_WriteStderr(\"inconsistent use of tabs and spaces \"","\"in indentation\\n\");","#else"],"label":1}
{"cve":"CVE-2019-15162","code_chunks":["HANDLE Token;","if (LogonUser(username, \".\", password, LOGON32_LOGON_NETWORK, LOGON32_PROVIDER_DEFAULT, &Token) == 0)","{","pcap_fmt_errmsg_for_win32_err(errbuf, PCAP_ERRBUF_SIZE,","GetLastError(), \"LogonUser() failed\");"],"label":1}
{"cve":"CVE-2019-19481","code_chunks":["size = left = *out_buf ? *out_len : sizeof(buf);","out_ptr = *out_buf ? *out_buf : buf;","sc_format_apdu(card, &apdu, SC_APDU_CASE_2_SHORT, CAC_INS_GET_CERTIFICATE, 0, 0 );","next_len = MIN(left, 100);"],"label":1}
{"cve":"CVE-2016-5356","code_chunks":["\/* Parse the header *\/","pkt_len = parse_cosine_rec_hdr(phdr, line, err, err_info);","if (pkt_len == -1)","return FALSE;",""],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["uint8_t data_2 = 0;","char *text = NULL;","","if (!siz) goto shortbuf;","","if (event_data[0] >= 0x80) {","command = *event_data & 0xf0;"],"label":0}
{"cve":"CVE-2016-10129","code_chunks":["","void git_pkt_free(git_pkt *pkt)","{","\tif (pkt->type == GIT_PKT_REF) {","\t\tgit_pkt_ref *p = (git_pkt_ref *) pkt;","\t\tgit__free(p->head.name);","\t\tgit__free(p->head.symref_target);"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["char tmp[128];","pj_size_t nwritten;","","DTLS_LOCK(ds);","","if (!ds->ossl_rbio[idx]) {","DTLS_UNLOCK(ds);"],"label":0}
{"cve":"CVE-2017-12474","code_chunks":["inspector.AddField(\"NALU Length Size\", m_NaluLengthSize);","for (unsigned int i=0; i<m_SequenceParameters.ItemCount(); i++) {","inspector.AddField(\"Sequence Parameter\", m_SequenceParameters[i].GetData(), m_SequenceParameters[i].GetDataSize());","}","for (unsigned int i=0; i<m_SequenceParameters.ItemCount(); i++) {","inspector.AddField(\"Picture Parameter\", m_PictureParameters[i].GetData(), m_PictureParameters[i].GetDataSize());"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["return 1;","}"],"label":1}
{"cve":"CVE-2021-3997","code_chunks":["int fd,","const char *fname,","int is_dir,","RemoveFlags flags,","const struct stat *root_dev,","bool allow_recursion) {"],"label":0}
{"cve":"CVE-2021-35939","code_chunks":["\t     * Dont whine on non-empty directories for now. We might be able","\t     * to track at least some of the expected failures though,","\t     * such as when we knowingly left config file backups etc behind.","\t     *\/","\t    if (rc == RPMERR_ENOTEMPTY) {","\t\trc = 0;","\t    }"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["l = RLC_FP_BITS + 1;","bn_rec_slw(win, &l, k, EP_WIDTH);","for (i = 0; i < l; i++) {","if (win[i] == 0) {","ed_dbl(q, q);","} else {"],"label":1}
{"cve":"CVE-2017-12644","code_chunks":["if ((quantum != 0) && (length != 0))","{","if (length > GetBlobSize(image))","ThrowReaderException(CorruptImageError,","\"InsufficientImageDataInFile\");","if (~length >= 1)","data=(unsigned char *) AcquireQuantumMemory(length+1,quantum*"],"label":1}
{"cve":"CVE-2022-29181","code_chunks":["}","","void","noko_init_html_sax_parser_context()","{","  assert(cNokogiriXmlSaxParserContext);","  cNokogiriHtml4SaxParserContext = rb_define_class_under(mNokogiriHtml4Sax, \"ParserContext\","],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp9_read_bin(fp9_t a, const uint8_t *bin, size_t len) {","if (len != 9 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":0}
{"cve":"CVE-2016-8654","code_chunks":["register int i;","int m;","int hstartcol;","","\/* Get a buffer. *\/","if (bufsize > QMFB_SPLITBUFSIZE) {"],"label":1}
{"cve":"CVE-2019-13223","code_chunks":["len <<= 1;","if (len == f->blocksize_0) return f->window[0];","if (len == f->blocksize_1) return f->window[1];","assert(0);","return NULL;","}",""],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2020-11089","code_chunks":["\t\t{","\t\t\tirp->IoStatus = STATUS_UNSUCCESSFUL;","\t\t\tLength = 0;","\t\t\tbreak;","\t\t}","","\t\tStream_Seek(irp->input, status);"],"label":0}
{"cve":"CVE-2021-38199","code_chunks":["","\/**"," * nfs4_detect_session_trunking - Checks for session trunking."," * @clp:    original mount nfs_client"," * @res:    result structure from an exchange_id using the original mount"," *          nfs_client with a new multi_addr transport"," * @xprt:   pointer to the transport to add."],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["AllocateCudnnConvolutionBackwardFilterWorkspace(","Stream* stream, const CudnnHandle& cudnn,","const CudnnTensorDescriptor& input_nd, const CudnnFilterDescriptor& filter,","const CudnnConvolutionDescriptor& conv,","const CudnnTensorDescriptor& output_nd,","const dnn::AlgorithmDesc& algorithm_desc,"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, data->num, input_shape->data[axis]);","for (int i = 0; i < data->num; ++i) {","TfLiteIntArray* copied_output_shape = TfLiteIntArrayCopy(output_shape);","TfLiteTensor* output = GetOutput(context, node, i);","TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);","TF_LITE_ENSURE_EQ(context, input->params.zero_point,","output->params.zero_point);"],"label":1}
{"cve":"CVE-2022-35981","code_chunks":["","for (int index = 0; index < num_total_outputs; ++index) {","int input_backprop_index = out_arg_max_flat(index);","CHECK(input_backprop_index >= 0 &&","input_backprop_index < num_total_inputs)"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["}","","}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep_map(ep_t p, const uint8_t *msg, int len);"],"label":1}
{"cve":"PYSEC-2020-324","code_chunks":["TEST(BasicFlatBufferModel, TestHandleMalformedModel) {","const auto model_paths = {","\"tensorflow\/lite\/testdata\/add_shared_tensors.bin\",","};","","for (const auto& model_path : model_paths) {"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2018-20467","code_chunks":["%","%","%      UnregisterBMPImage(void)","%","*\/","ModuleExport void UnregisterBMPImage(void)","{"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["bool ms_handle_refused(Connection *con) override { return false; }","bool ms_verify_authorizer(Connection *con, int peer_type, int protocol,","bufferlist& authorizer, bufferlist& authorizer_reply,","bool& isvalid, CryptoKey& session_key) override {","isvalid = true;","return true;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","  auto* params =","      reinterpret_cast<TfLiteResizeBilinearParams*>(node->builtin_data);","","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2021-31255","code_chunks":["\tgf_bs_write_int(bs, ptr->profile, 2);","\tgf_bs_write_int(bs, ptr->live, 1);","\tgf_bs_write_int(bs, ptr->update, 1);","\tgf_bs_write_int(bs, ptr->reserved, 4);","\tgf_bs_write_u32(bs, ptr->time_scale);","\tgf_bs_write_u64(bs, ptr->current_media_time);","\tgf_bs_write_u64(bs, ptr->smpte_time_code_offset);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input_resource_id_tensor =","GetInput(context, node, kInputResourceIdTensor);","int resource_id = input_resource_id_tensor->data.i32[0];","","const TfLiteTensor* key_tensor = GetInput(context, node, kKeyTensor);","const TfLiteTensor* default_value_tensor ="],"label":1}
{"cve":"CVE-2021-45931","code_chunks":[" * Fetches the previous element in @set that is lower than current value of @codepoint."," *"," * Set @codepoint to #HB_SET_VALUE_INVALID to get started."," *"," * Return value: %true if there was a previous value, %false otherwise"," *"," * Since: 1.8.0"],"label":0}
{"cve":"CVE-2019-25087","code_chunks":["std::cout << \"[\" << cl->getClientIP() << \"] \" << req->methodIntToStr(req->getMethod()) << \" \" << req->getRequestUri() << std::endl;","\/*std::cout << \"Headers:\" << std::endl;","for(int i = 0; i < req->getNumHeaders(); i++) {","std::cout << req->getHeaderStr(i) << std::endl;","}","std::cout << std::endl;*\/",""],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["  }","","  String s = String(iv_required_len, ReserveString);","  char* iv_new = s.mutableData();","  memset(iv_new, 0, iv_required_len);","","  if (piv.size() <= 0) {"],"label":0}
{"cve":"CVE-2021-37637","code_chunks":["for (auto& component : element) {","if (DataTypeCanUseMemcpy(component.dtype())) {","const TensorBuffer* buffer = DMAHelper::buffer(&component);","if (buffer) {","total_size += buffer->size();","}","} else {"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["","nptrs = backtrace(buffer, 100);","if (file_name) {","fd = open(file_name, O_WRONLY | O_APPEND | O_CREAT, 0644);","if (str)","dprintf(fd, \"%s\\n\", str);","backtrace_symbols_fd(buffer, nptrs, fd);"],"label":1}
{"cve":"CVE-2017-15906","code_chunks":["logit(\"open \\\"%s\\\" flags %s mode 0%o\",","name, string_from_portable(pflags), mode);","if (readonly &&","((flags & O_ACCMODE) == O_WRONLY ||"],"label":1}
{"cve":"CVE-2016-5355","code_chunks":["","\/*"," *"," * c-basic-offset: 8"," * tab-width: 8"," * indent-tabs-mode: t"," *"],"label":0}
{"cve":"CVE-2021-42782","code_chunks":["\tr = piv_general_io(card, 0x87, 0x00, 0x9B, sbuf, sizeof sbuf, rbuf, sizeof rbuf);","\t\/*","\t * piv_get_challenge is called in a loop.","\t * some cards may allow 1 challenge expecting it to be part of","\t * NIST 800-73-3 part 2 \"Authentication of PIV Card Application Administrator\"","\t * and return \"6A 80\" if last command was a get_challenge.","\t * Now that the card returned error, we can try one more time."],"label":0}
{"cve":"CVE-2017-9144","code_chunks":["}","{","operand=ReadBlobByte(image);","if (opcode & 0x40)","operand=ReadBlobLSBSignedShort(image);","x+=operand;"],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["    unsigned int validated = FLAG_NO_USER | FLAG_NO_HOST;","    int m, match = UNSPEC;","    debug_decl(sudoers_lookup, SUDOERS_DEBUG_PARSER);","","    \/*","     * Special case checking the \"validate\", \"list\" and \"kill\" pseudo-commands.","     *\/"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInput, &input));","const TfLiteTensor* axis;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));"],"label":0}
{"cve":"CVE-2016-9841","code_chunks":["                            from = out - dist;  \/* rest from output *\/","                        }","                    }","                    while (len > 2) {","                        *out++ = *from++;","                        *out++ = *from++;","                        *out++ = *from++;"],"label":0}
{"cve":"CVE-2016-1000005","code_chunks":["  \/* If this function fails, close the mcrypt module to prevent crashes","   * when further functions want to access this resource *\/","  if (result < 0) {","    pm->close();","    switch (result) {","      raise_warning(\"Key length incorrect\");","      break;"],"label":0}
{"cve":"CVE-2017-6889","code_chunks":["void CLASS foveon_load_camf()","{","unsigned type, wide, high, i, j, row, col, diff;","ushort huff[258], vpred[2][2] = {{512,512},{512,512}}, hpred[2];","","fseek (ifp, meta_offset, SEEK_SET);","type = get4();  get4();  get4();"],"label":1}
{"cve":"CVE-2022-45909","code_chunks":["char const *comment = NULL;","int rc ;","","s = strncpy( buf, uri.c_str(), 255 ) ;","","rc = sip_name_addr_d(home, &s, &display, url, &params, &comment) ;","if( rc < 0 ) {"],"label":1}
{"cve":"CVE-2021-46784","code_chunks":["memcpy(line + gopherState->len, pos, llen);","llen += gopherState->len;","gopherState->len = 0;","} else {","memcpy(line, pos, llen);","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInput, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","const TfLiteTensor* axis;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));"],"label":0}
{"cve":"CVE-2021-46784","code_chunks":["continue;","}","} else {","memset(line, '\\0', TEMP_BUF_SIZE);","continue;","}"],"label":1}
{"cve":"CVE-2017-3731","code_chunks":["        return 1;","    if (key) {","        do {","#ifdef HWAES_CAPABLE","            if (HWAES_CAPABLE) {","                HWAES_set_encrypt_key(key, EVP_CIPHER_CTX_key_length(ctx) * 8,","                                      &gctx->ks.ks);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["n_output);","TF_LITE_ENSURE_TYPES_EQ(context, recurrent_to_cell_weights->type,","input_to_forget_weights->type);","","const bool cifg_weights_all_or_none =","((input_to_input_weights != nullptr) &&"],"label":1}
{"cve":"CVE-2021-36080","code_chunks":["if (hdl_dat->byte > dat->byte)                                            \\","{                                                                       \\","dat->byte = hdl_dat->byte;                                            \\","dat->bit = hdl_dat->bit;                                              \\","}                                                                       \\","if (hdl_dat != dat)                                                       \\"],"label":1}
{"cve":"PYSEC-2021-160","code_chunks":["&input_st));","","auto input_shape_t = input_shape->vec<int64>();","const int64 N = input_shape_t(0);","","Tensor sparse_handles(DT_INT64, TensorShape({N}));"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t    !rdp_write_pointer_capability_set(s, settings) ||","\t    !rdp_write_input_capability_set(s, settings) ||","\t    !rdp_write_virtual_channel_capability_set(s, settings) ||","\t    !rdp_write_share_capability_set(s, settings) ||","\t    !rdp_write_font_capability_set(s, settings) ||","\t    !rdp_write_multifragment_update_capability_set(s, settings) ||","\t    !rdp_write_large_pointer_capability_set(s, settings) ||"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    }","    case kTfLiteFloat32: {","      PowImpl<float>(input1, input2, output, data->requires_broadcast);","      break;","    }","    default: {","      context->ReportError(context, \"Unsupported data type: %d\", output->type);"],"label":0}
{"cve":"CVE-2022-1899","code_chunks":["\treturn NULL;","}","","R_API RList *r_bin_file_get_symbols(RBinFile *bf) {","\tr_return_val_if_fail (bf, NULL);","\tRBinObject *o = bf->o;","\treturn o? o->symbols: NULL;"],"label":0}
{"cve":"CVE-2023-23145","code_chunks":["} else {","da->type=SVG_STROKEDASHARRAY_ARRAY;","da->array.count = lsr_read_vluimsbf5(lsr, \"len\");","da->array.vals = (Fixed*)gf_malloc(sizeof(Fixed)*da->array.count);","da->array.units = (u8*)gf_malloc(sizeof(u8)*da->array.count);","if (!da->array.vals || !da->array.units) {"],"label":1}
{"cve":"CVE-2016-4562","code_chunks":["            pixel;","","          register Quantum","            *q;","","          q=GetCacheViewAuthenticPixels(image_view,x,y,1,1,exception);","          if (q == (Quantum *) NULL)"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","WINPR_UNUSED(settings);","if (Stream_GetRemainingLength(s) >= 2)","Stream_Seek_UINT16(s); \/* fontSupportFlags (2 bytes) *\/","","if (Stream_GetRemainingLength(s) >= 2)"],"label":0}
{"cve":"CVE-2024-23325","code_chunks":["std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type, bool skip_unsupported) {","std::vector<std::string> subject_alt_names;","bssl::UniquePtr<GENERAL_NAMES> san_names(","static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(&cert, NID_subject_alt_name, nullptr, nullptr)));"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["        _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM, \"to init reverb\", 0);","        goto _mus_end;","    }","    _WM_midi_setup_endoftrack(mus_mdi);","    mus_mdi->extra_info.current_sample = 0;","    mus_mdi->current_event = &mus_mdi->events[0];","    mus_mdi->samples_to_mix = 0;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["    const TfLiteTensor* projection_weights = GetOptionalInputTensor(","        context, node, lstm::full::kProjectionWeightsTensor);","    if (projection_weights != nullptr) {","      row_sums_rows += ceil(static_cast<float>(n_output) \/ n_cell);","    }","    int row_sums_dims[2] = {row_sums_rows, n_cell};","    if (!TfLiteIntArrayEqualsArray(row_sums->dims, 2, row_sums_dims)) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input1 = GetInput(context, node, 0);","TfLiteTensor* output = GetOutput(context, node, 0);","const int input_dims_size = input1->dims->size;","TF_LITE_ENSURE(context, output->dims->size == input_dims_size);","for (int i = 0; i < input_dims_size; ++i) {","TF_LITE_ENSURE(context,"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["    return kTfLiteError;","  }","","  if (seq_lengths->type != kTfLiteInt32 && seq_lengths->type != kTfLiteInt64) {","    context->ReportError(","        context, \"Seq_lengths type '%s' is not supported by reverse_sequence.\",","        TfLiteTypeGetName(seq_lengths->type));"],"label":0}
{"cve":"CVE-2016-6871","code_chunks":["static Variant HHVM_FUNCTION(bcsqrt, const String& operand,","                             int64_t scale \/* = -1 *\/) {","  scale = adjust_scale(scale);","  bc_num result;","  bc_init_num(&result);","  SCOPE_EXIT {","    bc_free_num(&result);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  const TfLiteTensor* input2;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, \/*index=*\/1, &input2));","","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, \/*index=*\/0, &output));",""],"label":0}
{"cve":"CVE-2018-20179","code_chunks":["int i;","uint16 num_updates;","","in_uint16_le(s, num_updates);   \/* rectangles *\/","","for (i = 0; i < num_updates; i++)"],"label":0}
{"cve":"CVE-2017-9763","code_chunks":["RIOBind *iob = disk->data;","if (bio) iob = bio;","ret = iob->read_at (iob->io, delta+(blocksize*sector),","(ut8*)buf, size*blocksize);","if (ret == -1)","return 1;"],"label":1}
{"cve":"CVE-2019-11413","code_chunks":["if (match(pc->x, sp, bol, flags, &scratch))","return 0;","pc = pc->y;","break;","","sp += chartorune(&c, sp);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["filter, bias, im2col, output);","} else {","TfLiteTensor* accum_scratch =","&context->tensors[node->temporaries","->data[data->accum_scratch_index]];","EvalHybrid<kernel_type>(context, node, params, data, input, filter,"],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["\t\t\t\t\t}","\t\t\t\t\top->len += n;","\t\t\t\t}","\t\t\t\tn = read_u32_leb128 (buf + op->len, buf + buf_len, &def);","\t\t\t\tif (!(n > 0 && n + op->len < buf_len)) {","\t\t\t\t\tgoto beach;","\t\t\t\t}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static int valid_radix(unsigned int radix) {","while (radix > 0) {","if (radix != 1 && radix % 2 == 1)","return 0;"],"label":0}
{"cve":"CVE-2018-20182","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_OK(","      context, GetInputSafe(context, node, lstm::full::kInputTensor, &input));","  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);","  TF_LITE_ENSURE(context, input->dims->size > 1);","  const auto* params =","      reinterpret_cast<TfLiteUnidirectionalSequenceLSTMParams*>(","          node->builtin_data);"],"label":0}
{"cve":"CVE-2016-10161","code_chunks":["yych = *++YYCURSOR;","if (yych != '\"') goto yy18;","++YYCURSOR;","#line 708 \"ext\/standard\/var_unserializer.re\"","{","size_t len, len2, len3, maxlen;","long elements;"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["","memset(&paddedSalt[1], '$', maxSaltLength - 1);","memcpy(paddedSalt, salt, std::min(maxSaltLength, saltLen));","paddedSalt[saltLen] = '\\0';","","if (php_crypt_blowfish_rn(key, paddedSalt, output, sizeof(output))) {","return strdup(output);"],"label":1}
{"cve":"CVE-2021-33910","code_chunks":["        if (empty_or_root(p))","                s = strdup(\"-\");","        else {","                if (!path_is_normalized(p))","                        return -EINVAL;","","                \/* Truncate trailing slashes and skip leading slashes *\/"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["_Py_IDENTIFIER(__dict__);","PyObject *dict;","if (_PyObject_LookupAttrId(self, &PyId___dict__, &dict) < 0) {","return NULL;","}","if (dict) {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLitePackParams* data =","reinterpret_cast<TfLitePackParams*>(node->builtin_data);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","switch (output->type) {","case kTfLiteFloat32: {","return PackImpl<float>(context, node, output, data->values_count,"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["\t\tswitch (bitcount) {","\t\t\t\tcompression = COMPRESSION_CCITTFAX4;","\t\t\t\tbreak;","\t\t\t\tcompression = COMPRESSION_LZW;","\t\t\t\tbreak;","\t\t\t\tcompression = COMPRESSION_JPEG;","\t\t\t\tbreak;"],"label":0}
{"cve":"CVE-2019-13225","code_chunks":["","      snode = NULL_NODE;","    }","","    p += len;","  }",""],"label":0}
{"cve":"CVE-2018-5805","code_chunks":["void CLASS identify()","{","static const short pana[][6] = {","{ 3130, 1743,  4,  0, -6,  0 },","{ 3130, 2055,  4,  0, -6,  0 },"],"label":0}
{"cve":"CVE-2021-23521","code_chunks":["{","for (int i = 5; --i >= 0;)","{","if (temporaryFile.isDirectory() ? temporaryFile.deleteRecursively() : temporaryFile.deleteFile())","return true;","","Thread::sleep (50);"],"label":0}
{"cve":"PYSEC-2022-90","code_chunks":["if (!IsReshape(node)) {","return false;","}","CHECK_LE(2, node.input_size());","const NodeDef* new_shape = node_map_->GetNode(node.input(1));","if (!IsReallyConstant(*new_shape)) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","","switch (input->type) {","return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);"],"label":0}
{"cve":"CVE-2019-13223","code_chunks":["         setup_free(p, r->residue_books);","      }","   }","","   if (p->codebooks) {","      CHECK(p);","      for (i=0; i < p->codebook_count; ++i) {"],"label":0}
{"cve":"CVE-2020-1712","code_chunks":["_cleanup_(sd_bus_message_unrefp) sd_bus_message *reply = NULL;","int authorized = false, challenge = false;","const char *sender, **k, **v;","","sender = sd_bus_message_get_sender(call);","if (!sender)"],"label":1}
{"cve":"CVE-2022-1031","code_chunks":["delay.un_idx = idx;","if (anal->opt.delay && op->delay > 0 && !delay.pending) {","if (anal->verbose) {","eprintf(\"Enter branch delay at 0x%08\"PFMT64x \". bb->sz=%\"PFMT64u\"\\n\", at - oplen, bb->size);","}","delay.idx = idx - oplen;","delay.cnt = op->delay;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t}","\tRLC_FINALLY {","\t\tbn_free(b1);","\t\tbn_free(b2);","\t\tbn_free(t);","\t}","}"],"label":0}
{"cve":"CVE-2020-23932","code_chunks":["","","\t\t\t\t\tfprintf(stderr, \"Selective Encryption: %s\\n\", use_sel_enc ? \"Yes\" : \"No\");","\t\t\t\t\tif (IV_size) fprintf(stderr, \"Initialization Vector size: %d bits\\n\", IV_size*8);","\t\t\t\t} else if(gf_isom_is_cenc_media(file, trackNum, 1)) {","\t\t\t\t\tgf_isom_get_cenc_info(file, trackNum, 1, NULL, &scheme_type, &version, &IV_size);","\t\t\t\t\tfprintf(stderr, \"\\n*Encrypted stream - CENC scheme %s (version: major=%u, minor=%u)\\n\", gf_4cc_to_str(scheme_type), (version&0xFFFF0000)>>16, version&0xFFFF);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const int batch_size = SizeOfDimension(input, 0);","","const float* input_ptr = GetTensorData<float>(input);","int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>("],"label":1}
{"cve":"CVE-2016-5157","code_chunks":["      {","      fprintf(stderr, \"could not parse line from files\\n\" );","      goto cleanup;","      }","    if( strcmp( strbase, strtest ) != 0 )","      {","      fprintf(stderr,\"<%s> vs. <%s>\\n\", strbase, strtest);"],"label":0}
{"cve":"CVE-2021-20224","code_chunks":["pixel=(unsigned char) *indexes++;","*q|=((pixel & 0x01) << 5);","pixel=(unsigned char) (GetPixelOpacity(p) == (Quantum)","TransparentOpacity ? 1 : 0);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;"],"label":1}
{"cve":"CVE-2018-10199","code_chunks":["mrb_bool failed = TRUE;","","mrb_get_args(mrb, \"o\", &orig);","fptr_orig = io_get_open_fptr(mrb, orig);","fptr_copy = (struct mrb_io *)DATA_PTR(copy);","if (fptr_copy != NULL) {","fptr_finalize(mrb, fptr_copy, FALSE);"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["int utf8_strnwidth(const char *string, int len, int skip_ansi);"],"label":1}
{"cve":"CVE-2018-14463","code_chunks":["\t\t\t\tlen, len, IPPROTO_VRRP);","\t\t\tif (cksum)","\t\t\t\tND_PRINT((ndo, \", (bad vrrp cksum %x)\",","\t\t\t\t\tEXTRACT_16BITS(&bp[6])));","\t\t}","","\t\tND_PRINT((ndo, \", addrs\"));"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","  const bool is_hybrid = IsHybridOp(input, input_weights);","","      if (is_hybrid) {","    auto* op_data = reinterpret_cast<OpData*>(node->user_data);","    op_data->compute_row_sums = true;","    TfLiteIntArrayFree(node->temporaries);"],"label":0}
{"cve":"CVE-2020-26570","code_chunks":["\t\/* ID *\/","\tif (offs > info_len)","\t\tLOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, \"Failed to add public key: no 'ID'\");","\tlen = *(info_blob + offs + 1) + *(info_blob + offs) * 0x100;","\tif (!len || len > sizeof(key_info.id.value))","\t\tLOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, \"Failed to add public key: invalid 'ID' length\");","\tmemcpy(key_info.id.value, info_blob + offs + 2, len);"],"label":0}
{"cve":"CVE-2018-20406","code_chunks":["    else {","        header[0] = MARK;","        header[1] = DICT;","        len = 2;","    }","","    if (_Pickler_Write(self, header, len) < 0)"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["perrdetail err;","int iflags = PARSER_FLAGS(flags);","node *n;","","if (feature_version >= 7)","iflags |= PyPARSE_ASYNC_ALWAYS;"],"label":0}
{"cve":"CVE-2018-8793","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["Subgraph* subgraph = reinterpret_cast<Subgraph*>(context->impl_);","","const TfLiteTensor* input_resource_id_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputVariableId,","&input_resource_id_tensor));","const TfLiteTensor* input_value_tensor;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["bw_activation_state_quantized->type = fw_input_to_output_weights->type;","bw_activation_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(bw_activation_state_quantized->dims,"],"label":1}
{"cve":"CVE-2021-44078","code_chunks":["        return UC_ERR_OK;","    }","","    if (type & UC_HOOK_TCG_OPCODE) {","        va_list valist;","","        va_start(valist, end);"],"label":0}
{"cve":"CVE-2016-9841","code_chunks":["else if (op & 16) {                     \/* length base *\/","len = (unsigned)(here.val);","op &= 15;                           \/* number of extra bits *\/","if (op) {","if (bits < op) {","hold += (unsigned long)(PUP(in)) << bits;"],"label":1}
{"cve":"PYSEC-2021-815","code_chunks":["        const Tensor* l1_t;","    OP_REQUIRES_OK(context, context->input(\"l1\", &l1_t));","    const auto l1 = l1_t->scalar<float>()();","    DCHECK_GE(l1, 0);","    if (logits_dim_ > 1) {","            DCHECK_EQ(l1, 0);","    }"],"label":0}
{"cve":"CVE-2022-36879","code_chunks":["\t\/* Fixup the mark to support VTI. *\/","\tskb_mark = skb->mark;","\tskb->mark = pol->mark.v;","\txfrm_decode_session(skb, &fl, dst->ops->family);","\tskb->mark = skb_mark;","\tspin_unlock(&pq->hold_queue.lock);",""],"label":0}
{"cve":"CVE-2018-14395","code_chunks":["uint32_t tag = track->tag;","","if (track->mode == MODE_MOV) {","if (track->timescale > UINT16_MAX) {","if (mov_get_lpcm_flags(track->par->codec_id))","tag = AV_RL32(\"lpcm\");","version = 2;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void eb_read_bin(eb_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["\/* NOTE: free'd when events are cleared during closure of mdi *\/","text = malloc(tmp_length + 1);","memcpy(text, event_data, tmp_length);","text[tmp_length] = '\\0';","midi_setup_copyright(mdi, text);",""],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["    if (setjmp (failure)) {","      if (fileno(ifp) > 2) fclose(ifp);","      if (fileno(ofp) > 2) fclose(ofp);","      status = 1;","      goto cleanup;","    }","    ifname = argv[arg];"],"label":0}
{"cve":"CVE-2016-10169","code_chunks":["wpc->channel_layout += nchans = *byteptr++;","bytecnt--;","","","if (bytecnt) {","if (bytecnt > nchans)"],"label":1}
{"cve":"CVE-2018-5809","code_chunks":["\telse","  \t  derror();","        if (c == 14)","          c = -1;","      }","    }","  }"],"label":0}
{"cve":"CVE-2019-18218","code_chunks":["\t\tcdf_dump_sat(\"SAT\", &sat, CDF_SEC_SIZE(&h));","#endif","","\t\tif (cdf_read_ssat(&info, &h, &sat, &ssat) == -1)","\t\t\terr(EXIT_FAILURE, \"Cannot read ssat\");","#ifdef CDF_DEBUG","\t\tcdf_dump_sat(\"SSAT\", &ssat, CDF_SHORT_SEC_SIZE(&h));"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from Index\");","return 1;","}"],"label":1}
{"cve":"CVE-2022-35972","code_chunks":["    OP_REQUIRES(context, input_min < input_max,","                errors::InvalidArgument(","                    \"input_min must be less than input_max : \", input_min,","                    \" >= \", input_max));","","    auto input_tensor = input.tensor<quint8, 4>();","    auto N = input_tensor.dimension(0);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["fw_activation_state_quantized->type = fw_input_to_output_weights->type;","fw_activation_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(fw_activation_state_quantized->dims,"],"label":1}
{"cve":"CVE-2023-3523","code_chunks":["","\t\tif (nxt_dcsq > psize || nxt_dcsq < dsize) {","\t\t\treturn GF_CORRUPTED_DATA;","\t\t}","","\t\twhile (1) {","\t\t\tu8  cmd;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteIntArrayFree(node->temporaries);","node->temporaries = TfLiteIntArrayCreate(6);","node->temporaries->data[0] = op_data->scratch_tensor_index;","TfLiteTensor* input_quantized = GetTemporary(context, node, \/*index=*\/0);","input_quantized->type = input_weights->type;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2023-5595","code_chunks":["if (e) break;","","switch (a->type) {","if (s->styles) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kWeightsFeatureTensor,","&weights_feature));","const TfLiteTensor* weights_time;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTimeTensor, &weights_time));","const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);",""],"label":0}
{"cve":"CVE-2018-16640","code_chunks":["static Image *ReadOneJNGImage(MngInfo *mng_info,","const ImageInfo *image_info, ExceptionInfo *exception)","{","Image","*alpha_image,","*color_image,"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["        SetTensorToPersistentRo(output);","","    TfLiteIntArray* output_size = TfLiteIntArrayCreate(0);","  TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_size));","","  TF_LITE_ENSURE_EQ(context, NumDimensions(output), 0);",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* fft_length;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFftLengthTensor, &fft_length));","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["break;","}","","setup_ret = _WM_SetupMidiEvent(mus_mdi, (uint8_t *)mus_event, 0);","if (setup_ret == 0) {","goto _mus_end;","}"],"label":1}
{"cve":"CVE-2019-11338","code_chunks":["}","","if (s->avctx->hwaccel) {","ret = s->avctx->hwaccel->decode_slice(s->avctx, nal->raw_data, nal->raw_size);","if (ret < 0)","goto fail;"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["CHECK_HANDLE(handle, f);","int64_t ret = f->write(data, length);","if (ret < 0) {","raise_notice(\"fwrite(): send of %ld bytes failed with errno=%d %s\",","data.size(), errno, folly::errnoStr(errno).c_str());","ret = 0;","}"],"label":0}
{"cve":"CVE-2022-23595","code_chunks":["    return std::make_shared<se::TfAllocatorAdapter>(alloc, platform);","  }","  return std::make_shared<se::TfAllocatorAdapter>(alloc, stream);","}","","XlaCompiler::Options GenerateCompilerOptions(","    const XlaCompilationCache& cache,"],"label":0}
{"cve":"CVE-2022-24792","code_chunks":["\/*"," * Get frame from file for file_list operation"," *\/","static pj_status_t file_list_get_frame(pjmedia_port *this_port,","\t\t\t\t       pjmedia_frame *frame)","{","    struct playlist_port *fport = (struct playlist_port*)this_port;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["}","","TfLiteTensor* log_probability_output =","GetOutput(context, node, top_paths * 3);","TfLiteIntArray* log_probability_output_shape_array = TfLiteIntArrayCreate(2);","log_probability_output_shape_array->data[0] = batch_size;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"CVE-2021-32134","code_chunks":["break;","} else return GF_ISOM_INVALID_MEDIA;","","case GF_ISOM_SUBTYPE_OPUS: {","GF_OpusSpecificBox *e = ((GF_MPEGAudioSampleEntryBox*)entry)->cfg_opus;","GF_BitStream *bs_out;","if (!e) {"],"label":1}
{"cve":"CVE-2018-25032","code_chunks":["} \/* literal or match pair ? *\/","","\/* Check that the overlay between pending_buf and d_buf+l_buf is ok: *\/","Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,","\"pendingBuf overflow\");",""],"label":1}
{"cve":"CVE-2019-19960","code_chunks":["break;","#endif \/* WC_NO_CACHE_RESISTANT *\/","} \/* end for *\/","}","","\/* copy result out *\/"],"label":1}
{"cve":"CVE-2016-10190","code_chunks":["    s->end_header       = 0;","    if (post && !s->post_data && !send_expect_100) {","        \/* Pretend that it did work. We didn't read any header yet, since","         * we've still to send the POST data, but the code calling this","         * function will check http_code after we return. *\/","        s->http_code = 200;","        err = 0;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["arg(identifier arg, expr_ty annotation, string type_comment, int lineno, int","col_offset, int end_lineno, int end_col_offset, PyArena *arena)","{","arg_ty p;","if (!arg) {"],"label":0}
{"cve":"CVE-2019-19603","code_chunks":["  pList->a = sqlite3ArrayAllocate(","      db,","      pList->a,","      sizeof(pList->a[0]),","      &pList->nId,","      &i","  );"],"label":0}
{"cve":"CVE-2022-0139","code_chunks":["}","while (entry && r_io_submap_to (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {","RRBNode *next = r_rbnode_next (entry);","r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);","entry = next;","}","if (entry && r_io_submap_from (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {"],"label":1}
{"cve":"PYSEC-2021-773","code_chunks":["std::vector<int32> output_thresholds;","std::vector<Eigen::VectorXf> output_left_node_contribs;","std::vector<Eigen::VectorXf> output_right_node_contribs;","std::vector<string> output_split_types;","","for (int32_t node_id = node_id_first; node_id < node_id_last; ++node_id) {","float best_gain = std::numeric_limits<float>::lowest();"],"label":1}
{"cve":"CVE-2016-3120","code_chunks":["return(KDC_ERR_MUST_USE_USER2USER);","}","","if (check_anon(kdc_active_realm, request->client, request->server) != 0) {","*status = \"ANONYMOUS NOT ALLOWED\";","return(KDC_ERR_POLICY);","}"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["Module(asdl_seq * body, asdl_seq * type_ignores, PyArena *arena)","{","mod_ty p;","p = (mod_ty)PyArena_Malloc(arena, sizeof(*p));"],"label":0}
{"cve":"CVE-2018-20174","code_chunks":["\t\t\t\treplen = code & 0xf;","\t\t\t\tcollen = (code >> 4) & 0xf;","\t\t\t\trevcode = (replen << 4) | collen;","\t\t\t\tif ((revcode <= 47) && (revcode >= 16))","\t\t\t\t{","\t\t\t\t\treplen = revcode;","\t\t\t\t\tcollen = 0;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"CVE-2023-4322","code_chunks":["return false;","}","","ut8 *buf = (ut8*)_buf; \tut64 dst = 0LL;","if (!op) {","return 1;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["input_quantized->type = kTfLiteInt8;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2020-1913","code_chunks":["const uint8_t *tablestart = (const uint8_t *)llvh::alignAddr(","(const uint8_t *)ip + ip->iSwitchImm.op2, sizeof(uint32_t));","","const uint32_t *loc ="],"label":1}
{"cve":"CVE-2018-8793","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"CVE-2022-1619","code_chunks":["else if (c == Ctrl_W)","{","while (p > ccline.cmdbuff && vim_isspace(p[-1]))","--p;","i = vim_iswordc(p[-1]);","while (p > ccline.cmdbuff && !vim_isspace(p[-1])"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, kScratchBuffer,","                                              &scratch_buffer));","","  TfLiteTensor* output_state =","      GetVariableInput(context, node, lstm::full::kOutputStateTensor);","  TFLITE_DCHECK(output_state != nullptr);","  TfLiteTensor* cell_state ="],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (!o) {","Py_RETURN_NONE;","}"],"label":0}
{"cve":"CVE-2018-20750","code_chunks":["will safely be allocated since this check will never trigger and malloc() can digest length+1","without problems as length is a uint32_t.","*\/","if(length == SIZE_MAX) {","rfbErr(\"rfbProcessFileTransferReadBuffer: too big file transfer length requested: %u\", (unsigned int)length);","rfbCloseClient(cl);","return NULL;"],"label":1}
{"cve":"CVE-2023-30186","code_chunks":["","LOGGER_SPEED_LAP(\"compile_command\")","","JSSmart<CJSValue> retNativeVal = m_context->runScript(commandA, try_catch);","if(try_catch->Check())","return false;",""],"label":1}
{"cve":"CVE-2016-2324","code_chunks":["typedef void (*show_object_fn)(struct object *, struct strbuf *, const char *, void *);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["reinterpret_cast<TfLitePackParams*>(node->builtin_data);","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","switch (output->type) {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE(context, bw_activation_state != nullptr);","TfLiteTensor* bw_cell_state =","GetVariableInput(context, node, kBwInputCellStateTensor);","TF_LITE_ENSURE(context, bw_cell_state != nullptr);"],"label":1}
{"cve":"CVE-2019-18853","code_chunks":["  entry->mime_type=ConstantString(\"image\/svg+xml\");","  if (*version != '\\0')","    entry->version=ConstantString(version);","  entry->magick=(IsImageFormatHandler *) IsSVG;","  (void) RegisterMagickInfo(entry);","  entry=AcquireMagickInfo(\"SVG\",\"MSVG\",","    \"ImageMagick's own SVG internal renderer\");"],"label":0}
{"cve":"CVE-2022-2453","code_chunks":["BD_CheckSFTimeOffset(codec, node, &inf);","}","}","break;","}","}"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["excepthandler_ty o = (excepthandler_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"CVE-2021-43848","code_chunks":["int handle_input_expect_data(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src, const uint8_t *src_end,","const char **err_desc)","{","h2o_http3_read_frame_t frame;","int ret;"],"label":1}
{"cve":"CVE-2018-5808","code_chunks":["      if (r % tile_length == 0) {","\tfseek (ifp, data_offset + 4*tile++, SEEK_SET);","\tfseek (ifp, get4(), SEEK_SET);","      }","      if (filters && c != shot_select) continue;","      if (filters) pixel = raw_image + r*raw_width;","      read_shorts (pixel, raw_width);"],"label":0}
{"cve":"CVE-2023-45145","code_chunks":["static int anetListen(char *err, int s, struct sockaddr *sa, socklen_t len, int backlog) {","if (bind(s,sa,len) == -1) {","anetSetError(err, \"bind: %s\", strerror(errno));","close(s);"],"label":1}
{"cve":"CVE-2019-19645","code_chunks":["Select *pSelect = sParse.pNewTable->pSelect;","if( pSelect ){","sParse.rc = SQLITE_OK;","sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);","rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);","if( rc==SQLITE_OK ){","sqlite3WalkSelect(&sWalker, pSelect);"],"label":1}
{"cve":"CVE-2019-19333","code_chunks":["            ret = lyp_parse_value(t, value_, xml, leaf, attr, NULL, store, dflt, 0);","            if (ret) {","                \/* we have the result *\/","                type = ret;","                break;","            }",""],"label":0}
{"cve":"CVE-2021-4110","code_chunks":["  }","  return blk;","}","","mrb_int","mrb_proc_arity(const struct RProc *p)","{"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep2_map(ep2_t p, const uint8_t *msg, int len);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");"],"label":0}
{"cve":"CVE-2016-10011","code_chunks":["u_char buf[1024];","size_t len;","struct stat st;","int r;","","if (fstat(fd, &st) < 0)","return SSH_ERR_SYSTEM_ERROR;"],"label":1}
{"cve":"CVE-2020-14397","code_chunks":["sraSpanRemove(sraSpan *span) {","if(span) {","span->_prev->_next = span->_next;","span->_next->_prev = span->_prev;","}","}"],"label":0}
{"cve":"CVE-2020-5238","code_chunks":["cmark_arena_push();","","header_row = row_from_string(self, parser, (unsigned char *)parent_string,","(int)strlen(parent_string));","","if (!header_row) {"],"label":1}
{"cve":"PYSEC-2020-273","code_chunks":["  auto tf_dlm_type = GetDlDataType(data_type, status);","  if (!status->status.ok()) {","    return nullptr;","  }","","  TensorReference tensor_ref(*tensor);    auto* tf_dlm_tensor_ctx = new TfDlManagedTensorCtx(tensor_ref);","  tf_dlm_tensor_ctx->reference = tensor_ref;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp12_write_bin(uint8_t *bin, int len, const fp12_t a, int pack);"],"label":1}
{"cve":"CVE-2018-20174","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    }","  }","","  TfLiteFusedActivation activation = fc_params->activation;","  if (activation == kTfLiteActSignBit) {","    return false;","  }"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["Subgraph& active_branch_subgraph =","*(*subgraphs)[active_branch_subgraph_index];","for (int i = 0; i < active_branch_subgraph.inputs().size(); ++i) {","const TfLiteTensor* input = GetInput(context, node, i + 1);","TfLiteTensor* subgraph_input =","active_branch_subgraph.tensor(active_branch_subgraph.inputs()[i]);","TF_LITE_ENSURE_EQ(context, input->bytes, subgraph_input->bytes);"],"label":1}
{"cve":"CVE-2016-9388","code_chunks":["} else {","jas_matrix_setv(data[0], x, (v));","}","}","if (pad) {","if ((c = jas_stream_getc(in)) == EOF) {"],"label":1}
{"cve":"CVE-2018-8792","code_chunks":["{","color = CVAL(in);","*out = color;","out += 4;","indexw++;","collen--;"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["if (*ch != 'm')","break;","p = ch - 1;","while (ch - p < 10 && *p != '\\033')","p--;","if (*p != '\\033' ||","ch + 1 - p != display_mode_esc_sequence_len(p))"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\tbn_mul(t1, t1, t0);","\t\t\t\tbn_add(p, p, t1);","\t\t\t\tbn_mul_dig(t1, t1, 3);","\t\t\t\tbn_add(p, p, t1);","\t\t\t\tbn_mul(t1, t1, t0);","\t\t\t\tbn_add(p, p, t1);","\t\t\t\tbn_mul_dig(t1, t1, 27);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(values, i, val);","            }","            Py_CLEAR(tmp);"],"label":0}
{"cve":"CVE-2022-3299","code_chunks":["static int multi_timer_cb(CURLM *multi, long timeout_ms, void *cbp)","{","    ogs_sbi_client_t *client = NULL;","    ogs_timer_t *timer = NULL;","","    client = cbp;","    ogs_assert(client);"],"label":0}
{"cve":"CVE-2022-39269","code_chunks":["*\/","pjmedia_transport_srtp_stop((pjmedia_transport*)srtp);","","tx = srtp->tx_policy;"],"label":1}
{"cve":"CVE-2018-16393","code_chunks":["buf[1] = oid[3];","if(buf[0] == 0x00 && buf[1] == 0x00) continue; \/* No directories\/null names outside of root *\/","buf += 2;","count+=2;","}","}","return count;"],"label":1}
{"cve":"CVE-2024-0727","code_chunks":["int ctype_nid = OBJ_obj2nid(p7->type);","const PKCS7_CTX *ctx = ossl_pkcs7_get0_ctx(p7);","","if (ctype_nid == NID_pkcs7_signed)"],"label":1}
{"cve":"CVE-2016-7520","code_chunks":["        {","          int","            exponent;","","          gamma=frexp(gamma,&exponent)*256.0\/gamma;","          pixel[0]=(unsigned char) (gamma*QuantumScale*GetPixelRed(image,p));","          pixel[1]=(unsigned char) (gamma*QuantumScale*GetPixelGreen(image,p));"],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,255);","else","gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,65535);","fseek (ifp, data_offset, SEEK_SET);"],"label":1}
{"cve":"CVE-2016-8649","code_chunks":[],"label":1}
{"cve":"CVE-2018-20175","code_chunks":["\t\t{","\t\t\twhile (indexw < width)","\t\t\t{","\t\t\t\tcode = CVAL(in);","\t\t\t\treplen = code & 0xf;","\t\t\t\tcollen = (code >> 4) & 0xf;","\t\t\t\trevcode = (replen << 4) | collen;"],"label":0}
{"cve":"CVE-2022-28049","code_chunks":["    return sizeof(njs_vmcode_3addr_t);","}","","","static njs_jump_off_t","njs_vmcode_property_foreach(njs_vm_t *vm, njs_value_t *object,","    njs_value_t *invld, u_char *pc)"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["GetOutput(context, node, kSoftNMSOutputTensorSelectedScores);","output_num_selected_indices =","GetOutput(context, node, kSoftNMSOutputTensorNumSelectedIndices);","if (!is_max_output_size_const) {","SetTensorSizes(context, output_selected_indices, {max_output_size_value});","SetTensorSizes(context, output_selected_scores, {max_output_size_value});"],"label":1}
{"cve":"CVE-2022-23586","code_chunks":["for (size_t i = 0; i < dtypes.size(); ++i) {","TF_RETURN_IF_ERROR(AddItem(strings::StrCat(arg_def.name(), \":\", i),","{true, arg_index, 0, false, {dtypes[i]}}));","DCHECK_EQ(arg_index, result_.nodes.size());","string name = arg_def.name();","if (dtypes.size() > 1) {","strings::StrAppend(&name, \"_\", i);"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["#if defined(ENVOY_ENABLE_QUIC)","  EXPECT_THROW_WITH_REGEX(manager_->addOrUpdateListener(listener_proto, \"\", true), EnvoyException,","                          \"error building network filter chain for quic listener: requires exactly \"","                          \"one http_connection_manager filter.\");","#else","  EXPECT_THROW_WITH_REGEX(manager_->addOrUpdateListener(listener_proto, \"\", true), EnvoyException,","                          \"QUIC is configured but not enabled in the build.\");"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp_read_bin(fp_t a, const uint8_t *bin, int len) {","bn_t t;","","bn_null(t);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input_resource_id_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputResourceIdTensor,","&input_resource_id_tensor));","int resource_id = input_resource_id_tensor->data.i32[0];","","TfLiteTensor* output_tensor;"],"label":0}
{"cve":"CVE-2022-25139","code_chunks":["return ret;","}","","ret = njs_vmcode_interpreter(vm, vm->start);","","return (ret == NJS_ERROR) ? NJS_ERROR : NJS_OK;","}"],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["        frame->class_name[strobelight::kClassNameMax - 1] = '\\0';","      }","","      auto const function_name = bt_frame->get(s_function.get());","      if (function_name.is_init()) {","        assertx(isStringType(type(function_name)));","        strncpy(frame->function,"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int fb_size_str(const fb_t a, int radix);"],"label":1}
{"cve":"CVE-2022-43995","code_chunks":["int","sudo_passwd_cleanup(struct passwd *pw, sudo_auth *auth, bool force)","{","    char *pw_epasswd = auth->data;","    debug_decl(sudo_passwd_cleanup, SUDOERS_DEBUG_AUTH);","","    if (pw_epasswd != NULL)"],"label":0}
{"cve":"CVE-2022-31624","code_chunks":["else if (output_type == OUTPUT_SYSLOG)","closelog();","","(void) free(big_buffer);","flogger_mutex_destroy(&lock_operations);"],"label":1}
{"cve":"CVE-2021-21323","code_chunks":["","    void OnHostnameResults(const std::vector<net::HostPortPair>& hosts) override {","    NOTREACHED();","  }","};","","void OnBeforeURLRequestAdBlockTP(const ResponseCallback& next_callback,"],"label":0}
{"cve":"CVE-2021-29464","code_chunks":["                                      << boxData.size_ << std::endl;","#endif","                            if (outIo.write(boxData.pData_, boxData.size_) != boxData.size_) throw Error(kerImageWriteFailed);","                        }","                    }","","                    if (writeXmpFromPacket() == false)"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params =","reinterpret_cast<TfLiteResizeBilinearParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["\t\t\t}","","\t\t\t\t\t\tBITMAPINFOHEADER bih;","\t\t\thFile->Seek(off + icon_list[page].dwImageOffset, SEEK_SET);","","\t\t\tif (icon_list[page].bWidth==0 && icon_list[page].bHeight==0)","\t\t\t{\t#if CXIMAGE_SUPPORT_PNG"],"label":0}
{"cve":"CVE-2018-8791","code_chunks":["STREAM s;","int length;","int tagval;","struct stream packet;","","s = tcp_recv(NULL, 4);"],"label":0}
{"cve":"PYSEC-2020-293","code_chunks":["const int segment_id_size = segment_ids->dims->data[0];","if (segment_id_size > 0) {","max_index = segment_ids->data.i32[segment_id_size - 1];","}","const int data_rank = NumDimensions(data);","TfLiteIntArray* output_shape = TfLiteIntArrayCreate(NumDimensions(data));"],"label":1}
{"cve":"CVE-2017-11719","code_chunks":["uint64_t header_prefix;","if (buf_size < 0x280) {","av_log(ctx->avctx, AV_LOG_ERROR,","\"buffer too small (%d < 640).\\n\", buf_size);","return AVERROR_INVALIDDATA;","}"],"label":0}
{"cve":"CVE-2021-40566","code_chunks":["\/*decode DSI*\/","e = gf_m4v_get_config(p->value.data.ptr, p->value.data.size, &dsi);","if (e) return e;","if (!dsi.width || !dsi.height) return GF_NON_COMPLIANT_BITSTREAM;","","memset(&par, 0, sizeof(par));","par.width = dsi.width;"],"label":1}
{"cve":"CVE-2023-47470","code_chunks":["goto fail;","}","","for (int i = 0; i < sps->num_ref_pic_list_in_sps[0]; ++i)"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (!ti)","goto out;","asdl_seq_SET(type_ignores, i, ti);","}"],"label":1}
{"cve":"CVE-2023-28101","code_chunks":["flatpak_context_set_persistent (FlatpakContext *context,","const char     *path)","{","g_hash_table_insert (context->persistent, g_strdup (path), GINT_TO_POINTER (1));","}"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["}","else {","int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["collect_some_attrs(istate, path, check);","","for (i = 0; i < check->nr; i++) {","size_t n = check->items[i].attr->attr_nr;","const char *value = check->all_attrs[n].value;","if (value == ATTR__UNKNOWN)","value = ATTR__UNSET;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2020-27764","code_chunks":["    *list;","","  register ssize_t","    channel;","","  size_t","    color,"],"label":0}
{"cve":"CVE-2016-10129","code_chunks":["\t}","","\t\/*","\t * If we were given a buffer length, then make sure there is","\t * enough in the buffer to satisfy this line","\t *\/","\tif (bufflen > 0 && bufflen < (size_t)len)"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["        if (tmp_st != PJ_SUCCESS)","            pj_perror(4, ds->base.name, tmp_st, \"Failed starting DTLS nego\");","    }","}","","","\/* *************************************"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["prod_scaling_factors->type = kTfLiteFloat32;","prod_scaling_factors->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(prod_scaling_factors->dims, 1,"],"label":1}
{"cve":"CVE-2020-1898","code_chunks":["    HHVM_FE(fb_intercept2);","    HHVM_FE(fb_rename_function);","    HHVM_FE(fb_get_code_coverage);","    HHVM_FE(fb_enable_code_coverage);","    HHVM_FE(fb_disable_code_coverage);","    HHVM_FE(fb_output_compression);","    HHVM_FE(fb_set_exit_callback);"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["uint8_t data_2 = 0;","char *text = NULL;","","if (!siz) goto shortbuf;","","if (event_data[0] >= 0x80) {","command = *event_data & 0xf0;"],"label":0}
{"cve":"CVE-2019-11338","code_chunks":["break;","ret = ff_hevc_decode_nal_sei(gb, s->avctx, &s->sei, &s->ps, s->nal_unit_type);","if (ret < 0)","goto fail;","break;","ret = hls_slice_header(s);"],"label":0}
{"cve":"CVE-2020-11048","code_chunks":["if (Stream_GetRemainingLength(s) < 2)","return FALSE;","","\/* Share Control Header *\/","Stream_Read_UINT16(s, len); \/* totalLength *\/",""],"label":0}
{"cve":"CVE-2018-11380","code_chunks":["const char *symstr;","","if (!bin->symtab || !bin->symstr || !bin->sects || !bin->indirectsyms) {","return NULL;","}","if (bin->dysymtab.nundefsym < 1 || bin->dysymtab.nundefsym > 0xfffff) {"],"label":0}
{"cve":"CVE-2017-5507","code_chunks":["\/*","Create image colormap.","*\/","if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)","ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");","if (image->colors != 0)","{"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\tflags |= REDIRECTED_SMARTCARD;","","\tStream_Write_UINT32(s, flags);                         \/* flags *\/","\tStream_Write_UINT32(s, settings->RedirectedSessionId); \/* redirectedSessionID *\/","}","","\/**"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_HasAttrId(obj, &PyId_lineno)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_lineno);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"CVE-2022-0696","code_chunks":["* Returns FAIL if something is wrong.","*\/","int","parse_compl_arg(","char_u\t*value,","int\t\tvallen,"],"label":1}
{"cve":"CVE-2021-32137","code_chunks":["GF_DataMap *map;","GF_Err e;","if (!mdia || !dataEntryIndex || dataEntryIndex > gf_list_count(mdia->information->dataInformation->dref->child_boxes)) return GF_BAD_PARAM;","","entry = (GF_DataEntryURLBox*)gf_list_get(mdia->information->dataInformation->dref->child_boxes, dataEntryIndex - 1);","if (!entry) return GF_ISOM_INVALID_FILE;","if (entry->flags == 1) return GF_OK;"],"label":0}
{"cve":"CVE-2017-11462","code_chunks":["","\t\/* copy the supplied context handle *\/","\tunion_ctx_id->internal_ctx_id = GSS_C_NO_CONTEXT;","    } else {","\tunion_ctx_id = (gss_union_ctx_id_t)*context_handle;","\tif (union_ctx_id->internal_ctx_id == GSS_C_NO_CONTEXT) {","\t    status = GSS_S_NO_CONTEXT;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["return Call(left_expr, NULL, NULL, LINENO(n),","n->n_col_offset, c->c_arena);","else","return ast_for_call(c, CHILD(n, 1), left_expr);","}","else if (TYPE(CHILD(n, 0)) == DOT) {","PyObject *attr_id = NEW_IDENTIFIER(CHILD(n, 1));"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["break;","","","{ if (yang_read_extcomplex_str(trg, ext_instance, \"error-message\", ext_name, s,","0, LY_STMT_ERRMSG)) {","YYABORT;","}"],"label":1}
{"cve":"CVE-2022-1908","code_chunks":["result->value[i++] = (char) *data++;","}","\/* self closing tag '\/>' *\/","if (*(data - 1) == '\/' && *data == '>') {","--data; --i;","}","result->end = data;"],"label":1}
{"cve":"CVE-2018-5809","code_chunks":["#ifdef LIBRAW_LIBRARY_BUILD","imgdata.lens.FocalLengthIn35mmFormat = get2();","break;","stmread(imgdata.shootinginfo.BodySerial, len, ifp);","break;","imgdata.lens.MinFocal = getreal(type);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["                tflite::micro::GetTensorData<uint8_t>(input), op_data->input_zp,","                op_data->input_scale, input->dims->data, input->dims->size,","                tflite::micro::GetTensorData<uint8_t>(output),","                op_data->output_zp, op_data->output_scale, output->dims->data,","                output->dims->size, tflite::micro::GetTensorData<int>(axis),","                num_axis, params->keep_dims, temp_index, resolved_axis,","                temp_buffer, false));"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["tmp = _PyObject_GetAttrId(obj, &PyId_values);","if (tmp == NULL) goto failed;","if (!PyList_Check(tmp)) {","PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","goto failed;","}"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        if (*out == NULL) goto failed;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)Raise_type);","    if (isinstance == -1) {","        return 1;","    }"],"label":0}
{"cve":"CVE-2019-16778","code_chunks":["OP_REQUIRES_OK(context, context->allocate_output(0, output_shape, &output));","auto output_flat = output->flat_outer_dims<T>();","auto data_ptr = data.template flat<T>().data();","reduction_functor_(context, output_rows, segment_ids.shape(), segment_flat,","data.NumElements(), data_ptr, output_flat);","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);","output->type = input2->type;"],"label":1}
{"cve":"CVE-2021-32628","code_chunks":["","if (o->encoding != OBJ_ENCODING_ZIPLIST) return;","","for (i = start; i <= end; i++) {","if (!sdsEncodedObject(argv[i]))","continue;"],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["\/* Remember only PE-COFF and FIT images *\/","if (efi_check_pe(buffer, buffer_size, NULL) != EFI_SUCCESS) {","#ifdef CONFIG_FIT","if (!fit_check_format(buffer))","return;","\/*","* FIT images of type EFI_OS are started via command bootm."],"label":1}
{"cve":"CVE-2018-18311","code_chunks":["I32 i;","const I32 len = strlen(nam);","int nlen, vlen;","","\/* where does it go? *\/"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);","if (*out == NULL) goto failed;","return 0;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["const bn_t m) {","bn_t n, _k, _m;","ep2_t t[5];","int i, l, u_i, offset;","int8_t jsf[2 * (RLC_FP_BITS + 1)];","","if (bn_is_zero(k) || ep2_is_infty(p)) {"],"label":1}
{"cve":"CVE-2018-20406","code_chunks":["        PyErr_SetString(PyExc_AttributeError, \"persistent_load\");","        return NULL;","    }","    return reconstruct_method(self->pers_func, self->pers_func_self);","}","","static int"],"label":0}
{"cve":"PYSEC-2021-390","code_chunks":["      Tensor output;","      CHECK(output.CopyFrom(collapsed_output, output_shape));","      context->set_output(0, output);","    } else {","      Tensor* output = nullptr;","      OP_REQUIRES_OK(context,","                     context->allocate_output(0, output_shape, &output));"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["return \"Param\";","assert(0);","return \"(unknown)\";","}"],"label":1}
{"cve":"CVE-2020-5208","code_chunks":["{","static uint32_t fru_data_rqst_size = 20;","uint32_t off = offset;","uint32_t tmp, finish;","uint32_t size_left_in_buffer;","struct ipmi_rs * rsp;"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["last_tick_id = center->create_time_event(inactive_timeout_us, tick_handler);","","write_lock.lock();","can_write = WriteStatus::CANWRITE;","if (is_queued())","center->dispatch_event_external(write_handler);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["}","len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty value;"],"label":1}
{"cve":"CVE-2022-0476","code_chunks":["st64 o_addr = r_buf_seek (b, 0, R_BUF_CUR);","if (r_buf_seek (b, addr, R_BUF_SET) == -1) {","return NULL;","}","struct minidump_module *module = R_NEW0 (struct minidump_module);","if (!module) {"],"label":0}
{"cve":"CVE-2022-32234","code_chunks":["    report_bad_alloc_error(\"SmallVector capacity overflow during allocation\");","","  void *NewElts;","  if (BeginX == FirstEl) {","    NewElts = safe_malloc(NewCapacity * TSize);","","        memcpy(NewElts, this->BeginX, size() * TSize);"],"label":0}
{"cve":"CVE-2016-2315","code_chunks":["\tGetThreadCache(&p, &tc, &mymspace, &size);","#if THREADCACHEMAX","\tif(tc && size<=THREADCACHEMAX)","\t{\t\/* Use the thread cache *\/","\t\tret=threadcache_malloc(p, tc, &size);","\t}","#endif"],"label":0}
{"cve":"CVE-2018-20180","code_chunks":["\t\tout = (org_out + width * height * 4) - ((indexh + 1) * width * 4);","\t\tcolor = 0;","\t\tthis_line = out;","\t\tindexw = 0;","\t\tif (last_line == 0)","\t\t{","\t\t\twhile (indexw < width)"],"label":0}
{"cve":"CVE-2016-9840","code_chunks":["break;","base = lbase;","base -= 257;","extra = lext;","extra -= 257;","end = 256;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","","return context->ResizeTensor(context, output,"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["GetInput(context, node, kInputResourceIdTensor);","TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, NumDimensions(input_resource_id_tensor), 1);","TF_LITE_ENSURE_EQ(context, SizeOfDimension(input_resource_id_tensor, 0), 1);","","const TfLiteTensor* default_value_tensor ="],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["bool has_dynamic_output_tensors = false;","for (auto* subgraph : {then_subgraph, else_subgraph}) {","for (int i = 0; i < num_inputs; ++i) {","const TfLiteTensor* input = GetInput(context, node, i + 1);","std::vector<int> dims(input->dims->data,","input->dims->data + input->dims->size);","subgraph->ResizeInputTensor(i, dims);"],"label":1}
{"cve":"PYSEC-2021-629","code_chunks":["          group_key_t.shape().DebugString());","    }","","    auto group_size = group_size_t.unaligned_flat<int32>()(0);","    if (group_size <= 0) {","      return errors::InvalidArgument(","          \"group_size must be positive integer but got \", group_size);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output1 = GetOutput(context, node, 1);","TF_LITE_ENSURE_STATUS(context->ResizeTensor(","context, output1, TfLiteIntArrayCopy(input->dims)));","return kTfLiteOk;"],"label":1}
{"cve":"CVE-2022-25139","code_chunks":["","if (frame->exception.catch != NULL) {","e = njs_mp_alloc(vm->mem_pool, sizeof(njs_exception_t));","if (njs_slow_path(e == NULL)) {","njs_memory_error(vm);","return NJS_ERROR;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* fft_integer_working_area =","GetTemporary(context, node, kFftIntegerWorkingAreaTensor);","TfLiteTensor* fft_double_working_area =","GetTemporary(context, node, kFftDoubleWorkingAreaTensor);","SetTensorToDynamic(fft_integer_working_area);","SetTensorToDynamic(fft_double_working_area);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["                        vararg->type_comment = NEW_TYPE_COMMENT(CHILD(n, i));","                        if (!vararg->type_comment)","                            return NULL;","                        i += 1;","                    }","","                    if (i < NCH(n) && (TYPE(CHILD(n, i)) == tfpdef"],"label":0}
{"cve":"CVE-2019-20911","code_chunks":["      error = dwg_encode_ATTRIB (dat, obj);","      break;","      error = dwg_encode_ATTDEF (dat, obj);","      break;","      error = dwg_encode_BLOCK (dat, obj);","      break;","      error = dwg_encode_ENDBLK (dat, obj);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["if (IsDynamicTensor(output)) {","has_dynamic_output_tensors = true;","break;","}","}",""],"label":1}
{"cve":"PYSEC-2021-748","code_chunks":["      }","    } else {","                  out->emplace_back();","      tensor_proto_strs.emplace_back();","      tstring& tensor_proto_str = tensor_proto_strs.back();","      tensor_proto_str.resize_uninitialized(metadata.tensor_size_bytes());","      iov[i].iov_base = tensor_proto_str.mdata();"],"label":0}
{"cve":"CVE-2018-11378","code_chunks":["\t\t\tst32 val = 0;","\t\t\tsize_t n = read_i32_leb128 (buf + 1, buf + buf_len, &val);","\t\t\tif (!(n > 0 && n < buf_len)) goto err;","\t\t\tswitch (0x80 - val) {","\t\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s\", opdef->txt);","\t\t\t\tbreak;","\t\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s (result i32)\", opdef->txt);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["{","assert(PyUnicode_Check(name));","if (_PyUnicode_EqualToASCIIString(name, \"__debug__\")) {","ast_error(c, n, \"assignment to keyword\");","return 1;","}"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["int Pipe::connect()","{","  bool got_bad_auth = false;","","  ldout(msgr->cct,10) << \"connect \" << connect_seq << dendl;","  assert(pipe_lock.is_locked());",""],"label":0}
{"cve":"CVE-2020-1919","code_chunks":["sa->sun_family = AF_UNIX;","if (addr.length() > sizeof(sa->sun_path)) {","raise_warning(","\"Unix socket path length (%d) is larger than system limit (%lu)\",","addr.length(),","sizeof(sa->sun_path)",");"],"label":1}
{"cve":"CVE-2019-16346","code_chunks":["break;","}","#ifndef NGIFLIB_INDEXED_ONLY","if(p->mode & NGIFLIB_MODE_INDEXED) {","#endif \/* NGIFLIB_INDEXED_ONLY *\/","#ifdef NGIFLIB_ENABLE_CALLBACKS"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["};","reg.invoke = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* a0 = GetInput(context, node, 0);","TfLiteTensor* a1 = GetOutput(context, node, 0);","int num = a0->dims->data[0];","for (int i = 0; i < num; i++) {"],"label":1}
{"cve":"CVE-2020-1712","code_chunks":["sd_bus_slot_unref(q->slot);","","if (q->registry && q->request)","hashmap_remove(q->registry, q->request);","","sd_bus_message_unref(q->request);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":[],"label":1}
{"cve":"CVE-2021-30014","code_chunks":["if (vui_flag_pos) *vui_flag_pos = 0;","","sps_id = gf_bs_read_int_log(bs, 4, \"sps_id\");","if (sps_id >= 16) {"],"label":1}
{"cve":"CVE-2018-8793","code_chunks":["\tin_uint8(s, ctype);","\tin_uint16_le(s, clen);","\tclen -= 18;","","\tif (ctype & RDP_MPPC_COMPRESSED)","\t{","\t\tif (len > RDP_MPPC_DICT_SIZE)"],"label":0}
{"cve":"CVE-2020-36177","code_chunks":["        do {","#ifdef SHOW_GEN","            printf(\".\");","            fflush(stdout);","#endif","            \/* generate value *\/","            err = wc_RNG_GenerateBlock(rng, buf, primeSz);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  const TfLiteTensor* axis_tensor;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kAxisTensor, &axis_tensor));","  int axis = GetTensorData<int32_t>(axis_tensor)[0];"],"label":0}
{"cve":"CVE-2019-17178","code_chunks":["\t\t\tdstRect++;","\t\t\tusedRects++;","\t\t}","","\t\tcurrentBand = nextBand;","\t}",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["            return 1;","        }","        else {","            int res;","            Py_ssize_t len;","            Py_ssize_t i;","            if (!PyList_Check(tmp)) {"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["Connection *con, int peer_type,","int protocol, bufferlist& authorizer_data, bufferlist& authorizer_reply,","bool& isvalid, CryptoKey& session_key,","std::unique_ptr<AuthAuthorizerChallenge> *challenge)","{","AuthAuthorizeHandler *authorize_handler = 0;"],"label":0}
{"cve":"CVE-2020-1918","code_chunks":["inline void StringData::setSize(int len) {"],"label":1}
{"cve":"CVE-2022-29226","code_chunks":["    credentials->mutable_token_secret()->set_name(\"secret\");","    credentials->mutable_hmac_secret()->set_name(\"hmac\");","        ","    MessageUtil::validate(p, ProtobufMessage::getStrictValidationVisitor());","","        auto secret_reader = std::make_shared<MockSecretReader>();","    FilterConfigSharedPtr c = std::make_shared<FilterConfig>(p, factory_context_.cluster_manager_,"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["        uint32_t* temp_buffer = static_cast<uint32_t*>(","            context->GetScratchBuffer(context, op_data->temp_buffer_idx));","        TF_LITE_ENSURE(","            context,","            reference_ops::Mean(tflite::micro::GetTensorData<uint8_t>(input),","                                input->dims->data, input->dims->size,","                                tflite::micro::GetTensorData<uint8_t>(output),"],"label":0}
{"cve":"CVE-2021-42782","code_chunks":["","static int cardos_check_sw(sc_card_t *card, unsigned int sw1, unsigned int sw2)","{","\tconst int err_count = sizeof(cardos_errors)\/sizeof(cardos_errors[0]);","\tint i;","\t\t\t        ","\tfor (i = 0; i < err_count; i++) {"],"label":0}
{"cve":"PYSEC-2022-43062","code_chunks":["char *sanitized_url = str_replace(url, \"'\", \"%27\");","if (strchr(host, '\\'')) {","print_error(\"%s %s\\n\", error_prefix,","\"Invalid hostname: hostname can't have single quotes.\");"],"label":1}
{"cve":"CVE-2016-3178","code_chunks":["if(p+l > buf+n) {","syslog(LOG_WARNING, \"bad request (length encoding l=%u n=%u)\",","l, (unsigned)n);","goto error;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInput);","TfLiteTensor* output = GetOutput(context, node, 0);","const TfLiteTensor* axis = GetInput(context, node, kAxis);","if (IsDynamicTensor(output)) {","int axis_value;","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["    left_margin = (raw_width - width ) >> 2 << 1;","    if (width == 2848 || width == 3664) filters = 0x16161616;","    if (width == 4032 || width == 4952) left_margin = 0;","    if (width == 3328 && (width -= 66)) left_margin = 34;","    if (width == 4936) left_margin = 4;","    if (width == 6032) left_margin = 0;","    if (!strcmp(model,\"HS50EXR\") ||"],"label":0}
{"cve":"CVE-2019-3561","code_chunks":["      }","    }","  }","","  ret.setSize(total_len);","  return ret;",""],"label":0}
{"cve":"CVE-2021-33910","code_chunks":["assert(f);","assert(ret);","","p = strdupa(f);","if (!p)","return -ENOMEM;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["            *literal = PyUnicode_DecodeUTF8Stateful(literal_start,","                                                    s - literal_start,","                                                    NULL, NULL);","        else","            *literal = decode_unicode_with_escapes(c, n, literal_start,","                                                   s - literal_start);","        if (!*literal)"],"label":0}
{"cve":"CVE-2021-41227","code_chunks":["Status CreateTempFile(Env* env, float value, uint64 size, string* filename) {","const string dir = testing::TmpDir();","*filename = io::JoinPath(dir, strings::StrCat(\"file_\", value));","std::unique_ptr<WritableFile> file;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (msg == NULL) {","return -1;","}"],"label":0}
{"cve":"CVE-2021-4173","code_chunks":["int\t\tis_global = *eap->arg == 'g' && eap->arg[1] == ':';","char_u\t*name_start = eap->arg;","char_u\t*name_end = to_name_end(eap->arg, TRUE);","int\t\toff;","char_u\t*func_name;","char_u\t*lambda_name;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["PyErr_Format(PyExc_TypeError, \"FunctionDef field \\\"body\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","goto failed;","}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int i, j, n0, n1, s0, s1, b0, b1;","int8_t _s0, _s1, reg0[RLC_FP_BITS + 1], reg1[RLC_FP_BITS + 1];","bn_t n, _k, k0, k1, v1[3], v2[3];","ep_t q, t[1 << (EP_WIDTH - 2)], u, v, w;","size_t l;",""],"label":0}
{"cve":"CVE-2021-37637","code_chunks":["int64 total_size = 0;","for (auto& component : element) {","if (DataTypeCanUseMemcpy(component.dtype())) {","total_size += DMAHelper::buffer(&component)->size();","} else {","non_memcpy_components.emplace_back();","component.AsProtoTensorContent(&non_memcpy_components.back());"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","auto* params = reinterpret_cast<TfLiteShapeParams*>(node->builtin_data);","switch (params->out_type) {"],"label":1}
{"cve":"CVE-2020-1917","code_chunks":["","      auto const class_name = bt_frame->get(s_class.get());","      if (class_name.is_init()) {","        assertx(isStringType(type(class_name)));","        strncpy(frame->class_name,","                val(class_name).pstr->data(),","                std::min<int64_t>("],"label":0}
{"cve":"CVE-2024-0322","code_chunks":["","\t\t\t\tif (ctx->ac3_buffer_size>100000) {","\t\t\tGF_LOG(GF_LOG_WARNING, GF_LOG_MEDIA, (\"[AC3Dmx] Trashing %d garbage bytes\\n\", ctx->ac3_buffer_size));","\t\t\tctx->ac3_buffer_size = 0;","\t\t}","","\t\tif (ctx->byte_offset != GF_FILTER_NO_BO) {"],"label":0}
{"cve":"CVE-2018-12559","code_chunks":["RemoteFsDevice::Details det=details();","modified=det!=orig;","saveable=!det.isEmpty();","if (saveable && Type_SambaAvahi==type->itemData(type->currentIndex()).toInt()) {","saveable=!smbAvahiName->text().trimmed().isEmpty();"],"label":1}
{"cve":"CVE-2018-8797","code_chunks":["UNUSED(mcs_data);","uint8 result;","uint32 length;","STREAM s;","struct stream packet;","RD_BOOL is_fastpath;"],"label":0}
{"cve":"CVE-2020-15121","code_chunks":["FD_SET (s->fd, &except_fds);","","struct timeval t;","t.tv_sec = timeout;","t.tv_usec = 0;",""],"label":1}
{"cve":"CVE-2019-17177","code_chunks":["\tmemset(tmp, 0, ds * sizeof(CHAR));","","\tfor (x = 0; x < s; x++)","\t{","\t\tswitch (arg[x])","\t\t{","\t\t\t\tlen = format ? 13 : 4;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["}","node->temporaries->data[kAccumScratch] =","op_data->scratch_tensor_index + kAccumScratch;","TfLiteTensor* accum_scratch = GetTemporary(context, node, kAccumScratch);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {std::max(fw_num_units, bw_num_units),"],"label":1}
{"cve":"CVE-2021-41136","code_chunks":["\tif ( (*p) < 48 ) {","\t\tif ( 45 <= (*p) && (*p) <= 46 )","\t\t\tgoto st28;","\t} else if ( (*p) > 57 ) {","\t\tif ( 65 <= (*p) && (*p) <= 90 )","\t\t\tgoto st28;","\t} else"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["}","for (c=0; c < 16; c+=2) {","i = len[((c & 1) << 1) | (c >> 3)];","RAW(row,col+c) = ((signed) ph1_bits(i) << (32-i) >> (32-i)) +","(dir ? RAW(row+(~c | -2),col+c) : col ? RAW(row,col+(c | -2)) : 128);","if (c == 14) c = -1;"],"label":1}
{"cve":"CVE-2023-28486","code_chunks":["\/* Check for dir with a log file. *\/","if (lstat(pathbuf, &sb) == 0 && S_ISREG(sb.st_mode)) {","pathbuf[sdlen + len - 4] = '\\0';","list_session(pathbuf, re, user, tty);","} else {","\/* Strip off \"\/log\" and recurse if a non-log dir. *\/","pathbuf[sdlen + len - 4] = '\\0';"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["}","","TF_LITE_ENSURE(context, axis >= 0 && axis < rank);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (output->type) {","case kTfLiteFloat32: {"],"label":1}
{"cve":"CVE-2021-29464","code_chunks":["void Jp2Image::encodeJp2Header(const DataBuf& boxBuf,DataBuf& outBuf)","{","DataBuf output(boxBuf.size_ + iccProfile_.size_ + 100);         int     outlen = sizeof(Jp2BoxHeader) ;         int      inlen = sizeof(Jp2BoxHeader) ;         Jp2BoxHeader* pBox   = (Jp2BoxHeader*) boxBuf.pData_;","int32_t       length = getLong((byte*)&pBox->length, bigEndian);","int32_t       count  = sizeof (Jp2BoxHeader);"],"label":1}
{"cve":"CVE-2023-28487","code_chunks":["\/* Check for dir with a log file. *\/","if (lstat(pathbuf, &sb) == 0 && S_ISREG(sb.st_mode)) {","pathbuf[sdlen + len - 4] = '\\0';","list_session(pathbuf, re, user, tty);","} else {","\/* Strip off \"\/log\" and recurse if a non-log dir. *\/","pathbuf[sdlen + len - 4] = '\\0';"],"label":1}
{"cve":"CVE-2017-6439","code_chunks":["PLIST_BIN_ERR(\"%s: Integer overflow when calculating BPLIST_UNICODE data size.\\n\", __func__);","return NULL;","}","if (*object + size*2 > bplist->offset_table) {","PLIST_BIN_ERR(\"%s: BPLIST_UNICODE data bytes point outside of valid range\\n\", __func__);","return NULL;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["const ep2_t q, const bn_t m, const ep2_t *t) {","int i, n0, n1, w, gen;","int8_t naf0[2 * RLC_FP_BITS + 1], naf1[2 * RLC_FP_BITS + 1], *_k, *_m;","ep2_t t0[1 << (EP_WIDTH - 2)];","ep2_t t1[1 << (EP_WIDTH - 2)];","size_t l, l0, l1;"],"label":0}
{"cve":"CVE-2019-19317","code_chunks":["** bit 0 to be set.  Column 1 sets bit 1.  And so forth.  If the","** column number is greater than the number of bits in the bitmask","** then set the high-order bit of the bitmask.","*\/","if( pExpr->iColumn>=0 && pMatch!=0 ){","int n = pExpr->iColumn;"],"label":1}
{"cve":"CVE-2018-14055","code_chunks":["CLanguageScope user_lang(GetUser() ? GetUser()->GetLanguage() : \"\");","CString sLine = sData;","","sLine.TrimRight(\"\\n\\r\");","","DEBUG(\"(\" << GetFullName() << \") CLI -> ZNC [\"","<< CDebug::Filter(sLine) << \"]\");"],"label":1}
{"cve":"CVE-2024-1433","code_chunks":["void EventPluginsManager::loadPlugin(const QString &pluginId)","{","QPluginLoader loader(\"plasmacalendarplugins\/\" + QDir::cleanPath(pluginId));","","if (!loader.load()) {","qWarning() << \"Could not create Plasma Calendar Plugin: \" << pluginId;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["        comprehension_ty comp;","        asdl_seq *t;","        expr_ty expression, first;","        node *for_ch;","        node *sync_n;","        int is_async = 0;",""],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["todo[i]   = isix++;","todo[i+1] = buffer >> (14-i)*5;","}","for (i=0; i < 16; i+=2)"],"label":1}
{"cve":"CVE-2021-46822","code_chunks":["*ptr++ = rescale[temp];","temp  = UCH(*bufferptr++) << 8;","temp |= UCH(*bufferptr++);","if (temp > maxval)"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 type;","UINT16 length;","BYTE* em;","BYTE* bm = Stream_Pointer(s);","rdp_read_capability_set_header(s, &length, &type);",""],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["if (!fit)","return -EINVAL;","","if (!fit_check_format((void *)fit)) {","printf(\"Bad FIT format of the update file, aborting auto-update\\n\");","return -EINVAL;","}"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["} else {","bfmask[0]=0x7C00; bfmask[1]=0x3E0; bfmask[2]=0x1F; \t\t\t}","if (bf.bfOffBits != 0L) hFile->Seek(off + bf.bfOffBits,SEEK_SET);","hFile->Read(info.pImage, head.biHeight*((head.biWidth+1)\/2)*4,1);","Bitfield2RGB(info.pImage,bfmask[0],bfmask[1],bfmask[2],16);","break;","}"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"CVE-2022-35971","code_chunks":["const Tensor& input = context->input(0);","","float input_min = context->input(1).flat<float>()(0);","float input_max = context->input(2).flat<float>()(0);","float input_scale = (input_max - input_min) \/ 255.0f;",""],"label":1}
{"cve":"CVE-2021-24028","code_chunks":["  } else {","    for (std::int16_t index = 0; index < structInfo.numFields; index++) {","      const auto& fieldInfo = structInfo.fieldInfos[index];","      if (fieldInfo.isUnqualified || fieldInfo.issetOffset == 0 ||","          fieldIsSet(object, fieldInfo.issetOffset)) {","        const OptionalThriftValue value =","            getValue(*fieldInfo.typeInfo, getMember(fieldInfo, object));"],"label":0}
{"cve":"CVE-2022-4399","code_chunks":["r = asprintf(&sql, \"UPDATE nodau set text='%s' , encrypted='true' WHERE name='%s'\", value, name);","free(value);","if (r < 0)","return 1;"],"label":1}
{"cve":"PYSEC-2021-272","code_chunks":["        file.get(),","        io::RecordWriterOptions::CreateRecordWriterOptions(compression_type));","","    DatasetBase* dataset;","    TF_RETURN_IF_ERROR(GetDatasetFromVariantTensor(ctx->input(0), &dataset));","","    IteratorContext::Params params(ctx);"],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["      case 36868:  get_timestamp(0);\t\t\tbreak;","      case 37377:  if ((expo = -getreal(type)) < 128 && shutter == 0.)","\t\t     tiff_ifd[tiff_nifds-1].t_shutter =","\t\t\tshutter = libraw_powf64(2.0, expo);","\t\tbreak;","        if ((fabs(ape = getreal(type))<256.0) && (!aperture))","          aperture = libraw_powf64(2.0, ape\/2);"],"label":0}
{"cve":"CVE-2019-12108","code_chunks":["rem_port = GetValueFromNameValueList(&data, \"RemotePort\");","protocol = GetValueFromNameValueList(&data, \"Protocol\");","","if (!int_port || !ext_port || !protocol)","{","ClearNameValueList(&data);","SoapError(h, 402, \"Invalid Args\");"],"label":1}
{"cve":"CVE-2021-29530","code_chunks":["    auto output_row_ptr_ptr = output_row_ptr.flat<int32>().data();","    auto output_col_ind_ptr = output_col_ind.flat<int32>().data();","    auto output_values_ptr = output_values.flat<T>().data();","","                        Shard(worker_threads.num_threads, worker_threads.workers, batch_size,","          (3 * total_nnz) \/ batch_size \/* cost per unit *\/,","          [&](int64 batch_begin, int64 batch_end) {"],"label":0}
{"cve":"CVE-2023-4756","code_chunks":["void gf_bt_check_line(GF_BTParser *parser)","{","while (1) {","switch (parser->line_buffer[parser->line_pos]) {","parser->line_pos++;","continue;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const bool use_tensor = index < node->inputs->size &&","                          node->inputs->data[index] != kTfLiteOptionalTensor;","  if (use_tensor) {","    return GetMutableInput(context, node, index);","  }","  return nullptr;","}"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["goto error;","asdl_seq_SET(kwonlyargs, j++, arg);","i += 1; \/* the name *\/","if (TYPE(CHILD(n, i)) == COMMA)","i += 1; \/* the comma, if present *\/","break;","\/* arg will be equal to the last argument processed *\/"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    }","  }","","  TfLiteIntArrayFree(node->temporaries);","  node->temporaries = TfLiteIntArrayCreate(temporaries_count);","","  return kTfLiteOk;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["}","if (!args) {","PyErr_SetString(PyExc_ValueError,","\"field args is required for AsyncFunctionDef\");","return NULL;","}"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    if (PyDict_SetItemString(d, \"Raise\", (PyObject*)Raise_type) < 0) return","        NULL;","    if (PyDict_SetItemString(d, \"Try\", (PyObject*)Try_type) < 0) return NULL;","    if (PyDict_SetItemString(d, \"Assert\", (PyObject*)Assert_type) < 0) return","        NULL;","    if (PyDict_SetItemString(d, \"Import\", (PyObject*)Import_type) < 0) return","        NULL;"],"label":0}
{"cve":"CVE-2024-22211","code_chunks":["context->bgr = FALSE;","context->maxWidth = PLANAR_ALIGN(width, 4);","context->maxHeight = PLANAR_ALIGN(height, 4);","context->maxPlaneSize = context->maxWidth * context->maxHeight;","context->nTempStep = context->maxWidth * 4;","free(context->planesBuffer);","free(context->pTempData);"],"label":1}
{"cve":"CVE-2022-4202","code_chunks":["static Fixed lsr_translate_scale(GF_LASeRCodec *lsr, u32 val)","{","if (val >> (lsr->coord_bits-1) ) {","s32 v = val - (1<<lsr->coord_bits);","return INT2FIX(v) \/ 256 ;","} else {","return INT2FIX(val) \/ 256;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        else {","            int res;","            res = obj2ast_expr_context(tmp, &ctx, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }","        *out = Subscript(value, slice, ctx, lineno, col_offset, end_lineno,"],"label":0}
{"cve":"CVE-2018-13006","code_chunks":["gf_bs_read_data(bs, tmpName, to_read);","","i = 0;","while ( (tmpName[i] != 0) && (i < to_read) ) {","i++;","}","if (i == to_read) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params = reinterpret_cast<TfLiteDivParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"],"label":1}
{"cve":"CVE-2016-7532","code_chunks":["          (void) SetImageStorageClass(image,DirectClass,exception);","        if (image->colorspace != CMYKColorspace)","          num_channels=(image->alpha_trait != UndefinedPixelTrait ? 4UL : 3UL);","        else","          num_channels=(image->alpha_trait != UndefinedPixelTrait ? 5UL : 4UL);","      }","  (void) WriteBlobMSBShort(image,(unsigned short) num_channels);"],"label":0}
{"cve":"PYSEC-2020-137","code_chunks":["int previous_segment_id = -1;","for (int i = 0; i < segment_id_size; i++) {","const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];","if (i == 0) {","TF_LITE_ENSURE_EQ(context, current_segment_id, 0);","} else {"],"label":0}
{"cve":"CVE-2018-6340","code_chunks":["const char *hostname = LMCD_SERVER_HOSTNAME(instance);","in_port_t port = LMCD_SERVER_PORT(instance);","","stat = stats + server_id;","","Array server_stats = memcache_build_stats(&data->m_memcache, stat, &ret);"],"label":1}
{"cve":"PYSEC-2021-629","code_chunks":["\/*group_size*\/ c->input(1),","\/*group_key*\/ c->input(2),","\/*instance_key*\/ c->input(3)),","done);","col_params->instance.shape = c->input(0).shape();","col_params->merge_op = merge_op_.get();","col_params->final_op = final_op_.get();"],"label":1}
{"cve":"CVE-2019-6706","code_chunks":["UpVal **up1 = getupvalref(L, fidx1, n1, &f1);","UpVal **up2 = getupvalref(L, fidx2, n2, NULL);","luaC_upvdeccount(L, *up1);","*up1 = *up2;","(*up1)->refcount++;"],"label":1}
{"cve":"CVE-2022-0523","code_chunks":["\tif (n > ST32_MAX) {","\t\teprintf (\"bad marshal data (tuple size out of range)\\n\");","\t\treturn NULL;","\t}","\tif (error) {","\t\treturn NULL;","\t}"],"label":0}
{"cve":"CVE-2020-1921","code_chunks":["  );","  bt_slab.len = i;","","    FOLLY_SDT_WITH_SEMAPHORE(hhvm, hhvm_stack, &bt_slab);","","  return true;","}"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["    PyObject *result = _PyBytes_DecodeEscape(s, len, NULL, 0, NULL,","                                             &first_invalid_escape);","    if (result == NULL)","        return NULL;","","    if (first_invalid_escape != NULL) {","        if (warn_invalid_escape_sequence(c, n, *first_invalid_escape) < 0) {"],"label":0}
{"cve":"CVE-2021-27138","code_chunks":[" * splash_source_load - load splash image from a supported location."," *"," * Select a splash image location based on the value of splashsource environment"," * variable and the board supported splash source locations, and load a"," * splashimage to the address pointed to by splashimage environment variable."," *"," * @locations:\t\tAn array of supported splash locations."],"label":0}
{"cve":"CVE-2019-13310","code_chunks":["WandPrivate MagickBooleanType CLIListOperatorImages(MagickCLI *cli_wand,","const char *option,const char *arg1n,const char *arg2n)","{","const char    \/* percent escaped versions of the args *\/","*arg1,","*arg2;"],"label":0}
{"cve":"CVE-2016-2324","code_chunks":["static void show_object(struct object *object, const char *name, void *data)","{","struct bitmap *base = data;","bitmap_set(base, find_object_pos(object->oid.hash));"],"label":0}
{"cve":"PYSEC-2020-217","code_chunks":["(*filename != '.' ||","(strcmp(filename, \".\") != 0 &&","strcmp(filename, \"..\") != 0 &&","strcasecmp(filename, DOT_GIT) != 0));","}","","static int entry_sort_cmp(const void *a, const void *b)"],"label":0}
{"cve":"CVE-2021-44108","code_chunks":["    ogs_base64_encode_binary(boundary + 2, digest, 16);","","    p = http->content = ogs_calloc(1, OGS_HUGE_LEN);","    ogs_expect_or_return_val(p, false);","    last = p + OGS_HUGE_LEN;","","    \/* First boundary *\/"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    input_quantized->allocation_type = kTfLiteArenaRw;","","    TfLiteIntArray* input_quantized_size =","        TfLiteIntArrayCopy(op_context->lhs->dims);","    TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_quantized,","                                                     input_quantized_size));",""],"label":0}
{"cve":"CVE-2019-3556","code_chunks":["","auto allocsz = sizeof(gdImage)","+ sy * (sizeof(int *) + sizeof(unsigned char *))","+ sx * sy * (sizeof(int) + sizeof(unsigned char));","if (UNLIKELY(precheckOOM(allocsz))) {","return NULL;"],"label":1}
{"cve":"CVE-2020-16588","code_chunks":["previewHeight = max (int (h \/ (w * a) * previewWidth + .5f), 1);","previewPixels.resizeErase (previewHeight, previewWidth);","","float fx = (previewWidth  > 0)? (float (w - 1) \/ (previewWidth  - 1)): 1;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            \/* Replace the SyntaxWarning exception with a SyntaxError","               to get a more accurate error report *\/","            PyErr_Clear();","            ast_error(c, n, \"%U\", msg);","        }","        Py_DECREF(msg);","        return -1;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["                           TfLiteTypeGetName(input->type));","      return kTfLiteError;","  }","#undef TF_LITE_DEPTH_TO_SPACE","","  return kTfLiteOk;","}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep2_mul_slide(ep2_t r, const ep2_t p, const bn_t k) {","ep2_t t[1 << (EP_WIDTH - 1)], q;","uint8_t win[RLC_FP_BITS + 1];","size_t l;","","ep2_null(q);",""],"label":0}
{"cve":"CVE-2019-5489","code_chunks":["};","","vma = find_vma(current->mm, addr);","if (!vma || addr < vma->vm_start)","return -ENOMEM;","mincore_walk.mm = vma->vm_mm;"],"label":1}
{"cve":"CVE-2019-13296","code_chunks":["to the filename, including them in the resulting expanded list.","*\/","if (ExpandFilenames(&argc,&argv) == MagickFalse)","CLIWandExceptArgBreak(ResourceLimitError,\"MemoryAllocationFailed\",","option,GetExceptionMessage(errno));",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input_boxes = GetInput(context, node, kInputTensorBoxes);","const int num_boxes = SizeOfDimension(input_boxes, 0);","const TfLiteTensor* input_scores =","GetInput(context, node, kInputTensorScores);","const TfLiteTensor* input_max_output_size ="],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["todo[i+1] = buffer >> (14-i)*5;","}","for (i=0; i < 16; i+=2)","raw_image[todo[i]] = (todo[i+1] & 0x3ff);","}","maximum = 0x3ff;"],"label":1}
{"cve":"CVE-2022-36017","code_chunks":["const Tensor& input = context->input(0);","","float input_min = context->input(1).flat<float>()(0);","float input_max = context->input(2).flat<float>()(0);","float input_scale = (input_max - input_min) \/ 255.0f;",""],"label":1}
{"cve":"CVE-2022-31624","code_chunks":["else","cn= get_loc_info(thd);","}","else","{","cn= get_loc_info(thd);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        res = obj2ast_expr(tmp, &iter, arena);","        if (res != 0) goto failed;","        Py_CLEAR(tmp);","    }","    if (_PyObject_LookupAttrId(obj, &PyId_ifs, &tmp) < 0) {","        return 1;","    }"],"label":0}
{"cve":"CVE-2018-12561","code_chunks":["MpdCantataMounterInterface *mounterIface;"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["}","","QString MainWindow::getIPAddresses()","{","    QList<QHostAddress> addresses = QNetworkInterface::allAddresses();","","    bool hinted = false;"],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["    else if (!strncmp(make, \"NIKON\",5))","      {","        if (tag == 0x000a)","          {","            imgdata.lens.makernotes.LensMount = LIBRAW_MOUNT_FixedLens;","            imgdata.lens.makernotes.CameraMount = LIBRAW_MOUNT_FixedLens;","          }"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\tif (len < size) {","\t\tRLC_THROW(ERR_NO_BUFFER);","\t\treturn;","\t}","","\tfor (i = 0; i < size; i++) {","\t\traw[i] = a->dp[i];"],"label":0}
{"cve":"CVE-2019-17177","code_chunks":["tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));","","if (NULL == tmp)","{"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static void ep4_mul_fix_ordin(ep4_t r, const ep4_t *table, const bn_t k) {","int len, i, n;","int8_t naf[2 * RLC_FP_BITS + 1], *t;","","if (bn_is_zero(k)) {"],"label":1}
{"cve":"CVE-2020-5215","code_chunks":["  if (PyIsInstance(v, &PyFloatingArrType_Type)) {      Safe_PyObjectPtr as_float = make_safe(PyNumber_Float(v));","    if (PyErr_Occurred()) {","      return nullptr;","    }","    return ConvertOneFloat<T>(as_float.get(), out);","  }","  if (PyIsInstance(v, &PyIntegerArrType_Type)) {  #if PY_MAJOR_VERSION < 3"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["GetInput(context, node, kInputVariableId);","const TfLiteTensor* input_value_tensor = GetInput(context, node, kInputValue);","","int resource_id = input_resource_id_tensor->data.i32[0];","auto& resources = subgraph->resources();"],"label":1}
{"cve":"CVE-2023-25659","code_chunks":["c, FastBoundsCheck(index, first_dim_size),","errors::InvalidArgument(\"indices[\", i, \"] is out of range\"));","memcpy(merged_base + index * slice_size, data_base + i * slice_size,","slice_bytes);","}","} else {"],"label":1}
{"cve":"CVE-2023-36327","code_chunks":["in = buf[0] % bn_get_prime(47);","TEST_ASSERT(cp_bdpe_enc(buf, &len, in, pub) == RLC_OK, end);","TEST_ASSERT(cp_bdpe_dec(&out, buf, len, prv) == RLC_OK, end);","TEST_ASSERT(in == out, end);"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["socket = new SecureSocket(","m_events,","m_socketMultiplexer,","ARCH->acceptSocket(m_socket, NULL));","socket->initSsl(true);",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","const int num_elements = NumElements(input);","switch (input->type) {","memset(GetTensorData<int64_t>(output), 0, num_elements * sizeof(int64_t));"],"label":1}
{"cve":"CVE-2021-43860","code_chunks":["{","g_debug (\"marking op %s:%s resolved to %s\", kind_to_str (op->kind), flatpak_decomposed_get_ref (op->ref), commit ? commit : \"-\");","","g_assert (op != NULL);","","g_assert (commit != NULL);"],"label":0}
{"cve":"CVE-2016-5358","code_chunks":["","new_tvb = tvb_new_subset (tvb, offset, caplen, len);","if (decode_content && linktype != WTAP_ENCAP_UNKNOWN) {","dissector_try_uint(wtap_encap_dissector_table, linktype, new_tvb, pinfo, top_tree);","","if (!info_added) {","\/* Only indicate when not added before *\/"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["stmt_ty o = (stmt_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_RETURN_NONE;","}","","switch (o->kind) {"],"label":0}
{"cve":"CVE-2021-30014","code_chunks":["gf_bs_read_int_log(bs, 5, \"nal_unit_type\");","}","pps_id = gf_bs_read_ue_log(bs, \"pps_id\");","if (pps_id >= 255) {","return -1;","}","pps = &avc->pps[pps_id];"],"label":1}
{"cve":"CVE-2024-0964","code_chunks":["], gr.Textbox())","assert examples.processed_examples == [[\"hello\"]]","","examples = gr.Examples([\"test\/test_files\/bus.png\"], gr.Image())","assert (","utils.encode_file_to_base"],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["pcre2_real_code *re = (pcre2_real_code *)code;","struct sljit_compiler *compiler;","backtrack_common rootbacktrack;","compiler_common common_data;","compiler_common *common = &common_data;","const sljit_u8 *tables = re->tables;"],"label":0}
{"cve":"CVE-2015-8631","code_chunks":["rename_principal_2_svc(rprinc_arg *arg, struct svc_req *rqstp)","{","static generic_ret          ret;","char                        *prime_arg1,"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["d = AST_type.tp_dict;","empty_tuple = PyTuple_New(0);","if (!empty_tuple ||","PyDict_SetItemString(d, \"_fields\", empty_tuple) < 0 ||","PyDict_SetItemString(d, \"_attributes\", empty_tuple) < 0) {","Py_XDECREF(empty_tuple);"],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["void CLASS rollei_load_raw()","{","uchar pixel[10];","unsigned iten=0, isix, i, buffer=0, todo[16];","","isix = raw_width * raw_height * 5 \/ 8;","while (fread (pixel, 1, 10, ifp) == 10) {"],"label":1}
{"cve":"CVE-2022-28070","code_chunks":["const RList *syms = r_bin_get_symbols (core->bin);","ut64 baddr = r_config_get_i (core->config, \"bin.baddr\");","r_list_foreach (syms, iter, sym) {","if ((sym->paddr + baddr) == fcn->addr && !strcmp (sym->type, R_BIN_TYPE_FUNC_STR)) {","free (new_name);","new_name = r_str_newf (\"sym.%s\", sym->name);","break;"],"label":1}
{"cve":"CVE-2016-10009","code_chunks":["#endif","","\twhile ((ch = getopt(ac, av, \"cDdksE:a:P:t:\")) != -1) {","\t\tswitch (ch) {","\t\t\tfingerprint_hash = ssh_digest_alg_by_name(optarg);","\t\t\tif (fingerprint_hash == -1)","\t\t\t\tfatal(\"Invalid hash algorithm \\\"%s\\\"\", optarg);"],"label":0}
{"cve":"CVE-2019-13304","code_chunks":["{","*q++=(unsigned char) (GetPixelLuma(image,p) >= (QuantumRange\/2.0) ?","'0' : '1');","*q++=' ';","if ((q-pixels+1) >= (ssize_t) sizeof(pixels))","{","*q++='\\n';"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["","if (channelId == MCS_GLOBAL_CHANNEL_ID)","{","if (!rdp_read_share_control_header(s, &pduLength, &pduType, &pduSource))","return -1;","","client->settings->PduSource = pduSource;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}"],"label":1}
{"cve":"CVE-2022-28073","code_chunks":["if (!core->anal->esil) {","eprintf (\"Please run aeim\\n\");","return;","}","","RAnal *anal = core->anal;"],"label":0}
{"cve":"CVE-2018-10536","code_chunks":["    int32_t sample_rate = WavpackGetSampleRate (wpc);","    int bytes_per_sample = WavpackGetBytesPerSample (wpc);","    int bits_per_sample = WavpackGetBitsPerSample (wpc);","    int format = WavpackGetFloatNormExp (wpc) ? 3 : 1;","    int wavhdrsize = 16;","","    if (format == 3 && WavpackGetFloatNormExp (wpc) != 127) {"],"label":0}
{"cve":"CVE-2016-10249","code_chunks":["\t\t\t*jas_matrix_getref(y, i, j) = jas_matrix_get(x, i, j);","\t\t}","\t}","\treturn y;","}","","\/******************************************************************************\\"],"label":0}
{"cve":"CVE-2018-14358","code_chunks":["        ctx->hdrs[idx]->index = idx;","        \/* messages which have not been expunged are ACTIVE (borrowed from mh","         * folders) *\/","        ctx->hdrs[idx]->active = true;","        ctx->hdrs[idx]->read = h.data->read;","        ctx->hdrs[idx]->old = h.data->old;","        ctx->hdrs[idx]->deleted = h.data->deleted;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* begin;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kBeginTensor, &begin));","const TfLiteTensor* size;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSizeTensor, &size));","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2023-41337","code_chunks":["                ret = 0;","            } else {","                ret = PTLS_ALERT_UNEXPECTED_MESSAGE;","            }","            break;","            ret = handle_alert(tls, rec.fragment, rec.length);","            break;"],"label":0}
{"cve":"CVE-2021-30020","code_chunks":["GF_VUIInfo vuii;","memset(&vuii, 0, sizeof(GF_VUIInfo));","vuii.ar_num = ar_n;","vuii.ar_den = ar_d;","vuii.fullrange = -1;","vuii.video_format = -1;"],"label":1}
{"cve":"CVE-2022-39347","code_chunks":["","\tswitch (FsInformationClass)","\t{","","\t\t\tif (!Stream_EnsureRemainingCapacity(output, 4 + 64 + length))","\t\t\t\tgoto out_fail;",""],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2018-10528","code_chunks":["","while (*str != 0x00) {","char *chr = (char *)str;","*b++ = *chr;","str++;","}"],"label":1}
{"cve":"CVE-2018-8796","code_chunks":["rdp_main_loop(RD_BOOL * deactivated, uint32 * ext_disc_reason)","{","\tdo","\t{","\t\tif (rdp_loop(deactivated, ext_disc_reason) == False)","\t\t{","\t\t\tg_exit_mainloop = True;"],"label":0}
{"cve":"CVE-2021-3772","code_chunks":["err_chunk = sctp_make_op_error(asoc, chunk,","SCTP_ERROR_UNSUP_HMAC,","&auth_hdr->hmac_id,","sizeof(__u16), 0);","if (err_chunk) {","sctp_add_cmd_sf(commands, SCTP_CMD_REPLY,"],"label":1}
{"cve":"CVE-2018-16640","code_chunks":["","#if defined(MNG_INSERT_LAYERS)","PixelInfo","mng_background_color;","#endif",""],"label":1}
{"cve":"CVE-2016-10271","code_chunks":["         break;","","         x1 = TIFFhowmany(iwidth, owidth);","         x2 = TIFFhowmany(ilength, olength); ","         y1 = TIFFhowmany(iwidth, olength);","         y2 = TIFFhowmany(ilength, owidth); ",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep2_map_dst(ep2_t p, const uint8_t *msg, int len, const uint8_t *dst, int dst_len);"],"label":1}
{"cve":"CVE-2017-6436","code_chunks":["            write_dict(bplist_buff, ptr_array_index(objects, i), ref_table, ref_size);","            break;","            write_date(bplist_buff, data->realval);","            break;","            write_uid(bplist_buff, data->intval);","            break;","            break;"],"label":0}
{"cve":"CVE-2017-11462","code_chunks":["}","","if (union_ctx_id) {","if (union_ctx_id->mech_type) {","if (union_ctx_id->mech_type->elements)","free(union_ctx_id->mech_type->elements);"],"label":1}
{"cve":"CVE-2022-0696","code_chunks":["else if (eap->bad_char == BAD_DROP)","STRCPY(newval + STRLEN(newval), \" ++bad=drop\");","else if (eap->bad_char != 0)","sprintf((char *)newval + STRLEN(newval), \" ++bad=%c\", eap->bad_char);","vimvars[VV_CMDARG].vv_str = newval;","return oldval;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["GetInput(context, node, kRecurrentWeightsTensor);","const TfLiteTensor* bias = GetInput(context, node, kBiasTensor);","TfLiteTensor* hidden_state =","&context->tensors[node->inputs->data[kHiddenStateTensor]];","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);",""],"label":1}
{"cve":"CVE-2016-4562","code_chunks":["          TracePoint(q,point);","          q+=q->coordinates;","        } while (IsPoint(p) != MagickFalse);","        break;","      }","      {","        if (q != primitive_info)"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["return kTfLiteError;","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","output->type = updates->type;","","if (IsConstantTensor(shape)) {"],"label":1}
{"cve":"CVE-2022-24786","code_chunks":["","","\/*"," * Check whether the specified payload contains RTCP feedback Reference"," * Picture Selection Indication (RPSI) message, and parse the payload"," * if it does."," *\/"],"label":0}
{"cve":"CVE-2022-41859","code_chunks":["char const *id_peer, int id_peer_len,","uint32_t *token)","{","BIGNUM\t\t*x_candidate = NULL, *rnd = NULL, *y_sqrd = NULL, *qr = NULL, *qnr = NULL, *y1 = NULL, *y2 = NULL, *y = NULL, *exp = NULL;","EVP_MD_CTX\t*hmac_ctx;","EVP_PKEY\t*hmac_pkey;"],"label":0}
{"cve":"CVE-2016-9583","code_chunks":["<< r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,","pi->pirlvl->prcheightexpn);","pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;","","assert(pi->prcno < pi->pirlvl->numprcs);","for (pi->lyrno = 0; pi->lyrno <"],"label":1}
{"cve":"PYSEC-2021-636","code_chunks":["Status CreateTempFile(Env* env, float value, uint64 size, string* filename) {","const string dir = testing::TmpDir();","*filename = io::JoinPath(dir, strings::StrCat(\"file_\", value));","std::unique_ptr<WritableFile> file;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["return FALSE;","","break;","","if (!rdp_read_bitmap_capability_set(&sub, settings))","return FALSE;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* a0 = GetInput(context, node, 0);","TfLiteTensor* a1 = GetOutput(context, node, 0);","int num = a0->dims->data[0];","for (int i = 0; i < num; i++) {","a1->data.f[i] = a0->data.f[i];"],"label":1}
{"cve":"CVE-2021-32686","code_chunks":["ERROR_LOG(\"STATUS_FROM_SSL_ERR\", err, ssock);","}","","ssock->last_err = err;","return GET_STATUS_FROM_SSL_ERR(err);","}",""],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        *out = Store;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject *)Del_type);","    if (isinstance == -1) {","        return 1;","    }"],"label":0}
{"cve":"CVE-2020-11087","code_chunks":["message = &context->AUTHENTICATE_MESSAGE;","ZeroMemory(message, sizeof(NTLM_AUTHENTICATE_MESSAGE));","s = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);","","if (!s)","return SEC_E_INTERNAL_ERROR;"],"label":0}
{"cve":"CVE-2018-20182","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"CVE-2022-21732","code_chunks":["OP_REQUIRES(ctx, num_threads >= 0,","errors::InvalidArgument(\"`num_threads` must be >= 0\"));","*output = new Dataset(ctx,","DatasetContext(DatasetContext::Params(","{PrivateThreadPoolDatasetOp::kDatasetType,"],"label":1}
{"cve":"CVE-2016-4564","code_chunks":["MagickBooleanType","closed_path;","","MagickStatusType","status;",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["max_size);","return kTfLiteError;","}","if (tensor_indices[index] == kTfLiteOptionalTensor) {","TF_LITE_KERNEL_LOG(const_cast<TfLiteContext*>(context),","\"Tensor at index %d was optional but was expected\\n\","],"label":0}
{"cve":"CVE-2019-3563","code_chunks":["if (b == '\\n' && terminatorType_ != TerminatorType::CARRIAGENEWLINE) {","return i;","} else if (","terminatorType_ != TerminatorType::NEWLINE && b == '\\r' &&","!c.isAtEnd() && *c.peekBytes().data() == '\\n') {","return i;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["    return kTfLiteError;","  }","  output->type = type;","","  data->requires_broadcast = !HaveSameShapes(input1, input2);","","  TfLiteIntArray* output_size = nullptr;"],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["{","\/* Does not affect registers. Usually used in a tight spot. *\/","DEFINE_COMPILER;","struct sljit_jump *jump;","","if (common->mode == PCRE2_JIT_COMPLETE)"],"label":1}
{"cve":"CVE-2020-1898","code_chunks":["int fb_compact_unserialize_from_buffer(","Variant& out, const char* buf, int n, int& p) {","","CHECK_ENOUGH(1, p, n);","int code = (unsigned char)buf[p];"],"label":1}
{"cve":"CVE-2017-15377","code_chunks":["             * We can however, \"match\" on a negated pattern. *\/","            if (offset > depth || depth == 0) {","                if (cd->flags & DETECT_CONTENT_NEGATED) {","                    goto match;","                } else {","                    goto no_match;","                }"],"label":0}
{"cve":"CVE-2022-0696","code_chunks":["    varname = tv_get_string_chk(&argvars[1]);","    tp = find_tabpage((int)tv_get_number_chk(&argvars[0], NULL));","    if (tp != NULL && varname != NULL)","    {","\t\t\tif (switch_win(&switchwin,","\t\ttp == curtab || tp->tp_firstwin == NULL ? firstwin","\t\t\t\t\t    : tp->tp_firstwin, tp, TRUE) == OK)"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  if (fft_length->type != kTfLiteInt32) {","    context->ReportError(context,","                         \"Type '%s' for fft_length is not supported by rfft2d.\",","                         TfLiteTypeGetName(fft_length->type));","    return kTfLiteError;","  }",""],"label":0}
{"cve":"CVE-2019-13221","code_chunks":["         } else {","            c->lookup_values = c->entries * c->dimensions;","         }","         if (c->lookup_values == 0) return error(f, VORBIS_invalid_setup);","         mults = (uint16 *) setup_temp_malloc(f, sizeof(mults[0]) * c->lookup_values);","         if (mults == NULL) return error(f, VORBIS_outofmem);","         for (j=0; j < (int) c->lookup_values; ++j) {"],"label":0}
{"cve":"CVE-2020-14404","code_chunks":["seg = data+(j*w);                                                 \\","if (seg[x] != cl) {break;}                                        \\","i = x;                                                            \\","while ((seg[i] == cl) && (i < w)) i += 1;                         \\","i -= 1;                                                           \\","if (j == y) vx = hx = i;                                          \\","if (i < vx) vx = i;                                               \\"],"label":1}
{"cve":"CVE-2020-27829","code_chunks":["extent+=image->columns*sizeof(uint32);","#endif","strip_pixels=(unsigned char *) AcquireQuantumMemory(extent,","sizeof(*strip_pixels));","if (strip_pixels == (unsigned char *) NULL)","ThrowTIFFException(ResourceLimitError,\"MemoryAllocationFailed\");","(void) memset(strip_pixels,0,extent*sizeof(*strip_pixels));"],"label":1}
{"cve":"CVE-2021-24045","code_chunks":["return builder.getLiteralString(\"boolean\");","return builder.getLiteralString(\"number\");","return builder.getLiteralString(\"string\");","llvm_unreachable(\"Invalid literal kind.\");","}","break;",""],"label":1}
{"cve":"CVE-2020-26247","code_chunks":["  if(NULL == schema) {","    xmlErrorPtr error = xmlGetLastError();","    if(error)","      Nokogiri_error_raise(NULL, error);","    else","      rb_raise(rb_eRuntimeError, \"Could not parse document\");",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","if (input->type != kTfLiteUInt8) return kTfLiteError;","if (NumElements(input->dims) == 0) return kTfLiteError;"],"label":0}
{"cve":"CVE-2022-1240","code_chunks":["for (i = 0; i < num; i++) {","struct relocation_info a_info = info[i];","ut32 sym_num = a_info.r_symbolnum;","if (sym_num > bin->nsymtab) {","continue;","}",""],"label":1}
{"cve":"CVE-2022-37032","code_chunks":["","while (pnt < end)","{","\/* Check the length. *\/","if (pnt + 2 > end)","{"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["}","#endif","","#if EB_SIM == INTER || !defined(STRIP)","","void eb_mul_sim_inter(eb_t r, const eb_t p, const bn_t k, const eb_t q,","\t\tconst bn_t m) {"],"label":0}
{"cve":"PYSEC-2021-458","code_chunks":["    output_csr_matrix_tensor->scalar<Variant>()() =","        std::move(output_csr_matrix);","  }","","  Status ValidateInputs(const CSRSparseMatrix& sparse_matrix,","                        const Tensor& permutation_indices, int* batch_size,","                        int64* num_rows) {"],"label":0}
{"cve":"CVE-2022-35967","code_chunks":["","AddInputFromArray<quint8>(input_quantized.shape(),","input_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});","AddInputFromArray<float>(TensorShape({1}), {input_max});"],"label":1}
{"cve":"CVE-2020-27795","code_chunks":["RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_ANY);","if (fcn) {","int i;","bool gap = false;","ut64 gap_addr = UT64_MAX;","ut32 fcn_size = r_anal_function_size_from_entry (fcn);"],"label":0}
{"cve":"CVE-2019-13304","code_chunks":["        pixels=GetQuantumPixels(quantum_info);","        for (y=(ssize_t) image->rows-1; y >= 0; y--)","        {","          register const PixelPacket","            *magick_restrict p;","","          p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE(context, values->type == kTfLiteInt32 ||","                              values->type == kTfLiteInt64 ||","                              values->type == kTfLiteInt8 ||","                              values->type == kTfLiteUInt8 ||","                              values->type == kTfLiteFloat32);","  TF_LITE_ENSURE_TYPES_EQ(context, values->type, default_value->type);",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2021-30022","code_chunks":["\tBool is_slice = GF_FALSE;","\ts32 ret = -1;","\tHEVCSliceInfo n_state;","","\tgf_bs_enable_emulation_byte_removal(bs, GF_TRUE);","","\tmemcpy(&n_state, &hevc->s_info, sizeof(HEVCSliceInfo));"],"label":0}
{"cve":"CVE-2022-23592","code_chunks":["","if (props_->fwd_type_fn == nullptr) {","return;","}","","std::vector<Node*> input_nodes(props_->input_types.size(), nullptr);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["auto* params =","reinterpret_cast<TfLiteResizeNearestNeighborParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2022-0711","code_chunks":["while (1) {","int is_first = 1;","","if (!http_find_header(htx, ist(\"Set-Cookie\"), &ctx, 1)) {","if (!http_find_header(htx, ist(\"Set-Cookie2\"), &ctx, 1))","break;","is_cookie2 = 1;"],"label":1}
{"cve":"CVE-2020-36315","code_chunks":["\t\tbn_null(t);","\t\tbn_new(t);","","\t\tswitch (operation) {","\t\t\t\t\/* EB = 00 | FF | D. *\/","\t\t\t\tbn_zero(m);","\t\t\t\tbn_lsh(m, m, 8);"],"label":0}
{"cve":"CVE-2020-28896","code_chunks":["","mutt_buffer_addstr(cmd, flags);","mutt_buffer_addstr(cmd, \")\");","","\/* after all this it's still possible to have no flags, if you","* have no ACL rights *\/"],"label":1}
{"cve":"CVE-2021-40566","code_chunks":["\t\t\tgf_filter_pck_set_dts(dst_pck, GF_FILTER_NO_TS);","\t\t\tgf_filter_pck_set_framing(dst_pck, GF_FALSE, GF_TRUE);","\t\t\t\t\t\tif (bytes_from_store) {","\t\t\t\tif (byte_offset != GF_FILTER_NO_BO) {","\t\t\t\t\tgf_filter_pck_set_byte_offset(dst_pck, byte_offset - bytes_from_store);","\t\t\t\t}","\t\t\t\tassert(bytes_from_store>=(u32) current);"],"label":0}
{"cve":"CVE-2020-36315","code_chunks":["\t\t\t\t\tfor (int i = m_len - 1; i < 8 * k_len; i++) {","\t\t\t\t\t\tbn_set_bit(m, i - ((RLC_MD_LEN + 1) * 8), 0);","\t\t\t\t\t}","\t\t\t\t\tif (r == 1 && bn_is_zero(m)) {","\t\t\t\t\t\tresult = RLC_OK;","\t\t\t\t\t}","\t\t\t\t\tbn_read_bin(m, h2, RLC_MD_LEN);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t}","","\tRLC_FREE(buf);","}","","\/**"," * Accumulates a small integer in the internal state."],"label":0}
{"cve":"CVE-2021-41198","code_chunks":["    TensorShape output_shape;","    for (int i = 0; i < input_dims; ++i) {","      OP_REQUIRES(","          context, multiples_array[i] >= 0,","          errors::InvalidArgument(\"Expected multiples[\", i, \"] >= 0, but got \",","                                  multiples_array[i]));","      OP_REQUIRES_OK(context, output_shape.AddDimWithStatus("],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["int post, err;","char headers[HTTP_HEADERS_SIZE] = \"\";","char *authstr = NULL, *proxyauthstr = NULL;","int64_t off = s->off;","int len = 0;","const char *method;","int send_expect_100 = 0;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["    }","    else {","        int res;","        res = obj2ast_string(tmp, &type_comment, arena);","        if (res != 0) goto failed;","        Py_CLEAR(tmp);","    }"],"label":0}
{"cve":"CVE-2022-4415","code_chunks":["        assert(context);","        assert(ret_filename);","        assert(ret_node_fd);","        assert(ret_data_fd);","        assert(ret_size);","        assert(ret_compressed_size);","        assert(ret_truncated);"],"label":0}
{"cve":"CVE-2019-13218","code_chunks":["ady -= abs(base) * adx;","if (x1 > n) x1 = n;","if (x < x1) {","LINE_OP(output[x], inverse_db_table[y]);","for (++x; x < x1; ++x) {"],"label":1}
{"cve":"CVE-2023-27772","code_chunks":["char* hostname;","int tcpPort = 102;","","if (argc > 1)","hostname = argv[1];","else"],"label":0}
{"cve":"CVE-2019-9917","code_chunks":["                pUser->SetAdmin(b);","                PutModule(\"Admin = \" + CString(pUser->IsAdmin()));","            } else {","                PutModule(t_s(\"Access denied!\"));","            }","        } else if (sVar == \"prependtimestamp\") {","            bool b = sValue.ToBool();"],"label":0}
{"cve":"CVE-2016-7522","code_chunks":["if (blocks == (unsigned char *) NULL)","ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");","count=ReadBlob(image,(size_t) length,blocks);","if ((count != (ssize_t) length) ||","(LocaleNCompare((char *) blocks,\"8BIM\",4) != 0))","{","blocks=(unsigned char *) RelinquishMagickMemory(blocks);"],"label":1}
{"cve":"CVE-2021-42782","code_chunks":["r =  SC_ERROR_INVALID_DATA;","goto err;","}","","\/* Allocate an output buffer for openssl *\/","plain_text = malloc(witness_len);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2016-7906","code_chunks":["status=QuantizeImage(quantize_info,image,exception);","quantize_info=DestroyQuantizeInfo(quantize_info);","}","image->colors=2;","image->alpha_trait=UndefinedPixelTrait;","break;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);"],"label":0}
{"cve":"CVE-2022-29228","code_chunks":["{Http::Headers::get().Path.get(), \"\/test?role=bearer&token=xyz-queryparam-token\"},","{Http::Headers::get().Host.get(), \"traffic.example.com\"},","{Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},","{Http::Headers::get().Scheme.get(), \"https\"},","};",""],"label":0}
{"cve":"CVE-2016-3178","code_chunks":["\t\t\tp->sin_family = AF_INET;","\t\t\tp->sin_port = htons(PORT);","\t\t\tp->sin_addr.s_addr = inet_addr(UPNP_MCAST_ADDR);","\t\t}","","\t\tn = sendto_or_schedule(s, bufr, n, 0, (const struct sockaddr *)&sockudp_w,","\t\t                       ipv6 ? sizeof(struct sockaddr_in6) : sizeof(struct sockaddr_in));"],"label":0}
{"cve":"CVE-2021-24025","code_chunks":["                  strobelight::kClassNameMax","                ));","        frame->class_name[strobelight::kClassNameMax - 1] = '\\0';","      }","","      auto const function_name = bt_frame->get(s_function.get());","      if (function_name.is_init()) {"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["virtual const std::vector<envoy::type::matcher::v3::StringMatcher>&"],"label":1}
{"cve":"CVE-2016-2847","code_chunks":["struct pipe_inode_info *pipe;","","pipe = kzalloc(sizeof(struct pipe_inode_info), GFP_KERNEL);","if (pipe) {","unsigned long pipe_bufs = PIPE_DEF_BUFFERS;","struct user_struct *user = get_current_user();"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["","RLC_TRY {","for (i = 0; i < (1 << (w - 1)); i++) {","bn_new(tab[i]);","}",""],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["cudnn.handle(),","\/*xDesc=*\/input_nd.handle(),","\/*dyDesc=*\/output_nd.handle(),","\/*convDesc=*\/conv.handle(),","\/*gradDesc=*\/filter.handle(),","\/*algo=*\/ToConvBackwardFilterAlgo(algorithm_desc),"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["      if (stack_idx < params->ngram_size) {","        stack[stack_idx] = stack[stack_idx - 1];","      }","    } else {","      if (ShouldIncludeCurrentNgram(params, stack_idx)) {","                        std::vector<StringRef> gram(stack_idx);","        for (int i = 0; i < stack_idx; i++) {"],"label":0}
{"cve":"CVE-2019-15226","code_chunks":["  }","","      auto* request_properties = log_entry.mutable_request();","  if (request_headers.Scheme() != nullptr) {","    request_properties->set_scheme(std::string(request_headers.Scheme()->value().getStringView()));","  }","  if (request_headers.Host() != nullptr) {"],"label":0}
{"cve":"CVE-2019-12904","code_chunks":["{","size_t i;","","for (i = 0; len - i >= 8 * 32; i += 8 * 32)","{","(void)tab[i + 0 * 32];"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["","#if defined(WITH_JPEG)","static BOOL rdp_write_jpeg_client_capability_container(wStream* s, const rdpSettings* settings)","{","\tif (!Stream_EnsureRemainingCapacity(s, 8))","\t\treturn FALSE;",""],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["(salt[5] >= '0') && (salt[5] <= '9') &&","(salt[6] == '$')) {","char output[61];","if (php_crypt_blowfish_rn(key, salt, output, sizeof(output))) {","return strdup(output);","}",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","if (input->type != kTfLiteUInt8) return kTfLiteError;","if (NumElements(input->dims) == 0) return kTfLiteError;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2017-9144","code_chunks":["            }","          p=pixels+offset;","          for (i=0; i < (ssize_t) operand; i++)","          {","            pixel=(unsigned char) ReadBlobByte(image);","            if ((y < (ssize_t) image->rows) &&","                ((x+i) < (ssize_t) image->columns))"],"label":0}
{"cve":"CVE-2018-12561","code_chunks":["    , currentMountStatus(false)","    , details(d)","    , proc(0)","    , messageSent(false)","{","    setup();","    icn=MonoIcon::icon(details.isLocalFile()"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["\t\treturn report(options, NULL, OBJ_NONE, FSCK_MSG_BAD_OBJECT_SHA1, \"no valid object to fsck\");","","\tif (obj->type == OBJ_BLOB)","\t\treturn fsck_blob(&obj->oid, data, size, options);","\tif (obj->type == OBJ_TREE)","\t\treturn fsck_tree(&obj->oid, data, size, options);","\tif (obj->type == OBJ_COMMIT)"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["*p++ = *s++;","if (*s & 0x80) {","strcpy(p, \"u005c\");","p += 5;","}"],"label":1}
{"cve":"CVE-2019-11924","code_chunks":["expectSame(buf, \"0123456789\");","return getBuf(\"16000000\");","}));","EXPECT_ANY_THROW(read_.read(queue_));","}"],"label":0}
{"cve":"CVE-2021-32672","code_chunks":["p = strstr(p,\"\\r\\n\"); if (!p) goto protoerr;","*p = '\\0'; p += 2;","*argcp = atoi(plen);","if (*argcp <= 0 || *argcp > 1024) goto protoerr;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["                    GetOutputSafe(context, node, kOutputTensor, &output));","","  TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);","","  const TfLiteType type = input1->type;","  if (type != kTfLiteInt32 && type != kTfLiteFloat32) {","    TF_LITE_KERNEL_LOG(context, \"Unsupported data type %s.\","],"label":0}
{"cve":"CVE-2020-1888","code_chunks":["          if (UNLIKELY(ch1 != '0')) return false;","          auto const ch2 = *p++;","          if (UNLIKELY(ch2 != '0')) return false;","          auto const dch3 = dehexchar(*p++);","          if (UNLIKELY(dch3 < 0)) return false;","          auto const dch4 = dehexchar(*p++);","          if (UNLIKELY(dch4 < 0)) return false;"],"label":0}
{"cve":"CVE-2019-1010315","code_chunks":["","if (!strncmp (prop_chunk, \"SND \", 4)) {","char *cptr = prop_chunk + 4, *eptr = prop_chunk + dff_chunk_header.ckDataSize;","uint16_t numChannels, chansSpecified, chanMask = 0;","uint32_t sampleRate;","","while (eptr - cptr >= sizeof (dff_chunk_header)) {"],"label":1}
{"cve":"CVE-2016-2324","code_chunks":["static void show_object(struct object *obj, const char *name, void *data)","{","add_preferred_base_object(name);","add_object_entry(obj->oid.hash, obj->type, name, 0);"],"label":0}
{"cve":"CVE-2016-9391","code_chunks":["","\/* We can reliably put at most 31 bits since ISO\/IEC 9899 only","guarantees that a long can represent values up to 2^31-1. *\/","assert(n >= 0 && n < 32);","\/* Ensure that only the bits to be output are nonzero. *\/","assert(!(v & (~JAS_ONES(n))));",""],"label":1}
{"cve":"CVE-2020-1898","code_chunks":["  }","","  String s = thing.toString();","  return fb_compact_unserialize(s.data(), s.size(), success, errcode);","}","",""],"label":0}
{"cve":"CVE-2022-1934","code_chunks":["{","mrb_value hash = mrb_hash_new_capa(mrb, argc);","while (argc--) {","mrb_hash_set(mrb, hash, regs[0], regs[1]);","regs += 2;","}"],"label":1}
{"cve":"CVE-2019-7397","code_chunks":["        \/*","          Write ICC profile. ","        *\/","        (void) FormatLocaleString(buffer,MagickPathExtent,","          \"[\/ICCBased %.20g 0 R]\\n\",(double) object+1);","        (void) WriteBlobString(image,buffer);","        (void) WriteBlobString(image,\"endobj\\n\");"],"label":0}
{"cve":"CVE-2018-13303","code_chunks":["","int av_ac3_parse_header(const uint8_t *buf, size_t size,","                        uint8_t *bitstream_id, uint16_t *frame_size)","{","    return AVERROR(ENOSYS);","}","#endif"],"label":0}
{"cve":"CVE-2016-10249","code_chunks":["jas_matrix_t *matrix;","int i;","size_t size;","","matrix = 0;",""],"label":0}
{"cve":"CVE-2020-1918","code_chunks":["m_cursor = offset;","} else {","assertx(whence == SEEK_END);","m_cursor = m_len + offset;","}","setPosition(m_cursor);"],"label":1}
{"cve":"PYSEC-2017-101","code_chunks":["parent->first_child = NULL;","}","c->sibling_prev->sibling_next = c->sibling_next;","c->sibling_next->sibling_prev = c->sibling_prev;","}","gpr_mu_unlock(&parent->child_list_mu);"],"label":1}
{"cve":"CVE-2021-43848","code_chunks":["stream->req.content_length - stream->req.req_body_bytes_received < frame.length) {","\/* The only viable option here is to reset the stream, as we might have already started streaming the request body","* upstream. This behavior is consistent with what we do in HTTP\/2. *\/","shutdown_stream(stream, H2O_HTTP3_ERROR_EARLY_RESPONSE, H2O_HTTP3_ERROR_GENERAL_PROTOCOL, 0);","return 0;","}","break;"],"label":1}
{"cve":"PYSEC-2021-810","code_chunks":["    if (std::is_integral<T>::value) {","      size = static_cast<int64>(","          (std::abs(limit - start) + std::abs(delta) - 1) \/ std::abs(delta));","    } else {","      size = static_cast<int64>(std::ceil(std::abs((limit - start) \/ delta)));","    }","    TensorShape shape;"],"label":0}
{"cve":"CVE-2023-34475","code_chunks":["\/*","* ### Read CLUT Data ###","*\/","clut_data=(unsigned char *) AcquireQuantumMemory(1,header->clut_size);","if (clut_data == (unsigned char *) NULL)","ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",","image_info->filename);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);","output->type = input2->type;"],"label":1}
{"cve":"CVE-2018-12562","code_chunks":["        det.url.setScheme(RemoteFsDevice::constFileProtocol);","        break;","    }","","    }","    return det;","}"],"label":0}
{"cve":"CVE-2020-15121","code_chunks":["\"\\r\\n\", path, host, (int)strlen (data));","free (uri);","r_socket_write (s, (void *)data, strlen (data));","return r_socket_http_answer (s, code, rlen);","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* input_weights;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","const TfLiteTensor* recurrent_weights;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\tfb_copy(c, r);","\t\t}","\t}","\tRLC_CATCH_ANY {","\t\tRLC_THROW(ERR_CAUGHT);","\t}","\tRLC_FINALLY {"],"label":0}
{"cve":"CVE-2022-21732","code_chunks":["                                                        DatasetBase** output) {","  OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads));","  *output = new Dataset(ctx,","                        DatasetContext(DatasetContext::Params(","                            {PrivateThreadPoolDatasetOp::kDatasetType,","                             PrivateThreadPoolDatasetOp::kDatasetOp})),","                        input, num_threads);"],"label":0}
{"cve":"CVE-2022-32545","code_chunks":["if (i == (ssize_t) argc)","ThrowAnimateException(OptionError,\"MissingArgument\",option);","if (XRemoteCommand(display,resource_info.window_id,argv[i]) != 0)","return(MagickFalse);","i--;","break;","}"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        if (!PyUnicode_Check(id2)) {","            PyErr_Format(PyExc_TypeError,","                         \"unicodedata.normalize() must return a string, not \"","                         \"%.200s\",","                         Py_TYPE(id2)->tp_name);","            Py_DECREF(id2);","            return NULL;"],"label":0}
{"cve":"CVE-2018-8796","code_chunks":["\tuint8 * org_in;","\tuint8 * org_out;","","\torg_in = in;","\torg_out = out;","\tlast_line = 0;","\tindexh = 0;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\t}","","\tif (!settings->ReceivedCapabilities[CAPSET_TYPE_BITMAP_CODECS])","\t{","\t\t\/* client does not support bitmap codecs *\/","\t\tsettings->RemoteFxCodec = FALSE;","\t\tsettings->NSCodec = FALSE;"],"label":0}
{"cve":"CVE-2021-29537","code_chunks":["","void Compute(OpKernelContext* context) override {","const auto& in_min_tensor = context->input(2);","OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_min_tensor.shape()),","errors::InvalidArgument(\"min must be a scalar\"));","const float in_min = in_min_tensor.flat<float>()(0);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["tsl::Status GpuExecutor::WaitForEvent(Stream* stream, Event* event) {","  if (GpuDriver::WaitStreamOnEvent(context_, AsGpuStream(stream)->gpu_stream(),","                                   AsGpuEvent(event)->gpu_event())) {","    return ::tsl::OkStatus();","  } else {","    return tsl::Status(","        tsl::error::INTERNAL,"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2018-20839","code_chunks":["int r;","struct termios tc = {};","","assert(name);","","r = vt_verify_kbmode(fd);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["","if (!dont_inherit) {","PyEval_MergeCompilerFlags(&cf);","}","","if (strcmp(mode, \"exec\") == 0)"],"label":1}
{"cve":"CVE-2022-1052","code_chunks":["R_API RCmdAliasVal *r_cmd_alias_get(RCmd *cmd, const char *k) {","r_return_val_if_fail (cmd && cmd->aliases && k, NULL);","return ht_pp_find(cmd->aliases, k, NULL);","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;"],"label":0}
{"cve":"CVE-2020-11087","code_chunks":["context->NTLMv2Response.Challenge.cbAvPairs);","","if (flags & MSV_AV_FLAGS_MESSAGE_INTEGRITY_CHECK)","{","WLog_DBG(TAG, \"MessageIntegrityCheck:\");","winpr_HexDump(TAG, WLOG_DEBUG, message->MessageIntegrityCheck, 16);"],"label":1}
{"cve":"CVE-2021-40572","code_chunks":["\t\tif (!first_pass) return;","\t\tfirst_pass = GF_FALSE;","\t\tnum_ref_idx = num_ref_idx_l1_active;","\t\tgoto parse_weights;","\t}","}",""],"label":0}
{"cve":"CVE-2016-10271","code_chunks":["(unsigned long) strip, (unsigned long)rows);","return 0;","}","bufp += bytes_read;","}","","return 1;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["row_sums_rows += ceil(static_cast<float>(n_output) \/ n_cell);","}","","TfLiteTensor* row_sums = GetTemporary(context, node, kRowSums);","row_sums->type = kTfLiteInt32;","row_sums->allocation_type = kTfLiteArenaRwPersistent;","const int row_sums_dims[2] = {row_sums_rows, n_cell};"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* in_tensor = GetInput(context, node, 0);","TfLiteTensor* out_tensor = GetOutput(context, node, 0);","TfLiteIntArray* new_size = TfLiteIntArrayCopy(in_tensor->dims);","return context->ResizeTensor(context, out_tensor, new_size);","};"],"label":1}
{"cve":"CVE-2020-15202","code_chunks":["","","auto DoWork = [samples_per_alpha, num_alphas, &random, samples_flat,","alpha_flat](int start_output, int limit_output) {","","using Eigen::numext::exp;","using Eigen::numext::log;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"arg\\\" missing from arg\");","return 1;","}"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2018-10717","code_chunks":["act_code = GetGifWord(i, &context);","casspecial = (u8)act_code;","old_code = act_code;","WritePixel(i, &context, casspecial); npix--;","} else {","read_byt = act_code;","if(act_code >= free) {\t\/* code pas encore dans alphabet *\/"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"body\\\" missing from Lambda\");","return 1;","}","*out = Lambda(args, body, lineno, col_offset, arena);"],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["lazyClassToStringHelper(value.toLazyClassVal());","auto const size = str->size();","if (size >= RuntimeOption::MaxSerializedStringSize) {","throw Exception(\"Size of serialized string (%d) exceeds max\", size);","}","StringBuffer sb;","sb.append(\"s:\");"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","TF_LITE_ENSURE_EQ(context, NumDimensions(value), 0);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","output->type = value->type;","","if (IsConstantTensor(dims)) {"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["      TfLiteTensor* accum_scratch;","      TF_LITE_ENSURE_OK(context,","                        GetTemporarySafe(context, node, 3, &accum_scratch));","      TfLiteTensor* zero_points;","      TF_LITE_ENSURE_OK(context,","                        GetTemporarySafe(context, node, 4, &zero_points));","      TfLiteTensor* row_sums;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["output->type = input->type;","","return context->ResizeTensor(context, output,"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["        context,","        GetTemporarySafe(context, node, user_data->transposed_weights_index,","                         &transposed_weights));","    if (!IsConstantTensor(weights)) {","      SetTensorToDynamic(transposed_weights);","    } else {","      ResizeAndTransposeWeights(context, weights, transposed_weights);"],"label":0}
{"cve":"CVE-2019-19959","code_chunks":["  rc = zipfileGetMode(pMode, bIsDir, &mode, &zErr);","  if( rc ) goto zipfile_step_out;","","  \/* Decode the \"mtime\" argument. *\/","  e.mUnixTime = zipfileGetTime(pMtime);","","  \/* If this is a directory entry, ensure that there is exactly one '\/'"],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["","\tdebug(\"fpga: argc %x, dev %lx, datastr %s\\n\", argc, dev, datastr);","","\tif (dev == FPGA_INVALID_DEVICE) {","\t\tdebug(\"fpga: Invalid fpga device\\n\");","\t\treturn CMD_RET_USAGE;","\t}"],"label":0}
{"cve":"CVE-2018-20181","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["                    tok->done = E_TOODEEP;","                    tok->cur = tok->inp;","                    return ERRORTOKEN;","                }","                if (altcol <= tok->altindstack[tok->indent]) {","                    return indenterror(tok);","                }"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["aux_input_quantized->type = fw_input_to_output_weights->type;","aux_input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(aux_input_quantized->dims, aux_input->dims)) {"],"label":1}
{"cve":"CVE-2021-23180","code_chunks":["","strlcpy(buf, extension, sizeof(buf));","","*(char *)strchr(buf, '#') = '\\0';","","return (buf);","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["}","asdl_seq_SET(kwonlyargs, i, val);","}"],"label":0}
{"cve":"CVE-2022-24786","code_chunks":["","PJ_ASSERT_RETURN(session && buf && length && sli_cnt && sli, PJ_EINVAL);","","len = (3 + sli_cnt) * 4;","if (len > *length)","return PJ_ETOOSMALL;"],"label":1}
{"cve":"CVE-2023-23082","code_chunks":["pos += sizeof(short);","","unsigned long FirstOffset = (unsigned)Get32((const void*)pos, m_MotorolaOrder);","if (FirstOffset < 8 || FirstOffset > 16)","{","}",""],"label":1}
{"cve":"CVE-2021-29533","code_chunks":["    if (color_table.empty()) {","      color_table = DefaultColorTable(depth);","    }","    Tensor* output;","    OP_REQUIRES_OK(","        context,","        context->allocate_output("],"label":0}
{"cve":"CVE-2017-9990","code_chunks":["    .name           = \"xpm\",","    .type           = AVMEDIA_TYPE_VIDEO,","    .id             = AV_CODEC_ID_XPM,","    .priv_data_size = sizeof(XPMDecContext),","    .close          = xpm_decode_close,","    .decode         = xpm_decode_frame,","    .capabilities   = AV_CODEC_CAP_DR1,"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep2_mul_basic(ep2_t r, const ep2_t p, const bn_t k) {","size_t l;","ep2_t t;","","ep2_null(t);"],"label":0}
{"cve":"CVE-2019-20840","code_chunks":["\/* for a possible base64 decoding, we decode multiples of 4 bytes until","* the whole frame is received and carry over any remaining bytes in the carry buf*\/","data = (unsigned char *)(wsctx->writePos - toDecode);","data32= (uint32_t *)data;","","for (i = 0; i < (toDecode >> 2); i++) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["reg.invoke = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* a0 = GetInput(context, node, 0);","TfLiteTensor* a1 = GetOutput(context, node, 0);","int num = a0->dims->data[0];","for (int i = 0; i < num; i++) {","a1->data.f[i] = a0->data.f[i];"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2016-2315","code_chunks":["static void record_recent_object(struct object *obj,","struct strbuf *path,","const char *last,","void *data)","{","sha1_array_append(&recent_objects, obj->oid.hash);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","","  TfLiteIntArray* output_shape = TfLiteIntArrayCreate(input_dims_size);","  for (int i = 0; i < input_dims_size; i++) {","    output_shape->data[i] = input_dims->data[i];"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input_box_encodings =","GetInput(context, node, kInputTensorBoxEncodings);","TF_LITE_ENSURE_EQ(context, input_box_encodings->dims->data[0], kBatchSize);","const int num_boxes = input_box_encodings->dims->data[1];","TF_LITE_ENSURE(context, input_box_encodings->dims->data[2] >= kNumCoordBox);","const TfLiteTensor* input_anchors ="],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\treturn FALSE;","","\tStream_Write_UINT16(s, 3); \/* codecPropertiesLength *\/","\t\/* TS_NSCODEC_CAPABILITYSET *\/","\tStream_Write_UINT8(s, fAllowDynamicFidelity); \/* fAllowDynamicFidelity (1 byte) *\/","\tStream_Write_UINT8(s, fAllowSubsampling);     \/* fAllowSubsampling (1 byte) *\/","\tStream_Write_UINT8(s, colorLossLevel);        \/* colorLossLevel (1 byte) *\/"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumDimensions(seq_lengths), 1);","","if (input->type != kTfLiteInt32 && input->type != kTfLiteFloat32 &&"],"label":1}
{"cve":"CVE-2016-8649","code_chunks":["\t\t\tERROR(\"Error using IPC for the child to tell us to open LSM fd (3): %s.\",","\t\t\t      strerror(errno));","\t\t\tgoto cleanup_error;","\t\t}","","\t\t\/* Open LSM fd and send it to child. *\/","\t\tif ((options->namespaces & CLONE_NEWNS) && (options->attach_flags & LXC_ATTACH_LSM) && init_ctx->lsm_label) {"],"label":0}
{"cve":"CVE-2018-5730","code_chunks":["goto cleanup;","}","","\/* get the current subtree list *\/","if ((st = krb5_get_subtree_info(ldap_context, &subtreelist, &ntrees)) != 0)","goto cleanup;"],"label":1}
{"cve":"CVE-2023-30847","code_chunks":["target = NULL;","}","if (target == &target_buf)","h2o_url_init(&target_buf, req->scheme, req->authority, h2o_iovec_init(H2O_STRLIT(\"\/\")));","","const char *upgrade_to = NULL;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"kwonlyargs\\\" missing from arguments\");","return 1;","}","else {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","const auto* params =","reinterpret_cast<TfLiteLeakyReluParams*>(node->builtin_data);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      reinterpret_cast<TfLiteMirrorPaddingParams*>(node->builtin_data);","","  if (params == nullptr) {","    return kTfLiteError;","  }","  const int input_dims = NumDimensions(input_tensor);",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const float* input_data = GetTensorData<float>(input);","const TfLiteTensor* fft_length;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFftLengthTensor, &fft_length));","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2021-30145","code_chunks":["mp_info(log, \"search expr: %s\\n\", filename);","","while (error_count < 5) {","sprintf(fname, filename, count++);","if (!mp_path_exists(fname)) {","error_count++;","mp_verbose(log, \"file not found: '%s'\\n\", fname);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\tbn_rand(a, RLC_POS, bits);","\t\t\t\tbn_srt(b, a);","\t\t\t\tbn_sqr(c, b);","\t\t\t\tTEST_ASSERT(bn_cmp(c, a) != RLC_GT, end);","\t\t\t}","\t\t}","\t\tTEST_END;"],"label":0}
{"cve":"CVE-2023-27114","code_chunks":["goto err;","}","int i = 0;","op->len += n;","for (i = 0; i < count; i++) {","n = read_u32_leb128 (buf + op->len, buf + buf_len, &table[i]);"],"label":1}
{"cve":"CVE-2018-16643","code_chunks":["break;","}","break;","}","break;","}"],"label":1}
{"cve":"PYSEC-2021-275","code_chunks":["const Tensor& params) {","int64_t batch_size = 1;      for (int idx = 0; idx < batch_dims_; ++idx) {","batch_size *= params.dim_size(idx);","}","OP_REQUIRES(","ctx, batch_size != 0,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2021-46462","code_chunks":["","goto activate;","","} else if (njs_is_array(arr_like)) {","arr = arr_like->data.u.array;",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\t\tif (pad == RSA_PRV) {","\t\t\t\t\t\tint counter = 0;","\t\t\t\t\t\tdo {","\t\t\t\t\t\t\tcounter++;","\t\t\t\t\t\t\tm_len--;","\t\t\t\t\t\t\tbn_rsh(t, m, 8 * m_len);","\t\t\t\t\t\t\tpad = (uint8_t)t->dp[0];"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["return Py_None;","}","","result = PyType_GenericNew(arguments_type, NULL, NULL);"],"label":1}
{"cve":"CVE-2016-6873","code_chunks":["const Variant& varname,","const Array& args \/* = null array *\/) {","Array ret = Array::attach(PackedArray::MakeReserve(args.size() + 1));","VarEnv* v = g_context->getOrCreateVarEnv();","if (v) {","compact(v, ret, varname);"],"label":1}
{"cve":"CVE-2018-20179","code_chunks":["\tUNUSED(size);","\tint indexw;","\tint indexh;","\tint code;","\tint collen;","\tint replen;","\tint color;"],"label":0}
{"cve":"CVE-2016-9841","code_chunks":["#endif","    unsigned wsize;             \/* window size or zero if not using window *\/","    unsigned whave;             \/* valid bytes in the window *\/","    unsigned wnext;             \/* window write index *\/","    unsigned char FAR *window;  \/* allocated sliding window, if wsize != 0 *\/","    unsigned long hold;         \/* local strm->hold *\/","    unsigned bits;              \/* local strm->bits *\/"],"label":0}
{"cve":"CVE-2019-13311","code_chunks":["%","%","%    o cli_wand: the main CLI Wand to use. (sometimes not required)","%","%    o option: The special option (with any switch char) to process","%"],"label":1}
{"cve":"CVE-2016-6912","code_chunks":["BGD_DECLARE(void *) gdImageWebpPtrEx (gdImagePtr im, int *size, int quality)","{","\tvoid *rv;","\tgdIOCtx *out = gdNewDynamicCtx(2048, NULL);","\tif (out == NULL) {","\t\treturn NULL;","\t}"],"label":0}
{"cve":"CVE-2018-14359","code_chunks":["goto bail;","}","","len = mutt_b64_decode(obuf, idata->buf + 2);","if (len == -1)","{","mutt_debug(1, \"Error decoding base64 response.\\n\");"],"label":1}
{"cve":"CVE-2019-13308","code_chunks":["Cr->red=gamma*(Ar->red*Br->red+Ai->red*Bi->red);","Ci->red=gamma*(Ai->red*Br->red-Ar->red*Bi->red);","gamma=PerceptibleReciprocal(Br->green*Br->green+Bi->green*Bi->green+","snr);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"PYSEC-2020-258","code_chunks":["RETURN_STRING_AS_STATUS(NumpyHalfConverter::Convert(obj, &state, ret));","","if (Int64Converter::Convert(obj, &state, ret) == nullptr)","return Status::OK();","break;",""],"label":1}
{"cve":"CVE-2019-20630","code_chunks":["","\tfor (i=0; i<nb_progs; i++) {","\t\tu16 number, pid;","\t\tnumber = (data[0]<<8) | data[1];","\t\tpid = (data[2]&0x1f)<<8 | data[3];","\t\tdata += 4;","\t\tif (number==0) {"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["bssl::UniquePtr<X509> cert = readCertFromFile(TestEnvironment::substitute(","\"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_dns_cert.pem\"));","envoy::type::matcher::v3::StringMatcher matcher;","matcher.MergeFrom(TestUtility::createRegexMatcher(\".*.foo.com\"));"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":[],"label":1}
{"cve":"CVE-2018-16749","code_chunks":["        if (length < 8)","          {","            chunk=(unsigned char *) RelinquishMagickMemory(chunk);","            ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");","          }","","        image_width=(size_t) mng_get_long(p);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["\"Mismatch between cudnn conv and algorithm descriptors.\");","}","","size_t size_in_bytes;","if (algorithm_desc.workspace_size()) {","size_in_bytes = *algorithm_desc.workspace_size();"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["RETURN_IF_ERROR(CheckInputsOutputs(context, tflite_node,","\/*runtime_inputs=*\/1, \/*outputs=*\/1));","RETURN_IF_ERROR(CheckTensorIsAvailable(context, tflite_node, 1));","auto pad_tensor = tflite::GetInput(context, tflite_node, 1);","if (pad_tensor->dims->size != 2) {","return absl::InvalidArgumentError(absl::StrCat(","\"Invalid paddings tensor dimension: expected 2 dim, got \","],"label":1}
{"cve":"CVE-2019-8906","code_chunks":["char sbuf[512];","struct NetBSD_elfcore_procinfo pi;","memset(&pi, 0, sizeof(pi));","memcpy(&pi, nbuf + doff, descsz);","","if (file_printf(ms, \", from '%.31s', pid=%u, uid=%u, \"","\"gid=%u, nlwps=%u, lwp=%u (signal %u\/code %u)\","],"label":1}
{"cve":"CVE-2022-39347","code_chunks":["continue;","}","","fullpath = drive_file_combine_fullpath(path_slash, findFileData.cFileName, len * 2);","DEBUG_WSTR(\"Delete %s\", fullpath);","","if (findFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)"],"label":1}
{"cve":"CVE-2019-16347","code_chunks":["}","#endif \/* NGIFLIB_INDEXED_ONLY *\/","} else {","int j;","#ifndef NGIFLIB_INDEXED_ONLY","if(p->mode & NGIFLIB_MODE_INDEXED) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, node->outputs->size,","params->merge_outputs ? 1 : 2);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);","TF_LITE_ENSURE_EQ(context, input->dims->size, 3);","const bool time_major = params->time_major;"],"label":1}
{"cve":"CVE-2018-10360","code_chunks":["","cname = (unsigned char *)","&nbuf[doff + prpsoffsets(i)];","for (cp = cname; *cp && isprint(*cp); cp++)","continue;","\/*","* Linux apparently appends a space at the end"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    if (fw_projection_weights != nullptr) {","      fw_row_sums_rows += ceil(static_cast<float>(n_fw_output) \/ n_fw_cell);","    }","    node->temporaries->data[kFwRowSums] =","        op_data->scratch_tensor_index + kFwRowSums;","    TfLiteTensor* fw_row_sums;","    TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2018-25032","code_chunks":["return Z_MEM_ERROR;","}","s->d_buf = overlay + s->lit_bufsize\/sizeof(ush);","s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;","","s->level = level;"],"label":1}
{"cve":"CVE-2019-11413","code_chunks":["\t\tpattern = \"(?:)\";","","\tif (js_isdefined(J, 2)) {","\t\tconst char *s = js_tostring(J, 2);","\t\tint g = 0, i = 0, m = 0;","\t\twhile (*s) {","\t\t\tif (*s == 'g') ++g;"],"label":0}
{"cve":"CVE-2022-40299","code_chunks":["PrintS(\"cannot fork\\n\");","}","","fp=fopen(filename,\"r\");","if (fp==NULL)","{","Print(\"cannot read from %s\\n\",filename);"],"label":1}
{"cve":"CVE-2021-29534","code_chunks":["void Compute(OpKernelContext* context) override {","const Tensor* input_indices;","const Tensor* input_values;","const Tensor* input_shape;","SparseTensorsMap* map;",""],"label":0}
{"cve":"CVE-2020-4031","code_chunks":["free(list);","if (server->ipcSocket == NULL)","{","if (!open_port(server, NULL))"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["scaling_factors_size));","}","node->temporaries->data[3] = op_data->scratch_tensor_index + 3;","TfLiteTensor* accum_scratch = GetTemporary(context, node, \/*index=*\/3);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {num_units, batch_size};"],"label":1}
{"cve":"CVE-2020-1916","code_chunks":["","auto buf = PasswdBuffer{};","struct passwd *pw;","if (getpwnam_r(uname.c_str(), &buf.ent, buf.data.get(), buf.size, &pw)) {","return;"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["\trem = check->all_attrs_nr;","\tfill(path, pathlen, basename_offset, check->stack, check->all_attrs, rem);","}","","void git_check_attr(struct index_state *istate,","\t\t    const char *path,","\t\t    struct attr_check *check)"],"label":0}
{"cve":"CVE-2018-1068","code_chunks":["{","int growth = 0;","char *buf;","","if (size_left == 0)","return 0;",""],"label":0}
{"cve":"CVE-2020-6016","code_chunks":["","READ_SEGMENT_DATA_SIZE( unreliable )","Assert( cbSegmentSize > 0 );","bool bLastSegmentInMessage = ( nFrameType & 0x20 ) != 0;","SNP_ReceiveUnreliableSegment( nCurMsgNum, nOffset, pSegmentData, cbSegmentSize, bLastSegmentInMessage, usecNow );","}"],"label":1}
{"cve":"CVE-2022-0156","code_chunks":["ga_add_string(garray_T *gap, char_u *p)","{","char_u *cp = vim_strsave(p);",""],"label":1}
{"cve":"CVE-2018-18314","code_chunks":["","    \/* Optimize inverted simple patterns (e.g. [^a-z]) when everything is known","     * at compile time.  Besides not inverting folded locale now, we can't","     * invert if there are things such as \\w, which aren't known until runtime","     * *\/","    if (cp_list","        && invert"],"label":0}
{"cve":"CVE-2022-30503","code_chunks":["ret = njs_value_to_integer(vm, value, &from);","if (njs_slow_path(ret != NJS_OK)) {","return ret;","}","","from = from < 0 ? njs_max(from + length, 0) : njs_min(from, length);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context, ResizeOutput(context, node));"],"label":1}
{"cve":"CVE-2016-5842","code_chunks":["","if (endian == LSBEndian)","{","value=(unsigned short) ((buffer[1] << 8) | buffer[0]);","quantum.unsigned_value=(value & 0xffff);","return(quantum.signed_value);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, bw_input_to_output_weights->type,","fw_input_to_output_weights->type);","","const TfLiteTensor* fw_recurrent_to_output_weights ="],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","TfLiteTensor* output = GetOutput(context, node, 0);","TfLiteIntArray* outputSize = TfLiteIntArrayCreate(NumDimensions(value));","","outputSize->data[0] = SizeOfDimension(lookup, 0);"],"label":1}
{"cve":"CVE-2019-16785","code_chunks":["return inst, sock, map","","def test_ctor(self):","inst, _, map = self._makeOneWithMap()","self.assertEqual(inst.addr, \"127.0.0.1\")","self.assertEqual(inst.sendbuf_len, 2048)"],"label":1}
{"cve":"PYSEC-2021-868","code_chunks":["        if (!uc->use_exits) {","            err = UC_ERR_ARG;","        } else if (rw == UC_CTL_IO_READ) {","            size_t *exits_cnt = va_arg(args, size_t *);","            *exits_cnt = g_tree_nnodes(uc->exits);","        } else {","            err = UC_ERR_ARG;"],"label":0}
{"cve":"CVE-2023-22742","code_chunks":["LIBSSH2_CHANNEL *channel=NULL;","LIBSSH2_KNOWNHOSTS *known_hosts = NULL;","","t->current_stream = NULL;","","*stream = NULL;"],"label":0}
{"cve":"CVE-2022-3957","code_chunks":["while (*content == ' ') content++;","if (strstr(content, \"defer\")) {","par->defer = 1;","content += 5;","} else {","content = attribute_content;","}"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["WLog_INFO(TAG, \"OrderCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 88)","return FALSE;","","Stream_Read(s, terminalDescriptor, 16);         \/* terminalDescriptor (16 bytes) *\/"],"label":1}
{"cve":"CVE-2019-20392","code_chunks":["}","","if (lys_getnext_data(module, lys_parent(siblings), name, strlen(name), LYS_CONTAINER | LYS_LIST | LYS_NOTIF","| LYS_RPC | LYS_ACTION, &snode) || !snode) {","LOGERR(siblings->module->ctx, LY_EINVAL, \"Failed to find \\\"%s\\\" as a sibling to \\\"%s:%s\\\".\",","name, lys_node_module(siblings)->name, siblings->name);","return NULL;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["goto failed;","}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {"],"label":1}
{"cve":"CVE-2022-0519","code_chunks":["\tif (!attr) {","\t\treturn NULL;","\t}","\tattr->type = R_BIN_JAVA_ATTR_TYPE_SYNTHETIC_ATTR;","\tattr->size = 6;","\treturn attr;","}"],"label":0}
{"cve":"CVE-2017-6439","code_chunks":["return NULL;","}","return parse_string_node(object, size);","","if (size*2 < size) {","PLIST_BIN_ERR(\"%s: Integer overflow when calculating BPLIST_UNICODE data size.\\n\", __func__);"],"label":1}
{"cve":"CVE-2023-45898","code_chunks":[],"label":1}
{"cve":"CVE-2023-51698","code_chunks":["","static void","comics_document_thumbnails_get_dimensions (EvDocumentThumbnails *document,","\t\t\t\t\t   EvRenderContext      *rc,","\t\t\t\t\t   gint                 *width,","\t\t\t\t\t   gint                 *height)","{"],"label":0}
{"cve":"CVE-2021-41216","code_chunks":["  TF_RETURN_IF_ERROR(c->WithValue(perm_elems, rank, &perm_elems));","","        if (perm != nullptr) {","    std::vector<int64_t> data;","    if (perm->dtype() == DT_INT32) {","      data = AsInt64<int32>(perm, rank);","    } else {"],"label":0}
{"cve":"CVE-2019-13222","code_chunks":["c->value_bits = get_bits(f, 4)+1;","c->sequence_p = get_bits(f,1);","if (c->lookup_type == 1) {","c->lookup_values = lookup1_values(c->entries, c->dimensions);","} else {","c->lookup_values = c->entries * c->dimensions;","}"],"label":1}
{"cve":"CVE-2021-46462","code_chunks":["    }","","    ret = njs_function_name_set(vm, function, &name, \"bound\");","    if (njs_slow_path(ret == NJS_ERROR)) {","        return ret;","    }",""],"label":0}
{"cve":"CVE-2021-32439","code_chunks":["nb_pack_samples = 1;","","if (!stsc->nb_entries || (stsc->nb_entries + 2 >= stsc->alloc_size)) {","if (!stsc->alloc_size) stsc->alloc_size = 1;"],"label":1}
{"cve":"PYSEC-2022-70","code_chunks":["      reinterpret_cast<TfLiteFullyConnectedParams*>(node->builtin_data);","  OpData* data = reinterpret_cast<OpData*>(node->user_data);","","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  const TfLiteTensor* filter;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["authorizer_data,","authorizer_reply, s->entity_name,","s->global_id, caps_info,","session_key);","} else {","dout(10) << __func__ << \" no rotating_keys (yet), denied\" << dendl;","is_valid = false;"],"label":1}
{"cve":"CVE-2016-5357","code_chunks":["int *err, gchar **err_info)","{","int\t\tpkt_len;","char\t\tline[NETSCREEN_LINE_LENGTH];","char\t\tcap_int[NETSCREEN_MAX_INT_NAME_LENGTH];","gboolean\tcap_dir;"],"label":1}
{"cve":"CVE-2017-3731","code_chunks":["                               &cctx->ks, (block128_f) AES_encrypt);","            cctx->str = NULL;","            cctx->key_set = 1;","        } while (0);","    if (iv) {","        memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), iv, 15 - cctx->L);","        cctx->iv_set = 1;"],"label":0}
{"cve":"CVE-2018-14470","code_chunks":["case MESSAGE_UPDATE: {","if (!ndo->ndo_vflag) {","ND_PRINT((ndo, \" update\"));","if(len < 1)","ND_PRINT((ndo, \"\/truncated\"));","else","ND_PRINT((ndo, \"%s%s%s\","],"label":1}
{"cve":"CVE-2019-19242","code_chunks":["      if( pExpr->pLeft->iTable==0 ){","        pExpr->pLeft->iTable = sqlite3CodeSubselect(pParse, pExpr->pLeft);","      }","      assert( pExpr->iTable==0 || pExpr->pLeft->op==TK_SELECT );","      if( pExpr->iTable!=0","       && pExpr->iTable!=(n = sqlite3ExprVectorSize(pExpr->pLeft))","      ){"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","TfLiteTensor* output = GetOutput(context, node, 0);","TfLiteIntArray* outputSize = TfLiteIntArrayCreate(NumDimensions(value));","","outputSize->data[0] = SizeOfDimension(lookup, 0);"],"label":1}
{"cve":"CVE-2020-5215","code_chunks":["static const char* ConvertScalar(PyObject* v, Eigen::half* out) {","Safe_PyObjectPtr as_float = make_safe(PyNumber_Float(v));","double v_double = PyFloat_AS_DOUBLE(as_float.get());","*out = Eigen::half(v_double);","","return nullptr;","}"],"label":1}
{"cve":"CVE-2022-29226","code_chunks":["bool found_bearer_token_{false};"],"label":1}
{"cve":"PYSEC-2020-303","code_chunks":["static const char* ConvertScalar(PyObject* v, Eigen::half* out) {","return ConvertOneFloat<Eigen::half>(v, out);","}"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["input_offset_ptr);","break;","case kCblasOptimized: {","TfLiteTensor* row_sums ="],"label":1}
{"cve":"CVE-2022-32545","code_chunks":["WandExport MagickBooleanType AnimateImageCommand(ImageInfo *image_info,","int argc,char **argv,char **wand_unused(metadata),ExceptionInfo *exception)","{","#if defined(MAGICKCORE_X11_DELEGATE)","#define DestroyAnimate() \\","{ \\"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["col = (col\/tok->tabsize + 1) * tok->tabsize;","altcol = (altcol\/tok->alttabsize + 1)","* tok->alttabsize;","}","else if (c == '\\014')  {\/* Control-L (formfeed) *\/","col = altcol = 0; \/* For Emacs users *\/"],"label":1}
{"cve":"CVE-2017-6436","code_chunks":["return NULL;","}","return parse_string_node(object, size);","","if (size*2 < size) {","PLIST_BIN_ERR(\"%s: Integer overflow when calculating BPLIST_UNICODE data size.\\n\", __func__);"],"label":1}
{"cve":"CVE-2016-10167","code_chunks":["","path = gdTestFilePath2(\"gdimageline\", \"bug00315_exp.png\");","gdAssertImageEqualsToFile(path, im);","gdFree(path);","","gdImageDestroy(im);"],"label":1}
{"cve":"CVE-2018-14362","code_chunks":["  char buf[16];","  bool old = false;","  void *hdata = NULL;","  anum_t first = 0, last = 0;","","  if (!hc)","    return;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["bool IsPadOpSupported(const TfLiteRegistration* registration,","const TfLiteNode* node, TfLiteContext* context) {","const TfLiteTensor* padding = GetInput(context, node, 1);","if (!IsConstantTensor(padding)) {","TF_LITE_KERNEL_LOG(context,","\"%s: Only constant padding is supported for PAD.\","],"label":1}
{"cve":"CVE-2021-32687","code_chunks":["if ((len = rdbLoadLen(rdb,NULL)) == RDB_LENERR) return NULL;","","\/* Use a regular set when there are too many entries. *\/","if (len > server.set_max_intset_entries) {","o = createSetObject();","\/* It's faster to expand the dict to the right size asap in order","* to avoid rehashing *\/"],"label":1}
{"cve":"CVE-2020-27787","code_chunks":["upx_uint64_t const v_str = get_te64(&dynp0[-1+ x_str].d_val);","unsigned const  z_sym = dt_table[Elf64_Dyn::DT_SYMENT];","unsigned const sz_sym = !z_sym ? sizeof(Elf64_Sym)",": get_te64(&dynp0[-1+ z_sym].d_val);","if (sz_sym < sizeof(Elf64_Sym)) {","char msg[50]; snprintf(msg, sizeof(msg),"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","output->type = kTfLiteInt32;","","SetTensorToPersistentRo(output);"],"label":1}
{"cve":"CVE-2020-13396","code_chunks":["CopyMemory(context->ChallengeTimestamp, ptr, 8);","}","}","","length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;",""],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["int err;","","pj_lock_acquire(ds->ossl_lock);","","\/* Init DTLS (if not yet) *\/","status = ssl_create(ds, idx);"],"label":1}
{"cve":"CVE-2021-25940","code_chunks":["#if _WIN32","options->addOption(\"--console.code-page\",","\"Windows code page to use; defaults to UTF8\",","new UInt16Parameter(&_codePage),","arangodb::options::makeDefaultFlags(arangodb::options::Flags::Hidden));","#endif"],"label":1}
{"cve":"CVE-2020-11097","code_chunks":["WLog_INFO(TAG, \"\\t%s AvId: %\" PRIu16 \" AvLen: %\" PRIu16 \"\",","AV_PAIR_STRINGS[ntlm_av_pair_get_id(pAvPair)], ntlm_av_pair_get_id(pAvPair),","ntlm_av_pair_get_len(pAvPair));","winpr_HexDump(TAG, WLOG_INFO, ntlm_av_pair_get_value_pointer(pAvPair),","ntlm_av_pair_get_len(pAvPair));",""],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["void setSize(int len);"],"label":1}
{"cve":"CVE-2022-1907","code_chunks":["    strcpy(attr, attribute);","    strcat(attr, \"=\");","    attr_length++;","    if (size < attr_length) {","        return SIZE_MAX;","    }","    \/* FIXME: search may start inside tag, so it is a safer option *\/"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["\/* turn logging back on *\/","ly_ilo_restore(NULL, prev_ilo, NULL, 0);","} else {","if (make_canonical(ctx, LY_TYPE_INST, &value, NULL, NULL)) {","\/* if a change occurred, value was removed from the dictionary so fix the pointers *\/","*value_ = value;","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (_PyObject_HasAttrId(obj, &PyId_dims)) {","int res;","Py_ssize_t len;","Py_ssize_t i;","tmp = _PyObject_GetAttrId(obj, &PyId_dims);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* cond = GetInput(context, node, 0);","bool cond_value = cond->data.b[0];","","Subgraph* this_subgraph = reinterpret_cast<Subgraph*>(context->impl_);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\tif (colorLossLevel < 1)","\t\tcolorLossLevel = 1;","","\tif (colorLossLevel > 7)","\t\tcolorLossLevel = 7;","","\tif (!Stream_EnsureRemainingCapacity(s, 8))"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* axis_tensor;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kAxisTensor, &axis_tensor));","int axis = GetTensorData<int32_t>(axis_tensor)[0];","const int rank = NumDimensions(input);"],"label":0}
{"cve":"CVE-2021-20304","code_chunks":["fill4 (raw, N);","compressVerify(raw, N, HUF_COMPRESS_DEK_HASH_FOR_FILL4_N);","compressUncompress (raw, N);","compressUncompressSubset (raw, N);","","fill4 (raw, 0);"],"label":1}
{"cve":"CVE-2020-1917","code_chunks":["bool MemFile::seek(int64_t offset, int whence \/* = SEEK_SET *\/) {","assertx(m_len != -1);","if (whence == SEEK_CUR) {","if (offset > 0 && offset < bufferedLen()) {","setReadPosition(getReadPosition() + offset);","setPosition(getPosition() + offset);","return true;"],"label":1}
{"cve":"CVE-2023-23557","code_chunks":["  MutableHandle<> propValueHandle{runtime};","  MutableHandle<SymbolID> tmpSymbolStorage{runtime};","  GCScopeMarkerRAII marker{runtime};","    for (uint32_t nextKeyIdx = 0, endIdx = keys->getEndIndex();","       nextKeyIdx < endIdx;","       ++nextKeyIdx) {","    marker.flush();"],"label":0}
{"cve":"CVE-2021-37665","code_chunks":["      output_min->flat<float>()(0) = input_requested_min_float;","      output_max->flat<float>()(0) = input_requested_max_float;","    } catch (mkldnn::error& e) {","      string error_msg = \"Status: \" + std::to_string(e.status) +","                         \", message: \" + std::string(e.message) + \", in file \" +","                         std::string(__FILE__) + \":\" + std::to_string(__LINE__);","      OP_REQUIRES_OK("],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["                while (tok->indent > 0 &&","                    col < tok->indstack[tok->indent]) {","                    tok->pendin--;","                    tok->indent--;","                }","                if (col != tok->indstack[tok->indent]) {","                    tok->done = E_DEDENT;"],"label":0}
{"cve":"CVE-2022-41861","code_chunks":["for (count = 0; count < ntohs(filter->u.generic.len); count++) {","i = snprintf(p, outlen, \"%02x\", filter->u.generic.mask[count]);","p += i;","outlen -= i;","}"],"label":1}
{"cve":"CVE-2019-10714","code_chunks":["return(c);","#if defined(MAGICKCORE_LOCALE_SUPPORT)","if (c_locale != (locale_t) NULL)","return(tolower_l((int) ((unsigned char) c),c_locale));","#endif","return(tolower((int) ((unsigned char) c)));","}"],"label":0}
{"cve":"PYSEC-2020-321","code_chunks":["if (node_value.has_tensor()) {","const PartialTensorShape node_shape(node_value.tensor().tensor_shape());","if (node_shape.num_elements() < 0) {","return errors::FailedPrecondition(","\"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\",","node.op(), \"\\\") which initializes from a tensor with \","],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor1, &input1));","  const TfLiteTensor* input2;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor2, &input2));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_grow(bn_t a, int digits);"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["TEST_P(SslSocketTest, Ipv4San) {","const std::string client_ctx_yaml = R\"EOF(","filename: \"{{ test_rundir }}\/test\/config\/integration\/certs\/upstreamcacert.pem\"","exact: \"127.0.0.1\"",")EOF\";","","const std::string server_ctx_yaml = R\"EOF("],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","  const TfLiteEvalTensor* input =","      tflite::micro::GetEvalInput(context, node, kInputTensor);","  TfLiteEvalTensor* output =","      tflite::micro::GetEvalOutput(context, node, kOutputTensor);","","                            const float epsilon = 1e-6f;"],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["virtual size_t\tRead(void *buffer, size_t size, size_t count);"],"label":1}
{"cve":"CVE-2016-2324","code_chunks":["\tneed_reset = 0;","","\tfor (i = writer.selected_nr - 1; i >= 0; --i) {","\t\tstruct bitmapped_commit *stored;","\t\tstruct object *object;","","\t\tkhiter_t hash_pos;"],"label":0}
{"cve":"CVE-2021-30022","code_chunks":["\tgf_bs_enable_emulation_byte_removal(bs, GF_TRUE);","","\tif (!hevc_parse_nal_header(bs, NULL, NULL, NULL)) goto exit;","","\tpps_id = gf_hevc_read_pps_bs_internal(bs, hevc);","","\tif (bs) gf_bs_del(bs);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  if (data->has_low_rank_input_condition) {","    TF_LITE_SWITCH(input_x->type, RankOneSelect);","  } else if (data->requires_broadcast) {","    TF_LITE_SWITCH(input_x->type, BroadcastSelect4DSlow);","  } else {","    TF_LITE_SWITCH(input_x->type, Select);","  }"],"label":0}
{"cve":"CVE-2019-15226","code_chunks":["HttpIntegrationTest::waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices) {","uint64_t upstream_with_request;","if (!fake_upstream_connection_) {",""],"label":1}
{"cve":"CVE-2021-4110","code_chunks":["mrb_proc_copy(struct RProc *a, struct RProc *b)","{","if (a->body.irep) {","\/* already initialized proc *\/"],"label":1}
{"cve":"CVE-2016-5356","code_chunks":["\t\t\treturn FALSE;","\t\t}","\t\tyy = mm = dd = hr = min = sec = csec = 0;","\t}","\tif (pkt_len > WTAP_MAX_PACKET_SIZE) {","\t\t\/*","\t\t * Probably a corrupt capture file; don't blow up trying"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","  switch (input->type) {        L2EvalFloat<kernel_type>(context, node, params, data, input, output);","      break;","              context->ReportError(context, \"Type %d not currently supported.\","],"label":0}
{"cve":"CVE-2022-1382","code_chunks":["RList *r_bin_ne_get_segments(r_bin_ne_obj_t *bin) {","int i;","if (!bin || !bin->segment_entries) {","return NULL;","}","RList *segments = r_list_newf (free);"],"label":0}
{"cve":"CVE-2023-38408","code_chunks":["ret->sk_load_resident_keys = ssh_sk_load_resident_keys;","return ret;","}","if ((ret->dlhandle = dlopen(path, RTLD_NOW)) == NULL) {","error(\"Provider \\\"%s\\\" dlopen failed: %s\", path, dlerror());","goto fail;"],"label":1}
{"cve":"CVE-2022-35979","code_chunks":["  const float input_min = -128.0f;","  const float input_max = 127.0f;","  const int input_width = 2;","  const int input_height = 4;","  Tensor input_float(DT_FLOAT, {input_height, input_width});","  test::FillValues<float>(&input_float, {-100, -1, 0, 1, 3, 6, 7, 100});","  Tensor input_quantized ="],"label":0}
{"cve":"CVE-2021-20271","code_chunks":["switch (td.tag) {","\/* XXX Translate legacy signature tag values. *\/","td.tag = RPMTAG_SIGSIZE;","break;","td.tag = RPMTAG_SIGPGP;","break;"],"label":1}
{"cve":"CVE-2019-17177","code_chunks":["tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));","","if (NULL == tmp)","{"],"label":1}
{"cve":"PYSEC-2020-328","code_chunks":["  if (IsDynamicTensor(output)) {","    TF_LITE_ENSURE_OK(context,","                      ResizeOutputTensor(context, data, segment_ids, output));","  }","","#define TF_LITE_SEGMENT_SUM(dtype)                                      \\","  reference_ops::SegmentSum<dtype>(                                     \\"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\tif (b[0] == 0) {","\t\t\tfor (j = 0, i = 1; i < len; i++) {","\t\t\t\tk = (b[i] < 0 ? -b[i] : b[i]);","\t\t\t\tfor (; j < k; j++) {","\t\t\t\t\tfp24_sqr_pck(t, t);","\t\t\t\t}","\t\t\t\tif (b[i] < 0) {"],"label":0}
{"cve":"PYSEC-2020-306","code_chunks":["if (!status->status.ok()) {","return nullptr;","}","","auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);","if (!status->status.ok()) {"],"label":0}
{"cve":"CVE-2022-1795","code_chunks":["\t\treturn GF_NON_COMPLIANT_BITSTREAM;","\t}","\te = gf_bifs_get_field_index(node, ind, GF_SG_FIELD_CODING_IN, &field_ind);","\tif (e) return e;","\te = gf_node_get_field(node, field_ind, &field);","\tif (e) return e;","\tif (gf_sg_vrml_is_sf_field(field.fieldType)) return GF_NON_COMPLIANT_BITSTREAM;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\tep_mul_sim_plain(r, p, _k, q, _m, NULL);","\t\t}","#endif","\t\t(void)flag;","\t} RLC_CATCH_ANY {","\t\tRLC_THROW(ERR_CAUGHT);","\t}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  Subgraph* subgraph = reinterpret_cast<Subgraph*>(context->impl_);","  auto& resources = subgraph->resources();","  auto* lookup = resource::GetHashtableResource(&resources, resource_id);","  TF_LITE_ENSURE(context, lookup != nullptr);","","  output_data[0] = lookup->Size();","  return kTfLiteOk;"],"label":0}
{"cve":"CVE-2022-2549","code_chunks":["GF_CommandField *inf;","if (!gf_list_count(com->command_fields)) return GF_OK;","inf = (GF_CommandField *) gf_list_get(com->command_fields, 0);","","DUMP_IND(sdump);","if (sdump->XMLDump) {"],"label":1}
{"cve":"CVE-2022-0520","code_chunks":["ret = R_NEW0 (pyc_object);","break;","eprintf (\"Get not implemented for type 0x%x\\n\", type);","r_list_pop (refs);","free_object (ret);","return NULL;","break;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE(context, IsDynamicTensor(output0));","const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output1 = GetOutput(context, node, 1);","TF_LITE_ENSURE(context, input->dims->size == output1->dims->size);","TF_LITE_ENSURE(context, input->dims->data[0] == output1->dims->data[0]);","return kTfLiteOk;"],"label":1}
{"cve":"CVE-2019-15162","code_chunks":["\tif (nread == -1)","\t{","\t\trpcapd_log(LOGPRIO_ERROR, \"Read from client failed: %s\", errbuf);","\t\treturn -1;","\t}","\t*plen -= nread;","\treturn 0;"],"label":0}
{"cve":"CVE-2022-35972","code_chunks":["        std::is_same<T2, quint8>() && std::is_same<T3, qint32>()) {","      auto input_ui8_array = input.flat<quint8>();","      auto bias_ui8_array = bias.flat<quint8>();","      GetOutputMinAndMaxForQuantizedAdd(input_min, input_max, bias_min,","                                        bias_max, &total_min, &total_max);","      meta::QuantizedBiasAdd(context, input_ui8_array.data(),","                             input_ui8_array.size(), bias_ui8_array.data(),"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["","#if CUDNN_VERSION >= 8100 && TF_ENABLE_CUDNN_FRONTEND","","namespace {","","cudnnBackendDescriptorType_t GetCudnnConvolutionType(","    dnn::ConvolutionKind kind) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const double bias_scale = static_cast<double>(bias->params.scale);","const double scale_diff = std::abs(input_product_scale - bias_scale);","const double output_scale = static_cast<double>(output->params.scale);","","TF_LITE_ENSURE(context, scale_diff \/ output_scale <= 0.02);","}"],"label":1}
{"cve":"CVE-2022-41409","code_chunks":["}","","","","\/*************************************************","*               Print Unicode version            *","*************************************************\/"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["          \/*xDesc=*\/input_nd.handle(),","          \/*wDesc=*\/filter.handle(), \/*convDesc=*\/conv.handle(),","          \/*yDesc=*\/output_nd.handle(),","          \/*algo=*\/ToConvForwardAlgo(algo),","          \/*sizeInBytes=*\/&workspace_size));","    }",""],"label":0}
{"cve":"CVE-2020-1921","code_chunks":["sa->sun_family = AF_UNIX;","if (addr.length() > sizeof(sa->sun_path)) {","raise_warning(","\"Unix socket path length (%d) is larger than system limit (%lu)\",","addr.length(),","sizeof(sa->sun_path)",");"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void ed_mul_sim_lot(ed_t r, const ed_t p[], const bn_t k[], int n) {","int i, j, l, *_l = RLC_ALLOCA(int, n);","ed_t *_p = RLC_ALLOCA(ed_t, n);","int8_t *naf = NULL;","","RLC_TRY {"],"label":1}
{"cve":"CVE-2020-5208","code_chunks":["uint32_t offset, uint32_t length, uint8_t *frubuf)","{","uint32_t off = offset;","uint32_t tmp;","uint32_t finish;","uint32_t size_left_in_buffer;"],"label":0}
{"cve":"CVE-2018-14055","code_chunks":["CString sLine = sData;","","sLine.Replace(\"\\n\", \"\");","sLine.Replace(\"\\r\", \"\");","","DEBUG(\"(\" << GetFullName() << \") CLI -> ZNC [\""],"label":0}
{"cve":"CVE-2024-0964","code_chunks":[")","assert examples.processed_examples == [[\"hello\"]]","","examples = gr.Examples([\"test\/test_files\/bus.png\"], gr.Image())","assert ("],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (tmp == NULL) goto failed;","if (!PyList_Check(tmp)) {","PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","goto failed;","}","len = PyList_GET_SIZE(tmp);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  }","","  if (is_hybrid) {","    const auto* affine_quantization =","        reinterpret_cast<TfLiteAffineQuantization*>(","            filter->quantization.params);","    TF_LITE_ENSURE(context, affine_quantization);"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["\t    \t    theline = line_arg;","\t    p = vim_strchr(theline, '\\n');","\t    if (p == NULL)","\t\tline_arg += STRLEN(line_arg);","\t    else","\t    {","\t\t*p = NUL;"],"label":0}
{"cve":"CVE-2019-20393","code_chunks":["            reallocated = realloc(p[0], (c + 2) * sizeof(const char *));","            if (!reallocated) {","                LOGMEM(module->ctx);","                lydict_remove(module->ctx, p[0][c]);","                p[0][c] = NULL;","                return EXIT_FAILURE;","            }"],"label":0}
{"cve":"CVE-2020-11085","code_chunks":["","if ((formatList->numFormats * 36) != dataLen)","{","WLog_ERR(TAG, \"Invalid short format list length: %\" PRIu32 \"\", dataLen);","return ERROR_INTERNAL_ERROR;","}"],"label":1}
{"cve":"CVE-2020-36177","code_chunks":[" * out      Buffer to write encrypted signature into."," * outLen   Size of buffer to write to."," * hash     Hash algorithm."," * mgf      Mask generation function."," * saltLen  Length of salt used. RSA_PSS_SALT_LEN_DEFAULT (-1) indicates salt"," *          length is the same as the hash length. RSA_PSS_SALT_LEN_DISCOVER"," *          indicates salt length is determined from the data."],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["","if (!algo_desc.has_value()) {","return tsl::Status(","port::error::INVALID_ARGUMENT,","absl::StrCat(","\"The primary convolution algorithm failed memory allocation, \"","\"while a secondary algorithm is not provided. Actual error: \","],"label":1}
{"cve":"CVE-2019-13306","code_chunks":[],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static void ed_mul_sim_plain(ed_t r, const ed_t p, const bn_t k, const ed_t q,","const bn_t m, const ed_t *t) {","int i, l, l0, l1, n0, n1, w, gen;","int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], *_k, *_m;","ed_t t0[1 << (ED_WIDTH - 2)];","ed_t t1[1 << (ED_WIDTH - 2)];"],"label":1}
{"cve":"CVE-2021-30014","code_chunks":["","vps->base_layer_internal_flag = gf_bs_read_int_log(bs, 1, \"base_layer_internal_flag\");","vps->base_layer_available_flag = gf_bs_read_int_log(bs, 1, \"base_layer_available_flag\");","vps->max_layers = 1 + gf_bs_read_int_log(bs, 6, \"max_layers_minus1\");","if (vps->max_layers > MAX_LHVC_LAYERS) {","GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] sorry, %d layers in VPS but only %d supported\\n\", vps->max_layers, MAX_LHVC_LAYERS));"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["","\tbootstage_mark(bootstage_id + BOOTSTAGE_SUB_LOAD);","","\t*datap = load;","\t*lenp = len;","\tif (fit_unamep)","\t\t*fit_unamep = (char *)fit_uname;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_glyph_cache_capability_set(wStream* s, UINT16 length, rdpSettings* settings)","{","if (length < 52)","return FALSE;","","\/* glyphCache (40 bytes) *\/"],"label":1}
{"cve":"CVE-2019-17178","code_chunks":["\t\t\t\t\texit(-7);","\t\t\t\t}","","\t\t\t\ttmp[cs++] = '&';","\t\t\t\ttmp[cs++] = 'a';","\t\t\t\ttmp[cs++] = 'm';","\t\t\t\ttmp[cs++] = 'p';"],"label":0}
{"cve":"CVE-2021-29594","code_chunks":["CalculateActivationRange(params->activation, &output_activation_min,","&output_activation_max);","","const int input_size = NumElements(input) \/ SizeOfDimension(input, 0);","const int batch_size = SizeOfDimension(input, 0);","","const float* input_ptr = GetTensorData<float>(input);"],"label":1}
{"cve":"PYSEC-2021-734","code_chunks":["if (index_size == 0) {","return;","}","","INDEX_TYPE current_output_column = 0;","INDEX_TYPE current_value_rowid = value_rowids(0);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT32 cmdFlags;","","if (length < 12)","return FALSE;","","Stream_Read_UINT32(s, cmdFlags); \/* cmdFlags (4 bytes) *\/"],"label":1}
{"cve":"CVE-2022-39347","code_chunks":["\t\treturn ERROR_INVALID_DATA;","\tfile = drive_get_file_by_id(drive, irp->FileId);","","\tif (!file)","\t{","\t\tirp->IoStatus = STATUS_UNSUCCESSFUL;","\t\tLength = 0;"],"label":0}
{"cve":"PYSEC-2021-171","code_chunks":["                errors::InvalidArgument(","                    \"Input values should be a vector but received shape \",","                    input_values->shape().DebugString()));","","    OP_REQUIRES(context, TensorShapeUtils::IsVector(input_shape->shape()),","                errors::InvalidArgument(","                    \"Input shape should be a vector but received shape \","],"label":0}
{"cve":"CVE-2022-1451","code_chunks":["ut32 i = 0;","ut64 offset = 0;","if (buf_offset + 32 >= sz) {","return NULL;","}","RBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);"],"label":0}
{"cve":"CVE-2022-0521","code_chunks":["\toffset += 2;","\tIFDBG eprintf (\"r_bin_java_stack_map_table_attr_new: Processing stack map, summary is:\\n\");","\tIFDBG r_bin_java_print_stack_map_table_attr_summary(attr);","\tfor (i = 0; i < attr->info.stack_map_table_attr.number_of_entries; i++) {","\t\t\t\tIFDBG eprintf (\"Reading StackMap Entry #%d @ 0x%08\"PFMT64x \"\\n\", i, buf_offset + offset);","\t\tif (stack_frame == NULL && R_BIN_JAVA_GLOBAL_BIN && R_BIN_JAVA_GLOBAL_BIN->current_code_attr) {","\t\t\tIFDBG eprintf (\"Setting an implicit frame at #%d @ 0x%08\"PFMT64x \"\\n\", i, buf_offset + offset);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* indices;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kIndicesTensor, &indices));","const TfLiteTensor* output_shape;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2020-15888","code_chunks":["luaD_checkstackaux(L, (fsize), (void)0, luaC_checkGC(L))"],"label":1}
{"cve":"CVE-2022-32545","code_chunks":["WandExport MagickBooleanType DisplayImageCommand(ImageInfo *image_info,","int argc,char **argv,char **wand_unused(metadata),ExceptionInfo *exception)","{","#if defined(MAGICKCORE_X11_DELEGATE)","#define DestroyDisplay() \\","{ \\"],"label":0}
{"cve":"PYSEC-2021-419","code_chunks":["","string two_file, three_file;","TF_ASSERT_OK(CreateTempFileFloat(env, 2.0f, 1000, &two_file));","TF_ASSERT_OK(CreateTempFileFloat(env, 3.0f, 1000, &three_file));","auto node1 = ops::ImmutableConst(root, DT_FLOAT, kFileTensorShape, two_file);","auto node2 ="],"label":0}
{"cve":"CVE-2022-37032","code_chunks":["\/* Packet counts. *\/","vty_out (vty, \"  Message statistics:%s\", VTY_NEWLINE);","vty_out (vty, \"    Inq depth is 0%s\", VTY_NEWLINE);","vty_out (vty, \"    Outq depth is %ld%s\", p->obuf->count, VTY_NEWLINE);","vty_out (vty, \"                         Sent       Rcvd%s\", VTY_NEWLINE);","vty_out (vty, \"    Opens:         %10d %10d%s\", p->open_out, p->open_in, VTY_NEWLINE);","vty_out (vty, \"    Notifications: %10d %10d%s\", p->notify_out, p->notify_in, VTY_NEWLINE);"],"label":1}
{"cve":"CVE-2019-19646","code_chunks":["p->iColumn = (ynVar)iCol;","testcase( iCol==BMS );","testcase( iCol==BMS-1 );","pItem->colUsed |= ((Bitmask)1)<<(iCol>=BMS ? BMS-1 : iCol);","}","}"],"label":1}
{"cve":"CVE-2019-13133","code_chunks":["*\/","(void) memset(&bmp_info,0,sizeof(bmp_info));","bmp_info.ba_offset=0;","start_position=0;","offset_bits=0;","count=ReadBlob(image,2,magick);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const int num_dims = NumDimensions(input);","TF_LITE_ENSURE(context, num_dims >= 2);","const TfLiteTensor* fft_length;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFftLengthTensor, &fft_length));","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TF_LITE_ENSURE(context, IsPowerOfTwo(fft_length_data[0]));"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input_resource_id_tensor =","GetInput(context, node, kInputResourceIdTensor);","const int resource_id = input_resource_id_tensor->data.i32[0];","","const TfLiteTensor* key_tensor = GetInput(context, node, kKeyTensor);","const TfLiteTensor* value_tensor = GetInput(context, node, kValueTensor);"],"label":1}
{"cve":"CVE-2016-10009","code_chunks":["\t\tsocket_dir[0] = '\\0';","\t\tstrlcpy(socket_name, agentsocket, sizeof socket_name);","\t}","","\t\/*","\t * Create socket early so it will exist before command gets run from","\t * the parent."],"label":0}
{"cve":"CVE-2021-44109","code_chunks":["    multipart_parser_free(parser);","    ogs_free(boundary);","","    if (data.num_of_part > OGS_SBI_MAX_NUM_OF_PART) {","        \/* Overflow Issues #1247 *\/","        ogs_fatal(\"Overflow num_of_part[%d]\", data.num_of_part);","        ogs_assert_if_reached();"],"label":0}
{"cve":"CVE-2023-41337","code_chunks":["default: \/* decryption failure *\/","continue;","}","if (decode_session_identifier(&issue_at, &ticket_psk, &age_add, &ticket_server_name, &ticket_key_exchange_id, &ticket_csid,","&ticket_negotiated_protocol, decbuf.base, decbuf.base + decbuf.off) != 0)","continue;","\/* check age *\/"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["aux_input_quantized->type = fw_input_to_output_weights->type;","aux_input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(aux_input_quantized->dims, aux_input->dims)) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"CVE-2019-13302","code_chunks":["register ssize_t","i;","","for (i=0; i < (ssize_t) GetPixelChannels(Cr_image); i++)","{","switch (op)","{"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\treturn TRUE;","}","","\/**"," * Write large pointer capability set.\\n"," * @msdn{cc240650}"," * @param s stream"],"label":0}
{"cve":"CVE-2022-24786","code_chunks":["\t    \/* Codec ID not found in SDP (perhaps better ignore this error","\t     * as app may configure audio and video in single setting).","\t     *\/","\t    PJ_PERROR(6, (THIS_FILE, PJ_ENOTFOUND,","\t\t      \"Failed generating SDP a=rtcp-fb for %s\",","\t\t      opt->caps[i].codec_id.ptr));","\t}"],"label":0}
{"cve":"CVE-2021-29530","code_chunks":["ValidateInputs(ctx, *input_matrix, input_permutation_indices, &batch_size,","&num_rows);","","Tensor batch_ptr(cpu_allocator(), DT_INT32, TensorShape({batch_size + 1}));","auto batch_ptr_vec = batch_ptr.vec<int32>();"],"label":1}
{"cve":"CVE-2021-42782","code_chunks":["\tint r;","\tu8 * rbuf = NULL;","\tsize_t rbuflen = 0;","","\tr = piv_get_cached_data(card, PIV_OBJ_DISCOVERY, &rbuf, &rbuflen);","\t\/* Note rbuf and rbuflen are now pointers into cache *\/","\tif (r < 0)"],"label":0}
{"cve":"CVE-2017-14054","code_chunks":["count = avio_rb32(pb);","for (i = 0; i < count; i++) {","if (avio_feof(pb))","return AVERROR_INVALIDDATA;","","type = avio_r8(pb);"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["  if (whence == SEEK_CUR) {","    if (offset >= 0 && offset < bufferedLen()) {","      setReadPosition(getReadPosition() + offset);","      setPosition(getPosition() + offset);","      return true;","    }","    offset += getPosition();"],"label":0}
{"cve":"CVE-2021-21378","code_chunks":["TEST_F(GroupVerifierTest, TestRequiresAnyWithAllowMissingButOk) {","TestUtility::loadFromYaml(RequiresAnyConfig, proto_config_);","proto_config_.mutable_rules(0)","->mutable_requires()"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["","if (!dont_inherit) {","PyEval_MergeCompilerFlags(&cf);","}","","if (strcmp(mode, \"exec\") == 0)"],"label":1}
{"cve":"CVE-2020-12887","code_chunks":["    }","","    *dst_len_ptr = uri_query_needed_heap;","    temp_parsed_uri_query_ptr = *dst_pptr;","","    \/* Loop all Uri-Query options *\/","    while ((temp_parsed_uri_query_ptr - *dst_pptr) < uri_query_needed_heap"],"label":0}
{"cve":"CVE-2023-22741","code_chunks":["int stun_parse_attribute(stun_msg_t *msg, unsigned char *p, size_t left_len)","{","int len;","uint16_t attr_type;"],"label":0}
{"cve":"CVE-2023-27772","code_chunks":["hostname = \"localhost\";","","if (argc > 2)","tcpPort = atoi(argv[2]);","","IedClientError error;"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["branch_(branch),","branch_handles_(branch_handles),","done_(std::move(done)),","lib_(CHECK_NOTNULL(ctx_->function_library())),","opts_(ctx->step_id()) {","SetRunOptions(ctx_, &opts_, true \/* always_collect_stats *\/);","for (int i = 1; i < ctx_->num_inputs(); ++i) {"],"label":0}
{"cve":"CVE-2021-3984","code_chunks":["find_start_brace(void)\t    \/\/ XXX","{","pos_T\tcursor_save;","pos_T\t*trypos;","pos_T\t*pos;","static pos_T\tpos_copy;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["return d;","}","assert(0);","\/* NOTREACHED *\/","#endif","}"],"label":1}
{"cve":"CVE-2023-0302","code_chunks":["static inline void add_sdb_addrline(Sdb *s, ut64 addr, const char *file, ut64 line, int mode, PrintfCallback print) {","const char *p;","char *fileline;","char offset[SDB_NUM_BUFSZ];","char *offset_ptr;",""],"label":1}
{"cve":"CVE-2019-13219","code_chunks":["   int longest_floorlist=0;","","   ","   if (!start_page(f))                              return FALSE;","      if (!(f->page_flag & PAGEFLAG_first_page))       return error(f, VORBIS_invalid_first_page);","   if (f->page_flag & PAGEFLAG_last_page)           return error(f, VORBIS_invalid_first_page);","   if (f->page_flag & PAGEFLAG_continued_packet)    return error(f, VORBIS_invalid_first_page);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","TfLiteTensor* output_unique_tensor;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, kOutputUniqueTensor,"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (_PyObject_HasAttrId(obj, &PyId_lineno)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_lineno);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from excepthandler\");","return 1;"],"label":0}
{"cve":"CVE-2022-25139","code_chunks":["void                              *await;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["                    GetOutputSafe(context, node, kOutputTensor, &output));","","  if (output->type == kTfLiteFloat32 || output->type == kTfLiteInt32) {","    EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);","  } else if (output->type == kTfLiteUInt8) {","    TF_LITE_ENSURE_OK(","        context, EvalQuantized<kernel_type>(context, node, params, data, input1,"],"label":0}
{"cve":"CVE-2021-3903","code_chunks":["\tif (used > curwin->w_height)","\t    break;","\tif (top < curwin->w_topline)","\t    scrolled += i;","","\t\/*","\t * If scrolling is needed, scroll at least 'sj' lines."],"label":0}
{"cve":"CVE-2021-38383","code_chunks":["net_bind(short unsigned *port, int type, const char *log_service_name)","{","struct addrinfo hints = { 0 };","struct addrinfo *servinfo;","struct addrinfo *ptr;"],"label":0}
{"cve":"CVE-2017-15385","code_chunks":["\t\tsection_name = &bin->shstrtab[shdr->sh_name];","\t}","\tif (link_shdr && bin->shstrtab && link_shdr->sh_name < bin->shstrtab_size) {","\t\tlink_section_name = &bin->shstrtab[link_shdr->sh_name];","\t}","\tif (!defs) {","\t\tbprintf (\"Warning: Cannot allocate memory (Check Elf_(Verdef))\\n\");"],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["if (!basenode.isNull()) {","auto dombasenode = Native::data<DOMNode>(basenode.toObject());","doc = dombasenode->doc();","docp = doc->docp();","if (docp == nullptr) {","raise_warning(\"Invalid State Error\");"],"label":1}
{"cve":"CVE-2022-2129","code_chunks":["\t\t|| ((was_typed || !typebuf_typed()) && typebuf.tb_len > 0)","\t\t|| (use_vpeekc && (c = vpeekc()) != NUL && c != Ctrl_C))","\t    && !got_int)","    {","\tupdate_topline_cursor();","#ifdef FEAT_TERMINAL","\tif (may_use_terminal_loop && term_use_loop()"],"label":0}
{"cve":"CVE-2022-4202","code_chunks":["\t\t\t\tlsr->last_error = GF_OUT_OF_MEM;","\t\t\t\tbreak;","\t\t\t}","\t\t\tf = (Fixed*)gf_list_get(l, 0);","\t\t\tif (f) pt->x = *f;","\t\t\tf = (Fixed*)gf_list_get(l, 1);","\t\t\tif (f) pt->y = *f;"],"label":0}
{"cve":"CVE-2018-10538","code_chunks":["WaveHeader WaveHeader;","uint32_t bcount;","","infilesize = DoGetFileSize (infile);","memcpy (&filehdr, fourcc, 4);",""],"label":0}
{"cve":"CVE-2019-5892","code_chunks":["* Large Community attribute.","*\/","if (CHECK_FLAG(peer->af_flags[afi][safi],","PEER_FLAG_SEND_LARGE_COMMUNITY)","&& (attr->flag & ATTR_FLAG_BIT(BGP_ATTR_LARGE_COMMUNITIES))) {","if (lcom_length(attr->lcommunity) > 255) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_EQ(context, NumInputs(node), 0);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","  TF_LITE_ENSURE(context, node->user_data != nullptr);","  const auto* params =","      reinterpret_cast<const TfLiteHashtableParams*>(node->user_data);",""],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["            PyErr_SetString(PyExc_TypeError, \"required field \\\"op\\\" missing from BoolOp\");","            return 1;","        }","        else {","            int res;","            res = obj2ast_boolop(tmp, &op, arena);","            if (res != 0) goto failed;"],"label":0}
{"cve":"CVE-2020-11097","code_chunks":["{","UINT16 AvId;","if (!pAvPair || !pair)","return FALSE;","","if (size < sizeof(NTLM_AV_PAIR))"],"label":0}
{"cve":"CVE-2023-34475","code_chunks":["SetStringInfoLength(profile,new_length);","datum=(char *) GetStringInfoDatum(profile);","memmove(datum+start+value_length,datum+end,length-end);","memcpy(datum+start,value,value_length);","if (new_length < length)","{"],"label":1}
{"cve":"PYSEC-2021-750","code_chunks":["  }","","  OpKernelContext* context;","  size_t idx;","  string tensor_name;","  string shape_and_slice;","  string reader_prefix;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["d = AST_type.tp_dict;","empty_tuple = PyTuple_New(0);","if (!empty_tuple ||","PyDict_SetItemString(d, \"_fields\", empty_tuple) < 0 ||","PyDict_SetItemString(d, \"_attributes\", empty_tuple) < 0) {","Py_XDECREF(empty_tuple);"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["hmi_data += 4;","hmi_track_offset[i] += 4;","} else {","if ((setup_ret = _WM_SetupMidiEvent(hmi_mdi,hmi_data,hmi_running_event[i])) == 0) {","goto _hmi_end;","}","if ((hmi_data[0] == 0xff) && (hmi_data[1] == 0x2f) && (hmi_data[2] == 0x00)) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static int log_radix(unsigned int radix) {","\tint l = 0;","","\twhile (radix > 0) {","\t\tradix = radix \/ 2;","\t\tl++;","\t}"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), data->values_count);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input0 = GetInput(context, node, 0);","const int dimension_size = NumDimensions(input0) + 1;","if (data->axis < 0) {","data->axis += dimension_size;"],"label":1}
{"cve":"CVE-2016-5350","code_chunks":["","\t\t{ &hf_notify_info_flags,","\t\t  { \"Flags\", \"spoolss.notify_info.flags\", FT_UINT32, BASE_HEX,","\t\t    NULL, 0, NULL, HFILL }},","","\t\t{ &hf_notify_info_data_type,","\t\t  { \"Type\", \"spoolss.notify_info_data.type\", FT_UINT16,"],"label":0}
{"cve":"CVE-2022-44789","code_chunks":["\t}","","\tif (!writable) atts |= JS_READONLY;","\tif (!enumerable) atts |= JS_DONTENUM;","\tif (!configurable) atts |= JS_DONTCONF;","","\tif (js_hasproperty(J, -1, \"get\")) {"],"label":0}
{"cve":"CVE-2022-1283","code_chunks":["\t\t\tsym->paddr = -1;","\t\t}","\t\tsym->ordinal = entry_off;","\t\tr_list_append (symbols, sym);","\t\tfirst = false;","\t}","\tRListIter *it;"],"label":0}
{"cve":"CVE-2017-12664","code_chunks":["if ((y == 0) || (count & (one << (7 - bit))))","one_row[i+bit]=(unsigned char) ReadBlobByte(image);","else","one_row[i+bit]=lastrow[i+bit];","}"],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["#endif","switch (tag) {","#ifdef LIBRAW_LIBRARY_BUILD","imgdata.lens.FocalLengthIn35mmFormat = get2();","break;","stmread(imgdata.shootinginfo.BodySerial, len, ifp);"],"label":1}
{"cve":"CVE-2023-1264","code_chunks":["\t    if (got_int)","\t\tretesc = TRUE;","\t    else","\t\treturn -1;","\t}","\telse","\t{"],"label":0}
{"cve":"CVE-2019-20392","code_chunks":["}","\/* we know its parent, so we can start with it *\/","lys_getnext_data(trg_mod, parent->schema, elem->schema->name, strlen(elem->schema->name),","elem->schema->nodetype, (const struct lys_node **)&schema);","} else {","\/* we have to search in complete context *\/","schema = lyd_get_schema_inctx(elem, ctx);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["goto failed;","}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["      return false;","    }","  }","","  if (input_dimensions.empty()) {","    return true;    }",""],"label":0}
{"cve":"CVE-2018-21017","code_chunks":["\t\tptr->earliest_presentation_time = gf_bs_read_u32(bs);","\t\tptr->first_offset = gf_bs_read_u32(bs);","\t\tISOM_DECREASE_SIZE(ptr, 8);","\t} else {","\t\tptr->earliest_presentation_time = gf_bs_read_u64(bs);","\t\tptr->first_offset = gf_bs_read_u64(bs);","\t\tISOM_DECREASE_SIZE(ptr, 16);"],"label":0}
{"cve":"CVE-2021-37637","code_chunks":["for (auto& component : element) {","if (DataTypeCanUseMemcpy(component.dtype())) {","const TensorBuffer* buffer = DMAHelper::buffer(&component);","if (buffer) {","total_size += buffer->size();","}"],"label":0}
{"cve":"CVE-2020-11089","code_chunks":["\twStream* s;","\tBOOL status;","\ts = Stream_New(NULL, 14);","","\tif (!s)","\t\treturn FALSE;",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void eb_mul_sim_joint(eb_t r, const eb_t p, const bn_t k, const eb_t q,","const bn_t m) {","eb_t t[5];","int i, u_i, len, offset;","int8_t jsf[2 * (RLC_FB_BITS + 1)];","","if (bn_is_zero(k) || eb_is_infty(p)) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kOutputShapeTensor, &output_shape));","const TfLiteTensor* weights;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kWeightsTensor, &weights));","const TfLiteTensor* input;"],"label":0}
{"cve":"CVE-2016-2324","code_chunks":["\t\tif (revs.left_right && revs.cherry_mark)","\t\t\tprintf(\"%d\\t%d\\t%d\\n\", revs.count_left, revs.count_right, revs.count_same);","\t\telse if (revs.left_right)","\t\t\tprintf(\"%d\\t%d\\n\", revs.count_left, revs.count_right);","\t\telse if (revs.cherry_mark)","\t\t\tprintf(\"%d\\t%d\\n\", revs.count_left + revs.count_right, revs.count_same);","\t\telse"],"label":0}
{"cve":"CVE-2018-20456","code_chunks":["p = strchr (str, '-');","if (p) {","op->offset_sign = -1;","}","}","char * plus = strchr (str, '+');"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, hidden_state->dims->data[0], batch_size);","TF_LITE_ENSURE_EQ(context, hidden_state->dims->data[1], num_units);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TfLiteIntArray* output_size_array = TfLiteIntArrayCreate(3);","output_size_array->data[0] = (time_major) ? max_time : batch_size;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t}","\t\t}","","\t\tep4_norm(r, q);","\t\tif (bn_sign(k) == RLC_NEG) {","\t\t\tep4_neg(r, r);","\t\t}"],"label":0}
{"cve":"CVE-2018-12559","code_chunks":["{","if (Type_SshFs==type->itemData(type->currentIndex()).toInt() && 0==sshPort->value()) {","sshPort->setValue(22);","}","if (Type_Samba==type->itemData(type->currentIndex()).toInt() && 0==smbPort->value()) {"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["    output_shape->data[output_index++] = indices->dims->data[i];","  }","  for (int i = indices_nd; i < params_rank; ++i) {","    output_shape->data[output_index++] = params->dims->data[i];","  }","  return context->ResizeTensor(context, output, output_shape);","}"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["output_state_sf_size));","}","node->temporaries->data[kProductScalingFactors] =","op_data->scratch_tensor_index + kProductScalingFactors;","TfLiteTensor* prod_scaling_factors =","GetTemporary(context, node, kProductScalingFactors);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["AsyncWith(asdl_seq * items, asdl_seq * body, int lineno, int col_offset, int","end_lineno, int end_col_offset, PyArena *arena)","{","stmt_ty p;","p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));"],"label":1}
{"cve":"CVE-2022-0156","code_chunks":["{","((char_u **)(tfgap->ga_data))[tfgap->ga_len++] = cmdline;","evalarg->eval_using_cmdline = TRUE;","if (cmdline == line_to_free)","line_to_free = NULL;"],"label":1}
{"cve":"CVE-2022-0496","code_chunks":["if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[1]][0], this->points[lines[k].idx[1]][1])) {","current_line = k;","current_point = 1;","goto found_next_line_in_open_path;","}","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["          \/*prepare=*\/conv::Prepare,","          \/*invoke=*\/conv::Eval,","          \/*profiling_string=*\/nullptr,","          \/*builtin_code=*\/0,","          \/*custom_name=*\/nullptr,","          \/*version=*\/0};","}"],"label":0}
{"cve":"CVE-2021-26927","code_chunks":["","\tif (!(dec = jas_malloc(sizeof(jp2_dec_t)))) {","\t\treturn 0;","\t}","\tdec->ihdr = 0;","\tdec->bpcc = 0;","\tdec->cdef = 0;"],"label":0}
{"cve":"CVE-2021-29533","code_chunks":["void Compute(OpKernelContext* context) override {","const Tensor& images = context->input(0);","const Tensor& boxes = context->input(1);","const int64 depth = images.dim_size(3);","","OP_REQUIRES(context, images.dims() == 4,"],"label":0}
{"cve":"CVE-2021-4110","code_chunks":["  \/* Calling Proc.new without a block is not implemented yet *\/","  mrb_get_args(mrb, \"&!\", &blk);","  p = MRB_OBJ_ALLOC(mrb, MRB_TT_PROC, mrb_class_ptr(proc_class));","  mrb_proc_copy(mrb, p, mrb_proc_ptr(blk));","  proc = mrb_obj_value(p);","  mrb_funcall_with_block(mrb, proc, MRB_SYM(initialize), 0, NULL, proc);","  if (!MRB_PROC_STRICT_P(p) &&"],"label":0}
{"cve":"CVE-2020-15214","code_chunks":["TfLiteTensor* output) {","int max_index = -1;","const int segment_id_size = segment_ids->dims->data[0];","if (segment_id_size > 0) {","max_index = segment_ids->data.i32[segment_id_size - 1];","}"],"label":1}
{"cve":"CVE-2021-22550","code_chunks":["primitives::AllocateUntrustedBuffers(kPoolIncrement, kPoolEntrySize);","for (int i = 0; i < kPoolIncrement; i++) {","void *buf = buffers[i];","if (!buf || !TrustedPrimitives::IsOutsideEnclave(buf, kPoolEntrySize)) {","TrustedPrimitives::BestEffortAbort(","\"Cached buffer is not outside the enclave\");"],"label":0}
{"cve":"CVE-2016-9842","code_chunks":["{","struct inflate_state FAR *state;","","if (strm == Z_NULL || strm->state == Z_NULL) return -1L << 16;","state = (struct inflate_state FAR *)strm->state;","return ((long)(state->back) << 16) +"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input0->type);","","      for (int i = 0; i < data->values_count; i++) {","    const TfLiteTensor* input;","    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, i, &input));","    TF_LITE_ENSURE_EQ(context, input->params.zero_point,","                      output->params.zero_point);"],"label":0}
{"cve":"CVE-2022-1444","code_chunks":["\t\t\tinserted = true;","\t\t} else if (IS_RED (q->link[0]) && IS_RED (q->link[1])) {","\t\t\t\/* Simple red violation: color flip *\/","\t\t\tq->red = 1;","\t\t\tq->link[0]->red = 0;","\t\t\tq->link[1]->red = 0;","\t\t}"],"label":0}
{"cve":"CVE-2019-3556","code_chunks":["out << formatStaticString(item);","if (RuntimeOption::EvalPerfDataMap) {","auto const len = std::min<size_t>(item->size(), 255);","std::string str(item->data(), len);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  const TfLiteTensor* bw_cell_to_input_weights =","      GetOptionalInputTensor(context, node, kBwCellToInputWeightsTensor);","  const TfLiteTensor* bw_cell_to_forget_weights =","      GetOptionalInputTensor(context, node, kBwCellToForgetWeightsTensor);","  const TfLiteTensor* bw_cell_to_output_weights =","      GetOptionalInputTensor(context, node, kBwCellToOutputWeightsTensor);",""],"label":0}
{"cve":"CVE-2021-38203","code_chunks":[],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const auto* params =","reinterpret_cast<const TfLiteGatherParams*>(node->builtin_data);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* positions;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2021-720","code_chunks":["CalculateActivationRange(params->activation, &output_activation_min,","&output_activation_max);","","const int input_size = NumElements(input) \/ SizeOfDimension(input, 0);","const int batch_size = SizeOfDimension(input, 0);","","const float* input_ptr = GetTensorData<float>(input);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["                               data->axis);","    }","    case kTfLiteInt32: {","      return PackImpl<int32_t>(context, node, output, data->values_count,","                               data->axis);","    }","    case kTfLiteInt64: {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus EvalImpl(TfLiteContext* context, const TfLiteTensor* input,","TfLiteNode* node) {","std::map<T, int> unique_values;","TfLiteTensor* output_indexes = GetOutput(context, node, 1);","std::vector<T> output_values;","I* indexes = GetTensorData<I>(output_indexes);","const T* data = GetTensorData<T>(input);"],"label":1}
{"cve":"CVE-2018-5344","code_chunks":["static void __lo_release(struct loop_device *lo)","{","int err;",""],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["\t\t\t\t\t    unsigned *payloadlen)","{","    int offset;","","    PJ_UNUSED_ARG(ses);","","    \/* Assume RTP header at the start of packet. We'll verify this later. *\/"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (*out == NULL) goto failed;","return 0;","}","isinstance = PyObject_IsInstance(obj, (PyObject*)BinOp_type);","if (isinstance == -1) {","return 1;"],"label":1}
{"cve":"CVE-2023-30186","code_chunks":["void CNativeControlEmbed::CreateObjectBuilderInContext(const std::string& name, JSSmart<CJSContext> context)","{","v8::Isolate* current = CV8Worker::GetCurrent();","context->m_internal->m_global->Set(current, name.c_str(), v8::FunctionTemplate::New(current, NSNativeControl::CreateNativeObjectBuilder));","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, key->type, kTfLiteInt32);","","const TfLiteTensor* value = GetInput(context, node, 2);","TF_LITE_ENSURE(context, NumDimensions(value) >= 1);","TF_LITE_ENSURE_EQ(context, SizeOfDimension(key, 0),","SizeOfDimension(value, 0));"],"label":1}
{"cve":"CVE-2023-32233","code_chunks":["{","struct nft_objref_map *priv = nft_expr_priv(expr);","","nf_tables_activate_set(ctx, priv->set);","}","","static void nft_objref_map_destroy(const struct nft_ctx *ctx,"],"label":0}
{"cve":"CVE-2020-15888","code_chunks":["void luaD_shrinkstack (lua_State *L) {","int inuse = stackinuse(L);","int goodsize = inuse + (inuse \/ 8) + 2*EXTRA_STACK;","if (goodsize > LUAI_MAXSTACK)","goodsize = LUAI_MAXSTACK;  \/* respect stack limit *\/"],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["      if (cp == fname) break;","      while (*--cp != '\/');","    }","    free (fname);","  }","  if (!fp)","      {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":[],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","  static const int kOutputUniqueTensor = 0;","  static const int kOutputIndexTensor = 1;","","  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);","  const TfLiteTensor* input;"],"label":0}
{"cve":"CVE-2016-6912","code_chunks":["\t\treturn;","\t}","\t_gdImageWebpCtx(im, out, quality);","\tout->gd_free(out);","}","","\/*"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");"],"label":1}
{"cve":"CVE-2022-1237","code_chunks":["}","char *name;","if (rel.index > bin->ne_header->ModRefs) {","name = r_str_newf (\"UnknownModule%d_%x\", rel.index, off); \t\t\t\t} else {","offset = modref[rel.index - 1] + bin->header_offset + bin->ne_header->ImportNameTable;","name = __read_nonnull_str_at (bin->buf, offset);"],"label":1}
{"cve":"CVE-2020-8939","code_chunks":["  }","  if (result > maxevents) {","    TrustedPrimitives::BestEffortAbort(","        \"enc_untrusted_epoll_wait: result found to be greater than maxevents \"","        \"supplied.\");","  }",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\t\tif (Stream_GetRemainingLength(s) < 8)","\t\t\treturn FALSE;","","\t\tStream_Read_UINT32(s, windowState->resizeMarginTop);","\t\tStream_Read_UINT32(s, windowState->resizeMarginBottom);","\t}",""],"label":0}
{"cve":"CVE-2020-11096","code_chunks":["BOOL compressed, UINT16* flags)","{","BOOL rc;","BYTE bitsPerPixelId;","","if (!Stream_EnsureRemainingCapacity("],"label":0}
{"cve":"CVE-2016-10012","code_chunks":["\"usage: sshd [-46DdeiqTt] [-C connection_spec] [-c host_cert_file]\\n\"","\"            [-E log_file] [-f config_file] [-g login_grace_time]\\n\"","\"            [-h host_key_file] [-o option] [-p port] [-u len]\\n\"","\t);","\texit(1);","}",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\trdp->settings->ShareId = 0x10000 + rdp->mcs->userId;","\tstatus = rdp_write_demand_active(s, rdp->settings) &&","\t         rdp_send_pdu(rdp, s, PDU_TYPE_DEMAND_ACTIVE, rdp->mcs->userId);","\tStream_Release(s);","\treturn status;","}",""],"label":0}
{"cve":"CVE-2018-16230","code_chunks":["isonsap_string(ndo, tptr+BGP_VPN_RD_LEN,tlen-BGP_VPN_RD_LEN)));","\/* rfc986 mapped IPv4 address ? *\/","if (EXTRACT_32BITS(tptr+BGP_VPN_RD_LEN) ==  0x47000601)","ND_PRINT((ndo, \" = %s\", ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN+4)));","\/* rfc1888 mapped IPv6 address ? *\/","else if (EXTRACT_24BITS(tptr+BGP_VPN_RD_LEN) ==  0x350000)"],"label":1}
{"cve":"CVE-2022-1587","code_chunks":["if either the jump or the label is NULL. *\/","SET_LABEL(list->jump, label);","list = list->next;","}","}",""],"label":1}
{"cve":"CVE-2023-30187","code_chunks":["CheckFileDir();"],"label":1}
{"cve":"CVE-2022-23586","code_chunks":[],"label":1}
{"cve":"CVE-2022-39347","code_chunks":["\t\t\t\t\treturn FALSE;","","\t\t\t\tStream_Read_UINT8(input, delete_pending);","\t\t\t}","\t\t\telse","\t\t\t\tdelete_pending = 1;",""],"label":0}
{"cve":"CVE-2019-17178","code_chunks":["LPSTR tr_esc_str(LPCSTR arg, bool format)","{","LPSTR tmp = NULL;","LPSTR tmp2 = NULL;","size_t cs = 0, x, ds, len;"],"label":0}
{"cve":"CVE-2023-0051","code_chunks":["{","char_u *tofree = NULL;","","if (maxlen > 0 && STRLEN(p) > (size_t)maxlen)","{","tofree = vim_strnsave(p, (size_t)maxlen);","p = tofree;"],"label":1}
{"cve":"CVE-2022-1383","code_chunks":["cursor += word_size;","}","string_origin = relative_to_strings? b + start_of_strings : sect_start;","sect->name = str_dup_safe (b, string_origin + (size_t)sect_name_off, end);","}","}","if (hdr->n_symbols) {"],"label":1}
{"cve":"CVE-2023-0433","code_chunks":["char_u  *leader1_flags,","int\t    leader2_len,","char_u  *leader2_flags)","{","int\t    idx1 = 0, idx2 = 0;","char_u  *p;","char_u  *line1;"],"label":0}
{"cve":"CVE-2018-12561","code_chunks":["MpdCantataMounterInterface * mounter();"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["","\tndepth = 0;","\tnoffset = fdt_next_node(fit, images_noffset, &ndepth);","\twhile (noffset >= 0 && ndepth > 0) {","\t\tif (ndepth != 1)","\t\t\tgoto next_node;",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["                tflite::micro::GetTensorData<int32_t>(input1), input2_shape,","                tflite::micro::GetTensorData<int32_t>(input2), output_shape,","                output_data);","      break;","      requires_broadcast","          ? reference_ops::Broadcast4DSlowEqualNoScaling(","                data->params, input1_shape,"],"label":0}
{"cve":"CVE-2018-11377","code_chunks":["INST_HANDLER (sbrx) {\t\/\/ SBRC Rr, b","int b = buf[0] & 0x7;","int r = ((buf[0] >> 4) & 0xf) | ((buf[1] & 0x01) << 4);","RAnalOp next_op = {0};","","avr_op_analyze (anal,","&next_op,"],"label":0}
{"cve":"CVE-2018-8797","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"CVE-2021-29609","code_chunks":["    for (int i = 0; i < a_shape->NumElements(); ++i) {","      OP_REQUIRES(ctx, a_shape_flat(i) == b_shape_flat(i),","                  errors::InvalidArgument(","                      \"Operands' shapes do not match: got \", a_shape_flat(i),","                      \" and \", b_shape_flat(i), \" for dimension \", i));","    }",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["","\treturn TRUE;","}","","\/**"," * Write frame acknowledge capability set.\\n"," * @param s stream"],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["      case 18: iso_speed = 320; break;","      case 19: iso_speed = 400; break;","    }","    shutter = libraw_powf64(2.0f, (((float)get4())\/8.0f)) \/ 16000.0f;","    FORC4 cam_mul[c ^ (c >> 1)] = get4();","    fseek (ifp, 88, SEEK_SET);","    aperture = libraw_powf64(2.0f, ((float)get4())\/16.0f);"],"label":0}
{"cve":"CVE-2022-21732","code_chunks":["int64_t num_threads = 0;","OP_REQUIRES_OK(","ctx, ParseScalarArgument<int64_t>(ctx, \"num_threads\", &num_threads));","OP_REQUIRES(ctx, num_threads >= 0,"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["cudnn.handle(),","\/*xDesc=*\/input_nd.handle(),","\/*dyDesc=*\/output_nd.handle(),","\/*convDesc=*\/conv.handle(),","\/*gradDesc=*\/filter.handle(),","\/*algo=*\/ToConvBackwardFilterAlgo(algorithm_desc),"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2019-3556","code_chunks":["char *string_crypt(const char *key, const char *salt) {","assert(key);","assert(salt);","","char random_salt[12];","if (!*salt) {"],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["raise_warning(\"Iv size incorrect; supplied length: %d, needed: %d\",","iv.size(), iv_size);","}","memcpy(iv_s, iv.data(), std::min(iv_size, iv.size()));","","mcrypt_generic_deinit(pm->m_td);"],"label":1}
{"cve":"CVE-2020-11008","code_chunks":["\treturn report(options, obj, FSCK_MSG_UNKNOWN_TYPE, \"unknown type '%d' (internal fsck error)\",","\t\t\t  obj->type);","}","","int fsck_error_function(struct fsck_options *o,","\tstruct object *obj, int msg_type, const char *message)","{"],"label":0}
{"cve":"CVE-2016-10161","code_chunks":["\t\t}","\t}","\tyych = *++YYCURSOR;","\tif (yych != 'F') goto yy18;","\tyych = *++YYCURSOR;","\tif (yych != ';') goto yy18;","\t++YYCURSOR;"],"label":0}
{"cve":"CVE-2017-3731","code_chunks":["return 1;","","if (arg <= 0)","return 0;","\/* Allocate memory for IV if needed *\/","if ((arg > EVP_MAX_IV_LENGTH) && (arg > gctx->ivlen)) {","if (gctx->iv != EVP_CIPHER_CTX_iv_noconst(c))"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp48_conv_cyc(fp48_t c, const fp48_t a) {","\tfp48_t t;","","\tfp48_null(t);","","\tRLC_TRY {","\t\tfp48_new(t);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["x_desc, static_cast<cudnnDataType_t>(cudnn_input_type));","CudnnTensorDescriptor scale_offset_descriptor(","scale_offset_desc, static_cast<cudnnDataType_t>(cudnn_scale_type));","cudnnBatchNormMode_t mode = CUDNN_BATCHNORM_SPATIAL;","if (BatchnormSpatialPersistentEnabled()) {","mode = CUDNN_BATCHNORM_SPATIAL_PERSISTENT;"],"label":1}
{"cve":"CVE-2015-8631","code_chunks":["{","static gprincs_ret              ret;","char                            *prime_arg;","gss_buffer_desc                 client_name,","service_name;"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["        ASSERT(san_names != nullptr,","         \"san_names should have at least one name after SPIFFE cert validation\");","","  for (const GENERAL_NAME* general_name : san_names.get()) {","    for (const auto& config_san_matcher : subject_alt_name_matchers_) {","      if (config_san_matcher->match(general_name)) {","        return true;"],"label":0}
{"cve":"CVE-2019-16786","code_chunks":["return inst, sock, map","","def test_ctor(self):","inst, _, map = self._makeOneWithMap()","self.assertEqual(inst.addr, \"127.0.0.1\")","self.assertEqual(inst.sendbuf_len, 2048)"],"label":1}
{"cve":"CVE-2018-20178","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["for (i = 0; i < len; i++) {","identifier value;","res = obj2ast_identifier(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"Global field \\\"names\\\" changed size during iteration\");"],"label":1}
{"cve":"CVE-2023-26485","code_chunks":["int i;","bool entering = (ev_type == CMARK_EVENT_ENTER);","char listmarker[LISTMARKER_SIZE];","bool first_in_list_item;","bufsize_t marker_width;","bool allow_wrap = renderer->width > 0 && !(CMARK_OPT_NOBREAKS & options) &&"],"label":1}
{"cve":"CVE-2018-5804","code_chunks":["  }","","\/* Set parameters based on camera name (for non-DNG files). *\/","","  if (!strcmp(model,\"KAI-0340\")","\t&& find_green (16, 16, 3840, 5120) < 25) {","    height = 480;"],"label":0}
{"cve":"CVE-2022-1383","code_chunks":["\t\t\tgoto beach;","\t\t}","\t\tsize_t i;","\t\tut8 *cursor = b + start_of_sections;","\t\tfor (i = 0; i < hdr->n_sections && cursor < end; i++) {","\t\t\tut8 *sect_start = cursor;","\t\t\tRCoreSymCacheElementSection *sect = &result->sections[i];"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"elts\\\" missing from Tuple\");","            return 1;","        }","        else {"],"label":0}
{"cve":"CVE-2022-3178","code_chunks":["prop_type = gf_bs_read_u16(bs);","prop_size -= 6;","ISOM_DECREASE_SIZE_NO_ERR(ptr, prop_size)","data2 = gf_malloc(sizeof(char) * (prop_size+2));","gf_bs_read_data(bs, data2, prop_size);","data2[prop_size] = 0;","data2[prop_size+1] = 0;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["input_offset_ptr);","break;","case kCblasOptimized: {","TfLiteTensor* row_sums ="],"label":1}
{"cve":"CVE-2018-12436","code_chunks":["    key->dp = dp;","","    return 0;","}","#endif \/* WOLFSSL_CUSTOM_CURVES *\/","","#ifdef HAVE_X963_KDF"],"label":0}
{"cve":"CVE-2022-1052","code_chunks":["if ((segs_count = r_buf_read_le32_at (bin->b, starts_at)) == UT32_MAX) {","return false;","}","bin->chained_starts = R_NEWS0 (struct r_dyld_chained_starts_in_segment *, segs_count);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["}","","fp_set_dig(r, 1);","l = RLC_FP_BITS + 1;","bn_rec_slw(win, &l, b, FP_WIDTH);","for (i = 0; i < l; i++) {"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["        return XML_ERROR_NO_MEMORY;","    }","    return result;","  }","}","","static enum XML_Error PTRCALL"],"label":0}
{"cve":"CVE-2019-12973","code_chunks":["        cmptparm[i].dy   = (OPJ_UINT32)parameters->subsampling_dy;","        cmptparm[i].w    = Info_h.biWidth;","        cmptparm[i].h    = Info_h.biHeight;","    }","","    image = opj_image_create(numcmpts, &cmptparm[0],","                             (numcmpts == 1U) ? OPJ_CLRSPC_GRAY : OPJ_CLRSPC_SRGB);"],"label":0}
{"cve":"CVE-2022-0417","code_chunks":["p_sts = 0;","p_ai = 0;","#ifdef FEAT_VARTABS","if (p_vsts)","free_string_option(p_vsts);","p_vsts = empty_option;"],"label":1}
{"cve":"CVE-2020-28896","code_chunks":["        if (!e)","          break;","        if (e->deleted && e->changed)","          e->active = false;","      }","      if (m->verbose)","      {"],"label":0}
{"cve":"CVE-2019-6978","code_chunks":["gd_error(\"Could not create WBMP\");","return;","}"],"label":1}
{"cve":"PYSEC-2021-607","code_chunks":["","      if (!status) {","        context->SetStatus(errors::Internal(","            \"Failed to launch CropAndResizeBackpropImage kernel.\"));","      }","    };",""],"label":0}
{"cve":"CVE-2023-23456","code_chunks":["#define H(x) get_le16(h + 2 * (x))","#define H4(x) get_le32(h + (x))","    unsigned char h[0x40];","    int ic;","    unsigned exe_offset = 0;","    adam_offset = 0;",""],"label":0}
{"cve":"CVE-2019-13301","code_chunks":["%    o exception: return any errors or warnings in this structure.","%","*\/","MagickExport MagickBooleanType GetMultilineTypeMetrics(Image *image,","const DrawInfo *draw_info,TypeMetric *metrics,ExceptionInfo *exception)","{"],"label":1}
{"cve":"CVE-2020-11042","code_chunks":["if (!iconInfo->colorTable)","return FALSE;","}","}","else if (iconInfo->cbColorTable)","{"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["static int add_attributes(PyTypeObject* type, char**attrs, int num_fields)","{","int i, result;","_Py_IDENTIFIER(_attributes);","PyObject *s, *l = PyTuple_New(num_fields);","if (!l)","return 0;"],"label":1}
{"cve":"CVE-2018-20180","code_chunks":["{","int y;","bmpdata = (uint8 *) xmalloc(width * height * Bpp);","for (y = 0; y < height; y++)","{","in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)],"],"label":1}
{"cve":"CVE-2018-8791","code_chunks":["\t\treturn False;","","\tin_uint8(s, opcode);","\tif ((opcode >> 2) != MCS_AUCF)","\t{","\t\tlogger(Protocol, Error, \"mcs_recv_aucf(), expected opcode AUcf, got %d\", opcode);","\t\treturn False;"],"label":0}
{"cve":"CVE-2023-4722","code_chunks":["\t\t}","","\t\tif (ctx->owns_mov) {","\t\t\tconst GF_PropertyValue *p;","\t\t\tp = gf_filter_pck_get_property(pck, GF_PROP_PCK_FILENUM);","\t\t\tif (p) {","\t\t\t\tif (!ctx->cur_file_idx_plus_one) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["return kTfLiteOk;","};","reg.invoke = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* a0 = GetInput(context, node, 0);","","auto populate = [&](int id) {","TfLiteTensor* t = &context->tensors[id];"],"label":1}
{"cve":"CVE-2018-10540","code_chunks":["DS64Chunk ds64_chunk;","uint32_t bcount;","","CLEAR (WaveHeader);","CLEAR (ds64_chunk);","infilesize = DoGetFileSize (infile);"],"label":0}
{"cve":"CVE-2016-5842","code_chunks":["continue;","if (resource != (char *) NULL)","resource=DestroyString(resource);","count=(ssize_t) ReadPropertyByte(&info,&length);","if ((count != 0) && ((size_t) count <= length))","{"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp9_write_bin(uint8_t *bin, size_t len, const fp9_t a) {","\tif (len != 9 * RLC_FP_BYTES) {","\t\tRLC_THROW(ERR_NO_BUFFER);","\t\treturn;","\t}","\tfp3_write_bin(bin, 3 * RLC_FP_BYTES, a[0]);","\tfp3_write_bin(bin + 3 * RLC_FP_BYTES, 3 * RLC_FP_BYTES, a[1]);"],"label":0}
{"cve":"CVE-2017-9142","code_chunks":["","     Undefined is 0; the default is used.","     Default is 75","","","        0 or omitted: Use Z_HUFFMAN_ONLY strategy with the","           zlib default compression level"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE(context, node->inputs->size > 0);","","const TfLiteTensor* cond;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &cond));","TF_LITE_ENSURE_EQ(context, cond->type, kTfLiteBool);","TF_LITE_ENSURE_EQ(context, NumElements(cond), 1);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const int batch_size = SizeOfDimension(input, 0);","","const float* input_ptr = GetTensorData<float>(input);","int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>("],"label":1}
{"cve":"CVE-2023-40589","code_chunks":["","\tWINPR_ASSERT(Ptr1);","\tWINPR_ASSERT(Ptr2);","\tWINPR_ASSERT(HistoryPtr);","","\tdo","\t{"],"label":0}
{"cve":"CVE-2020-36316","code_chunks":["t->dp[0] ^= 0x01;","\/* m_len is now the size in bits of the modulus. *\/","bn_lsh(t, t, 8 * RLC_MD_LEN);","bn_add(m, t, m);","bn_lsh(m, m, 8);","bn_add_dig(m, m, RSA_PSS);"],"label":1}
{"cve":"CVE-2023-0817","code_chunks":["u32 sr = 0;","\/*u32 pl = *\/gf_bs_read_u8(bs);","u32 idx = gf_bs_read_int(bs, 5);","if (idx==0x1f)","duration.den = gf_bs_read_int(bs, 24);","else if (sr < nb_usac_sr) {"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject *)USub_type);","    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {","return 1;"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["\t\t       char *const argv[])","{","\tchar *boot_device = NULL;","\tint idx;","\tulong addr, offset = 0;","\tstruct mtd_info *mtd;","#if defined(CONFIG_CMD_MTDPARTS)"],"label":0}
{"cve":"CVE-2021-32134","code_chunks":["GF_Err Media_GetESD(GF_MediaBox *mdia, u32 sampleDescIndex, GF_ESD **out_esd, Bool true_desc_only)","{","u32 type;","GF_ESD *esd;","GF_MPEGSampleEntryBox *entry = NULL;"],"label":0}
{"cve":"CVE-2020-15195","code_chunks":["    const auto reverse_index_map = reverse_index_map_t->vec<int64>();","    const auto grad_values = grad_values_t->vec<T>();","","    const int64 N = reverse_index_map_t->shape().dim_size(0);","    const int64 N_full = grad_values_t->shape().dim_size(0);","","    Tensor* d_values_t;"],"label":0}
{"cve":"CVE-2016-5842","code_chunks":["             \"SetReadOnlyProperty\",\"`%s'\",property);","          return(MagickFalse);","        }","      break; \/* not an attribute, add as a property *\/","      if (LocaleCompare(\"opaque\",property) == 0)","        {","          (void) ThrowMagickException(exception,GetMagickModule(),"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["bool OSD::ms_verify_authorizer(Connection *con, int peer_type,","int protocol, bufferlist& authorizer_data, bufferlist& authorizer_reply,","bool& isvalid, CryptoKey& session_key)","{","AuthAuthorizeHandler *authorize_handler = 0;","switch (peer_type) {"],"label":1}
{"cve":"CVE-2023-28097","code_chunks":["number = 0;","while (p<end && *p>='0' && *p<='9') {","number = number*10 + (*p)-'0';","if (number<0) {","LM_ERR(\"number overflow at pos %d in len number [%.*s]\\n\",","(int)(p-buffer),(int)(end-buffer), buffer);"],"label":1}
{"cve":"CVE-2023-51780","code_chunks":["(int __user *)argp) ? -EFAULT : 0;","goto done;","{","struct sk_buff *skb;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["else","\/* TYPE(CHILD(ch, 0)) == DOUBLESTAR or keyword argument *\/","nkeywords++;","}","}"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["size_t\t\tsize;","int\t\tnoffset = 0;","char\t\t*err_msg = \"\";","","\/* Get image data and data length *\/","if (fit_image_get_data_and_size(fit, image_noffset, &data, &size)) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":[],"label":1}
{"cve":"PYSEC-2020-127","code_chunks":["","void Compute(OpKernelContext* ctx) override {","const Tensor& val = ctx->input(0);","int64 id = ctx->session_state()->GetNewId();","TensorStore::TensorAndKey tk{val, id, requested_device()};","OP_REQUIRES_OK(ctx, ctx->tensor_store()->AddTensor(name(), tk));",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\teb_dbl(t[0], t[3]);","\t\teb_dbl(t[0], t[0]);","\t\teb_dbl(t[0], t[0]);","\t\teb_sub(t[3], t[0], t[3]);","#endif","#if EB_WIDTH >= 5","\t\t\/* Compute 9 * T[4]. *\/"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["\/*iterator=*\/nullptr)),","output_dtypes_(output_dtypes),","output_shapes_(output_shapes) {","tf_dataz_metrics_collector_ = std::make_shared<TfDatazMetricsCollector>(*env);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);"],"label":0}
{"cve":"CVE-2018-8795","code_chunks":["bmpdata = (uint8 *) xmalloc(width * height * Bpp);","for (y = 0; y < height; y++)","{","in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)],","width * Bpp);","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["bool has_dynamic_output_tensors = false;","for (auto* subgraph : {then_subgraph, else_subgraph}) {","for (int i = 0; i < num_inputs; ++i) {","const TfLiteTensor* input = GetInput(context, node, i + 1);","std::vector<int> dims(input->dims->data,","input->dims->data + input->dims->size);","subgraph->ResizeInputTensor(i, dims);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","TfLiteTensor* output0;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output0));","TF_LITE_ENSURE(context, IsDynamicTensor(output0));","const TfLiteTensor* input;"],"label":0}
{"cve":"CVE-2018-18311","code_chunks":["if (!PL_use_safe_putenv) {","\/* most putenv()s leak, so we manipulate environ directly *\/","UV i;","Size_t vlen, nlen = strlen(nam);","","\/* where does it go? *\/"],"label":0}
{"cve":"CVE-2022-27008","code_chunks":["","if (njs_slow_path((length + len) > NJS_MAX_LENGTH)) {","njs_type_error(vm, \"Invalid length\");","return NJS_ERROR;","}",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp24_write_bin(uint8_t *bin, int len, const fp24_t a, int pack) {","fp24_t t;","","fp24_null(t);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2020-1921","code_chunks":["CHECK_HANDLE(handle, f);","int64_t ret = f->write(data, length);","if (ret < 0) {","raise_notice(\"fwrite(): send of %ld bytes failed with errno=%d %s\",","data.size(), errno, folly::errnoStr(errno).c_str());","ret = 0;","}"],"label":0}
{"cve":"CVE-2018-8793","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"CVE-2020-5208","code_chunks":["\t\t\/* I can't assign scanf' %x into a single char *\/","\t\tfor( i=0;i<len;i++ ){","\t\t\tret = scanf(\"%x\", holder+i);","\t\t\tif (ret != 1) {","\t\t\t\tfree_n(&holder);","\t\t\t\treturn false;","\t\t\t}"],"label":0}
{"cve":"CVE-2020-11945","code_chunks":["            if (value.size() != 0)","                digest_request->response = xstrndup(value.rawBuf(), value.size() + 1);","            debugs(29, 9, \"Found response '\" << digest_request->response << \"'\");","            break;","","            debugs(29, 3, \"Unknown attribute '\" << item << \"' in '\" << temp << \"'\");","            break;"],"label":0}
{"cve":"CVE-2016-9388","code_chunks":["jas_matrix_setv(data[0], x, (v));","}","}","if (pad) {","if ((c = jas_stream_getc(in)) == EOF) {","return -1;"],"label":1}
{"cve":"CVE-2022-45909","code_chunks":["su_home_t* home = theOneAndOnlyController->getHome() ;","char *s ;","char buf[255];","char obuf[255] ;","char hp[64] ;","char const *display = NULL;"],"label":1}
{"cve":"CVE-2023-28101","code_chunks":["          g_autofree char *value = g_key_file_get_string (metakey, FLATPAK_METADATA_GROUP_SYSTEM_BUS_POLICY, key, NULL);","          FlatpakPolicy policy;","","          if (!flatpak_verify_dbus_name (key, error))","            return FALSE;","","          policy = flatpak_policy_from_string (value, NULL);"],"label":0}
{"cve":"PYSEC-2022-104","code_chunks":["bool found_unknown_shapes = false;","const auto& op_info = op_context.op_info;","TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,","OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,","&found_unknown_shapes));","int per_output_ops = dims.kx * dims.ky == 1 ? 1 : dims.kx * dims.ky - 1;"],"label":0}
{"cve":"CVE-2023-22742","code_chunks":["LIBSSH2_CHANNEL *channel=NULL;","LIBSSH2_KNOWNHOSTS *known_hosts = NULL;","","t->current_stream = NULL;","","*stream = NULL;"],"label":0}
{"cve":"CVE-2023-4678","code_chunks":["\tif (read->localPath) {","\t\tsprintf(szName, \"%s\/swf_jpeg_%d.jpg\", read->localPath, ID);","\t} else {","\t\tsprintf(szName, \"swf_jpeg_%d.jpg\", ID);","\t}","","\tif (version!=3)"],"label":0}
{"cve":"CVE-2022-23592","code_chunks":["    if (node->def().has_experimental_type()) {","      const auto& node_t = node->def().experimental_type();","      if (node_t.type_id() != TFT_UNSET) {","        int ix = input_idx[i];","        if (ix >= node_t.args_size()) {","          LOG(WARNING) << name() << \" has bad type information: input \" << i","                       << \" should have an output \" << ix"],"label":0}
{"cve":"CVE-2019-19221","code_chunks":["{","size_t r;","int ret_val = 0;","\/*","* No single byte will be more than one wide character,","* so this length estimate will always be big enough.","*\/"],"label":0}
{"cve":"CVE-2020-11087","code_chunks":["{","\tUINT32 flags = 0;","\tsize_t cbAvFlags;","\tNTLM_AV_PAIR* AvFlags = NULL;","\tNTLM_AUTHENTICATE_MESSAGE* message;","\tBYTE messageIntegrityCheck[16];",""],"label":0}
{"cve":"CVE-2017-9608","code_chunks":["                    dctx->cur_byte = 0;","                    dctx->remaining = 0;","                    return remaining;","                } else {","                    dctx->remaining -= buf_size;","                }","            }"],"label":0}
{"cve":"PYSEC-2021-229","code_chunks":["    ReportError(\"Invoke called on model that is not consistent.\");","    return kTfLiteError;","  }","","  TfLiteStatus status = kTfLiteOk;","  if (state_ == kStateUninvokable) {","    ReportError(\"Invoke called on model that is not ready.\");"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["bw_cell_state_quantized->type = fw_input_to_output_weights->type;","bw_cell_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(bw_cell_state_quantized->dims,"],"label":1}
{"cve":"CVE-2016-4564","code_chunks":["  primitive_info->coordinates=(size_t) (p-primitive_info);","  for (i=0; i < (ssize_t) primitive_info->coordinates; i++)","  {","    p->primitive=primitive_info->primitive;","    p--;","  }","}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2019-20807","code_chunks":["blob_T\t*blob = NULL;","","rettv->vval.v_number = -1;","if (check_restricted() || check_secure())","return;","","if (argvars[0].v_type == VAR_LIST)"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["        pjmedia_sdp_media_add_attr(m_loc, a);","","        if (last_setup != DTLS_SETUP_UNKNOWN) {","            pj_sockaddr rem_rtp;","            pj_sockaddr rem_rtcp;","            pj_bool_t use_rtcp_mux;",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      accum_size->data[0] = n_cell;","      accum_size->data[1] = n_batch;","      TF_LITE_ENSURE_OK(","          context, context->ResizeTensor(context, accum_scratch, accum_size));","    }","    node->temporaries->data[kInputZeroPoints] =","        op_data->scratch_tensor_index + kInputZeroPoints;"],"label":0}
{"cve":"CVE-2021-42779","code_chunks":["\t\treturn SC_ERROR_UNKNOWN_DATA_RECEIVED;","\tlen = *(info_blob + offs + 1) + *(info_blob + offs) * 0x100;","\tif (len)   {","\t\tkinfo.subject.value = malloc(len);","\t\tif (!kinfo.subject.value)","\t\t\tLOG_TEST_RET(ctx, SC_ERROR_OUT_OF_MEMORY, \"Failed to add private key: memory allocation error\");","\t\tkinfo.subject.len = len;"],"label":0}
{"cve":"CVE-2018-14362","code_chunks":[" * @param index_hint Current Message"," * @retval  0 Success"," * @retval -1 Failure"," *\/","static int pop_sync_mailbox(struct Context *ctx, int *index_hint)","{","  int i, j, ret = 0;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["            TF_LITE_ENSURE_OK(context,","                              tflite::GetInputSafe(context, node, 0, &input));","            TfLiteTensor* output;","            TF_LITE_ENSURE_OK(context,","                              tflite::GetOutputSafe(context, node, 0, &output));","            TfLiteIntArray* output_dims = TfLiteIntArrayCopy(input->dims);","            output->type = kTfLiteFloat32;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  int seq_dim = params->seq_dim;","  int batch_dim = params->batch_dim;","","  TF_LITE_ENSURE(context, seq_dim >= 0);","  TF_LITE_ENSURE(context, batch_dim >= 0);","  TF_LITE_ENSURE(context, seq_dim != batch_dim);","  TF_LITE_ENSURE(context, seq_dim < NumDimensions(input));"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputResourceIdTensor,","&input_resource_id_tensor));","const int resource_id = input_resource_id_tensor->data.i32[0];","","const TfLiteTensor* key_tensor;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["    if (PyDict_SetItemString(d, \"ExceptHandler\", (PyObject*)ExceptHandler_type)","        < 0) return NULL;","    if (PyDict_SetItemString(d, \"arguments\", (PyObject*)arguments_type) < 0)","        return NULL;","    if (PyDict_SetItemString(d, \"arg\", (PyObject*)arg_type) < 0) return NULL;","    if (PyDict_SetItemString(d, \"keyword\", (PyObject*)keyword_type) < 0) return","        NULL;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["int res;","res = obj2ast_int(tmp, &col_offset, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}"],"label":1}
{"cve":"CVE-2023-39354","code_chunks":["static BOOL nsc_rle_decode(BYTE* in, BYTE* out, UINT32 outSize, UINT32 originalSize)","{","UINT32 left = originalSize;",""],"label":1}
{"cve":"CVE-2020-23931","code_chunks":["}","","#endif \/*GPAC_DISABLE_ISOM_WRITE*\/","","void asrt_box_del(GF_Box *s)","{","\tGF_AdobeSegmentRunTableBox *ptr = (GF_AdobeSegmentRunTableBox *)s;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2022-40138","code_chunks":["        \"All opcodes should dispatch to the next and not fallthrough \"","        \"to here\");","","      CAPTURE_IP(runtime.raiseStackOverflow(","        Runtime::StackOverflowKind::JSRegisterStack));","","            curCodeBlock = FRAME.getSavedCodeBlock();"],"label":0}
{"cve":"PYSEC-2020-288","code_chunks":["return shape1.Dims(index1);"],"label":1}
{"cve":"CVE-2018-15473","code_chunks":["Authctxt *authctxt = ssh->authctxt;","struct passwd *pw = authctxt->pw;","struct sshbuf *b = NULL;","struct sshkey *key = NULL;","char *pkalg = NULL, *userstyle = NULL, *key_s = NULL, *ca_s = NULL;","u_char *pkblob = NULL, *sig = NULL, have_sig;"],"label":0}
{"cve":"CVE-2018-20457","code_chunks":["int i, j;","char buf[128];","ArmOpcode aop = {.off = off};","for (i = j = 0; i < sizeof (buf) - 1 && str[j]; i++, j++) {","if (str[j] == '#') {","i--; continue;","}"],"label":0}
{"cve":"CVE-2018-25020","code_chunks":["","\/* Several new instructions need to be inserted. Make room","* for them. Likely, there's no need for a new allocation as","* last page could have large enough tailroom.","*\/","prog_adj = bpf_prog_realloc(prog, bpf_prog_size(insn_adj_cnt),"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty value;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["      accum_size->data[1] = n_batch;","      TF_LITE_ENSURE_OK(","          context, context->ResizeTensor(context, accum_scratch, accum_size));","    }","    node->temporaries->data[kInputZeroPoints] =","        op_data->scratch_tensor_index + kInputZeroPoints;","    TfLiteTensor* input_zp;"],"label":0}
{"cve":"CVE-2017-12664","code_chunks":["  MagickOffsetType","    totalOffset,","    seekNextDepth;","","  PixelInfo","    transpix;",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["for (int i = 0; i < NumOutputs(node); ++i) {","TfLiteIntArray* output_dims = TfLiteIntArrayCopy(input->dims);","output_dims->data[axis_value] = size_splits_vector.at(i);","TfLiteTensor* output = GetOutput(context, node, i);","TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_dims));","}",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","auto* first_new_tensor = static_cast<int*>(node->user_data);","","const TfLiteTensor* tensor0 = GetInput(context, node, 0);","TfLiteTensor* tensor1 = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2021-37662","code_chunks":["      } else {","        CalculateBestEqualitySplit(","            stats_summary, total_grad, total_hess, node_id, feature_dims,","            logits_dim, hessian_dim, num_buckets, l1, l2, &best_gain,","            &best_bucket, &best_f_dim, &best_split_type, &best_contrib_for_left,","            &best_contrib_for_right);","      }"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT16 fontSupportFlags = 0;","UINT16 pad2Octets = 0;","WLog_INFO(TAG, \"FontCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));","","if (Stream_GetRemainingLength(s) >= 2)"],"label":0}
{"cve":"CVE-2022-39347","code_chunks":["#ifdef BUILTIN_CHANNELS","#define DeviceServiceEntry drive_DeviceServiceEntry","#else","#define DeviceServiceEntry FREERDP_API DeviceServiceEntry","#endif","","\/**"],"label":0}
{"cve":"CVE-2016-5842","code_chunks":["        if (image->units == PixelsPerCentimeterResolution)","          WriteProfileLong(MSBEndian, (unsigned int) (image->resolution.x*2.54*","            65536.0),p);","        else","          WriteProfileLong(MSBEndian, (unsigned int) (image->resolution.x*","            65536.0),p);","        WriteProfileShort(MSBEndian,(unsigned short) image->units,p+4);"],"label":0}
{"cve":"CVE-2020-11096","code_chunks":["Stream_Read_UINT8(s, iBitmapFormat);      \/* iBitmapFormat (1 byte) *\/","","if (iBitmapFormat >= ARRAYSIZE(BMF_BPP))","goto fail;","","cache_brush->bpp = BMF_BPP[iBitmapFormat];"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["stmt_ty o = (stmt_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_RETURN_NONE;","}","","switch (o->kind) {"],"label":0}
{"cve":"CVE-2020-9432","code_chunks":["#if OPENSSL_VERSION_NUMBER > 0x10002000L","{\"check_host\",  openssl_x509_check_host},","{\"check_email\", openssl_x509_check_email},","{\"check_ip_asc\", openssl_x509_check_ip_asc},","#endif","{\"pubkey\",      openssl_x509_public_key},","{\"version\",     openssl_x509_version},"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["{","node->temporaries","->data[offset + kRecurrentToForgetWeightsLedgerOffset] =","op_data->ledger_index + kRecurrentToForgetWeightsLedgerOffset;","const TfLiteTensor* recurrent_to_forget_weights =","GetInput(context, node, kRecurrentToForgetWeightsTensor);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, \/*index=*\/0, &input1));","const TfLiteTensor* input2;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, \/*index=*\/1, &input2));","","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(values, i, val);","            }"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["goto error;","}","","make_canonical(ctx, LY_TYPE_INT32, value_, &num, NULL);","","if (store) {","\/* store the result *\/"],"label":1}
{"cve":"PYSEC-2020-114","code_chunks":["","m.def(\"TFE_ToDlpackCapsule\", [](py::handle& o) {","PyObject* eager_tensor_pyobject_ptr = o.ptr();","TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);","tensorflow::Safe_TF_StatusPtr status =","tensorflow::make_safe(TF_NewStatus());","void* dlm_ptr = tensorflow::TFE_HandleToDLPack(thandle, status.get());"],"label":1}
{"cve":"CVE-2018-10675","code_chunks":["err = -EINVAL;","goto out;","}","","err = do_migrate_pages(mm, old, new,","capable(CAP_SYS_NICE) ? MPOL_MF_MOVE_ALL : MPOL_MF_MOVE);"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["bool CxImagePCX::Decode(CxFile *hFile)","{","if (hFile == NULL) return false;","","PCXHEADER pcxHeader;","int32_t i, x, y, y2, nbytes, count, Height, Width;","uint8_t c, ColorMap[PCX_MAXCOLORS][3];"],"label":0}
{"cve":"CVE-2023-5377","code_chunks":["\tGF_EventMessageBox *ptr = (GF_EventMessageBox*) s;","","\te = gf_isom_full_box_write(s, bs);","\tif (e) return e;","","\tif (ptr->version==1) {","\t\tgf_bs_write_u32(bs, ptr->timescale);"],"label":0}
{"cve":"CVE-2020-35964","code_chunks":["            break;","","        block_len = ffio_read_varlen(pb);","        if (avio_feof(pb) || block_len <= 0)","            return AVERROR_INVALIDDATA;","","        block_type = avio_r8(pb);"],"label":0}
{"cve":"CVE-2023-29007","code_chunks":["","\t\tif (buf.len >= GIT_CONFIG_MAX_LINE_LEN) {","\t\t\tret = error(_(\"refusing to work with overly long line \"","\t\t\t\t      \"in '%s' on line %\"PRIuMAX),","\t\t\t\t    config_filename, (uintmax_t)line_nr);","\t\t\tgoto out;","\t\t}"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["scratch_size_array->data[0] = batch_size;","scratch_size_array->data[1] = num_filters;","","TfLiteTensor* scratch_tensor = GetTemporary(context, node, \/*index=*\/0);","","if (is_full_integer) {","scratch_tensor->type = kTfLiteInt32;"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["ADD_SP_BEFORE_NON_EMPTY","} magic = NO_MAGIC;","","switch (placeholder[0]) {","magic = DEL_LF_BEFORE_EMPTY;","break;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["{","    stmt_ty p;","    if (!name) {","        PyErr_SetString(PyExc_ValueError,","                        \"field name is required for FunctionDef\");","        return NULL;","    }"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["void TSL_SetPayload(TSL_Status* s, const char* key, const char* value) {","s->status.SetPayload(key, absl::Cord(absl::string_view(value)));","}"],"label":0}
{"cve":"CVE-2020-1918","code_chunks":["if (mme.second.m_return_value != fr) all_same = false;","count += mme.second.m_count;","auto ser_len = mme.second.m_return_value.length();","min_ser_len = std::min(min_ser_len, ser_len);","max_ser_len = std::max(max_ser_len, ser_len);","if (mme.second.m_count > 1) any_multiple = true;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int bn_get_bit(const bn_t a, size_t bit) {","int d;","","if (bit < 0) {"],"label":0}
{"cve":"CVE-2020-7247","code_chunks":["tx->evp.dsn_ret = DSN_RETFULL;","} else if (ADVERTISE_EXT_DSN(tx->session) && strncasecmp(opt, \"ENVID=\", 6) == 0) {","opt += 6;","if (strlcpy(tx->evp.dsn_envid, opt, sizeof(tx->evp.dsn_envid))",">= sizeof(tx->evp.dsn_envid)) {","smtp_reply(tx->session,"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"Tuple field \\\"elts\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"CVE-2019-9917","code_chunks":["void CUser::SetClientEncoding(const CString& s) {","m_sClientEncoding = s;","for (CClient* pClient : GetAllClients()) {","pClient->SetEncoding(s);","}","}"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["        return NULL;","    }","","    result = Ta3AST_mod2obj(mod);","    PyArena_Free(arena);","    return result;","}"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2023-0302","code_chunks":["\t\treturn false;","\t}","\tRSpace *space = r_spaces_current (&a->meta_spaces);","\tRIntervalNode *node = find_node_at (a, type, space, from);","\tRAnalMetaItem *item = node ? node->data : R_NEW0 (RAnalMetaItem);","\tif (!item) {","\t\treturn false;"],"label":0}
{"cve":"CVE-2018-1000050","code_chunks":["float *d1 = &v[n2-4];","while (d0 >= v) {","int k4;","","k4 = bitrev[0];","d1[3] = u[k4+0];"],"label":1}
{"cve":"CVE-2022-40138","code_chunks":["","if (auto *func = dyn_vmcast<JSFunction>(callable)) {","auto *cb = func->getCodeBlock(runtime);","cb->lazyCompile(runtime);","return !func->getCodeBlock(runtime)->getHeaderFlags().isCallProhibited(","true);","}"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\t\t\t\treturn FALSE;","","\t\t\t\tbreak;","","\t\t\t\tif (!rdp_print_draw_gdiplus_cache_capability_set(&sub))","\t\t\t\t\treturn FALSE;",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["        GetTemporarySafe(context, node, \/*index=*\/kFwRowSums, &fw_row_sums));","    fw_row_sums->type = kTfLiteInt32;","    fw_row_sums->allocation_type = kTfLiteArenaRwPersistent;","    int fw_row_sums_dims[2] = {num_row_sums, fw_num_units};","    if (!TfLiteIntArrayEqualsArray(fw_row_sums->dims, 2, fw_row_sums_dims)) {","      TfLiteIntArray* fw_row_sums_size = TfLiteIntArrayCreate(2);","      fw_row_sums_size->data[0] = fw_row_sums_dims[0];"],"label":0}
{"cve":"CVE-2022-2819","code_chunks":["ret = generate_EXEC_copy(cctx, isn, buf);","","vim_free(buf);","*name_end = cc;","}","return ret;"],"label":1}
{"cve":"CVE-2023-46853","code_chunks":["size_t _process_request_next_key(mcp_parser_t *pr) {","    const char *cur = pr->request + pr->parsed;","    int remain = pr->endlen - pr->parsed;","","        while (remain) {","        if (*cur == ' ') {","            remain--;"],"label":0}
{"cve":"CVE-2019-17542","code_chunks":["","","static int decode_format80(VqaContext *s, int src_size,","    unsigned char *dest, int dest_size, int check_size) {","","    int dest_index = 0;","    int count, opcode, start;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &output_indexes));","  std::vector<T> output_values;","  I* indexes = GetTensorData<I>(output_indexes);","  const T* data = GetTensorData<T>(input);","  const int num_elements = NumElements(input);","","  for (int i = 0; i < num_elements; ++i) {"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["int namelen;","int num_attr, i;","const char *cp, *name, *states;","struct match_attr *res = NULL;","int is_macro;"],"label":1}
{"cve":"CVE-2019-20176","code_chunks":["                    path++;","                }","            } else {","                if (a == GLOB_NOSPACE) {","                    addreply(226, MSG_GLOB_NO_MEMORY, arg);","                    addreply_noformat(0, MSG_PROBABLY_DENIED);","                } else if (a == GLOB_ABEND) {"],"label":0}
{"cve":"CVE-2016-4562","code_chunks":[],"label":1}
{"cve":"CVE-2022-29203","code_chunks":["xla::Transpose(reshaped_padded, permutation);","","std::vector<int64_t> output_shape(input_rank);","output_shape[0] = batch_size * block_num_elems;","for (int i = 0; i < block_rank; ++i) {","output_shape[1 + i] = padded_shape[1 + i] \/ block_shape[i];","}"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["\t\/*","\t * Make the rows hold at least one scanline, but fill specified amount","\t * of data if possible.","\t *\/","\tif (rowbytes > STRIP_SIZE_DEFAULT) {","\t\tstripbytes = rowbytes;","\t\trowsperstrip = 1;"],"label":0}
{"cve":"CVE-2022-1052","code_chunks":["void MACH0_(iterate_chained_fixups)(struct MACH0_(obj_t) *bin, ut64 limit_start, ut64 limit_end, ut32 event_mask, RFixupCallback callback, void * context) {","int i = 0;","for (; i < bin->nsegs; i++) {","if (!bin->chained_starts[i]) {","continue;","}"],"label":1}
{"cve":"CVE-2023-28486","code_chunks":["printf(\"%s : %s : \", timestr ? timestr : \"invalid date\", evlog->submituser);","if (evlog->submithost != NULL)","printf(\"HOST=%s ; \", evlog->submithost);","if (evlog->ttyname != NULL)"],"label":1}
{"cve":"PYSEC-2019-227","code_chunks":["for (int input_index : GpuGridRangeX(input_total_size)) {","const Index input_segment_index = input_index \/ inner_dim_size;","const Index segment_offset = input_index % inner_dim_size;","const Index output_segment_index = segment_ids[input_segment_index];","if (output_segment_index < 0 || output_segment_index >= output_total_size) {","continue;"],"label":1}
{"cve":"CVE-2021-32791","code_chunks":["\t\t}","\t}","","\t\/* store the resulting value in the cache *\/","\trc = cfg->cache->set(r, section, key, value, expiry);","","\t\/* log the result *\/"],"label":0}
{"cve":"CVE-2024-23325","code_chunks":["ASSERT(cached_ip_san_peer_certificate_.empty());","return cached_ip_san_peer_certificate_;","}","cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD);","return cached_ip_san_peer_certificate_;","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input_resource_id_tensor =","GetInput(context, node, kInputVariableId);","int resource_id = input_resource_id_tensor->data.i32[0];","auto& resources = subgraph->resources();","auto* variable = resource::GetResourceVariable(&resources, resource_id);","TF_LITE_ENSURE(context, variable != nullptr);"],"label":1}
{"cve":"CVE-2021-36978","code_chunks":["lval *= 85;","lval += (this->inbuf[i] - 33U);","}","","unsigned char outbuf[4];","memset(outbuf, 0, 4);","for (int i = 3; i >= 0; --i)"],"label":0}
{"cve":"CVE-2018-6340","code_chunks":["in_port_t port = LMCD_SERVER_PORT(instance);","","stat = stats + server_id;","","Array server_stats = memcache_build_stats(&data->m_memcache, stat, &ret);","if (ret != MEMCACHED_SUCCESS) {"],"label":1}
{"cve":"CVE-2022-1886","code_chunks":["len = STRLEN(y_array[y_size - 1]);","col = (colnr_T)len - lendiff;","if (col > 1)","curbuf->b_op_end.col = col - 1","- mb_head_off(y_array[y_size - 1],"],"label":1}
{"cve":"CVE-2020-12062","code_chunks":["}","targ = *argv;","if (targetshouldbedirectory)","verifydir(targ);",""],"label":1}
{"cve":"CVE-2016-5358","code_chunks":["","if (rectype == PKT_REC_PACKET) {","next_tvb = tvb_new_subset_remaining(tvb, pkt_len);","dissector_try_uint(wtap_encap_dissector_table,","wtap_pcap_encap_to_wtap_encap(dlt), next_tvb, pinfo, tree);","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["a0 = GetInput(context, node, 0);","a1 = a0;","}","TfLiteTensor* out = GetOutput(context, node, 0);","int num = 1;","for (int i = 0; i < a0->dims->size; ++i) {","num *= a0->dims->data[i];"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","TfLiteTensor* GetTempRhs(TfLiteContext* context, TfLiteNode* node,","                         const TfLiteTensor* rhs) {","  TfLiteTensor* transposed_rhs = GetTemporary(context, node, 1);","  if (transposed_rhs == nullptr) {","    return nullptr;","  }"],"label":0}
{"cve":"CVE-2023-24808","code_chunks":["{","tb->num_tokens --;","strncpy(buffer, tb->tokens[tb->num_tokens], bufsize - 1);","buffer[bufsize - 1] = '\\0';","","PDFIO_DEBUG(\"_pdfioTokenGet(tb=%p, buffer=%p, bufsize=%u): Popping '%s' from stack.\\n\", tb, buffer, (unsigned)bufsize, buffer);"],"label":1}
{"cve":"CVE-2022-39244","code_chunks":["PJ_DEF(void) pj_scan_skip_line( pj_scanner *scanner )","{","char *s = pj_memchr(scanner->curptr, '\\n', scanner->end - scanner->curptr);","if (!s) {","scanner->curptr = scanner->end;","} else {"],"label":1}
{"cve":"CVE-2018-7254","code_chunks":["    if (!chan_chunk && !config->channel_mask && config->num_channels <= 2 && !(config->qmode & QMODE_CHANS_UNASSIGNED))","        config->channel_mask = 0x5 - config->num_channels;","","    if (!WavpackSetConfiguration64 (wpc, config, total_samples, channel_identities)) {","        error_line (\"%s\", WavpackGetErrorMessage (wpc));","        return WAVPACK_SOFT_ERROR;","    }"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["reinterpret_cast<TfLiteUnpackParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","switch (input->type) {","case kTfLiteFloat32: {"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["#define BYTE\t\tchar"],"label":1}
{"cve":"CVE-2018-8799","code_chunks":["x = CVAL(in);","if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;"],"label":1}
{"cve":"CVE-2016-10093","code_chunks":["(unsigned long) row);","status = 0;","goto done;","}","if (colb + tilew > imagew) {","uint32 width = imagew - colb;"],"label":1}
{"cve":"CVE-2022-32234","code_chunks":["report_bad_alloc_error(\"SmallVector capacity overflow during allocation\");","","size_t NewCapacity = 2 * capacity() + 1;   NewCapacity =","std::min(std::max(NewCapacity, MinCapacity), size_t(UINT32_MAX));","","void *NewElts;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","node->temporaries->data[kFwActivationStateQuantized] =","op_data->scratch_tensor_index + kFwActivationStateQuantized;","TfLiteTensor* fw_activation_state_quantized =","GetTemporary(context, node, kFwActivationStateQuantized);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["      TfLiteTensor* out_tensor;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));","      TfLiteIntArray* new_size = TfLiteIntArrayCopy(in_tensor->dims);","      return context->ResizeTensor(context, out_tensor, new_size);","    };","","    reg.invoke = [](TfLiteContext* context, TfLiteNode* node) {"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":[],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\tRLC_THROW(ERR_CAUGHT);","\t}","\tRLC_FINALLY {","\t\tbn_free(n);","\t\tbn_free(_k);","\t\tbn_free(_m);","\t}"],"label":0}
{"cve":"CVE-2016-6870","code_chunks":["        }","      } else {","        if (crlf_state == 1) {","          token.append('\\r');","        }","        if (state == 1 || state == 3) {","          token.append(*ps);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["    TfLiteRegistration reg = {nullptr, nullptr, nullptr, nullptr};","","    reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","            TfLiteTensor* output0;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output0));","      SetTensorToDynamic(output0);","            const TfLiteTensor* input;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT32 GdipVersion;","UINT32 drawGdiplusCacheLevel;","WLog_INFO(TAG, \"DrawGdiPlusCacheCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 40)","return FALSE;"],"label":1}
{"cve":"CVE-2017-15365","code_chunks":["String sp_sql;","#ifndef NO_EMBEDDED_ACCESS_CHECKS","Security_context event_sctx, *save_sctx= NULL;","#endif","List<Item> empty_item_list;","bool ret= TRUE;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["const bn_t m) {","ed_t t0[1 << (ED_WIDTH \/ 2)], t1[1 << (ED_WIDTH \/ 2)], t[1 << ED_WIDTH];","bn_t n;","int l0, l1, w = ED_WIDTH \/ 2;","uint8_t w0[RLC_FP_BITS + 1], w1[RLC_FP_BITS + 1];","","bn_null(n);"],"label":1}
{"cve":"CVE-2021-30020","code_chunks":["","if (!pps->status) pps->status = 1;","pps->sps_id = gf_bs_read_ue_log(bs, \"sps_id\");","if (pps->sps_id >= 32) {","pps->sps_id = 0;","return -1;","}"],"label":1}
{"cve":"CVE-2020-11087","code_chunks":["\ts = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);","","\tif (!s)","\t\treturn SEC_E_INTERNAL_ERROR;","","\tif (context->NTLMv2)","\t{"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["{","    PyObject* tmp = NULL;","    identifier name;","    identifier asname;","","    if (lookup_attr_id(obj, &PyId_name, &tmp) < 0) {","        return 1;"],"label":0}
{"cve":"CVE-2022-24786","code_chunks":["* Build an RTCP-FB Slice Loss Indication (SLI) packet.","*\/","PJ_DEF(pj_status_t) pjmedia_rtcp_fb_build_rpsi(","pjmedia_rtcp_session *session,","void *buf,","pj_size_t *length,"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fb_exp_slide(fb_t c, const fb_t a, const bn_t b) {","fb_t t[1 << (FB_WIDTH - 1)], r;","int i, j, l;","uint8_t win[RLC_FB_BITS + 1];","","fb_null(r);"],"label":1}
{"cve":"CVE-2020-4030","code_chunks":["\t\tif (trio_length_max(name, MAX_USER_NAME) >= MAX_USER_NAME)","\t\t\treturn NULL;","","\t\t\/* Bail out if namespace already is registered *\/","\t\tdef = TrioFindNamespace(name, &prev);","\t\tif (def)","\t\t\treturn NULL;"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["branch_(branch),","branch_handles_(branch_handles),","done_(std::move(done)),","lib_(CHECK_NOTNULL(ctx_->function_library())) {","SetRunOptions(ctx_, &opts_, true \/* always_collect_stats *\/);","for (int i = 1; i < ctx_->num_inputs(); ++i) {","args_.push_back(ctx_->input(i));"],"label":1}
{"cve":"CVE-2019-19053","code_chunks":["}","postcore_initcall(rpmsg_char_init);","","static void rpmsg_chrdev_exit(void)","{","\tunregister_rpmsg_driver(&rpmsg_chrdev_driver);","\tclass_destroy(rpmsg_class);"],"label":0}
{"cve":"CVE-2020-19481","code_chunks":["\t\t\t\tfor (i=0; i<gf_list_count(pmt->program->streams); i++) {","\t\t\tGF_M2TS_PES *an_es = NULL;","\t\t\tGF_M2TS_PES *es = (GF_M2TS_PES *)gf_list_get(pmt->program->streams, i);","\t\t\tif ( !(es->flags & GF_M2TS_ES_IS_PES)) continue;","\t\t\tif (!es->depends_on_pid) continue;","","\t\t\t\t\t\t\t\t\tan_es =  (GF_M2TS_PES *)gf_list_get(pmt->program->streams, es->depends_on_pid);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* tensor0 = GetInput(context, node, 0);","TfLiteTensor* tensor1 = GetOutput(context, node, 0);","TfLiteIntArray* newSize = TfLiteIntArrayCopy(tensor0->dims);","return context->ResizeTensor(context, tensor1, newSize);","};"],"label":1}
{"cve":"CVE-2023-27601","code_chunks":["int delete_sdp_line( struct sip_msg * msg, char * s, struct sdp_stream_cell *stream)","{","char * start,*end;",""],"label":0}
{"cve":"CVE-2023-27114","code_chunks":["}","op->len += n;","}","break;","{","ut32 count = 0, *table = NULL, def = 0;"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["  assertx(m_len != -1);","  if (whence == SEEK_CUR) {","    if (offset >= 0 && offset < bufferedLen()) {","      setReadPosition(getReadPosition() + offset);","      setPosition(getPosition() + offset);","      return true;","    }"],"label":0}
{"cve":"CVE-2021-32613","code_chunks":["static pyc_object *get_none_object(void) {","pyc_object *ret = R_NEW0 (pyc_object);","if (!ret) {","return NULL;","}"],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["s->buf_ptr += len;","} else {","uint64_t target_end = s->end_off ? s->end_off : s->filesize;","if ((!s->willclose || s->chunksize == UINT64_MAX) && s->off >= target_end)","return AVERROR_EOF;","len = ffurl_read(s->hd, buf, size);"],"label":0}
{"cve":"CVE-2023-28101","code_chunks":["  if (opt_show_ref || opt_show_commit || opt_show_parent || opt_show_metadata || opt_show_runtime || opt_show_sdk)","    friendly = FALSE;","","  if (friendly)","    {","      int len;","      int rows, cols;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","auto* first_new_tensor = static_cast<int*>(node->user_data);","","const TfLiteTensor* tensor0 = GetInput(context, node, 0);","TfLiteTensor* tensor1 = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["","\tbn_null(r0);","\tbn_null(r1);","\tbn_null(tmp);","","\tif (*len < (bn_bits(k) + 1)) {","\t\tRLC_THROW(ERR_NO_BUFFER);"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[]={0,0};","","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["fpga_loadfs->fpga_fsinfo->filename,","buffer_p, fit_size, 0);","if (ret < 0)","return ret;","","ret = fit_check_format(buffer_p);"],"label":1}
{"cve":"PYSEC-2021-229","code_chunks":["TF_LITE_ENSURE_STATUS(EnsureTensorDataIsReadable(tensor_index));","}","if (tensor->data.raw == nullptr && tensor->bytes > 0) {","if (registration.builtin_code == kTfLiteBuiltinReshape && i == 1) {","continue;","} else {","ReportError(\"Input tensor %d lacks data\", tensor_index);"],"label":1}
{"cve":"CVE-2023-46728","code_chunks":["","        for (j = 0; j <= MAX_FWD_STATS_IDX; ++j) {","            storeAppendPrintf(s, \"\\t%d\", FwdReplyCodes[j][i]);","        }","","        storeAppendPrintf(s, \"\\n\");","    }"],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["todo[i+1] = buffer >> (14-i)*5;","}","for (i=0; i < 16; i+=2)","raw_image[todo[i]] = (todo[i+1] & 0x3ff);","}","maximum = 0x3ff;"],"label":1}
{"cve":"CVE-2021-30014","code_chunks":["\t}","\t","\treturn GF_TRUE;","}","","static void sub_layer_hrd_parameters(GF_BitStream *bs, int subLayerId, u32 cpb_cnt, Bool sub_pic_hrd_params_present_flag, u32 idx1, u32 idx2)","{"],"label":0}
{"cve":"CVE-2020-1918","code_chunks":["","memset(&paddedSalt[1], '$', maxSaltLength - 1);","memcpy(paddedSalt, salt, std::min(maxSaltLength, saltLen));","paddedSalt[saltLen] = '\\0';","","if (php_crypt_blowfish_rn(key, paddedSalt, output, sizeof(output))) {","return strdup(output);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, 0);","","switch (input->type) {","return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["                hmi_delta[i] = 0;","                if (hmi_track_offset[i] >= hmi_size) {","                    _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_NOT_HMI, \"file too short\", 0);","                    goto _hmi_end;","                }","                data_siz = hmi_size - hmi_track_offset[i];",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","const float epsilon = 1e-6f;","if (output->type == kTfLiteFloat32) {"],"label":1}
{"cve":"CVE-2021-33910","code_chunks":["                        return -EINVAL;","","                \/* Truncate trailing slashes and skip leading slashes *\/","                delete_trailing_chars(p, \"\/\");","                s = unit_name_escape(skip_leading_chars(p, \"\/\"));","        }","        if (!s)"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  const int total_depth = input_depth + activation_depth;","","  TF_LITE_ENSURE_EQ(context, weights->dims->size, 2);","  TF_LITE_ENSURE_EQ(context, weights->dims->data[0], 4 * activation_depth);","  TF_LITE_ENSURE_EQ(context, weights->dims->data[1], total_depth);","","  TF_LITE_ENSURE_EQ(context, bias->dims->size, 1);"],"label":0}
{"cve":"CVE-2021-21323","code_chunks":["GURL::Replacements replacements = GURL::Replacements();","replacements.SetHost(","canonical_name->c_str(),","url::Component(0, static_cast<int>(canonical_name->length())));","const GURL canonical_url = ctx->request_url.ReplaceComponents(replacements);",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void eb_mul_sim_trick(eb_t r, const eb_t p, const bn_t k, const eb_t q,","const bn_t m) {","eb_t t0[1 << (EB_WIDTH \/ 2)], t1[1 << (EB_WIDTH \/ 2)], t[1 << EB_WIDTH];","int l0, l1, w = EB_WIDTH \/ 2;","uint8_t w0[RLC_FB_BITS], w1[RLC_FB_BITS];","bn_t n;",""],"label":1}
{"cve":"CVE-2022-0156","code_chunks":["if (STRCMP(\"RESET\", error) == 0)","ga_clear_strings(&ignore_error_list);","else","ga_add_string(&ignore_error_list, error);","}","","static int"],"label":1}
{"cve":"CVE-2020-13396","code_chunks":["\t}","","\t\/* Generate signing keys *\/","\tntlm_generate_client_signing_key(context);","\tntlm_generate_server_signing_key(context);","\t\/* Generate sealing keys *\/","\tntlm_generate_client_sealing_key(context);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const float cell_clip = params->cell_clip;","const float proj_clip = params->proj_clip;","","const TfLiteTensor* output_tensor = GetOutput(context, node, kOutputTensor);","","auto* cell_state_params = reinterpret_cast<TfLiteAffineQuantization*>(","cell_state->quantization.params);"],"label":1}
{"cve":"CVE-2022-48620","code_chunks":["","\t\t\t\tif (read(w->fd, &exp, sizeof(exp)) != sizeof(exp)) {","\t\t\t\t\tevents = UEV_HUP;","\t\t\t\t\tif (errno != ECANCELED) {","\t\t\t\t\t\tuev_cron_stop(w);","\t\t\t\t\t\tevents = UEV_ERROR;","\t\t\t\t\t}"],"label":0}
{"cve":"CVE-2022-21722","code_chunks":["\/*","* Check whether the specified payload contains RTCP feedback Picture Loss","* Indication (PLI) message.","*\/","PJ_DEF(pj_status_t) pjmedia_rtcp_fb_parse_pli(","const void *buf,"],"label":1}
{"cve":"CVE-2019-17178","code_chunks":["tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));","","if (NULL == tmp)","{"],"label":1}
{"cve":"CVE-2020-36315","code_chunks":["static int pad_pkcs1(bn_t m, int *p_len, int m_len, int k_len, int operation) {","uint8_t *id, pad = 0;","int len, result = RLC_OK;","bn_t t;","","bn_null(t);"],"label":1}
{"cve":"CVE-2023-28101","code_chunks":["        g_string_append_printf (res, \",\\n        %s\", escaped);","      else","        g_string_append_printf (res, \", %s\", escaped);","    }","","  g_print (\"%s\\n\", res->str);","}"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;"],"label":0}
{"cve":"CVE-2021-46463","code_chunks":["","promise = njs_argument(args, 0);","","if (njs_slow_path(!njs_is_object(promise))) {","goto failed;","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["        }","        else {","            int res;","            Py_ssize_t len;","            Py_ssize_t i;","            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"With field \\\"body\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"],"label":0}
{"cve":"CVE-2020-35538","code_chunks":["cinfo->input_iMCU_row++;","cinfo->output_iMCU_row++;","if (cinfo->input_iMCU_row < cinfo->total_iMCU_rows)","start_iMCU_row(cinfo);","else","(*cinfo->inputctl->finish_input_pass) (cinfo);"],"label":1}
{"cve":"CVE-2020-36401","code_chunks":["p2 = mrb_realloc_simple(mrb, p, len);","if (len == 0) return p2;","if (p2 == NULL) {","mrb_free(mrb, p);","mrb->gc.out_of_memory = TRUE;","mrb_raise_nomemory(mrb);","}"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["int j;","for (j = 0; j < a->num_attr; j++) {","const char *setto = a->state[j].setto;","if (setto == ATTR__TRUE ||"],"label":1}
{"cve":"CVE-2016-9388","code_chunks":["\t\t}","\t\tif (pad % 2) {","\t\t\tif (jas_stream_putc(out, 0) == EOF) {","\t\t\t\tgoto error;","\t\t\t}","\t\t}","\t}"],"label":0}
{"cve":"PYSEC-2022-158","code_chunks":["client_options.set_intra_op_parallelism_threads(","device->tensorflow_cpu_worker_threads()->num_threads);","","string allowed_gpus ="],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output_tensor));","","  TF_LITE_ENSURE_EQ(context, NumDimensions(padding_matrix), 2);","  TF_LITE_ENSURE_EQ(context, SizeOfDimension(padding_matrix, 0),","                    NumDimensions(input_tensor));","","  if (!IsConstantTensor(padding_matrix)) {"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["  VLOG(3) << absl::StreamFormat(\"Allocated %s (%uB) on device ordinal %d: %p\",","                                tsl::strings::HumanReadableNumBytes(size), size,","                                device_ordinal, result.opaque());","  return OwningDeviceMemory(result, device_ordinal, this);","}","","tsl::Status StreamExecutorMemoryAllocator::Deallocate(int device_ordinal,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2019-20398","code_chunks":["for (i = 0; i < size; i++) {","result[i].ext_size = old[i].ext_size;","lys_ext_dup(mod->ctx, mod, old[i].ext, old[i].ext_size, &result[i], LYEXT_PAR_RESTR, &result[i].ext, shallow, unres);","result[i].expr = lydict_insert(mod->ctx, old[i].expr, 0);","result[i].dsc = lydict_insert(mod->ctx, old[i].dsc, 0);","result[i].ref = lydict_insert(mod->ctx, old[i].ref, 0);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["*data->invoke_count += 1;","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const uint8_t* input_data = GetTensorData<uint8_t>(input);","int size = NumElements(input->dims);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["ScopedActivateContext activation(context);","RETURN_IF_CUDA_RES_ERROR(","cuMemcpyHtoD(gpu_dst, host_src, size),","absl::StrFormat(","\"failed to synchronous memcpy from host to device: GPU dst: %p;\"","\" host src: %p; size: %u=0x%x\","],"label":1}
{"cve":"CVE-2022-41861","code_chunks":["\t\t\t\t  filter->u.ipx.src.node[0], filter->u.ipx.src.node[1],","\t\t\t\t  filter->u.ipx.src.node[2], filter->u.ipx.src.node[3],","\t\t\t\t  filter->u.ipx.src.node[4], filter->u.ipx.src.node[5]);","\t\t\tp += i;","\t\t\toutlen -= i;","","\t\t\tif (filter->u.ipx.srcSocComp > RAD_NO_COMPARE) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["    if (!TfLiteIntArrayEqual(bw_activation_state_quantized->dims,","                             bw_activation_state->dims)) {","      TfLiteIntArray* bw_activation_state_quantized_size =","          TfLiteIntArrayCopy(bw_activation_state->dims);","      TF_LITE_ENSURE_OK(","          context, context->ResizeTensor(context, bw_activation_state_quantized,","                                         bw_activation_state_quantized_size));"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      Tile<float>(*(input->dims), input, multipliers, output);","      break;","      Tile<uint8_t>(*(input->dims), input, multipliers, output);","      break;","      Tile<int32_t>(*(input->dims), input, multipliers, output);","      break;","      Tile<int64_t>(*(input->dims), input, multipliers, output);"],"label":0}
{"cve":"CVE-2019-11925","code_chunks":["exif_iif_add_tag(ImageInfo, SECTION_APP12, \"Company\",","TAG_NONE, TAG_FMT_STRING, l1, buffer+2);","if (length > 2+l1+1) {","l2 = php_strnlen(buffer+2+l1+1, length-2-l1-1);","exif_iif_add_tag(ImageInfo, SECTION_APP12, \"Info\",","TAG_NONE, TAG_FMT_STRING, l2, buffer+2+l1+1);","}"],"label":0}
{"cve":"CVE-2022-2923","code_chunks":["","\/*","* Go through the whole case-folded tree, soundfold each word and put it","* in the trie.","*\/","byts = slang->sl_fbyts;","idxs = slang->sl_fidxs;"],"label":1}
{"cve":"CVE-2018-14016","code_chunks":["","\tsdb_num_set (obj->kv, \"mdmp_directory.offset\",","\t\t\tobj->hdr->stream_directory_rva, 0);","\tsdb_set (obj->kv, \"mdmp_directory.format\", \"[4]E? \"","\t\t\t\"(mdmp_stream_type)StreamType \"","\t\t\t\"(mdmp_location_descriptor)Location\", 0);",""],"label":0}
{"cve":"CVE-2020-26269","code_chunks":["}","","string fixed_prefix = pattern.substr(0, pattern.find_first_of(\"*?[\\\\\"));","string eval_pattern = pattern;","string dir(io::Dirname(fixed_prefix));","if (dir.empty()) {"],"label":1}
{"cve":"CVE-2018-6334","code_chunks":["std::string array_index, abuf;","char *lbuf=nullptr;","int total_bytes=0, cancel_upload=0, is_arr_upload=0, array_len=0;","int max_file_size=0, skip_upload=0, anonindex=0, is_anonymous;","std::set<std::string> &uploaded_files = s_rfc1867_data->rfc1867UploadedFiles;","multipart_buffer *mbuff;","int fd=-1;"],"label":1}
{"cve":"CVE-2022-1237","code_chunks":["continue;","}","off += 2;","while (off < start + length * sizeof (NE_image_reloc_item)) {","RBinReloc *reloc = R_NEW0 (RBinReloc);","if (!reloc) {","return NULL;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\tfAllowDynamicFidelity = settings->NSCodecAllowDynamicColorFidelity;","\tfAllowSubsampling = settings->NSCodecAllowSubsampling;","\tcolorLossLevel = settings->NSCodecColorLossLevel;","","\tif (colorLossLevel < 1)","\t\tcolorLossLevel = 1;",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const int input_size = NumElements(input) \/ SizeOfDimension(input, 0);","const int batch_size = SizeOfDimension(input, 0);","int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>(","GetTemporary(context, node, data->input_quantized_index));","float* scaling_factors_ptr = GetTensorData<float>(","GetTemporary(context, node, data->scaling_factors_index));"],"label":1}
{"cve":"CVE-2021-43860","code_chunks":["","if (!glnx_opendirat (AT_FDCWD,","flatpak_file_get_path_cached (parent),","TRUE,","&parentfd,","error))","return FALSE;"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["  auto const charListSz = char_list.size();","  auto const charListData = char_list.c_str();","  assertx(memchr(charListData, '\\0', charListSz) != nullptr);","","    auto charListWithoutNull = (char*) req::malloc_noptrs(charListSz);","  SCOPE_EXIT { req::free(charListWithoutNull); };",""],"label":0}
{"cve":"PYSEC-2022-68","code_chunks":["&context_,","MultiplyAndCheckOverflow(old_count, dims[k], &count) == kTfLiteOk,","\"BytesRequired number of elements overflowed.\\n\");","}","size_t type_size = 0;","TF_LITE_ENSURE_OK(&context_, GetSizeOfType(&context_, type, &type_size));","TF_LITE_ENSURE_MSG("],"label":1}
{"cve":"CVE-2020-26270","code_chunks":["static port::StatusOr<CudnnRnnSequenceTensorDescriptor> Create(","GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,","cudnnDataType_t data_type) {","CHECK_GT(max_seq_length, 0);","int dims[] = {batch_size, data_size, 1};","int strides[] = {dims[1] * dims[2], dims[2], 1};","TensorDescriptor tensor_desc = CreateTensorDescriptor();"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* begin;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kBeginTensor, &begin));","const TfLiteTensor* size;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSizeTensor, &size));","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2017-5225","code_chunks":["uint32 w, l, tw, tl;","int bychunk;","","(void) TIFFGetField(in, TIFFTAG_PLANARCONFIG, &shortv);","if (shortv != config && bitspersample != 8 && samplesperpixel > 1) {","fprintf(stderr,","\"%s: Cannot handle different planar configuration w\/ bits\/sample != 8\\n\","],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["return NULL;","if (forbidden_name(c, classname, CHILD(n, 3), 0))","return NULL;","return ClassDef(classname, NULL, NULL, s, decorator_seq, LINENO(n),","n->n_col_offset, c->c_arena);","}"],"label":1}
{"cve":"CVE-2020-13398","code_chunks":["   sequence of realm and principal name, instead of a single string","   object.","","Not implemented yet: extractors for the types: GEN_X400, GEN_DIRNAME,","GEN_EDIPARTY, GEN_RID, GEN_IPADD (the later can contain nul-bytes).","",""],"label":0}
{"cve":"CVE-2019-20398","code_chunks":["","if (!size) {","return NULL;","}","","result = calloc(size, sizeof *result);","LY_CHECK_ERR_RETURN(!result, LOGMEM(mod->ctx), NULL);"],"label":0}
{"cve":"CVE-2016-9841","code_chunks":["else if (op & 16) {                     \/* length base *\/","len = (unsigned)(here.val);","op &= 15;                           \/* number of extra bits *\/","if (op) {","if (bits < op) {","hold += (unsigned long)(PUP(in)) << bits;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from excepthandler\");","return 1;"],"label":0}
{"cve":"CVE-2023-25933","code_chunks":["Type mayBeBigInt = LeftTy.canBeBigInt() && RightTy.canBeBigInt()","? Type::createBigInt()",": Type::createNoType();",""],"label":1}
{"cve":"CVE-2018-20176","code_chunks":["ber_parse_header(STREAM s, int tagval, int *length)","{","int tag, len;",""],"label":1}
{"cve":"CVE-2018-18584","code_chunks":["unsigned char input[CAB_INPUTMAX]; \/* one input block of data              *\/"],"label":1}
{"cve":"CVE-2018-7253","code_chunks":["error_line (\"dsdiff file version = 0x%08x\", version);","}","else if (!strncmp (dff_chunk_header.ckID, \"PROP\", 4)) {","char *prop_chunk = malloc ((size_t) dff_chunk_header.ckDataSize);","","if (!DoReadFile (infile, prop_chunk, (uint32_t) dff_chunk_header.ckDataSize, &bcount) ||","bcount != dff_chunk_header.ckDataSize) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","  for (std::size_t t = 0; t < max_time; ++t) {","    input_list_t.emplace_back(","        GetTensorData<float>(inputs) + t * batch_size * num_classes, batch_size,","        num_classes);","  }",""],"label":0}
{"cve":"CVE-2022-29228","code_chunks":["    credentials->mutable_hmac_secret()->set_name(\"hmac\");","        ","    MessageUtil::validate(p, ProtobufMessage::getStrictValidationVisitor());","","        auto secret_reader = std::make_shared<MockSecretReader>();","    FilterConfigSharedPtr c = std::make_shared<FilterConfig>(p, factory_context_.cluster_manager_,","                                                             secret_reader, scope_, \"test.\");"],"label":0}
{"cve":"CVE-2021-3770","code_chunks":["{","int\t    valcount = 1;","int\t    t;","char_u  *cp;","","if (var[0] == NUL || (var[0] == '0' && var[1] == NUL))"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["else {","int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["reinterpret_cast<TfLiteAudioSpectrogramParams*>(node->user_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2022-104","code_chunks":["ConvolutionDimensions dims = OpDimensionsFromInputs(","op_info.inputs(1).shape(), op_info, &found_unknown_shapes);","","int64_t ops = 0;","const auto rsqrt_cost = Eigen::internal::functor_traits<"],"label":1}
{"cve":"CVE-2020-15472","code_chunks":["      } else if(packet->payload_packet_len >= 20 && packet->payload_packet_len <= 117) {","\tNDPI_LOG_INFO(ndpi_struct, \"found H323 broadcast\\n\");","\tndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_H323, NDPI_PROTOCOL_UNKNOWN);","\treturn;","      } else {","\tNDPI_EXCLUDE_PROTO(ndpi_struct, flow);","\treturn;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["      aux_input_quantized->allocation_type = kTfLiteArenaRw;","      if (!TfLiteIntArrayEqual(aux_input_quantized->dims, aux_input->dims)) {","        TfLiteIntArray* aux_input_quantized_size =","            TfLiteIntArrayCopy(aux_input->dims);","        TF_LITE_ENSURE_OK(context,","                          context->ResizeTensor(context, aux_input_quantized,","                                                aux_input_quantized_size));"],"label":0}
{"cve":"CVE-2021-3331","code_chunks":["{","if (Storage->ValueExists(L\"PasswordPlain\"))","{","Password = Storage->ReadString(L\"PasswordPlain\", Password);","RewritePassword = true;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","switch (indices->type) {","return EvalScatterNd<int32_t>(context, indices, updates, shape, output);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const float* input_data = GetTensorData<float>(input);","const TfLiteTensor* fft_length;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFftLengthTensor, &fft_length));","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["if ((*scanner->curptr == '\\r') || (*scanner->curptr == '\\n'))","break;","","pj_scan_get(scanner, &cs_token, &fmt);","if (med->desc.fmt_count < PJMEDIA_MAX_SDP_FMT)","med->desc.fmt[med->desc.fmt_count++] = fmt;"],"label":1}
{"cve":"CVE-2022-1533","code_chunks":["            }","        }","        else if (c > 10 && c < 20) {","            if (dir == '>') {","                pos = *decoded_size;","            }","            pos -= c - 10;"],"label":0}
{"cve":"CVE-2022-39347","code_chunks":["\t\t\tDEBUG_WSTR(\"MoveFileExW %s\", file->fullpath);","","\t\t\tif (MoveFileExW(file->fullpath, fullpath,","\t\t\t                MOVEFILE_COPY_ALLOWED |","\t\t\t                    (ReplaceIfExists ? MOVEFILE_REPLACE_EXISTING : 0)))","\t\t\t{","\t\t\t\tif (!drive_file_set_fullpath(file, fullpath))"],"label":0}
{"cve":"CVE-2017-7524","code_chunks":["resultKey->t .size = 0;","","tpm2b_i_2.t.size = 4;","","tpm2bBits.t.size = 4;","bitsSwizzled = string_bytes_endian_convert_32( bits );"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  bool has_bias = NumInputs(node) == 4;","","    TF_LITE_ENSURE(context, has_bias || NumInputs(node) == 3);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","    const TfLiteTensor* output_shape;","  TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["size_t length;","gchar *ret = NULL;","","f = fopen(filepath, \"r\");","if (f) {","fseek(f, 0, SEEK_END);","length = (size_t)ftell(f);"],"label":0}
{"cve":"CVE-2019-15162","code_chunks":["","\t\tswitch (sockaddrin->ss_family)","\t{","\t\t{","\t\tstruct sockaddr_in *sockaddrin_ipv4;","\t\tstruct rpcap_sockaddr_in *sockaddrout_ipv4;",""],"label":0}
{"cve":"CVE-2019-20392","code_chunks":["return NULL;","}","","if (lys_getnext_data(module, lys_parent(siblings), name, strlen(name), LYS_LEAFLIST | LYS_LEAF, &snode) || !snode) {","LOGERR(siblings->module->ctx, LY_EINVAL, \"Failed to find \\\"%s\\\" as a sibling to \\\"%s:%s\\\".\",","name, lys_node_module(siblings)->name, siblings->name);","return NULL;"],"label":1}
{"cve":"CVE-2016-10161","code_chunks":["","return finish_nested_data(UNSERIALIZE_PASSTHRU);","}","#line 861 \"ext\/standard\/var_unserializer.c\"","yych = *++YYCURSOR;","if (yych == '+') goto yy40;","if (yych <= '\/') goto yy18;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    const int rhs_dim = extended_rhs_shape.Dims(i);","    if (lhs_dim != rhs_dim) {","      if (lhs_dim != 1) {","        TF_LITE_ENSURE_EQ(context, rhs_dim, 1);","      }","    }","  }"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_TYPES_EQ(context, op_context.axis->type, kTfLiteInt32);","TF_LITE_ENSURE_OK(context, InitializeTemporaries(context, node, &op_context));","","TfLiteTensor* resolved_axis = GetTemporary(context, node, \/*index=*\/1);","if (!IsConstantTensor(op_context.axis)) {","SetTensorToDynamic(op_context.output);","SetTensorToDynamic(resolved_axis);"],"label":1}
{"cve":"CVE-2022-3016","code_chunks":["retval = qf_jump_open_window(qi, qf_ptr, newwin, &opened_window);","if (retval == FAIL)","goto failed;","if (retval == NOTDONE)","goto theend;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(","context, context->ResizeTensor(context, fw_output, fw_output_size_array));","if (!params->merge_outputs) {","TfLiteTensor* bw_output = GetOutput(context, node, kBwOutputTensor);","TfLiteIntArray* bw_output_size_array = TfLiteIntArrayCreate(3);","bw_output_size_array->data[0] = batch_size;","bw_output_size_array->data[1] = max_time;"],"label":1}
{"cve":"CVE-2016-2315","code_chunks":["static void test_show_object(struct object *object,","struct strbuf *path,","const char *last, void *data)","{","struct bitmap_test_data *tdata = data;","int bitmap_pos;"],"label":1}
{"cve":"CVE-2023-23946","code_chunks":["{","struct dir_iterator_int *iter = xcalloc(1, sizeof(*iter));","struct dir_iterator *dir_iterator = &iter->base;","int saved_errno, err;","","strbuf_init(&iter->base.path, PATH_MAX);","strbuf_addstr(&iter->base.path, path);"],"label":0}
{"cve":"CVE-2019-25087","code_chunks":["","\t\tif (it != vhosts.end())","\t\t\tresHost = it->second;","\t} else {","\t\t\t\t\t\tif (hostList.size() > 0)","\t\t\tresHost = hostList[0];","\t}"],"label":0}
{"cve":"PYSEC-2021-400","code_chunks":["    const auto node_ids = node_ids_t->vec<int32>();","","        const Tensor* gradients_t;","    OP_REQUIRES_OK(context, context->input(\"gradients\", &gradients_t));","    const auto gradients = gradients_t->matrix<float>();","","        const Tensor* hessians_t;"],"label":0}
{"cve":"CVE-2017-12595","code_chunks":["input->getLastOffset(),","\"parse error while reading object\"));","object = newNull();","}","else","{"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["","{","int l = atoi(fmt + 1);","ND_TCHECK_LEN(buf, l);","buf += l;","fmt++;"],"label":1}
{"cve":"PYSEC-2023-53","code_chunks":["from vantage6.server.resource.common._schema import UserSchema","","","module_name = logger_name(__name__)","log = logging.getLogger(module_name)","",""],"label":0}
{"cve":"CVE-2022-23608","code_chunks":["\tpj_str_t key;","\tpjsip_role_e role;","\tpjsip_transaction *tsx;","","\tif (rdata->msg_info.msg->type == PJSIP_REQUEST_MSG)","\t    role = PJSIP_ROLE_UAS;","\telse"],"label":0}
{"cve":"CVE-2018-10536","code_chunks":["int ParseRiffHeaderConfig (FILE *infile, char *infilename, char *fourcc, WavpackContext *wpc, WavpackConfig *config)","{","int is_rf64 = !strncmp (fourcc, \"RF64\", 4), got_ds64 = 0;","int64_t total_samples = 0, infilesize;","RiffChunkHeader riff_chunk_header;","ChunkHeader chunk_header;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* data;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputDataTensor, &data));","const TfLiteTensor* segment_ids;"],"label":0}
{"cve":"CVE-2018-10538","code_chunks":["break;","}","else {                      int bytes_to_copy = (chunk_header.ckSize + 7) & ~7L;","char *buff = malloc (bytes_to_copy);","","if (debug_logging_mode)","error_line (\"extra unknown chunk \\\"%c%c%c%c\\\" of %d bytes\","],"label":1}
{"cve":"CVE-2017-10965","code_chunks":["if (list == NULL)","return;","","if (list == nick || list->next == NULL) {","g_hash_table_remove(channel->nicks, nick->nick);","if (list->next != NULL) {"],"label":1}
{"cve":"CVE-2018-11383","code_chunks":["switch (input[1]) {","{","RAnalEsil *esil = r_anal_esil_new (stacksize, iotrap, addrsize);","if (!esil)","return;","r_anal_esil_to_reil_setup (esil, core->anal, romem, stats);","r_anal_esil_set_pc (esil, core->offset);"],"label":1}
{"cve":"CVE-2016-8649","code_chunks":["","\tif (options->attach_flags & LXC_ATTACH_DROP_CAPABILITIES) {","\t\tret = lxc_attach_drop_privs(init_ctx);","\t\tif (ret < 0) {","\t\t\tERROR(\"could not drop privileges\");","\t\t\tshutdown(ipc_socket, SHUT_RDWR);","\t\t\trexit(-1);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* lookup = GetInput(context, node, 0);","const TfLiteTensor* value = GetInput(context, node, 1);","TfLiteTensor* output = GetOutput(context, node, 0);","switch (value->type) {","return EvalSimple(context, node, lookup, value, output);","if (output->type == kTfLiteFloat32) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 0);","","const TfLiteTensor* input_resource_id_tensor ="],"label":1}
{"cve":"CVE-2016-10268","code_chunks":["\t\t\t\tif (colb + tilew > imagew) {","\t\t\t\t\tuint32 width = (imagew - colb);","\t\t\t\t\tint oskew = tilew - width;","","\t\t\t\t\tcpContigBufToSeparateBuf(obuf,","\t\t\t\t\t    bufp + (colb*spp) + s,","\t\t\t\t\t    nrow, width\/bytes_per_sample,"],"label":0}
{"cve":"PYSEC-2020-319","code_chunks":["","  void Compute(OpKernelContext* ctx) override {","    const Tensor& val = ctx->input(0);","    auto session_state = ctx->session_state();","    OP_REQUIRES(ctx, session_state != nullptr,","                errors::FailedPrecondition(","                    \"GetSessionHandle called on null session state\"));"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["    }","","        node->temporaries->data[kAccumScratchBuffer] =","        op_data->scratch_tensor_index + kAccumScratchBuffer;","    TfLiteTensor* accum_scratch;","    TF_LITE_ENSURE_OK(","        context,"],"label":0}
{"cve":"CVE-2022-35937","code_chunks":["const TfLiteTensor* indices, TfLiteTensor* output) {","const TfLiteStatus status = reference_ops::GatherNd(","GetTensorShape(params), GetTensorData<ParamsT>(params),","GetTensorShape(indices), GetTensorData<IndicesT>(indices),","GetTensorShape(output), GetTensorData<ParamsT>(output));","if (status != kTfLiteOk) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["size_t id_len, const uint8_t *msg, int msg_len, const ec_t mpk) {","size_t len;","uint8_t *buf = NULL, *buf_i, hash[RLC_MD_LEN];","bn_t n, c, _h;","ec_t Z, t;","int result = 0;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["fw_cell_state_quantized->type = fw_input_to_output_weights->type;","fw_cell_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(fw_cell_state_quantized->dims,"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (TYPE(ch) == argument) {","if (NCH(ch) == 1)","nargs++;","else if (TYPE(CHILD(ch, 1)) == comp_for) {","nargs++;","if (!allowgen) {"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["showCipherStackDesc(STACK_OF(SSL_CIPHER) * stack) {","char msg[kMsgSize];","int i = 0;","for ( ; i < sk_SSL_CIPHER_num(stack) ; i++) {","const SSL_CIPHER * cipher = sk_SSL_CIPHER_value(stack,i);",""],"label":1}
{"cve":"CVE-2021-32139","code_chunks":["\tGF_TextSampleEntryBox *qt = (_a->type==GF_ISOM_BOX_TYPE_TEXT) ? (GF_TextSampleEntryBox *)_a : NULL;","\tGF_Tx3gSampleEntryBox *ttxt = (_a->type!=GF_ISOM_BOX_TYPE_TEXT) ? (GF_Tx3gSampleEntryBox *)_a : NULL;","","\tif (sidx_offset) gf_bs_write_u8(bs, sidx + sidx_offset);","","\t\/*SINCE WINCE HAS A READONLY VERSION OF MP4 WE MUST DO IT BY HAND*\/","\tsize = 8 + 18 + 8 + 12;"],"label":0}
{"cve":"PYSEC-2021-847","code_chunks":["}","OP_REQUIRES(context, TensorShapeUtils::IsMatrix(shape_in),","errors::InvalidArgument(\"logits and labels must be either \"","\"2-dimensional, or broadcasted to be \"","\"2-dimensional\"));"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["    matcher->set_san_type(","        envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::URI);","    matcher = common_context->mutable_validation_context()->add_match_typed_subject_alt_names();","    matcher->mutable_matcher()->set_exact(options.san_);","    matcher->set_san_type(","        envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::EMAIL);","    matcher = common_context->mutable_validation_context()->add_match_typed_subject_alt_names();"],"label":0}
{"cve":"CVE-2017-14054","code_chunks":["    for (;;) {","        if (rm->audio_pkt_cnt) {","                        AVStream *st;","","            st = s->streams[rm->audio_stream_num];","            ret = ff_rm_retrieve_cache(s, pb, st, st->priv_data, pkt);","            if (ret < 0) {"],"label":0}
{"cve":"CVE-2023-46407","code_chunks":["} else if (len == 17) {","int extra = 3 + get_bits(gb, 3);","if (repeat_count_zero > 0)","extra = 8 * (repeat_count_zero - 2) - repeat_count_zero + extra;","i += extra - 1;","repeat_count_prev = 0;","repeat_count_zero += extra;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2019-19922","code_chunks":[" * Scale the max load_balance interval with the number of CPUs in the system."," * This trades load-balance latency on larger machines for less cross talk."," *\/","void update_max_interval(void)","{","\tmax_load_balance_interval = HZ*num_online_cpus()\/10;","}"],"label":0}
{"cve":"CVE-2016-2315","code_chunks":["","\twhile (i < objects->word_alloc && ewah_iterator_next(&filter, &it)) {","\t\teword_t word = objects->words[i] & filter;","","\t\tfor (offset = 0; offset < BITS_IN_EWORD; ++offset) {","\t\t\tconst unsigned char *sha1;","\t\t\tstruct revindex_entry *entry;"],"label":0}
{"cve":"CVE-2018-20457","code_chunks":["} else if (!strncmp (token, \"asr\", 3)) {","op->operands[operand].shift = ARM_ASR;","}","if (op->operands[operand].shift != ARM_NO_SHIFT) {","op->operands_count ++;","op->operands[operand].shift_amount = r_num_math (NULL, token + 4);","if (op->operands[operand].shift_amount > 63) {"],"label":1}
{"cve":"CVE-2020-6018","code_chunks":["const void *pAdditionalAuthenticationData, size_t cbAuthenticationData",") {","if ( cbEncryptedDataAndTag > *pcbPlaintextData + crypto_aead_aes256gcm_ABYTES )","{","*pcbPlaintextData = 0;","return false;"],"label":0}
{"cve":"CVE-2019-14495","code_chunks":["*sb = 0;","req = mystrdup(buf + ((*buf == 'P')? 6 : 5));","while((i = sockgetlinebuf(param, CLIENT, (unsigned char *)buf, LINESIZE - 1, '\\n', conf.timeouts[STRING_S])) > 2){","buf[i] = 0;","if(i > 19 && (!strncasecmp(buf, \"authorization\", 13))){","sb = strchr(buf, ':');"],"label":1}
{"cve":"PYSEC-2020-114","code_chunks":["int ndim = tensor->dims();","dlm_tensor->dl_tensor.ndim = ndim;","dlm_tensor->dl_tensor.data = TFE_TensorHandleDevicePointer(h, status);","dlm_tensor->dl_tensor.dtype = GetDlDataType(data_type, status);","","std::vector<int64_t>* shape_arr = &tf_dlm_tensor_ctx->shape;"],"label":1}
{"cve":"PYSEC-2021-522","code_chunks":["CalculateActivationRange(params->activation, &output_activation_min,","&output_activation_max);","","const int input_size = NumElements(input) \/ SizeOfDimension(input, 0);","const int batch_size = SizeOfDimension(input, 0);","","const float* input_ptr = GetTensorData<float>(input);"],"label":1}
{"cve":"CVE-2022-23558","code_chunks":["TfLiteIntArray* TfLiteIntArrayCreate(int size) {","size_t alloc_size = TfLiteIntArrayGetSizeInBytes(size);","if (alloc_size <= 0) return NULL;","TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);","if (!ret) return ret;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  };","  ASSERT_EQ(","      interpreter.AddNodeWithParameters({0}, {1}, nullptr, 0, nullptr, &reg),","      kTfLiteOk);","  ASSERT_EQ(interpreter.ResizeInputTensor(0, {3}), kTfLiteOk);","  ASSERT_EQ(interpreter.AllocateTensors(), kTfLiteOk);","  ASSERT_EQ(interpreter.Invoke(), kTfLiteOk);"],"label":0}
{"cve":"CVE-2021-4110","code_chunks":["mrb_proc_copy(mrb_state *mrb, struct RProc *a, struct RProc *b)","{","if (a->body.irep) {","\/* already initialized proc *\/"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        Py_CLEAR(tmp);","    }","    if (_PyObject_LookupAttrId(obj, &PyId_kwonlyargs, &tmp) < 0) {","        return 1;","    }","    if (tmp == NULL) {","        PyErr_SetString(PyExc_TypeError, \"required field \\\"kwonlyargs\\\" missing from arguments\");"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["\/*sizeInBytes=*\/&workspace_size_in_bytes);","if (RequireCudnnDeterminism()) {","RETURN_IF_CUDNN_ERROR(status);","}","","if (status != CUDNN_STATUS_SUCCESS) {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;"],"label":0}
{"cve":"CVE-2018-20182","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2019-17544","code_chunks":["char * unescape(char * dest, const char * src)","{","while (*src) {","if (*src == '\\\\') {","++src;","switch (*src) {","case 'n': *dest = '\\n'; break;"],"label":1}
{"cve":"CVE-2018-5809","code_chunks":["unsigned kodak, entries, tag, type, len, save, c;","double expo,ape;","","kodak = !strncmp(make,\"EASTMAN\",7) && tiff_nifds < 3;","entries = get2();","if(!strncmp(make,\"Hasselblad\",10) && (tiff_nifds > 3) && (entries > 512)) return;"],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["switch (m_kind) {","for (auto& it : *m_staticCache) {","folly::writeFull(file.fd(), it.first->data(), it.first->size());","folly::writeFull(file.fd(), \"\\n\", 1);","}","break;","{"],"label":0}
{"cve":"CVE-2022-0521","code_chunks":["return NULL;","}","se->file_offset = buf_offset;","se->tag = buffer[offset];","offset += 1;","if (se->tag == R_BIN_JAVA_STACKMAP_OBJECT) {"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["return true;","}","","raise_warning(\"IV passed is %d bytes long which is longer than the %d \"","\"expected by selected cipher, truncating\", piv.size(),","iv_required_len);","memcpy(iv_new, piv.data(), iv_required_len);"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["}","","if (piv.size() < iv_required_len) {","raise_warning(\"IV passed is only %d bytes long, cipher \"","\"expects an IV of precisely %d bytes, padding with \\\\0\",","piv.size(), iv_required_len);","memcpy(iv_new, piv.data(), piv.size());"],"label":1}
{"cve":"CVE-2018-17204","code_chunks":["    if (!qs14) {","        return OFPERR_OFPBRC_BAD_LEN;","    }","","    len = ntohs(qs14->length);","    if (len < sizeof *qs14 || len - sizeof *qs14 > msg->size) {","        return OFPERR_OFPBRC_BAD_LEN;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"Tuple field \\\"elts\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["return Py_None;","}","","result = PyType_GenericNew(withitem_type, NULL, NULL);"],"label":1}
{"cve":"CVE-2017-16909","code_chunks":["          else if (load_flags & 1)","          {","            load_raw = &CLASS android_tight_load_raw;","            break;","          }","          load_flags |= 128;","          load_raw = &CLASS packed_load_raw;"],"label":0}
{"cve":"CVE-2022-37032","code_chunks":["{","bgp_notify_send (peer,","BGP_NOTIFY_OPEN_ERR,","BGP_NOTIFY_OPEN_AUTH_FAILURE);","return -1;","}"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2016-3136","code_chunks":["struct mct_u232_private *priv;","","\/* check first to simplify error handling *\/","if (!serial->port[1] || !serial->port[1]->interrupt_in_urb) {","dev_err(&port->dev, \"expected endpoint missing\\n\");","return -ENODEV;"],"label":0}
{"cve":"CVE-2021-41220","code_chunks":["if (group_key_t.dims() > 0) {","return errors::Internal(\"Unexpected dimensions on input group_key, got \",","group_key_t.shape().DebugString());","}","","auto group_size = group_size_t.unaligned_flat<int32>()(0);"],"label":1}
{"cve":"CVE-2021-40812","code_chunks":["out_original = NULL;","}","","ret = 0;","if (tmpfile_for_compression) {","#ifdef _WIN32","_rmtmp();"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["l = RLC_FP_BITS + 1;","bn_rec_slw(win, &l, k, EP_WIDTH);","for (i = 0; i < l; i++) {","if (win[i] == 0) {","ep4_dbl(q, q);","} else {"],"label":1}
{"cve":"CVE-2024-0727","code_chunks":["int ctype_nid = OBJ_obj2nid(p7->type);","const PKCS7_CTX *ctx = ossl_pkcs7_get0_ctx(p7);","","if (ctype_nid == NID_pkcs7_signed)"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["TEST_P(SslSocketTest, FailedClientAuthSanVerification) {","  const std::string client_ctx_yaml = R\"EOF(","        filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/no_san_cert.pem\"","        filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/no_san_key.pem\"",")EOF\";","","  const std::string server_ctx_yaml = R\"EOF("],"label":0}
{"cve":"CVE-2017-11447","code_chunks":["screen->columns=(size_t) GetDeviceCaps(hDC,HORZRES);","screen->rows=(size_t) GetDeviceCaps(hDC,VERTRES);","screen->storage_class=DirectClass;","status=SetImageExtent(screen,screen->columns,screen->rows,exception);"],"label":1}
{"cve":"CVE-2018-16640","code_chunks":["static Image *ReadOneJNGImage(MngInfo *mng_info,","const ImageInfo *image_info, ExceptionInfo *exception)","{","Image","*alpha_image,","*color_image,"],"label":0}
{"cve":"CVE-2023-28486","code_chunks":["list_session(char *log_dir, regex_t *re, const char *user, const char *tty)","{","char idbuf[7], *idstr, *cp;","struct eventlog *evlog = NULL;","const char *timestr;","int ret = -1;"],"label":1}
{"cve":"CVE-2022-29225","code_chunks":["void BrotliDecompressorImpl::decompress(const Buffer::Instance& input_buffer,","Buffer::Instance& output_buffer) {","Common::BrotliContext ctx(chunk_size_);","","for (const Buffer::RawSlice& input_slice : input_buffer.getRawSlices()) {","ctx.avail_in_ = input_slice.len_;"],"label":1}
{"cve":"CVE-2018-12436","code_chunks":["}","#endif","#endif \/* !WOLFSSL_ATECC508A *\/","","static INLINE void wc_ecc_reset(ecc_key* key)","{"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["if (! parser->m_declAttributeId)","return XML_ERROR_NO_MEMORY;","parser->m_declAttributeIsCdata = XML_FALSE;","parser->m_declAttributeType = NULL;","parser->m_declAttributeIsId = XML_FALSE;","goto checkAttListDeclHandler;"],"label":1}
{"cve":"CVE-2020-5238","code_chunks":["if (!scan_table_start(input, len, cmark_parser_get_first_nonspace(parser))) {","return parent_container;","}","","marker_row = row_from_string(self, parser,","input + cmark_parser_get_first_nonspace(parser),"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2023-46852","code_chunks":["uint32_t keyoff = pr.tokens[pr.keytoken];","while (pr.klen != 0) {","char temp[KEY_MAX_LENGTH + 30];","char *cur = temp;","if (pr.klen > KEY_MAX_LENGTH) {","if (!resp_start(c)) {"],"label":1}
{"cve":"CVE-2018-9336","code_chunks":["","if (msg.header.size == sizeof(msg.flush_neighbors))","{","ack.error_number = HandleFlushNeighborsMessage(&msg.flush_neighbors);","}","break;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    fft_input_output[i][fft_width + 1] = real;","    fft_input_output[fft_height - i][fft_width] = img;","    fft_input_output[fft_height - i][fft_width + 1] = -real;","    fft_input_output[i][0] = fft_input_output[fft_height - i][0];","    fft_input_output[i][1] = -fft_input_output[fft_height - i][1];","  }",""],"label":0}
{"cve":"CVE-2022-23572","code_chunks":["        new std::vector<ShapeAndType>(shapes_and_types));","    return true;","  }","  return RelaxHandleShapesAndMergeTypes(","      shapes_and_types, output_handle_shapes_and_types_[idx].get());","}",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp3_read_bin(fp3_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"CVE-2018-8798","code_chunks":["\t\treturn False;","\t}","\ttotal_pro = 1;","\tbytes_pro = process_plane(input, width, height, output + 3, size - total_pro);","\ttotal_pro += bytes_pro;","\tinput += bytes_pro;","\tbytes_pro = process_plane(input, width, height, output + 2, size - total_pro);"],"label":0}
{"cve":"CVE-2023-27114","code_chunks":["}","if (txt) {","op->txt = r_str_newf (\"%s %d\", opdef->txt, op->val);","}","op->len += n;","}"],"label":1}
{"cve":"CVE-2021-3753","code_chunks":["\t\t\t\tvc_resize(vc_cons[i].d, cc, ll);","\t\t\t}","\t\t}","\t\tconsole_unlock();","\t\tbreak;","\t}",""],"label":0}
{"cve":"CVE-2020-15202","code_chunks":["                  return;","                }","                output(sample) = z * stddev + mean;","                sample++;","                if (sample >= limit_sample) {","                  break;","                }"],"label":0}
{"cve":"CVE-2021-23520","code_chunks":["for (auto& entryName : entryNames)","{","auto& block = blocks.getReference (entryName);","MemoryOutputStream mo (block, false);","mo << entryName;","mo.flush();"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* hidden_state =","GetInput(context, node, kHiddenStateTensor);","","auto* params = reinterpret_cast<TfLiteSequenceRNNParams*>(node->builtin_data);","const bool time_major = params->time_major;"],"label":1}
{"cve":"CVE-2016-10009","code_chunks":["\t\t\tfingerprint_hash = ssh_digest_alg_by_name(optarg);","\t\t\tif (fingerprint_hash == -1)","\t\t\t\tfatal(\"Invalid hash algorithm \\\"%s\\\"\", optarg);","\t\t\tbreak;","\t\t\tif (s_flag)","\t\t\t\tusage();","\t\t\tc_flag++;"],"label":0}
{"cve":"CVE-2019-19481","code_chunks":["left -= len;","break;","}","next_len = MIN(left, apdu.sw2);","}","if (r < 0) {","SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, r);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT32 brushSupportLevel;","WLog_INFO(TAG, \"BrushCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));","","if (Stream_GetRemainingLength(s) < 4)","return FALSE;"],"label":0}
{"cve":"CVE-2022-0695","code_chunks":["\t\t\t\tgoto beach;","\t\t\t}","\t\t\tptr->vaddr = ptr->paddr = ldata.offset;","\t\t\tptr->type = 'F'; \t\t\tr_list_append (fixups, ptr);","\t\t} else if (lrec.rec_type == LMF_RW_END_REC) {","\t\t\tr_buf_fread_at (bf->buf, offset, (ut8 *)&qo->rwend, \"si\", 1);","\t\t}"],"label":0}
{"cve":"CVE-2023-1170","code_chunks":["\t{","\t    pp[lnum] = vim_strsave(*ss);","\t    if (type == MBLOCK)","\t    {","\t\tint charlen = mb_string2cells(*ss, -1);","","\t\tif (charlen > maxlen)"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","  const TfLiteTensor* cond_tensor;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputConditionTensor,","                                          &cond_tensor));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));"],"label":0}
{"cve":"CVE-2016-3178","code_chunks":["if(p+l > buf+n) {","syslog(LOG_WARNING, \"bad request (length encoding l=%u n=%u)\",","l, (unsigned)n);","goto error;"],"label":1}
{"cve":"CVE-2019-1010208","code_chunks":["UNICODE_STRING FullFileName;","IO_STATUS_BLOCK IoStatus;","LARGE_INTEGER offset;","byte readBuffer [TC_SECTOR_SIZE_BIOS];","","if (!ValidateIOBufferSize (Irp, sizeof (GetSystemDriveConfigurationRequest), ValidateInputOutput))","break;"],"label":1}
{"cve":"CVE-2020-36315","code_chunks":["result = RLC_ERR;","}","}","bn_rsh(m, m, 8);","bn_mod_2b(t, m, 8 * RLC_MD_LEN);","bn_write_bin(h2, RLC_MD_LEN, t);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const int num_dims = NumDimensions(input);","TF_LITE_ENSURE(context, num_dims >= 2);","const TfLiteTensor* fft_length;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFftLengthTensor, &fft_length));","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TF_LITE_ENSURE(context, IsPowerOfTwo(fft_length_data[0]));"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["if (mme.second.m_return_value != fr) all_same = false;","count += mme.second.m_count;","auto ser_len = mme.second.m_return_value.length();","min_ser_len = std::min(min_ser_len, ser_len);","max_ser_len = std::max(max_ser_len, ser_len);","if (mme.second.m_count > 1) any_multiple = true;"],"label":1}
{"cve":"CVE-2020-6017","code_chunks":["char m_buf[ k_cbSteamNetworkingSocketsMaxPlaintextPayloadRecv ];"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            int res;","            res = obj2ast_expr(tmp, &iter, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }","        if (lookup_attr_id(obj, &PyId_body, &tmp) < 0) {","            return 1;"],"label":0}
{"cve":"CVE-2018-12561","code_chunks":["","    det.name=name->text().trimmed();","    switch (t) {","    case Type_SshFs: {","        det.url.setHost(sshHost->text().trimmed());","        det.url.setUserName(sshUser->text().trimmed());","        det.url.setPath(sshFolder->text().trimmed());"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2018-1000050","code_chunks":["int i,max_part_read=0;","for (i=0; i < f->residue_count; ++i) {","Residue *r = f->residue_config + i;","int n_read = r->end - r->begin;","int part_read = n_read \/ r->part_size;","if (part_read > max_part_read)","max_part_read = part_read;"],"label":1}
{"cve":"CVE-2020-9434","code_chunks":["const char* hostname = luaL_checklstring(L, 2, &sz);","int flags = luaL_optint(L, 3, 0);","char *peer = NULL;","","int ret = X509_check_host(cert, hostname, sz, flags, &peer);","ret = openssl_push_check_result(L, ret, peer);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["asdl_seq_SET(body, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"body\\\" missing from For\");","return 1;"],"label":1}
{"cve":"CVE-2023-26485","code_chunks":[],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["pipe_lock.Unlock();","","if (!msgr->verify_authorizer(connection_state.get(), peer_type, connect.authorizer_protocol, authorizer,","authorizer_reply, authorizer_valid, session_key) ||","!authorizer_valid) {","ldout(msgr->cct,0) << \"accept: got bad authorizer\" << dendl;"],"label":1}
{"cve":"CVE-2018-20178","code_chunks":["x = CVAL(in);","if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["bool MDSDaemon::ms_verify_authorizer(Connection *con, int peer_type,","int protocol, bufferlist& authorizer_data, bufferlist& authorizer_reply,","bool& is_valid, CryptoKey& session_key,","std::unique_ptr<AuthAuthorizerChallenge> *challenge)","{","Mutex::Locker l(mds_lock);","if (stopping) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  output->type = kTfLiteInt32;","","        SetTensorToPersistentRo(output);",""],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["to.SetPayload(key, value);"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["if(len<1) return;   string[len-1]=0;","if(len<3) return;   len = strnlen(string,len-1);","for(int i=len-1; i>=0; i--)","{","if(isspace(string[i]))","string[i]=0;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {"],"label":1}
{"cve":"CVE-2019-14868","code_chunks":["last = (char *)str;","} else {","d = number(str, &last, shp->inarith ? 0 : 10, NULL);","if (*last && !shp->inarith && sh_isstate(shp, SH_INIT)) {","d = number(str, &last, 0, NULL);","}"],"label":0}
{"cve":"CVE-2022-45873","code_chunks":["int e, k;","","k = read(error_pipe[0], &e, sizeof(e));","if (k < 0 && errno != EAGAIN) \/* Pipe is non-blocking, EAGAIN means there's nothing *\/","return -errno;","if (k == sizeof(e))"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","return kTfLiteOk;","}","","template <KernelType kernel_type>","TfLiteStatus EvalInt8(TfLiteContext* context, const OpData* data,"],"label":1}
{"cve":"CVE-2021-4188","code_chunks":["if (mrb_get_args(mrb, \"|i\", &n) == 0) {","return mrb_ary_shift(mrb, self);","};","ary_modify_check(mrb, a);","if (len == 0 || n == 0) return mrb_ary_new(mrb);","if (n < 0) mrb_raise(mrb, E_ARGUMENT_ERROR, \"negative array shift\");"],"label":1}
{"cve":"CVE-2020-5291","code_chunks":["            int dont_close[3];","            int j = 0;","            if (event_fd != -1)","              dont_close[j++] = event_fd;","            if (opt_sync_fd != -1)","              dont_close[j++] = opt_sync_fd;","            dont_close[j++] = -1;"],"label":0}
{"cve":"CVE-2022-1207","code_chunks":["op->type = R_ANAL_OP_TYPE_LEA;","if (len > 5) {","op->ptr = buf[2];","op->ptr |= buf[3]<<8;","op->ptr |= buf[4]<<16;"],"label":1}
{"cve":"CVE-2017-7866","code_chunks":["    } else {","        return AVERROR_INVALIDDATA;","    }","","    bytestream2_skip(&s->gb, 4); \/* crc *\/","    s->has_trns = 1;",""],"label":0}
{"cve":"CVE-2022-1382","code_chunks":["RList *r_bin_ne_get_segments(r_bin_ne_obj_t *bin) {","int i;","if (!bin) {","return NULL;","}","RList *segments = r_list_newf (free);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["expr_ty o = (expr_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_RETURN_NONE;","}","","switch (o->kind) {"],"label":0}
{"cve":"CVE-2018-12561","code_chunks":["if (RemoteFsDevice::constSambaAvahiProtocol==details.url.scheme()) {","Avahi::self();","QUrlQuery q(details.url);","if (q.hasQueryItem(constServiceNameQuery)) {","details.serviceName=q.queryItemValue(constServiceNameQuery);"],"label":1}
{"cve":"PYSEC-2020-282","code_chunks":["auto do_work = [samples_per_batch, num_elements, &ctx, &means, &stddevs,","&minvals, &maxvals, &gen, &output,","kStdDevsInsideBoundsToUseRandnSampler](int start_batch,","int limit_batch) {","random::PhiloxRandom gen_copy = gen;","gen_copy.Skip(start_batch * 2 * kMaxIterations * (samples_per_batch + 3) \/"],"label":1}
{"cve":"CVE-2015-8631","code_chunks":["getprivs_ret * get_privs_2_svc(krb5_ui_4 *arg, struct svc_req *rqstp)","{","static getprivs_ret            ret;","gss_buffer_desc                client_name, service_name;","OM_uint32                      minor_stat;","kadm5_server_handle_t          handle;","const char                     *errmsg = NULL;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["GetTemporary(context, node, kInputQuantized);","input_quantized->type = fw_input_to_output_weights->type;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2022-35970","code_chunks":["","void Compute(OpKernelContext* ctx) override {","const Tensor& input = ctx->input(0);","const float input_min_float = ctx->input(1).flat<float>()(0);","const float input_max_float = ctx->input(2).flat<float>()(0);","const float requested_output_min_float = ctx->input(3).flat<float>()(0);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  output->type = input->type;",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input1));","const TfLiteTensor* input2;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &input2));"],"label":0}
{"cve":"CVE-2022-31002","code_chunks":["      if (b_start)","\tbreak;","      b_start = i + n + 1, b_len = strcspn(s + b_start, \"&\");","      i = b_start + b_len;","      if (s[i] != '\\0') i += 1;","      continue;","    }"],"label":0}
{"cve":"CVE-2021-3331","code_chunks":["      if (CheckSafe(Params))","      {","        try","        {","          RemoveSearchPath(ExtractFilePath(Application->ExeName));","        }","        catch(...)"],"label":0}
{"cve":"CVE-2018-14882","code_chunks":["\/* Minimum len is 28 *\/","if (len < 28) {","ND_PRINT((ndo,\" [invalid len %d]\", len));","return;","}","ND_TCHECK(icp->icmp6_data16[0]);"],"label":1}
{"cve":"CVE-2019-3556","code_chunks":["   * Find the perpendicular distance from point C (px, py) to the line","   * segment AB that is being drawn.  (Adapted from an algorithm from the","   * comp.graphics.algorithms FAQ.)","   *\/","","  int LAC_2, LBC_2;",""],"label":0}
{"cve":"CVE-2022-3976","code_chunks":[],"label":1}
{"cve":"CVE-2023-4778","code_chunks":["i=0;","has_quote = 0;","while (go) {","if (parser->line_pos+i>=parser->line_size) break;","","if (parser->line_buffer[parser->line_pos + i] == '\\\"') {","if (!has_quote) has_quote = 1;"],"label":0}
{"cve":"CVE-2019-20393","code_chunks":["                             }","                             (yyval.v) = actual;","                           }","","    break;","",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  op_params.block_size = params->block_size;                               \\","  type::SpaceToDepth(op_params, GetTensorShape(input),                     \\","                     GetTensorData<scalar>(input), GetTensorShape(output), \\","                     GetTensorData<scalar>(output))","  switch (input->type) {        if (kernel_type == kReference) {","        TF_LITE_SPACE_TO_DEPTH(reference_ops, float);","      } else {"],"label":0}
{"cve":"CVE-2022-29228","code_chunks":["FilterConfigSharedPtr getConfig(bool forward_bearer_token = true) {","envoy::extensions::filters::http::oauth2::v3::OAuth2Config p;","auto* endpoint = p.mutable_token_endpoint();","endpoint->set_cluster(\"auth.example.com\");"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep_mul_sim_lot_plain(ep_t r, const ep_t p[], const bn_t k[], int n) {","int i, j, l, *_l = RLC_ALLOCA(int, n);","ep_t *_p = RLC_ALLOCA(ep_t, n);","int8_t *naf = NULL;","","RLC_TRY {"],"label":1}
{"cve":"CVE-2022-35970","code_chunks":["                          {11.0f, 22.0f, 33.0f, 41.0f, 52.0f, 63.0f});","","  AddInputFromArray<quint8>(input_quantized.shape(),","                            input_quantized.flat<quint8>());","  AddInputFromArray<quint8>(bias_quantized.shape(),","                            bias_quantized.flat<quint8>());","  AddInputFromArray<float>(TensorShape({}), {input_min});"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT32 offscreenSupportLevel;","UINT16 offscreenCacheSize;","UINT16 offscreenCacheEntries;","WLog_INFO(TAG, \"OffscreenBitmapCacheCapabilitySet (length %\" PRIuz \"):\",","Stream_GetRemainingLength(s));"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["        Ta3Tokenizer_Get(tok, &p_start, &p_end);","    }","    fclose(fp);","    if (tok->encoding) {","        encoding = (char *)PyMem_MALLOC(strlen(tok->encoding) + 1);","        if (encoding)","        strcpy(encoding, tok->encoding);"],"label":0}
{"cve":"CVE-2018-12562","code_chunks":["if (RemoteFsDevice::constSambaAvahiProtocol==details.url.scheme()) {","Avahi::self();","QUrlQuery q(details.url);","if (q.hasQueryItem(constServiceNameQuery)) {","details.serviceName=q.queryItemValue(constServiceNameQuery);"],"label":1}
{"cve":"CVE-2019-20629","code_chunks":["\t\tu32 od_count, od_index;","\t\tod_count = gf_list_count(es->program->additional_ods);","\t\tfor (od_index = 0; od_index < od_count; od_index++) {","\t\t\tGF_ObjectDescriptor *od = (GF_ObjectDescriptor *)gf_list_get(es->program->additional_ods, od_index);","\t\t\tesd_count = gf_list_count(od->ESDescriptors);","\t\t\tfor (k = 0; k < esd_count; k++) {","\t\t\t\tGF_ESD *esd_tmp = (GF_ESD *)gf_list_get(od->ESDescriptors, k);"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["}","sysex_len = (sysex_len << 7) + (*event_data & 0x7F);","event_data++;","if (!sysex_len) break;","ret_cnt++;","","sysex_store = malloc(sizeof(uint8_t) * sysex_len);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["        };","      } else if (fail_delegate_node_prepare_) {","        reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","          return kTfLiteError;","        };","      } else {","        reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["      } else {","        return EvalSimple(context, node, lookup, value, output);","      }","      context->ReportError(context, \"Type not currently supported.\");","      return kTfLiteError;","  }","}"],"label":0}
{"cve":"CVE-2021-25940","code_chunks":["                     new BooleanParameter(&_restServer),","                     arangodb::options::makeDefaultFlags(arangodb::options::Flags::Hidden));","  ","  options->addOption(\"--server.validate-utf8-strings\", \"perform UTF-8 string validation for incoming JSON and VelocyPack data\",","                     new BooleanParameter(&_validateUtf8Strings),","                     arangodb::options::makeDefaultFlags(arangodb::options::Flags::Hidden)).setIntroducedIn(30700);",""],"label":0}
{"cve":"CVE-2017-6448","code_chunks":["\t\t\t\telse {","\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i..v%i}, method+%i\", vC, vC + vA - 1, vB);","\t\t\t\t}","\t\t\t}","\t\t\tstrasm = r_str_concat (strasm, str);","\t\t\tbreak;","\t\t\tvA = (int) (buf[1] & 0xf0) >> 4;"],"label":0}
{"cve":"CVE-2018-8799","code_chunks":["uint32 length;","struct stream packet = *s;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","","if (!s_check_rem(s, length))"],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["todo[i]   = isix++;","todo[i+1] = buffer >> (14-i)*5;","}","for (i=0; i < 16; i+=2)"],"label":1}
{"cve":"CVE-2016-2315","code_chunks":["static void show_object(struct object *obj, const char *name, void *data)","{","add_preferred_base_object(name);","add_object_entry(obj->oid.hash, obj->type, name, 0);"],"label":0}
{"cve":"CVE-2020-24870","code_chunks":["int i = 6;","for (unsigned row = 0; row < imgdata.color.dng_levels.dng_cblack[4]; row++)","for (unsigned col = 0; col < imgdata.color.dng_levels.dng_cblack[5]; col++)","for (unsigned c = 0; c < tiff_samples; c++)","{","csum[c] += imgdata.color.dng_levels.dng_cblack[i];","ccount[c]++;"],"label":1}
{"cve":"CVE-2021-3995","code_chunks":["\/*","* Note that cxt->fs contains relevant mtab entry!","*\/","static int evaluate_permissions(struct libmnt_context *cxt)","{","struct libmnt_table *fstab;"],"label":1}
{"cve":"CVE-2017-12662","code_chunks":["if (profile != (StringInfo *) NULL)","version=(size_t) MagickMax(version,7);","(void) FormatLocaleString(buffer,MagickPathExtent,\"%%PDF-1.%.20g \\n\",(double)","version);","(void) WriteBlobString(image,buffer);","if (LocaleCompare(image_info->magick,\"PDFA\") == 0)"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus MockCustom::Invoke(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = tflite::GetInput(context, node, 0);","const int32_t* input_data = input->data.i32;","const TfLiteTensor* weight = tflite::GetInput(context, node, 1);","const uint8_t* weight_data = weight->data.uint8;","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;"],"label":1}
{"cve":"CVE-2022-0519","code_chunks":["\t\tlvattr = R_NEW0 (RBinJavaLocalVariableAttribute);","\t\tif (!lvattr) {","\t\t\tbreak;","\t\t}","\t\tlvattr->start_pc = R_BIN_JAVA_USHORT (buffer, offset);","\t\toffset += 2;","\t\tlvattr->length = R_BIN_JAVA_USHORT (buffer, offset);"],"label":0}
{"cve":"CVE-2019-13300","code_chunks":["    **pixels;","","  register ssize_t","    i,","    j;","","  size_t"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    node->temporaries->data[kOutputStateQuantized] =","        scratch_tensor_index + kOutputStateQuantized;","    TfLiteTensor* output_state_quantized;","    TF_LITE_ENSURE_OK(context,","                      GetTemporarySafe(context, node, kOutputStateQuantized,","                                       &output_state_quantized));","    output_state_quantized->type = input_to_output_weights->type;"],"label":0}
{"cve":"CVE-2020-1712","code_chunks":["        if (c > 0)","                interactive = true;","","        r = hashmap_ensure_allocated(registry, NULL);","        if (r < 0)","                return r;",""],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["} else if ((tracks[i][0] == 0xff) && (tracks[i][1] == 0x51) && (tracks[i][2] == 0x03)) {","\/* Tempo *\/","tempo = (tracks[i][3] << 16) + (tracks[i][4] << 8)+ tracks[i][5];","if (!tempo)","tempo = 500000;",""],"label":1}
{"cve":"CVE-2018-8792","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2022-3341","code_chunks":["    int64_t *syncpoints = NULL;","    uint64_t max_pts;","    int8_t *has_keyframe = NULL;","    int ret = AVERROR_INVALIDDATA;","","    if(filesize <= 0)","        return -1;"],"label":0}
{"cve":"CVE-2022-43286","code_chunks":["            njs_chb_append(chain, string.start, string.size);","            njs_chb_append_literal(chain, \" \");","        }","","        njs_chb_append_literal(chain, \"[\");","","        (void) njs_typed_array_to_chain(stringify->vm, chain, array, NULL);"],"label":0}
{"cve":"CVE-2020-1919","code_chunks":["assertx(m_len != -1);","assertx(length > 0);","assertx(m_cursor >= 0);","int64_t remaining = m_len - m_cursor;","if (remaining < length) length = remaining;","if (length > 0) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["bn_new(t);","","bn_set_2b(h, bits >> 1);","bn_set_2b(l, (bits >> 1) - 1);","","\/* Trivial binary search approach. *\/","do {"],"label":1}
{"cve":"PYSEC-2021-815","code_chunks":["OP_REQUIRES_OK(context, context->input_list(\"stats_summary_list\",","&stats_summary_list));","const int64_t num_buckets = stats_summary_list[0].dim_size(1);","DCHECK_EQ(stats_summary_list[0].dim_size(2), 2);","std::vector<TTypes<float, 3>::ConstTensor> stats_summary;","stats_summary.reserve(stats_summary_list.size());","for (const auto& tensor : stats_summary_list) {"],"label":1}
{"cve":"CVE-2017-6350","code_chunks":["","    \/* Remember where we are for \"g-\" and \":earlier 10s\". *\/","    curbuf->b_u_seq_cur = curhead->uh_seq;","    if (undo)","\t\/* We are below the previous undo.  However, to make \":earlier 1s\"","\t * work we compute this as being just above the just undone change. *\/","\t--curbuf->b_u_seq_cur;"],"label":0}
{"cve":"CVE-2022-24786","code_chunks":["    }","","    return PJ_SUCCESS;","}","","","\/*"],"label":0}
{"cve":"PYSEC-2022-136","code_chunks":["const OpDef& op_def, const std::vector<const Tensor*>& input_tensors,","const std::vector<ShapeHandle>& input_tensors_as_shapes) {","const auto ret = full_type::SpecializeType(attrs_, op_def);","DCHECK(ret.status().ok()) << \"while instantiating types: \" << ret.status();","ret_types_ = ret.ValueOrDie();","","input_tensors_ = input_tensors;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["GetInput(context, node, kRecurrentWeightsTensor);","const TfLiteTensor* bias = GetInput(context, node, kBiasTensor);","TfLiteTensor* hidden_state =","const_cast<TfLiteTensor*>(GetInput(context, node, kHiddenStateTensor));","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);",""],"label":1}
{"cve":"CVE-2019-13305","code_chunks":["(void) strncpy((char *) q,buffer,extent);","q+=extent;","if ((q-pixels+extent+2) >= sizeof(pixels))","{"],"label":1}
{"cve":"CVE-2022-0676","code_chunks":["if (!cache_buf || !hdr || !hdr->accelerateInfoSize || !hdr->accelerateInfoAddr) {","return NULL;","}","size_t mc = R_MIN (hdr->mappingCount, n_maps);","ut64 offset = va2pa (hdr->accelerateInfoAddr, mc, maps, cache_buf, 0, NULL, NULL);","if (!offset) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["      has_dynamic_output_tensors = true;","      break;","    }","  }","","  if (has_dynamic_output_tensors) {","    for (int i = 0; i < node->outputs->size; ++i) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\t\tfp12_mul_dxs(r, r, l);","\t\t\t\t}","\t\t\t}","\t\t}","\t}","\tRLC_CATCH_ANY {","\t\tRLC_THROW(ERR_CAUGHT);"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["collect_some_attrs(istate, path, check);","","for (i = 0; i < check->nr; i++) {","size_t n = check->items[i].attr->attr_nr;","const char *value = check->all_attrs[n].value;","if (value == ATTR__UNKNOWN)","value = ATTR__UNSET;"],"label":1}
{"cve":"CVE-2021-32139","code_chunks":[],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\tfb_sqr(r, r);","\t\t\t} else {","\t\t\t\tfor (size_t j = 0; j < util_bits_dig(win[i]); j++) {","\t\t\t\t\tfb_sqr(r, r);","\t\t\t\t}","\t\t\t\tfb_mul(r, r, t[win[i] >> 1]);","\t\t\t}"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["                    \/* We're going to tell the caller that the literal ends","                       here, but that they should continue scanning. But also","                       skip over the second brace when we resume scanning. *\/","                    *str = s + 1;","                    result = 1;","                    goto done;","                }"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const float soft_nms_sigma = *GetTensorData<float>(input_sigma);","if (soft_nms_sigma < 0) {","context->ReportError(context, \"Invalid sigma value for soft NMS: %f\","],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["if (NULL == (tm = gmtime(&ts)))","ND_PRINT(\"gmtime() error\");","else if (0 == strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm))","ND_PRINT(\"strftime() error\");","else"],"label":1}
{"cve":"CVE-2020-14402","code_chunks":["seg = data+(j*w);                                                 \\","if (seg[x] != cl) {break;}                                        \\","i = x;                                                            \\","while ((seg[i] == cl) && (i < w)) i += 1;                         \\","i -= 1;                                                           \\","if (j == y) vx = hx = i;                                          \\","if (i < vx) vx = i;                                               \\"],"label":1}
{"cve":"CVE-2021-20224","code_chunks":["      break;","    }","    {","      if (quantum_info->format == FloatingPointQuantumFormat)","        {","          double","            pixel;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["    }","    default: {","      context->ReportError(context, \"Unsupported data type: %d\", output->type);","      return kTfLiteError;","    }","  }","  return kTfLiteOk;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","            return 1;","        }","        else {","            int res;"],"label":0}
{"cve":"CVE-2021-30020","code_chunks":["\treturn ret;","}","","GF_EXPORT","s32 gf_media_vvc_parse_nalu(u8 *data, u32 size, VVCState *vvc, u8 *nal_unit_type, u8 *temporal_id, u8 *layer_id)","{","\tGF_BitStream *bs = NULL;"],"label":0}
{"cve":"CVE-2021-4173","code_chunks":["last = (char_u *)\"}\";","plen = STRLEN(last);","pnl = vim_strnsave((char_u *)\"\\n\", plen + 1);","if (pnl != NULL)","mch_memmove(pnl + 1, last, plen + 1);","((char_u **)gap->ga_data)[gap->ga_len++] = pnl;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        return 1;","    }","    if (isinstance) {","        expr_ty elt;","        asdl_seq* generators;","","        if (_PyObject_LookupAttrId(obj, &PyId_elt, &tmp) < 0) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","const int num_elements = NumElements(input);","switch (input->type) {","memset(GetTensorData<int64_t>(output), 0, num_elements * sizeof(int64_t));"],"label":1}
{"cve":"CVE-2022-41911","code_chunks":["  }","  if (print_v2) {","    const int num_dims = tensor_shape.dims();","    PrintOneDimV2(0, shape, limit, num_dims, array, 0, &ret);","  } else {","    int64_t data_index = 0;","    const int shape_size = tensor_shape.dims();"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","std::vector<StringRef> words;","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","tflite::StringRef strref = tflite::GetString(input, 0);","int prev_idx = 0;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_share_capability_set(wStream* s, UINT16 length, rdpSettings* settings)","{","WINPR_UNUSED(settings);","if (length < 8)","return FALSE;","","Stream_Seek_UINT16(s); \/* nodeId (2 bytes) *\/"],"label":1}
{"cve":"CVE-2020-1917","code_chunks":["}","","int cmp_len = s1_len - offset;","if (cmp_len < s2_len) cmp_len = s2_len;","if (cmp_len > length) cmp_len = length;",""],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["}","node->temporaries->data[kInputZeroPoints] =","op_data->scratch_tensor_index + kInputZeroPoints;","TfLiteTensor* input_zp = GetTemporary(context, node, kInputZeroPoints);","input_zp->type = kTfLiteFloat32;","input_zp->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(input_zp->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"PYSEC-2021-660","code_chunks":["      OP_REQUIRES(","          context, b > -1 && b < N,","          errors::InvalidArgument(","              \"Received unexpected column 0 value in input SparseTensor: \", b,","              \" < 0 or >= N (= \", N, \")\"));","","      const auto indices = subset.indices();"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteIntArray* input_dims = input->dims;","  int input_dims_size = input_dims->size;","  TF_LITE_ENSURE(context, input_dims_size >= 1);","","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["          *eventEndPP = s;","          parser->m_unparsedEntityDeclHandler(","              parser->m_handlerArg, parser->m_declEntity->name,","              parser->m_declEntity->base, parser->m_declEntity->systemId,","              parser->m_declEntity->publicId, parser->m_declEntity->notation);","          handleDefault = XML_FALSE;","        } else if (parser->m_entityDeclHandler) {"],"label":0}
{"cve":"CVE-2018-20459","code_chunks":["\t\t} else if (!strncmp (token, \"asr\", 3)) {","\t\t\top->operands[operand].shift = ARM_ASR;","\t\t}","\t\tif (strlen (token) > 4 && op->operands[operand].shift != ARM_NO_SHIFT) {","\t\t\top->operands_count ++;","\t\t\top->operands[operand].shift_amount = r_num_math (NULL, token + 4);","\t\t\tif (op->operands[operand].shift_amount > 63) {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ASSERT_EQ(aux_input->dims->data[1], input->dims->data[1]);","}","","TfLiteTensor* fw_output = GetOutput(context, node, kFwOutputTensor);","TfLiteTensor* fw_activation_state =","GetVariableInput(context, node, kFwInputActivationStateTensor);","TF_LITE_ENSURE(context, fw_activation_state != nullptr);"],"label":1}
{"cve":"CVE-2016-5356","code_chunks":["cosine_seek_read(wtap *wth, gint64 seek_off, struct wtap_pkthdr *phdr,","Buffer *buf, int *err, gchar **err_info)","{","int\tpkt_len;","char\tline[COSINE_LINE_LENGTH];","","if (file_seek(wth->random_fh, seek_off, SEEK_SET, err) == -1)"],"label":1}
{"cve":"CVE-2018-14055","code_chunks":["            break;","            bReturn = OnCTCPMessage(Message);","            break;","            bReturn = OnJoinMessage(Message);","            break;","            bReturn = OnModeMessage(Message);","            break;"],"label":0}
{"cve":"CVE-2022-37032","code_chunks":["zebra_route_char(u_int zroute)","{","  return zroute_lookup(zroute)->chr;","}","","const char *","zserv_command_string (unsigned int command)"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2020-14400","code_chunks":["rfbSetClientColourMapBGR233(rfbClientPtr cl)","{","char buf[sz_rfbSetColourMapEntriesMsg + 256 * 3 * 2];","rfbSetColourMapEntriesMsg *scme = (rfbSetColourMapEntriesMsg *)buf;","uint16_t *rgb = (uint16_t *)(&buf[sz_rfbSetColourMapEntriesMsg]);","int i, len;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2020-36177","code_chunks":["#if defined(WOLFSSL_PSS_LONG_SALT) || defined(WOLFSSL_PSS_SALT_LEN_DISCOVER)","#if defined(WOLFSSL_NO_MALLOC) && !defined(WOLFSSL_STATIC_MEMORY)","byte salt[RSA_MAX_SIZE\/8 + RSA_PSS_PAD_SZ];","#else","byte* salt = NULL;","#endif"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &key));","  TF_LITE_ENSURE_EQ(context, NumDimensions(key), 1);","  TF_LITE_ENSURE_EQ(context, key->type, kTfLiteInt32);","","  const TfLiteTensor* value;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &value));","  TF_LITE_ENSURE(context, NumDimensions(value) >= 1);"],"label":0}
{"cve":"CVE-2020-36315","code_chunks":["\t\t\t\tm_len = k_len - 1;","\t\t\t\tbn_rsh(t, m, 8 * m_len);","\t\t\t\tif (bn_is_zero(t)) {","\t\t\t\t\tm_len--;","\t\t\t\t\tbn_rsh(t, m, 8 * m_len);","\t\t\t\t\tpad = (uint8_t)t->dp[0];","\t\t\t\t\tif (pad == RSA_PRV) {"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (tmp == NULL || tmp == Py_None) {","Py_CLEAR(tmp);","type = NULL;","}","else {","int res;"],"label":0}
{"cve":"CVE-2018-14016","code_chunks":["\/* Parse each entry in the directory *\/","ut64 rvadir = obj->hdr->stream_directory_rva;","for (i = 0; i < (int)obj->hdr->number_of_streams; i++) {","ut32 delta = i * sizeof (struct minidump_directory);","int r = r_buf_read_at (obj->b, rvadir + delta, (ut8*) &entry, sizeof (struct minidump_directory));","if (r) {","r_bin_mdmp_init_directory_entry (obj, &entry);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","const TfLiteTensor* filter;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &filter));","","data->need_hwcn_weights ="],"label":0}
{"cve":"CVE-2021-42782","code_chunks":["sc_pkcs15_pubkey_t *key = NULL;","int r;","","memset(&cert_info, 0, sizeof(cert_info));","","r = coolkey_get_certificate(p15card->card, obj, &cert_info.value);"],"label":0}
{"cve":"CVE-2023-1801","code_chunks":["\t\tbreak;","\t    }","\t    fmt++;","\t    break;","\t  }","\tcase 'R':\t\/* like 'S', but always ASCII *\/","\t  {"],"label":0}
{"cve":"CVE-2021-36222","code_chunks":["    krb5_enc_data *enc = NULL;","    krb5_data scratch, plain;","    krb5_keyblock *armor_key = cb->fast_armor(context, rock);","    krb5_pa_enc_ts *ts = NULL;","    krb5_keyblock *client_keys = NULL;","    krb5_keyblock *challenge_key = NULL;","    krb5_keyblock *kdc_challenge_key;"],"label":0}
{"cve":"CVE-2022-35967","code_chunks":["","AddInputFromArray<quint8>(input_quantized.shape(),","input_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});"],"label":1}
{"cve":"CVE-2019-13454","code_chunks":["    \/* copy source image attributes ? *\/","    if ( source->next != (Image *) NULL )","      {","        destination->delay = source->delay;","        destination->iterations = source->iterations;","      }","    source=GetNextImageInList(source);"],"label":0}
{"cve":"CVE-2016-2187","code_chunks":["* HID report descriptor","*\/","if (usb_get_extra_descriptor(usbinterface->cur_altsetting,","HID_DEVICE_TYPE, &hid_desc) != 0){","dev_err(&usbinterface->dev,","\"Can't retrieve exta USB descriptor to get hid report descriptor length\\n\");","error = -EIO;"],"label":1}
{"cve":"CVE-2018-14360","code_chunks":["  char *fp = NULL;","  struct dirent *entry = NULL;","  DIR *dp = NULL;","","  if (!nserv || !nserv->cacheable)","    return;",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["bool has_dynamic_output_tensors = false;","for (auto* subgraph : {then_subgraph, else_subgraph}) {","for (int i = 0; i < num_inputs; ++i) {","const TfLiteTensor* input = GetInput(context, node, i + 1);","std::vector<int> dims(input->dims->data,","input->dims->data + input->dims->size);","subgraph->ResizeInputTensor(i, dims);"],"label":1}
{"cve":"CVE-2022-35984","code_chunks":["int32_t num_batches = shape_tensor.flat<int32>()(0);","","int32_t samples_per_batch = 1;","const int32_t num_dims = shape_tensor.dim_size(0);"],"label":1}
{"cve":"CVE-2023-28487","code_chunks":[" * Check keyboard for ' ', '<', '>', return"," * pause, slow, fast, next"," *\/","static void","read_keyboard(int fd, int what, void *v)","{","    struct replay_closure *closure = v;"],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["{ \\","code += pBuffer[i] - '0'; \\","} \\","else if('A' <= pBuffer[i] && pBuffer[i] <= 'F') \\","{ \\","code += pBuffer[i] - 'A' + 10; \\"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","    TfLiteTensor* fft_double_working_area;","  TF_LITE_ENSURE_OK(context,","                    GetTemporarySafe(context, node, kFftDoubleWorkingAreaTensor,","                                     &fft_double_working_area));","    double* fft_double_working_area_data = reinterpret_cast<double*>(","      GetTensorData<int64_t>(fft_double_working_area));"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep2_write_bin(uint8_t *bin, int len, const ep2_t a, int pack) {","ep2_t t;","","ep2_null(t);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensorIouThreshold,","                                 &input_iou_threshold));","  const float iou_threshold = *GetTensorData<float>(input_iou_threshold);","  const TfLiteTensor* input_score_threshold;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensorScoreThreshold,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["GetOutput(context, node, kSoftNMSOutputTensorSelectedScores);","output_selected_scores->type = kTfLiteFloat32;","TfLiteTensor* output_num_selected_indices =","GetOutput(context, node, kSoftNMSOutputTensorNumSelectedIndices);","output_num_selected_indices->type = kTfLiteInt32;","SetTensorSizes(context, output_num_selected_indices, {});"],"label":1}
{"cve":"CVE-2018-20176","code_chunks":["\t\tentry = &map.colours[i];","\t\tin_uint8(s, entry->red);","\t\tin_uint8(s, entry->green);","\t\tin_uint8(s, entry->blue);","\t}","","\thmap = ui_create_colourmap(&map);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["            const TfLiteTensor* a0;","      TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &a0));","      TfLiteTensor* a1;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &a1));","      int num = a0->dims->data[0];","      for (int i = 0; i < num; i++) {","        a1->data.f[i] = a0->data.f[i];"],"label":0}
{"cve":"CVE-2016-2324","code_chunks":["","\tif (reuse_objects < reuse_threshold)","\t\treturn -1;","","\tbitmap_git.reuse_objects = *entries = reuse_objects;","\t*up_to = bitmap_git.pack->revindex[reuse_objects].offset;","\t*packfile = bitmap_git.pack;"],"label":0}
{"cve":"PYSEC-2021-663","code_chunks":["","void Compute(OpKernelContext* context) override {","const auto& in_min_tensor = context->input(2);","OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_min_tensor.shape()),","errors::InvalidArgument(\"min must be a scalar\"));","const float in_min = in_min_tensor.flat<float>()(0);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, SizeOfDimension(indices, 0),","SizeOfDimension(weights, 0));","","const TfLiteTensor* value = GetInput(context, node, 4);"],"label":1}
{"cve":"CVE-2021-29527","code_chunks":["","        auto& worker_threads =","            *(context->device()->tensorflow_cpu_worker_threads());","        TensorflowGemmContext context(worker_threads.num_threads,","                                      worker_threads.workers);","        gemmlowp::GemmWithOutputPipeline<std::uint8_t, std::int32_t,","                                         gemmlowp::DefaultL8R8BitDepthParams>("],"label":0}
{"cve":"CVE-2018-20177","code_chunks":["x = CVAL(in);","if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  }","","  for (int i = 0; i < active_branch_subgraph.outputs().size(); ++i) {","    const TfLiteTensor* subgraph_output =","        active_branch_subgraph.tensor(active_branch_subgraph.outputs()[i]);","    TfLiteTensor* output;","    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &output));"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["                    PyErr_SetString(PyExc_RuntimeError, \"Import field \\\"names\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(names, i, val);","            }","            Py_CLEAR(tmp);","        }"],"label":0}
{"cve":"CVE-2022-4202","code_chunks":["static Fixed lsr_translate_scale(GF_LASeRCodec *lsr, u32 val)","{","if (val >> (lsr->coord_bits-1) ) {","s64 v = val - (0x00000001UL << lsr->coord_bits);","return INT2FIX(v) \/ 256 ;","} else {","return INT2FIX(val) \/ 256;"],"label":0}
{"cve":"CVE-2023-1655","code_chunks":["Bool wav_ok = GF_TRUE;","GF_BitStream *bs;","if (ctx->probe_data) {","ctx->probe_data = gf_realloc(ctx->probe_data, ctx->probe_data_size+pck_size);","memcpy(ctx->probe_data + ctx->probe_data_size, data, pck_size);","ctx->probe_data_size += pck_size;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteNode* node) {","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const int num_dims = NumDimensions(input);","TF_LITE_ENSURE(context, num_dims >= 2);","const TfLiteTensor* fft_length;"],"label":0}
{"cve":"CVE-2016-2315","code_chunks":["typedef void (*show_object_fn)(struct object *, struct strbuf *, const char *, void *);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","TfLiteTensor* indices = GetOutput(context, node, p);","TF_LITE_ENSURE_OK(context, Resize(context, {p_num, 2}, indices));","","TfLiteTensor* values = GetOutput(context, node, p + top_paths);","TF_LITE_ENSURE_OK(context, Resize(context, {p_num}, values));"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteIntArrayFree(node->temporaries);","node->temporaries = TfLiteIntArrayCreate(6);","node->temporaries->data[0] = op_data->scratch_tensor_index;","TfLiteTensor* input_quantized = GetTemporary(context, node, \/*index=*\/0);","input_quantized->type = input_weights->type;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int n0, n1;","int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], *_k, *_m;","fp24_t r, t0[1 << (EP_WIDTH - 2)];","fp24_t s, t1[1 << (EP_WIDTH - 2)];","size_t l, l0, l1;",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  return {\/*init=*\/conv::Init,","          \/*free=*\/nullptr,","          \/*prepare=*\/conv::Prepare,","          \/*invoke=*\/conv::Eval,","          \/*profiling_string=*\/nullptr,","          \/*builtin_code=*\/0,","          \/*custom_name=*\/nullptr,"],"label":0}
{"cve":"CVE-2018-19842","code_chunks":["","\tif (!str[*begin]) {                \t\t*end = *begin;","\t\treturn TT_EOF;","\t}","\tif (isalpha ((ut8)str[*begin])) {   \t\t*end = *begin;","\t\twhile (end && str[*end] && isalnum ((ut8)str[*end])) {","\t\t\t++(*end);"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["type->parent->flags |= LYS_DFLTJSON;","}","","make_canonical(ctx, LY_TYPE_IDENT, &value, (void*)lys_main_module(local_mod)->name, NULL);","","\/* replace the old value with the new one (even if they may be the same) *\/","lydict_remove(ctx, *value_);"],"label":1}
{"cve":"CVE-2020-15474","code_chunks":["u_int16_t p_offset, u_int16_t certificate_len) {","struct ndpi_packet_struct *packet = &flow->packet;","u_int num_found = 0, i;","char buffer[64] = { '\\0' }, rdnSeqBuf[2048] = { '\\0' };","u_int rdn_len = 0;","","#ifdef DEBUG_TLS"],"label":0}
{"cve":"CVE-2021-30022","code_chunks":["Bool vps_default_ptl_dpb_hrd_max_tid_flag=0;","","vps_id = gf_bs_read_int_log(bs, 4, \"vps_id\");","if (vps_id >= 16) return -1;","if (!vps_id) {","GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] VPS ID 0 is forbidden\\n\"));","return -1;"],"label":1}
{"cve":"CVE-2016-5358","code_chunks":["    ppi_module = prefs_register_protocol(proto_ppi, NULL);","    prefs_register_bool_preference(ppi_module, \"reassemble\",","                                   \"Reassemble fragmented 802.11 A-MPDUs\",","                                   \"Whether fragmented 802.11 aggregated MPDUs should be reassembled\",","                                   &ppi_ampdu_reassemble);","}",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","","switch (input->type) {        return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);","return EvalImpl<kernel_type, kTfLiteUInt8>(context, node);"],"label":0}
{"cve":"CVE-2022-0696","code_chunks":["\t\t{","\t\t    emsg(_(e_missing_rcurly));","\t\t    break;","\t\t}","\t\tif (ga_copy_string(&ga, line) == FAIL)","\t\t    break;","\t\tif (*skipwhite(line) == '}')"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["        input1->params.scale \/ (input2->params.scale * output->params.scale);","    QuantizeMultiplier(real_multiplier, &data->output_multiplier,","                       &data->output_shift);","  }","","  return context->ResizeTensor(context, output, output_size);","}"],"label":0}
{"cve":"CVE-2020-15121","code_chunks":["}","#endif","#if __WINDOWS__","{","int ret = recv (s->fd, (void *)buf, len, 0);","if (ret == -1) {"],"label":1}
{"cve":"CVE-2020-1917","code_chunks":["    valid(initPatterns(arr)) { }","","  Variant translate(String source) const;","};","","static inline uint16_t strtr_hash(const char *str, int len) {","    uint16_t  res = 0;"],"label":0}
{"cve":"CVE-2021-32139","code_chunks":["","\tnewBox->size = size - hdr_size;","","\te = gf_isom_full_box_read(newBox, bs);","\tif (!e) e = gf_isom_box_read(newBox, bs);","\tif (e) {","\t\tif (gf_opts_get_bool(\"core\", \"no-check\"))"],"label":0}
{"cve":"CVE-2019-13223","code_chunks":["{","   stb_vorbis *p = (stb_vorbis *) setup_malloc(f, sizeof(*p));","   return p;","}","","#ifndef STB_VORBIS_NO_PUSHDATA_API",""],"label":0}
{"cve":"PYSEC-2021-171","code_chunks":["&input_st));","","auto input_shape_t = input_shape->vec<int64>();","const int64 N = input_shape_t(0);","","Tensor sparse_handles(DT_INT64, TensorShape({N}));"],"label":1}
{"cve":"CVE-2021-32437","code_chunks":["esd = gf_isom_get_esd(file, sceneT, 1);","if (gf_isom_get_sample_count(file, sceneT)==1) {","samp = gf_isom_get_sample(file, sceneT, 1, &descIndex);","if (gf_hinter_can_embbed_data(samp->data, samp->dataLength, GF_STREAM_SCENE)) {","","slc.timeScale = slc.timestampResolution = gf_isom_get_media_timescale(file, sceneT);","slc.OCRResolution = 1000;"],"label":1}
{"cve":"CVE-2021-30020","code_chunks":["Bool vps_default_ptl_dpb_hrd_max_tid_flag=0;","","vps_id = gf_bs_read_int_log(bs, 4, \"vps_id\");","if (vps_id >= 16) return -1;","if (!vps_id) {","GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] VPS ID 0 is forbidden\\n\"));","return -1;"],"label":1}
{"cve":"CVE-2022-2453","code_chunks":["memset(&sffield, 0, sizeof(GF_FieldInfo));","sffield.fieldIndex = field->fieldIndex;","sffield.fieldType = gf_sg_vrml_get_sf_type(field->fieldType);","sffield.NDTtype = field->NDTtype;","sffield.name = field->name;",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_read_str(bn_t a, const char *str, int len, int radix);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["         *reinterpret_cast<const unsigned char*>(b);","}","","void ReportOpError(struct TfLiteContext* context, const char* format, ...) {","#ifndef TF_LITE_STRIP_ERROR_STRINGS","  ErrorReporter* error_reporter = static_cast<ErrorReporter*>(context->impl_);","  va_list args;"],"label":0}
{"cve":"CVE-2019-20392","code_chunks":["        \/* falls through *\/","        parent_type++;","        \/* falls through *\/","        \/* parent *\/","        node = str_snode;","        stype = item;",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["bn_t _k;","int i, j, n;","int8_t s, reg[1 + RLC_CEIL(RLC_FP_BITS + 1, EP_WIDTH - 1)];","ep_t t[1 << (EP_WIDTH - 2)], u, v;","size_t l;",""],"label":0}
{"cve":"CVE-2022-35173","code_chunks":["njs_generate_dest_index(njs_vm_t *vm, njs_generator_t *generator,","    njs_parser_node_t *node)","{","    njs_index_t         ret;","    njs_parser_node_t   *dest;","    njs_parser_scope_t  *scope;",""],"label":0}
{"cve":"CVE-2020-26247","code_chunks":["{","VALUE document;","VALUE parse_options;","xmlDocPtr doc;","xmlRelaxNGParserCtxtPtr ctx;","xmlRelaxNGPtr schema;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep2_mul_slide(ep2_t r, const ep2_t p, const bn_t k) {","ep2_t t[1 << (EP_WIDTH - 1)], q;","int i, j, l;","uint8_t win[RLC_FP_BITS + 1];","","ep2_null(q);"],"label":1}
{"cve":"CVE-2018-8791","code_chunks":["uint32 length;","struct stream packet = *s;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","","if (!s_check_rem(s, length))"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["bitmapCache->context = bitmapCache->update->context;","bitmapCache->maxCells = settings->BitmapCacheV2NumCells;","bitmapCache->cells = (BITMAP_V2_CELL*)calloc(bitmapCache->maxCells, sizeof(BITMAP_V2_CELL));","","if (!bitmapCache->cells)","goto fail;"],"label":1}
{"cve":"PYSEC-2021-607","code_chunks":["errors::InvalidArgument(\"Paddings must be non-negative: \",","before_d, \" \", after_d));","const int64_t size_d = in0.dim_size(d);","output_shape.AddDim(before_d + size_d + after_d);","}","","if (output_shape.num_elements() == in0.NumElements()) {"],"label":1}
{"cve":"CVE-2018-20839","code_chunks":["if (r < 0)","return log_error_errno(r, \"Virtual console %s is not allocated: %m\", src_vc);","","r = verify_vc_kbmode(fd);","if (r < 0)","return log_error_errno(r, \"Virtual console %s is not in K_XLATE or K_UNICODE: %m\", src_vc);",""],"label":1}
{"cve":"CVE-2024-0964","code_chunks":[")","assert examples.processed_examples == [[\"hello\"]]","","examples = gr.Examples([\"test\/test_files\/bus.png\"], gr.Image())","assert ("],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* axis = GetInput(context, node, kAxis);","TF_LITE_ENSURE_EQ(context, NumElements(axis), 1);","TF_LITE_ENSURE(context,","axis->type == kTfLiteInt32 || axis->type == kTfLiteInt64);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"],"label":1}
{"cve":"CVE-2018-12561","code_chunks":["int t=type->itemData(type->currentIndex()).toInt();","RemoteFsDevice::Details det;","","det.name=name->text().trimmed();","switch (t) {","case Type_SshFs: {"],"label":1}
{"cve":"CVE-2021-37639","code_chunks":["context, size == 1,","errors::InvalidArgument(","\"Input 0 (file_pattern) must be a string scalar; got a tensor of \",","size, \"elements\"));","}","const string& file_pattern = file_pattern_t.flat<tstring>()(0);",""],"label":1}
{"cve":"PYSEC-2022-158","code_chunks":["platform_info.xla_device_metadata()->client(),","platform_info.xla_device_metadata()->jit_device_type());","return Status::OK();","}","","auto platform =","se::MultiPlatformManager::PlatformWithId(platform_info.platform_id());"],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["void CLASS rollei_load_raw()","{","uchar pixel[10];","unsigned iten=0, isix, i, buffer=0, todo[16];","","isix = raw_width * raw_height * 5 \/ 8;","while (fread (pixel, 1, 10, ifp) == 10) {"],"label":1}
{"cve":"CVE-2018-10538","code_chunks":["","            if (!WaveHeader.NumChannels || WaveHeader.NumChannels > 256 ||","                WaveHeader.BlockAlign \/ WaveHeader.NumChannels < (config->bits_per_sample + 7) \/ 8 ||","                WaveHeader.BlockAlign \/ WaveHeader.NumChannels > 4 ||","                WaveHeader.BlockAlign % WaveHeader.NumChannels)","                    supported = FALSE;",""],"label":0}
{"cve":"CVE-2015-8631","code_chunks":["{","static gprinc_ret               ret;","char                            *prime_arg, *funcname;","gss_buffer_desc                 client_name,","service_name;"],"label":1}
{"cve":"CVE-2018-8793","code_chunks":["\t\tif (!ber_in_header(s, &tagval, &length)","\t\t    || tagval != (BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0))","\t\t\treturn False;","","\t\tif (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","\t\t\treturn False;",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  const TfLiteTensor* size;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSizeTensor, &size));","","  if (IsDynamicTensor(output)) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_OK(","      context,","      GetInputSafe(context, node, kRecurrentWeightsTensor, &recurrent_weights));","  const TfLiteTensor* bias;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kBiasTensor, &bias));","  const TfLiteTensor* hidden_state;","  TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2017-6349","code_chunks":["* When there are no headers uhp_table is NULL. *\/","if (num_head > 0)","{","uhp_table = (u_header_T **)U_ALLOC_LINE(","num_head * sizeof(u_header_T *));","if (uhp_table == NULL)","goto error;"],"label":1}
{"cve":"CVE-2020-27764","code_chunks":["          maximum=pixel;","          pixel.red=MagickAbsoluteValue(maximum.red-minimum.red);","          pixel.green=MagickAbsoluteValue(maximum.green-minimum.green);","          pixel.blue=MagickAbsoluteValue(maximum.blue-minimum.blue);","          pixel.opacity=MagickAbsoluteValue(maximum.opacity-minimum.opacity);","          if (image->colorspace == CMYKColorspace)","            pixel.index=MagickAbsoluteValue(maximum.index-minimum.index);"],"label":0}
{"cve":"CVE-2022-40138","code_chunks":["      CASE(GetByIdLong) {","        tryProp = false;","        idVal = ip->iGetByIdLong.op4;","        nextIP = NEXTINST(GetByIdLong);","        goto getById;","      }","      CASE(GetByIdShort) {"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2020-1921","code_chunks":["      return strdup(crypt_res);","    }","#endif","  }","","  return ((salt[0] == '*') && (salt[1] == '0'))","                  ? strdup(\"*1\") : strdup(\"*0\");"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","output->type = input->type;","return context->ResizeTensor(context, output,"],"label":1}
{"cve":"CVE-2017-9228","code_chunks":["static int","next_state_val(CClassNode* cc, OnigCodePoint *vs, OnigCodePoint v,","int* vs_israw, int v_israw,","enum CCVALTYPE intype, enum CCVALTYPE* type,","enum CCSTATE* state, ScanEnv* env)","{"],"label":1}
{"cve":"CVE-2022-23570","code_chunks":["auto* arg = t->mutable_args(i);","if (arg->type_id() == TFT_VAR) {","const auto* attr = attrs.Find(arg->s());","DCHECK(attr != nullptr);","if (attr->value_case() == AttrValue::kList) {","const auto& attr_list = attr->list();","arg->set_type_id(TFT_PRODUCT);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["reinterpret_cast<TfLiteLocalResponseNormParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["return Call(left_expr, NULL, NULL, LINENO(n),","n->n_col_offset, c->c_arena);","else","return ast_for_call(c, CHILD(n, 1), left_expr);","}","else if (TYPE(CHILD(n, 0)) == DOT) {","PyObject *attr_id = NEW_IDENTIFIER(CHILD(n, 1));"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["    TF_LITE_ENSURE_EQ(context, output_shape.Dims(num_dims_output - 2),","                      fft_length_data[0]);","    TF_LITE_ENSURE_EQ(context, output_shape.Dims(num_dims_output - 1),","                      fft_length_data[1] \/ 2 + 1);","  }","","  return Rfft2dHelper(context, node);"],"label":0}
{"cve":"CVE-2021-32439","code_chunks":["u32 i;","CHECK_PACK(GF_ISOM_INVALID_FILE)","","if (!stbl->SampleSize->sampleCount) {","stbl->SampleSize->sampleSize = size;","stbl->SampleSize->sampleCount += nb_pack;"],"label":0}
{"cve":"CVE-2022-31624","code_chunks":["","","static void update_syslog_ident(MYSQL_THD thd  __attribute__((unused)),","              struct st_mysql_sys_var *var  __attribute__((unused)),","              void *var_ptr  __attribute__((unused)), const void *save)","{","  char *new_ident= (*(char **) save) ? *(char **) save : empty_str;"],"label":0}
{"cve":"CVE-2019-17546","code_chunks":["                YCbCrtoRGB(cp [3], pp[ 3]);","                YCbCrtoRGB(cp1[0], pp[ 4]);","                YCbCrtoRGB(cp1[1], pp[ 5]);","                YCbCrtoRGB(cp1[2], pp[ 6]);","                YCbCrtoRGB(cp1[3], pp[ 7]);","                YCbCrtoRGB(cp2[0], pp[ 8]);","                YCbCrtoRGB(cp2[1], pp[ 9]);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["","for (i = bits - 1; i >= 0; i--) {","j = bn_get_bit(l, i);","dv_swap_cond(t[0]->x, t[1]->x, RLC_FP_DIGS, j ^ 1);","dv_swap_cond(t[0]->y, t[1]->y, RLC_FP_DIGS, j ^ 1);","dv_swap_cond(t[0]->z, t[1]->z, RLC_FP_DIGS, j ^ 1);"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["TEST(PayloadSerialization, PayloadsAreTransmitted) {","Status status = errors::InvalidArgument(\"invalid arg message\");","status.SetPayload(\"a\", absl::Cord(\"\\\\xFF\\\\x02\\\\x03\"));","Status status_recovered = FromGrpcStatus(ToGrpcStatus(status));","","ASSERT_TRUE(status_recovered.GetPayload(\"a\").has_value());"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["AuthCapsInfo& caps_info, CryptoKey& session_key, uint64_t *auid = NULL) override;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void ed_mul_slide(ed_t r, const ed_t p, const bn_t k) {","ed_t t[1 << (EP_WIDTH - 1)], q;","uint8_t win[RLC_FP_BITS + 1];","size_t l;","","ed_null(q);",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","","  if (type == kGenericOptimized) {","    optimized_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),","                         GetTensorShape(output), GetTensorData<float>(output));"],"label":0}
{"cve":"CVE-2023-2006","code_chunks":["\tif (!rxrpc_queue_work(&rxnet->client_conn_reaper))","\t\t_debug(\"destroy: queue failed\");","","\t_leave(\"\");","}","","\/*"],"label":0}
{"cve":"CVE-2021-31255","code_chunks":["ptr->server_entry_count = gf_bs_read_u8(bs);","for (i=0; i<ptr->server_entry_count; i++) {","int j=0;","tmp_strsize=(u32)ptr->size;","while (tmp_strsize) {","ISOM_DECREASE_SIZE(ptr, 1)"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["}","*out = Nonlocal(names, lineno, col_offset, end_lineno, end_col_offset,","arena);","if (*out == NULL) goto failed;","return 0;","}"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\t\telse","\t\t{","\t\t\tStream_Write_UINT8(s, RDP_CODEC_ID_JPEG); \/* codecID *\/","","\t\t\tif (!rdp_write_jpeg_client_capability_container(s, settings))","\t\t\t\treturn FALSE;","\t\t}"],"label":0}
{"cve":"CVE-2021-4173","code_chunks":["    getline_opt_T getline_options;","    int\t\tindent = 2;","    char_u\t*skip_until = NULL;","    int\t\tret = FAIL;","    int\t\tis_heredoc = FALSE;","    int\t\theredoc_concat_len = 0;","    garray_T\theredoc_ga;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","output->type = input->type;","if (IsConstantTensor(axis)) {","int axis_value;"],"label":1}
{"cve":"CVE-2017-14642","code_chunks":["stream.ReadUI32(m_Reserved[2]);","","int name_size = size-(AP4_FULL_ATOM_HEADER_SIZE+20);","if (name_size == 0) return;","char* name = new char[name_size+1];","stream.Read(name, name_size);"],"label":1}
{"cve":"CVE-2016-8649","code_chunks":["\t\t\t      \"initialization (2): %s.\", strerror(errno));","\t\t\tgoto cleanup_error;","\t\t}","","\t\t\/* Wait for the (grand)child to tell us that it's ready to set","\t\t * up its LSM labels.","\t\t *\/"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["}","","\/* NOTE: free'd when events are cleared during closure of mdi *\/","text = malloc(tmp_length + 1);","memcpy(text, event_data, tmp_length);","text[tmp_length] = '\\0';"],"label":1}
{"cve":"CVE-2018-20839","code_chunks":["                return log_error_errno(r, \"Device %s is not a virtual console: %m\", src_vc);","","        r = verify_vc_allocation_byfd(fd);","        if (r < 0)","                return log_error_errno(r, \"Virtual console %s is not allocated: %m\", src_vc);","","        r = vt_verify_kbmode(fd);"],"label":0}
{"cve":"CVE-2023-27114","code_chunks":["}","op->len += n;","}","break;","{","ut32 count = 0, *table = NULL, def = 0;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["accum_scratch_size));","}","node->temporaries->data[4] = op_data->scratch_tensor_index + 4;","TfLiteTensor* zero_points = GetTemporary(context, node, \/*index=*\/4);","zero_points->type = kTfLiteInt32;","zero_points->allocation_type = kTfLiteArenaRw;","int zero_points_dims[1] = {batch_size};"],"label":1}
{"cve":"CVE-2021-3995","code_chunks":["}","","snprintf(uidstr, sizeof(uidstr), \"%lu\", (unsigned long) uid);","return strncmp(user_id, uidstr, sz) == 0;","}",""],"label":1}
{"cve":"CVE-2019-3556","code_chunks":["switch (m_kind) {","for (auto& it : *m_staticCache) {","folly::writeFull(file.fd(), it.first->data(), it.first->size());","folly::writeFull(file.fd(), \"\\n\", 1);","}","break;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["for (int i = 0; i < NumOutputs(node); ++i) {","TfLiteIntArray* output_dims = TfLiteIntArrayCopy(input->dims);","output_dims->data[axis_value] = size_splits_vector.at(i);","TfLiteTensor* output = GetOutput(context, node, i);","TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_dims));","}",""],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["                    PyErr_SetString(PyExc_RuntimeError, \"GeneratorExp field \\\"generators\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(generators, i, val);","            }","            Py_CLEAR(tmp);","        }"],"label":0}
{"cve":"CVE-2020-5210","code_chunks":["if (argv[0][2]) {","if ((i = str2race(&argv[0][2])) >= 0)","flags.initrace = i;","} else if (argc > 1) {","argc--;","argv++;"],"label":1}
{"cve":"CVE-2020-15191","code_chunks":["return nullptr;","}","","auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);","if (!status->status.ok()) {","return nullptr;"],"label":0}
{"cve":"CVE-2023-30186","code_chunks":["\t\t\t\t{","\t\t\t\t\tif (L\"docx\" == _builder_params[0])","\t\t\t\t\t\tbIsNoError = this->CreateFile(AVS_OFFICESTUDIO_FILE_DOCUMENT_DOCX);","\t\t\t\t\telse if (L\"pptx\" == _builder_params[0])","\t\t\t\t\t\tbIsNoError = this->CreateFile(AVS_OFFICESTUDIO_FILE_PRESENTATION_PPTX);","\t\t\t\t\telse if (L\"xlsx\" == _builder_params[0])","\t\t\t\t\t\tbIsNoError = this->CreateFile(AVS_OFFICESTUDIO_FILE_SPREADSHEET_XLSX);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["","\/* If we're just a constant string with no expressions, return","that. *\/","if(state->expr_list.size == 0) {","if (!state->last_str) {","\/* Create a zero length string. *\/","state->last_str = PyUnicode_FromStringAndSize(NULL, 0);"],"label":1}
{"cve":"CVE-2016-5842","code_chunks":["      continue;","    if (length < 7)","      return(MagickFalse);","    id=ReadProfileMSBShort(&p,&length);","    count=(ssize_t) ReadProfileByte(&p,&length);","    if ((count > (ssize_t) length) || (count < 0))","      return(MagickFalse);"],"label":0}
{"cve":"CVE-2022-24792","code_chunks":["goto on_error;","","\/* Read the file header plus fmt header only. *\/","size_read = size_to_read = sizeof(wavehdr) - 8;","status = pj_file_read( fport->fd_list[index], &wavehdr, &size_read);","if (status != PJ_SUCCESS) {","goto on_error;"],"label":1}
{"cve":"PYSEC-2021-391","code_chunks":["","        if (input_dims == 0) {","      context->set_output(0, input);","      return;","    }","","    const gtl::ArraySlice<Tmultiples> multiples_array("],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2020-9383","code_chunks":["current_drive = drive;","}","if (fdc != 1 && fdc != 0) {","pr_info(\"bad fdc value\\n\");","return;","}"],"label":1}
{"cve":"CVE-2018-20180","code_chunks":["x = CVAL(in);","if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;"],"label":1}
{"cve":"CVE-2019-11935","code_chunks":["while (i < replacement.size()) {","int fwd = (int)php_mb_mbchar_bytes_ex(p, enc);","n = -1;","if ((replacement.size() - i) >= 2 && fwd == 1 &&","p[0] == '\\\\' && p[1] >= '0' && p[1] <= '9') {"],"label":1}
{"cve":"CVE-2016-3178","code_chunks":["\t\t\t{","\t\t\t\t\/* Parse and process the packet received *\/","\t\t\t\t\/*printf(\"%.*s\", n, buf);*\/","\t\t\t\ti = ParseSSDPPacket(s_ssdp6, buf, n,","\t\t\t\t                    (struct sockaddr *)&sendername6, searched_device);","\t\t\t\tsyslog(LOG_DEBUG, \"** i=%d deltadev=%d **\", i, deltadev);","\t\t\t\tif(i==0 || (i*deltadev < 0))"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["","void","ClientListener::handleClientConnecting(const Event&, void*)","{","        IDataSocket* socket = m_listen->accept();","","    if (socket == NULL) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","#define TF_LITE_SPACE_TO_DEPTH(type, scalar)                               \\","  tflite::SpaceToDepthParams op_params;                                    \\","  op_params.block_size = params->block_size;                               \\","  type::SpaceToDepth(op_params, GetTensorShape(input),                     \\","                     GetTensorData<scalar>(input), GetTensorShape(output), \\","                     GetTensorData<scalar>(output))"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\twhile (i >= 0 && a[i] == 0) {","\t\ti--;","\t}","","\tif (i > 0) {","\t\treturn (i << RLC_DIG_LOG) + util_bits_dig(a[i]);","\t} else {"],"label":0}
{"cve":"CVE-2018-20181","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"PYSEC-2021-617","code_chunks":["OP_REQUIRES_OK(context, context->input_list(\"stats_summary_list\",","&stats_summary_list));","const int64_t num_buckets = stats_summary_list[0].dim_size(1);","DCHECK_EQ(stats_summary_list[0].dim_size(2), 2);","std::vector<TTypes<float, 3>::ConstTensor> stats_summary;","stats_summary.reserve(stats_summary_list.size());","for (const auto& tensor : stats_summary_list) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["                asdl_seq_SET(posargs, k++, arg);","                i += 1; \/* the name *\/","                if (i < NCH(n) && TYPE(CHILD(n, i)) == COMMA)","                    i += 1; \/* the comma, if present *\/","                break;","                if (i+1 >= NCH(n) ||","                    (i+2 == NCH(n) && (TYPE(CHILD(n, i+1)) == COMMA"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","std::vector<StringRef> words;","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","tflite::StringRef strref = tflite::GetString(input, 0);","int prev_idx = 0;"],"label":0}
{"cve":"CVE-2022-29211","code_chunks":["                errors::InvalidArgument(\"value_range should be a vector.\"));","    OP_REQUIRES(ctx, (value_range_tensor.shape().num_elements() == 2),","                errors::InvalidArgument(","                    \"value_range should be a vector of 2 elements.\"));","    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(nbins_tensor.shape()),","                errors::InvalidArgument(\"nbins should be a scalar.\"));",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      context, GetInputSafe(context, node, kHiddenStateTensor, &hidden_state));","","      auto* params = reinterpret_cast<TfLiteSequenceRNNParams*>(node->builtin_data);","  const bool time_major = params->time_major;","  const int batch_size =","      (time_major) ? input->dims->data[1] : input->dims->data[0];","  const int max_time ="],"label":0}
{"cve":"CVE-2019-13225","code_chunks":["switch (node->type) {","r = compile_bag_memory_node(node, reg, env);","break;","","r = compile_option_node(node, reg, env);","break;"],"label":0}
{"cve":"CVE-2020-1919","code_chunks":["assertx(isStringType(type(file_name)));","strncpy(frame->file_name,","val(file_name).pstr->data(),","std::min(val(file_name).pstr->size(), strobelight::kFileNameMax));","frame->file_name[strobelight::kFileNameMax - 1] = '\\0';","}",""],"label":1}
{"cve":"CVE-2021-46463","code_chunks":["static const njs_value_t  string_constructor = njs_string(\"constructor\");","","if (njs_is_promise(x)) {","ret = njs_value_property(vm, x, njs_value_arg(&string_constructor),","&value);","if (njs_slow_path(ret == NJS_ERROR)) {"],"label":0}
{"cve":"CVE-2020-13396","code_chunks":["{","wStream* s;","int length;","PBYTE StartOffset;","PBYTE PayloadOffset;","NTLM_AV_PAIR* AvTimestamp;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["}","","TF_LITE_ENSURE(context, axis >= 0 && axis < rank);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (output->type) {","case kTfLiteFloat32: {"],"label":1}
{"cve":"CVE-2018-14882","code_chunks":["{","const struct nd_rpl_dio *dio = (const struct nd_rpl_dio *)bp;","const char *dagid_str;","","ND_TCHECK(*dio);","dagid_str = ip6addr_string (ndo, dio->rpl_dagid);"],"label":1}
{"cve":"CVE-2020-5210","code_chunks":["const char *s;","{","int i;","char *tmps = 0;","","for (i = 0; winchoices[i].procs; i++) {"],"label":0}
{"cve":"CVE-2018-12562","code_chunks":["        if (newName) {","            if (!details.isLocalFile()) {","                QString oldMount=mountPoint(oldDetails, false);","                if (!oldMount.isEmpty() && QDir(oldMount).exists()) {","                    ::rmdir(QFile::encodeName(oldMount).constData());","                }","            }"],"label":0}
{"cve":"CVE-2019-20393","code_chunks":["break;","","","{ if (yang_read_extcomplex_str(trg, ext_instance, \"path\", ext_name, s,","0, LY_STMT_PATH)) {","YYABORT;","}"],"label":1}
{"cve":"PYSEC-2022-134","code_chunks":["auto* arg = t->mutable_args(i);","if (arg->type_id() == TFT_VAR) {","const auto* attr = attrs.Find(arg->s());","DCHECK(attr != nullptr);","if (attr->value_case() == AttrValue::kList) {","const auto& attr_list = attr->list();","arg->set_type_id(TFT_PRODUCT);"],"label":1}
{"cve":"CVE-2023-1906","code_chunks":["Convert stripped TIFF image.","*\/","extent=4*MagickMax(image->columns*(samples_per_pixel+extra_samples)*","(image->depth+7)\/8,(size_t) TIFFStripSize(tiff));","strip_pixels=(unsigned char *) AcquireQuantumMemory(extent,","sizeof(*strip_pixels));"],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["static void appendToHeader(HeaderString& header, absl::string_view data);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            body = _Ta3_asdl_seq_new(len, arena);","            if (body == NULL) goto failed;","            for (i = 0; i < len; i++) {","                stmt_ty val;","                res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"CVE-2021-33796","code_chunks":["","else if (obj->type == JS_CREGEXP) {","if (!strcmp(name, \"source\")) {","js_pushliteral(J, obj->u.r.source);","return 1;","}","if (!strcmp(name, \"global\")) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\tfp24_zero(l);","\t\tbn_rec_naf(s, &len, a, 2);","\t\tpp_dbl_k24(r, t[0], t[0], _p[0]);","\t\tfor (j = 1; j < m; j++) {","\t\t\tpp_dbl_k24(l, t[j], t[j], _p[j]);","\t\t\tfp24_mul_dxs(r, r, l);","\t\t}"],"label":0}
{"cve":"CVE-2016-4563","code_chunks":["box_p[5],","box_q[5],","center,","offset,","*path_p,","*path_q;"],"label":1}
{"cve":"CVE-2020-26164","code_chunks":["}","","if (m_socket->bytesAvailable() > 0) {","QMetaObject::invokeMethod(this, \"dataReceived\", Qt::QueuedConnection);","return;","}"],"label":1}
{"cve":"CVE-2022-39244","code_chunks":["    }","","    \/* Don't need to check EOF with PJ_SCAN_CHECK_EOF(s) *\/","    while (pj_cis_match(spec, *s))","\t++s;","","    pj_strset3(out, scanner->curptr, s);"],"label":0}
{"cve":"CVE-2018-8793","code_chunks":["uint32 length;","struct stream packet = *s;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","","if (!s_check_rem(s, length))"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["{","pj_status_t status;","","status = ssl_handshake_channel(ds, RTP_CHANNEL);","if (status != PJ_SUCCESS)","return status;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["          TF_LITE_ENSURE_OK(context, EvalHybridPerChannel<kernel_type>(","                                         context, node, params, data, input,","                                         filter, bias, im2col, output));","        } else {","          TfLiteTensor* accum_scratch =","              &context->tensors[node->temporaries","                                    ->data[data->accum_scratch_index]];"],"label":0}
{"cve":"CVE-2023-34474","code_chunks":["        blob+=22;","        length-=MagickMin(22,(ssize_t) length);","        break;","      }","      {","        if (knot_count == 0)","          {"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {","        expr_ty type;","        identifier name;","        asdl_seq* body;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"comprehension field \\\"ifs\\\" changed size during iteration\");","goto failed;","}"],"label":0}
{"cve":"CVE-2021-3521","code_chunks":["int rc = -1; \/* assume failure *\/","","while (p < pend) {","if (decodePkt(p, (pend - p), &pkt))","break;",""],"label":1}
{"cve":"CVE-2017-7524","code_chunks":["        {","            session->sessionKey.b.size = 0;","        }","        else","        {","                                    bool result = string_bytes_concat_buffer( (TPM2B_MAX_BUFFER *)&key, &( session->authValueBind.b ) );","            if (!result)"],"label":0}
{"cve":"CVE-2019-1010317","code_chunks":["            caf_channel_layout.mChannelLayoutTag = kCAFChannelLayoutTag_UseChannelDescriptions;","            caf_channel_layout.mChannelBitmap = 0;","            caf_channel_layout.mNumberChannelDescriptions = num_channels;","            WavpackNativeToBigEndian (&caf_channel_layout, CAFChannelLayoutFormat);","","            if (!DoWriteFile (outfile, &caf_channel_layout, sizeof (caf_channel_layout), &bcount) ||","                bcount != sizeof (caf_channel_layout))"],"label":0}
{"cve":"PYSEC-2021-546","code_chunks":["CHECK_GE(in.dims(), 2);"],"label":1}
{"cve":"CVE-2017-7500","code_chunks":["break;","}","","if (fn == NULL || lstat(fn, &sb) != 0) {","vfy |= RPMVERIFY_LSTATFAIL;","goto exit;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t          \"SurfaceCommandsCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));","","\tif (Stream_GetRemainingLength(s) < 8)","\t\treturn FALSE;","","\tStream_Read_UINT32(s, cmdFlags); \/* cmdFlags (4 bytes) *\/","\tStream_Read_UINT32(s, reserved); \/* reserved (4 bytes) *\/"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["    }","    *sock = PJ_INVALID_SOCKET;   ","","    \/* Create socket *\/","    af = udp->rtp_addr_name.addr.sa_family;","    status = pj_sock_socket(af, pj_SOCK_DGRAM(), 0, sock);",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  const bool use_layer_norm = op_data->use_layer_norm;","","      const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  const bool is_integer = input->type == kTfLiteInt8;","  TF_LITE_ENSURE(context, input->dims->size > 1);","  const int n_batch = input->dims->data[0];"],"label":0}
{"cve":"CVE-2018-12559","code_chunks":["}","","void RemoteFsDevice::mount()","{","    if (details.isLocalFile()) {","        return;","    }"],"label":0}
{"cve":"CVE-2022-23559","code_chunks":["int embedding_size = 1;","int lookup_size = 1;","for (int i = 0; i < lookup_rank - 1; i++, k++) {","const int dim = dense_shape->data.i32[i];","lookup_size *= dim;","output_shape->data[k] = dim;"],"label":1}
{"cve":"CVE-2017-1000494","code_chunks":["data->portListingLength = 0;","\/* init xmlparser object *\/","parser.xmlstart = buffer;","parser.xmlsize = bufsize;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  switch (input->type) {","    case kTfLiteFloat32: {","      UnpackImpl<float>(context, node, input, data->num, data->axis);","      break;","    }"],"label":0}
{"cve":"CVE-2018-14682","code_chunks":["\tD((\"WARNING; more quickrefs than quickref space\"))","\tqr_entries = 0; \/* but we can live with it *\/","    }","","    if (qr_entries > 0) {","\tL = 0;","\tR = qr_entries - 1;"],"label":0}
{"cve":"CVE-2023-26485","code_chunks":["                    !(CMARK_OPT_HARDBREAKS & options);","","        if (entering) {","    if (node->parent && node->parent->type == CMARK_NODE_ITEM) {","      renderer->in_tight_list_item = node->parent->parent->as.list.tight;","    }","  } else {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteNode* node) {","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input = tflite::GetInput(context, node, kInputTensor);","if (input->type != kTfLiteUInt8) return kTfLiteError;","if (NumElements(input->dims) == 0) return kTfLiteError;",""],"label":1}
{"cve":"CVE-2023-23946","code_chunks":["{","struct dir_iterator_int *iter = xcalloc(1, sizeof(*iter));","struct dir_iterator *dir_iterator = &iter->base;","int saved_errno;","","strbuf_init(&iter->base.path, PATH_MAX);","strbuf_addstr(&iter->base.path, path);"],"label":1}
{"cve":"CVE-2021-3521","code_chunks":["const uint8_t *p = pkts;","const uint8_t *pend = pkts + pktlen;","pgpDigParams digp = NULL;","pgpDigParams selfsig = NULL;","int i = 0;","int alloced = 16; \/* plenty for normal cases *\/"],"label":0}
{"cve":"CVE-2018-20175","code_chunks":["","if (!compress)","{","int y;","bmpdata = (uint8 *) xmalloc(width * height * Bpp);","for (y = 0; y < height; y++)"],"label":1}
{"cve":"CVE-2017-6889","code_chunks":["{","unsigned type, wide, high, i, j, row, col, diff;","ushort huff[1024], vpred[2][2] = {{512,512},{512,512}}, hpred[2];","","fseek (ifp, meta_offset, SEEK_SET);","type = get4();  get4();  get4();"],"label":0}
{"cve":"CVE-2019-15226","code_chunks":["AssertionResult result = AssertionFailure();","for (auto upstream_index : upstream_indices) {","result = fake_upstreams_[upstream_index]->waitForHttpConnection(","*dispatcher_, fake_upstream_connection_, TestUtility::DefaultTimeout,","max_request_headers_kb_);","if (result) {","upstream_with_request = upstream_index;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["            sizeof(int32_t);","    }","","    if (idx >= num_rows || idx < 0) {","      if (output->type == kTfLiteString) {","        buf.AddString(nullptr, 0);","      } else {"],"label":0}
{"cve":"CVE-2016-4817","code_chunks":[],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT32 railSupportLevel;","","if (length < 8)","return FALSE;","","Stream_Read_UINT32(s, railSupportLevel); \/* railSupportLevel (4 bytes) *\/"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["","cf.cf_flags = flags | PyCF_SOURCE_IS_UTF8;","","if (flags &","~(PyCF_MASK | PyCF_MASK_OBSOLETE | PyCF_DONT_IMPLY_DEDENT | PyCF_ONLY_AST))","{"],"label":1}
{"cve":"CVE-2019-20636","code_chunks":["*\/","if (test_bit(EV_KEY, dev->evbit) &&","!is_event_supported(old_keycode, dev->keybit, KEY_MAX) &&","__test_and_clear_bit(old_keycode, dev->key)) {","struct input_value vals[] =  {","{ EV_KEY, old_keycode, 0 },"],"label":1}
{"cve":"CVE-2017-9608","code_chunks":["if (dctx->remaining <= 0)","return dctx->remaining;","}","if (buf_size - i >= dctx->remaining && (!dctx->interlaced || dctx->cur_field)) {","int remaining = dctx->remaining;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["tok->done = E_EOLS;","}","tok->cur = tok->inp;","return ERRORTOKEN;","}","if (quote_size == 1 && c == '\\n') {"],"label":1}
{"cve":"CVE-2020-15121","code_chunks":["","\tif (len) {","\t\t*len = 0;","\t}","\tif (pipe (sh_in)) {","\t\treturn false;","\t}"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["    int is_async;","","    if (_PyObject_LookupAttrId(obj, &PyId_target, &tmp) < 0) {","        return 1;","    }","    if (tmp == NULL) {","        PyErr_SetString(PyExc_TypeError, \"required field \\\"target\\\" missing from comprehension\");"],"label":0}
{"cve":"CVE-2022-28072","code_chunks":["HexInsn hi = {0};","ut32 data = 0;","if (len < 4) {","return 0;","}","data = r_read_le32 (buf);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","node->temporaries->data[kFwHiddenStateQuantized] =","op_data->scratch_tensor_index + kFwHiddenStateQuantized;","TfLiteTensor* fw_hidden_state_quantized =","GetTemporary(context, node, kFwHiddenStateQuantized);"],"label":1}
{"cve":"CVE-2022-45909","code_chunks":["su_home_t* home = theOneAndOnlyController->getHome() ;","char *s ;","char buf[MAX_SIP_URI_LEN];","char obuf[MAX_SIP_URI_LEN] ;","char hp[64] ;","char const *display = NULL;"],"label":0}
{"cve":"CVE-2020-5238","code_chunks":["0,  0,  0,   0,","};","yych = *p;","if (yybm[0 + yych] & 64) {","goto yy22;","}"],"label":0}
{"cve":"CVE-2023-23457","code_chunks":["    e_machine = Elf64_Ehdr::EM_PPC64;","    ei_class  = Elf64_Ehdr::ELFCLASS64;","    ei_data   = Elf64_Ehdr::ELFDATA2MSB;","    ei_osabi  = Elf32_Ehdr::ELFOSABI_LINUX;","}","","PackLinuxElf64ppcle::~PackLinuxElf64ppcle()"],"label":0}
{"cve":"CVE-2018-14357","code_chunks":["mutt_str_strfcpy(buf, \"mailboxes \\\"\", sizeof(buf));","mutt_account_tourl(&idata->conn->account, &url);","\/* escape \\ and \" *\/","imap_quote_string(errstr, sizeof(errstr), list.name);","url.path = errstr + 1;","url.path[strlen(url.path) - 1] = '\\0';","if (mutt_str_strcmp(url.user, ImapUser) == 0)"],"label":1}
{"cve":"CVE-2018-8800","code_chunks":["int i;","uint16 num_updates;","","in_uint16_le(s, num_updates);   \/* rectangles *\/","","for (i = 0; i < num_updates; i++)"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":[],"label":1}
{"cve":"CVE-2019-11502","code_chunks":["\t\t\t{\"\/run\/media\", true, \"\/media\"},\t#else","\t\t\t{\"\/media\", true},\t#endif\t\t\t\t\t\t\t{\"\/run\/netns\", true},\t\t\t\t\t\t\t\t\t\t\t\t\t{\"\/mnt\",.is_optional = true},\t\t\t\t{\"\/var\/lib\/extrausers\",.is_optional = true},\t\t\t\t{},","\t\t};","\t\tchar rootfs_dir[PATH_MAX] = { 0 };","\t\tsc_must_snprintf(rootfs_dir, sizeof rootfs_dir,","\t\t\t\t \"%s\/%s\/current\/\", SNAP_MOUNT_DIR,","\t\t\t\t base_snap_name);"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["CephContext *cct, KeyStore *keys,","bufferlist& authorizer_data, bufferlist& authorizer_reply,","EntityName& entity_name, uint64_t& global_id, AuthCapsInfo& caps_info,","CryptoKey& session_key,","uint64_t *auid,","std::unique_ptr<AuthAuthorizerChallenge> *challenge)"],"label":0}
{"cve":"CVE-2022-1934","code_chunks":["  if (result) {\\","    SET_TRUE_VALUE(regs[a]);\\","  }\\","  else {\\","    SET_FALSE_VALUE(regs[a]);\\","  }\\","} while(0)"],"label":0}
{"cve":"CVE-2021-30014","code_chunks":["si->intra_slice_allowed_flag = gf_bs_read_int_log(bs, 1, \"intra_slice_allowed_flag\");","","pps_id = gf_bs_read_ue_log(bs, \"pps_id\");","if (pps_id >= 64)","return -1;","si->pps = &vvc->pps[pps_id];","si->sps = &vvc->sps[si->pps->sps_id];"],"label":1}
{"cve":"CVE-2019-17178","code_chunks":["{","int allocSize = sizeof(REGION16_DATA) + (finalNbRects * sizeof(RECTANGLE_16));","region->data = realloc(region->data, allocSize);","","if (!region->data)","{"],"label":1}
{"cve":"CVE-2023-32233","code_chunks":["\t\treturn &nft_objref_map_ops;","\telse if (tb[NFTA_OBJREF_IMM_NAME] &&","\t\t tb[NFTA_OBJREF_IMM_TYPE])","\t\treturn &nft_objref_ops;","","\treturn ERR_PTR(-EOPNOTSUPP);","}"],"label":0}
{"cve":"CVE-2017-10911","code_chunks":["\t\tgoto failed_init;","","\treturn rc;","}","","module_init(xen_blkif_init);",""],"label":0}
{"cve":"CVE-2016-5418","code_chunks":["cleanup_pathname_win(a);","#endif","\/* Skip leading '\/'. *\/","if (*src == '\/') {","if (a->flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS) {","archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2022-93","code_chunks":["          new uint16[height * width * decode.channels]);","      OP_REQUIRES(","          context,","          png::CommonFinishDecode(reinterpret_cast<png_bytep>(buffer.get()),","                                  decode.channels * width * sizeof(uint16),","                                  &decode),","          errors::InvalidArgument(\"Invalid PNG data, size \", input.size()));"],"label":0}
{"cve":"CVE-2022-4399","code_chunks":["\t\/* edit the note *\/","\tr = edit_stdin(name, date, text,1);","","\t\/* free the result *\/","\tdb_result_free(result);","","\treturn r;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus EvalHybrid(TfLiteContext* context, TfLiteNode* node,","                        TfLiteConvParams* params, OpData* data,","                        const TfLiteTensor* input, const TfLiteTensor* filter,","                        const TfLiteTensor* bias, TfLiteTensor* im2col,","                        TfLiteTensor* accum_scratch, TfLiteTensor* output) {","  float output_activation_min, output_activation_max;","  CalculateActivationRange(params->activation, &output_activation_min,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* key = GetInput(context, node, 1);","const TfLiteTensor* value = GetInput(context, node, 2);","","const int num_rows = SizeOfDimension(value, 0);","const int row_bytes = value->bytes \/ num_rows;"],"label":1}
{"cve":"CVE-2023-25136","code_chunks":["compat_cipher_proposal(struct ssh *ssh, char *cipher_prop)","{","if (!(ssh->compat & SSH_BUG_BIGENDIANAES))","return cipher_prop;","debug2_f(\"original cipher proposal: %s\", cipher_prop);","if ((cipher_prop = match_filter_denylist(cipher_prop, \"aes*\")) == NULL)","fatal(\"match_filter_denylist failed\");"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["                res = obj2ast_comprehension(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"SetComp field \\\"generators\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(generators, i, val);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["GetTensorData<int>(fft_integer_working_area);","","TfLiteTensor* fft_double_working_area =","GetTemporary(context, node, kFftDoubleWorkingAreaTensor);","double* fft_double_working_area_data = reinterpret_cast<double*>(","GetTensorData<int64_t>(fft_double_working_area));"],"label":1}
{"cve":"CVE-2021-29463","code_chunks":["DataBuf chunkId(WEBP_TAG_SIZE+1);","chunkId.pData_ [WEBP_TAG_SIZE] = '\\0';","","io_->read(data, WEBP_TAG_SIZE * 3);","uint64_t filesize = Exiv2::getULong(data + WEBP_TAG_SIZE, littleEndian);","","\/* Set up header *\/"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        }","        else {","            int res;","            res = obj2ast_expr(tmp, &body, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }"],"label":0}
{"cve":"CVE-2016-5351","code_chunks":["{","    const UCHAR *addr;","    guint bodyLength;","    PAIRPDCAP_SEC_ASSOCIATION sta_sa;","    PAIRPDCAP_SEC_ASSOCIATION sa;","    guint offset = 0;","    const guint8 dot1x_header[] = {"],"label":0}
{"cve":"CVE-2016-5352","code_chunks":["}","}","","if (key_bytes_len < GROUP_KEY_MIN_LEN || key_bytes_len > eapol_len - sizeof(EAPOL_RSN_KEY)) {","return AIRPDCAP_RET_NO_VALID_HANDSHAKE;","}",""],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["op->txt = r_str_newf (\"%s %d\", opdef->txt, op->val);","}","op->len += n;","}","break;","{"],"label":1}
{"cve":"CVE-2020-14401","code_chunks":["        pmsg.type = rfbPalmVNCReSizeFrameBuffer;","        pmsg.pad1 = 0;","        pmsg.desktop_w = Swap16IfLE(cl->screen->width);","        pmsg.desktop_h = Swap16IfLE(cl->screen->height);","        pmsg.buffer_w  = Swap16IfLE(cl->scaledScreen->width);","        pmsg.buffer_h  = Swap16IfLE(cl->scaledScreen->height);","        pmsg.pad2 = 0;"],"label":0}
{"cve":"CVE-2019-9917","code_chunks":["void CIRCNetwork::SetEncoding(const CString& s) {","m_sEncoding = CZNC::Get().FixupEncoding(s);","if (GetIRCSock()) {","GetIRCSock()->SetEncoding(m_sEncoding);","}","}"],"label":0}
{"cve":"PYSEC-2021-845","code_chunks":["OP_REQUIRES_ASYNC(","context, input.dim_size(ndims - 2) == n,","errors::InvalidArgument(\"Input matrices must be squares, got\",","input.dim_size(ndims - 2), \" != \", n),","done);","OP_REQUIRES_ASYNC(context, rhs.dim_size(ndims - 2) == n,"],"label":1}
{"cve":"CVE-2020-15888","code_chunks":["CallInfo *ci = next_ci(L);","checkstackp(L, LUA_MINSTACK, func);  \/* ensure minimum stack size *\/","ci->nresults = nresults;","ci->callstatus = CIST_C;","ci->top = L->top + LUA_MINSTACK;"],"label":1}
{"cve":"PYSEC-2022-71","code_chunks":["    } else {","      OP_REQUIRES(","          context, start >= limit,","          errors::InvalidArgument(","              \"Requires start >= limit when delta < 0: \", start, \"\/\", limit));","    }","    auto size_auto = (std::is_integral<T>::value"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\tep_t t[1 << (EP_WIDTH - 2)];","\tbn_t _k, n;","\tsize_t l;","","\tbn_null(n);","\tbn_null(_k);",""],"label":0}
{"cve":"CVE-2018-10538","code_chunks":["DFFChunkHeader dff_chunk_header;","uint32_t bcount;","","infilesize = DoGetFileSize (infile);","memcpy (&dff_file_header, fourcc, 4);",""],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["}","bool ms_verify_authorizer(Connection *con, int peer_type, int protocol,","bufferlist& authorizer, bufferlist& authorizer_reply,","bool& isvalid, CryptoKey& session_key) override {","isvalid = true;","return true;","}"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["ConnectionSecurityLevel security_level) const","{","if (security_level != ConnectionSecurityLevel::PLAINTEXT) {","SecureSocket* secureSocket = new SecureSocket(m_events, m_socketMultiplexer, family,","security_level);","secureSocket->initSsl (false);"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["BYTE pad1;","UINT16 pad2;","WLog_INFO(TAG, \"BitmapCacheHostSupportCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 8)","return FALSE;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* filter = GetInput(context, node, 1);","","TF_LITE_ENSURE_EQ(context, input->dims->size, 4);","TF_LITE_ENSURE_EQ(context, filter->dims->size, 4);"],"label":1}
{"cve":"PYSEC-2022-74","code_chunks":["const protobuf::RepeatedPtrField<OpDef::AttrDef>& a2) {","std::unordered_map<string, const OpDef::AttrDef*> a1_set;","for (const OpDef::AttrDef& def : a1) {","DCHECK(a1_set.find(def.name()) == a1_set.end())","<< \"AttrDef names must be unique, but '\" << def.name()","<< \"' appears more than once\";"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);","output->type = input2->type;"],"label":1}
{"cve":"CVE-2020-6016","code_chunks":["#define DECODE_ERROR( ... ) do { \\","ConnectionState_ProblemDetectedLocally( k_ESteamNetConnectionEnd_Misc_InternalError, __VA_ARGS__ ); \\","return false; } while(false)","","#define EXPECT_BYTES(n,pszWhatFor) \\","do { \\"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["            args.check_client_certificates = false;","        } else {","            LOG((CLOG_PRINT \"%s: unrecognized option `%s'\" BYE, args.m_exename.c_str(), argv[i], args.m_exename.c_str()));","            return false;","        }","    }",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["                                          &cond_tensor));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","","  if (cond_tensor->type != kTfLiteBool) {","    context->ReportError(context,"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* indices = GetInput(context, node, kIndices);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","const float epsilon = 1e-6f;","if (output->type == kTfLiteFloat32) {"],"label":1}
{"cve":"CVE-2018-13304","code_chunks":["s->avctx->has_b_frames = !s->low_delay;","","if (s->studio_profile) {","av_assert0(s->avctx->profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO);","if (!s->avctx->bits_per_raw_sample) {","av_log(s->avctx, AV_LOG_ERROR, \"Missing VOL header\\n\");","return AVERROR_INVALIDDATA;"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["break;","","","{ if (yang_read_extcomplex_str(trg, ext_instance, \"default\", ext_name, s,","0, LY_STMT_DEFAULT)) {","YYABORT;","}"],"label":1}
{"cve":"CVE-2018-20847","code_chunks":["\tpi[pino].poc.prg = tcp->prg;","","    if(!(cp->m_specific_param.m_enc.m_tp_on && ((!OPJ_IS_CINEMA(cp->rsiz) && (t2_mode == FINAL_PASS)) || OPJ_IS_CINEMA(cp->rsiz)))){","\t\tpi[pino].poc.resno0 = tcp->resS;","\t\tpi[pino].poc.resno1 = tcp->resE;","\t\tpi[pino].poc.compno0 = tcp->compS;","\t\tpi[pino].poc.compno1 = tcp->compE;"],"label":0}
{"cve":"CVE-2017-7524","code_chunks":["}","else","{","rval = tpm_kdfa(sapi_context, session->authHash, &(key.b), label, &( session->nonceNewer.b ),","&( session->nonceOlder.b ), bytes * 8, (TPM2B_MAX_BUFFER *)&( session->sessionKey ) );","}",""],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["\t\t\t\t\t}","\t\t\t\t}","\t\t\t\top->len += n;","\t\t\t}","\t\t\tbreak;","\t\t\t{","\t\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &op->val);"],"label":0}
{"cve":"CVE-2021-32055","code_chunks":["while (!*(iter->substr_cur))","iter->substr_cur++;","iter->substr_end = strchr(iter->substr_cur, ',');","if (!iter->substr_end)","iter->substr_end = iter->eostr;","else"],"label":1}
{"cve":"CVE-2021-37671","code_chunks":["if (tuple[index].has_value()) {","return errors::InvalidArgument(","\"The tensor for index '\", index, \"' for key '\", key.scalar<int64>()(),","\"' was already initialized '\", dtypes_.size(), \"'.\");","}",""],"label":0}
{"cve":"CVE-2021-23521","code_chunks":["for (auto& entryName : entryNames)","{","auto& block = blocks.getReference (entryName);","MemoryOutputStream mo (block, false);","mo << entryName;","mo.flush();"],"label":1}
{"cve":"CVE-2016-9843","code_chunks":["DOBIG4;","len -= 4;","}","buf4++;","buf = (const unsigned char FAR *)buf4;","","if (len) do {"],"label":1}
{"cve":"CVE-2017-1000249","code_chunks":["type == NT_GNU_BUILD_ID && (descsz >= 4 && descsz <= 20)) {","uint8_t desc[20];","const char *btype;","uint32_t i;","*flags |= FLAGS_DID_BUILD_ID;","switch (descsz) {"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["            num = num_stmts(ch);","            if (num == 1) {","                \/* small_stmt or compound_stmt with only one child *\/","                s = ast_for_stmt(c, ch);","                if (!s)","                    return NULL;","                asdl_seq_SET(seq, pos++, s);"],"label":0}
{"cve":"PYSEC-2019-234","code_chunks":["const int64 inner_dim_size,","const int64 output_outer_dim_size,","const Index* segment_ids,","const T* input, T* output) {","const int64 input_total_size = input_outer_dim_size * inner_dim_size;","for (int64 input_index : GpuGridRangeX(input_total_size)) {"],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["      OP2U(SLJIT_SUB | SLJIT_SET_Z, TMP1, 0, SLJIT_IMM, (sljit_sw)(CHAR_GRAVE_ACCENT - charoffset));","      OP_FLAGS(SLJIT_OR, TMP2, 0, SLJIT_EQUAL);","","      SET_CHAR_OFFSET(0xa0);","      OP2U(SLJIT_SUB | SLJIT_SET_LESS_EQUAL, TMP1, 0, SLJIT_IMM, (sljit_sw)(0xd7ff - charoffset));","      OP_FLAGS(SLJIT_OR, TMP2, 0, SLJIT_LESS_EQUAL);","      SET_CHAR_OFFSET(0);"],"label":0}
{"cve":"CVE-2023-39354","code_chunks":["\t}","","\tStream_Read_UINT8(s, context->ColorLossLevel);         \/* ColorLossLevel (1 byte) *\/","\tStream_Read_UINT8(s, context->ChromaSubsamplingLevel); \/* ChromaSubsamplingLevel (1 byte) *\/","\tStream_Seek(s, 2);                                     \/* Reserved (2 bytes) *\/","\tcontext->Planes = Stream_Pointer(s);","\tcontext->PlanesSize = total;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["for (int i = 0; i < node->outputs->size; ++i) {","TfLiteTensor* output = GetOutput(context, node, i);","TfLiteTensor* subgraph_output =","active_branch_subgraph.tensor(active_branch_subgraph.outputs()[i]);","TfLiteIntArray* output_size = TfLiteIntArrayCopy(subgraph_output->dims);","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\tep2_set_infty(r);","\t\t\tfor (i = l - 1; i >= 0; i--) {","\t\t\t\tep2_dbl(r, r);","\t\t\t\tfor (j = 0; j < n; j++) {","\t\t\t\t\tfor (m = 0; m < 4; m++) {","\t\t\t\t\t\tif (naf[(4*j + m)*len + i] > 0) {","\t\t\t\t\t\t\tep2_add(r, r, _p[4*j + m]);"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["while (numberCapabilities > 0)","{","size_t rest;","wStream sub;","if (!rdp_read_capability_set_header(s, &length, &type))","return FALSE;"],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["static void parse_connection_info(pj_scanner *scanner, pjmedia_sdp_conn *conn,","\t\t\t\t  volatile parse_context *ctx)","{","    ctx->last_error = PJMEDIA_SDP_EINCONN;","","    \/* c= *\/","    pj_scan_advance_n(scanner, 2, SKIP_WS);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["    identifier asname;","","    if (_PyObject_LookupAttrId(obj, &PyId_name, &tmp) < 0) {","        return 1;","    }","    if (tmp == NULL) {","        PyErr_SetString(PyExc_TypeError, \"required field \\\"name\\\" missing from alias\");"],"label":0}
{"cve":"CVE-2021-46822","code_chunks":["      else if (IsExtRGB(cinfo->in_color_space))","        source->pub.get_pixel_rows = get_gray_rgb_row;","      else if (cinfo->in_color_space == JCS_CMYK)","        source->pub.get_pixel_rows = get_gray_cmyk_row;","      else","        ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);","    }"],"label":0}
{"cve":"PYSEC-2022-125","code_chunks":["      } else {","        context->ReportError(context,","                             \"Unhandled fully-connected weights format\");","        return kTfLiteError;","      }","      if (params->weights_format == kTfLiteFullyConnectedWeightsFormatDefault) {","        return EvalQuantized<kernel_type>(context, node, params, data, input,"],"label":0}
{"cve":"CVE-2017-11462","code_chunks":["        (memcmp((o1)->elements, (o2)->elements, (o2)->length) == 0))","","\t    \/* Ensure we're returning correct creds format *\/","\t    if ((temp_ret_flags & GSS_C_DELEG_FLAG) &&","\t\ttmp_d_cred != GSS_C_NO_CREDENTIAL) {","\t\tpublic_mech = gssint_get_public_oid(selected_mech);","\t\tif (actual_mech != GSS_C_NO_OID &&"],"label":0}
{"cve":"CVE-2020-9433","code_chunks":["#if OPENSSL_VERSION_NUMBER > 0x10002000L","{\"check_host\",  openssl_x509_check_host},","{\"check_email\", openssl_x509_check_email},","{\"check_ip_asc\", openssl_x509_check_ip_asc},","#endif","{\"pubkey\",      openssl_x509_public_key},","{\"version\",     openssl_x509_version},"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                type_ignore_ty val;","                res = obj2ast_type_ignore(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"Module field \\\"type_ignores\\\" changed size during iteration\");","                    goto failed;","                }"],"label":0}
{"cve":"PYSEC-2021-614","code_chunks":["      *graph, nullptr,","      [nodes, constant_control_deps, shape_replacement_map,","       &internal_node_inserted, &opts](Node* n) {","        ConsiderConstantFoldableNode(n, opts, nodes, constant_control_deps,","                                     shape_replacement_map,","                                     &internal_node_inserted);","      },"],"label":0}
{"cve":"PYSEC-2022-139","code_chunks":["int64_t count = CalculateTensorElementCount(tensor, found_unknown_shapes);","int size = DataTypeSize(BaseType(tensor.dtype()));","VLOG(2) << \"Count: \" << count << \" DataTypeSize: \" << size;","return count * size;","}","","int64_t OpLevelCostEstimator::CalculateInputSize(const OpInfo& op_info,"],"label":1}
{"cve":"CVE-2017-14640","code_chunks":["AP4_AtomSampleTable::GetNearestSyncSampleIndex(AP4_Ordinal sample_index, bool before)","{","        if (m_StssAtom == NULL) return sample_index;","    ","    sample_index += 1;     AP4_Cardinal entry_count = m_StssAtom->GetEntries().ItemCount();","    if (before) {","        AP4_Ordinal cursor = 0;    "],"label":0}
{"cve":"CVE-2015-8631","code_chunks":["{","static generic_ret              ret;","char                            *prime_arg;","gss_buffer_desc                 client_name,","service_name;"],"label":1}
{"cve":"CVE-2022-1383","code_chunks":["break;","}","seg->name = str_dup_safe_fixed (b, cursor, 16, end);","cursor += 16;","if (!seg->name) {","continue;"],"label":1}
{"cve":"PYSEC-2020-317","code_chunks":["kStdDevsInsideBoundsToUseRandnSampler](int start_batch,","int limit_batch) {","random::PhiloxRandom gen_copy = gen;","gen_copy.Skip(start_batch * 2 * kMaxIterations * (samples_per_batch + 3) \/","4);"],"label":1}
{"cve":"CVE-2020-35538","code_chunks":["JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail)","\/* 2:1 vertical sampling case: may need a spare row. *\/","{","my_merged_upsample_ptr upsample = (my_merged_upsample_ptr)cinfo->upsample;","JSAMPROW work_ptrs[2];","JDIMENSION num_rows;          \/* number of rows returned to caller *\/",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["          (spectrogram_sample * spectrogram_channels);","      std::vector<double> mfcc_input(sample_data,","                                     sample_data + spectrogram_channels);","      std::vector<double> mfcc_output;","      mfcc.Compute(mfcc_input, &mfcc_output);","      TF_LITE_ENSURE_EQ(context, params->dct_coefficient_count,","                        mfcc_output.size());"],"label":0}
{"cve":"CVE-2016-4564","code_chunks":["  points[0].x=(double) (cosine*start.x\/radii.x+sine*start.y\/radii.x);","  points[0].y=(double) (cosine*start.y\/radii.y-sine*start.x\/radii.y);","  points[1].x=(double) (cosine*end.x\/radii.x+sine*end.y\/radii.x);","  points[1].y=(double) (cosine*end.y\/radii.y-sine*end.x\/radii.y);","  alpha=points[1].x-points[0].x;","  beta=points[1].y-points[0].y;","  factor=PerceptibleReciprocal(alpha*alpha+beta*beta)-0.25;"],"label":0}
{"cve":"CVE-2022-29226","code_chunks":["endpoint->mutable_timeout()->set_seconds(1);","p.mutable_redirect_path_matcher()->mutable_path()->set_exact(TEST_CALLBACK);","p.mutable_signout_path()->mutable_path()->set_exact(\"\/_signout\");","p.set_forward_bearer_token(true);","p.add_auth_scopes(\"user\");","p.add_auth_scopes(\"openid\");","p.add_auth_scopes(\"email\");"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2018-20179","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"CVE-2018-8786","code_chunks":["BITMAP_DATA* newdata;","count = bitmapUpdate->number * 2;","newdata = (BITMAP_DATA*) realloc(bitmapUpdate->rectangles,","sizeof(BITMAP_DATA) * count);","","if (!newdata)"],"label":1}
{"cve":"CVE-2022-36879","code_chunks":["int i;","","if (*num_pols == 0 || !pols[0]) {","*num_pols = 0;","*num_xfrms = 0;","return 0;","}"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2018-13304","code_chunks":["}","","static const AVOption mpeg4_options[] = {","    {\"quarter_sample\", \"1\/4 subpel MC\", offsetof(MpegEncContext, quarter_sample), AV_OPT_TYPE_BOOL, {.i64 = 0}, 0, 1, 0},","    {\"divx_packed\", \"divx style packed b frames\", offsetof(MpegEncContext, divx_packed), AV_OPT_TYPE_BOOL, {.i64 = 0}, 0, 1, 0},","    {NULL}","};"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["                    GetInputSafe(context, node, kInputTensor1, &input1));","  const TfLiteTensor* input2;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor2, &input2));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const std::vector<float>& scores, std::vector<int>* selected,","int max_detections) {","const TfLiteTensor* input_box_encodings;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorBoxEncodings,","&input_box_encodings));"],"label":0}
{"cve":"CVE-2022-1381","code_chunks":["{","if (eap->cmd > cmd_start)","{","mch_memmove(cmd_start - 5, cmd_start, eap->cmd - cmd_start);","eap->cmd -= 5;","mch_memmove(eap->cmd - 1, \":'<,'>\", 6);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["node->temporaries = TfLiteIntArrayCreate(1);","node->temporaries->data[0] = op_data->cache_tensor_id;","","TfLiteTensor* dequantized = GetTemporary(context, node, \/*index=*\/0);","dequantized->type = op_context.ref->type;","dequantized->allocation_type = kTfLiteDynamic;",""],"label":1}
{"cve":"CVE-2022-47933","code_chunks":["if (!ctx->browser_context) {","if (has_ipfs_scheme) {","ctx->blocked_by = brave::kOtherBlocked;","}","return net::OK;","}"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"Dict field \\\"keys\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(keys, i, val);","            }"],"label":0}
{"cve":"CVE-2020-8037","code_chunks":["* contents.","*\/","for (s = p, t = b, i = length; i > 0 && ND_TTEST(*s); i--) {","c = *s++;","if (c == 0x7d) {","if (i <= 1 || !ND_TTEST(*s))"],"label":1}
{"cve":"PYSEC-2020-284","code_chunks":["","void Compute(OpKernelContext* ctx) override {","const Tensor& val = ctx->input(0);","int64 id = ctx->session_state()->GetNewId();","TensorStore::TensorAndKey tk{val, id, requested_device()};","OP_REQUIRES_OK(ctx, ctx->tensor_store()->AddTensor(name(), tk));",""],"label":1}
{"cve":"PYSEC-2021-160","code_chunks":["    OP_REQUIRES_OK(context, SparseTensor::Create(*input_indices, *input_values,","                                                 tensor_input_shape, std_order,","                                                 &input_st));","","    const int64 N = input_shape_vec(0);","","    Tensor sparse_handles(DT_INT64, TensorShape({N}));"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const float soft_nms_sigma = *GetTensorData<float>(input_sigma);","if (soft_nms_sigma < 0) {","context->ReportError(context, \"Invalid sigma value for soft NMS: %f\","],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["Status WithErrorSourcePayload(Status error) {","  core::platform::ErrorSourceProto error_source_proto;","  error_source_proto.set_error_source(","      core::platform::ErrorSourceProto::EAGER_REMOTE_MGR);","  error.SetPayload(tensorflow::kErrorSource,","                   absl::Cord(error_source_proto.SerializeAsString()));","  return error;"],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["\t\t\t\t\t\tPCX_PackPixels(BlindGetPixelColor(x,y).rgbGreen,c,n,buffer);","\t\t\t\t\telse if (p==2)","\t\t\t\t\t\tPCX_PackPixels(BlindGetPixelColor(x,y).rgbBlue,c,n,buffer);","#if CXIMAGE_SUPPORT_ALPHA","\t\t\t\t\telse if (p==3)","\t\t\t\t\t\tPCX_PackPixels(BlindAlphaGet(x,y),c,n,buffer);","#endif \t\t\t\t}"],"label":0}
{"cve":"CVE-2019-3556","code_chunks":["}","","count = (BF_word)1 << ((setting[4] - '0') * 10 + (setting[5] - '0'));","if (count < min || BF_decode(data.binary.salt, &setting[7], 16)) {","__set_errno(EINVAL);","return NULL;","}"],"label":1}
{"cve":"CVE-2022-0676","code_chunks":["\tsize_t mc = R_MIN (hdr->mappingCount, n_maps);","\tut64 offset = va2pa (hdr->accelerateInfoAddr, mc, maps, cache_buf, 0, NULL, NULL);","\tif (!offset) {","\t\treturn NULL;","\t}","","\tut64 size = sizeof (cache_accel_t);"],"label":0}
{"cve":"CVE-2021-36080","code_chunks":["        return error;                                                         \\","      }                                                                       \\","    error = dwg_encode_##token##_private (dat, hdl_dat, str_dat, obj);        \\","    if (error & DWG_ERR_VALUEOUTOFBOUNDS && hdl_dat != dat                    \\","        && hdl_dat->chain != dat->chain)                                      \\","      bit_chain_free (hdl_dat);                                               \\","    return error;                                                             \\"],"label":0}
{"cve":"CVE-2022-24754","code_chunks":["const pj_str_t AKAv2_Passwd = { \"http-digest-akav2-password\", 26 };","pj_uint8_t hmac_digest[16];","char tmp_buf[48];","int hmac64_len;","","resikck.slen = PJSIP_AKA_RESLEN + PJSIP_AKA_IKLEN + PJSIP_AKA_CKLEN;"],"label":1}
{"cve":"CVE-2022-39209","code_chunks":["int cmark_inline_parser_in_bracket(cmark_inline_parser *parser, int image) {","for (bracket *b = parser->last_bracket; b; b = b->previous)","if (b->active && b->image == (image != 0))","return 1;","return 0;","}"],"label":1}
{"cve":"PYSEC-2021-827","code_chunks":["\/*group_size*\/ c->input(1),","\/*group_key*\/ c->input(2),","\/*instance_key*\/ c->input(3)),","done);","col_params->instance.shape = c->input(0).shape();","col_params->merge_op = merge_op_.get();","col_params->final_op = final_op_.get();"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["bn_mod(_k, k, n);","","\/* Create table. *\/","for (i = 1; i < (1 << (EP_WIDTH - 1)); i++) {","ep_add(t[i], t[i - 1], q);","}",""],"label":1}
{"cve":"CVE-2022-2134","code_chunks":["database setup in this file.","\"\"\"","","import logging","import os","import random"],"label":1}
{"cve":"CVE-2018-20180","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2022-35971","code_chunks":["OP_REQUIRES(context, min.dim_size(0) == depth,","InvalidArgument(\"min has incorrect size, expected \", depth,","\" was \", min.dim_size(0)));","const Tensor& max = context->input(2);","OP_REQUIRES(context, max.dim_size(0) == depth,","InvalidArgument(\"max has incorrect size, expected \", depth,","\" was \", max.dim_size(0)));"],"label":1}
{"cve":"CVE-2022-29226","code_chunks":["TEST_F(OAuth2Test, OAuthBearerTokenFlowFromHeader) {","Http::TestRequestHeaderMapImpl request_headers{","{Http::Headers::get().Path.get(), \"\/test?role=bearer\"},","{Http::Headers::get().Host.get(), \"traffic.example.com\"},","{Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},"],"label":0}
{"cve":"CVE-2019-20176","code_chunks":["d = listfile(s, NULL);","}","}","if (!d) {","s->name_offset = (size_t) -1;","}"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["","if (profile_result) {","if (!timer->Stop(AsGpuStream(stream))) {","return tsl::Status(port::error::INTERNAL, \"Failed to stop timer\");","}","profile_result->set_algorithm(algo);","profile_result->set_elapsed_time_in_ms(timer->GetElapsedMilliseconds());"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2018-20180","code_chunks":["uint32 length;","struct stream packet = *s;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","","if (!s_check_rem(s, length))"],"label":0}
{"cve":"CVE-2019-20392","code_chunks":["lys_getnext_data(const struct lys_module *mod, const struct lys_node *parent, const char *name, int nam_len,","LYS_NODE type, int getnext_opts, const struct lys_node **ret)","{","const struct lys_node *node;",""],"label":0}
{"cve":"CVE-2020-12887","code_chunks":["    uint8_t    *temp_parsed_uri_query_ptr   = NULL;","    uint8_t     returned_option_counter     = 0;","    uint8_t    *start_ptr = *packet_data_pptr;","    uint16_t    message_left = packet_left_len;","","    if (uri_query_needed_heap == -1) {","        return -1;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["    input_quantized->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {","      TfLiteIntArray* input_quantized_size = TfLiteIntArrayCopy(input->dims);","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_quantized,","                                                       input_quantized_size));","    }","    node->temporaries->data[1] = op_data->scratch_tensor_index + 1;"],"label":0}
{"cve":"CVE-2022-1441","code_chunks":["GF_DIMSScriptTypesBox *p = (GF_DIMSScriptTypesBox *)s;","","p->content_script_types = gf_malloc(sizeof(char) * (s->size+1));","if (!p->content_script_types) return GF_OUT_OF_MEM;","gf_bs_read_data(bs, p->content_script_types, s->size);","p->content_script_types[s->size] = 0;"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["","\/*"," * Like info\/exclude and .gitignore, the attribute information can"," * come from many places."," *"," * (1) .gitattributes file of the same directory;"," * (2) .gitattributes file of the parent directory if (1) does not have"],"label":0}
{"cve":"CVE-2020-9432","code_chunks":["{","const char *email = lua_tostring(L, 2);","lua_pushboolean(L, X509_check_email(cert, email, strlen(email), 0));","}","else","{"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["            WriteChar( 0x1c );","            WriteChar( ( nValue >> 8 ) & 0xFF );","            WriteChar( nValue & 0xFF );","        }","        else         {","            WriteChar( 0x1d );","            WriteChar( ( nValue >> 24 ) & 0xFF );"],"label":0}
{"cve":"PYSEC-2022-69","code_chunks":["","template class FormatConverter<int32_t>;","template class FormatConverter<int8_t>;","template class FormatConverter<float>;","template class FormatConverter<Eigen::half>;","","}"],"label":0}
{"cve":"CVE-2023-51698","code_chunks":["{","\tgdouble page_width, page_height;","","\tcomics_document_get_page_size (EV_DOCUMENT (document), rc->page,","\t\t\t\t       &page_width, &page_height);","","\tif (rc->rotation == 90 || rc->rotation == 270) {"],"label":0}
{"cve":"PYSEC-2021-748","code_chunks":["for (auto& component : element) {","if (DataTypeCanUseMemcpy(component.dtype())) {","const TensorBuffer* buffer = DMAHelper::buffer(&component);","if (buffer) {","total_size += buffer->size();","}"],"label":0}
{"cve":"CVE-2021-39191","code_chunks":["\t\/* variables to hold the values returned in the response *\/","\tchar *issuer = NULL, *target_link_uri = NULL, *login_hint = NULL,","\t\t\t*auth_request_params = NULL, *csrf_cookie, *csrf_query = NULL,","\t\t\t*user = NULL, *path_scopes;","\toidc_provider_t *provider = NULL;","\tchar *error_str = NULL;","\tchar *error_description = NULL;"],"label":0}
{"cve":"CVE-2022-28927","code_chunks":["","for(const RegexMatchConfig &x : rename_array)","{","if(!x.Script.empty() && ext.authorized)","{","script_safe_runner(ext.js_runtime, ext.js_context, [&](qjs::Context &ctx)","{"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["lstm::full::kOutputLayerNormCoefficientsTensor)",": nullptr;","","TfLiteTensor* output = GetOutput(context, node, lstm::full::kOutputTensor);","","TfLiteLSTMParams lstm_params;","lstm_params.activation = params->activation;"],"label":1}
{"cve":"CVE-2021-41220","code_chunks":["\"Unexpected dimensions on input group_size. \"","\"It shoulbe a scalar, got tensor with shape \",","group_size_t.shape().DebugString());","}","if (group_key_t.dims() > 0) {","return errors::InvalidArgument("],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["const String& setSize(int len) {"],"label":1}
{"cve":"CVE-2020-15889","code_chunks":["  psurvival = sweepgen(L, g, &g->allgc, g->survival);","  \/* sweep 'survival' and 'old' *\/","  sweepgen(L, g, psurvival, g->reallyold);","  g->reallyold = g->old;","  g->old = *psurvival;  \/* 'survival' survivals are old now *\/","  g->survival = g->allgc;  \/* all news are survivals *\/",""],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["bool MDSDaemon::ms_verify_authorizer(Connection *con, int peer_type,","int protocol, bufferlist& authorizer_data, bufferlist& authorizer_reply,","bool& is_valid, CryptoKey& session_key)","{","Mutex::Locker l(mds_lock);","if (stopping) {"],"label":1}
{"cve":"CVE-2018-11376","code_chunks":["}","(void)r_buf_read_at (bf->buf, sec->paddr, buf, sec->size);","if (bits == 32) {","for (i = 0; i < sec->size; i += 4) {","ut32 addr32 = r_read_le32 (buf + i);","if (addr32) {","RBinAddr *ba = newEntry (sec->paddr + i, (ut64)addr32, type, bits);"],"label":1}
{"cve":"CVE-2022-42898","code_chunks":["return EINVAL;","}","if (buffer->Offset < header_len ||","buffer->Offset + buffer->cbBufferSize > len) {","krb5_pac_free(context, pac);","return ERANGE;"],"label":1}
{"cve":"CVE-2023-23557","code_chunks":["assert(","from->isProxyObject() &&","\"copyDataPropertiesSlowPath_RJS is only for Proxy\");","","auto cr = JSProxy::getOwnPropertyKeys(","from,"],"label":1}
{"cve":"CVE-2019-17546","code_chunks":["}","if (colorchannels > 1","&& TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 2),","p2, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)","&& img->stoponerr)","{","ret = 0;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","const TfLiteTensor* input_gate_bias =","GetOptionalInputTensor(context, node, kInputGateBiasTensor);","const TfLiteTensor* forget_gate_bias =","GetInput(context, node, kForgetGateBiasTensor);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["    if (NCH(n) == (5)) {","        n = CHILD(n, 4);","    }","    else {","        return n_fors;","    }","    REQ(n, comp_iter);"],"label":0}
{"cve":"CVE-2022-29228","code_chunks":["endpoint->mutable_timeout()->set_seconds(1);","p.mutable_redirect_path_matcher()->mutable_path()->set_exact(TEST_CALLBACK);","p.mutable_signout_path()->mutable_path()->set_exact(\"\/_signout\");","p.set_forward_bearer_token(true);","p.add_auth_scopes(\"user\");","p.add_auth_scopes(\"openid\");","p.add_auth_scopes(\"email\");"],"label":1}
{"cve":"CVE-2018-8798","code_chunks":["","\tif (s == NULL)","\t\treturn False;","","\t\tif (s->p[0] != (BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED))","\t{","\t\tlogger(Protocol, Error,"],"label":0}
{"cve":"CVE-2020-1919","code_chunks":["return true;","}","","raise_warning(\"IV passed is %d bytes long which is longer than the %d \"","\"expected by selected cipher, truncating\", piv.size(),","iv_required_len);","memcpy(iv_new, piv.data(), iv_required_len);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["          context, \"Updates of type '%s' are not supported by scatter_nd.\",","          TfLiteTypeGetName(updates->type));","      return kTfLiteError;","  }","  if (indices->type != shape->type) {","    context->ReportError(context, \"Indices and shape must have the same type.\");","    return kTfLiteError;"],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["s->buf_ptr += len;","} else {","int64_t target_end = s->end_off ? s->end_off : s->filesize;","if ((!s->willclose || s->chunksize < 0) &&","target_end >= 0 && s->off >= target_end)","return AVERROR_EOF;"],"label":1}
{"cve":"CVE-2021-43860","code_chunks":["if (!flatpak_dir_system_helper_call_deploy (self,","child_repo_path ? child_repo_path : \"\",","helper_flags, flatpak_decomposed_get_ref (ref), state->remote_name,","(const char * const *) subpaths,","(const char * const *) opt_previous_ids,","installation ? installation : \"\","],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["  }","","  uint64_t GetWorkspaceSize() const override { return workspace_size_; }","","  tsl::StatusOr<dnn::AlgorithmDesc> ToAlgorithmDesc() const override {","    return MakeAlgorithmDesc();","  }"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TfLiteTensor* output_indexes;","  TF_LITE_ENSURE_OK(","      context, GetOutputSafe(context, node, kOutputIndexes, &output_indexes));","  TfLiteTensor* output_values;","  TF_LITE_ENSURE_OK(","      context, GetOutputSafe(context, node, kOutputValues, &output_values));","    output_indexes->type = kTfLiteInt32;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    TF_LITE_ENSURE_OK(context,","                      GetTemporarySafe(context, node, kAuxInputScalingFactors,","                                       &aux_input_sf));","    aux_input_sf->type = kTfLiteFloat32;","    aux_input_sf->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqualsArray(aux_input_sf->dims, 1, scaling_dims)) {","      TfLiteIntArray* aux_input_sf_size = TfLiteIntArrayCreate(1);"],"label":0}
{"cve":"CVE-2021-32628","code_chunks":["    unsigned char *lp = NULL;   \/* Tail listpack pointer. *\/","","    \/* Get a reference to the tail node listpack. *\/","    if (raxNext(&ri)) {","        lp = ri.data;","        lp_bytes = lpBytes(lp);","    }"],"label":0}
{"cve":"CVE-2021-46225","code_chunks":["      }break;","","      {","         void (*prc1)(int64_t *, int64_t *, DUP(void *, 5)) =","            (void (*)(int64_t *, int64_t *, DUP(void *, 5)))prc;","         prc1(&BegIdx, &EndIdx, ARG(ArgTab, 5));","      }break;"],"label":0}
{"cve":"CVE-2020-11735","code_chunks":["            hash_mode = CRYS_ECPKI_HASH_SHA256_mode;","        }","","        \/* truncate if hash is longer than key size *\/","        if (msgLenInBytes > keysize) {","            msgLenInBytes = keysize;","        }"],"label":0}
{"cve":"CVE-2020-11735","code_chunks":["#endif \/* !FP_ECC || !WOLFSSL_SP_MATH *\/","","#endif \/* !FREESCALE_LTC_ECC && !WOLFSSL_STM32_PKA *\/","","\/** ECC Fixed Point mulmod global","    k        The multiplicand","    G        Base point to multiply"],"label":0}
{"cve":"CVE-2018-15856","code_chunks":["","\/* LHS Keysym. *\/","if (chr(s, '<')) {","while (peek(s) != '>' && !eol(s))","buf_append(s, next(s));","if (!chr(s, '>')) {","scanner_err(s, \"unterminated keysym literal\");"],"label":1}
{"cve":"CVE-2016-5842","code_chunks":["        }","      break; \/* not an attribute, add as a property *\/","    }","#endif","    {","      if (LocaleCompare(\"gamma\",property) == 0)","        {"],"label":0}
{"cve":"CVE-2018-20175","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"CVE-2016-5355","code_chunks":["}","","\/* Make sure we have enough room for the packet *\/","ws_buffer_assure_space(buf, TOSHIBA_MAX_PACKET_LEN);","pd = ws_buffer_start_ptr(buf);","","\/* Calculate the number of hex dump lines, each"],"label":1}
{"cve":"CVE-2023-46728","code_chunks":["section 10    Gopher"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["\/* Push non-terminal *\/","int nt = (x >> 8) + NT_OFFSET;","int arrow = x & ((1<<7)-1);","dfa *d1 = PyGrammar_FindDFA(","ps->p_grammar, nt);","if ((err = push(&ps->p_stack, nt, d1,","arrow, lineno, col_offset,"],"label":1}
{"cve":"CVE-2022-24793","code_chunks":["} else {","unsigned label_len = *p;","","\/* Check that label length is valid *\/","if (pkt+label_len > max)"],"label":1}
{"cve":"CVE-2021-3997","code_chunks":["                return -EINVAL;","","        if (FLAGS_SET(flags, REMOVE_ONLY_DIRECTORIES|REMOVE_SUBVOLUME))","                return -EINVAL;","","        return rm_rf_inner_child(fd, name, -1, flags, NULL, true);","}"],"label":0}
{"cve":"CVE-2017-1000251","code_chunks":["\treturn ptr - data;","}","","static inline int l2cap_command_rej(struct l2cap_conn *conn, struct l2cap_cmd_hdr *cmd, u8 *data)","{","\tstruct l2cap_cmd_rej *rej = (struct l2cap_cmd_rej *) data;",""],"label":0}
{"cve":"CVE-2018-8792","code_chunks":["width * Bpp);","}","ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);","xfree(bmpdata);","continue;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","TfLiteTensor* output_unique_tensor;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, kOutputUniqueTensor,"],"label":0}
{"cve":"CVE-2019-3556","code_chunks":["assertx(key);","assertx(salt);","","char random_salt[12];","if (!*salt) {","memcpy(random_salt,\"$1$\",3);"],"label":0}
{"cve":"CVE-2017-14638","code_chunks":["                atom = AP4_MkidAtom::Create(size_32, stream);","            }","            break;","","            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;","            if (GetContext() == AP4_ATOM_TYPE_EC_3 || GetContext() == AP4_ATOM_TYPE_ENCA) {","                atom = AP4_Dec3Atom::Create(size_32, stream);"],"label":0}
{"cve":"CVE-2017-12476","code_chunks":["inspector.AddField(\"NALU Length Size\", m_NaluLengthSize);","for (unsigned int i=0; i<m_SequenceParameters.ItemCount(); i++) {","inspector.AddField(\"Sequence Parameter\", m_SequenceParameters[i].GetData(), m_SequenceParameters[i].GetDataSize());","}","for (unsigned int i=0; i<m_SequenceParameters.ItemCount(); i++) {","inspector.AddField(\"Picture Parameter\", m_PictureParameters[i].GetData(), m_PictureParameters[i].GetDataSize());"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["void CLASS samsung_load_raw()","{","int row, col, c, i, dir, op[4], len[4];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width> 32768 || raw_height > 32768)      throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const auto* params =","reinterpret_cast<const TfLiteGatherParams*>(node->builtin_data);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* positions;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2022-23572","code_chunks":["const std::vector<ShapeHandle>& input_tensors_as_shapes) {","const auto ret = full_type::SpecializeType(attrs_, op_def);","if (!ret.status().ok()) {","construction_status_ = ret.status();","return;","}"],"label":0}
{"cve":"CVE-2016-10169","code_chunks":["","#ifdef ENABLE_DSD","            return init_dsd_block (wpc, wpmd);","#else","            strcpy (wpc->error_message, \"not configured to handle DSD WavPack files!\");","            return FALSE;","#endif"],"label":0}
{"cve":"CVE-2018-10539","code_chunks":["DS64Chunk ds64_chunk;","uint32_t bcount;","","CLEAR (WaveHeader);","CLEAR (ds64_chunk);","infilesize = DoGetFileSize (infile);"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["notify_fifo_exec(master, script_exit, fifo, fifo->script);","","\/* Now open the fifo *\/","if ((fifo->fd = open(fifo->name, O_RDWR | O_CLOEXEC | O_NONBLOCK)) == -1) {","log_message(LOG_INFO, \"Unable to open %snotify fifo %s - errno %d\", type, fifo->name, errno);","if (fifo->created_fifo) {","unlink(fifo->name);"],"label":1}
{"cve":"CVE-2022-24786","code_chunks":["pjmedia_rtcp_fb_sli sli[])","{","pjmedia_rtcp_fb_common *hdr = (pjmedia_rtcp_fb_common*) buf;","pj_uint8_t *p;","unsigned cnt, i;",""],"label":0}
{"cve":"CVE-2021-21375","code_chunks":["#endif","","\t*offer = neg->neg_local_sdp;","","    } else {","\t\/* We assume that we're in STATE_LOCAL_OFFER.","\t * In this case set the neg_local_sdp as the offer."],"label":0}
{"cve":"CVE-2022-0695","code_chunks":["if (r_buf_size (buf) < sizeof (lmf_header)) {","return false;","}","if (r_buf_fread_at (buf, QNX_HEADER_ADDR, (ut8 *) lmfh, \"iiiiiiiicccciiiicc\", 1) < QNX_HDR_SIZE) {","return false;","}","r_strf_buffer (32);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void bn_make(bn_t a, int digits);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","  auto* data =","      reinterpret_cast<TfLiteAudioMicrofrontendParams*>(node->user_data);","  FrontendReset(data->state);","","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));"],"label":0}
{"cve":"CVE-2022-23568","code_chunks":["      Tensor output_indices = Tensor(DT_INT64, {num_entries, rank - 1});","      Tensor output_values = Tensor(DataTypeToEnum<T>::value, {num_entries});","","      auto output_indices_t = output_indices.matrix<int64_t>();","      auto output_values_t = output_values.vec<T>();","","      for (int i = 0; i < num_entries; ++i) {"],"label":0}
{"cve":"CVE-2016-7514","code_chunks":["for (bit=0; bit < number_bits; bit++)","                {","                  SetPixelIndex(image,(((unsigned char) pixel) &","                    (0x01 << (7-bit))) != 0 ? 0 : 255,q);","                  SetPixelViaPixelInfo(image,image->colormap+(ssize_t)","                    ConstrainColormapIndex(image,GetPixelIndex(image,q),","                      exception),q);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","const TfLiteTensor* bw_input_gate_bias =","GetOptionalInputTensor(context, node, kBwInputGateBiasTensor);","const TfLiteTensor* bw_forget_gate_bias =","GetInput(context, node, kBwForgetGateBiasTensor);"],"label":1}
{"cve":"CVE-2020-1916","code_chunks":["void PCRECache::dump(const std::string& filename) {","std::ofstream out(filename.c_str());","switch (m_kind) {","for (auto& it : *m_staticCache) {","out << it.first->data() << \"\\n\";"],"label":1}
{"cve":"CVE-2016-4562","code_chunks":["\/*","Interpret graphic primitive.","*\/","GetNextToken(q,&q,extent,keyword);","if (*keyword == '\\0')","break;","if (*keyword == '#')"],"label":1}
{"cve":"CVE-2017-3733","code_chunks":["                         * the retry option set.  Otherwise renegotiation may","                         * cause nasty problems in the blocking world","                         *\/","                        s->rwstate = SSL_READING;","                        bio = SSL_get_rbio(s);","                        BIO_clear_retry_flags(bio);","                        BIO_set_retry_read(bio);"],"label":0}
{"cve":"CVE-2021-41202","code_chunks":["    const Tensor& limit_in = context->input(1);","    const Tensor& delta_in = context->input(2);","        OP_REQUIRES(context,","                TensorShapeUtils::IsScalar(start_in.shape()) ||","                    (TensorShapeUtils::IsVector(start_in.shape()) &&","                     start_in.shape().dim_size(0) == 1),","                errors::InvalidArgument(\"start must be a scalar, not shape \","],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["\tret_nor = do_imls_nor();","#endif","","#if defined(CONFIG_CMD_IMLS_NAND)","\tret_nand = do_imls_nand();","#endif",""],"label":0}
{"cve":"CVE-2021-3574","code_chunks":["                  if (status == MagickFalse)","                    ThrowWriterException(ResourceLimitError,","                      \"MemoryAllocationFailed\");","                }","          }","      }","    (void) TIFFGetFieldDefaulted(tiff,TIFFTAG_FILLORDER,&endian,sans);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");"],"label":1}
{"cve":"CVE-2021-46784","code_chunks":["                        break;","","                        icon_url = mimeGetIconURL(\"internal-link\");","                        break;","","                        icon_url = mimeGetIconURL(\"internal-unknown\");","                        break;"],"label":0}
{"cve":"CVE-2019-17546","code_chunks":["}","#define\tUNROLL2(w, op1, op2) {\t\t\\","    uint32 _x;\t\t\t\t\\","    for (_x = w; _x >= 2; _x -= 2) {\t\\","\top1;\t\t\t\t\\","\tREPEAT2(op2);\t\t\t\\","    }\t\t\t\t\t\\"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["? algorithm_config.algorithm()->tensor_ops_enabled()",": allow_tensor_ops;","if (use_tensor_ops && !allow_tensor_ops) {","return tsl::Status(port::error::INVALID_ARGUMENT,","\"Algo requests disallowed tensor op evaluation.\");","}",""],"label":1}
{"cve":"CVE-2020-35535","code_chunks":["\/* get SRF2 *\/","CHECKBUFFER_SGET4(offset);","srf_offset =","sget4(srf_buf + offset) - save; \/* SRFn ends with SRFn+1 position *\/","if (srf_offset < 0 || decrypt_len < srf_offset \/ 4)","goto restore_after_parseSonySRF;"],"label":1}
{"cve":"CVE-2018-14880","code_chunks":["{","if ((const u_char *)(lshp + 1) > dataend)","goto trunc;","ND_TCHECK(lshp->ls_type);","ND_TCHECK(lshp->ls_seq);"],"label":1}
{"cve":"CVE-2021-38202","code_chunks":["__assign_str(name, name);"],"label":1}
{"cve":"CVE-2018-14017","code_chunks":["type_info = r_bin_java_get_attr_type_by_name (name);","if (type_info) {","IFDBG eprintf(\"Typeinfo: %s, was %s\\n\", type_info->name, name);","if (nsz > sz) {"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["}","","Diagnostician::LogDiagnosticInformation();","return tsl::Status(port::error::ABORTED,","absl::StrCat(\"failed call to cuInit: \", ToString(res)));","}"],"label":1}
{"cve":"CVE-2022-39244","code_chunks":["    return pj_ansi_strnicmp(scanner->curptr, s, len);","}","","PJ_DEF(int) pj_scan_stricmp_alnum( pj_scanner *scanner, const char *s, ","\t\t\t\t   int len)","{","    if (scanner->curptr + len > scanner->end) {"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["        break;","","        if (parse_uint(value, __UINT64_C(255), dflt ? 0 : 10, &unum, contextnode)","                || (!trusted && validate_length_range(0, unum, 0, 0, 0, type, value, contextnode))) {","            goto error;","        }",""],"label":0}
{"cve":"CVE-2022-0695","code_chunks":["ZERO_FILL (b);","if (r_buf_read_at (pe->b, entry->paddr, b, sizeof (b)) < 0) {","pe_printf (\"Warning: Cannot read entry at 0x%08\"PFMT64x \"\\n\", entry->paddr);","free (entry);"],"label":1}
{"cve":"CVE-2016-6875","code_chunks":["}","for (ArrayIter it(varAsArray); it; ++it) {","Variant key = it.first();","Variant value = it.second();","recursiveAddVar(key.toString(), value, isObject);","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","  TfLiteIntArray* outputSize = TfLiteIntArrayCreate(NumDimensions(value));","","  outputSize->data[0] = SizeOfDimension(lookup, 0);","  outputSize->data[1] = SizeOfDimension(value, 1);","  for (int i = 2; i < NumDimensions(value); i++) {","    outputSize->data[i] = SizeOfDimension(value, i);"],"label":0}
{"cve":"CVE-2020-36177","code_chunks":["#if defined(WOLFSSL_PSS_LONG_SALT) || defined(WOLFSSL_PSS_SALT_LEN_DISCOVER)","#if defined(WOLFSSL_NO_MALLOC) && !defined(WOLFSSL_STATIC_MEMORY)","byte salt[RSA_MAX_SIZE\/8 + RSA_PSS_PAD_SZ];","#else","byte* salt = NULL;","#endif"],"label":1}
{"cve":"CVE-2021-29592","code_chunks":["      return ReportOpError(&context_, node, registration, node_index,","                           \"failed to invoke\");","    }","","            if (tensor_resized_since_op_invoke_ &&","        HasDynamicTensor(context_, node.outputs)) {","      next_execution_plan_index_to_prepare_ = execution_plan_index + 1;"],"label":0}
{"cve":"CVE-2021-24025","code_chunks":["const String& setSize(int len) {"],"label":1}
{"cve":"CVE-2019-6978","code_chunks":["gdImageGifCtx(im, out);","rv = gdDPExtractData(out, size);","out->gd_free(out);","return rv;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["bn_add(u, t0, t1);","bn_add(v, t2, t3);","bn_rsh(t0, u, bn_bits(u) - RLC_DIG);","_x = t0->dp[0];","bn_rsh(t1, v, bn_bits(u) - RLC_DIG);","_y = t1->dp[0];"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  bool has_dynamic_output_tensors = false;","  for (int i = 0; i < node->outputs->size; ++i) {","    TfLiteTensor* output;","    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &output));","    if (IsDynamicTensor(output)) {","      has_dynamic_output_tensors = true;","      break;"],"label":0}
{"cve":"CVE-2021-21413","code_chunks":["String inheritUnsafe{\"inheritUnsafe\"};"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["    for (int b = 0; b < batch_size; ++b) {","    auto& best_paths_b = best_paths[b];","    best_paths_b.resize(top_paths);","    for (int t = 0; t < GetTensorData<int32_t>(sequence_length)[b]; ++t) {","      input_chip_t = input_list_t[t].chip(b, 0);","      auto input_bi =","          Eigen::Map<const Eigen::ArrayXf>(input_chip_t.data(), num_classes);"],"label":0}
{"cve":"CVE-2017-10929","code_chunks":["(unsigned long long) sector, grub_errmsg);","grub_error_pop ();","return grub_errno;","}","","real_offset = offset;"],"label":0}
{"cve":"CVE-2022-24949","code_chunks":["      } else {","        PortForwardSourceRequest pfsr;","        pfsr.mutable_source()->set_port(stoi(sourceDestination[0]));","        pfsr.mutable_destination()->set_port(stoi(sourceDestination[1]));","        pfsrs.push_back(pfsr);","      }","    } catch (const std::logic_error& lr) {"],"label":0}
{"cve":"CVE-2023-50246","code_chunks":["}","","if (plit->literal_data == NULL) {","int len = jvp_dec_number_ptr(n)->digits + 14;","plit->literal_data = jv_mem_alloc(len);","",""],"label":1}
{"cve":"CVE-2023-22741","code_chunks":["int stun_parse_attribute(stun_msg_t *msg, unsigned char *p)","{","int len;","uint16_t attr_type;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE(context, num_dims >= 2);","const TfLiteTensor* fft_length = GetInput(context, node, kFftLengthTensor);","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TF_LITE_ENSURE(context, IsPowerOfTwo(fft_length_data[0]));","TF_LITE_ENSURE(context, IsPowerOfTwo(fft_length_data[1]));"],"label":1}
{"cve":"PYSEC-2021-789","code_chunks":["","# Licensed under the Apache License, V"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["track_size = *midi_data++ << 24;","track_size |= *midi_data++ << 16;","track_size |= *midi_data++ << 8;","track_size |= *midi_data++;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  const TfLiteTensor* fw_cell_to_output_weights =","      GetOptionalInputTensor(context, node, kFwCellToOutputWeightsTensor);","","  const TfLiteTensor* fw_input_gate_bias =","      GetOptionalInputTensor(context, node, kFwInputGateBiasTensor);","  const TfLiteTensor* fw_forget_gate_bias;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["","\tif (!istate)","\t\treturn NULL;","","\t\/*","\t * The .gitattributes file only applies to files within its","\t * parent directory. In the case of cone-mode sparse-checkout,"],"label":0}
{"cve":"CVE-2021-37671","code_chunks":["    if (tuple[index].has_value()) {","      return errors::InvalidArgument(","          \"The tensor for index '\", index, \"' for key '\", key.scalar<int64>()(),","          \"' was already initialized '\", dtypes_.size(), \"'.\");","    }","","    return Status::OK();"],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["","char hex[] = \"0123456789abcdef\";","","String result(3 * value.size(), ReserveString);","char *rdata = result.get()->mutableData(), *r = rdata;","","for (int i = 0; i < value.size(); i++) {"],"label":1}
{"cve":"CVE-2022-37032","code_chunks":["while (pnt < end)","{","memcpy(&cap, pnt, sizeof(struct capability));","","if (pnt + 2 > end)","return;"],"label":1}
{"cve":"CVE-2019-17177","code_chunks":["if (finalNbRects != nbRects)","{","int allocSize = sizeof(REGION16_DATA) + (finalNbRects * sizeof(RECTANGLE_16));","region->data = realloc(region->data, allocSize);","","if (!region->data)"],"label":1}
{"cve":"PYSEC-2021-815","code_chunks":["stats_summaries_list[0].dim_size(3) - logits_dim;","DCHECK_GT(hessian_dim, 0);","DCHECK_LE(hessian_dim, logits_dim * logits_dim);","","std::vector<TTypes<float, 4>::ConstTensor> stats_summaries;","DCHECK_EQ(stats_summaries_list.size(), num_features_);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus ReverseSequenceImpl(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* seq_lengths_tensor =","GetInput(context, node, kSeqLengthsTensor);","const TS* seq_lengths = GetTensorData<TS>(seq_lengths_tensor);","","auto* params ="],"label":1}
{"cve":"CVE-2019-16995","code_chunks":["\t\tgoto fail;","","\tres = hsr_add_port(hsr, slave[0], HSR_PT_SLAVE_A);","\tif (res)","\t\tgoto fail;","\tres = hsr_add_port(hsr, slave[1], HSR_PT_SLAVE_B);","\tif (res)"],"label":0}
{"cve":"CVE-2016-4303","code_chunks":["break;","j = cJSON_CreateFloat(va_arg(argp, double));","break;","j = cJSON_CreateString(va_arg(argp, char *));","break;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2020-19498","code_chunks":["static const int MAX_FRACTION_DENOMINATOR = 0x10000;"],"label":1}
{"cve":"CVE-2020-11089","code_chunks":["\t\t{","\t\t\tif (_stricmp(device->Permissive, \"permissive\") == 0)","\t\t\t{","\t\t\t\tserial->permissive = TRUE;","\t\t\t}","\t\t\telse","\t\t\t{"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  output->type = updates->type;","","  if (IsConstantTensor(shape)) {"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["if (pos)","strbuf_add(&tmp, sb->buf, pos);","strbuf_add_wrapped_text(&tmp, sb->buf + pos,","(int) indent1, (int) indent2, (int) width);","strbuf_swap(&tmp, sb);","strbuf_release(&tmp);","}"],"label":1}
{"cve":"CVE-2016-6870","code_chunks":["           (const mbfl_encoding**) MBSTRG(current_detect_order_list),","           MBSTRG(current_detect_order_list_size), MBSTRG(strict_detection));","      orig_str.no_encoding = encoding != nullptr","                           ? encoding->no_encoding","                           : mbfl_no_encoding_invalid;","    }",""],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["        0) return NULL;","    if (PyDict_SetItemString(d, \"Await\", (PyObject*)Await_type) < 0) return","        NULL;","    if (PyDict_SetItemString(d, \"Yield\", (PyObject*)Yield_type) < 0) return","        NULL;","    if (PyDict_SetItemString(d, \"YieldFrom\", (PyObject*)YieldFrom_type) < 0)","        return NULL;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2020-1919","code_chunks":["if (mme.second.m_return_value != fr) all_same = false;","count += mme.second.m_count;","auto ser_len = mme.second.m_return_value.length();","min_ser_len = std::min(min_ser_len, ser_len);","max_ser_len = std::max(max_ser_len, ser_len);","if (mme.second.m_count > 1) any_multiple = true;"],"label":1}
{"cve":"CVE-2021-24028","code_chunks":["const int& getActiveId(const void* object, const StructInfo& info) {","return *reinterpret_cast<const int*>(","static_cast<const char*>(object) + info.unionExt->unionTypeOffset);","}"],"label":0}
{"cve":"CVE-2016-10161","code_chunks":["ZVAL_LONG(*rval, parse_iv(start + 2));","return 1;","}","#line 1197 \"ext\/standard\/var_unserializer.c\"","yych = *++YYCURSOR;","if (yych <= '\/') goto yy18;","if (yych >= '2') goto yy18;"],"label":1}
{"cve":"CVE-2022-28068","code_chunks":["const ut8 *dump = &block.data[++i];","offset = r_sleb128 (&dump, &block.data[loc->block.length]);","if (frame_base) {","\/* recursive parsing, but frame_base should be only one, but someone","could make malicious resource exhaustion attack, so a depth counter might be cool? *\/","VariableLocation *location = parse_dwarf_location (ctx, frame_base, NULL);"],"label":1}
{"cve":"CVE-2018-15857","code_chunks":["","    file = calloc(1, sizeof(*file));","    if (!file)","        return NULL;","","    XkbEscapeMapName(name);","    file->file_type = type;"],"label":0}
{"cve":"CVE-2020-15945","code_chunks":["ptrdiff_t oldtop = savestack(L, L->top);  \/* hook may change top *\/","int delta = 0;","if (isLuacode(ci)) {","Proto *p = ci_func(ci)->p;","if (p->is_vararg)","delta = ci->u.l.nextraargs + p->numparams + 1;","if (L->top < ci->top)"],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["    mask[1][3] = -4;","    top_margin=16;","    left_margin = 92;","  } else if (!strcmp(model,\"PowerShot S120\")) {","        raw_width = 4192;","        raw_height = 3062;","        width = 4022;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","const int32 sample_rate = *GetTensorData<int>(input_rate);",""],"label":1}
{"cve":"CVE-2016-2187","code_chunks":["\tfor (retry = 0; retry < 3; retry++) {","\t\tresult = usb_control_msg(gtco->usbdev,","\t\t\t\t\t usb_rcvctrlpipe(gtco->usbdev, 0),","\t\t\t\t\t USB_REQ_GET_DESCRIPTOR,","\t\t\t\t\t USB_RECIP_INTERFACE | USB_DIR_IN,","\t\t\t\t\t REPORT_DEVICE_TYPE << 8,","\t\t\t\t\t 0, \/* interface *\/"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["}","","RLC_TRY {","for (i = 0; i < (1 << (EP_WIDTH - 1)); i ++) {","ep2_null(t[i]);","ep2_new(t[i]);","}"],"label":1}
{"cve":"CVE-2018-20179","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"CVE-2019-19481","code_chunks":["LOG_FUNC_RETURN(card->ctx, SC_ERROR_FILE_END_REACHED);","}","len = MIN(count, priv->cache_buf_len-idx);","memcpy(buf, &priv->cache_buf[idx], len);","LOG_FUNC_RETURN(card->ctx, len);","}"],"label":1}
{"cve":"CVE-2023-5686","code_chunks":["\t\t\tval_two = (ut32) bytes[2];","\t\t\tsnprintf (output, outlen, \"%s %d %d\", JAVA_OPS[idx].name, val_one, val_two);","\t\t\toutput[outlen-1] = 0;","\t\t\treturn update_bytes_consumed (JAVA_OPS[idx].size);","\t\t}","\t\treturn -1;","\t\tif (len > 3) {"],"label":0}
{"cve":"CVE-2018-15861","code_chunks":["","\/**"," * This function returns ... something.  It's a bit of a guess, really."," *"," * If an integer is given in value ctx, it will be returned in ival."," * If an ident or field reference is given, the lookup function (if given)"," * will be called.  At the moment, only SimpleLookup use this, and they both"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep_map_dst(ep_t p, const uint8_t *msg, int len, const uint8_t *dst,","int dst_len) {","","\/* enough space for two field elements plus extra bytes for uniformity *\/","const int len_per_elm = (FP_PRIME + ep_param_level() + 7) \/ 8;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (!o) {","Py_RETURN_NONE;","}"],"label":0}
{"cve":"CVE-2023-51698","code_chunks":["g_slist_foreach (supported_extensions, (GFunc) g_free, NULL);","g_slist_free (supported_extensions);","","if (comics_document->page_names->len == 0) {","g_set_error (error,","EV_DOCUMENT_ERROR,"],"label":1}
{"cve":"CVE-2016-3156","code_chunks":["struct netdev_notifier_info info;","","\/* The masq_dev_notifier will catch the case of the device going","* down.  So if the inetdev is dead and being destroyed we have","* no work to do.  Otherwise this is an individual address removal","* and we have to perform the flush."],"label":0}
{"cve":"CVE-2017-3733","code_chunks":["# define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);","output->type = input2->type;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["input_quantized->type = kTfLiteInt8;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2018-20839","code_chunks":["","\/* If we can't read the default, then default to unicode. It's 2017 after all. *\/","kb = vt_default_utf8() != 0 ? K_UNICODE : K_XLATE;","","r = vt_verify_kbmode(fd);","if (r == -EBUSY) {"],"label":0}
{"cve":"CVE-2021-23520","code_chunks":["#if JUCE_WINDOWS","auto entryPath = zei->entry.filename;","#else","auto entryPath = zei->entry.filename.replaceCharacter ('\\\\', '\/');","#endif",""],"label":0}
{"cve":"CVE-2022-1031","code_chunks":["\t\t\t: r_str_newf (\"%s%s, \", args, arg_i);","\t\tfree (args);","\t\targs = new_args;","\t\tfree (arg_i);","\t\tfree (sdb_arg_i);","\t}",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["}","","node->temporaries->data[3] = scratch_tensor_index + 3;","TfLiteTensor* float_weights_time = GetTemporary(context, node, \/*index=*\/3);","float_weights_time->type = kTfLiteFloat32;","float_weights_time->allocation_type = kTfLiteArenaRwPersistent;","if (!TfLiteIntArrayEqual(float_weights_time->dims, weights_time->dims)) {"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["  CHECK_SYSTEM(statSyscall(filename, &sb, true));","  return (int64_t)sb.st_uid;","}","","Variant HHVM_FUNCTION(filegroup,","                      const String& filename) {","  CHECK_PATH(filename, 1);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static int rand_inc(uint8_t *data, size_t size, int digit) {","int carry = digit;","for (int i = size - 1; i >= 0; i--) {","int16_t s;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["bw_activation_state_quantized->type = fw_input_to_output_weights->type;","bw_activation_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(bw_activation_state_quantized->dims,"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["return Py_None;","}","","result = PyType_GenericNew(alias_type, NULL, NULL);"],"label":1}
{"cve":"PYSEC-2022-158","code_chunks":["","  xla::LocalClientOptions client_options;","  client_options.set_platform(platform.ValueOrDie());","  client_options.set_intra_op_parallelism_threads(","      device->tensorflow_cpu_worker_threads()->num_threads);","","  if (flr->config_proto()) {"],"label":0}
{"cve":"CVE-2020-35535","code_chunks":["\t\t\t  FORC3 icWBC[Sony_SR2_wb_list1[i]][c] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);","            icWBC[Sony_SR2_wb_list1[i]][3] = icWBC[Sony_SR2_wb_list1[i]][1];","          }","        } else if (tag_id == 0x7302) {","\t\t\tCHECKBUFFER_N(tag_dataoffset + tag_dataunitlen * 3, 2);","\t\t\tFORC4 icWBC[LIBRAW_WBI_Auto][GRBG_2_RGBG(c)] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);","        } else if (tag_id == 0x7312) {"],"label":0}
{"cve":"CVE-2018-19045","code_chunks":["}","if (!os_major)","log_message(LOG_INFO, \"Unable to parse kernel version %s\", uname_buf.release);","","\/* config_id defaults to hostname *\/","if (!config_id) {"],"label":1}
{"cve":"PYSEC-2021-566","code_chunks":["void AddBatchOffsets(Tensor* indices, const Tensor& params) {","int64_t batch_size = 1;      for (int idx = 0; idx < batch_dims_; ++idx) {","batch_size *= params.dim_size(idx);","}"],"label":1}
{"cve":"CVE-2016-4563","code_chunks":["if (clone_info->stroke_pattern != (Image *) NULL)","clone_info->fill_pattern=CloneImage(clone_info->stroke_pattern,0,0,","MagickTrue,exception);","clone_info->stroke.alpha=(Quantum) TransparentAlpha;","clone_info->stroke_width=0.0;","clone_info->fill_rule=NonZeroRule;","status=MagickTrue;"],"label":1}
{"cve":"CVE-2021-45931","code_chunks":["hb_set_set (hb_set_t       *set,","const hb_set_t *other)","{","if (unlikely (hb_object_is_immutable (set)))"],"label":1}
{"cve":"CVE-2021-44108","code_chunks":["ogs_assert(data);","","if (data->num_of_part < OGS_SBI_MAX_NUM_OF_PART && at && length) {","SWITCH(data->header_field)","CASE(OGS_SBI_CONTENT_TYPE)","ogs_assert(data->part[data->num_of_part].content_type == NULL);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2018-14464","code_chunks":["ip6addr_string(ndo, obj_tptr+20),","EXTRACT_32BITS(obj_tptr+20)));","","if (lmp_print_data_link_subobjs(ndo, obj_tptr, obj_tlen - 36, 36))","hexdump=TRUE;","break;",""],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["\"san_names should have at least one name after SPIFFE cert validation\");","","for (const GENERAL_NAME* general_name : san_names.get()) {","if (general_name->type == GEN_URI) {","const std::string san = Utility::generalNameAsString(general_name);"],"label":1}
{"cve":"CVE-2020-28097","code_chunks":["\t\tscr_memsetw((u16 *) (c->vc_origin + c->vc_screenbuf_size -","\t\t\t\t     delta), c->vc_video_erase_char,","\t\t\t    delta);","\t} else {","\t\tif (oldo - delta < vga_vram_base) {","\t\t\tscr_memmovew((u16 *) (vga_vram_end -","\t\t\t\t\t      c->vc_screenbuf_size +"],"label":0}
{"cve":"CVE-2020-9432","code_chunks":["{","X509 * cert = CHECK_OBJECT(1, X509, \"openssl.x509\");","size_t sz;","const char *email = luaL_checklstring(L, 2, &sz);","int flags = luaL_optint(L, 3, 0);","int ret = X509_check_email(cert, email, sz, flags);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["auto* params =","reinterpret_cast<TfLiteAudioSpectrogramParams*>(node->user_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"],"label":1}
{"cve":"CVE-2021-31262","code_chunks":["\t\tif (ptr->config->numTemporalLayers>1)","\t\t\tptr->size += 1;","\t\tfor (i=0; i<ptr->config->numTemporalLayers; i++) {","\t\t\tif (ptr->config->ptl_sublayer_present_mask & (1<<i))","\t\t\t\tptr->size+=1;","\t\t}","\t}"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2020-36315","code_chunks":["static int pad_basic(bn_t m, int *p_len, int m_len, int k_len, int operation) {","uint8_t pad = 0;","int result = RLC_ERR;","bn_t t;","","RLC_TRY {"],"label":0}
{"cve":"CVE-2020-1919","code_chunks":["      if (class_name.is_init()) {","        assertx(isStringType(type(class_name)));","        strncpy(frame->class_name,","                val(class_name).pstr->data(),","                std::min<int64_t>(","                  val(class_name).pstr->size(),","                  strobelight::kClassNameMax"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2021-520","code_chunks":["TF_LITE_ENSURE_STATUS(EnsureTensorDataIsReadable(tensor_index));","}","if (tensor->data.raw == nullptr && tensor->bytes > 0) {","if (registration.builtin_code == kTfLiteBuiltinReshape && i == 1) {","continue;","} else {","ReportError(\"Input tensor %d lacks data\", tensor_index);"],"label":1}
{"cve":"CVE-2021-32495","code_chunks":["\tpyc_object *ret = R_NEW0 (pyc_object);","\tif (!ret) {","\t\treturn NULL;","\t}","\tret->type = TYPE_NONE;","\tret->data = strdup (\"None\");","\tif (!ret->data) {"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["bits |= 0x02;","}","last = attr;","} else if (attr->annotation->module == ctx->models.list[1] && \/* internal YANG schema *\/","!strcmp(attr->annotation->arg_value, \"value\")) {","if (bits & 0x04) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, bias->dims->data[0], num_units);","}","","const TfLiteTensor* state = GetInput(context, node, kStateTensor);"],"label":1}
{"cve":"CVE-2015-8630","code_chunks":["if(polent.pw_max_life)","kdb->pw_expiration = now + polent.pw_max_life;","else","kdb->pw_expiration = 0;","}","if ((mask & KADM5_PW_EXPIRATION))"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2023-27114","code_chunks":["\t\t\t\t\top->txt = r_str_newf (\"%s %\" PFMT32d, opdef->txt, val);","\t\t\t\t}","\t\t\t\top->len += n;","\t\t\t}","\t\t\tbreak;","\t\t\t{","\t\t\t\tst64 val = 0;"],"label":0}
{"cve":"CVE-2018-12322","code_chunks":["op->type = R_ANAL_OP_TYPE_CJMP;","if (data[1] <= 127)","op->jump = addr + data[1] + op->size;","else\top->jump = addr - (256 - data[1]) + op->size;","op->fail = addr + op->size;","_6502_anal_esil_ccall (op, data[0]);"],"label":1}
{"cve":"CVE-2022-0676","code_chunks":["}","","ut32 j;","ut16 *depArray = NULL;","cache_imgxtr_t *extras = NULL;","if (target_libs) {"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["#define BYTE\t\tchar"],"label":1}
{"cve":"CVE-2018-17182","code_chunks":["#ifdef CONFIG_MMU_NOTIFIER","\t\t\"mmu_notifier_mm %px\\n\"","#endif","#ifdef CONFIG_NUMA_BALANCING","\t\t\"numa_next_scan %lu numa_scan_offset %lu numa_scan_seq %d\\n\"","#endif","\t\t\"tlb_flush_pending %d\\n\""],"label":0}
{"cve":"CVE-2024-23324","code_chunks":["auto key_value_pair = config_->isTlvTypeNeeded(tlv_type);","if (nullptr != key_value_pair) {","ProtobufWkt::Value metadata_value;","metadata_value.set_string_value(tlv_value.data(), tlv_value.size());","","std::string metadata_key = key_value_pair->metadata_namespace().empty()","? \"envoy.filters.listener.proxy_protocol\""],"label":1}
{"cve":"CVE-2021-30022","code_chunks":["","if (fmt->chroma_format_idc == 3)","fmt->separate_colour_plane_flag = gf_bs_read_int_log_idx(bs, 1, \"separate_colour_plane_flag\", idx);","fmt->bit_depth_luma = 8 + gf_bs_read_int_log_idx(bs, 4, \"bit_depth_luma_minus8\", idx);","fmt->bit_depth_chroma = 8 + gf_bs_read_int_log_idx(bs, 4, \"bit_depth_chroma_minus8\", idx);","}"],"label":1}
{"cve":"CVE-2019-6706","code_chunks":["StkId fi = index2addr(L, fidx);","switch (ttype(fi)) {","case LUA_TLCL: {  \/* lua closure *\/","return *getupvalref(L, fidx, n, NULL);","}","case LUA_TCCL: {  \/* C closure *\/","CClosure *f = clCvalue(fi);"],"label":1}
{"cve":"CVE-2018-20406","code_chunks":["        *pparent = parent;","    else","        Py_XDECREF(parent);","    return obj;","}","",""],"label":0}
{"cve":"PYSEC-2021-173","code_chunks":["void Compute(OpKernelContext* ctx) override {","ReshapeOp::Compute(ctx);","","const float input_min_float = ctx->input(2).flat<float>()(0);","const float input_max_float = ctx->input(3).flat<float>()(0);","Tensor* output_min = nullptr;"],"label":1}
{"cve":"CVE-2018-16643","code_chunks":["        if (stream_info->offset_count != 0)","          {","            if (stream_info->offsets != (ssize_t *) NULL)","              stream_info->offsets=(ssize_t *) RelinquishMagickMemory(","                stream_info->offsets);","            stream_info->offsets=(ssize_t *) AcquireQuantumMemory(","              stream_info->offset_count,sizeof(*stream_info->offsets));"],"label":0}
{"cve":"CVE-2017-6448","code_chunks":["\t\t\t\t\t\t\t(buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4);","\t\t\t\t\tbreak;","\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,","\t\t\t\t\t\t\t(buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4, buf[1] & 0x0f); \t\t\t\t\tbreak;","\t\t\t\t\tsnprintf (str, sizeof (str), \" {}\");","\t\t\t}","\t\t\tstrasm = r_str_concat (strasm, str);"],"label":0}
{"cve":"CVE-2017-1000494","code_chunks":["struct NameValueParserData * data)","{","struct xmlparser parser;","memset(data, 0, sizeof(struct NameValueParserData));","\/* init xmlparser object *\/","parser.xmlstart = buffer;","parser.xmlsize = bufsize;"],"label":0}
{"cve":"CVE-2017-14173","code_chunks":["ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");","image->columns=width;","image->rows=height;","for (depth=1; (GetQuantumRange(depth)+1) < max_value; depth++) ;","image->depth=depth;","status=SetImageExtent(image,image->columns,image->rows,exception);","if (status == MagickFalse)"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["        tflite::micro::GetTensorData<int8_t>(output));","  }","}","","void MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,","                  TfLitePoolParams* params, const OpData* data,","                  const TfLiteEvalTensor* input, TfLiteEvalTensor* output) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  result.type = kTfLiteUInt8;","  result.data.uint8 = const_cast<uint8_t*>(data);","  result.params = {scale, zero_point};","  result.quantization = {kTfLiteAffineQuantization, nullptr};","  result.bytes = ElementCount(*dims) * sizeof(uint8_t);","  return result;","}"],"label":0}
{"cve":"CVE-2019-19221","code_chunks":["","memset(&shift_state, 0, sizeof(shift_state));","#endif","if (NULL == archive_wstring_ensure(dest, dest->length + wcs_length + 1))","return (-1);","wcs = dest->s + dest->length;","\/*"],"label":1}
{"cve":"CVE-2020-28097","code_chunks":["\t\tvga_bootup_console = 1;","\t\tc->state.x = screen_info.orig_x;","\t\tc->state.y = screen_info.orig_y;","\t}","","\t\/* We can't copy in more than the size of the video buffer,","\t * or we'll be copying in VGA BIOS *\/"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["TCPSocketFactory::create(IArchNetwork::EAddressFamily family, bool secure) const","{","if (secure) {","SecureSocket* secureSocket = new SecureSocket(m_events, m_socketMultiplexer, family);","secureSocket->initSsl (false);","return secureSocket;","}"],"label":1}
{"cve":"CVE-2017-16818","code_chunks":["#include \"include\/assert.h\" \/\/ razzin' frazzin' ...grrr."],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["}","return GetQuantizedConvolutionMultipler(context, input, filter, output,","multiplier);","}","","TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,"],"label":1}
{"cve":"CVE-2019-19905","code_chunks":["boolean retval = TRUE;","","while (*origbuf == ' ' || *origbuf == '\\t') \/* skip leading whitespace *\/","++origbuf;                   \/* (caller probably already did this) *\/","(void) strncpy(buf, origbuf, sizeof buf - 1);","buf[sizeof buf - 1] = '\\0'; \/* strncpy not guaranteed to NUL terminate *\/"],"label":0}
{"cve":"PYSEC-2022-145","code_chunks":["ReplaceOperationWithIdentity(0, properties, node, optimized_graph);","}","}","return Status::OK();","}",""],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                    ast_error(c, n, \"(%s) unknown error\", errtype);","                }","                Py_DECREF(type);","                Py_XDECREF(value);","                Py_XDECREF(tback);","            }","            return NULL;"],"label":0}
{"cve":"CVE-2022-40299","code_chunks":["else if(pid==0)","{","if (strchr(editor,' ')==NULL)","{","execlp(editor,editor,filename,NULL);","Print(\"cannot exec %s\\n\",editor);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["        utf8 = translate_into_utf8(str, tok->enc);","        if (utf8 == NULL)","            return error_ret(tok);","        str = PyBytes_AsString(utf8);","    }","    for (s = str;; s++) {","        if (*s == '\\0') break;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","output->type = input->type;","if (IsConstantTensor(axis)) {","int axis_value;"],"label":1}
{"cve":"PYSEC-2021-395","code_chunks":["size = static_cast<int64>(std::ceil(std::abs((limit - start) \/ delta)));","}","Tensor* out = nullptr;","OP_REQUIRES_OK(context,"],"label":1}
{"cve":"CVE-2018-14363","code_chunks":["static int nntp_bcache_delete(const char *id, struct BodyCache *bcache, void *data)","{","  struct NntpData *nntp_data = data;","  anum_t anum;","  char c;","","  if (!nntp_data || sscanf(id, ANUM \"%c\", &anum, &c) != 1 ||"],"label":0}
{"cve":"CVE-2017-5209","code_chunks":["\tconst char *ptr = buf;","\tint p = 0;","\tint wv, w1, w2, w3, w4;","\tint tmpval[4];","\tint tmpcnt = 0;","","\tdo {"],"label":0}
{"cve":"CVE-2023-47100","code_chunks":["* separates two digits *\/","if (cur == '_') {","if (    stricter","&& (     i == 0 || (int) i == equals_pos || i == name_len- 1","|| ! isDIGIT_A(name[i-1]) || ! isDIGIT_A(name[i+1])))","{","lookup_name[j++] = '_';"],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["void HeaderMapImpl::addViaMove(HeaderString&& key, HeaderString&& value) {","auto* entry = getExistingInline(key.getStringView());","if (entry != nullptr) {","appendToHeader(entry->value(), value.getStringView());","key.clear();","value.clear();","} else {"],"label":1}
{"cve":"CVE-2016-10161","code_chunks":["goto use_double;","}","} else {","goto use_double;","}","}"],"label":1}
{"cve":"CVE-2019-19922","code_chunks":["return;","","raw_spin_lock(&cfs_b->lock);","if (cfs_b->quota != RUNTIME_INF &&","cfs_rq->runtime_expires == cfs_b->runtime_expires) {","cfs_b->runtime += slack_runtime;"],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["\t\t\t\treturn ret;","\t\t}","\t\tnoffset = fdt_next_node(fit, noffset, &ndepth);","\t}","","\treturn ret;","}"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["PyArena *arena)","{","stmt_ty p;","if (!name) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static void rand_gen(uint8_t *out, size_t out_len) {","int m = RLC_CEIL(out_len, RLC_MD_LEN);","uint8_t hash[RLC_MD_LEN], data[(RLC_RAND_SIZE - 1)\/2];","ctx_t *ctx = core_get();"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  I* indexes = GetTensorData<I>(output_indexes);","  const T* data = GetTensorData<T>(input);","  const int num_elements = NumElements(input);","","  for (int i = 0; i < num_elements; ++i) {","    const auto element_it = unique_values.find(data[i]);","    if (element_it != unique_values.end()) {"],"label":0}
{"cve":"CVE-2020-9433","code_chunks":["@tparam evp_pkey pkey private key to sign x509","@tparam x509|x509_name cacert or cacert x509_name","@tparam[opt='sha1WithRSAEncryption'] string|md_digest md_alg","@treturn boolean result true for check pass","*\/","static int openssl_x509_sign(lua_State*L)","{"],"label":0}
{"cve":"CVE-2018-20836","code_chunks":["}","","\/* Give it some long enough timeout. In seconds. *\/","#define SMP_TIMEOUT 10","","static int smp_execute_task_sg(struct domain_device *dev,"],"label":1}
{"cve":"CVE-2020-8037","code_chunks":["\thdrlength = 0;","#endif \/* __bsdi__ *\/","\treturn (hdrlength);","}","","","\/*"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","const int num_elements = NumElements(input);"],"label":0}
{"cve":"CVE-2019-12816","code_chunks":["    }","","                                                    ModHandle p = dlopen((sModPath).c_str(), RTLD_NOW | RTLD_GLOBAL);","","    if (!p) {","                        const char* cDlError = dlerror();","        CString sDlError = cDlError ? cDlError : t_s(\"Unknown error\");"],"label":0}
{"cve":"CVE-2022-35977","code_chunks":["        \/* Key exists, check type *\/","        if (checkType(c,o,OBJ_STRING))","            return;","","        \/* \"append\" is an argument, so always an sds *\/","        append = c->argv[2];","        if (checkStringLength(c,stringObjectLen(o),sdslen(append->ptr)) != C_OK)"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["GetOutput(context, node, kResourceHandleTensor);","TF_LITE_ENSURE(context, resource_handle_tensor != nullptr);","TF_LITE_ENSURE_EQ(context, resource_handle_tensor->type, kTfLiteInt32);","TfLiteIntArray* outputSize = TfLiteIntArrayCreate(1);","outputSize->data[0] = 1;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"body\\\" missing from AsyncFor\");","            return 1;","        }","        else {","            int res;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["BYTE refreshRectSupport;","BYTE suppressOutputSupport;","","if (length < 24)","return FALSE;",""],"label":1}
{"cve":"CVE-2019-11930","code_chunks":["}","if (!ret) {","if (return_list && *return_list) {","free(*return_list);","*return_list = nullptr;","}","return_size = 0;"],"label":1}
{"cve":"CVE-2017-14175","code_chunks":["*\/","value=0;","do","{","if (value > (unsigned int) (INT_MAX\/10))","break;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["goto failed;","}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {"],"label":1}
{"cve":"CVE-2020-15213","code_chunks":["int previous_segment_id = -1;","for (int i = 0; i < segment_id_size; i++) {","const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];","if (i == 0) {","TF_LITE_ENSURE_EQ(context, current_segment_id, 0);","} else {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int i, n;","int8_t naf[RLC_FB_BITS + 1];","eb_t t[1 << (EB_WIDTH - 2)];","size_t l;","","RLC_TRY {"],"label":0}
{"cve":"CVE-2021-32139","code_chunks":["\t\tgpp_write_box(bs, &ttxt->default_box);","\t\tgpp_write_style(bs, &ttxt->default_style);","\t}","\t\/*write font table box*\/","\tsize -= (8 + 18 + 8 + 12);","\tgf_bs_write_u32(bs, size);","\tgf_bs_write_u32(bs, GF_ISOM_BOX_TYPE_FTAB);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["\/\/ Make sure there is no re-scaling needed for Int8 quantized kernel. This","VectorOfTensors<int8_t> all_inputs(*context, *node->inputs);","for (int i = 0; i < node->inputs->size; ++i) {","const TfLiteTensor* t = GetInput(context, node, i);","TF_LITE_ENSURE_EQ(context, t->params.scale, output->params.scale);","TF_LITE_ENSURE_EQ(context, t->params.zero_point,","output->params.zero_point);"],"label":1}
{"cve":"CVE-2020-11089","code_chunks":["UINT64 Offset;","void* ptr;","DWORD nbWritten = 0;","","if (Stream_GetRemainingLength(irp->input) < 32)","return ERROR_INVALID_DATA;",""],"label":0}
{"cve":"CVE-2022-23575","code_chunks":["int size = DataTypeSize(BaseType(tensor.dtype()));","VLOG(2) << \"Count: \" << count << \" DataTypeSize: \" << size;","int64_t tensor_size = MultiplyWithoutOverflow(count, size);","if (tensor_size < 0) {","VLOG(1) << \"Overflow encountered when computing tensor size, multiplying \"","<< count << \" with \" << size;"],"label":0}
{"cve":"CVE-2020-11097","code_chunks":["size_t* pcbAvPairListRemaining)","{","UINT16 id;","size_t cbAvPair = cbAvPairList;","NTLM_AV_PAIR* pAvPair = pAvPairList;",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["bool has_dynamic_output_tensors = false;","for (auto* subgraph : {then_subgraph, else_subgraph}) {","for (int i = 0; i < num_inputs; ++i) {","const TfLiteTensor* input = GetInput(context, node, i + 1);","std::vector<int> dims(input->dims->data,","input->dims->data + input->dims->size);","subgraph->ResizeInputTensor(i, dims);"],"label":1}
{"cve":"CVE-2021-20271","code_chunks":["goto exit;","","\/* Append (and remap) signature tags to the metadata. *\/","headerMergeLegacySigs(h, sigh);","applyRetrofits(h);","","\/* Bump reference count for return. *\/"],"label":1}
{"cve":"CVE-2017-6448","code_chunks":["sprintf (str, \" v%i, v%i\", vA, vB);","strasm = r_str_concat (strasm, str);","break;","vA = (int) buf[1];"],"label":1}
{"cve":"CVE-2020-35964","code_chunks":["            return AVERROR_EOF;","        for (j=0;j<c;j++) {","            if (avio_feof(pb))","                return AVERROR_EOF;","            avio_r8(pb);             avio_r8(pb);         }","    }",""],"label":0}
{"cve":"CVE-2021-32439","code_chunks":["","\t\t\t\tstbl->SyncSample = (GF_SyncSampleBox *) gf_isom_box_new_parent(&stbl->child_boxes, GF_ISOM_BOX_TYPE_STSS);","\t\tif (!stbl->SyncSample) return GF_OUT_OF_MEM;","","\t\tif (stbl->SampleSize->sampleCount > 1) {","\t\t\tstbl->SyncSample->sampleNumbers = (u32*)gf_malloc(sizeof(u32) * (stbl->SampleSize->sampleCount-1));","\t\t\tif (!stbl->SyncSample->sampleNumbers) return GF_OUT_OF_MEM;"],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["","CASE_ITERATOR_TYPE_PRIVATE_DATA_2B","if (PRIVATE_DATA(cc))","{","private_count = 2;","private_srcw[0] = PRIVATE_DATA(cc);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  const TfLiteTensor* input2;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor2, &input2));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT32 cmdFlags;","UINT32 reserved;","WLog_INFO(TAG,","\"SurfaceCommandsCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* value;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kValueTensor, &value));","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["}","*out = comprehension(target, iter, ifs, is_async, arena);","return 0;","Py_XDECREF(tmp);","return 1;","}"],"label":1}
{"cve":"CVE-2020-11735","code_chunks":["#ifndef WOLFSSL_SP_MATH","#ifdef WOLFSSL_SMALL_STACK","mp_int* t1 = NULL;","mp_int* t2 = NULL;","#ifdef ALT_ECC_SIZE","mp_int* rx = NULL;"],"label":0}
{"cve":"CVE-2016-9842","code_chunks":["struct inflate_state FAR *state;","","if (strm == Z_NULL || strm->state == Z_NULL)","return (long)(((unsigned long)0 - 1) << 16);","state = (struct inflate_state FAR *)strm->state;","return (long)(((unsigned long)((long)state->back)) << 16) +"],"label":0}
{"cve":"CVE-2021-24025","code_chunks":["","int key_size;","if (key.size() > max_key_size) {","raise_warning(\"Key size too large; supplied length: %d, max: %d\",","key.size(), max_key_size);","key_size = max_key_size;","} else {"],"label":1}
{"cve":"CVE-2019-19947","code_chunks":["struct kvaser_cmd *cmd;","int err;","","cmd = kzalloc(sizeof(*cmd), GFP_ATOMIC);","if (!cmd)","return -ENOMEM;",""],"label":0}
{"cve":"CVE-2018-8796","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"CVE-2021-38597","code_chunks":["#endif \/* WOLFSSL_NO_OCSP_OPTIONAL_CERTS *\/","    {","        Signer* ca;","        int sigValid = -1;","","        #ifndef NO_SKID","            ca = GetCA(cm, resp->single->issuerKeyHash);"],"label":0}
{"cve":"CVE-2022-1620","code_chunks":["if (has_mbyte)","len += (*mb_tail_off)(p, p + len) + 1;","p += len;","}","STRCPY(icon_str, p);","trans_characters(icon_str, IOSIZE);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["Module(asdl_seq * body, PyArena *arena)","{","mod_ty p;","p = (mod_ty)PyArena_Malloc(arena, sizeof(*p));"],"label":1}
{"cve":"CVE-2019-13306","code_chunks":[],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2021-29579","code_chunks":["","  void Compute(OpKernelContext* context) override {","    const Tensor& tensor_in = context->input(0);","","    PoolParameters params{context,","                          ksize_,","                          stride_,"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["tmp = _PyObject_GetAttrId(obj, &PyId_names);","if (tmp == NULL) goto failed;","if (!PyList_Check(tmp)) {","PyErr_Format(PyExc_TypeError, \"Global field \\\"names\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","goto failed;"],"label":1}
{"cve":"CVE-2023-34474","code_chunks":["\/*","* ### Read CLUT Data ###","*\/","clut_data=(unsigned char *) AcquireQuantumMemory(1,header->clut_size);","if (clut_data == (unsigned char *) NULL)","ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",","image_info->filename);"],"label":1}
{"cve":"CVE-2018-20763","code_chunks":["memset(szLine, 0, sizeof(char)*lineSize);","sOK = fgets(szLine, lineSize, txt_in);","if (!sOK) return NULL;","if (unicode_type<=1) {","j=0;","len = (u32) strlen(szLine);"],"label":0}
{"cve":"CVE-2018-20177","code_chunks":["int i;","uint16 num_updates;","","in_uint16_le(s, num_updates);   \/* rectangles *\/","","for (i = 0; i < num_updates; i++)"],"label":0}
{"cve":"CVE-2021-4173","code_chunks":["plen = STRLEN(last);","pnl = vim_strnsave((char_u *)\"\\n\", plen + 1);","if (pnl != NULL)","mch_memmove(pnl + 1, last, plen + 1);","((char_u **)gap->ga_data)[gap->ga_len++] = pnl;","((char_u **)freegap->ga_data)[freegap->ga_len++] = pnl;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["","When the iterable is empty, return the start value.","This function is intended specifically for use with numeric values and may","reject non-numeric types.","[clinic start generated code]*\/","","static PyObject *"],"label":0}
{"cve":"PYSEC-2021-810","code_chunks":["errors::InvalidArgument(","\"Requires start >= limit when delta < 0: \", start, \"\/\", limit));","}","int64_t size = (std::is_integral<T>::value","? ((std::abs(limit - start) + std::abs(delta) - 1) \/","std::abs(delta))"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["        const TfLiteTensor* t = GetInput(context, node, i);","        TF_LITE_ENSURE(context, t != nullptr);","        input_scales[i] = t->params.scale;","        input_zero_points[i] = t->params.zero_point;","      }","","      data->params.input_scale = input_scales;"],"label":0}
{"cve":"CVE-2016-4303","code_chunks":["iperf_stats_callback(struct iperf_test *test)","{","    struct iperf_stream *sp;","    struct iperf_stream_result *rp = NULL;","    struct iperf_interval_results *irp, temp;","","    temp.omitted = test->omitting;"],"label":0}
{"cve":"CVE-2019-6978","code_chunks":["{","int x, y, pos;","Wbmp *wbmp;","","\/* create the WBMP *\/","if((wbmp = createwbmp(gdImageSX(image), gdImageSY(image), WBMP_WHITE)) == NULL) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","if (input->type != kTfLiteUInt8) return kTfLiteError;","if (NumElements(input->dims) == 0) return kTfLiteError;"],"label":0}
{"cve":"CVE-2019-19922","code_chunks":["#endif","#endif \/* SMP *\/","","}","","\/*"," * Helper functions to facilitate extracting info from tracepoints."],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_TYPES_EQ(context, op_context.axis->type, kTfLiteInt32);","TF_LITE_ENSURE_OK(context, InitializeTemporaries(context, node, &op_context));","","TfLiteTensor* resolved_axis = GetTemporary(context, node, \/*index=*\/1);","if (!IsConstantTensor(op_context.axis)) {","SetTensorToDynamic(op_context.output);","SetTensorToDynamic(resolved_axis);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["","if (exists_not_none(obj, &PyId_lower)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_lower);","if (tmp == NULL) goto failed;","res = obj2ast_expr(tmp, &lower, arena);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  Subgraph& active_branch_subgraph =","      *(*subgraphs)[active_branch_subgraph_index];","  for (int i = 0; i < active_branch_subgraph.inputs().size(); ++i) {","    const TfLiteTensor* input;","    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, i + 1, &input));","    TfLiteTensor* subgraph_input =","        active_branch_subgraph.tensor(active_branch_subgraph.inputs()[i]);"],"label":0}
{"cve":"CVE-2019-19947","code_chunks":["struct kvaser_cmd *cmd;","int rc;","","cmd = kmalloc(sizeof(*cmd), GFP_KERNEL);","if (!cmd)","return -ENOMEM;",""],"label":1}
{"cve":"CVE-2020-15888","code_chunks":["int actual = cast_int(L->top - ci->func) - 1;  \/* number of arguments *\/","int nextra = actual - nfixparams;  \/* number of extra arguments *\/","ci->u.l.nextraargs = nextra;","luaD_checkstack(L, p->maxstacksize + 1);","\/* copy function to the top of the stack *\/","setobjs2s(L, L->top++, ci->func);","\/* move fixed parameters to the top of the stack *\/"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tsize_t len, dlen = strlen(data);","\tuint8_t *buf = RLC_ALLOCA(uint8_t, 1 + 8 * RLC_PC_BYTES + dlen);","\tint result = 1;","","\tg1_null(g1);","\tg2_null(g2);","\tgt_null(e);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp24_read_bin(fp24_t a, const uint8_t *bin, size_t len) {","if (len != 16 * RLC_FP_BYTES && len != 24 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":0}
{"cve":"CVE-2018-6334","code_chunks":["is_anonymous = 1;","param = (char*)malloc(MAX_SIZE_ANONNAME);","snprintf(param, MAX_SIZE_ANONNAME, \"%u\", anonindex++);","} else {","is_anonymous = 0;","}"],"label":1}
{"cve":"CVE-2018-20177","code_chunks":["{","int y;","bmpdata = (uint8 *) xmalloc(width * height * Bpp);","for (y = 0; y < height; y++)","{","in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)],"],"label":1}
{"cve":"CVE-2019-13308","code_chunks":["status=MagickFalse;","continue;","}","for (x=0; x < (ssize_t) images->columns; x++)","{","switch (op)","{"],"label":1}
{"cve":"CVE-2022-4254","code_chunks":["goto done;","}","","ret = sss_certmap_get_search_filter(ctx, der, der_size, &filter, &domains);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"],"label":1}
{"cve":"CVE-2018-10887","code_chunks":["\t\/*","\t * Check that the base size matches the data we were given;","\t * if not we would underflow while accessing data from the","\t * base object, resulting in data corruption or segfault.","\t *\/","\tif ((hdr_sz(&base_sz, &delta, delta_end) < 0) || (base_sz != base_len)) {","\t\tgiterr_set(GITERR_INVALID, \"failed to apply delta: base size does not match given data\");"],"label":0}
{"cve":"PYSEC-2022-68","code_chunks":["TF_LITE_ENSURE(context, output_shape != nullptr);","int k = 0;","size_t embedding_size = 1;","size_t lookup_size = 1;","for (int i = 0; i < lookup_rank - 1; i++, k++) {","const size_t dim = dense_shape->data.i32[i];"],"label":0}
{"cve":"CVE-2023-23930","code_chunks":["","import p"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["break;","","","{ if (yang_read_extcomplex_str(trg, ext_instance, \"error-app-tag\", ext_name, s,","0, LY_STMT_ERRTAG)) {","YYABORT;","}"],"label":1}
{"cve":"CVE-2021-4110","code_chunks":["a->flags = b->flags;","a->body = b->body;","if (!MRB_PROC_CFUNC_P(a) && a->body.irep) {","mrb_irep_incref(NULL, (mrb_irep*)a->body.irep);","}","a->upper = b->upper;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE(context, IsDynamicTensor(output0));","const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output1 = GetOutput(context, node, 1);","TF_LITE_ENSURE(context, input->dims->size == output1->dims->size);","TF_LITE_ENSURE(context, input->dims->data[0] == output1->dims->data[0]);","return kTfLiteOk;"],"label":1}
{"cve":"CVE-2016-3672","code_chunks":["if (current->flags & PF_RANDOMIZE)","random_factor = arch_mmap_rnd();","","mm->mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor;","","if (mmap_is_legacy()) {","mm->mmap_base = mm->mmap_legacy_base;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* transposed_weights =","GetTemporary(context, node, user_data->transposed_weights_index);","if (!IsConstantTensor(weights)) {","SetTensorToDynamic(transposed_weights);","} else {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    TfLiteTensor* cell_state_quantized;","    TF_LITE_ENSURE_OK(context,","                      GetTemporarySafe(context, node, kCellStateQuantized,","                                       &cell_state_quantized));","    cell_state_quantized->type = input_to_output_weights->type;","    cell_state_quantized->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqual(cell_state_quantized->dims, cell_state->dims)) {"],"label":0}
{"cve":"CVE-2021-30022","code_chunks":["\t\tfor (i=(sps_sublayer_dpb_params_flag ? 0 : sps->max_sublayers-1); i < sps->max_sublayers; i++ ) {","\t\t\tgf_bs_read_ue_log_idx(bs, \"dpb_max_dec_pic_buffering_minus1\", i);","\t\t\tgf_bs_read_ue_log_idx(bs, \"dpb_max_num_reorder_pics\", i);","\t\t\tgf_bs_read_ue_log_idx(bs, \"dpb_max_latency_increase_plus1\", i);","\t\t}","\t}","\tgf_bs_read_ue_log(bs, \"sps_log2_min_luma_coding_block_size_minus2\");"],"label":0}
{"cve":"CVE-2019-15162","code_chunks":["","\t\tswitch (sockaddrin->ss_family)","\t{","\t\t{","\t\tstruct sockaddr_in *sockaddrin_ipv4;","\t\tstruct rpcap_sockaddr_in *sockaddrout_ipv4;",""],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["QRegExp fingerprintRegex(\".*peer fingerprint \\\\(SHA1\\\\): ([A-F0-9:]+) \\\\(SHA256\\\\): ([A-F0-9:]+)\");","if (!fingerprintRegex.exactMatch(line)) {","return;","}","","barrier::FingerprintData fingerprint_sha1 = {","barrier::fingerprint_type_to_string(barrier::FingerprintType::SHA1),"],"label":0}
{"cve":"CVE-2017-14608","code_chunks":["len = MIN (256, width-col);","ret = kodak_65000_decode (buf, len);","for (i=0; i < len; i++)","(pred[i & 1] += buf[i])]) >> 12) derror();","}","}","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["T reducer(const T current, const T in)) {","int64_t num_axis = NumElements(op_context->axis);","TfLiteTensor* temp_index = GetTemporary(context, node, \/*index=*\/0);","TfLiteTensor* resolved_axis = GetTemporary(context, node, \/*index=*\/1);","if (IsDynamicTensor(op_context->output)) {","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"PYSEC-2021-395","code_chunks":["    if (std::is_integral<T>::value) {","      size = static_cast<int64>(","          (std::abs(limit - start) + std::abs(delta) - 1) \/ std::abs(delta));","    } else {","      size = static_cast<int64>(std::ceil(std::abs((limit - start) \/ delta)));","    }","    Tensor* out = nullptr;"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["bool& isvalid, CryptoKey& session_key) {"],"label":1}
{"cve":"CVE-2021-42782","code_chunks":["r = SC_ERROR_INTERNAL;","if (rbuflen != 0) {","body = sc_asn1_find_tag(card->ctx, rbuf, rbuflen, 0x53, &bodylen); \/* Pass the outer wrapper asn1 *\/","if (body != NULL && bodylen != 0) {","fascn = sc_asn1_find_tag(card->ctx, body, bodylen, 0x30, &fascnlen); \/* Find the FASC-N data *\/","guid = sc_asn1_find_tag(card->ctx, body, bodylen, 0x34, &guidlen);",""],"label":1}
{"cve":"CVE-2021-31255","code_chunks":["\t}","","\tgf_free(tmp_str);","","\treturn GF_OK;","}",""],"label":0}
{"cve":"CVE-2023-42465","code_chunks":[],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input0->type);","","      for (int i = 0; i < data->values_count; i++) {","    const TfLiteTensor* input;","    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, i, &input));","    TF_LITE_ENSURE_EQ(context, input->params.zero_point,","                      output->params.zero_point);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\tTEST_ASSERT(gt_cmp(a, b) != RLC_EQ, end);","\t\t}","\t\tTEST_END;","","\t\tTEST_CASE(\"copy and comparison are consistent\") {","\t\t\tgt_rand(a);","\t\t\tgt_rand(b);"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["","        if (parse_argument_types(ufunc, argtypes, varargs) == FAIL)","    {","\tSOURCING_LNUM = lnum_save;","\tgoto erret;","    }",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","TF_LITE_ENSURE_EQ(context, NumDimensions(value), 0);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","output->type = value->type;","","if (IsConstantTensor(dims)) {"],"label":1}
{"cve":"CVE-2022-0496","code_chunks":["\t\t\t\tcurrent_line = idx;","\t\t\t\tcurrent_point = j;","\t\t\t\tgoto create_open_path;","\t\t\tnext_open_path_j:;","\t\t\t}","\t\t}",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* input_weights;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","const TfLiteTensor* recurrent_weights;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2019-13308","code_chunks":["if (images->matte != MagickFalse)","{","Cr->opacity=Ar->opacity+Br->opacity;","Ci->opacity=Ai->opacity+Bi->opacity;","}","break;"],"label":1}
{"cve":"CVE-2018-5729","code_chunks":["            subtree = strdup(xargs.containerdn);","        } else if (ldap_context->lrparams->containerref && strlen(ldap_context->lrparams->containerref) != 0) {","            \/*","             * Here the subtree should be changed with","             * principalcontainerreference attribute value","             *\/","            subtree = strdup(ldap_context->lrparams->containerref);"],"label":0}
{"cve":"CVE-2019-19905","code_chunks":["     *  (non-level-based) game state","     *  other levels","     *\/","    set_savefile_name(TRUE);","    sfd = create_savefile();","    if (sfd < 0) {","        raw_printf(\"\\nCannot recover savefile %s.\\n\", SAVEF);"],"label":0}
{"cve":"CVE-2018-18314","code_chunks":["{","\/* See if this is a [:posix:] class. *\/","bool is_posix_class = (OOB_NAMEDCLASS","< handle_possible_posix(pRExC_state,","RExC_parse + 1,","NULL,"],"label":1}
{"cve":"CVE-2018-8796","code_chunks":["STREAM s;","int length;","int tagval;","struct stream packet;","","s = tcp_recv(NULL, 4);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), data->values_count);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input0;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input0));","const int dimension_size = NumDimensions(input0) + 1;","if (data->axis < 0) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["          for (int i = 0; i < a0->dims->size; ++i) {","            num *= a0->dims->data[i];","          }","          for (int i = 0; i < num; i++) {","            out->data.f[i] = a0->data.f[i] + a1->data.f[i];","          }","          if (out->buffer_handle != kTfLiteNullBufferHandle) {"],"label":0}
{"cve":"CVE-2023-0358","code_chunks":["GF_EXPORT","GF_VPConfig *gf_odf_vp_cfg_read(u8 *dsi, u32 dsi_size)","{","\tGF_BitStream *bs = gf_bs_new(dsi, dsi_size, GF_BITSTREAM_READ);","\tGF_VPConfig *cfg = gf_odf_vp_cfg_read_bs(bs, GF_FALSE);","\tgf_bs_del(bs);","\treturn cfg;"],"label":0}
{"cve":"CVE-2017-11462","code_chunks":["if (status)","return status;","","\/* now free up the space for the union context structure *\/","free(ctx->mech_type->elements);"],"label":1}
{"cve":"PYSEC-2021-575","code_chunks":["std::vector<int32> output_thresholds;","std::vector<Eigen::VectorXf> output_left_node_contribs;","std::vector<Eigen::VectorXf> output_right_node_contribs;","std::vector<string> output_split_types;","","for (int32_t node_id = node_id_first; node_id < node_id_last; ++node_id) {","float best_gain = std::numeric_limits<float>::lowest();"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["GetTemporary(context, node, \/*index=*\/1);","hidden_state_quantized->type = input_weights->type;","hidden_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(hidden_state_quantized->dims,"],"label":1}
{"cve":"CVE-2020-6018","code_chunks":["const void *pAdditionalAuthenticationData, size_t cbAuthenticationData",") {","unsigned long long pcbEncryptedDataAndTag_longlong = *pcbEncryptedDataAndTag;","","crypto_aead_aes256gcm_encrypt_afternm(","static_cast<unsigned char*>( pEncryptedDataAndTag ), &pcbEncryptedDataAndTag_longlong,"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["        TfLiteTensor* row_sums;","        TF_LITE_ENSURE_OK(context,","                          GetTemporarySafe(context, node, kRowSums, &row_sums));","        const int row_sums_size = row_sums->dims->data[0];","        if (is_sparse) {","          TfLiteTensor* input_to_input_weights_ledger =","              &context->tensors[op_data->ledger_index +"],"label":0}
{"cve":"CVE-2023-41337","code_chunks":["if ((ret = ptls_decode32(ticket_age_add, &src, end)) != 0)","goto Exit;","ptls_decode_open_block(src, end, 2, {","*server_name = ptls_iovec_init(src, end - src);","src = end;","});","ptls_decode_open_block(src, end, 1, {"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"CVE-2021-33910","code_chunks":["_cleanup_free_ char *p = NULL;","char *s;","","assert(f);","assert(ret);",""],"label":0}
{"cve":"CVE-2020-15212","code_chunks":["int previous_segment_id = -1;","for (int i = 0; i < segment_id_size; i++) {","const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];","if (i == 0) {","TF_LITE_ENSURE_EQ(context, current_segment_id, 0);","} else {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* axis;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxisTensor, &axis));"],"label":0}
{"cve":"CVE-2021-24025","code_chunks":["    HHVM_RC_STR(MCRYPT_TRIPLEDES, \"tripledes\");","    HHVM_RC_STR(MCRYPT_TWOFISH, \"twofish\");","    HHVM_RC_STR(MCRYPT_WAKE, \"wake\");","    HHVM_RC_STR(MCRYPT_XTEA, \"xtea\");","","    HHVM_FE(mcrypt_module_open);","    HHVM_FE(mcrypt_module_close);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["GetOutput(context, node, kResourceHandleTensor);","TF_LITE_ENSURE(context, resource_handle_tensor != nullptr);","TF_LITE_ENSURE_EQ(context, resource_handle_tensor->type, kTfLiteInt32);","TfLiteIntArray* outputSize = TfLiteIntArrayCreate(1);","outputSize->data[0] = 1;"],"label":1}
{"cve":"CVE-2016-4564","code_chunks":["if (clone_info->stroke_pattern != (Image *) NULL)","clone_info->fill_pattern=CloneImage(clone_info->stroke_pattern,0,0,","MagickTrue,exception);","clone_info->stroke.alpha=(Quantum) TransparentAlpha;","clone_info->stroke_width=0.0;","clone_info->fill_rule=NonZeroRule;","status=MagickTrue;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"body\\\" missing from AsyncFunctionDef\");","            return 1;","        }","        else {","            int res;","            Py_ssize_t len;"],"label":0}
{"cve":"CVE-2022-23537","code_chunks":["attr_val_len = (attr_val_len + 3) & (~3);","","\/* Check length *\/","if (pdu_len < attr_val_len) {","pj_str_t err_msg;","char err_msg_buf[80];",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void bn_rec_tnaf(int8_t *tnaf, int *len, const bn_t k, int8_t u, int m, int w) {","int i, l;","bn_t tmp, r0, r1;","int8_t beta[64], gama[64];"],"label":1}
{"cve":"CVE-2016-10012","code_chunks":["\tcomp = &newkey->comp;","","\tif ((r = sshbuf_get_cstring(b, &enc->name, NULL)) != 0 ||","\t    (r = sshbuf_get(b, &enc->cipher, sizeof(enc->cipher))) != 0 ||","\t    (r = sshbuf_get_u32(b, (u_int *)&enc->enabled)) != 0 ||","\t    (r = sshbuf_get_u32(b, &enc->block_size)) != 0 ||","\t    (r = sshbuf_get_string(b, &enc->key, &keylen)) != 0 ||"],"label":0}
{"cve":"CVE-2019-20176","code_chunks":["wrstr(f, tls_fd, alloca_subdir);","wrstr(f, tls_fd, \":\\r\\n\\r\\n\");","listdir(depth + 1U, f, tls_fd, alloca_subdir);","ALLOCA_FREE(alloca_subdir);","if (matches >= max_ls_files) {","goto toomany;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["size_t fp_bits(const fp_t a) {","int i = RLC_FP_DIGS - 1;","","while (i >= 0 && a[i] == 0) {"],"label":0}
{"cve":"CVE-2020-5238","code_chunks":["yych = *(marker = p);","if (yych <= '\/') {","if (yych <= 0x1F) {","if (yych <= '\\t') {"],"label":1}
{"cve":"CVE-2017-3733","code_chunks":["    int al = SSL_AD_UNRECOGNIZED_NAME;","","#ifndef OPENSSL_NO_EC","    \/*","     * If we are client and using an elliptic curve cryptography cipher","     * suite, then if server returns an EC point formats lists extension it","     * must contain uncompressed."],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep2_read_bin(ep2_t a, const uint8_t *bin, int len) {","if (len == 1) {","if (bin[0] == 0) {","ep2_set_infty(a);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["bool IsPadOpSupported(const TfLiteRegistration* registration,","const TfLiteNode* node, TfLiteContext* context) {","const TfLiteTensor* padding = GetInput(context, node, 1);","if (!IsConstantTensor(padding)) {","TF_LITE_KERNEL_LOG(context,","\"%s: Only constant padding is supported for PAD.\","],"label":1}
{"cve":"CVE-2021-40145","code_chunks":["\treturn NULL;","}","","BGD_DECLARE(gdImagePtr) gdImageCreateFromGd2Part (FILE * inFile, int srcx, int srcy, int w, int h)","{","\tARG_NOT_USED(inFile);","\tARG_NOT_USED(srcx);"],"label":0}
{"cve":"CVE-2022-45873","code_chunks":["","if (ret) {","r = RET_NERRNO(pipe2(return_pipe, O_CLOEXEC));","if (r < 0)","return r;","}"],"label":1}
{"cve":"CVE-2021-46784","code_chunks":["                                         CommIoCbPtrFun(gopherSendComplete, gopherState));","    Comm::Write(gopherState->serverConn, &mb, call);","","    if (!gopherState->entry->makePublic())","        gopherState->entry->makePrivate(true);","}",""],"label":0}
{"cve":"CVE-2020-15193","code_chunks":["}","","dlm_tensor->dl_tensor.shape = &(*shape_arr)[0];","dlm_tensor->dl_tensor.strides = &(*stride_arr)[0];","dlm_tensor->dl_tensor.byte_offset =","0;    return static_cast<void*>(dlm_tensor);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  TF_LITE_ENSURE_EQ(context, input_to_output_weights->dims->data[1], n_input);","","  const TfLiteTensor* recurrent_to_output_weights;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kRecurrentToOutputWeightsTensor,","                                 &recurrent_to_output_weights));","  TF_LITE_ENSURE_EQ(context, recurrent_to_output_weights->dims->size, 2);"],"label":0}
{"cve":"CVE-2017-12666","code_chunks":["static MagickBooleanType WriteINLINEImage(const ImageInfo *image_info,","Image *image,ExceptionInfo *exception)","{","char","*base64,","message[MagickPathExtent];"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["\t\/* Report if there are missing '}'s. If there are missing '{'s it will already have been reported *\/","\tif (block_depth > 0)","\t\treport_config_error(CONFIG_MISSING_EOB, \"There are %d missing '%s's or extra '%s's\", block_depth, EOB, BOB);","","\t\/* We have finished reading the configuration files, so any configuration","\t * errors report from now mustn't include a reference to the config file name *\/","\tcurrent_file_line_no = 0;"],"label":0}
{"cve":"CVE-2021-40574","code_chunks":["}","}","sptr = (u16 *)szLine;","i = (u32) gf_utf8_wcstombs(szLineConv, 1024, (const unsigned short **) &sptr);","szLineConv[i] = 0;","strcpy(szLine, szLineConv);","\/*this is ugly indeed: since input is UTF16-LE, there are many chances the gf_fgets never reads the \\0 after a \\n*\/"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tfp8_null(r);","\tfp8_null(s);","","\tRLC_TRY {","\t\tfp8_new(r);","\t\tfp8_new(s);","\t\tfor (int i = 0; i < (1 << (FP_WIDTH - 2)); i ++) {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","output->type = input->type;","if (IsConstantTensor(axis)) {","int axis_value;"],"label":1}
{"cve":"CVE-2016-1000004","code_chunks":["xmlNodePtr SimpleXMLElement_exportNode(const Object& sxe) {","assert(sxe->instanceof(SimpleXMLElement_classof()));","auto data = Native::data<SimpleXMLElement>(sxe.get());","return php_sxe_get_first_node(data, data->nodep());","}"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["\"Underscores in numeric literals are only supported in Python 3.6 and greater\");","return NULL;","}","pynum = parsenumber(c, s);","if (!pynum)","return NULL;",""],"label":1}
{"cve":"CVE-2018-19044","code_chunks":["{","FILE *file = fopen_safe(stats_file, \"w\");","element e;","vrrp_t *vrrp;","","if (!file) {"],"label":0}
{"cve":"CVE-2022-24786","code_chunks":["const void *buf,","pj_size_t length)","{","pjmedia_rtcp_common *hdr = (pjmedia_rtcp_common*) buf;","","PJ_ASSERT_RETURN(buf, PJ_EINVAL);",""],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["m_pZeroconfService = NULL;","}","","if (m_AppConfig->autoConfig() || barrierType() == barrierServer) {","m_pZeroconfService = new ZeroconfService(this);","}","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp54_write_bin(uint8_t *bin, size_t len, const fp54_t a, int pack) {","fp54_t t;","","fp54_null(t);"],"label":0}
{"cve":"CVE-2022-24754","code_chunks":["digest.slen = PJSIP_MD5STRLEN;","","\/* Create digest for comparison. *\/","pjsip_auth_create_digest(&digest,","&hdr->credential.digest.nonce,","&hdr->credential.digest.nc,","&hdr->credential.digest.cnonce,"],"label":1}
{"cve":"CVE-2020-14954","code_chunks":["}","if (ans == MUTT_YES)","{","enum ImapExecResult rc = imap_exec(adata, \"STARTTLS\", IMAP_CMD_NO_FLAGS);","if (rc == IMAP_EXEC_FATAL)","goto bail;","if (rc != IMAP_EXEC_ERROR)"],"label":1}
{"cve":"CVE-2019-11411","code_chunks":["static void Np_toString(js_State *J)","{","char buf[32];","js_Object *self = js_toobject(J, 0);","int radix = js_isundefined(J, 1) ? 10 : js_tointeger(J, 1);","if (self->type != JS_CNUMBER)"],"label":1}
{"cve":"CVE-2016-6912","code_chunks":["","argb = (uint8_t *)gdMalloc(gdImageSX(im) * 4 * gdImageSY(im));","if (!argb) {","return;","}","p = argb;"],"label":1}
{"cve":"CVE-2023-30549","code_chunks":["void *end;","int free, min_offs;","","if (!EXT4_INODE_HAS_XATTR_SPACE(inode))","return 0;",""],"label":0}
{"cve":"CVE-2019-13220","code_chunks":["len <<= 1;","if (len == f->blocksize_0) return f->window[0];","if (len == f->blocksize_1) return f->window[1];","assert(0);","return NULL;","}",""],"label":1}
{"cve":"CVE-2021-3658","code_chunks":["{","\tstruct btd_adapter *adapter = user_data;","\tconst struct mgmt_rp_get_connections *rp = param;","\tuint16_t i, conn_count;","","\tif (status != MGMT_STATUS_SUCCESS) {","\t\tbtd_error(adapter->dev_id,"],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["    (salt[2] >= 'a') && (salt[2] <= 'z') &&","    (salt[3] == '$') &&","    (salt[4] >= '0') && (salt[4] <= '3') &&","    (salt[5] >= '0') && (salt[5] <= '9') &&","    (salt[6] == '$')) {","        char output[61];",""],"label":0}
{"cve":"CVE-2018-12436","code_chunks":["}","#endif","","for (; err == MP_OKAY;) {","if (++loop_check > 64) {","err = RNG_FAILURE_E;"],"label":1}
{"cve":"CVE-2022-0696","code_chunks":["++hi;","while (HASHITEM_EMPTY(hi))","++hi;","return cat_prefix_varname('b', hi->hi_key);","}",""],"label":1}
{"cve":"CVE-2022-1587","code_chunks":["","\/* Aligning ovector to even number of sljit words. *\/","if ((common->ovector_start & sizeof(sljit_sw)) != 0)","  common->ovector_start += sizeof(sljit_sw);","","if (common->start_ptr == 0)","  common->start_ptr = OVECTOR(0);"],"label":0}
{"cve":"CVE-2020-5238","code_chunks":["cmark_parser *parser,","cmark_node *parent_container,","unsigned char *input, int len) {","bufsize_t matched =","scan_table_start(input, len, cmark_parser_get_first_nonspace(parser));","cmark_node *table_header;"],"label":1}
{"cve":"CVE-2020-1916","code_chunks":["char *string_crypt(const char *key, const char *salt) {","assertx(key);","assertx(salt);","","char random_salt[12];","if (!*salt) {"],"label":0}
{"cve":"CVE-2018-8099","code_chunks":["git_index_entry entry = {{0}};","bool compressed = index->version >= INDEX_VERSION_NUMBER_COMP;","char *tmp_path = NULL;","","if (INDEX_FOOTER_SIZE + minimal_entry_size > buffer_size)","return -1;",""],"label":0}
{"cve":"CVE-2020-5291","code_chunks":["}","","if (opt_userns_block_fd != -1)","{","char b[1];","(void) TEMP_FAILURE_RETRY (read (opt_userns_block_fd, b, 1));"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE(context, a1->data.f);","TfLiteTensor* out = GetOutput(context, node, 0);","TF_LITE_ENSURE(context, out);","TF_LITE_ENSURE(context, out->data.f);","int num = a0->dims->data[0];"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TF_LITE_ENSURE(context,","data->type == kTfLiteInt32 || data->type == kTfLiteFloat32);","TF_LITE_ENSURE_EQ(context, segment_ids->type, kTfLiteInt32);"],"label":1}
{"cve":"PYSEC-2022-88","code_chunks":["if (!IsIdentity(node) && !IsIdentityN(node)) {","return true;","}","","if (nodes_to_preserve_.find(node.name()) != nodes_to_preserve_.end()) {","return false;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"name\\\" missing from alias\");","return 1;","}"],"label":1}
{"cve":"CVE-2017-15377","code_chunks":["if (id->flags & ISDATAAT_RELATIVE) {","if (det_ctx->buffer_offset + id->dataat > buffer_len) {","SCLogDebug(\"det_ctx->buffer_offset + id->dataat %\"PRIu32\" > %\"PRIu32, det_ctx->buffer_offset + id->dataat, buffer_len);","if (id->flags & ISDATAAT_NEGATED)","goto match;","goto no_match;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* cond_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputConditionTensor,","&cond_tensor));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["BENCH_RUN(\"cp_bdpe_enc\") {","out_len = RLC_BN_BITS \/ 8 + 1;","rand_bytes(out, 1);","in = out[0] % bn_get_prime(47);","BENCH_ADD(cp_bdpe_enc(out, &out_len, in, pub));"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  const TfLiteTensor* bw_aux_input_to_forget_weights =","      GetOptionalInputTensor(context, node, kBwAuxInputToForgetWeightsTensor);","  const TfLiteTensor* bw_aux_input_to_cell_weights =","      GetOptionalInputTensor(context, node, kBwAuxInputToCellWeightsTensor);","  const TfLiteTensor* bw_aux_input_to_output_weights =","      GetOptionalInputTensor(context, node, kBwAuxInputToOutputWeightsTensor);",""],"label":0}
{"cve":"CVE-2023-28487","code_chunks":["\t    if (sessions == NULL)","\t\tsudo_fatalx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));","\t    sessions_size *= 2;","\t}","\tif ((sessions[sessions_len] = strdup(dp->d_name)) == NULL)","\t    sudo_fatalx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));","\tsessions_len++;"],"label":0}
{"cve":"CVE-2022-36012","code_chunks":["DVLOG(1) << \"Processing node \" << node.name() << \"\\n\";","if (node.op().empty()) return InvalidArgument(\"empty op type\");","OperationState state(unknown_loc, absl::StrCat(\"tfg.\", node.op()));","for (const std::string& input : node.input())","state.operands.push_back(","value_manager.GetValueOrCreatePlaceholder(input));","state.types.push_back(placeholder_ty);"],"label":1}
{"cve":"PYSEC-2020-258","code_chunks":["    return nullptr;","  }","  if (TF_PREDICT_TRUE(PyFloat_Check(v))) {","    const double as_double = PyFloat_AS_DOUBLE(v);","    *out = static_cast<T>(as_double);","        if (TF_PREDICT_FALSE(CheckForOverflow<T>(as_double, out))) {","      return ErrorOutOfRangeDouble;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp24_exp_cyc_sps(fp24_t c, const fp24_t a, const int *b, size_t len,","int sign) {","size_t i, j, k, w = len;","fp24_t t, *u = RLC_ALLOCA(fp24_t, w);","","if (len == 0) {"],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["if (*(scanner->curptr+1) != '=') {","on_scanner_error(scanner);","return;","}"],"label":1}
{"cve":"CVE-2017-1000251","code_chunks":[],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["res = obj2ast_identifier(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"Global field \\\"names\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"CVE-2016-5157","code_chunks":["FILE *fbase=NULL, *ftest=NULL;","int same = 0;","char lbase[512];","char strbase[512];","char ltest[512];","char strtest[512];"],"label":0}
{"cve":"CVE-2022-3821","code_chunks":["t = b;","}","","n = MIN((size_t) k, l);","","l -= n;","p += n;"],"label":1}
{"cve":"PYSEC-2021-649","code_chunks":["&input_st));","","auto input_shape_t = input_shape->vec<int64>();","const int64 N = input_shape_t(0);","","Tensor sparse_handles(DT_INT64, TensorShape({N}));"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["<< \" connect_seq \" << reply.connect_seq","<< \" global_seq \" << reply.global_seq","<< \" proto \" << reply.protocol_version","<< \" flags \" << (int)reply.flags","<< \" features \" << reply.features","<< dendl;"],"label":1}
{"cve":"CVE-2016-5356","code_chunks":["\t\t\t}","\t\t\treturn FALSE;","\t\t}","\t\tif (empty_line(line)) {","\t\t\tbreak;","\t\t}","\t\tif ((n = parse_single_hex_dump_line(line, pd, i*16)) == -1) {"],"label":0}
{"cve":"CVE-2022-23575","code_chunks":["","Status OpLevelCostEstimator::PredictCropAndResize(const OpContext& op_context,","                                                  NodeCosts* node_costs) const {","  bool found_unknown_shapes = false;","","  const auto method = op_context.op_info.attr().find(\"method\");","  bool use_bilinear_interp;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }","        if (_PyObject_LookupAttrId(obj, &PyId_slice, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["int num_returned_algos = 0;","cudnnConvolutionBwdDataAlgoPerf_t perf_results[num_requested_algos];","","RETURN_IF_CUDNN_ERROR(cudnnGetConvolutionBackwardDataAlgorithm_v7(","cudnn.handle(), filter.handle(), output_nd.handle(), conv.handle(),","input_nd.handle(), num_requested_algos, &num_returned_algos,"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_EQ(context, SizeOfDimension(padding_matrix, 0),","                    NumDimensions(input_tensor));","","  if (!IsConstantTensor(padding_matrix)) {","    SetTensorToDynamic(output_tensor);","    return kTfLiteOk;","  }"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["char *k1, *k2;","crypto_suite *cs = &crypto_suites[crypto_idx];","unsigned key_len, salt_len;","","key_len = cs->cipher_key_len - cs->cipher_salt_len;","salt_len = cs->cipher_salt_len;"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":[" *\/","","void","zep_print(netdissect_options *ndo,","\t  const u_char *bp, u_int len)","{","\tuint8_t version, inner_len;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["ep4_t t1[1 << (EP_WIDTH \/ 2)];","ep4_t t[1 << EP_WIDTH];","bn_t n;","size_t l0, l1, w = EP_WIDTH \/ 2;","uint8_t w0[2 * RLC_FP_BITS], w1[2 * RLC_FP_BITS];","","bn_null(n);"],"label":0}
{"cve":"CVE-2022-43995","code_chunks":["    debug_decl(sudo_passwd_cleanup, SUDOERS_DEBUG_AUTH);","","    if (pw_epasswd != NULL)","\tfreezero(pw_epasswd, strlen(pw_epasswd));","","    debug_return_int(AUTH_SUCCESS);","}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","bool requires_broadcast = !HaveSameShapes(input1, input2);","switch (input1->type) {","Comparison<bool, reference_ops::EqualFn>(input1, input2, output,"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["bw_hidden_state_quantized->type = fw_input_weights->type;","bw_hidden_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(bw_hidden_state_quantized->dims,"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["context, affine_quantization->scale->size,","filter->dims->data[affine_quantization->quantized_dimension]);","node->temporaries->data[data->input_offset_index] = data->input_offset_id;","TfLiteTensor* input_offsets ="],"label":1}
{"cve":"CVE-2018-10887","code_chunks":["","if (base_len < off + len || res_sz < len)","goto fail;","memcpy(res_dp, base + off, len);","res_dp += len;","res_sz -= len;"],"label":1}
{"cve":"CVE-2020-4032","code_chunks":["return FALSE;","}","diff = start - end;","if (diff > 0)","{","WLog_Print(update->log, WLOG_DEBUG,"],"label":1}
{"cve":"CVE-2022-36027","code_chunks":["BroadcastVector<int64_t>(shaped.getDimSize(quant_dim), zero_points)) {","return {};","}","} else if ((new_shape.size() == shape.size() + 1) && new_shape.back() == 1) {"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["goto invalid;","t = GET_BE_U_4(cp);","if (NULL == (tm = gmtime(&t)))","ND_PRINT(\": gmtime() error\");","else if (0 == strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm))","ND_PRINT(\": strftime() error\");"],"label":1}
{"cve":"CVE-2022-3352","code_chunks":["int\t    can_unload = !buf->b_locked;","","if (can_unload && updating_screen)","{","win_T\t*wp;",""],"label":0}
{"cve":"CVE-2019-14857","code_chunks":["","oidc_debug(r, \"enter (url=%s)\", url);","","if (oidc_is_front_channel_logout(url)) {","return oidc_handle_logout_request(r, c, session, url);","} else if (oidc_is_back_channel_logout(url)) {"],"label":1}
{"cve":"CVE-2016-10161","code_chunks":["{","\/* this is the case where we have less data than planned *\/","php_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Unexpected end of serialized data\");","return 0; \/* not sure if it should be 0 or 1 here? *\/","}","#line 607 \"ext\/standard\/var_unserializer.c\""],"label":1}
{"cve":"CVE-2021-33361","code_chunks":["ptr->time_scale = gf_bs_read_u32(bs);","","ptr->entry_count = gf_bs_read_u32(bs);","if (ptr->size \/ ( (ptr->long_offsets ? 16 : 12) ) < ptr->entry_count)","return GF_ISOM_INVALID_FILE;",""],"label":1}
{"cve":"CVE-2022-4066","code_chunks":["ssize_t w;","off_t pos = 0;","if (res->flags & OR_CHUNKED) {","char tmp[16];","snprintf(tmp, sizeof(tmp), \"%X\\r\\n\", (unsigned int)res->buffer_pos);","if ((w = write(req, tmp, strlen(tmp))) <= 0) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, recurrent_to_cell_weights->dims->data[1],","n_output);","","const bool cifg_weights_all_or_none =","((input_to_input_weights != nullptr) &&","(recurrent_to_input_weights != nullptr)) ||"],"label":1}
{"cve":"CVE-2022-26530","code_chunks":["\t\t\t\tstate->ext_session_lock_v1, surface->surface, surface->output);","\t\text_session_lock_surface_v1_add_listener(surface->ext_session_lock_surface_v1,","\t\t\t\t&ext_session_lock_surface_v1_listener, surface);","\t} else {","\t\tsurface->layer_surface = zwlr_layer_shell_v1_get_layer_surface(","\t\t\t\tstate->layer_shell, surface->surface, surface->output,","\t\t\t\tZWLR_LAYER_SHELL_V1_LAYER_OVERLAY, \"lockscreen\");"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params = reinterpret_cast<TfLiteSubParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"],"label":1}
{"cve":"CVE-2018-12453","code_chunks":["\"CREATE      <key> <groupname> <id or $>  -- Create a new consumer group.\",","\"SETID       <key> <groupname> <id or $>  -- Set the current group ID.\",","\"DELGROUP    <key> <groupname>            -- Remove the specified group.\",","\"DELCONSUMER <key> <groupname> <consumer> -- Remove the specified conusmer.\",","\"HELP                                     -- Prints this help.\",","NULL","    };"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, bw_input_to_output_weights->type,","fw_input_to_output_weights->type);","","const TfLiteTensor* fw_recurrent_to_output_weights ="],"label":1}
{"cve":"CVE-2018-19044","code_chunks":["vrrp_print_stats(void)","{","FILE *file;","file = fopen (stats_file, \"w\");","","if (!file) {","log_message(LOG_INFO, \"Can't open %s (%d: %s)\","],"label":1}
{"cve":"CVE-2023-4756","code_chunks":["if (parser->line_buffer[parser->line_pos]=='#') {","parser->line_size = parser->line_pos;","}","else if ((parser->line_buffer[parser->line_pos]=='\/') && (parser->line_buffer[parser->line_pos+1]=='\/') ) parser->line_size = parser->line_pos;","","if (parser->line_size == parser->line_pos) {"],"label":1}
{"cve":"CVE-2023-42465","code_chunks":[],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["                    GetOutputSafe(context, node, kOutputTensor, &output));","","  reference_ops::ReverseSequence<T, TS>(","      seq_lengths, seq_dim, batch_dim, GetTensorShape(input),","      GetTensorData<T>(input), GetTensorShape(output),","      GetTensorData<T>(output));",""],"label":0}
{"cve":"CVE-2022-1052","code_chunks":["\t\t\tfree (mo->symbols[i].name);","\t\t}","\t\tfree (mo->symbols);","\t}","\tfree (mo->segs);","\tfree (mo->sects);","\tfree (mo->symtab);"],"label":0}
{"cve":"CVE-2020-14404","code_chunks":["seg = data+(j*w);                                           \\","if (seg[x] != cl2) {break;}                                 \\","i = x;                                                      \\","while ((seg[i] == cl2) && (i < w)) i += 1;                  \\","i -= 1;                                                     \\","if (j == y) vx = hx = i;                                    \\","if (i < vx) vx = i;                                         \\"],"label":1}
{"cve":"CVE-2016-3134","code_chunks":["\tint ret;","","\tif (!ns_capable(sock_net(sk)->user_ns, CAP_NET_ADMIN))","\t\treturn -EPERM;","","\tswitch (cmd) {","\t\tret = get_info(sock_net(sk), user, len, 0);"],"label":0}
{"cve":"CVE-2022-0158","code_chunks":["\t\t    else","\t\t\tret = NOTDONE;","\t\t    break;","","\t\/*","\t * List: [expr, expr]","\t *\/"],"label":0}
{"cve":"PYSEC-2022-77","code_chunks":["    OP_REQUIRES_OK(context, input_st.IndicesValid());","","            TensorShape output_shape;","    OP_REQUIRES_OK(context, TensorShapeUtils::MakeShape(","                                input_shape_vec.data() + 1,","                                input_shape->NumElements() - 1, &output_shape));",""],"label":0}
{"cve":"CVE-2018-9336","code_chunks":["{","goto out;","}","free(RemoveListItem(&(*lists)[undo_type], CmpWString, wide_name));","}",""],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["}","for (c=0; c < 16; c+=2) {","i = len[((c & 1) << 1) | (c >> 3)];","RAW(row,col+c) = ((signed) ph1_bits(i) << (32-i) >> (32-i)) +","(dir ? RAW(row+(~c | -2),col+c) : col ? RAW(row,col+(c | -2)) : 128);","if (c == 14) c = -1;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["bdpe_new(pub);","bdpe_new(prv);","","BENCH_ONE(\"cp_bdpe_gen\", cp_bdpe_gen(pub, prv, prime, RLC_BN_BITS), 1);","","BENCH_RUN(\"cp_bdpe_enc\") {","out_len = RLC_BN_BITS \/ 8 + 1;"],"label":0}
{"cve":"CVE-2022-0476","code_chunks":["\t\t\/* TODO: Not yet fully parsed or utilised *\/","\t\tobj->streams.comments_a = R_NEWS (ut8, COMMENTS_SIZE);","\t\tif (!obj->streams.comments_a) {","\t\t\tbreak;","\t\t}","\t\tr = r_buf_read_at (obj->b, entry->location.rva, obj->streams.comments_a, COMMENTS_SIZE);","\t\tif (r != COMMENTS_SIZE) {"],"label":0}
{"cve":"CVE-2020-15121","code_chunks":["#if __SDB_WINDOWS__","char *p = strstr (ptr, \":\\\\\");","if (p) {","ptr = p + 2;","}","#endif","while ((ptr = strchr (ptr, slash))) {"],"label":1}
{"cve":"PYSEC-2021-259","code_chunks":["    TensorProto tp;","    if (!tp.ParseFromString(tensor_proto_strs[tensor_proto_strs_index++])) {","      return errors::Internal(\"Could not parse TensorProto\");","    }","    if (!out->at(i).FromProto(tp)) {","      return errors::Internal(\"Could not parse Tensor\");","    }"],"label":0}
{"cve":"CVE-2018-8795","code_chunks":["x = CVAL(in);","if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;"],"label":1}
{"cve":"CVE-2018-1000115","code_chunks":["settings.use_cas = true;","settings.access = 0700;","settings.port = 11211;","settings.udpport = 11211;","\/* By default this string should be NULL for getaddrinfo() *\/","settings.inter = NULL;","settings.maxbytes = 64 * 1024 * 1024; \/* default is 64MB *\/"],"label":1}
{"cve":"CVE-2020-26247","code_chunks":["static VALUE read_memory(VALUE klass, VALUE content)","{","xmlRelaxNGParserCtxtPtr ctx = xmlRelaxNGNewMemParserCtxt(","(const char *)StringValuePtr(content),","(int)RSTRING_LEN(content)",");"],"label":1}
{"cve":"CVE-2021-3744","code_chunks":["DMA_BIDIRECTIONAL);","if (ret)","goto e_tag;","ret = ccp_set_dm_area(&tag, 0, p_tag, 0, authsize);","if (ret)","goto e_tag;"],"label":1}
{"cve":"CVE-2019-19333","code_chunks":["#endif","","    \/* add to the context's list of modules *\/","    if (module->ctx->models.used == module->ctx->models.size) {","        newlist = realloc(module->ctx->models.list, (2 * module->ctx->models.size) * sizeof *newlist);","        LY_CHECK_ERR_RETURN(!newlist, LOGMEM(module->ctx), -1);","        for (i = module->ctx->models.size; i < module->ctx->models.size * 2; i++) {"],"label":0}
{"cve":"CVE-2023-26485","code_chunks":["while (tmp->prev) {","tmp = tmp->prev;","list_number += 1;","}","snprintf(listmarker, LISTMARKER_SIZE, \"%d%s%s\", list_number,","list_delim == CMARK_PAREN_DELIM ? \")\" : \".\","],"label":1}
{"cve":"CVE-2021-42779","code_chunks":["if (file->ef_structure == SC_FILE_EF_TRANSPARENT)","sz = file->size;","else","sz = (file->record_length + 2) * file->record_count;","","*out = calloc(sz, 1);"],"label":1}
{"cve":"PYSEC-2020-300","code_chunks":["fixed_prefix = io::JoinPath(dir, fixed_prefix);","eval_pattern = io::JoinPath(dir, eval_pattern);","}","bool is_directory = pattern[pattern.size() - 1] == '\/';","#ifdef PLATFORM_WINDOWS","is_directory = is_directory || pattern[pattern.size() - 1] == '\\\\';"],"label":1}
{"cve":"CVE-2019-19333","code_chunks":["goto error;","}","","make_canonical(ctx, LY_TYPE_INT8, value_, &num, NULL);","","if (store) {","\/* store the result *\/"],"label":1}
{"cve":"CVE-2016-6912","code_chunks":["{","uint8_t *argb;","int x, y;","uint8_t *p;","uint8_t *out;","size_t out_size;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;"],"label":1}
{"cve":"CVE-2022-28927","code_chunks":["if(ext.sort_flag)","{","bool failed = true;","if(ext.sort_script.size())","{","std::string script = ext.sort_script;","if(startsWith(script, \"path:\"))"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const auto* params =","reinterpret_cast<const TfLiteGatherParams*>(node->builtin_data);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* positions;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2017-12595","code_chunks":["\t\t    \t\t    \t\t    \t\t    object = newNull();","\t\t    input->seek(input->getLastOffset(), SEEK_SET);","                    empty = true;","\t\t}","\t\telse","\t\t{","                    QTC::TC(\"qpdf\", \"QPDFObjectHandle treat word as string\");"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["#elif MD_MAP == SH384 || MD_MAP == SH512","  #define block_size  128","#endif","    uint8_t opad[block_size + RLC_MD_LEN];","    uint8_t *ipad = RLC_ALLOCA(uint8_t, block_size + in_len);","\tuint8_t _key[RLC_MAX(RLC_MD_LEN, block_size)];",""],"label":0}
{"cve":"CVE-2021-30022","code_chunks":["}","","vps->base_layer_internal_flag = gf_bs_read_int_log(bs, 1, \"base_layer_internal_flag\");","vps->base_layer_available_flag = gf_bs_read_int_log(bs, 1, \"base_layer_available_flag\");","vps->max_layers = 1 + gf_bs_read_int_log(bs, 6, \"max_layers_minus1\");","if (vps->max_layers > MAX_LHVC_LAYERS) {"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\tif (len > totalLength)","\t{","\t\tWLog_ERR(TAG, \"Capability length expected %\" PRIu16 \", actual %\" PRIdz, totalLength, len);","\t\treturn FALSE;","\t}","\treturn TRUE;","}"],"label":0}
{"cve":"CVE-2022-1899","code_chunks":["break;","}","if (needle + 4 < to) {","ut32 n1 = r_read_le32 (buf + needle - from);","if (!n1) {","needle += 4;"],"label":1}
{"cve":"CVE-2022-4415","code_chunks":["                                break;","                        }","                }","        }","","        if (!context->meta[META_ARGV_PID])","                return log_error_errno(SYNTHETIC_ERRNO(EINVAL),"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["accum_scratch_size));","}","node->temporaries->data[4] = op_data->scratch_tensor_index + 4;","TfLiteTensor* zero_points = GetTemporary(context, node, \/*index=*\/4);","zero_points->type = kTfLiteInt32;","zero_points->allocation_type = kTfLiteArenaRw;","int zero_points_dims[1] = {batch_size};"],"label":1}
{"cve":"CVE-2018-16393","code_chunks":["}","if (priv->cac_id_len) {","serial->len = MIN(priv->cac_id_len, SC_MAX_SERIALNR);","memcpy(serial->value, priv->cac_id, priv->cac_id_len);","SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_NORMAL, SC_SUCCESS);","}","SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_NORMAL, SC_ERROR_FILE_NOT_FOUND);"],"label":1}
{"cve":"CVE-2016-5359","code_chunks":["guint32 offset, guint32 str_tbl, guint8 level, guint8 *codepage_attr)","{","guint32 tvb_len = tvb_reported_length (tvb);","guint32 off     = offset, last_off;","guint32 len;","guint   str_len;","guint32 ent;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["if (fc_params->weights_format != kTfLiteFullyConnectedWeightsFormatDefault) {","return false;","}","const TfLiteTensor* input = GetInput(context, node, kInput);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["For(expr_ty target, expr_ty iter, asdl_seq * body, asdl_seq * orelse, string","type_comment, int lineno, int col_offset, int end_lineno, int","end_col_offset, PyArena *arena)","{","stmt_ty p;","if (!target) {"],"label":0}
{"cve":"CVE-2022-0559","code_chunks":["r_return_val_if_fail (tree && data && cmp, false);","bool inserted = false;","","if (tree->root == NULL) {"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2022-21723","code_chunks":["PJ_DEF(int) pj_scan_get_char( pj_scanner *scanner )","{","int chr = *scanner->curptr;","","if (!chr) {","pj_scan_syntax_err(scanner);"],"label":1}
{"cve":"CVE-2021-24028","code_chunks":["if (UNLIKELY(structInfo.unionExt != nullptr)) {","const FieldInfo* end = structInfo.fieldInfos + structInfo.numFields;","const auto& activeId = getActiveId(object, structInfo);","const FieldInfo* found = std::lower_bound(","structInfo.fieldInfos,","end,"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\treturn result;","}","","void cp_cmlhs_off(gt_t vk, const g1_t h, const int label[], const gt_t *hs[],","\t\tconst dig_t *f[], const size_t flen[], size_t slen) {","\tgt_t v;",""],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");"],"label":0}
{"cve":"PYSEC-2020-336","code_chunks":["GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,","const absl::Span<const int>& seq_lengths, bool time_major,","cudnnDataType_t data_type) {","CHECK_GT(max_seq_length, 0);","int dims[] = {batch_size, data_size, 1};","int strides[] = {dims[1] * dims[2], dims[2], 1};","TensorDescriptor tensor_desc = CreateTensorDescriptor();"],"label":1}
{"cve":"CVE-2022-3647","code_chunks":["","serverLogFromHandler(LL_WARNING,\"\\n--- WATCHDOG TIMER EXPIRED ---\");","#ifdef HAVE_BACKTRACE","logStackTrace(getMcontextEip(uc), 1);","#else","serverLogFromHandler(LL_WARNING,\"Sorry: no support for backtrace().\");","#endif"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT32 railSupportLevel;","WLog_INFO(TAG,","\"RemoteProgramsCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));","","if (Stream_GetRemainingLength(s) < 4)"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["if (IsDynamicTensor(output)) {","const TfLiteTensor* dims = GetInput(context, node, kDimsTensor);","TF_LITE_ENSURE_OK(context, ResizeOutput(context, dims, output));","}","#define TF_LITE_FILL(data_type)                                               \\"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["#define BYTE\t\tchar"],"label":1}
{"cve":"CVE-2018-18311","code_chunks":["\t\t\tfilename, linenumber, funcname,","\t\t\tPTR2UV(sv) _SV_LOG_SERIAL_ARG(sv));","\t\tbreak;","\t\tlen = 0;","\t    }","\t    PERL_UNUSED_RESULT(PerlLIO_write(fd, buf, len));","\t}"],"label":0}
{"cve":"CVE-2016-7529","code_chunks":["              length=(size_t) ((*xcfdata << 8) + xcfdata[1]);","              xcfdata+=2;","            }","          size-=length;","          if (size < 0)","            goto bogus_rle;","          if (&xcfdata[length-1] > xcfdatalimit)"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["                             int64_t left_trim, int64_t right_trim,","                             int64_t top_trim, int64_t bottom_trim,","                             DeviceMemory<float>* output_data) {","  LOG(FATAL) << \"not yet implemented\";    return false;","}","","bool CudnnSupport::DoMemcpyD2HQuantized("],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2018-20180","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"CVE-2018-7254","code_chunks":["CAFAudioFormat caf_audio_format;","int i;","","infilesize = DoGetFileSize (infile);","memcpy (&caf_file_header, fourcc, 4);",""],"label":0}
{"cve":"CVE-2017-12595","code_chunks":["if (in_dictionary && in_array)","{","throw std::logic_error(","\"INTERNAL ERROR: parseInternal: in_dict && in_array\");","}",""],"label":1}
{"cve":"CVE-2017-14502","code_chunks":["filename[filename_size++] = '\\0';","filename[filename_size++] = *(p + offset++);","break;","filename[filename_size++] = highbyte;","filename[filename_size++] = *(p + offset++);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* invoke_count = GetOutput(context, node, kInvokeCount);","int32_t* invoke_count_data = GetTensorData<int32_t>(invoke_count);","","median_data[0] = sorting_buffer[size \/ 2];"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["return ast_for_for_stmt(c, CHILD(n, 1),","1 \/* is_async *\/);","","PyErr_Format(PyExc_SystemError,","\"invalid async stament: %s\","],"label":1}
{"cve":"CVE-2021-4043","code_chunks":["u32 i;","GroupIdToNameBox *ptr = (GroupIdToNameBox *)s;","if (ptr == NULL) return;","for (i=0; i<ptr->nb_entries; i++) {","if (ptr->entries[i].name) gf_free(ptr->entries[i].name);","}"],"label":1}
{"cve":"CVE-2020-15121","code_chunks":["\tchar *port = strchr (host, ':');","\tif (!port) {","\t\tport = (ssl)? \"443\": \"80\";","\t} else {","\t\t*port++ = 0;","\t}","\tchar *path = strchr (host, '\/');"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","    TfLiteTensor* fft_double_working_area;","  TF_LITE_ENSURE_OK(context,","                    GetTemporarySafe(context, node, kFftDoubleWorkingAreaTensor,","                                     &fft_double_working_area));","    double* fft_double_working_area_data = reinterpret_cast<double*>(","      GetTensorData<int64_t>(fft_double_working_area));"],"label":0}
{"cve":"CVE-2022-0443","code_chunks":["}","}","if ((buf_valid(buf) && buf != curbuf","#ifdef FEAT_EVAL","&& !aborting()","#endif"],"label":1}
{"cve":"CVE-2022-28927","code_chunks":["","link = replaceAllDistinct(link, \"\\\"\", \"\");","","script_safe_runner(parse_set.js_runtime, parse_set.js_context, [&](qjs::Context &ctx)","{","if(startsWith(link, \"script:\"))         {","writeLog(0, \"Found script link. Start running...\", LOG_LEVEL_INFO);"],"label":1}
{"cve":"CVE-2022-30594","code_chunks":["\t *\/","\tneed_siglock = data && !thread_group_empty(current);","\tif (need_siglock)","\t\tspin_lock_irq(&child->sighand->siglock);","\tchild->exit_code = data;","\twake_up_state(child, __TASK_TRACED);","\tif (need_siglock)"],"label":0}
{"cve":"CVE-2018-5729","code_chunks":["LDAPMessage                 *result=NULL, *ent=NULL;","char                        **subtreelist = NULL;","char                        *user=NULL, *subtree=NULL, *principal_dn=NULL;","char                        **values=NULL, *strval[10]={NULL}, errbuf[1024];","char                        *filtuser=NULL;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2019-3556","code_chunks":["","    if (crypt_res) {","      return strdup(crypt_res);","    }","#endif","  }",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["    TfLiteTensor* accum_scratch;","    TF_LITE_ENSURE_OK(","        context, GetTemporarySafe(context, node, \/*index=*\/3, &accum_scratch));","    accum_scratch->type = kTfLiteInt32;","    accum_scratch->allocation_type = kTfLiteArenaRw;","    int accum_scratch_dims[2] = {num_units, batch_size};","    if (!TfLiteIntArrayEqualsArray(accum_scratch->dims, 2,"],"label":0}
{"cve":"CVE-2017-16909","code_chunks":["}","else if ((nonz[i & 1] = pana_bits(8)) || i > 11)","pred[i & 1] = nonz[i & 1] << 4 | pana_bits(4);","if ((RAW(row, col) = pred[col & 1]) > 4098 && col < width)","derror();","}","}"],"label":1}
{"cve":"CVE-2019-20503","code_chunks":["","\tphdr = (struct sctp_paramhdr *)sctp_m_getptr(m, offset,","\t    sizeof(struct sctp_paramhdr), (uint8_t *)&tmp_param);","\twhile (phdr != NULL) {","\t\tptype = ntohs(phdr->param_type);","\t\tplen = ntohs(phdr->param_length);",""],"label":0}
{"cve":"CVE-2016-2315","code_chunks":["{","struct rev_list_info *info = cb_data;","finish_object(obj, name, cb_data);","if (info->flags & REV_LIST_QUIET)","return;","show_object_with_name(stdout, obj, name);"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_bitmap_cache_capability_set(wStream* s, UINT16 length, rdpSettings* settings)","{","WINPR_UNUSED(settings);","if (length < 40)","return FALSE;","","Stream_Seek_UINT32(s); \/* pad1 (4 bytes) *\/"],"label":1}
{"cve":"CVE-2021-3996","code_chunks":["\tint excl_st[ARRAY_SIZE(excl)] = UL_EXCL_STATUS_INIT;","","\tsetlocale(LC_ALL, \"\");","\tbindtextdomain(PACKAGE, LOCALEDIR);","\ttextdomain(PACKAGE);","\tclose_stdout_atexit();",""],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["data = map_to_sysmem(buf);","load = data;","if (load_op == FIT_LOAD_IGNORED) {","\/* Don't load *\/","} else if (fit_image_get_load(fit, noffset, &load)) {","if (load_op == FIT_LOAD_REQUIRED) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["          \/*prepare=*\/activations::Relu6Prepare,","          \/*invoke=*\/activations::Relu6Eval,","          \/*profiling_string=*\/nullptr,","          \/*builtin_code=*\/0,","          \/*custom_name=*\/nullptr,","          \/*version=*\/0};","}"],"label":0}
{"cve":"CVE-2023-46862","code_chunks":["has_lock = mutex_trylock(&ctx->uring_lock);","","if (has_lock && (ctx->flags & IORING_SETUP_SQPOLL)) {","sq = ctx->sq_data;","if (!sq->thread)"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tfor (int i = 2; i < (1 << (EP_DEPTH - 2)); i++) {","\t\tep4_add(t[i], t[i - 1], t[0]);","\t}","","#if defined(EP_MIXED)","\tfor (int i = 1; i < (1 << (EP_DEPTH - 2)); i++) {","\t\tep4_norm(t[i], t[i]);"],"label":0}
{"cve":"CVE-2017-6890","code_chunks":["\tfor (val=i=0; i < 3; i++)","\t  for (  j=0; j < 3; j++)","\t    val += ppm[c][i][j] * work[i][j];","\tipix[c] = floor ((ipix[c] + floor(val)) *","\t\t( sgrow[col\/sgx  ][c] * (sgx - col%sgx) +","\t\t  sgrow[col\/sgx+1][c] * (col%sgx) ) \/ sgx \/ div[c]);","\tif (ipix[c] > 32000) ipix[c] = 32000;"],"label":0}
{"cve":"CVE-2019-13311","code_chunks":["new_images=RemoveFirstImageFromList(images);","source_image=RemoveFirstImageFromList(images);","if (source_image == (Image *) NULL)","break; \/* FUTURE - produce Exception, rather than silent fail *\/","","\/* FUTURE: this should not be here! - should be part of -geometry *\/","if (source_image->geometry != (char *) NULL)"],"label":1}
{"cve":"CVE-2024-0964","code_chunks":["], gr.Textbox())","assert examples.processed_examples == [[\"hello\"]]","","examples = gr.Examples([\"test\/test_files\/bus.png\"], gr.Image())","assert (","utils.encode_file_to_base"],"label":0}
{"cve":"CVE-2021-45931","code_chunks":["const hb_set_t *other)","{","if (unlikely (hb_object_is_immutable (set)))","return;","","set->union_ (*other);"],"label":1}
{"cve":"CVE-2018-14882","code_chunks":["if(length < RPL_DIO_GENOPTION_LEN) return;","length -= RPL_DIO_GENOPTION_LEN;","","ND_TCHECK(opt->rpl_dio_len);","","while((opt->rpl_dio_type == RPL_OPT_PAD0 &&","(const u_char *)opt < ndo->ndo_snapend) ||"],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["}","","\/* Check that offset is less than packet size *\/","if (offset > pkt_len)","return PJMEDIA_RTP_EINLEN;",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["    if (IsConstantTensor(op_context->rhs)) {","      scratch_buffer->allocation_type = kTfLiteArenaRwPersistent;","    } else {","      scratch_buffer->allocation_type = kTfLiteArenaRw;","    }","    scratch_buffer->type = op_context->rhs->type;","    scratch_buffer->allocation_type = kTfLiteArenaRw;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\ted_norm(q, q);","#endif","","\t\t\/* Create table. *\/","\t\tfor (size_t i = 1; i < (1 << (EP_WIDTH - 1)); i++) {","\t\t\ted_add(t[i], t[i - 1], q);","\t\t}"],"label":0}
{"cve":"CVE-2016-10012","code_chunks":["\t\t * run to it's packet_disconnect(), but it must not allow any","\t\t * authentication to succeed.","\t\t *\/","\t\tdebug(\"%s: no valid authentication method lists\", __func__);","\t}","","\tdebug3(\"%s: sending MONITOR_ANS_PWNAM: %d\", __func__, allowed);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","  TfLiteIntArray* output_size = TfLiteIntArrayCreate(4);","  output_size->data[0] = batches;","  output_size->data[1] = out_height;","  output_size->data[2] = out_width;","  output_size->data[3] = channels_out;","  auto output_status = context->ResizeTensor(context, output, output_size);"],"label":0}
{"cve":"CVE-2023-1801","code_chunks":["struct tm *tm;","char time_buf[128];","","seconds = (time_t)seconds_64bit;","if (seconds != seconds_64bit) {","\/*"],"label":1}
{"cve":"CVE-2016-8649","code_chunks":["char* cwd;","char* new_cwd;","int ipc_sockets[2];","int procfd;","signed long personality;","","if (!options)"],"label":1}
{"cve":"CVE-2018-12561","code_chunks":["    fileFolder->setText(QString());","","    switch (t) {","    case Type_SshFs: {","        sshFolder->setText(d.url.path());","        if (0!=d.url.port()) {","            sshPort->setValue(d.url.port());"],"label":0}
{"cve":"CVE-2018-20175","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2021-3973","code_chunks":["if (cap->nchar == 'm' || cap->nchar == 'M')","{","int\t    norm = ((findc == '{') == (cap->nchar == 'm'));","","n = cap->count1;","if (prev_pos.lnum != 0)"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[]={0,0};","","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":1}
{"cve":"CVE-2021-30199","code_chunks":["}","memcpy(ctx->latm_buffer + ctx->latm_buffer_size, data, pck_size);","ctx->latm_buffer_size += pck_size;","}","","if (!ctx->bs) ctx->bs = gf_bs_new(ctx->latm_buffer, ctx->latm_buffer_size, GF_BITSTREAM_READ);"],"label":1}
{"cve":"CVE-2021-42782","code_chunks":["for (i = 0; i < taglen;i++)","keydata->exponent = (keydata->exponent<<8) + tag[i];","}","","tag = sc_asn1_find_tag(card->ctx, cp, in_len, 0x81, &taglen);","if (tag != NULL && taglen > 0) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["input_offsets_size->data[0] = num_batches * batch_size;","TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_offsets,","input_offsets_size));","}","node->temporaries->data[6] = op_data->scratch_tensor_index + 6;","TfLiteTensor* row_sums = GetTemporary(context, node, \/*index=*\/6);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* params;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kParams, &params));","const TfLiteTensor* indices;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kIndices, &indices));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2019-6976","code_chunks":["*\/","size += 16;","","if( !(buf = g_try_malloc( size )) ) {","#ifdef DEBUG","g_assert_not_reached();","#endif \/*DEBUG*\/"],"label":1}
{"cve":"CVE-2019-13311","code_chunks":["return(status == 0 ? MagickFalse : MagickTrue);","","#undef _image_info","#undef _images","#undef _exception","#undef _draw_info"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  }","  TfLiteIntArray* bw_scratch_buffer_size = TfLiteIntArrayCreate(2);","  bw_scratch_buffer_size->data[0] = n_batch;","  if (bw_use_cifg) {","        bw_scratch_buffer_size->data[1] = n_bw_cell * 3;","  } else {","        bw_scratch_buffer_size->data[1] = n_bw_cell * 4;"],"label":0}
{"cve":"CVE-2022-39347","code_chunks":["static void drive_file_fix_path(WCHAR* path)","{","size_t i;","size_t length = _wcslen(path);","","for (i = 0; i < length; i++)","{"],"label":1}
{"cve":"CVE-2019-14814","code_chunks":["rate_ie = (void *)cfg80211_find_ie(WLAN_EID_EXT_SUPP_RATES,","params->beacon.tail,","params->beacon.tail_len);","if (rate_ie)","memcpy(bss_cfg->rates + rate_len, rate_ie + 1, rate_ie->len);","","return;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["auto* params = reinterpret_cast<TfLiteSoftmaxParams*>(node->builtin_data);","SoftmaxOpData* data = reinterpret_cast<SoftmaxOpData*>(node->user_data);","","const TfLiteTensor* input = GetInput(context, node, 0);"],"label":1}
{"cve":"CVE-2019-13303","code_chunks":["\/*","Sc: source color.","Dc: canvas color.","*\/","(void) GetOneVirtualPixel(source_image,x-x_offset,y-y_offset,source,","exception);"],"label":1}
{"cve":"CVE-2018-11383","code_chunks":["\t\t\t}","\t\t} else {","\t\t\t\t\t\t\t\t\t\t\t\tif (input[1] == 'u' && input[2] == 'e')","\t\t\t\tuntil_expr = input + 3;","\t\t\telse if (input[1] == 'u')","\t\t\t\tuntil_addr = r_num_math (core->num, input + 2);","\t\t\telse until_expr = \"0\";"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\t\t\t          \"incorrect capability offset, type:0x%04\" PRIX16 \" %\" PRIu16","\t\t\t          \" bytes expected, %\" PRIuz \"bytes remaining\",","\t\t\t          type, length, rest);","\t\t}","","\t\tnumberCapabilities--;","\t}"],"label":0}
{"cve":"CVE-2020-23931","code_chunks":["tmp_strsize=(u32)ptr->size-8;","while (tmp_strsize) {","tmp_str[j] = gf_bs_read_u8(bs);","tmp_strsize--;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["} else {","PopulateQuantizedLstmParams8x8_8(context, node,","&op_data->integer_lstm_param);","","for (int scratch_index = 0; scratch_index < 8; ++scratch_index) {","node->temporaries->data[scratch_index] ="],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_share_capability_set(wStream* s, rdpSettings* settings)","{","WINPR_UNUSED(settings);","if (Stream_GetRemainingLength(s) < 4)","return FALSE;","","Stream_Seek_UINT16(s); \/* nodeId (2 bytes) *\/"],"label":0}
{"cve":"CVE-2018-25032","code_chunks":["","    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));","    s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));","    s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));","","    s->high_water = 0;      \/* nothing written to s->window yet *\/",""],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["}","for (c=0; c < 16; c+=2) {","i = len[((c & 1) << 1) | (c >> 3)];","RAW(row,col+c) = ((signed) ph1_bits(i) << (32-i) >> (32-i)) +","(dir ? RAW(row+(~c | -2),col+c) : col ? RAW(row,col+(c | -2)) : 128);","if (c == 14) c = -1;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  output_data[0] =","      0;    output_data[0] = input_data[0] + weight_data[0];","  return kTfLiteOk;","}","","bool MockCustom::freed_ = false;",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":[],"label":1}
{"cve":"CVE-2018-25032","code_chunks":["local void bi_flush(s)","    deflate_state *s;","{","    if (s->bi_valid == 16) {","        put_short(s, s->bi_buf);","        s->bi_buf = 0;","        s->bi_valid = 0;"],"label":0}
{"cve":"CVE-2021-3889","code_chunks":["if (!(t1 & 0x80)) {","\/* get offset from mincode, maxcode tables *\/","while (code < huffcdic->mincode_table[code_length]) {","code_length++;","}","maxcode = huffcdic->maxcode_table[code_length];","}"],"label":1}
{"cve":"CVE-2019-19922","code_chunks":["","\t\/*","\t * While we are ensured activity in the period following an","\t * unthrottle, this also covers the case in which the new bandwidth is","\t * insufficient to cover the existing bandwidth deficit.  (Forcing the","\t * timer to remain active while there are any throttled entities.)","\t *\/"],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["                    val = (int)(((byteMain & 0x0F) << 12) |","                                ((pBuffer[lIndex + 1] & 0x3F) << 6) |","                                (pBuffer[lIndex + 2] & 0x3F));","                }","","                WriteUtf16_WCHAR(val, pUnicodeString);","                lIndex += 3;"],"label":0}
{"cve":"CVE-2017-10966","code_chunks":["if (list == NULL)","return;","","if (list == nick || list->next == NULL) {","g_hash_table_remove(channel->nicks, nick->nick);","if (list->next != NULL) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["      GetOptionalInputTensor(context, node, kAuxInputTensor);","  const TfLiteTensor* fw_aux_input_weights =","      GetOptionalInputTensor(context, node, kFwAuxWeightsTensor);","  const TfLiteTensor* bw_aux_input_weights =","      GetOptionalInputTensor(context, node, kBwAuxWeightsTensor);","","  const bool aux_inputs_weights_or_none ="],"label":0}
{"cve":"CVE-2017-12667","code_chunks":["goto MATLAB_KO;    \/* unsupported endian *\/","","if (strncmp(MATLAB_HDR.identific, \"MATLAB\", 6))","MATLAB_KO: ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");","","filepos = TellBlob(image);","while(!EOFBlob(image)) \/* object parser loop *\/"],"label":1}
{"cve":"CVE-2022-1587","code_chunks":["is less than 128. Otherwise it returns with zero. Does not check STR_END. The","full_read argument tells whether characters above max are accepted or not. *\/","DEFINE_COMPILER;","struct sljit_jump *jump;","","SLJIT_ASSERT(common->utf);",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["    node->temporaries->data[data->scaling_factors_index] =","        data->scaling_factors_id;","    TfLiteTensor* scaling_factors;","    TF_LITE_ENSURE_OK(","        context, GetTemporarySafe(context, node, data->scaling_factors_index,","                                  &scaling_factors));","    scaling_factors->type = kTfLiteFloat32;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["{","PyObject *m, *d;","if (!init_types()) return NULL;","m = PyModule_Create(&_astmodule3);","if (!m) return NULL;","d = PyModule_GetDict(m);","if (PyDict_SetItemString(d, \"AST\", (PyObject*)&AST_type) < 0) return NULL;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["hidden_state_quantized->type = input_weights->type;","hidden_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(hidden_state_quantized->dims,"],"label":1}
{"cve":"CVE-2018-20786","code_chunks":["\tfor (part = PART_OUT; part < PART_COUNT; ++part)","\t{","\t    fd = term->tl_job->jv_channel->ch_part[part].ch_fd;","\t    if (isatty(fd))","\t\tbreak;","\t}","\tif (part < PART_COUNT && mch_report_winsize(fd, rows, cols) == OK)"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["prod_scaling_factors->type = kTfLiteFloat32;","prod_scaling_factors->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(prod_scaling_factors->dims, 1,"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 helpExtendedKeyFlag;","UINT16 windowManagerKeyFlag;","WLog_INFO(TAG, \"WindowActivationCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 12)","return FALSE;"],"label":1}
{"cve":"PYSEC-2021-520","code_chunks":["    for (int i = 0; i < node.inputs->size; ++i) {","      int tensor_index = node.inputs->data[i];","      if (tensor_index == kTfLiteOptionalTensor) {","        continue;","      }","      TfLiteTensor* tensor = &tensors_[tensor_index];","      if (tensor->delegate && tensor->delegate != node.delegate &&"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["auto* validation_context = context.mutable_common_tls_context()->mutable_validation_context();","validation_context->mutable_trusted_ca()->set_filename(","TestEnvironment::runfilesPath(\"test\/config\/integration\/certs\/upstreamcacert.pem\"));","validation_context->add_match_subject_alt_names()->set_suffix(\"lyft.com\");","transport_socket->set_name(\"envoy.transport_sockets.tls\");","transport_socket->mutable_typed_config()->PackFrom(context);","});"],"label":1}
{"cve":"PYSEC-2022-146","code_chunks":["int64_t TensorByteSize(const TensorProto& t) {","int64_t num_elems = PartialTensorShape(t.tensor_shape()).num_elements();","return num_elems < 0 ? -1 : num_elems * DataTypeSize(t.dtype());","}"],"label":0}
{"cve":"CVE-2023-4682","code_chunks":["}","","if(AVI->video_pos < 0 || AVI->video_pos >= AVI->video_frames) return -1;","n = (u32) AVI->video_index[AVI->video_pos].len;","","*keyframe = (AVI->video_index[AVI->video_pos].key==0x10) ? 1:0;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","node->temporaries->data[kInputZeroPoints] =","op_data->scratch_tensor_index + kInputZeroPoints;","TfLiteTensor* input_zp = GetTemporary(context, node, kInputZeroPoints);","input_zp->type = kTfLiteFloat32;","input_zp->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(input_zp->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                }","            }","        }","","        *p_start = tok->start;","        *p_end = tok->cur;","        return STRING;"],"label":0}
{"cve":"CVE-2020-15888","code_chunks":["      luaD_poscall(L, ci, n);","      break;","    }","    case LUA_VLCL: {  \/* Lua function *\/","      CallInfo *ci;","      Proto *p = clLvalue(s2v(func))->p;","      int narg = cast_int(L->top - func) - 1;  \/* number of real arguments *\/"],"label":0}
{"cve":"CVE-2022-35977","code_chunks":["","\/* Perform LIMIT start,count sanity checking. *\/","start = (limit_start < 0) ? 0 : limit_start;","end = (limit_count < 0) ? vectorlen-1 : start+limit_count-1;","if (start >= vectorlen) {","start = vectorlen-1;"],"label":1}
{"cve":"CVE-2020-36138","code_chunks":["                        dst[j] += dst[j - soff];","                    dst += stride;","                }","            }","        }","","        if (s->photometric == TIFF_PHOTOMETRIC_WHITE_IS_ZERO) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_write_str(char *str, int len, const bn_t a, int radix);"],"label":1}
{"cve":"CVE-2018-12562","code_chunks":["}","if (opts.useCache!=newOpts.useCache) {","if (opts.useCache) {","saveCache();","} else if (opts.useCache && !newOpts.useCache) {","removeCache();"],"label":1}
{"cve":"CVE-2019-20915","code_chunks":["#define MAX_BYTE_UMC 6","unsigned char byte[MAX_BYTE_UMC];","BITCODE_UMC result;","","result = 0;","for (i = MAX_BYTE_UMC-1, j = 0; i >= 0; i--, j += 7)"],"label":1}
{"cve":"CVE-2022-0695","code_chunks":["r_list_append (sections, ptr);","} else if (lrec.rec_type == LMF_LOAD_REC) {","RBinSection *ptr = R_NEW0 (RBinSection);","if (r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {","goto beach;","}","if (!ptr) {"],"label":1}
{"cve":"CVE-2016-9388","code_chunks":["\/* Note: This function does not properly handle images with a colormap. *\/","\/* Avoid compiler warnings about unused parameters. *\/","cmap = 0;","","assert(jas_image_numcmpts(image) <= 3);",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["","RLC_RIP(bits, digits, bits);","","RLC_TRY {","bn_grow(c, c->used + digits + (bits > 0));"],"label":1}
{"cve":"CVE-2022-1427","code_chunks":["break;","#else","goto L_INT_OVERFLOW;","#endif","#ifndef MRB_NO_FLOAT","regs[a] = mrb_float_value(mrb, pool[b].u.f);"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["} else {","mdi->extra_info.copyright = malloc(tmp_length + 1);","memcpy(mdi->extra_info.copyright, event_data, tmp_length);","mdi->extra_info.copyright[tmp_length] = '\\0';","}",""],"label":1}
{"cve":"CVE-2022-0523","code_chunks":["if (error) {","return NULL;","}","ret = get_array_object_generic (buffer, n);","if (!ret) {","return NULL;"],"label":1}
{"cve":"CVE-2021-26926","code_chunks":["\tif (dec->bpcc) {","\t\t\/* Is the number of components indicated in the BPCC box","\t\t  consistent with the code stream data? *\/","\t\tif (dec->bpcc->data.bpcc.numcmpts !=","\t\t  JAS_CAST(jas_uint, jas_image_numcmpts(dec->image))) {","\t\t\tjas_eprintf(\"error: number of components mismatch (BPCC)\\n\");","\t\t\tgoto error;"],"label":0}
{"cve":"CVE-2022-0519","code_chunks":["return NULL;","}","#if 0","if (sz < 8) {","return NULL;","}"],"label":0}
{"cve":"CVE-2023-22742","code_chunks":["const char *cmd,","git_smart_subtransport_stream **stream)","{","int auth_methods, error = 0, port;","ssh_stream *s;","git_credential *cred = NULL;","LIBSSH2_SESSION *session=NULL;"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["ds->ossl_lock = NULL;","}","","pj_pool_safe_release(&ds->pool);",""],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"arg\\\" missing from arg\");","return 1;","}"],"label":0}
{"cve":"CVE-2023-34475","code_chunks":["    df;","","  *numerator=0;","  *denominator=1;","  if (value <= MagickEpsilon)","    return;","  *numerator=1;"],"label":0}
{"cve":"CVE-2023-51698","code_chunks":["","\tif (!comics_check_decompress_support (mime_type, comics_document, error)) {","\t\tg_free (mime_type);","\t\treturn FALSE;","\t}","","\tg_free (mime_type);"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["void CLASS Kodak_WB_0x08tags (int wb, unsigned type)","{","\tfloat mul[3]={1,1,1}, num, mul2;","\tint c;","\tFORC3 mul[c] = (num=getreal(type))==0 ? 1 : num;","\timgdata.color.WB_Coeffs[wb][1] = imgdata.color.WB_Coeffs[wb][3] = mul[1];","\tmul2 = mul[1] * mul[1];"],"label":0}
{"cve":"CVE-2020-11089","code_chunks":["Stream_Seek(s, 4);","Stream_Read_UINT32(s, packetLength);","","if ((packetLength > INT_MAX) || !Stream_EnsureCapacity(s, packetLength))","{","Stream_Free(s, TRUE);","return NULL;"],"label":1}
{"cve":"CVE-2021-26926","code_chunks":["break;","}","}","","\/* Is the component data type indicated in the IHDR box consistent","with the data in the code stream? *\/"],"label":1}
{"cve":"CVE-2021-33586","code_chunks":["return CMD_FAILURE;","}","","ClientProtocol::Messages::Pong pong(parameters[0], origin ? parameters[1] : \"\");","user->Send(ServerInstance->GetRFCEvents().pong, pong);","return CMD_SUCCESS;","}"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["bool                m_useSecureNetwork;"],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["static bool","user_interrupted(void)","{","sigset_t mask;","","return (sigpending(&mask) == 0 &&"],"label":1}
{"cve":"CVE-2020-11089","code_chunks":["{","\tWLog_DBG(TAG, \"Enabling restricted admin mode: %s\",","\t         RestrictedAdminModeRequired ? \"TRUE\" : \"FALSE\");","\tnego->RestrictedAdminModeRequired = RestrictedAdminModeRequired;","}","","void nego_set_gateway_enabled(rdpNego* nego, BOOL GatewayEnabled)"],"label":0}
{"cve":"CVE-2017-6448","code_chunks":["case 0x02: \/* sparse-switch-payload *\/","{","unsigned short array_size = buf[2] | (buf[3] << 8);","sprintf (op->buf_asm, \"sparse-switch-payload %d\", array_size);","size = 4;","payload = 2 * (array_size*4);","len = 0;"],"label":1}
{"cve":"PYSEC-2021-740","code_chunks":["","                if (!convert_data_endianness_ || sizeof(T) == 1) {","      for (int64 i = 0; i < flat_in.size(); ++i) {","        const auto to_copy =","            std::min(flat_in(i).size(), static_cast<size_t>(fixed_length));","        memcpy(out_data, flat_in(i).data(), to_copy);","                                out_data += width;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputResourceIdTensor,","&input_resource_id_tensor));","int resource_id = input_resource_id_tensor->data.i32[0];","","const TfLiteTensor* key_tensor;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2017-6448","code_chunks":["\t\t\t} else {","\t\t\t\tflag_str = R_ASM_GET_NAME (a, 'f', vB);","\t\t\t\tif (!flag_str) {","\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, field+%i\", vA, vB);","\t\t\t\t} else {","\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, %s\", vA, flag_str);","\t\t\t\t}"],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["        if (m_kind == CacheKind::Lru) {","          m_lruCache->snapshotKeys(keys);","        } else {","          m_scalableCache->snapshotKeys(keys);","        }","        for (auto& key: keys) {","          folly::writeFull(file.fd(), key.data(), key.size());"],"label":0}
{"cve":"CVE-2020-13396","code_chunks":["return SEC_E_INTERNAL_ERROR;","","StartOffset = Stream_GetPosition(s);","","if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)","goto fail;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\tfp_neg(_p->y, p->y);","#endif","\t\tfp8_neg(qn, qy);","","\t\tbn_rec_naf(s, &len, a, 2);","\t\tfor (i = len - 2; i >= 0; i--) {","\t\t\tfp48_sqr(r, r);"],"label":0}
{"cve":"CVE-2016-9388","code_chunks":["jas_matrix_t *data[3];","int i;","","assert(numcmpts <= 3);","","for (i = 0; i < 3; ++i) {"],"label":0}
{"cve":"CVE-2022-35971","code_chunks":["  const Tensor& output_quantized = *GetOutput(0);","  const float output_min = GetOutput(1)->flat<float>()(0);","  const float output_max = GetOutput(2)->flat<float>()(0);","  Tensor output_float =","      QuantizedTensorToFloat<qint32>(output_quantized, output_min, output_max);","  test::ExpectTensorNear<float>(expected_float, output_float, 0.2);","}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["GetOptionalInputTensor(context, node, kFwInputToInputWeightsTensor);","const TfLiteTensor* fw_input_to_forget_weights;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFwInputToForgetWeightsTensor,","&fw_input_to_forget_weights));","const TfLiteTensor* fw_input_to_cell_weights;"],"label":0}
{"cve":"CVE-2022-0695","code_chunks":["\tif (r_buf_size (buf) < sizeof (lmf_header)) {","\t\treturn false;","\t}","\tif (r_buf_fread_at (buf, QNX_HEADER_ADDR, (ut8 *) lmfh, \"iiiiiiiicccciiiicc\", 1) != QNX_HDR_SIZE) {","\t\treturn false;","\t}","\tr_strf_buffer (32);"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["  strncpy (th->t_desc, desc, 512);","  strncpy (th->t_make, make, 64);","  strncpy (th->t_model, model, 64);","  strcpy (th->soft, \"dcraw v\" DCRAW_VERSION);","  t = localtime (&timestamp);","  sprintf (th->date, \"%04d:%02d:%02d %02d:%02d:%02d\",","      t->tm_year+1900,t->tm_mon+1,t->tm_mday,t->tm_hour,t->tm_min,t->tm_sec);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["const char * const *p;","for (p = FORBIDDEN; *p; p++) {","if (PyUnicode_CompareWithASCIIString(name, *p) == 0) {","ast_error(c, n, \"assignment to keyword\");","return 1;","}"],"label":1}
{"cve":"CVE-2021-29534","code_chunks":["","TensorShape output_shape;","OP_REQUIRES_OK(context, TensorShapeUtils::MakeShape(","input_shape_t.data() + 1,","input_shape->NumElements() - 1, &output_shape));","","std::unordered_set<int64> visited;"],"label":1}
{"cve":"CVE-2021-32139","code_chunks":["GF_TextSampleEntryBox *qt_txt = NULL;","if (!descriptionIndex || !out_desc) return GF_BAD_PARAM;","","trak = gf_isom_get_track_from_file(movie, trackNumber);","if (!trak || !trak->Media) return GF_BAD_PARAM;",""],"label":0}
{"cve":"CVE-2019-12730","code_chunks":["av_log(s, AV_LOG_DEBUG, \"HeaderSeed is <%s>\\n\", val);","header_seed = atoi(val);","} else if (!strcmp(key, \"HeaderKey\")) {             av_log(s, AV_LOG_DEBUG, \"HeaderKey is <%s>\\n\", val);","sscanf(val, \"%\"SCNu32\"%\"SCNu32\"%\"SCNu32\"%\"SCNu32,","&header_key_part[0], &header_key_part[1], &header_key_part[2], &header_key_part[3]);","for (idx = 0; idx < 4; idx++) {","AV_WB32(&header_key[idx * 4], header_key_part[idx]);             }"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["return NULL;","","i += 2; \/* the star and the name *\/","if (i < NCH(n) && TYPE(CHILD(n, i)) == COMMA)","i += 1; \/* the comma, if present *\/","","if (i < NCH(n) && TYPE(CHILD(n, i)) == TYPE_COMMENT) {"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), data->values_count);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input0;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input0));","const int dimension_size = NumDimensions(input0) + 1;","if (data->axis < 0) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, node->inputs->size, 1);","TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);","","const TfLiteTensor* input_resource_id_tensor ="],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["}","const int input_dims = NumDimensions(input_tensor);","","TfLiteTensor* output_tensor = GetOutput(context, node, 0);","if (IsDynamicTensor(output_tensor)) {","auto output_size = GetPaddedOutputShape(input_tensor, padding_matrix);","if (output_size == nullptr) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["if (IsDynamicTensor(output)) {","const TfLiteTensor* dims = GetInput(context, node, kDimsTensor);","TF_LITE_ENSURE_OK(context, ResizeOutput(context, dims, output));","}","#define TF_LITE_FILL(data_type)                                               \\"],"label":1}
{"cve":"CVE-2018-10538","code_chunks":["            else if (WaveHeader.ChannelMask && (config->channel_mask || (config->qmode & QMODE_CHANS_UNASSIGNED))) {","                error_line (\"this W64 file already has channel order information!\");","                return WAVPACK_SOFT_ERROR;","            }","            else if (WaveHeader.ChannelMask)","                config->channel_mask = WaveHeader.ChannelMask;",""],"label":0}
{"cve":"CVE-2019-12816","code_chunks":["sRetMsg.clear();","","if (!ValidateModuleName(sModule, sRetMsg)) {","return nullptr;","}",""],"label":0}
{"cve":"CVE-2019-13311","code_chunks":["WandPrivate MagickBooleanType CLIListOperatorImages(MagickCLI *cli_wand,","const char *option,const char *arg1n,const char *arg2n)","{","const char    \/* percent escaped versions of the args *\/","*arg1,","*arg2;"],"label":0}
{"cve":"CVE-2016-6870","code_chunks":["if (!to.empty()) {","int to_len = to.size();","if (to_len > 0) {","to_r = strndup(to.data(), to_len);","for (; to_len; to_len--) {","if (!isspace((unsigned char)to_r[to_len - 1])) {","break;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    TF_LITE_ENSURE_OK(context, ResizeOutput(context, node));","  }","  const TfLiteTensor* top_k;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTopK, &top_k));","  const int32 k = top_k->data.i32[0];","      const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));"],"label":0}
{"cve":"CVE-2019-15226","code_chunks":["        if (ref_lookup_response.entry_) {","          const uint32_t key_value_size = (*ref_lookup_response.entry_)->key().size() +","                                          (*ref_lookup_response.entry_)->value().size();","          subtractSize(key_value_size);","          *ref_lookup_response.entry_ = nullptr;","        }","      } else {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  switch (input->type) {","      return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);","      return EvalImpl<kernel_type, kTfLiteUInt8>(context, node);","      return EvalImpl<kernel_type, kTfLiteInt8>(context, node);","      return EvalImpl<kernel_type, kTfLiteInt16>(context, node);","      TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",","                         TfLiteTypeGetName(input->type));"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["bool DefaultCertValidator::verifySubjectAltName(X509* cert,","                                                const std::vector<std::string>& subject_alt_names) {","  bssl::UniquePtr<GENERAL_NAMES> san_names(","      static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(cert, NID_subject_alt_name, nullptr, nullptr)));","  if (san_names == nullptr) {","    return false;","  }"],"label":0}
{"cve":"CVE-2018-8791","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,255);","else","gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,65535);","fseek (ifp, data_offset, SEEK_SET);"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>","subject_alt_name_matchers;","subject_alt_name_matchers.push_back(Matchers::StringMatcherImpl(matcher));","EXPECT_TRUE(DefaultCertValidator::matchSubjectAltName(cert.get(), subject_alt_name_matchers));","}"],"label":1}
{"cve":"CVE-2017-14169","code_chunks":["avpriv_request_sample(pb, \"Primer pack item length %d\", item_len);","return AVERROR_PATCHWELCOME;","}","if (item_num > 65536) {","av_log(mxf->fc, AV_LOG_ERROR, \"item_num %d is too large\\n\", item_num);","return AVERROR_INVALIDDATA;","}"],"label":1}
{"cve":"CVE-2020-8037","code_chunks":["u_char *b, *t, c;","const u_char *s;","u_int i;","int proto;","const void *se;",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["zero_points_size));","}","node->temporaries->data[5] = op_data->scratch_tensor_index + 5;","TfLiteTensor* row_sums = GetTemporary(context, node, \/*index=*\/5);","row_sums->type = kTfLiteInt32;","row_sums->allocation_type = kTfLiteArenaRwPersistent;","int row_sums_dims[2] = {2, num_units};"],"label":1}
{"cve":"PYSEC-2022-68","code_chunks":["    const int output_rank = (lookup_rank - 1) + (embedding_rank - 1);","","      TF_LITE_ENSURE_EQ(context, SizeOfDimension(dense_shape, 0), lookup_rank);","","    TfLiteIntArray* output_shape = TfLiteIntArrayCreate(output_rank);","  TF_LITE_ENSURE(context, output_shape != nullptr);","  int k = 0;"],"label":0}
{"cve":"CVE-2022-28927","code_chunks":["int retVal = ini.ParseFile(global.prefPath);","if(retVal != INIREADER_EXCEPTION_NONE)","{","writeLog(0, \"Unable to load preference settings. Reason: \" + ini.GetLastError(), LOG_LEVEL_FATAL);","return;","}",""],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}"],"label":1}
{"cve":"CVE-2019-3556","code_chunks":["req::ptr<XMLDocumentData> doc() const { return m_node->doc(); }"],"label":1}
{"cve":"CVE-2019-19044","code_chunks":["","\t\/* Note: We don't allocate address 0.  Various bits of HW","\t * treat 0 as special, such as the occlusion query counters","\t * where 0 means \"disabled\".","\t *\/","\tdrm_mm_init(&v3d->mm, 1, pt_size \/ sizeof(u32) - 1);",""],"label":0}
{"cve":"CVE-2021-41227","code_chunks":["","  string two_file, three_file;","  TF_ASSERT_OK(CreateTempFileFloat(env, 2.0f, 1000, &two_file));","  TF_ASSERT_OK(CreateTempFileFloat(env, 3.0f, 1000, &three_file));","  auto node1 = ops::ImmutableConst(root, DT_FLOAT, kFileTensorShape, two_file);","  auto node2 =","      ops::ImmutableConst(root, DT_FLOAT, kFileTensorShape, three_file);"],"label":0}
{"cve":"CVE-2020-36316","code_chunks":["bn_add_dig(m, m, 0);","\/* Make room for the real message. *\/","bn_lsh(m, m, m_len * 8);","result = RLC_OK;","break;","m_len = k_len - 1;","bn_rsh(t, m, 8 * m_len);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  L2NormalizationParams* data =","      static_cast<L2NormalizationParams*>(node->user_data);","","  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","  const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":0}
{"cve":"CVE-2020-15204","code_chunks":["    auto session_state = ctx->session_state();","    OP_REQUIRES(ctx, session_state != nullptr,","                errors::FailedPrecondition(","                    \"GetSessionHandle called on null session state\"));","    int64 id = session_state->GetNewId();","    TensorStore::TensorAndKey tk{val, id, requested_device()};","    OP_REQUIRES_OK(ctx, ctx->tensor_store()->AddTensor(name(), tk));"],"label":0}
{"cve":"CVE-2023-2839","code_chunks":["}","","static void naludmx_finalize(GF_Filter *filter)","{","\tGF_NALUDmxCtx *ctx = gf_filter_get_udta(filter);","","\tif (ctx->importer) naludmx_log_stats(ctx);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["CUresult res = cuEventQuery(event);","if (res != CUDA_SUCCESS && res != CUDA_ERROR_NOT_READY) {","return tsl::Status(","tsl::error::INTERNAL,","absl::StrFormat(\"failed to query event: %s\", ToString(res)));","}",""],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["  if (start) {","    if (parser->m_parentParser) { \/* we are parsing an external entity *\/","      parser->m_processor = externalEntityContentProcessor;","      return externalEntityContentProcessor(parser, start, end, endPtr);","    } else {","      parser->m_processor = contentProcessor;","      return contentProcessor(parser, start, end, endPtr);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["return Py_None;","}","","result = PyType_GenericNew(arguments_type, NULL, NULL);"],"label":1}
{"cve":"CVE-2019-19603","code_chunks":["}","}else{","if( pParse->nested==0","&& 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)","){","sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\","],"label":1}
{"cve":"CVE-2018-20175","code_chunks":["int i;","uint16 num_updates;","","in_uint16_le(s, num_updates);   \/* rectangles *\/","","for (i = 0; i < num_updates; i++)"],"label":0}
{"cve":"CVE-2021-42782","code_chunks":["size_t intlen;","size_t templen;","","SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);","","\/* The PIV returns a DER SEQUENCE{INTEGER, INTEGER}"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["            return 1;","        }","        else {","            int res;","            Py_ssize_t len;","            Py_ssize_t i;","            if (!PyList_Check(tmp)) {"],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["\t  load_flags = 24;","\tif (tiff_ifd[raw].bytes*5 == raw_width*raw_height*8) {","\t  load_flags = 81;","\t  tiff_bps = 12;","\tswitch (tiff_bps) {","\t  case  8: load_raw = &CLASS eight_bit_load_raw;\tbreak;","\t  case 12: if (tiff_ifd[raw].phint == 2)"],"label":0}
{"cve":"CVE-2021-3962","code_chunks":["\/*","Compute pixel scaling table.","*\/","length=(size_t) (GetQuantumRange(info.depth)+1);","if (length > (size_t) GetBlobSize(image))","ThrowDCMException(CorruptImageError,\"InsufficientImageDataInFile\")"],"label":1}
{"cve":"CVE-2020-11939","code_chunks":["static u_int16_t concat_hash_string(struct ndpi_packet_struct *packet,","char *buf, u_int8_t client_hash) {","u_int16_t offset = 22, buf_out_len = 0;","if(offset+sizeof(u_int32_t) >= packet->payload_packet_len)","goto invalid_payload;","u_int32_t len = ntohl(*(u_int32_t*)&packet->payload[offset]);"],"label":1}
{"cve":"CVE-2018-20820","code_chunks":["Sirikata::BrotliCodec::Decompress(compressed_header_buffer.data(),","compressed_header_buffer.size(),","JpegAllocator<uint8_t>(),","max_file_size * 2 + 128 * 1024 * 1024));","if (uncompressed_header_buffer.second) {","always_assert(false && \"Data not properly zlib coded\");","return false;"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["            data_1 = *event_data++;","            midi_setup_channel_pressure(mdi, channel, data_1);","            ret_cnt++;","            break;","            if (siz < 2) goto shortbuf;","            data_1 = *event_data++;","            data_2 = *event_data++;"],"label":0}
{"cve":"CVE-2017-16840","code_chunks":["","\/* DWT init *\/","if (ff_vc2enc_init_transforms(&s->transform_args[i].t,","s->plane[0].coef_stride,","s->plane[0].dwt_height))","goto alloc_fail;"],"label":1}
{"cve":"CVE-2018-15473","code_chunks":["authenticated = 1;","}","sshbuf_free(b);","free(sig);","auth2_record_key(authctxt, authenticated, key);","} else {","debug(\"%s: test pkalg %s pkblob %s%s%s\","],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty val;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (_PyObject_HasAttrId(obj, &PyId_context_expr)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_context_expr);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"CVE-2022-41859","code_chunks":["HMAC_Update(ctx, (uint8_t const *)password, password_len);","HMAC_Update(ctx, (uint8_t *)&ctr, sizeof(ctr));","pwd_hmac_final(ctx, pwe_digest);","","BN_bin2bn(pwe_digest, SHA256_DIGEST_LENGTH, rnd);","eap_pwd_kdf(pwe_digest, SHA256_DIGEST_LENGTH, \"EAP-pwd Hunting And Pecking\","],"label":1}
{"cve":"CVE-2018-25032","code_chunks":["    deflate_state *s;","    unsigned dist;  \/* distance of matched string *\/","    unsigned lc;    \/* match length-MIN_MATCH or unmatched char (if dist==0) *\/","{","    s->sym_buf[s->sym_next++] = dist;","    s->sym_buf[s->sym_next++] = dist >> 8;","    s->sym_buf[s->sym_next++] = lc;"],"label":0}
{"cve":"CVE-2022-2287","code_chunks":["","    if (fwv != (size_t)1)","\tretval = FAIL;","    if (retval == FAIL)","\temsg(_(e_error_while_writing));","","    return retval;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2023-3012","code_chunks":["static GF_Err xml_sax_append_string(GF_SAXParser *parser, char *string)","{","u32 size = parser->line_size;","u32 nl_size = (u32) strlen(string);","","if (!nl_size) return GF_OK;",""],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["type_ignore_ty o = (type_ignore_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"CVE-2021-29608","code_chunks":["    const Tensor first_partition_tensor =","        context->input(kFirstPartitionInputIndex);","    const RowPartitionType first_partition_type = row_partition_types_[0];","    switch (first_partition_type) {","        *result = first_partition_tensor.scalar<INDEX_TYPE>()();","        return Status::OK();","        return errors::InvalidArgument("],"label":0}
{"cve":"CVE-2016-6874","code_chunks":["Array &arr1, const Array& arr2) {","if (check) {","if (seen.find((void*)arr1.get()) != seen.end()) {","raise_warning(\"array_replace_recursive(): recursion detected\");","return;","}"],"label":1}
{"cve":"CVE-2022-29369","code_chunks":[],"label":1}
{"cve":"CVE-2020-15213","code_chunks":["TfLiteTensor* output) {","int max_index = -1;","const int segment_id_size = segment_ids->dims->data[0];","if (segment_id_size > 0) {","max_index = segment_ids->data.i32[segment_id_size - 1];","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteIntArray* input_dims = input->dims;","  int input_dims_size = input_dims->size;","  TF_LITE_ENSURE(context, input_dims_size >= 1);","","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2018-10540","code_chunks":["break;","}","else {                      int bytes_to_copy = (chunk_header.ckSize + 7) & ~7L;","char *buff = malloc (bytes_to_copy);","","if (debug_logging_mode)","error_line (\"extra unknown chunk \\\"%c%c%c%c\\\" of %d bytes\","],"label":1}
{"cve":"CVE-2022-0519","code_chunks":["RBinJavaElementValuePair *evps = NULL;","ut64 offset = 0;","if (sz < 8) {","return NULL;","}","RBinJavaAnnotation *annotation = R_NEW0 (RBinJavaAnnotation);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,","int index) {","if (context->tensors != nullptr) {","return &context->tensors[node->outputs->data[index]];","} else {","return context->GetTensor(context, node->outputs->data[index]);"],"label":1}
{"cve":"PYSEC-2022-104","code_chunks":["}","","ConvolutionDimensions dims =","OpDimensionsFromInputs(x_shape, op_info, &found_unknown_shapes);","","int64_t ops = 0;"],"label":1}
{"cve":"CVE-2022-29694","code_chunks":["","assert(size != 0); \/* it would hand out same offset multiple times *\/","","if (QLIST_EMPTY(&uc->ram_list.blocks)) {","return 0;","}",""],"label":1}
{"cve":"CVE-2022-40138","code_chunks":["","} else {","llvm_unreachable(\"Invalid bytecode kind for execution\");"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\tgoto fail;","","\t*dst = *order;","","\tif (order->bitmapData.length > 0)","\t{","\t\tdst->bitmapData.data = malloc(order->bitmapData.length);"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["static struct match_attr *parse_attr_line(const char *line, const char *src,","int lineno, unsigned flags)","{","size_t namelen, num_attr, i;","const char *cp, *name, *states;","struct match_attr *res = NULL;","int is_macro;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"CVE-2016-8654","code_chunks":["\t\t\tsrcptr2 = srcptr;","\t\t\tfor (i = 0; i < JPC_QMFB_COLGRPSIZE; ++i) {","\t\t\t\t*dstptr2 = *srcptr2;","\t\t\t\t++dstptr2;","\t\t\t\t++srcptr2;","\t\t\t}","\t\t\tdstptr += JPC_QMFB_COLGRPSIZE;"],"label":0}
{"cve":"CVE-2019-20805","code_chunks":["bool PackLinuxElf64::calls_crt1(Elf64_Rela const *rela, int sz)","{","if (!dynsym || !dynstr) {","return false;","}","for (unsigned relnum= 0; 0 < sz; (sz -= sizeof(Elf64_Rela)), ++rela, ++relnum) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","const TfLiteTensor* multipliers = GetInput(context, node, kInputMultipliers);","","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context, ResizeOutput(context, node));"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["    QuantizeMultiplierSmallerThanOneExp(","        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);","","    QuantizeMultiplierSmallerThanOneExp(","        real_output_multiplier, &data->output_multiplier, &data->output_shift);","","    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized("],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["isvalid = authorize_handler->verify_authorizer(","cct, keys,","authorizer_data, authorizer_reply, name, global_id, caps_info, session_key,","&auid);","} else {","dout(10) << __func__ << \" no rotating_keys (yet), denied\" << dendl;","isvalid = false;"],"label":1}
{"cve":"CVE-2020-36177","code_chunks":["        padLen = pkcsBlockLen - inputLen - 1;","        ret    = wc_RNG_GenerateBlock(rng, &pkcsBlock[1], padLen);","        if (ret != 0) {","            return ret;","        }","","        \/* remove zeros *\/"],"label":0}
{"cve":"CVE-2020-27787","code_chunks":["-1+ e_shnum -j, sh_name);","throwCantPack(msg);","}","if (0==strcmp(name, &shstrtab[sh_name])) {","return shdr;","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["      SetTensorToDynamic(output0);","            const TfLiteTensor* input;","      TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","      TfLiteTensor* output1;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &output1));","      TF_LITE_ENSURE_STATUS(context->ResizeTensor(","          context, output1, TfLiteIntArrayCopy(input->dims)));"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  const int num_elements = NumElements(input);","  switch (input->type) {","      memset(GetTensorData<int64_t>(output), 0, num_elements * sizeof(int64_t));","      break;","      memset(GetTensorData<int32_t>(output), 0, num_elements * sizeof(int32_t));"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2023-30186","code_chunks":["}","","std::wstring CV8RealTimeWorker::GetJSVariable(std::wstring sParam)","{","std::string sParamA = U_TO_UTF8(sParam);","NSStringUtils::string_replaceA(sParamA, \"\\\\\\\"\", \"\\\"\");"],"label":1}
{"cve":"CVE-2018-15473","code_chunks":["(r = sshbuf_put_string(b, pkalg, alen)) != 0 ||","(r = sshbuf_put_string(b, pkblob, blen)) != 0 ||","(r = sshbuf_put_cstring(b, chost)) != 0 ||","(r = sshbuf_put_cstring(b, cuser)) != 0)","fatal(\"%s: buffer error: %s\", __func__, ssh_err(r));","#ifdef DEBUG_PK"],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["if (txt) {","op->txt = r_str_newf (\"%s %02x %02x %02x %02x %02x %02x %02x \" \\","\"%02x %02x %02x %02x %02x %02x %02x %02x %02x\",","opdef->txt, bytes[0], bytes[1], bytes[2], bytes[3],","bytes[4], bytes[5], bytes[6], bytes[7], bytes[8],","bytes[9], bytes[10], bytes[11], bytes[12], bytes[13],","bytes[14], bytes[15]);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["lstm::full::kOutputLayerNormCoefficientsTensor)",": nullptr;","","TfLiteTensor* output = GetOutput(context, node, lstm::full::kOutputTensor);","","TfLiteLSTMParams lstm_params;","lstm_params.activation = params->activation;"],"label":1}
{"cve":"CVE-2022-21723","code_chunks":["    return strncmp(scanner->curptr, s, len);","}","","","PJ_DEF(int) pj_scan_stricmp( pj_scanner *scanner, const char *s, int len)","{","    if (scanner->curptr + len > scanner->end) {"],"label":0}
{"cve":"PYSEC-2021-636","code_chunks":["auto root = Scope::NewRootScope().ExitOnError();","","string two_file, three_file;","TF_ASSERT_OK(CreateTempFile(env, 2.0f, 1000, &two_file));","TF_ASSERT_OK(CreateTempFile(env, 3.0f, 1000, &three_file));","auto node1 = ops::ImmutableConst(root, DT_FLOAT, kFileTensorShape, two_file);"],"label":1}
{"cve":"PYSEC-2021-522","code_chunks":["  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","","  switch (input->type) {","      return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);","      return EvalImpl<kernel_type, kTfLiteUInt8>(context, node);","      return EvalImpl<kernel_type, kTfLiteInt8>(context, node);","      return EvalImpl<kernel_type, kTfLiteInt16>(context, node);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["auto* params = reinterpret_cast<TfLiteDivParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"],"label":1}
{"cve":"CVE-2022-0523","code_chunks":["\tif (n > ST32_MAX) {","\t\teprintf (\"bad marshal data (list size out of range)\\n\");","\t\treturn NULL;","\t}","\tif (error) {","\t\treturn NULL;","\t}"],"label":0}
{"cve":"CVE-2020-15888","code_chunks":["int actual = cast_int(L->top - ci->func) - 1;  \/* number of arguments *\/","int nextra = actual - nfixparams;  \/* number of extra arguments *\/","ci->u.l.nextraargs = nextra;","checkstackGC(L, p->maxstacksize + 1);","\/* copy function to the top of the stack *\/","setobjs2s(L, L->top++, ci->func);","\/* move fixed parameters to the top of the stack *\/"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["isinstance = PyObject_IsInstance(obj, (PyObject*)UnaryOp_type);","if (isinstance == -1) {","return 1;","}","if (isinstance) {","unaryop_ty op;"],"label":1}
{"cve":"CVE-2023-4322","code_chunks":["static void cmd_anal_ucall_ref(RCore *core, ut64 addr) {","RAnalFunction * fcn = r_anal_get_function_at (core->anal, addr);","if (fcn) {","r_cons_printf (\" ; %s\", fcn->name);","} else {"],"label":1}
{"cve":"CVE-2020-14398","code_chunks":["WaitForMessage(client, 100000);","i = 0;","} else {","rfbClientErr(\"read (%d: %s)\\n\",errno,strerror(errno));"],"label":1}
{"cve":"CVE-2017-6350","code_chunks":["","\/*","* Write the undo tree in an undo file.","* When \"name\" is not NULL, use it as the name of the undo file.","* Otherwise use buf->b_ffname to generate the undo file name.","* \"buf\" must never be null, buf->b_ffname is used to obtain the original file"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp4_write_bin(uint8_t *bin, size_t len, const fp4_t a) {","if (len != 4 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":0}
{"cve":"CVE-2021-24025","code_chunks":["bool MemFile::seek(int64_t offset, int whence \/* = SEEK_SET *\/) {","assertx(m_len != -1);","if (whence == SEEK_CUR) {","if (offset >= 0 && offset < bufferedLen()) {","setReadPosition(getReadPosition() + offset);","setPosition(getPosition() + offset);","return true;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["            Py_CLEAR(tmp);","        }","        if (lookup_attr_id(obj, &PyId_decorator_list, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"decorator_list\\\" missing from FunctionDef\");"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["GetOutput(context, node, kSoftNMSOutputTensorSelectedScores);","output_num_selected_indices =","GetOutput(context, node, kSoftNMSOutputTensorNumSelectedIndices);","if (!is_max_output_size_const) {","SetTensorSizes(context, output_selected_indices, {max_output_size_value});","SetTensorSizes(context, output_selected_scores, {max_output_size_value});"],"label":1}
{"cve":"CVE-2020-1712","code_chunks":["return r;","}","","r = sd_bus_message_close_container(pk);","if (r < 0)","return r;"],"label":1}
{"cve":"CVE-2019-13223","code_chunks":["ady -= abs(base) * adx;","if (x1 > n) x1 = n;","if (x < x1) {","LINE_OP(output[x], inverse_db_table[y]);","for (++x; x < x1; ++x) {"],"label":1}
{"cve":"CVE-2021-46822","code_chunks":["cinfo->in_color_space = JCS_GRAYSCALE;","TRACEMS2(cinfo, 1, JTRC_PGM, w, h);","if (maxval > 255) {","source->pub.get_pixel_rows = get_word_gray_row;","} else if (maxval == MAXJSAMPLE && sizeof(JSAMPLE) == sizeof(U_CHAR) &&","cinfo->in_color_space == JCS_GRAYSCALE) {","source->pub.get_pixel_rows = get_raw_row;"],"label":1}
{"cve":"CVE-2022-0326","code_chunks":["}","tree = tree->cdr;","if (val && cursp() >= slimit) {","pop_n(len*2);","if (!update) {","genop_2(s, OP_HASH, cursp(), len);"],"label":1}
{"cve":"CVE-2020-11095","code_chunks":["orderInfo->controlFlags = ORDER_STANDARD;","orderInfo->controlFlags |= ORDER_TYPE_CHANGE;","length += 1;","length += PRIMARY_DRAWING_ORDER_FIELD_BYTES[orderInfo->orderType];","length += update_prepare_bounds(context, orderInfo);","return length;","}"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\treturn FALSE;","","\theader = rdp_capability_set_start(s);","\tif (header > UINT16_MAX)","\t\treturn FALSE;","\tStream_Write_UINT8(s, BITMAP_CACHE_V2); \/* cacheVersion (1 byte) *\/","\tStream_Write_UINT8(s, 0);               \/* pad1 (1 byte) *\/"],"label":0}
{"cve":"CVE-2022-28073","code_chunks":["\t\t\t\t\t\tut8 buf[256] = {0};","\t\t\t\t\t\tr_io_read_at (core->io, aop.ptr, buf, sizeof (buf) - 1);","\t\t\t\t\t\tut64 ptr = r_read_ble (buf, core->print->big_endian, aop.refptr * 8);","\t\t\t\t\t\tif (ptr && ptr != UT64_MAX) {","\t\t\t\t\t\t\tRFlagItem *f = r_flag_get_by_spaces (core->flags, ptr, R_FLAGS_FS_STRINGS, NULL);","\t\t\t\t\t\t\tif (f) {","\t\t\t\t\t\t\t\tstr_flag = true;"],"label":0}
{"cve":"CVE-2018-20762","code_chunks":["ext = strrchr(szName, '.');","if (ext && strlen(ext) > 19) ext = NULL;","","if (ext && strlen(ext) > 1) {","strcpy(szExt, &ext[1]);","strlwr(szExt);","#ifndef FFMPEG_DEMUX_ENABLE_MPEG2TS"],"label":1}
{"cve":"PYSEC-2021-287","code_chunks":["ctx, input.dims() == 4,","errors::InvalidArgument(\"Current RequantizePerChannel operator\"","\"supports 4D tensors only.\"));","","const Tensor& input_min_vec = ctx->input(kInputMinVecIndex);","size_t depth = input_min_vec.NumElements();"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":[],"label":1}
{"cve":"CVE-2023-25671","code_chunks":["StringRef node_name;","StringRef output_name = \"\";","bool is_control_dep = full_name[0] == '^';","size_t output_num = 0;","if (is_control_dep) full_name = full_name.drop_front();","{"],"label":0}
{"cve":"CVE-2019-15162","code_chunks":["daemon_AuthUserPwd(char *username, char *password, char *errbuf)","{","#ifdef _WIN32","\/*","* Warning: the user which launches the process must have the"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const int input_size = NumElements(input) \/ SizeOfDimension(input, 0);","const int batch_size = SizeOfDimension(input, 0);","int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>(","GetTemporary(context, node, data->input_quantized_index));","float* scaling_factors_ptr = GetTensorData<float>(","GetTemporary(context, node, data->scaling_factors_index));"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["reinterpret_cast<TfLiteLocalResponseNormParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2023-51384","code_chunks":["id->dest_constraints = dest_constraints;","id->ndest_constraints = ndest_constraints;","dest_constraints = NULL; \/* transferred *\/","ndest_constraints = 0;","TAILQ_INSERT_TAIL(&idtab->idlist, id, next);","idtab->nentries++;"],"label":1}
{"cve":"CVE-2020-15121","code_chunks":["#if __UNIX__","\tint ret, flags;","#endif","\tif (!s) {","\t\treturn false;","\t}","#if __UNIX__"],"label":0}
{"cve":"CVE-2023-27114","code_chunks":["}","if (txt) {","op->txt = r_str_newf (\"%s %d\", opdef->txt, op->val);","}","op->len += n;","}"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["Py_ssize_t len;","Py_ssize_t i;","tmp = _PyObject_GetAttrId(obj, &PyId_values);","if (tmp == NULL) goto failed;","if (!PyList_Check(tmp)) {","PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"],"label":1}
{"cve":"CVE-2018-21010","code_chunks":["}","","in_space = cmsGetPCS(in_prof);","out_space = cmsGetColorSpace(in_prof);","intent = cmsGetHeaderRenderingIntent(in_prof);",""],"label":0}
{"cve":"CVE-2016-10249","code_chunks":["void *jas_malloc(size_t size)","{","void *result;","JAS_DBGLOG(101, (\"jas_malloc called with %zu\\n\", size));","result = malloc(size);","JAS_DBGLOG(100, (\"jas_malloc(%zu) -> %p\\n\", size, result));","return result;"],"label":1}
{"cve":"CVE-2019-17178","code_chunks":["tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));","","if (NULL == tmp)","{","fprintf(stderr,  \"Could not reallocate string buffer.\\n\");","exit(-3);"],"label":1}
{"cve":"CVE-2018-20455","code_chunks":["\t\t\top->dest_size = OT_WORD;","\t\t\texplicit_size = true;","\t\t} else if (!r_str_ncasecmp (str + pos, \"dword\", 5)) {","\t\t\top->type |= OT_MEMORY | OT_DWORD;","\t\t\top->dest_size = OT_DWORD;","\t\t\texplicit_size = true;","\t\t} else if (!r_str_ncasecmp (str + pos, \"qword\", 5)) {"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["return NULL;","}","","for_ch = CHILD(n, 1 + is_async);"],"label":1}
{"cve":"CVE-2020-11058","code_chunks":["}","","\/**"," * Write brush capability set.\\n"," * @msdn{cc240564}"," * @param s stream"," * @param settings settings"],"label":0}
{"cve":"CVE-2021-3331","code_chunks":["UnicodeString __fastcall TSessionData::ReadXmlNode(_di_IXMLNode Node, const UnicodeString & Name, const UnicodeString & Default)","{","  _di_IXMLNode TheNode = Node->ChildNodes->FindNode(Name);","  UnicodeString Result;","  if (TheNode != NULL)","  {","    Result = TheNode->Text.Trim();"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["a0 = GetInput(context, node, 0);","a1 = a0;","}","TfLiteTensor* out = GetOutput(context, node, 0);","int num = 1;","for (int i = 0; i < a0->dims->size; ++i) {","num *= a0->dims->data[i];"],"label":1}
{"cve":"CVE-2023-3523","code_chunks":["GF_Err vobsub_read_idx(FILE *file, vobsub_file *vobsub, s32 *version)","{","char  strbuf[256];","char *str, *pos, *entry;","s32   line, id =-1, delay = 0;","Bool  error = 0;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_control_capability_set(wStream* s, rdpSettings* settings)","{","WINPR_UNUSED(settings);","if (Stream_GetRemainingLength(s) < 8)","return FALSE;","","Stream_Seek_UINT16(s); \/* controlFlags (2 bytes) *\/"],"label":0}
{"cve":"CVE-2016-10248","code_chunks":["int jpc_tsfb_synthesize(jpc_tsfb_t *tsfb, jas_seq2d_t *a)","{","return (tsfb->numlvls > 0) ? jpc_tsfb_synthesize2(tsfb,","jas_seq2d_getref(a, jas_seq2d_xstart(a), jas_seq2d_ystart(a)),","jas_seq2d_xstart(a), jas_seq2d_ystart(a), jas_seq2d_width(a),","jas_seq2d_height(a), jas_seq2d_rowstep(a), tsfb->numlvls - 1) : 0;"],"label":1}
{"cve":"CVE-2018-13006","code_chunks":["{","GF_HandlerBox *p = (GF_HandlerBox *)a;","gf_isom_box_dump_start(a, \"HandlerBox\", trace);","if (p->nameUTF8 && (u32) p->nameUTF8[0] == strlen(p->nameUTF8+1)) {","fprintf(trace, \"hdlrType=\\\"%s\\\" Name=\\\"%s\\\" \", gf_4cc_to_str(p->handlerType), p->nameUTF8+1);","} else {","fprintf(trace, \"hdlrType=\\\"%s\\\" Name=\\\"%s\\\" \", gf_4cc_to_str(p->handlerType), p->nameUTF8);"],"label":1}
{"cve":"CVE-2022-36026","code_chunks":["Tensor* output = nullptr;","OP_REQUIRES_OK(ctx, ctx->allocate_output(0, input.shape(), &output));","","Tensor num_bits_tensor;","num_bits_tensor = ctx->input(3);","int num_bits_val = num_bits_tensor.scalar<int32>()();"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* begin;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kBeginTensor, &begin));"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static int pad_pkcs2(bn_t m, int *p_len, int m_len, int k_len, int operation) {","uint8_t pad, h1[RLC_MD_LEN], h2[RLC_MD_LEN];","uint8_t *mask = RLC_ALLOCA(uint8_t, k_len);","int result = RLC_ERR;"],"label":1}
{"cve":"PYSEC-2021-300","code_chunks":["","# Licensed under the Apache License, V"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* axis_tensor = GetInput(context, node, kAxisTensor);","int axis = GetTensorData<int32_t>(axis_tensor)[0];","const int rank = NumDimensions(input);","if (axis < 0) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["                    GetInputSafe(context, node, kInputPositions, &positions));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","","  if (positions->type == kTfLiteInt32) {","    switch (input->type) {"],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["if ((ret = parse_location(s, p)) < 0)","return ret;","*new_location = 1;","} else if (!av_strcasecmp(tag, \"Content-Length\") && s->filesize == -1) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","  if (has_dynamic_output_tensors) {","    for (int i = 0; i < node->outputs->size; ++i) {","      TfLiteTensor* output;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &output));","      TfLiteTensor* subgraph_output =","          active_branch_subgraph.tensor(active_branch_subgraph.outputs()[i]);"],"label":0}
{"cve":"CVE-2021-33361","code_chunks":["\ttmp->segment_run_entry_table = gf_list_new();","\treturn (GF_Box *)tmp;","}","","#ifndef GPAC_DISABLE_ISOM_WRITE","","GF_Err asrt_box_write(GF_Box *s, GF_BitStream *bs)"],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["return -EINVAL;","}","","if (!fit_check_format(fit_hdr)) {","printf(\"fsl-mc: ERR: Bad firmware image (bad FIT header)\\n\");","return -EINVAL;","}"],"label":1}
{"cve":"CVE-2023-49286","code_chunks":["    Ip::Address PaS;","    struct addrinfo *AI = nullptr;","    int crfd = -1;","    int prfd = -1;","    int cwfd = -1;","    int pwfd = -1;","    int fd;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(values, i, val);","            }","            Py_CLEAR(tmp);"],"label":0}
{"cve":"CVE-2020-11087","code_chunks":["message = &context->AUTHENTICATE_MESSAGE;","ZeroMemory(message, sizeof(NTLM_AUTHENTICATE_MESSAGE));","s = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);"],"label":1}
{"cve":"CVE-2021-4193","code_chunks":["colnr_T\t*cursor,","colnr_T\t*end)","{","colnr_T\tvcol;","char_u\t*ptr;\t\t    char_u\t*posptr;\t    char_u\t*line;\t\t    int\t\tincr;","int\t\thead;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["arguments_ty o = (arguments_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_RETURN_NONE;","}","","result = PyType_GenericNew(arguments_type, NULL, NULL);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      }","    }","  }","","  ApplyTimeWeightsBiasAndActivation(","      batch_size, memory_size, num_filters, num_units, rank, weights_time_ptr,","      bias_ptr, params->activation, state_ptr, scratch_ptr, output_ptr);"],"label":0}
{"cve":"PYSEC-2022-85","code_chunks":["  node_costs->num_compute_ops = kMinComputeOp;","  node_costs->num_input_bytes_accessed = {0};","  node_costs->num_output_bytes_accessed = {0};","  bool inaccurate = false;","  node_costs->max_memory = CalculateOutputSize(op_info, &inaccurate);","  if (inaccurate) {","    node_costs->inaccurate = true;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (i < NCH(n) && TYPE(CHILD(n, i)) == COMMA)","i += 1; \/* the comma, if present *\/","break;","if (i+1 >= NCH(n) ||","(i+2 == NCH(n) && (TYPE(CHILD(n, i+1)) == COMMA","|| TYPE(CHILD(n, i+1)) == TYPE_COMMENT))) {"],"label":1}
{"cve":"PYSEC-2021-847","code_chunks":["                      \"logits and labels must be broadcastable: logits_size=\",","                      logits_in.shape().DebugString(),","                      \" labels_size=\", labels_in.shape().DebugString()));","      shape_in = BCast::ToShape(bcast.output_shape());","    }","    OP_REQUIRES(context, TensorShapeUtils::IsMatrix(shape_in),","                errors::InvalidArgument(\"logits and labels must be either \""],"label":0}
{"cve":"CVE-2023-35852","code_chunks":["        SCReturnInt(-1);","    }","","    if (!DetectDatasetParse(rawstr, cmd_str, sizeof(cmd_str), name, sizeof(name), &type, load,","                sizeof(load), save, sizeof(save), &memcap, &hashsize)) {","        return -1;","    }"],"label":0}
{"cve":"CVE-2021-4173","code_chunks":["                len = (int)STRLEN(tofree);","    name = deref_func_name(tofree, &len, partial != NULL ? NULL : &partial,","\t    in_vim9script() && type == NULL ? &type : NULL, FALSE, &found_var);","","            startarg = skipwhite(arg);","    if (*startarg != '(')","    {"],"label":0}
{"cve":"CVE-2020-1912","code_chunks":["auto *outerFn = Builder.createGeneratorFunction(","originalName,","Function::DefinitionKind::ES5Function,","ESTree::isStrict(functionNode->strictness),","\/* insertBefore *\/ nullptr);",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["    int zero_points_dims[1] = {batch_size};","    if (!TfLiteIntArrayEqualsArray(zero_points->dims, 1, zero_points_dims)) {","      TfLiteIntArray* zero_points_size = TfLiteIntArrayCreate(1);","      zero_points_size->data[0] = batch_size;","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, zero_points,","                                                       zero_points_size));","    }"],"label":0}
{"cve":"CVE-2021-32792","code_chunks":["char *java_script = apr_psprintf(r->pool,","\"    <script type=\\\"text\/javascript\\\">\\n\"","\"      window.top.location.href = '%s?session=logout';\\n\"","\"    <\/script>\\n\", oidc_get_redirect_uri(r, c));","","return oidc_util_html_send(r, \"Redirecting...\", java_script, NULL, NULL,","OK);"],"label":1}
{"cve":"CVE-2020-15202","code_chunks":["      : OpKernel(context) {","    OP_REQUIRES_OK(context, context->GetAttr(\"num_bucketized_features\",","                                             &num_bucketized_features_));","    OP_REQUIRES_OK(context,","                   context->GetAttr(\"logits_dimension\", &logits_dimension_));","  }",""],"label":0}
{"cve":"CVE-2021-29523","code_chunks":["      new_num_elements =","          MultiplyWithoutOverflow(new_num_elements, input_shape_vec(i));","      if (new_num_elements < 0) {","        overflow_ocurred = true;","      }","    }",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["      break;","      context->ReportError(context, \"Type '%s' not currently supported.\",","                           TfLiteTypeGetName(input->type));","      return kTfLiteError;","  }","#undef TF_LITE_SPACE_TO_DEPTH",""],"label":0}
{"cve":"PYSEC-2020-294","code_chunks":["int max_index = -1;","const int segment_id_size = segment_ids->dims->data[0];","if (segment_id_size > 0) {","max_index = segment_ids->data.i32[segment_id_size - 1];","}","const int data_rank = NumDimensions(data);"],"label":1}
{"cve":"CVE-2020-14147","code_chunks":["case '>': h->endian = BIG; return;","case '<': h->endian = LITTLE; return;","case '!': {","int a = getnum(fmt, MAXALIGN);","if (!isp2(a))","luaL_error(L, \"alignment %d is not a power of 2\", a);","h->align = a;"],"label":1}
{"cve":"CVE-2020-11096","code_chunks":["\t\t\t\tfor (i = 7; i >= 0; i--)","\t\t\t\t{","\t\t\t\t\tStream_Read(s, &cache_brush->data[i * scanline], scanline);","\t\t\t\t}","\t\t\t}","\t\t}","\t}"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 length;","UINT16 channelId;","","if (!rdp_read_share_control_header(s, &length, NULL, &type, &channelId))","return -1;","","if (type == PDU_TYPE_DATA)"],"label":0}
{"cve":"CVE-2020-1712","code_chunks":["return -EACCES;","","\/* Copy error from polkit reply *\/","sd_bus_error_copy(error, e);","return -sd_bus_error_get_errno(e);","}",""],"label":1}
{"cve":"CVE-2019-20805","code_chunks":["    if (is_shlib","    ||  ((unsigned)(get_te32(&ehdri.e_entry) - load_va) + up4(lsize) +","                ph.getPackHeaderSize() + sizeof(overlay_offset))","            < up4(file_size)) {","                funpad4(fi);          unsigned d_info[4]; fi->readx(d_info, sizeof(d_info));","        if (0==old_dtinit) {","            old_dtinit = get_te32(&d_info[2 + (0==d_info[0])]);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2022-25139","code_chunks":["function->await = ctx;","","ret = njs_vmcode_interpreter(vm, ctx->pc);","","function->context = NULL;","function->await = NULL;"],"label":1}
{"cve":"CVE-2018-16300","code_chunks":["            break;","            ND_PRINT((ndo, \", subcode %s (%u)\",","\t\t   tok2str(bgp_notify_minor_update_values, \"Unknown\",","\t\t\t      bgpn.bgpn_minor),","\t\t   bgpn.bgpn_minor));","            break;","            ND_PRINT((ndo, \" subcode %s (%u)\","],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT32 drawNineGridSupportLevel;","","if (length < 12)","return FALSE;",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t}","","\t\tfor (int i = l - 2; i >= 0; i--) {","\t\t\tep2_dbl(t, t);","\t\t\tif (bn_get_bit(k, i)) {","\t\t\t\tep2_add(t, t, p);","\t\t\t}"],"label":0}
{"cve":"CVE-2023-25659","code_chunks":["c, FastBoundsCheck(index, first_dim_size),","errors::InvalidArgument(\"indices[\", i, \"] is out of range\"));","memcpy(merged_base + index * slice_size, data_base + i * slice_size,","slice_bytes);","}","} else {"],"label":1}
{"cve":"CVE-2022-35966","code_chunks":["","AddInputFromArray<quint8>(input_quantized.shape(),","input_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});","AddInputFromArray<float>(TensorShape({1}), {input_max});"],"label":1}
{"cve":"CVE-2022-24754","code_chunks":["    }","","    \/* Build digest credential from arguments. *\/","    pj_strdup(pool, &cred->username, &cred_info->username);","    pj_strdup(pool, &cred->realm, &chal->realm);","    pj_strdup(pool, &cred->nonce, &chal->nonce);","    pj_strdup(pool, &cred->uri, uri);"],"label":0}
{"cve":"CVE-2016-10162","code_chunks":["zend_class_entry \t*pce;","zval\t\t\t\tobj;","","\/* OBJECTS_FIXME *\/","if (stack->top == 0) {","return;"],"label":0}
{"cve":"CVE-2019-20840","code_chunks":["int bufsize;","int nextRead;","unsigned char *data;","uint32_t *data32;","","\/* if data was carried over, copy to start of buffer *\/","memcpy(wsctx->writePos, wsctx->carryBuf, wsctx->carrylen);"],"label":1}
{"cve":"CVE-2017-9763","code_chunks":["","\t  filename[dirent.namelen] = '\\0';","","\t  if (dirent.filetype != FILETYPE_UNKNOWN)","\t    {","\t      fdiro->inode_read = 0;",""],"label":0}
{"cve":"CVE-2022-23559","code_chunks":["  const size_t output_size = lookup_size * embedding_size;","  TfLiteTensorRealloc(output_size * sizeof(float), output);","","  float* output_ptr = GetTensorData<float>(output);","  const float* weights_ptr = GetTensorData<float>(weights);","  const float* value_ptr = GetTensorData<float>(value);","    TF_LITE_ENSURE(context, output_ptr != nullptr);"],"label":0}
{"cve":"CVE-2018-10887","code_chunks":["\t * base object, resulting in data corruption or segfault.","\t *\/","\tif ((hdr_sz(&base_sz, &delta, delta_end) < 0) || (base_sz != base_len)) {","\t\tgiterr_set(GITERR_INVALID, \"failed to apply delta: base size does not match given data\");","\t\treturn -1;","\t}",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params = reinterpret_cast<TfLiteMulParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* in_tensor = GetInput(context, node, 0);","TfLiteTensor* out_tensor = GetOutput(context, node, 0);","TfLiteIntArray* new_size = TfLiteIntArrayCopy(in_tensor->dims);","return context->ResizeTensor(context, out_tensor, new_size);","};"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    int bw_row_sums_dims[2] = {num_row_sums, bw_num_units};","    if (!TfLiteIntArrayEqualsArray(bw_row_sums->dims, 2, bw_row_sums_dims)) {","      TfLiteIntArray* bw_row_sums_size = TfLiteIntArrayCreate(2);","      bw_row_sums_size->data[0] = bw_row_sums_dims[0];","      bw_row_sums_size->data[1] = bw_row_sums_dims[1];","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, bw_row_sums,","                                                       bw_row_sums_size));"],"label":0}
{"cve":"CVE-2018-9336","code_chunks":["        MsgToEventLog(M_ERR, TEXT(\"Startup data ends at command line options\"));","        ReturnError(pipe, ERROR_STARTUP_DATA, L\"GetStartupData\", 1, &exit_event);","        goto err;","    }","","    sud->std_input = sud->options + len;","    return TRUE;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fb_set_bit(fb_t a, int bit, int value);"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["        break;","#endif","\t\t      case 50740:\t\t\t\/* tag 0xc634 : DNG Adobe, DNG Pentax, Sony SR2, DNG Private *\/","#ifdef LIBRAW_LIBRARY_BUILD","      {","        char mbuf[64];","        unsigned short makernote_found = 0;"],"label":0}
{"cve":"CVE-2018-20176","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["                                  &output_state_sf));","    output_state_sf->type = kTfLiteFloat32;","    output_state_sf->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqualsArray(output_state_sf->dims, 1, scaling_dims)) {","      TfLiteIntArray* output_state_sf_size = TfLiteIntArrayCreate(1);","      output_state_sf_size->data[0] = n_batch;","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, output_state_sf,"],"label":0}
{"cve":"CVE-2022-25139","code_chunks":["vm->levels[NJS_LEVEL_TEMP] = async->temp;","","vm->top_frame = async;","vm->active_frame = async_frame;","","*njs_scope_value(vm, ctx->index) = *value;"],"label":1}
{"cve":"PYSEC-2021-834","code_chunks":["","string two_file, three_file;","TF_ASSERT_OK(CreateTempFileFloat(env, 2.0f, 1000, &two_file));","TF_ASSERT_OK(CreateTempFileFloat(env, 3.0f, 1000, &three_file));","auto node1 = ops::ImmutableConst(root, DT_FLOAT, kFileTensorShape, two_file);","auto node2 ="],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["PJ_DEF(void) pj_scan_get_newline( pj_scanner *scanner )","{","if (!PJ_SCAN_IS_NEWLINE(*scanner->curptr)) {","pj_scan_syntax_err(scanner);","return;","}"],"label":1}
{"cve":"CVE-2018-7584","code_chunks":["}","}","if (tmp_line[tmp_line_len - 1] == '\\n') {","--tmp_line_len;","if (tmp_line[tmp_line_len - 1] == '\\r') {","--tmp_line_len;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8 ||","             output->type == kTfLiteInt16) {","    EvalQuantized<kernel_type>(context, node, params, data, input1, input2,","                               output);","  } else {","    context->ReportError(","        context,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params = reinterpret_cast<TfLiteMfccParams*>(node->user_data);","","const TfLiteTensor* input_wav;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorWav, &input_wav));","const TfLiteTensor* input_rate;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp48_read_bin(fp48_t a, const uint8_t *bin, size_t len) {","\tif (len != 32 * RLC_FP_BYTES && len != 48 * RLC_FP_BYTES) {","\t\tRLC_THROW(ERR_NO_BUFFER);","\t\treturn;","\t}","\tif (len == 32 * RLC_FP_BYTES) {","\t\tfp8_zero(a[0][0]);"],"label":0}
{"cve":"CVE-2022-4843","code_chunks":["\t\t} else {","\t\t\tconst ut64 paddr = addr + buf_off - r_io_map_from (map) + map->delta;","\t\t\tret &= (r_io_fd_read_at (io, map->fd, paddr, &buf[buf_off], read_len) == read_len);","\t\t}","\t\t\t\tnode = r_rbnode_next (node);","\t\tsm = node ? (RIOSubMap *)node->data : NULL;","\t}"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["stmt_ty o = (stmt_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"CVE-2021-3331","code_chunks":["Bug[sbHMAC2] = asOn;","}","","SftpServer = Storage->ReadString(L\"SftpServer\", SftpServer);","#define READ_SFTP_BUG(BUG) \\","SFTPBug[sb##BUG] = TAutoSwitch(Storage->ReadInteger(L\"SFTP\" #BUG \"Bug\", SFTPBug[sb##BUG]));","READ_SFTP_BUG(Symlink);"],"label":1}
{"cve":"CVE-2020-8939","code_chunks":["}","","memcpy(dst, result.data(),","std::min(static_cast<size_t>(size),","static_cast<size_t>(INET6_ADDRSTRLEN)));","return dst;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["","\/* static *\/ tsl::StatusOr<int> GpuDriver::GetMultiprocessorCount(","    CUdevice device) {","  return GetSimpleAttribute<int>(device,","                                 CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT);","}",""],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"type_ignores\\\" missing from Module\");","            return 1;","        }","        else {","            int res;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["call = ast_for_call(c, CHILD(n, 3), dummy, NULL, CHILD(n, 4));","if (!call)","return NULL;","}"],"label":0}
{"cve":"CVE-2017-12662","code_chunks":["\"MemoryAllocationFailed\");","pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);","\/*","Dump Runlength encoded pixels.","*\/","q=pixels;"],"label":1}
{"cve":"CVE-2019-20807","code_chunks":["{","if (restricted)","{","emsg(_(\"E145: Shell commands not allowed in rvim\"));","return TRUE;","}","return FALSE;"],"label":1}
{"cve":"CVE-2018-14055","code_chunks":["for (const auto& it2 : it.second) {","File.Write(\"\\n\");","","File.Write(sIndentation + \"<\" + it.first + \" \" + it2.first + \">\\n\");","it2.second.m_pSubConfig->Write(File, iIndentation + 1);"],"label":1}
{"cve":"CVE-2021-41193","code_chunks":["#endif","","","info(\"ecall(%p): answer on pending econn %p call_type=%d\\n\", ecall, ecall->econn, call_type);","","if (!ecall->econn) {","warning(\"ecall: answer: econn does not exist!\\n\");"],"label":1}
{"cve":"PYSEC-2021-794","code_chunks":["TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","","if (output->type == kTfLiteFloat32 || output->type == kTfLiteInt32) {","EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);","} else if (output->type == kTfLiteUInt8) {","TF_LITE_ENSURE_OK("],"label":1}
{"cve":"CVE-2016-1000005","code_chunks":["const String& mode) {","MCRYPT td = mcrypt_module_open((char*)cipher.data(),","(char*)MCG(algorithms_dir).data(),","(char*)mode.data(),","(char*)MCG(modes_dir).data());","if (td == MCRYPT_FAILED) {"],"label":0}
{"cve":"CVE-2024-23325","code_chunks":["if ((ver_cmd & 0xf) == PROXY_PROTO_V2_LOCAL) {","proxy_protocol_header_.emplace(WireHeader{PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, 0, 0});","return true;","}","","if ((ver_cmd & 0xf) == PROXY_PROTO_V2_ONBEHALF_OF) {","uint8_t proto_family = buf[PROXY_PROTO_V2_SIGNATURE_LEN + 1];"],"label":0}
{"cve":"CVE-2021-33910","code_chunks":["assert(ret);","","p = strdupa(f);","if (!p)","return -ENOMEM;",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, \/*index=*\/0);","","int32_t* output_data = output->data.i32;","*output_data = *(input1->data.i32) + *(input2->data.i32);"],"label":1}
{"cve":"CVE-2019-11936","code_chunks":["if (key_or_array.isArray()) {","Array valuesArr = key_or_array.toArray();","","ArrayInit errors(valuesArr.size(), ArrayInit::Map{});","","for (ArrayIter iter(valuesArr); iter; ++iter) {"],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["  assertx(salt);","","  char random_salt[12];","  if (!*salt) {","    memcpy(random_salt,\"$1$\",3);","    ito64(random_salt+3,rand(),8);","    random_salt[11] = '\\0';"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["if (!is_integer) {","node->temporaries->data[kScratchBuffer] =","op_data->scratch_tensor_index + kScratchBuffer;","TfLiteTensor* scratch_buffer = GetTemporary(context, node, kScratchBuffer);","scratch_buffer->type = input->type;","scratch_buffer->allocation_type = kTfLiteArenaRw;",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInput, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","const TfLiteTensor* axis;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus SimpleStatefulOp::Prepare(TfLiteContext* context,","                                       TfLiteNode* node) {","  OpData* data = reinterpret_cast<OpData*>(node->user_data);","","    const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  if (input->type != kTfLiteUInt8) return kTfLiteError;"],"label":0}
{"cve":"CVE-2023-25933","code_chunks":["Type LeftTy = BOI->getLeftHandSide()->getType();","Type RightTy = BOI->getRightHandSide()->getType();","","Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))","? Type::createBigInt()",": Type::createNoType();",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["node *n = Ta3Parser_ParseStringObject(s, filename,","&_Ta3Parser_Grammar, start, &err,","&iflags);","if (flags == NULL) {","localflags.cf_flags = 0;","flags = &localflags;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp_set_bit(fp_t a, int bit, int value);"],"label":1}
{"cve":"PYSEC-2020-282","code_chunks":["                                        T* const output_batch_offset = output_flat + batch_idx;","                        T mean, stddev, minval, maxval;","        if (should_bcast) {","          mean = means(means_batch_indices[batch_idx]);","          stddev = stddevs(stddevs_batch_indices[batch_idx]);","          minval = minvals(minvals_batch_indices[batch_idx]);","          maxval = maxvals(maxvals_batch_indices[batch_idx]);"],"label":0}
{"cve":"CVE-2017-11719","code_chunks":["    UPDATE_CACHE(bs, &row->gb);","    GET_VLC(index1, bs, &row->gb, ctx->ac_vlc.table,","            DNXHD_VLC_BITS, 2);","","    while (index1 != eob_index) {","        level = ac_info[2*index1+0];","        flags = ac_info[2*index1+1];"],"label":0}
{"cve":"CVE-2020-36177","code_chunks":["#if defined(WOLFSSL_PSS_LONG_SALT) || defined(WOLFSSL_PSS_SALT_LEN_DISCOVER)","#if !defined(WOLFSSL_NO_MALLOC) || defined(WOLFSSL_STATIC_MEMORY)","salt = (byte*)XMALLOC(RSA_PSS_PAD_SZ + inputLen + saltLen, heap,","DYNAMIC_TYPE_RSA_BUFFER);","if (salt == NULL) {","return MEMORY_E;"],"label":1}
{"cve":"CVE-2021-30014","code_chunks":["\tif (!si->sps) return -1;","\tsi->slice_type = GF_VVC_SLICE_TYPE_I;","\tif (gf_bs_read_int_log(bs, 1, \"sps_subpic_info_present_flag\")) {","\t\tgf_bs_read_int_log(bs, si->sps->subpicid_len, \"subpic_id\");","\t\t\t}","","\tif (si->pps->rect_slice_flag ) {"],"label":0}
{"cve":"CVE-2018-5730","code_chunks":["filter = NULL;","st = ENOMEM;","goto cleanup;","}","","\/* get the current subtree list *\/"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteNode* node) {","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input = tflite::GetInput(context, node, kInputTensor);","if (input->type != kTfLiteUInt8) return kTfLiteError;","if (NumElements(input->dims) == 0) return kTfLiteError;",""],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["TCPSocketFactory::createListen(IArchNetwork::EAddressFamily family, bool secure) const","{","IListenSocket* socket = NULL;","if (secure) {","socket = new SecureListenSocket(m_events, m_socketMultiplexer, family);","}"],"label":1}
{"cve":"CVE-2023-46853","code_chunks":["pr->t.meta.flags = 0;         return 0;","}","const char *cur = pr->request + pr->tokens[token];","const char *end = pr->request + pr->endlen;","","int state = 0;","while (cur != end) {"],"label":0}
{"cve":"CVE-2017-3731","code_chunks":["    0,          \/* 0 moves context-specific structure allocation to ctrl *\/","    NULL,       \/* set_asn1_parameters *\/","    NULL,       \/* get_asn1_parameters *\/","    chacha20_poly1305_ctrl,","    NULL        \/* app_data *\/","};",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static void ep4_mul_sim_plain(ep4_t r, const ep4_t p, const bn_t k,","const ep4_t q, const bn_t m, ep4_t *t) {","int i, l, l0, l1, n0, n1, w, gen;","int8_t naf0[2 * RLC_FP_BITS + 1], naf1[2 * RLC_FP_BITS + 1], *_k, *_m;","ep4_t t0[1 << (EP_WIDTH - 2)];","ep4_t t1[1 << (EP_WIDTH - 2)];"],"label":1}
{"cve":"PYSEC-2019-234","code_chunks":["    const Tensor& num_segments = context->input(2);","    if (!UnsortedSegmentReductionDoValidation(this, context, data, segment_ids,","                                              num_segments)) {","      return;","    }","    const auto segment_flat = segment_ids.flat<Index>();","    const int64 output_rows = internal::SubtleMustCopy(static_cast<int64>("],"label":0}
{"cve":"PYSEC-2022-70","code_chunks":["GetTensorShape(filter), GetTensorData<float>(filter),","GetTensorShape(bias), GetTensorData<float>(bias),","GetTensorShape(output), GetTensorData<float>(output));","}","} else if (kernel_type == kLegacyPie) {","return EvalPie(context, node, params, data, input, filter, bias, output);","} else {"],"label":0}
{"cve":"CVE-2018-20177","code_chunks":["STREAM s;","int length;","int tagval;","struct stream packet;","","s = tcp_recv(NULL, 4);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(context, ResizeOutput(context, node));","}","const TfLiteTensor* top_k = GetInput(context, node, kInputTopK);","const int32 k = top_k->data.i32[0];","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const int32 row_size = input->dims->data[input->dims->size - 1];"],"label":1}
{"cve":"CVE-2019-13300","code_chunks":["columns,","rows;","","q=images;","columns=images->columns;","rows=images->rows;"],"label":1}
{"cve":"CVE-2023-5377","code_chunks":["s->size+=3;","}","} else {","s->size += 8;","}","}","if (ptr->layout.stream_structure & 2) {"],"label":1}
{"cve":"CVE-2021-32628","code_chunks":[],"label":1}
{"cve":"CVE-2018-5809","code_chunks":["\t0x7258595a, 0, 20,\t\/* rXYZ *\/","\t0x6758595a, 0, 20,\t\/* gXYZ *\/","\t0x6258595a, 0, 20 };\t\/* bXYZ *\/","  static const unsigned pwhite[] = { 0xf351, 0x10000, 0x116cc };","  unsigned pcurve[] = { 0x63757276, 0, 1, 0x1000000 };","","#ifdef LIBRAW_LIBRARY_BUILD"],"label":0}
{"cve":"CVE-2022-0326","code_chunks":["  }","  else if (!noop && sym == MRB_OPSYM_2(s->mrb, sub) && n == 1)  {","    gen_addsub(s, OP_SUB, cursp());","  }","  else if (!noop && sym == MRB_OPSYM_2(s->mrb, mul) && n == 1)  {","    gen_muldiv(s, OP_MUL, cursp());","  }"],"label":0}
{"cve":"CVE-2020-15192","code_chunks":["dlm_tensor->manager_ctx = tf_dlm_tensor_ctx;","dlm_tensor->deleter = &DLManagedTensorDeleter;","dlm_tensor->dl_tensor.ctx = GetDlContext(h, status);","int ndim = tensor->dims();","dlm_tensor->dl_tensor.ndim = ndim;","dlm_tensor->dl_tensor.data = TFE_TensorHandleDevicePointer(h, status);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(values, i, val);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["accum_scratch_size));","}","node->temporaries->data[4] = op_data->scratch_tensor_index + 4;","TfLiteTensor* zero_points = GetTemporary(context, node, \/*index=*\/4);","zero_points->type = kTfLiteInt32;","zero_points->allocation_type = kTfLiteArenaRw;","int zero_points_dims[1] = {batch_size};"],"label":1}
{"cve":"CVE-2018-19044","code_chunks":["","file_name = make_file_name(name, prog, namespace, instance);","","log_file = fopen(file_name, \"a\");","if (log_file) {","int n = fileno(log_file);","fcntl(n, F_SETFD, FD_CLOEXEC | fcntl(n, F_GETFD));"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["\/* Sanity check *\/","PJ_ASSERT_RETURN(tp, PJ_EINVAL);","","\/* Must not close while application is using this *\/","","\/* The following calls to pj_ioqueue_unregister() will block the execution"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["            Py_CLEAR(tmp);","        }","        *out = Raise(exc, cause, lineno, col_offset, arena);","        if (*out == NULL) goto failed;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)Try_type);"],"label":0}
{"cve":"CVE-2017-9763","code_chunks":["block = (block << 32) + grub_le_to_cpu32 (index[i].leaf);","if (grub_disk_read (data->disk,","block << LOG2_EXT2_BLOCK_SIZE (data),","0, EXT2_BLOCK_SIZE(data), buf))","return 0;","","ext_block = (struct grub_ext4_extent_header *) buf;"],"label":1}
{"cve":"CVE-2018-13304","code_chunks":["s->er.error_status_table[s->mb_num - 1] = ER_MB_ERROR;","","av_assert1(s->bitstream_buffer_size == 0);","ff_er_frame_end(&s->er);","","if (avctx->hwaccel) {","ret = avctx->hwaccel->end_frame(avctx);"],"label":1}
{"cve":"CVE-2018-5809","code_chunks":["    }","","    for (col=left+2; col < collimit; col++) {","      tc = col-left;","      homogeneity_map_p++;","","      for (direction=0; direction < 2; direction++) {"],"label":0}
{"cve":"CVE-2020-14402","code_chunks":["          subrect.w = thew;                                                   \\","          subrect.h = theh;                                                   \\","                                                                              \\","          newLen = client->afterEncBufLen + (bpp\/8) + sz_rfbCoRRERectangle;           \\","          if ((newLen > (w * h * (bpp\/8))) || (newLen > client->afterEncBufSize))     \\","            return -1;                                                        \\","                                                                              \\"],"label":0}
{"cve":"CVE-2018-20174","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["struct all_attrs_item *all_attrs, int rem)","{","for (; rem > 0 && stack; stack = stack->prev) {","int i;","const char *base = stack->origin ? stack->origin : \"\";",""],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["int val = (int)(((byteMain & 0x1F) << 6) |","(pBuffer[lIndex + 1] & 0x3F));","pUnicodeString[lIndexUnicode++] = (WCHAR)(val);","lIndex += 2;","}","else if (0x00 == (byteMain & 0x10))"],"label":1}
{"cve":"CVE-2024-23325","code_chunks":["la6.sin6_port = v6->dst_port;","safeMemcpy(&(la6.sin6_addr.s6_addr), &(v6->dst_addr));","","proxy_protocol_header_.emplace(WireHeader{","PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,"],"label":1}
{"cve":"CVE-2016-5418","code_chunks":["#ifndef __CYGWIN__","\/* unfortunately, on win32 there is no 'root' user with uid 0,","   so we just have to try the chown and see if it works *\/","","\t\/* If we know we can't change it, don't bother trying. *\/","\tif (a->user_uid != 0  &&  a->user_uid != a->uid) {","\t\tarchive_set_error(&a->archive, errno,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["      if (affine_quantization->scale->data[i] != scale) {","        data->is_hybrid_per_channel = true;","        break;","      }","    }","  }",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteIntArray* input_dims = input->dims;","int input_dims_size = input_dims->size;"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["TF_ASSIGN_OR_RETURN(Platform * platform, LookupByIdLocked(id));","if (platform->Initialized()) {","return tsl::Status(","port::error::FAILED_PRECONDITION,","absl::StrFormat(\"platform with id %p is already initialized\", id));","}",""],"label":1}
{"cve":"CVE-2020-24342","code_chunks":["void luaD_callnoyield (lua_State *L, StkId func, int nResults) {","incXCcalls(L);","if (getCcalls(L) <= CSTACKERR)  \/* possible stack overflow? *\/","luaE_freeCI(L);","luaD_call(L, func, nResults);","decXCcalls(L);","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const int input_dims_size = input1->dims->size;","TF_LITE_ENSURE(context, output->dims->size == input_dims_size);","for (int i = 0; i < input_dims_size; ++i) {","TF_LITE_ENSURE(context,","output->dims->data[i] == input1->dims->data[i]);","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["reinterpret_cast<TfLiteSpaceToDepthParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2023-27114","code_chunks":["int i = 0;","op->len += n;","for (i = 0; i < count; i++) {","n = read_u32_leb128 (buf + op->len, buf + buf_len, &table[i]);","if (!(op->len + n <= buf_len)) {","goto beach;"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["","\/*","* Read custom directory from the arbitarry offset.","* The code is very similar to TIFFReadDirectory().","*\/","int"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","  auto* params =","      reinterpret_cast<TfLiteConcatenationParams*>(node->builtin_data);","  int axis = params->axis;","  int num_inputs = node->inputs->size;","","      const TfLiteTensor* t0;"],"label":0}
{"cve":"CVE-2019-19922","code_chunks":["\tsd = rcu_dereference(per_cpu(sd_llc, target));","\tif (!sd)","\t\treturn target;","","\ti = select_idle_core(p, sd, target);","\tif ((unsigned)i < nr_cpumask_bits)","\t\treturn i;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","TfLiteTensor* variable_tensor = variable->GetTensor();","TfLiteTensor* output = GetOutput(context, node, kOutputValue);","","TF_LITE_ENSURE_TYPES_EQ(context, variable_tensor->type, output->type);","TF_LITE_ENSURE_OK("],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["input_quantized->type = kTfLiteInt8;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2019-13311","code_chunks":["            }","          }","          break;","        }","      CLIWandExceptionBreak(OptionError,\"UnrecognizedOption\",option);","    }","    {"],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["","      \/* The pull succeeded, and this is an update. So, we need to update the repo config","         if anything changed *\/","      ostree_repo_remote_get_url (self->repo,","                                  remote,","                                  &old_url,","                                  NULL);"],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["PJ_DEF(void) pj_scan_get_until_chr( pj_scanner *scanner,","const char *until_spec, pj_str_t *out)","{","register char *s = scanner->curptr;","pj_size_t speclen;",""],"label":0}
{"cve":"CVE-2018-20762","code_chunks":["","static GF_Descriptor *FFD_GetServiceDesc(GF_InputService *plug, u32 expect_type, const char *sub_url)","{","\tGF_ObjectDescriptor *od;","\tGF_ESD *esd;","\tFFDemux *ffd = (FFDemux*)plug->priv;",""],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_cert.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_key.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/ca_cert.pem\"","- exact: localhost"],"label":1}
{"cve":"CVE-2023-43887","code_chunks":["      nal_parser.free_NAL_unit(nal);","      break;","","      err = read_pps_NAL(reader);","      nal_parser.free_NAL_unit(nal);","      break;",""],"label":0}
{"cve":"CVE-2023-38408","code_chunks":["\t\t    pkcs11_interactive) {","\t\t\t\/*","\t\t\t * Some tokens require login before they will","\t\t\t * expose keys.","\t\t\t *\/","\t\t\tif (pkcs11_login_slot(p, &p->slotinfo[i],","\t\t\t    CKU_USER) < 0) {"],"label":0}
{"cve":"CVE-2018-18311","code_chunks":["}","if (!environ[i]) {                 \/* does not exist yet *\/","environ = (char**)safesysrealloc(environ, (i+2) * sizeof(char*));","environ[i+1] = NULL;    \/* make sure it's null terminated *\/","}","else"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* cond_tensor =","GetInput(context, node, kInputConditionTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2016-9841","code_chunks":["    dcode = state->distcode;","    lmask = (1U << state->lenbits) - 1;","    dmask = (1U << state->distbits) - 1;","","    \/* decode literals and length\/distances until end-of-block or not enough","       input data or output space *\/","    do {"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["*length = 8; \/* Flow control PDU is 8 bytes *\/","return TRUE;","}","","if (((size_t)*length - 2) > Stream_GetRemainingLength(s))","return FALSE;"],"label":1}
{"cve":"CVE-2016-2315","code_chunks":["char *s2 = 0;","if (s1) {","s2 = malloc(strlen(s1) + 1);","strcpy(s2, s1);","}","return s2;"],"label":1}
{"cve":"CVE-2020-12279","code_chunks":["int action,","git_diff_delta *delta)","{","unsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS | GIT_PATH_REJECT_DOT_GIT_NTFS;","","if (action & CHECKOUT_ACTION__REMOVE) {","if (!git_path_isvalid(repo, delta->old_file.path, delta->old_file.mode, flags)) {"],"label":0}
{"cve":"CVE-2017-6436","code_chunks":["PLIST_BIN_ERR(\"%s: Integer overflow when calculating BPLIST_UNICODE data size.\\n\", __func__);","return NULL;","}","if (*object + size*2 > bplist->offset_table) {","PLIST_BIN_ERR(\"%s: BPLIST_UNICODE data bytes point outside of valid range\\n\", __func__);","return NULL;","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["        context, output, TfLiteIntArrayCopy(input1->dims)));","    return kTfLiteOk;","  };","","  reg.invoke = [](TfLiteContext* context, TfLiteNode* node) {","        const TfLiteTensor* a0;","    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &a0));"],"label":0}
{"cve":"CVE-2018-14363","code_chunks":["NetInc, h->content->length + h->content->offset - 1);","","\/* see if we can put in body cache; use our cache as fallback *\/","msg->fp = mutt_bcache_put(pop_data->bcache, h->data);","if (!msg->fp)","{","\/* no *\/"],"label":1}
{"cve":"CVE-2023-28366","code_chunks":["bool dup;"],"label":1}
{"cve":"CVE-2020-15472","code_chunks":["NDPI_LOG_DBG(ndpi_struct, \"search H323\\n\");","","\/*","The TPKT protocol is used by ISO 8072 (on port 102)","and H.323. So this check below is to avoid ambiguities","*\/"],"label":0}
{"cve":"PYSEC-2020-298","code_chunks":["OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));","OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,","errors::InvalidArgument(","\"Source format must be of length 4 or 5, received \"","\"src_format = \",","src_format));"],"label":0}
{"cve":"CVE-2020-5238","code_chunks":["      if (yych <= '9')","        goto yy74;","    }","    p = marker;","    goto yy66;","    yych = *++p;","    if (yych == '[')"],"label":0}
{"cve":"CVE-2023-29323","code_chunks":["","buf[strlen(buf)-1] = '\\0';","","\/* getaddrinfo() is used to support scoped addresses. *\/","memset(&hints, 0, sizeof(hints));","hints.ai_family = AF_INET6;"],"label":0}
{"cve":"CVE-2019-19061","code_chunks":["if (!adis->xfer)","return -ENOMEM;","","adis->buffer = kcalloc(indio_dev->scan_bytes, 2, GFP_KERNEL);","if (!adis->buffer) {","kfree(adis->xfer);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);"],"label":1}
{"cve":"PYSEC-2022-286","code_chunks":["","# ~~ GCODE file handling","","_file_cache = {}","_file_cache_mutex = threading.RLock()",""],"label":1}
{"cve":"PYSEC-2020-327","code_chunks":["}","","TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","  const TfLiteTensor* data = GetInput(context, node, kInputDataTensor);","  const TfLiteTensor* segment_ids =","      GetInput(context, node, kInputSegmentIdsTensor);","  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["PyErr_Format(PyExc_TypeError, \"AsyncFunctionDef field \\\"body\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","goto failed;","}","len = PyList_GET_SIZE(tmp);","body = _Py_asdl_seq_new(len, arena);","if (body == NULL) goto failed;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["          ","        TF_LITE_ENSURE_STATUS(DecodeCenterSizeBoxes(context, node, op_data));","          TF_LITE_ENSURE_STATUS(NonMaxSuppressionMultiClass(context, node, op_data));","","  return kTfLiteOk;","}","}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static void ep4_mul_naf_imp(ep4_t r, const ep4_t p, const bn_t k) {","int l, i, n;","int8_t naf[RLC_FP_BITS + 1];","ep4_t t[1 << (EP_WIDTH - 2)];",""],"label":1}
{"cve":"CVE-2016-4563","code_chunks":["return(MagickFalse);","(void) QueryColorCompliance(\"#0000\",AllCompliance,","&clip_mask->background_color,exception);","clip_mask->background_color.alpha=(Quantum) TransparentAlpha;","(void) SetImageBackgroundColor(clip_mask,exception);","if (image->debug != MagickFalse)","(void) LogMagickEvent(DrawEvent,GetMagickModule(),\"\\nbegin clip-path %s\","],"label":1}
{"cve":"CVE-2019-15903","code_chunks":["      if (e)","        e->open = XML_TRUE;","      if (*s != XML_T('\\0'))","        s++;","      context = s;","      poolDiscard(&parser->m_tempPool);","    } else if (*s == XML_T(ASCII_EQUALS)) {"],"label":0}
{"cve":"CVE-2022-47515","code_chunks":["if( complete ) {","m_os.flush() ;","m_sipMessage = m_os.str() ;","m_sipMessage.resize( m_sipMessage.length() - 1) ;","boost::replace_all(m_sipMessage, \"\\n\", DR_CRLF);","}","else if( 0 == strcmp(szLine, \"\\n\") ) {"],"label":1}
{"cve":"CVE-2024-0964","code_chunks":["from typing import TYPE_CHECKING, Any, AsyncIterator, Dict, List, Optional, Type","","import fastapi","import httpx","import markupsafe","import orjson","from fastapi import BackgroundTasks, Depends, FastAPI, HTTPException, s"],"label":0}
{"cve":"CVE-2019-19221","code_chunks":["} while (1);","}","as->length += count;","as->s[as->length] = '\\0';","return (defchar_used?-1:ret);","}"],"label":1}
{"cve":"CVE-2020-1917","code_chunks":["    HHVM_FE(mcrypt_enc_get_algorithms_name);","    HHVM_FE(mcrypt_enc_get_block_size);","    HHVM_FE(mcrypt_enc_get_iv_size);","    HHVM_FE(mcrypt_enc_get_key_size);","    HHVM_FE(mcrypt_enc_get_modes_name);","    HHVM_FE(mcrypt_enc_get_supported_key_sizes);","    HHVM_FE(mcrypt_enc_is_block_algorithm_mode);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t}","\t\t\tif (n < 0) {","\t\t\t\tep2_sub(r, r, t[-n \/ 2]);","\t\t\t}","\t\t}","\t\t\/* Convert r to affine coordinates. *\/","\t\tep2_norm(r, r);"],"label":0}
{"cve":"CVE-2023-4678","code_chunks":["remain = ctx->mhas_buffer_size;","start = ctx->mhas_buffer;","","if (ctx->resume_from) {","start += ctx->resume_from - 1;","remain -= ctx->resume_from - 1;"],"label":1}
{"cve":"CVE-2020-10931","code_chunks":["c->last_cmd_time = current_time;","char extbuf[sizeof(c->binary_header) + BIN_MAX_EXTLEN];","memcpy(extbuf + sizeof(c->binary_header), c->rcurr + sizeof(c->binary_header), extlen);","c->rbytes -= sizeof(c->binary_header) + extlen + keylen;","c->rcurr += sizeof(c->binary_header) + extlen + keylen;",""],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2022-1714","code_chunks":["return UT64_MAX;","}","if (r_buf_read_at (bin->b, entry + 16, buf, sizeof (buf)) < 1) {","R_LOG_DEBUG (\"read (init_offset)\");","return 0;","}","if (buf[0] == 0x68) { \t\tut64 addr;"],"label":0}
{"cve":"CVE-2019-6706","code_chunks":["int fidx2, int n2) {","UpVal **up1 = getupvalref(L, fidx1, n1);","UpVal **up2 = getupvalref(L, fidx2, n2);","if (*up1 == *up2)","return;","luaC_upvdeccount(L, *up1);"],"label":0}
{"cve":"CVE-2021-28041","code_chunks":["if ((r = sshbuf_get_u32(m, &seconds)) != 0) {","error_fr(r, \"parse lifetime constraint\");","goto err;","}","*deathp = monotime() + seconds;","*secondsp = seconds;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["                tflite::micro::GetTensorData<int32_t>(input2), output_shape,","                output_data);","      break;","      requires_broadcast","          ? reference_ops::Broadcast4DSlowNotEqualNoScaling(","                data->params, input1_shape,","                tflite::micro::GetTensorData<int64_t>(input1), input2_shape,"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["","\/* First try to resolve via metadata (if remote is available and its metadata matches the commit version) *\/","if (!try_resolve_op_from_metadata (self, op, checksum, sideload_path, state))","{","\/* Else try to load the commit object.","* Note, we don't have a token here, so this will not work for authenticated apps."],"label":1}
{"cve":"CVE-2019-12107","code_chunks":["int l;","if(obj->sub == NULL) {","obj->state = EError;","return;","}","switch(obj->sub->service) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input_class_predictions =","GetInput(context, node, kInputTensorClassPredictions);","const TfLiteTensor* decoded_boxes =","&context->tensors[op_data->decoded_boxes_index];","","TfLiteTensor* detection_boxes ="],"label":1}
{"cve":"CVE-2018-15863","code_chunks":["*pred_rtrn = MATCH_EXACTLY;","if (expr->expr.op == EXPR_ACTION_DECL) {","const char *pred_txt = xkb_atom_text(info->ctx, expr->action.name);","if (!LookupString(symInterpretMatchMaskNames, pred_txt, pred_rtrn)) {","log_err(info->ctx,","\"Illegal modifier predicate \\\"%s\\\"; Ignored\\n\", pred_txt);","return false;"],"label":1}
{"cve":"PYSEC-2020-137","code_chunks":["TfLiteTensor* output) {","int max_index = -1;","const int segment_id_size = segment_ids->dims->data[0];","if (segment_id_size > 0) {","max_index = segment_ids->data.i32[segment_id_size - 1];","}"],"label":1}
{"cve":"CVE-2021-32136","code_chunks":["if (type == GF_ISOM_BOX_TYPE_META) {","count--;","break;","}","}","if (!count) return;","}"],"label":0}
{"cve":"CVE-2018-12562","code_chunks":["void RemoteDevicePropertiesWidget::update(const RemoteFsDevice::Details &d, bool create, bool isConnected)","{","int t=d.isLocalFile() ? Type_File : Type_SshFs;","setEnabled(d.isLocalFile() || !isConnected);","infoLabel->setVisible(create);","orig=d;"],"label":0}
{"cve":"CVE-2017-12595","code_chunks":["    {","\tvisited.erase(cur_objid);","    }","}","","void","QPDFObjectHandle::makeDirect()"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2022-32545","code_chunks":["            i++;","            if (i == (ssize_t) argc)","              ThrowAnimateException(OptionError,\"MissingArgument\",option);","            break;","          }","        ThrowAnimateException(OptionError,\"UnrecognizedOption\",option);","      }"],"label":0}
{"cve":"CVE-2022-35972","code_chunks":["AddInputFromArray<qint32>(TensorShape({value_count}),","{-(1 << 23), 0, (1 << 23)});","AddInputFromArray<float>(TensorShape({}), {-256.0f});","AddInputFromArray<float>(TensorShape({}), {256.0f});","AddInputFromArray<float>(TensorShape({}), {-1.0f});","AddInputFromArray<float>(TensorShape({}), {1.0f});"],"label":0}
{"cve":"PYSEC-2020-125","code_chunks":["                    num_alphas));","    const int64 samples_per_alpha = samples_shape.num_elements() \/ num_alphas;","    const auto alpha_flat = alpha_t.flat<T>().data();","    auto samples_flat = output->flat<T>().data();","","        ","    auto DoWork = [samples_per_alpha, num_alphas, &random, samples_flat,"],"label":0}
{"cve":"CVE-2021-30020","code_chunks":["\tu8 sps_transform_skip_enabled_flag = gf_bs_read_int_log(bs, 1, \"sps_transform_skip_enabled_flag\");","","\tif (sps_transform_skip_enabled_flag) {","\t\tgf_bs_read_ue_log(bs, \"sps_log2_transform_skip_max_size_minus2\");","\t\tgf_bs_read_int_log(bs, 1, \"sps_bdpcm_enabled_flag\");","\t}","\tif (gf_bs_read_int_log(bs, 1, \"sps_mts_enabled_flag\")) {"],"label":0}
{"cve":"CVE-2021-30020","code_chunks":["}","","vps->base_layer_internal_flag = gf_bs_read_int_log(bs, 1, \"base_layer_internal_flag\");","vps->base_layer_available_flag = gf_bs_read_int_log(bs, 1, \"base_layer_available_flag\");","vps->max_layers = 1 + gf_bs_read_int_log(bs, 6, \"max_layers_minus1\");","if (vps->max_layers > MAX_LHVC_LAYERS) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp48_read_bin(fp48_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"CVE-2022-1437","code_chunks":["\t\t}","\t}","\tif (element->symbols) {","\t\tfor (i = 0; i < element->hdr->n_symbols; i++) {","\t\t\tRCoreSymCacheElementSymbol *sym = &element->symbols[i];","\t\t\tht_uu_find (hash, sym->paddr, &found);","\t\t\tif (found) {"],"label":0}
{"cve":"CVE-2024-23325","code_chunks":["std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type) {","std::vector<std::string> subject_alt_names;","bssl::UniquePtr<GENERAL_NAMES> san_names(","static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(&cert, NID_subject_alt_name, nullptr, nullptr)));"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 0);","","const TfLiteTensor* input_resource_id_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputVariableId,","&input_resource_id_tensor));","TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);"],"label":1}
{"cve":"CVE-2020-5311","code_chunks":["if(expandrow2(&state->buffer[c->channo * 2], &ptr[c->rleoffset], c->rlelength, im->bands))"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\/* Create table. *\/","\t\tfor (size_t i = 1; i < 1 << (FP_WIDTH - 1); i++) {","\t\t\tfp_mul(t[i], t[i - 1], r);","\t\t}","","\t\tfp_set_dig(r, 1);","\t\tl = RLC_FP_BITS + 1;"],"label":0}
{"cve":"CVE-2018-14056","code_chunks":["    if (!CFile::IsDir(sRet)) {","        sRet = CZNC::Get().GetCurPath() + \"\/webskins\/\" + sSkin;","","        if (!CFile::IsDir(sRet)) {","            sRet = CString(_SKINDIR_) + \"\/\" + sSkin;","        }","    }"],"label":0}
{"cve":"CVE-2023-23557","code_chunks":["Handle<JSObject> target,","Handle<JSObject> from,","Handle<JSObject> excludedItems) {","auto cr = JSObject::getOwnPropertyKeys(","from,","runtime,","OwnKeysFlags()"],"label":0}
{"cve":"CVE-2018-8794","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2022-0695","code_chunks":["\tif (sw) {","\t\t\t\t\t\t\t\t\t\t\t\tfor (n = 0; n < sizeof (b) - 12; n++) {","\t\t\tif (b[n] == 0xa1 && b[n + 5] == 0x89 && b[n + 8] == 0xe8) {","\t\t\t\tsw = follow_offset (entry, pe->b, b, sizeof (b), pe->big_endian, n + 8);","\t\t\t\treturn entry;","\t\t\t}","\t\t}"],"label":0}
{"cve":"CVE-2020-27764","code_chunks":["break;","}","{","result=(MagickRealType) ((size_t) pixel >> (size_t) (value+0.5));","break;","}","{"],"label":1}
{"cve":"CVE-2023-0302","code_chunks":["#else","p = file;","#endif","fileline = r_str_newf (\"%s|%\"PFMT64d, p, line);","offset_ptr = sdb_itoa (addr, 16, offset, sizeof (offset));","sdb_add (s, offset_ptr, fileline, 0);","sdb_add (s, fileline, offset_ptr, 0);"],"label":1}
{"cve":"CVE-2019-11925","code_chunks":["","  if (ImageInfo->FileSize >= 2) {","    ImageInfo->infile->seek(0, SEEK_SET);","    String fileHeader = ImageInfo->infile->read(2);","    if (fileHeader.length() != 2) {","      return 0;","    }"],"label":0}
{"cve":"CVE-2022-4202","code_chunks":["GF_LSR_READ_INT(lsr, len, lsr->info->cfg.extensionIDBits, \"reserved\");","len = lsr_read_vluimsbf5(lsr, \"len\");","gf_bs_read_long_int(lsr->bs, len);","if (out_data) *out_data = NULL;","if (out_len) *out_len = 0;","}"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["keyword(identifier arg, expr_ty value, PyArena *arena)","{","    keyword_ty p;","    if (!value) {","        PyErr_SetString(PyExc_ValueError,","                        \"field value is required for keyword\");","        return NULL;"],"label":0}
{"cve":"CVE-2022-1201","code_chunks":["}","else if (target_class->tt == MRB_TT_MODULE) {","target_class = mrb_vm_ci_target_class(ci);","if (target_class->tt != MRB_TT_ICLASS) {","goto super_typeerror;","}","}"],"label":1}
{"cve":"CVE-2018-8796","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteIntArray* input_offsets_size = TfLiteIntArrayCreate(1);","input_offsets_size->data[0] = num_batches * batch_size;","TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_offsets,","input_offsets_size));","}","node->temporaries->data[6] = op_data->scratch_tensor_index + 6;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input_resource_id_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputResourceIdTensor,","&input_resource_id_tensor));","int resource_id = input_resource_id_tensor->data.i32[0];","","TfLiteTensor* output_tensor;"],"label":0}
{"cve":"CVE-2017-12932","code_chunks":["\t\t\tif (yych <= '9') goto yy46;","\t\t\tgoto yy18;","\t\t}","\t} else {","\t\tif (yych <= 'E') {","\t\t\tif (yych <= ';') goto yy71;","\t\t\tif (yych <= 'D') goto yy18;"],"label":0}
{"cve":"CVE-2023-40589","code_chunks":["}","","Literal = (HuffTableLEC[MaskedBits] & 0xFF);","*HistoryPtr++ = Literal;","}",""],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["if (ice_info) {","*rem_rtp = ice_info->comp[0].rcand_addr;","if (ice_info->comp_cnt > 1)","*rem_rtcp = ice_info->comp[1].rcand_addr;","","use_ice_info = PJ_TRUE;"],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["#ifdef LIBRAW_LIBRARY_BUILD","  static const libraw_custom_camera_t","    const_table[]","#else","  static const struct {","    unsigned fsize;","    ushort rw, rh;"],"label":0}
{"cve":"CVE-2020-28196","code_chunks":["if (ret)","goto error;","}","return 0;","","\/* Free what we've decoded so far.  Free pointers in a second pass in"],"label":1}
{"cve":"CVE-2022-0696","code_chunks":["#ifdef FEAT_CMDWIN","#endif","curbuf;","","if (idx < buf->b_ucmds.ga_len)","return USER_CMD_GA(&buf->b_ucmds, idx)->uc_name;"],"label":1}
{"cve":"CVE-2022-21655","code_chunks":["return false;","}","","const auto& route_name = route->routeEntry()->routeName();","for (const auto& predicate : policy.predicates()) {","if (!predicate->acceptTargetRoute(*filter_state, route_name, !scheme_is_http,","!target_is_http)) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["            }","            len = PyList_GET_SIZE(tmp);","            elts = _Py_asdl_seq_new(len, arena);","            if (elts == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["std::function<T(T)> func,","TfLiteType expected_type) {","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));"],"label":0}
{"cve":"CVE-2022-3976","code_chunks":["            }","            else","                mmsMsg_createServiceErrorPdu(invokeId, response, MMS_ERROR_RESOURCE_OTHER);","        }","    }","    else","        goto exit_invalid_parameter;"],"label":0}
{"cve":"CVE-2018-5729","code_chunks":["}","","\/* get the current subtree list *\/","if ((st = krb5_get_subtree_info(ldap_context, &subtreelist, &ntrees)) != 0)","goto cleanup;",""],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["    height -= top_margin = 8;","    width -= 2 * (left_margin = 8);","    load_flags = 32;","  } else if (!strncmp(make,\"Samsung\",7) && !strcmp(model,\"NX3000\")) {","    top_margin = 24;","    left_margin = 64;","    width = 5472;"],"label":0}
{"cve":"CVE-2016-4563","code_chunks":[],"label":1}
{"cve":"CVE-2018-20406","code_chunks":["_pickle_UnpicklerMemoProxy_copy_impl(UnpicklerMemoProxyObject *self)","\/*[clinic end generated code: output=e12af7e9bc1e4c77 input=97769247ce032c1d]*\/","{","Py_ssize_t i;","PyObject *new_memo = PyDict_New();","if (new_memo == NULL)","return NULL;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["            return 1;","        }","        else {","            int res;","            Py_ssize_t len;","            Py_ssize_t i;","            if (!PyList_Check(tmp)) {"],"label":0}
{"cve":"CVE-2020-26247","code_chunks":["static VALUE read_memory(VALUE klass, VALUE content)","{","xmlSchemaPtr schema;","xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt(","(const char *)StringValuePtr(content),","(int)RSTRING_LEN(content)"],"label":1}
{"cve":"CVE-2022-21725","code_chunks":["}","","ConvolutionDimensions dims =","OpDimensionsFromInputs(x_shape, op_info, &found_unknown_shapes);","","int64_t ops = 0;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["}","if (_PyObject_HasAttrId(obj, &PyId_col_offset)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_col_offset);","if (tmp == NULL) goto failed;","res = obj2ast_int(tmp, &col_offset, arena);"],"label":1}
{"cve":"CVE-2018-5804","code_chunks":["strcpy(model,\"H3D-50\");","}","} else if (raw_width == 8374 && raw_height == 6304) {","\/* H5D 50c*\/","left_margin = 52;","top_margin = 100;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["scaling_factors_size));","}","node->temporaries->data[3] = op_data->scratch_tensor_index + 3;","TfLiteTensor* accum_scratch = GetTemporary(context, node, \/*index=*\/3);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {num_units, batch_size};"],"label":1}
{"cve":"CVE-2021-46225","code_chunks":["res = fscanf(msh->hdl, \"%s\", str);","}while( (res != EOF) && strcmp(str, \"MeshVersionFormatted\") );","","if(res == EOF)"],"label":1}
{"cve":"CVE-2019-11596","code_chunks":["} else {","out_string(c, \"ERROR\");","}","} else if (strcmp(tokens[1].value, \"temp_ttl\") == 0 && ntokens >= 3 &&","settings.lru_maintainer_thread) {","if (!safe_strtol(tokens[2].value, &ttl)) {","out_string(c, \"ERROR\");"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["","  if (peer_type == CEPH_ENTITY_TYPE_MON &&","      auth_cluster_required.is_supported_auth(CEPH_AUTH_CEPHX)) {","        isvalid = false;","    if (protocol == CEPH_AUTH_CEPHX) {","      bufferlist::iterator iter = authorizer_data.begin();","      CephXServiceTicketInfo auth_ticket_info;"],"label":0}
{"cve":"CVE-2020-1918","code_chunks":["bool MemFile::seek(int64_t offset, int whence \/* = SEEK_SET *\/) {","assertx(m_len != -1);","if (whence == SEEK_CUR) {","if (offset > 0 && offset < bufferedLen()) {","setReadPosition(getReadPosition() + offset);","setPosition(getPosition() + offset);","return true;"],"label":1}
{"cve":"CVE-2018-20176","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","","  return context->ResizeTensor(context, output,","                               TfLiteIntArrayCopy(input->dims));"],"label":0}
{"cve":"CVE-2022-0417","code_chunks":[],"label":1}
{"cve":"CVE-2016-9841","code_chunks":["                    if (wnext == 0) {           \/* very common case *\/","                        from += wsize - op;","                        if (op < len) {         \/* some from window *\/","                            len -= op;","                            do {","                                *out++ = *from++;","                            } while (--op);"],"label":0}
{"cve":"CVE-2020-5291","code_chunks":["","if (opt_userns_block_fd != -1)","{","char b[1];","(void) TEMP_FAILURE_RETRY (read (opt_userns_block_fd, b, 1));","close (opt_userns_block_fd);"],"label":1}
{"cve":"CVE-2018-20180","code_chunks":["\t}","\ttotal_pro = 1;","\tbytes_pro = process_plane(input, width, height, output + 3, size - total_pro);","\ttotal_pro += bytes_pro;","\tinput += bytes_pro;","\tbytes_pro = process_plane(input, width, height, output + 2, size - total_pro);","\ttotal_pro += bytes_pro;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["ruy::profiler::ScopeLabel label(\"MirrorPad\");","const TfLiteTensor* input_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input_tensor));","const TfLiteTensor* padding_matrix;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &padding_matrix));","auto* params ="],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  TFLITE_DCHECK(cell_state != nullptr);","","  const TfLiteTensor* input_layer_norm_coefficients =","      is_layer_norm_lstm","          ? GetOptionalInputTensor(","                context, node, lstm::full::kInputLayerNormCoefficientsTensor)","          : nullptr;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["input->quantization.params);","        auto* output_params = reinterpret_cast<TfLiteAffineQuantization*>(","            output->quantization.params);","        TfLiteTensor* output_temp;","        TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, \/*index=*\/1,","                                                    &output_temp));",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\/* enough space for two field elements plus extra bytes for uniformity *\/","\tconst int len_per_elm = (FP_PRIME + ep_param_level() + 7) \/ 8;","\tuint8_t *pseudo_random_bytes = RLC_ALLOCA(uint8_t, 2 * len_per_elm);","","\tRLC_TRY {","\t\t\/* for hash_to_field, need to hash to a pseudorandom string *\/","\t\t\/* XXX(rsw) the below assumes that we want to use MD_MAP for hashing."],"label":0}
{"cve":"CVE-2018-6767","code_chunks":["        wavhdr.FormatTag = 0xfffe;","        wavhdr.BitsPerSample = bytes_per_sample * 8;","        wavhdr.GUID [4] = 0x10;","        wavhdr.GUID [6] = 0x80;","        wavhdr.GUID [9] = 0xaa;","        wavhdr.GUID [11] = 0x38;","        wavhdr.GUID [12] = 0x9b;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp_read_bin(fp_t a, const uint8_t *bin, size_t len) {","bn_t t;","","bn_null(t);"],"label":0}
{"cve":"PYSEC-2021-815","code_chunks":["const int64_t stats_dims = logits_dims + hessians_dims;","const int64_t num_sparse_entries = feature_indices_t->dim_size(0);","const int32_t feature_dims = feature_shape(1);","DCHECK_LE(num_sparse_entries, batch_size * feature_dims);","","StatsPartitionMap stats_map;",""],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["        status = ssl_handshake_channel(ds, idx);","        if (status != PJ_SUCCESS) {","            DTLS_UNLOCK(ds);","            return status;","        }","    }",""],"label":0}
{"cve":"PYSEC-2021-261","code_chunks":["context, size == 1,","errors::InvalidArgument(","\"Input 0 (file_pattern) must be a string scalar; got a tensor of \",","size, \"elements\"));","}","const string& file_pattern = file_pattern_t.flat<tstring>()(0);",""],"label":1}
{"cve":"CVE-2021-33363","code_chunks":["","\tISOM_DECREASE_SIZE(ptr, 4)","\tptr->from_item_id = gf_bs_read_u16(bs);","\tptr->reference_count = gf_bs_read_u16(bs);","\tif (ptr->size \/ 2 < ptr->reference_count)","\t\treturn GF_ISOM_INVALID_FILE;",""],"label":0}
{"cve":"CVE-2019-25050","code_chunks":["if(len < 1)","{","alloc.clear();","return alloc;","}",""],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["return NULL;","","i += 2; \/* the star and the name *\/","if (i < NCH(n) && TYPE(CHILD(n, i)) == COMMA)","i += 1; \/* the comma, if present *\/","","if (i < NCH(n) && TYPE(CHILD(n, i)) == TYPE_COMMENT) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["for (i = 0; i < len; i++) {","arg_ty val;","res = obj2ast_arg(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"arguments field \\\"args\\\" changed size during iteration\");"],"label":1}
{"cve":"CVE-2022-1052","code_chunks":["void MACH0_(iterate_chained_fixups)(struct MACH0_(obj_t) *bin, ut64 limit_start, ut64 limit_end, ut32 event_mask, RFixupCallback callback, void * context) {","int i = 0;","for (; i < bin->nsegs && i < bin->segs_count; i++) {","if (!bin->chained_starts[i]) {","continue;","}"],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["{","\t__maybe_unused int dev;","\tint part;","\tulong addr = CONFIG_SYS_LOAD_ADDR;","\tulong cnt;","\tstruct disk_partition info;","#if defined(CONFIG_LEGACY_IMAGE_FORMAT)"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["int protocol, bufferlist& authorizer_data,","bufferlist& authorizer_reply,","bool& isvalid, CryptoKey& session_key,","std::unique_ptr<AuthAuthorizerChallenge> *challenge)","{","dout(10) << \"ms_verify_authorizer \" << con->get_peer_addr()"],"label":0}
{"cve":"CVE-2018-20178","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* axis = GetInput(context, node, kAxisTensor);","TF_LITE_ENSURE_EQ(context, NumDimensions(axis), 1);","TF_LITE_ENSURE(context, NumDimensions(input) >= NumElements(axis));",""],"label":1}
{"cve":"CVE-2019-13309","code_chunks":["WandPrivate MagickBooleanType CLIListOperatorImages(MagickCLI *cli_wand,","const char *option,const char *arg1n,const char *arg2n)","{","const char    \/* percent escaped versions of the args *\/","*arg1,","*arg2;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["    \/* Identifier (most frequent token!) *\/","    nonascii = 0;","    if (is_potential_identifier_start(c)) {","        \/* Process the various legal combinations of b\"\", r\"\", u\"\", and f\"\". *\/","        int saw_b = 0, saw_r = 0, saw_u = 0, saw_f = 0;","        while (1) {","            if (!(saw_b || saw_u || saw_f) && (c == 'b' || c == 'B'))"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["if (*hmi_data > 0x7f) {","do {","note[hmi_tmp].length = (note[hmi_tmp].length << 7) | (*hmi_data & 0x7F);","hmi_data++;","hmi_track_offset[i]++;","} while (*hmi_data > 0x7F);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input_box_encodings =","GetInput(context, node, kInputTensorBoxEncodings);","TF_LITE_ENSURE_EQ(context, input_box_encodings->dims->data[0], kBatchSize);","const int num_boxes = input_box_encodings->dims->data[1];","TF_LITE_ENSURE(context, input_box_encodings->dims->data[2] >= kNumCoordBox);","const TfLiteTensor* input_anchors ="],"label":1}
{"cve":"CVE-2016-5418","code_chunks":["\t\tr = create_dir(a, path);","\t\t*slash = '\/';","\t\tif (r != ARCHIVE_OK)","\t\t\treturn (r);","\t}","","\t\/*"],"label":0}
{"cve":"CVE-2018-14017","code_chunks":["","ut32 linenum_len = attr->info.line_number_table_attr.line_number_table_length;","RList *linenum_list = attr->info.line_number_table_attr.line_number_table;","if (linenum_len > sz) {","free (attr);","return NULL;"],"label":1}
{"cve":"CVE-2016-7522","code_chunks":["  psd_info.depth=ReadBlobMSBShort(image);","  if ((psd_info.depth != 1) && (psd_info.depth != 8) && (psd_info.depth != 16))","    ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");","  psd_info.mode=ReadBlobMSBShort(image);","  if (image->debug != MagickFalse)","    (void) LogMagickEvent(CoderEvent,GetMagickModule(),","      \"  Image is %.20g x %.20g with channels=%.20g, depth=%.20g, mode=%s\","],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(","context, context->ResizeTensor(context, fw_output, fw_output_size_array));","if (!params->merge_outputs) {","TfLiteTensor* bw_output = GetOutput(context, node, kBwOutputTensor);","TfLiteIntArray* bw_output_size_array = TfLiteIntArrayCreate(3);","bw_output_size_array->data[0] = batch_size;","bw_output_size_array->data[1] = max_time;"],"label":1}
{"cve":"PYSEC-2021-310","code_chunks":["} else {"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["void strbuf_utf8_align(struct strbuf *buf, align_type position, unsigned int width,","const char *s)","{","int slen = strlen(s);","int display_len = utf8_strnwidth(s, slen, 0);","int utf8_compensation = slen - display_len;",""],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["} else {","PyObject* buf = tok->decoding_buffer;","if (buf == NULL) {","buf = _PyObject_CallNoArg(tok->decoding_readline);","if (buf == NULL) {","error_ret(tok);","return 1;"],"label":0}
{"cve":"CVE-2019-20392","code_chunks":["return NULL;","}","","if (lys_getnext_data(module, schema, name, strlen(name), LYS_CONTAINER, &snode) || !snode) {","LOGERR(module->ctx, LY_EINVAL, \"Failed to find \\\"%s\\\" as a container child of \\\"%s:%s\\\".\",","name, module->name, schema->name);","return NULL;"],"label":1}
{"cve":"CVE-2018-11380","code_chunks":["int i, j, idx, stridx;","const char *symstr;","","if (!bin->symtab || !bin->symstr || !bin->sects || !bin->indirectsyms)","return NULL;","if (bin->dysymtab.nundefsym < 1 || bin->dysymtab.nundefsym > 0xfffff) {","return NULL;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_window_list_capability_set(wStream* s, UINT16 length, rdpSettings* settings)","{","if (length < 11)","return FALSE;","","Stream_Read_UINT32(s, settings->RemoteWndSupportLevel); \/* wndSupportLevel (4 bytes) *\/"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["assertx(isStringType(type(file_name)));","strncpy(frame->file_name,","val(file_name).pstr->data(),","std::min(val(file_name).pstr->size(), strobelight::kFileNameMax));","frame->file_name[strobelight::kFileNameMax - 1] = '\\0';","}",""],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["                         \"Type '%s' for input is not supported by rfft2d.\",","                         TfLiteTypeGetName(input->type));","    return kTfLiteError;","  }","","    const TfLiteTensor* fft_length;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2021-20304","code_chunks":["            }","            compressUncompress (raw, N);","            compressUncompressSubset (raw, N);","","        }","","\tcout << \"ok\\n\" << endl;"],"label":0}
{"cve":"CVE-2016-10544","code_chunks":["dynamicInflationBuffer.clear();","","inflationStream.next_in = (Bytef *) data;","inflationStream.avail_in = length;","","int err;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["      break;","      if (kernel_type == kReference) {","        TF_LITE_DEPTH_TO_SPACE(reference_ops, uint8_t);","      } else {","        TF_LITE_DEPTH_TO_SPACE(optimized_ops, uint8_t);","      }","      break;"],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[]={0,0};","","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","TfLiteTensor* output = GetOutput(context, node, 0);","TfLiteIntArray* outputSize = TfLiteIntArrayCreate(NumDimensions(value));","","outputSize->data[0] = SizeOfDimension(lookup, 0);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","node->temporaries->data[kBwHiddenStateQuantized] =","op_data->scratch_tensor_index + kBwHiddenStateQuantized;","TfLiteTensor* bw_hidden_state_quantized =","GetTemporary(context, node, kBwHiddenStateQuantized);"],"label":1}
{"cve":"CVE-2023-27601","code_chunks":["\t\t * and after the port, to make sure we have a larger buffer *\/","\t\tlmp = del_lump(msg, cell->port.s - msg->buf - 1, cell->port.len + 2, 0);","\t\tif (!lmp) {","\t\t\tLM_ERR(\"could not add lump to disable stream!\\n\");","\t\t\tgoto end;","\t\t}","\t\ttmp = pkg_malloc(3);"],"label":0}
{"cve":"CVE-2021-29534","code_chunks":["errors::InvalidArgument(","\"Rank of input SparseTensor should be > 1, but saw rank: \", rank));","","TensorShape tensor_input_shape(input_shape->vec<int64>());","gtl::InlinedVector<int64, 8> std_order(rank);","std::iota(std_order.begin(), std_order.end(), 0);","SparseTensor input_st;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\ted_add(t[3], t[2], t[1]);","\t\ted_sub(t[4], t[2], t[1]);","#if defined(ED_MIXED)","\t\ted_norm_sim(t + 3, (const ed_t *)t + 3, 2);","#endif","","\t\tl = 2 * (RLC_FP_BITS + 1);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep4_mul_sim_joint(ep4_t r, const ep4_t p, const bn_t k, const ep4_t q,","const bn_t m) {","ep4_t t[5];","int i, l, u_i, offset;","int8_t jsf[4 * (RLC_FP_BITS + 1)];","","if (bn_is_zero(k) || ep4_is_infty(p)) {"],"label":1}
{"cve":"CVE-2019-15163","code_chunks":["user_password = user->pw_passwd;","#endif","","if (strcmp(user_password, (char *) crypt(password, user_password)) != 0)","{","pcap_snprintf(errbuf, PCAP_ERRBUF_SIZE, \"Authentication failed: user name or password incorrect\");","return -1;"],"label":1}
{"cve":"CVE-2022-3647","code_chunks":["bugReportStart();","serverLog(LL_WARNING,","\"Redis %s crashed by signal: %d, si_code: %d\", REDIS_VERSION, sig, info->si_code);","if (sig == SIGSEGV || sig == SIGBUS) {","serverLog(LL_WARNING,","\"Accessing address: %p\", (void*)info->si_addr);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* seq_lengths_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSeqLengthsTensor,","&seq_lengths_tensor));","const TS* seq_lengths = GetTensorData<TS>(seq_lengths_tensor);"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["WLog_INFO(TAG, \"BitmapCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 28)","return FALSE;","","Stream_Read_UINT16(s, preferredBitsPerPixel);    \/* preferredBitsPerPixel (2 bytes) *\/"],"label":1}
{"cve":"CVE-2019-15161","code_chunks":["if (d->name)","plen+= strlen(d->name);","","plen+= sizeof(struct rpcap_findalldevs_if);","","for (address = d->addresses; address != NULL; address = address->next)"],"label":1}
{"cve":"CVE-2019-19947","code_chunks":["struct kvaser_cmd *cmd;","int rc;","","cmd = kzalloc(sizeof(*cmd), GFP_KERNEL);","if (!cmd)","return -ENOMEM;",""],"label":0}
{"cve":"CVE-2020-36177","code_chunks":["byte msg[RSA_MAX_SIZE\/8 + RSA_PSS_PAD_SZ];","#else","byte* msg = NULL;","#endif","#if defined(WOLFSSL_PSS_LONG_SALT) || defined(WOLFSSL_PSS_SALT_LEN_DISCOVER)","byte* salt;","#else"],"label":0}
{"cve":"CVE-2018-20217","code_chunks":["code = k5_get_init_creds(context, &creds, &client, NULL, NULL, 0, NULL,","opts, krb5_get_as_key_noop, &userid, &use_master,","NULL);","if (code == 0 || code == KRB5_PREAUTH_FAILED) {","*canon_user = userid.user;","userid.user = NULL;","code = 0;"],"label":1}
{"cve":"CVE-2018-8800","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["ep_t *_p = RLC_ALLOCA(ep_t, m);","ep4_t *_q = RLC_ALLOCA(ep4_t, m);","size_t len = bn_bits(a) + 1;","int i, j;","int8_t s[RLC_FP_BITS + 1];",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  auto* proj_params = reinterpret_cast<TfLiteAffineQuantization*>(","      output_tensor->quantization.params);","  TF_LITE_ENSURE_EQ(context, cell_state_params->scale->data[0], 1.0 \/ 32768);","  if (cell_clip > 0.0 && cell_clip < 1.0) {","    integer_lstm_param->quantized_cell_clip = static_cast<int16_t>(std::min(","        std::max(cell_clip \/ cell_state_params->scale->data[0], -32768.0f),","        32767.0f));"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["","has_null_sha1 |= is_null_oid(entry_oid);","has_full_path |= !!strchr(name, '\/');","has_empty_name |= !*name;","has_dot |= !strcmp(name, \".\");","has_dotdot |= !strcmp(name, \"..\");"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            }","            break;","        }","        if (TYPE(ch) == DOUBLESTAR) break;","        if (TYPE(ch) == vfpdef || TYPE(ch) == tfpdef) nposargs++;","        if (TYPE(ch) == EQUAL) nposdefaults++;","    }"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* lookup;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));","const TfLiteTensor* value;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &value));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));"],"label":0}
{"cve":"CVE-2016-7534","code_chunks":["","n=0;","quantum=0;","for (x=0; x < (ssize_t) number_pixels; x+=2)","{","for (i=0; i < 4; i++)","{"],"label":1}
{"cve":"PYSEC-2021-391","code_chunks":["context, multiples_array[i] >= 0,","errors::InvalidArgument(\"Expected multiples[\", i, \"] >= 0, but got \",","multiples_array[i]));","output_shape.AddDim(input.dim_size(i) * multiples_array[i]);","}","if (output_shape == input.shape()) {","context->set_output(0, input);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["reinterpret_cast<TfLiteAudioSpectrogramParams*>(node->user_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2016-4303","code_chunks":["{","char *into=json;","while (*json)","{","if (*json==' ') json++;","else if (*json=='\\t') json++;\t\/* Whitespace characters. *\/"],"label":0}
{"cve":"CVE-2021-29534","code_chunks":["explicit AddManySparseToTensorsMapOp(OpKernelConstruction* context)","      : SparseTensorAccessingOp(context) {}","","  void Compute(OpKernelContext* context) override {","    const Tensor* input_indices;","    const Tensor* input_values;","    const Tensor* input_shape;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["filter->dims->data[affine_quantization->quantized_dimension]);","}"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* cond_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputConditionTensor,","&cond_tensor));","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2018-8792","code_chunks":["\tiso_send(s);","}","","\/* Initialise an MCS transport data packet *\/","STREAM","mcs_init(int length)","{"],"label":0}
{"cve":"PYSEC-2021-811","code_chunks":["for (const SavedSliceMeta& ssm : sts.meta().tensor()) {","TensorShape ssm_shape(ssm.shape());","for (const TensorSliceProto& tsp : ssm.slice()) {","TensorSlice ss_slice(tsp);","status_ = RegisterTensorSlice(ssm.name(), ssm_shape, ssm.type(), fname,","ss_slice, &tensors_);","if (!status_.ok()) return;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* cond_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputConditionTensor,","&cond_tensor));","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2022-35981","code_chunks":["","  void Compute(OpKernelContext* context) override {","                                typedef Eigen::Map<const Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>","        ConstEigenMatrixMap;","    typedef Eigen::Map<Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>","        EigenMatrixMap;","    typedef Eigen::Map<Eigen::Matrix<int64, Eigen::Dynamic, Eigen::Dynamic>>"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["auto* params =","reinterpret_cast<TfLiteLocalResponseNormParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2021-30014","code_chunks":["s32 sps_id = -1;","GF_BitStream *bs;","char *sps_data_without_emulation_bytes = NULL;","u32 sps_data_without_emulation_bytes_size = 0;","","if (vui_flag_pos) {"],"label":1}
{"cve":"CVE-2018-12436","code_chunks":["DECLARE_CURVE_SPECS(1)","","if (in == NULL || r == NULL || s == NULL || key == NULL || rng == NULL)","return ECC_BAD_ARG_E;","","\/* is this a private key? *\/"],"label":0}
{"cve":"CVE-2023-44488","code_chunks":["","for (std::vector<FrameInfo>::const_iterator info = frame_info_list_.begin();","info != frame_info_list_.end(); ++info) {","const vpx_codec_pts_t pts = info->pts;","if (pts >= kStepDownFrame && pts < kStepUpFrame) {","ASSERT_EQ(282U, info->w) << \"Frame \" << pts << \" had unexpected width\";"],"label":1}
{"cve":"PYSEC-2021-798","code_chunks":["                                      output);","        return Gather<uint8_t, int64_t>(context, *params, input, positions,","                                        output);","        return Gather<int8_t, int64_t>(context, *params, input, positions,","                                       output);","        return Gather<int16_t, int64_t>(context, *params, input, positions,","                                        output);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","    const int num_intermediate_tensors = node->intermediates->size;","  if (is_integer) {","    TF_LITE_ENSURE(context, num_intermediate_tensors == 5 ||","                                num_intermediate_tensors == 12);","  }","      const bool is_8x8_16 = num_intermediate_tensors == 5;"],"label":0}
{"cve":"CVE-2022-0284","code_chunks":["}","colors=picon->colors;","if (transparent != MagickFalse)","{","colors++;","picon->colormap=(PixelInfo *) ResizeQuantumMemory((void **)"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["      TF_LITE_ENSURE_OK(","          context, context->ResizeTensor(context, fw_hidden_state_quantized,","                                         fw_hidden_state_quantized_size));","    }","","    node->temporaries->data[kBwHiddenStateQuantized] =","        op_data->scratch_tensor_index + kBwHiddenStateQuantized;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params =","reinterpret_cast<TfLiteResizeNearestNeighborParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2022-1207","code_chunks":["\t\t\tbreak;","\t\t\tif (buf[0] >= 0xc0) {","\t\t\t\top->type = R_ANAL_OP_TYPE_CMP;","\t\t\t} else {","\t\t\t\top->type = R_ANAL_OP_TYPE_MOV;","\t\t\t}","\t\t\tbreak;"],"label":0}
{"cve":"CVE-2021-31262","code_chunks":["static GF_AV1Config* AV1_DuplicateConfig(GF_AV1Config const * const cfg)","{","u32 i = 0;","GF_AV1Config *out = gf_malloc(sizeof(GF_AV1Config));",""],"label":0}
{"cve":"CVE-2019-20807","code_chunks":["#ifdef HAVE_SANDBOX","if (sandbox != 0 && !(ea.argt & SBOXOK))","{","\/* Command not allowed in sandbox. *\/","errormsg = _(e_sandbox);","goto doend;","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","                TF_LITE_ENSURE_EQ(context, NumOutputs(node), 0);","","  const TfLiteTensor* input_resource_id_tensor;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputVariableId,","                                          &input_resource_id_tensor));","  TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);"],"label":0}
{"cve":"CVE-2023-25667","code_chunks":["uint8* p_dst = this_dst + i * width * channel;","for (int j = imgLeft; j < imgRight; ++j) {","GifByteType color_index =","this_image->RasterBits[(i - img_desc->Top) * (img_desc->Width) +","(j - img_desc->Left)];"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2023-51698","code_chunks":["int i, retval;","GError *err = NULL;","","comics_document->archive = g_filename_from_uri (uri, NULL, error);","if (!comics_document->archive)","return FALSE;"],"label":1}
{"cve":"PYSEC-2021-811","code_chunks":["      TensorSlice ss_slice(tsp);","      status_ = RegisterTensorSlice(ssm.name(), ssm_shape, ssm.type(), fname,","                                    ss_slice, &tensors_);","      if (!status_.ok()) return;","    }","  }","}"],"label":0}
{"cve":"CVE-2020-11085","code_chunks":["error = CHANNEL_RC_NO_MEMORY;","goto error_out;","}","CopyMemory(formats[index].formatName, szFormatName, 32);","formats[index].formatName[32] = '\\0';","}"],"label":1}
{"cve":"CVE-2016-10010","code_chunks":["","\/* check permissions *\/","if ((options.allow_streamlocal_forwarding & FORWARD_REMOTE) == 0","|| no_port_forwarding_flag || options.disable_forwarding) {","success = 0;","packet_send_debug(\"Server has disabled port forwarding.\");","} else {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  }","#define TF_LITE_FILL(data_type)                                               \\","  reference_ops::Fill(GetTensorShape(value), GetTensorData<data_type>(value), \\","                      GetTensorShape(output),                                 \\","                      GetTensorData<data_type>(output))","  switch (output->type) {","      TF_LITE_FILL(int32_t);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","{","node->temporaries->data[1] = op_data->scratch_tensor_index + 1;","TfLiteTensor* scratch_buffer = GetTemporary(context, node, \/*index=*\/1);","const TfLiteTensor* rhs = op_context->rhs;","int rhs_rank = NumDimensions(rhs);","TfLiteIntArray* scratch_buffer_size = TfLiteIntArrayCreate(rhs_rank);"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["port::error::NOT_FOUND,","absl::StrFormat(\"not a device pointer %p; %s\",","reinterpret_cast<void*>(dptr), ToString(result)));","}","","return tsl::Status("],"label":1}
{"cve":"CVE-2023-40589","code_chunks":["","BYTE* HistoryBuffer = ncrush->HistoryBuffer;","const BYTE* HistoryBufferEnd = &HistoryBuffer[ncrush->HistoryEndOffset];","","if (flags & PACKET_AT_FRONT)","{","if ((ncrush->HistoryPtr - 32768) <= HistoryBuffer)"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["                                                &input_quantized));","    input_quantized->type = fw_input_weights->type;","    input_quantized->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {","      TfLiteIntArray* input_quantized_size = TfLiteIntArrayCopy(input->dims);","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_quantized,","                                                       input_quantized_size));"],"label":0}
{"cve":"CVE-2021-29608","code_chunks":["  }","","  void Compute(OpKernelContext* context) override {","    INDEX_TYPE first_dimension;","    const Tensor first_partition_tensor =","        context->input(kFirstPartitionInputIndex);","    OP_REQUIRES(context, first_partition_tensor.NumElements() > 0,"],"label":0}
{"cve":"CVE-2018-14466","code_chunks":["if (rxent->callnum == EXTRACT_32BITS(&rxh->callNumber) &&","rxent->client.s_addr == clip &&","rxent->server.s_addr == sip &&","rxent->serviceId == EXTRACT_32BITS(&rxh->serviceId) &&","rxent->dport == sport) {","","\/* We got a match! *\/"],"label":1}
{"cve":"CVE-2023-46728","code_chunks":["    state->sentry->buffer();","    size_t statCount = 0;","    MemBuf mb;","    mb.init();","","    while (statCount++ < static_cast<size_t>(Config.Store.objectsPerBucket) && state->","            theSearch->next()) {"],"label":0}
{"cve":"CVE-2016-3134","code_chunks":["\t\tret = check_entry_size_and_hooks(iter, newinfo, entry0,","\t\t\t\t\t\t entry0 + repl->size,","\t\t\t\t\t\t repl->hook_entry,","\t\t\t\t\t\t repl->underflow,","\t\t\t\t\t\t repl->valid_hooks);","\t\tif (ret != 0)","\t\t\treturn ret;"],"label":0}
{"cve":"CVE-2022-28796","code_chunks":["if (!commit_transaction)","return;","","spin_lock(&commit_transaction->t_handle_lock);","while (atomic_read(&commit_transaction->t_updates)) {","DEFINE_WAIT(wait);"],"label":1}
{"cve":"CVE-2019-17178","code_chunks":["\t\t\t\tif (!tmp2)","\t\t\t\t\tfree(tmp);","\t\t\t\ttmp = tmp2;","","\t\t\t\tif (NULL == tmp)","\t\t\t\t{","\t\t\t\t\tfprintf(stderr,  \"Could not reallocate string buffer.\\n\");"],"label":0}
{"cve":"PYSEC-2021-617","code_chunks":["    for (int f_dim = 0; f_dim < feature_dims; ++f_dim) {","      ConstVectorMap default_stats_vec(","          &stats_summary(node_id, f_dim, num_buckets, 0),","          logits_dim + hessian_dim);","      Eigen::VectorXf missing_bucket_grad = default_stats_vec.head(logits_dim);","      Eigen::VectorXf missing_bucket_hess = default_stats_vec.tail(hessian_dim);","      cum_grad.clear();"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"ifs\\\" missing from comprehension\");","return 1;","}","else {","int res;"],"label":0}
{"cve":"CVE-2019-17534","code_chunks":["VipsObjectClass *class = VIPS_OBJECT_GET_CLASS( gif );","GifFileType *file = gif->file;","","ColorMapObject *map;","GifByteType *extension;","","if( DGifGetImageDesc( gif->file ) == GIF_ERROR ) {"],"label":0}
{"cve":"CVE-2021-44109","code_chunks":["","    return 0;","}","","static int parse_multipart(","        ogs_sbi_message_t *message, ogs_sbi_http_message_t *http)","{"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["}","","const TfLiteIntArray* input_shape = input0->dims;","TfLiteIntArray* output_shape = TfLiteIntArrayCreate(dimension_size);","int i = 0;","for (int index = 0; index < dimension_size; ++index) {"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["context, GetInputSafe(context, node, kInputTensorBoxes, &input_boxes));","TF_LITE_ENSURE_EQ(context, input_boxes->type, kTfLiteFloat32);","TF_LITE_ENSURE_EQ(context, NumDimensions(input_boxes), 2);","TF_LITE_ENSURE_EQ(context, SizeOfDimension(input_boxes, 1), 4);","const int num_boxes = SizeOfDimension(input_boxes, 0);","const TfLiteTensor* input_scores;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["{","PyObject *m, *d;","if (!init_types()) return NULL;","m = PyModule_Create(&_astmodule);","if (!m) return NULL;","d = PyModule_GetDict(m);","if (PyDict_SetItemString(d, \"AST\", (PyObject*)&AST_type) < 0) return NULL;"],"label":0}
{"cve":"CVE-2021-25939","code_chunks":["      _enableFoxxStore(true),","      _hardenedRestApi(false),","      _foxxAllowInstallFromRemote(false) {","  setOptional(false);","  startsAfter<application_features::GreetingsFeaturePhase>();","}",""],"label":0}
{"cve":"PYSEC-2020-215","code_chunks":["t import string_types","","import notebook","from no"],"label":0}
{"cve":"CVE-2020-1898","code_chunks":["CHECK_ENOUGH(1, p, n);","p += 1;","","out = arr;","break;","}"],"label":1}
{"cve":"CVE-2020-13396","code_chunks":["CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);","#ifdef WITH_DEBUG_NTLM","WLog_DBG(TAG, \"CHALLENGE_MESSAGE (length = %d)\", length);","winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,","context->ChallengeMessage.cbBuffer);","ntlm_print_negotiate_flags(context->NegotiateFlags);"],"label":1}
{"cve":"CVE-2019-15141","code_chunks":["","MagickStatusType","flags;","","sampling_factor=(const char *) NULL;","value=GetImageProperty(image,\"jpeg:sampling-factor\");"],"label":1}
{"cve":"CVE-2023-52267","code_chunks":["LOG_INFO(\"TOO BIG REQUEST WE WILL REFUSE IT! MAX_REQ_SIZE:%d\", MAX_REQ_SIZE);","return -1;","}","LOG_DEBUG(\"read from client: size:%d, content:%s\", read_size, read_buffer);","ssize_t nparsed = http_parser_execute(&_parser, &_settings, read_buffer, read_size);","if (nparsed != read_size) {","std::string err_msg = \"unkonw\";"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["return kTfLiteError;","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);","TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);",""],"label":1}
{"cve":"CVE-2019-13299","code_chunks":["if (image->channel_map[channel].traits == UndefinedPixelTrait)"],"label":1}
{"cve":"CVE-2016-10170","code_chunks":["if (bytecnt) {","wpc->channel_layout += nchans = *byteptr++;","bytecnt--;","","","if (bytecnt) {"],"label":1}
{"cve":"CVE-2022-24754","code_chunks":["if (nonce_bin.slen < PJSIP_AKA_RANDLEN + PJSIP_AKA_AUTNLEN)","return PJSIP_EAUTHINNONCE;","","\/* Get RAND, AUTN, and MAC *\/","chal_rand = (pj_uint8_t*)(nonce_bin.ptr + 0);","chal_sqnxoraka = (pj_uint8_t*) (nonce_bin.ptr + PJSIP_AKA_RANDLEN);"],"label":1}
{"cve":"CVE-2022-1238","code_chunks":["RList *entries = r_list_newf (free);","if (!entries) {","return NULL;","}","RBinAddr *entry;","RList *segments = r_bin_ne_get_segments (bin);","if (!segments) {"],"label":0}
{"cve":"CVE-2020-27788","code_chunks":["|| (u32_t)file_size <= sh_name                  || (sh_name","&& 0!=strcmp((char const *)\".shstrtab\", &shstrtab[sh_name]))",") {","throwCantPack(\"bad e_shstrndx\");","}","}","}"],"label":1}
{"cve":"CVE-2016-2324","code_chunks":["\t *\/","\tif (date <= src->item->date)","\t\treturn SLOP;","","\t\/*","\t * Does the source list still have interesting commits in","\t * it? Definitely not done.."],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["GetOutput(context, node, kSoftNMSOutputTensorSelectedScores);","output_num_selected_indices =","GetOutput(context, node, kSoftNMSOutputTensorNumSelectedIndices);","if (!is_max_output_size_const) {","SetTensorSizes(context, output_selected_indices, {max_output_size_value});","SetTensorSizes(context, output_selected_scores, {max_output_size_value});"],"label":1}
{"cve":"CVE-2021-41206","code_chunks":["TensorShape shape_in = logits_in.shape();","","BCast bcast(BCast::FromShape(logits_in.shape()),","BCast::FromShape(labels_in.shape()));","if (!logits_in.IsSameSize(labels_in)) {","OP_REQUIRES(context, bcast.IsValid(),","errors::InvalidArgument("],"label":1}
{"cve":"CVE-2016-2324","code_chunks":["{","struct rev_list_info *info = cb_data;","finish_object(obj, name, cb_data);","if (info->flags & REV_LIST_QUIET)","return;","show_object_with_name(stdout, obj, name);"],"label":0}
{"cve":"CVE-2019-12904","code_chunks":["\t      unused = blocksize;","\t    }","        }","","      if (unused > 0)","        {","          gcry_assert (unused == blocksize);"],"label":0}
{"cve":"CVE-2021-3875","code_chunks":["}","","\/*"," * \":!\"."," *\/","    static void","ex_bang(exarg_T *eap)"],"label":0}
{"cve":"CVE-2019-17544","code_chunks":["char * unescape(char * dest, const char * src)","{","while (*src) {","if (*src == '\\\\' && src[1]) {","++src;","switch (*src) {","case 'n': *dest = '\\n'; break;"],"label":0}
{"cve":"CVE-2020-15473","code_chunks":["if(hmac_size > 0) {","alen = ovpn_payload[P_PACKET_ID_ARRAY_LEN_OFFSET(hmac_size)];","if (alen > 0) {","session_remote = ovpn_payload + P_PACKET_ID_ARRAY_LEN_OFFSET(hmac_size) + 1 + alen * 4;","","if(memcmp(flow->ovpn_session_id, session_remote, 8) == 0) {"],"label":1}
{"cve":"CVE-2023-51698","code_chunks":[],"label":1}
{"cve":"CVE-2020-14402","code_chunks":["seg = data+(j*w);                                           \\","if (seg[x] != cl2) {break;}                                 \\","i = x;                                                      \\","while ((seg[i] == cl2) && (i < w)) i += 1;                  \\","i -= 1;                                                     \\","if (j == y) vx = hx = i;                                    \\","if (i < vx) vx = i;                                         \\"],"label":1}
{"cve":"CVE-2022-37032","code_chunks":["    for (safi = SAFI_UNICAST ; safi < SAFI_MAX ; safi++)","      if (CHECK_FLAG (peer->af_flags[afi][safi], PEER_FLAG_ORF_PREFIX_SM)","\t  || CHECK_FLAG (peer->af_flags[afi][safi], PEER_FLAG_ORF_PREFIX_RM))","\t{","\t  bgp_open_capability_orf (s, peer, afi, safi, CAPABILITY_CODE_ORF_OLD);","\t  bgp_open_capability_orf (s, peer, afi, safi, CAPABILITY_CODE_ORF);","\t}"],"label":0}
{"cve":"CVE-2021-40576","code_chunks":["","\ttrak = gf_isom_get_track_from_file(the_file, trackNumber);","\tif (!trak || !IsHintTrack(trak)) return GF_BAD_PARAM;","","\te = Media_GetSampleDesc(trak->Media, trak->Media->information->sampleTable->currentEntryIndex, (GF_SampleEntryBox **) &entry, &dataRefIndex);","\tif (e) return e;","\tif (!entry->hint_sample) return GF_BAD_PARAM;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["    recovered_cell_weights->type = kTfLiteFloat32;","    recovered_cell_weights->allocation_type = kTfLiteArenaRw;","    int recovered_cell_dims[1] = {n_cell};","    if (!TfLiteIntArrayEqualsArray(recovered_cell_weights->dims, 1,","                                   recovered_cell_dims)) {","      TfLiteIntArray* recovered_cell_weights_size = TfLiteIntArrayCreate(1);","      recovered_cell_weights_size->data[0] = n_cell;"],"label":0}
{"cve":"CVE-2019-17178","code_chunks":["\t\t\t\t\t\/* coverity[buffer_size] *\/","\t\t\t\t\tstrncpy(&tmp[cs], \"&lt;\", len);","","\t\t\t\tcs += len;","\t\t\t\tbreak;","","\t\t\t\tlen = format ? 14 : 4;"],"label":0}
{"cve":"CVE-2018-8796","code_chunks":["\t\tout_uint8(s, 0x82);","\t\tout_uint16_be(s, length);","\t}","\telse","\t\tout_uint8(s, length);","}",""],"label":0}
{"cve":"CVE-2021-40563","code_chunks":["GF_List *list = NULL, *alt_list = NULL;","GF_NALUFFParam *sl;","u32 i, count, crc;","","if (!size) return;","crc = gf_crc_32(data, size);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["aux_input_sf->type = kTfLiteFloat32;","aux_input_sf->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(aux_input_sf->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["return d;","}","assert(0);","\/* NOTREACHED *\/","#endif","}"],"label":1}
{"cve":"CVE-2020-7042","code_chunks":["char *line;","int i;","X509_NAME *subj;","char common_name[FIELD_SIZE + 1];","","SSL_set_verify(tunnel->ssl_handle, SSL_VERIFY_PEER, NULL);",""],"label":1}
{"cve":"CVE-2022-0849","code_chunks":["\t\t\treturn;","\t\t}","\t\tr_core_cmd0 (core, \"aeim\");","\t\tESIL = core->anal->esil;","\t}","\tconst char *kspname = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);","\tif (R_STR_ISEMPTY (kspname)) {"],"label":0}
{"cve":"CVE-2021-32686","code_chunks":["{","    \/* Check for another ongoing flush *\/","    if (ssock->flushing_write_pend)","\treturn PJ_EBUSY;","","    pj_lock_acquire(ssock->write_mutex);",""],"label":0}
{"cve":"CVE-2016-4997","code_chunks":["if (!arp_checkentry(&e->arp))","return -EINVAL;","","ret = xt_compat_check_entry_offsets(e, e->target_offset,","e->next_offset);","if (ret)","return ret;"],"label":1}
{"cve":"CVE-2019-15026","code_chunks":["port = ntohs(((struct sockaddr_in6 *)sock_addr)->sin6_port);","protoname = IS_UDP(c->transport) ? \"udp6\" : \"tcp6\";","break;","","strncpy(addr_text,","((struct sockaddr_un *)sock_addr)->sun_path,"],"label":1}
{"cve":"CVE-2021-3772","code_chunks":["\t\t}","\t\t\tvtag = asoc->peer.i.init_tag;","\t\t\tbreak;","\t\t}","\t} else {","\t\t\/* Special case the INIT and stale COOKIE_ECHO as there is no","\t\t * vtag yet."],"label":0}
{"cve":"CVE-2018-20455","code_chunks":["op->reg = reg - 9;","}","if (reg_type & OT_REGTYPE & OT_SEGMENTREG) {","op->reg = reg;","op->type = reg_type;","parse_segment_offset (a, str, &nextpos, op, reg_index);"],"label":1}
{"cve":"CVE-2019-15140","code_chunks":["      image->rows = temp;","      goto done_reading; \/* !!!!!! BAD  !!!! *\/","    }","    status=SetImageExtent(image,image->columns,image->rows,exception);","    if (status == MagickFalse)","      {","        if (clone_info != (ImageInfo *) NULL)"],"label":0}
{"cve":"CVE-2023-46728","code_chunks":["                          stats.ftp_read_hist[i],","                          Math::doublePercent(stats.ftp_read_hist[i], stats.ftp_reads));","    }","","    storeAppendPrintf(sentry, \"\\n\");","}",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 largePointerSupportFlags;","WLog_INFO(TAG, \"LargePointerCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 6)","return FALSE;",""],"label":1}
{"cve":"CVE-2018-20178","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["    break;","","","    { (yyval.i) = (yyvsp[-1].i); }","","    break;",""],"label":0}
{"cve":"CVE-2017-14639","code_chunks":["compressor_name[32] = 0;","stream.Read(compressor_name, 32);","int name_length = compressor_name[0];","if (name_length < 32) {","compressor_name[name_length+1] = 0;         m_CompressorName = &compressor_name[1];","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    node->temporaries->data[1] = op_data->scratch_tensor_index + 1;","    TfLiteTensor* hidden_state_quantized;","    TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, \/*index=*\/1,","                                                &hidden_state_quantized));","    hidden_state_quantized->type = input_weights->type;","    hidden_state_quantized->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqual(hidden_state_quantized->dims,"],"label":0}
{"cve":"CVE-2017-18248","code_chunks":["\t      break;","","\t      break; \/* anti-compiler-warning-code *\/","\t}","      }","    }","    else if (ch == '\\\\')\t\/* Quoted char *\/"],"label":0}
{"cve":"CVE-2019-13309","code_chunks":["{","index_image=GetImageFromList(_images,index-1);","if (index_image == (Image *) NULL)","CLIWandExceptArgBreak(OptionError,\"NoSuchImage\",option,arg1);","InsertImageInList(&index_image,insert_image);","}","_images=GetFirstImageInList(index_image);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["        if (tok->decoding_buffer == NULL)","            goto error;","        buflen = size;","    }","    else","        tok->decoding_buffer = NULL;",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["            type_comment = NULL;","        }","        else {","            int res;","            res = obj2ast_string(tmp, &type_comment, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    case kTfLiteFloat32: {","            TfLiteTensor* scratch_buffer;","      TF_LITE_ENSURE_OK(context,","                        GetTemporarySafe(context, node, 0, &scratch_buffer));","      return lstm_eval::EvalFloat(","          input, input_to_input_weights, input_to_forget_weights,","          input_to_cell_weights, input_to_output_weights,"],"label":0}
{"cve":"CVE-2022-23576","code_chunks":["    node_costs->num_nodes_with_unknown_shapes = 1;","  }","  if (!success) {","    return PredictCostOfAnUnknownOp(op_context, node_costs);","  }","  return PredictNodeCosts(batch_matmul_op_context, node_costs);","}"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["    isinstance = PyObject_IsInstance(obj, (PyObject*)Compare_type);","    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {","        expr_ty left;","        asdl_int_seq* ops;"],"label":0}
{"cve":"CVE-2018-12320","code_chunks":["bb->failbb->prev = NULL;","bb->failbb = NULL;","}","R_FREE (bb);","}"],"label":1}
{"cve":"CVE-2024-23638","code_chunks":["","Must(io.conn->fd == clientConnection->fd);","","if (io.flag && pipeline.front())","pipeline.front()->initiateClose(\"write failure\");","","afterClientWrite(io.size);     writeSomeData(); }"],"label":1}
{"cve":"CVE-2023-28097","code_chunks":["","\t\/* is the header already found? *\/","\tif ( msg->content_type==0 ) {","\t\t\/* if not, found it *\/","\t\tif ( parse_headers(msg, HDR_CONTENTTYPE_F, 0)==-1)","\t\t\tgoto error;","\t\tif ( msg->content_type==0 ) {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"PYSEC-2020-126","code_chunks":["OP_REQUIRES_OK(ctx, ctx->GetAttr(\"width\", &width));","OP_REQUIRES_OK(ctx, ctx->GetAttr(\"fill\", &fill_string));","switch (dtype) {","break;","OP_REQUIRES(ctx, !(scientific || shortest),","errors::InvalidArgument(\"scientific and shortest format \"","\"not supported for datatype \","],"label":0}
{"cve":"CVE-2018-13006","code_chunks":["gf_isom_box_del(a);\\"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  output->type = kTfLiteComplex64;","","        if (!IsConstantTensor(fft_length)) {","    TfLiteTensor* fft_integer_working_area;","    TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2023-36327","code_chunks":["core_clean();","return 1;","}",""],"label":1}
{"cve":"CVE-2016-7538","code_chunks":["                 (void) WriteBlobMSBShort(image,(unsigned short) -1);","                 (void) SetPSDSize(&psd_info,image,channel_size);","               }","           }","          else","            if (next_image->colorspace != CMYKColorspace)","              {"],"label":0}
{"cve":"CVE-2019-17177","code_chunks":["}","","\/*","palette must have 4 * palettesize bytes allocated, and given in format RGBARGBARGBARGBA...","returns 0 if the palette is opaque,","returns 1 if the palette has a single color with alpha 0 ==> color key","returns 2 if the palette is semi-translucent."],"label":0}
{"cve":"CVE-2019-16718","code_chunks":["\t\t\t\t\tif (str[i] == '\\n') {","\t\t\t\t\t\tstr[i] = ' ';","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tstr = r_str_append (str, ptr2 + 1);","\t\t\tcmd = r_str_append (strdup (cmd), str);"],"label":0}
{"cve":"CVE-2017-7500","code_chunks":["}","\/* Assume file does't exist when tmp suffix is in use *\/","if (!suffix) {","rc = fsmVerify(fpath, fi);","} else {","rc = (action == FA_TOUCH) ? 0 : RPMERR_ENOENT;","}"],"label":1}
{"cve":"CVE-2020-8597","code_chunks":["}","","\/* Not so likely to happen. *\/","if (vallen >= len + sizeof (rhostname)) {","dbglog(\"EAP: trimming really long peer name down\");","BCOPY(inp + vallen, rhostname, sizeof (rhostname) - 1);","rhostname[sizeof (rhostname) - 1] = '\\0';"],"label":1}
{"cve":"CVE-2021-30020","code_chunks":["\t\tpps->num_tile_columns = 1 + gf_bs_read_ue_log(bs, \"num_tile_columns_minus1\");","\t\tpps->num_tile_rows = 1 + gf_bs_read_ue_log(bs, \"num_tile_rows_minus1\");","\t\tpps->uniform_spacing_flag = gf_bs_read_int_log(bs, 1, \"uniform_spacing_flag\");","\t\tif (!pps->uniform_spacing_flag) {","\t\t\tfor (i = 0; i < pps->num_tile_columns - 1; i++) {","\t\t\t\tpps->column_width[i] = 1 + gf_bs_read_ue_log_idx(bs, \"column_width_minus1\", i);","\t\t\t}"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\t\t{","\t\t\tWLog_ERR(TAG,","\t\t\t         \"incorrect offset, type:0x%04\" PRIX16 \" actual:%\" PRIuz \" expected:%\" PRIu16","\t\t\t         \"\",","\t\t\t         type, length - rest, length);","\t\t}",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT32 offscreenSupportLevel;","","if (Stream_GetRemainingLength(s) < 8)","return FALSE;",""],"label":0}
{"cve":"CVE-2023-0302","code_chunks":["\toffset = segment_size + address_size * 2;","","\tif (offset) {","\t\tut64 n = (((ut64) (size_t)buf \/ offset) + 1) * offset - ((ut64)(size_t)buf);","\t\tif (idx+n>=len) {","\t\t\treturn false;","\t\t}"],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[]={0,0};","","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["}","scratch_tensor->allocation_type = kTfLiteArenaRw;","const int scratch_dimension[2] = {n_batch, n_cell};","if (!TfLiteIntArrayEqualsArray(scratch_tensor->dims, 2,","scratch_dimension)) {","TfLiteIntArray* scratch_buffer_size = TfLiteIntArrayCreate(2);"],"label":1}
{"cve":"CVE-2020-36315","code_chunks":["break;","m_len = k_len - 1;","bn_rsh(t, m, 8 * m_len);","if (!bn_is_zero(t)) {","result = RLC_ERR;","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2017-6886","code_chunks":["maximum = 0xffff;","break;","case 50454: \/* Sinar tag *\/","if (len > 2560000 || !(cbuf = (char *)malloc(len)))","break;","#ifndef LIBRAW_LIBRARY_BUILD","fread(cbuf, 1, len, ifp);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"PYSEC-2020-292","code_chunks":["","TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","  const TfLiteTensor* data = GetInput(context, node, kInputDataTensor);","  const TfLiteTensor* segment_ids =","      GetInput(context, node, kInputSegmentIdsTensor);","  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);",""],"label":0}
{"cve":"CVE-2021-41204","code_chunks":["    for (const Edge* in : n->in_edges()) {","            if (!in->IsControlEdge() &&","          constant_control_deps->count(in->src()) == 0) {","        all_parents_constant = false;","        break;","      }","    }"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["    executor->Deallocate(&mem);","  }","  return ::tsl::OkStatus();","}","","tsl::StatusOr<StreamExecutor*> StreamExecutorMemoryAllocator::GetStreamExecutor(","    int device_ordinal) const {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["auto* output_params = reinterpret_cast<TfLiteAffineQuantization*>(","output->quantization.params);","TfLiteTensor* output_temp;","TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, \/*index=*\/1,","&output_temp));",""],"label":0}
{"cve":"CVE-2022-21655","code_chunks":["  EXPECT_CALL(","      callbacks_,","      sendLocalReply(Http::Code::ServiceUnavailable,","                     testing::Eq(\"missing required header: :method\"), _, _,","                     \"filter_removed_required_request_headers{missing_required_header:_:method}\"))","      .WillOnce(InvokeWithoutArgs([] {}));","  router_.decodeHeaders(headers, true);"],"label":0}
{"cve":"CVE-2018-12562","code_chunks":["int t=create","? Type_Samba",": d.isLocalFile()","? Type_File"],"label":1}
{"cve":"CVE-2023-30187","code_chunks":["","LOGGER_SPEED_LAP(\"compile_command\")","","JSSmart<CJSValue> retNativeVal = m_context->runScript(commandA, try_catch);","if(try_catch->Check())","return false;",""],"label":1}
{"cve":"CVE-2020-36315","code_chunks":["for (int i = m_len - 1; i < 8 * k_len; i++) {","bn_set_bit(m, i, 0);","}","break;","bn_mod_2b(t, m, 8);","if (bn_cmp_dig(t, RSA_PSS) != RLC_EQ) {"],"label":1}
{"cve":"CVE-2016-6873","code_chunks":["}","","static void containerValuesIntersectHelper(const req::ptr<c_Set>& st,","                                           TypedValue* containers,","                                           int count) {","  assert(count >= 2);","  auto mp = req::make<c_Map>();"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["if (context == nullptr) {","return tsl::Status(","tsl::error::UNAVAILABLE,","\"Empty context returned while querying context for device pointer\");","}","return context;"],"label":0}
{"cve":"CVE-2016-4303","code_chunks":["\t(void) Nwrite(test->ctrl_sck, (char*) &test->state, sizeof(signed char), Ptcp);","    }","    i_errno = (test->role == 'c') ? IECLIENTTERM : IESERVERTERM;","    iperf_errexit(test, \"interrupt - %s\", iperf_strerror(i_errno));","}","",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["input->type == kTfLiteInt16) {","node->temporaries->data[data->scratch_tensor_index] =","data->scratch_tensor_id;","TfLiteTensor* scratch_buffer ="],"label":1}
{"cve":"CVE-2018-14498","code_chunks":["int maxval;","} ppm_source_struct;"],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["}","","int cmp_len = s1_len - offset;","if (cmp_len < s2_len) cmp_len = s2_len;","if (cmp_len > length) cmp_len = length;",""],"label":1}
{"cve":"CVE-2022-35971","code_chunks":["","  const float bias_min = -0.739539f;","  const float bias_max = 0.641057f;","  const int bias_width = 64;","  Tensor bias_float(DT_FLOAT, {bias_width});","  test::FillValues<float>(","      &bias_float,"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["    return 1;","}","","int","obj2ast_expr_context(PyObject* obj, expr_context_ty* out, PyArena* arena)","{","    int isinstance;"],"label":0}
{"cve":"CVE-2020-4030","code_chunks":["TRIO_PUBLIC_STRING size_t trio_length TRIO_ARGS1((string), TRIO_CONST char* string)","{","return strlen(string);","}","","#endif"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params =","reinterpret_cast<TfLiteResizeBilinearParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["void CLASS rollei_load_raw()","{","uchar pixel[10];","unsigned iten=0, isix, i, buffer=0, todo[16];","","isix = raw_width * raw_height * 5 \/ 8;","while (fread (pixel, 1, 10, ifp) == 10) {"],"label":1}
{"cve":"CVE-2020-15888","code_chunks":["      lua_assert(ci->top <= L->stack_last);","      luaV_execute(L, ci);  \/* run the function *\/","      break;","    }","    default: {  \/* not a function *\/","      checkstackGCp(L, 1, func);  \/* space for metamethod *\/","      luaD_tryfuncTM(L, func);  \/* try to get '__call' metamethod *\/"],"label":0}
{"cve":"CVE-2021-45931","code_chunks":["  \/* Immutible-safe. *\/","  set->subtract (*other);","}","","\/**"," * @set: A set"," * @other: Another set"],"label":0}
{"cve":"CVE-2018-10539","code_chunks":["WaveHeader WaveHeader;","uint32_t bcount;","","infilesize = DoGetFileSize (infile);","memcpy (&filehdr, fourcc, 4);",""],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["}","for (c=0; c < 16; c+=2) {","i = len[((c & 1) << 1) | (c >> 3)];","RAW(row,col+c) = ((signed) ph1_bits(i) << (32-i) >> (32-i)) +","(dir ? RAW(row+(~c | -2),col+c) : col ? RAW(row,col+(c | -2)) : 128);","if (c == 14) c = -1;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (!is_string_allowed) {","TF_LITE_ENSURE(context, input1->type != kTfLiteString);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  return -1;","}","","inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,","                                     const TfLiteNode* node, int index) {","  const int tensor_index = ValidateTensorIndexing(","      context, index, node->inputs->size, node->inputs->data);"],"label":0}
{"cve":"CVE-2020-5291","code_chunks":["  __debug__ ((\"Creating root mount point\\n\"));","","  if (opt_sandbox_uid == -1)","    opt_sandbox_uid = real_uid;","  if (opt_sandbox_gid == -1)","    opt_sandbox_gid = real_gid;",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["output_state_quantized->type = input_to_output_weights->type;","output_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(output_state_quantized->dims,"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["n_cell, is_layer_norm_lstm));","","TfLiteTensor* output = GetOutput(context, node, lstm::full::kOutputTensor);","","TfLiteTensor* output_state =","GetVariableInput(context, node, lstm::full::kOutputStateTensor);"],"label":1}
{"cve":"CVE-2018-20177","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* tensor0;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &tensor0));","TfLiteTensor* tensor1;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &tensor1));"],"label":0}
{"cve":"CVE-2019-19959","code_chunks":["}else{","if( zName[nName-1]!='\/' ){","zName = zFree = sqlite3_mprintf(\"%s\/\", zName);","nName++;","if( zName==0 ){","rc = SQLITE_NOMEM;","goto zipfile_step_out;"],"label":1}
{"cve":"CVE-2016-5357","code_chunks":["\t * otherwise it's NETSCREEN_INGRESS.","\t *\/","","\tphdr->ts.secs  = sec;","\tphdr->ts.nsecs = dsec * 100000000;","\tphdr->len = pkt_len;",""],"label":0}
{"cve":"CVE-2018-20749","code_chunks":["    if (nColours > 256) {","\t\/* some rare hardware has, e.g., 4096 colors cells: PseudoColor:12 *\/","    \twbuf = (char *) malloc(sz_rfbSetColourMapEntriesMsg + nColours * 3 * 2);","    }","","    scme = (rfbSetColourMapEntriesMsg *)wbuf;","    rgb = (uint16_t *)(&wbuf[sz_rfbSetColourMapEntriesMsg]);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (res != 0) goto failed;","Py_CLEAR(tmp);","}"],"label":0}
{"cve":"CVE-2021-3331","code_chunks":["  bool Result = (HostName.Pos(L\":\") > 0);","  if (Result)","  {","    for (int Index = 1; Result && (Index <= HostName.Length()); Index++)","    {","      wchar_t C = HostName[Index];","      Result = IsHex(C) || (C == L':');"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["RETURN_IF_ERROR(CheckInputsOutputs(context, tflite_node,","\/*runtime_inputs=*\/1, \/*outputs=*\/1));","RETURN_IF_ERROR(CheckTensorIsAvailable(context, tflite_node, 1));","auto pad_tensor = tflite::GetInput(context, tflite_node, 1);","if (pad_tensor->dims->size != 2) {","return absl::InvalidArgumentError(absl::StrCat(","\"Invalid paddings tensor dimension: expected 2 dim, got \","],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;"],"label":1}
{"cve":"CVE-2022-1587","code_chunks":["      {","      OP1(SLJIT_MOV, STACK_TOP, 0, SLJIT_MEM1(SLJIT_SP), private_data_ptr);","      add_jump(compiler, &common->revertframes, JUMP(SLJIT_FAST_CALL));","      OP2(SLJIT_ADD, STACK_TOP, 0, STACK_TOP, 0, SLJIT_IMM, (BACKTRACK_AS(bracket_backtrack)->u.framesize - 1) * sizeof(sljit_sw));","      }","    else if (ket == OP_KETRMIN && opcode != OP_ONCE)","      free_stack(common, 1);"],"label":0}
{"cve":"CVE-2022-23537","code_chunks":["#if !PJ_STUN_OLD_STYLE_MI_FINGERPRINT","        \/* Update message length *\/","        PUTVAL16H(start, 2, ","                 (pj_uint16_t)(GETVAL16H(start, 2)+8));","#endif","","        afingerprint->value = pj_crc32_calc(start, buf-start);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["        return 1;","    }","    if (isinstance) {","        asdl_seq* names;","","        if (lookup_attr_id(obj, &PyId_names, &tmp) < 0) {","            return 1;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_desktop_composition_capability_set(wStream* s, rdpSettings* settings)","{","WINPR_UNUSED(settings);","if (Stream_GetRemainingLength(s) < 2)","return FALSE;","","Stream_Seek_UINT16(s); \/* compDeskSupportLevel (2 bytes) *\/"],"label":0}
{"cve":"CVE-2023-49286","code_chunks":["x = dup(crfd);","assert(x > -1);","} while (x < 3 && x > -1);",""],"label":1}
{"cve":"CVE-2022-48571","code_chunks":["","                        resp_reset(resp);","","    if (c->noreply) {","                        resp->skip = true;","        if (settings.verbose > 1)","            fprintf(stderr, \">%d NOREPLY %s\\n\", c->sfd, str);"],"label":0}
{"cve":"CVE-2022-31621","code_chunks":["pthread_mutex_unlock(&stream_ctxt->mutex);","","file = (ds_file_t *) my_malloc(sizeof(ds_file_t) +","sizeof(ds_stream_file_t),","MYF(MY_FAE));","stream_file = (ds_stream_file_t *) (file + 1);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp24_write_bin(uint8_t *bin, size_t len, const fp24_t a, int pack) {","fp24_t t;","","fp24_null(t);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["        }","        else {","            int res;","            res = obj2ast_expr(tmp, &value, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }"],"label":0}
{"cve":"CVE-2021-3770","code_chunks":["else","(void)set_indent(i, SIN_CHANGED);","}","else if (curwin->w_cursor.col > 0)","{","temp = TRUE;"],"label":1}
{"cve":"CVE-2023-28486","code_chunks":["    sdlen = strlcpy(pathbuf, dir, sizeof(pathbuf));","    if (sdlen + 1 >= sizeof(pathbuf)) {","\terrno = ENAMETOOLONG;","\tsudo_fatal(\"%s\/\", dir);","    }","    pathbuf[sdlen++] = '\/';","    pathbuf[sdlen] = '\\0';"],"label":0}
{"cve":"CVE-2016-9843","code_chunks":["{","    register z_crc_t c;","    register const z_crc_t FAR *buf4;","","    c = ZSWAP32((z_crc_t)crc);","    c = ~c;","    while (len && ((ptrdiff_t)buf & 3)) {"],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["if(len<1) return;   string[len-1]=0;","if(len<3) return;   len = strnlen(string,len-1);","for(int i=len-1; i>=0; i--)","{","if(isspace(string[i]))","string[i]=0;"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["ds->clock[idx] = NULL;","}","","if (size < 1 || !IS_DTLS_PKT(pkt, size))","return PJ_EIGNORED;","","#if DTLS_DEBUG"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"PYSEC-2020-116","code_chunks":["","m.def(\"TFE_ToDlpackCapsule\", [](py::handle& o) {","PyObject* eager_tensor_pyobject_ptr = o.ptr();","TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);","tensorflow::Safe_TF_StatusPtr status =","tensorflow::make_safe(TF_NewStatus());","void* dlm_ptr = tensorflow::TFE_HandleToDLPack(thandle, status.get());"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);"],"label":1}
{"cve":"CVE-2021-43848","code_chunks":["    h2o_vector_reserve(&stream->req.pool, &stream->sendbuf.vecs, stream->sendbuf.vecs.size + 1);","    struct st_h2o_http3_server_sendvec_t *vec = stream->sendbuf.vecs.entries + stream->sendbuf.vecs.size++;","    h2o_sendvec_init_immutable(&vec->vec, frame.base, frame.len);","    vec->entity_offset = UINT64_MAX;","    stream->sendbuf.final_size += frame.len;","}",""],"label":0}
{"cve":"CVE-2016-10167","code_chunks":["gdAssertImageEqualsToFile(path, im);","gdFree(path);","","gdImageDestroy(im);","","return gdNumFailures();"],"label":0}
{"cve":"CVE-2017-9142","code_chunks":["static Image *ReadOneJNGImage(MngInfo *mng_info,","const ImageInfo *image_info, ExceptionInfo *exception)","{","Image","*alpha_image,","*color_image,"],"label":0}
{"cve":"CVE-2023-27772","code_chunks":["hostname = \"localhost\";","","if (argc > 2)","tcpPort = atoi(argv[2]);","","IedClientError error;"],"label":1}
{"cve":"CVE-2021-3770","code_chunks":["","    curbuf->b_p_ma = FALSE;","    p_ma = FALSE;","    opt_idx = findoption((char_u *)\"ma\");","    if (opt_idx >= 0)","\toptions[opt_idx].def_val[VI_DEFAULT] = FALSE;","}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["}","","const TfLiteTensor* fft_length;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFftLengthTensor, &fft_length));","const RuntimeShape fft_length_shape = GetTensorShape(fft_length);",""],"label":0}
{"cve":"CVE-2023-4535","code_chunks":["if (priv->sym_plain_buffer_len) {","\/* insert previous last block to output buffer *\/","sc_log(ctx, \"inserting block from previous decrypt\");","memmove(out - return_len + block_size, out - return_len, return_len - block_size);","memcpy(out - return_len, priv->sym_plain_buffer, block_size);","} else"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["GetInput(context, node, kInputConditionTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (cond_tensor->type != kTfLiteBool) {","context->ReportError(context,"],"label":1}
{"cve":"CVE-2016-8649","code_chunks":["if (strcmp(name, \"AppArmor\") == 0) {","int size;","","command = malloc(strlen(lsm_label) + strlen(\"changeprofile \") + 1);","if (!command) {","SYSERROR(\"Failed to write apparmor profile\");"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["PyUnicode_GET_LENGTH(state->last_str) != 0);","","\/* We've dealt with the literal now. It can't be leaked on further","errors. *\/"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["GetOutput(context, node, kSoftNMSOutputTensorSelectedScores);","output_num_selected_indices =","GetOutput(context, node, kSoftNMSOutputTensorNumSelectedIndices);","if (!is_max_output_size_const) {","SetTensorSizes(context, output_selected_indices, {max_output_size_value});","SetTensorSizes(context, output_selected_scores, {max_output_size_value});"],"label":1}
{"cve":"CVE-2018-20180","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"CVE-2017-11399","code_chunks":["","\/* reallocate decoded sample buffer if needed *\/","av_fast_malloc(&s->decoded_buffer, &s->decoded_size,","2 * FFALIGN(blockstodecode, 8) * sizeof(*s->decoded_buffer));","if (!s->decoded_buffer)","return AVERROR(ENOMEM);"],"label":1}
{"cve":"CVE-2023-5377","code_chunks":["GF_ChannelLayoutBox *ptr = (GF_ChannelLayoutBox *) s;","","ISOM_DECREASE_SIZE(s, 1)","ptr->layout.stream_structure = gf_bs_read_u8(bs);","if (ptr->layout.stream_structure & 1) {","ISOM_DECREASE_SIZE(s, 1)","ptr->layout.definedLayout = gf_bs_read_u8(bs);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["      context, GetInputSafe(context, node, kInputTensorScores, &input_scores));","  const TfLiteTensor* input_max_output_size;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensorMaxOutputSize,","                                 &input_max_output_size));","  const int max_output_size_value = *GetTensorData<int>(input_max_output_size);","  TF_LITE_ENSURE(context, (max_output_size_value >= 0));"],"label":0}
{"cve":"CVE-2019-10714","code_chunks":["{","#if defined(MAGICKCORE_LOCALE_SUPPORT)","if (c_locale != (locale_t) NULL)","return(tolower_l(c,c_locale));","#endif"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp12_read_bin(fp12_t a, const uint8_t *bin, int len) {","if (len != 8 * RLC_FP_BYTES && len != 12 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":1}
{"cve":"CVE-2019-15903","code_chunks":["int tok","= XmlPrologTok(parser->m_internalEncoding, textStart, textEnd, &next);","result = doProlog(parser, parser->m_internalEncoding, textStart, textEnd,","tok, next, &next, XML_FALSE);","} else","#endif \/* XML_DTD *\/","result = doContent(parser, openEntity->startTagLevel,"],"label":1}
{"cve":"CVE-2018-14016","code_chunks":["\t\t\t\"(mdmp_location_descriptor)Location\", 0);","","\t\/* Parse each entry in the directory *\/","\tut64 rvadir = obj->hdr->stream_directory_rva;","\tfor (i = 0; i < (int)obj->hdr->number_of_streams; i++) {","\t\tut32 delta = i * sizeof (struct minidump_directory);","\t\tint r = r_buf_read_at (obj->b, rvadir + delta, (ut8*) &entry, sizeof (struct minidump_directory));"],"label":0}
{"cve":"CVE-2022-1899","code_chunks":["\tif (from > to) {","\t\teprintf (\"Invalid range to find strings 0x%\"PFMT64x\" .. 0x%\"PFMT64x\"\\n\", from, to);","\t\treturn -1;","\t}","\tst64 len = (st64)(to - from);","\tif (len < 1 || len > ST32_MAX) {","\t\teprintf (\"String scan range is invalid (%\"PFMT64d\" bytes)\\n\", len);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["for (int p = 0; p < top_paths; ++p) {","const int32_t p_num = num_entries[p];","","TfLiteTensor* indices = GetOutput(context, node, p);","TF_LITE_ENSURE_OK(context, Resize(context, {p_num, 2}, indices));",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int bn_size_str(const bn_t a, int radix) {","int digits = 0;","bn_t t;",""],"label":1}
{"cve":"PYSEC-2020-283","code_chunks":["OP_REQUIRES_OK(ctx, ctx->GetAttr(\"width\", &width));","OP_REQUIRES_OK(ctx, ctx->GetAttr(\"fill\", &fill_string));","switch (dtype) {","break;","OP_REQUIRES(ctx, !(scientific || shortest),","errors::InvalidArgument(\"scientific and shortest format \"","\"not supported for datatype \","],"label":0}
{"cve":"PYSEC-2020-319","code_chunks":["void Compute(OpKernelContext* ctx) override {","const Tensor& val = ctx->input(0);","auto session_state = ctx->session_state();","OP_REQUIRES(ctx, session_state != nullptr,","errors::FailedPrecondition(","\"GetSessionHandle called on null session state\"));"],"label":0}
{"cve":"CVE-2018-5810","code_chunks":["    desc[511] = artist[63] = make[63] = model[63] = model2[63] = 0;","#endif","  for (i=0; i < sizeof corp \/ sizeof *corp; i++)","    if (strcasestr (make, corp[i]))\t\/* Simplify company names *\/","\t    strcpy (make, corp[i]);","  if ((!strncmp(make,\"Kodak\",5) || !strncmp(make,\"Leica\",5)) &&","\t((cp = strcasestr(model,\" DIGITAL CAMERA\")) ||"],"label":0}
{"cve":"CVE-2019-15226","code_chunks":["void HeaderMapImpl::removePrefix(const LowerCaseString& prefix) {","headers_.remove_if([&](const HeaderEntryImpl& entry) {","bool to_remove = absl::StartsWith(entry.key().getStringView(), prefix.get());","if (to_remove) {","EntryCb cb = ConstSingleton<StaticLookupTable>::get().find(entry.key().getStringView());"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["                    goto error;","                if (forbidden_name(c, argname, ch, 0))","                    goto error;","                arg = arg(argname, annotation, NULL, LINENO(ch), ch->n_col_offset,","                          c->c_arena);","                if (!arg)","                    goto error;"],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[]={0,0};","","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":1}
{"cve":"CVE-2023-51698","code_chunks":["\t\t\tif (error != NULL) {","\t\t\t\tg_warning (\"Fatal error handling archive (%s): %s\", G_STRFUNC, error->message);","\t\t\t\tg_error_free (error);","\t\t\t}","\t\t\tbreak;","\t\t}",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["return kTfLiteOk;","};","reg.invoke = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* a0 = GetInput(context, node, 0);","","auto populate = [&](int id) {","TfLiteTensor* t = &context->tensors[id];"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["        }","        else {","            int res;","            Py_ssize_t len;","            Py_ssize_t i;","            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"While field \\\"orelse\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"],"label":0}
{"cve":"CVE-2021-23520","code_chunks":["            const auto result = zip.uncompressEntry (i, tmpDir.getFile());","            const auto caseIt = testCases.find (zip.getEntry (i)->filename);","","            if (caseIt != testCases.end())","            {","                expect (result.wasOk() == caseIt->second,","                        zip.getEntry (i)->filename + \" was unexpectedly \" + (result.wasOk() ? \"OK\" : \"not OK\"));"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["*data->invoke_count += 1;","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const uint8_t* input_data = GetTensorData<uint8_t>(input);","int size = NumElements(input->dims);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* axis_tensor;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kAxisTensor, &axis_tensor));","int axis = GetTensorData<int32_t>(axis_tensor)[0];"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      accum_scratch_size->data[0] = accum_scratch_dims[0];","      accum_scratch_size->data[1] = accum_scratch_dims[1];","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, accum_scratch,","                                                       accum_scratch_size));","    }","    node->temporaries->data[4] = op_data->scratch_tensor_index + 4;","    TfLiteTensor* zero_points;"],"label":0}
{"cve":"CVE-2022-0417","code_chunks":["    long\tcol;","    long\tvcol;","    long\tstart_col = 0;\t\t    long\tstart_vcol = 0;\t\t    long\told_len;","    char_u\t*ptr;","    char_u\t*new_line = (char_u *)1;     int\t\tdid_undo;\t\t#ifdef FEAT_VARTABS","    int\t\t*new_vts_array = NULL;","    char_u\t*new_ts_str;\t\t#else"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2018-6334","code_chunks":["event_start.content_length = content_length;","if (php_rfc1867_callback(&s_rfc1867_data->rfc1867ApcData,","MULTIPART_EVENT_START, &event_start,","&event_extra_data) == FAILURE) {","goto fileupload_done;","}"],"label":1}
{"cve":"CVE-2019-11338","code_chunks":["                s->poc <= s->max_ra) {","                s->is_decoded = 0;","                break;","            } else {","                if (s->nal_unit_type == HEVC_NAL_RASL_R && s->poc > s->max_ra)","                    s->max_ra = INT_MIN;","            }"],"label":0}
{"cve":"CVE-2018-17206","code_chunks":["*","* Returns NULL if successful, otherwise a malloc()'d string describing the","* error.  The caller is responsible for freeing the returned string. *\/","static char * OVS_WARN_UNUSED_RESULT","set_field_split_str(char *arg, char **key, char **value, char **delim)","{"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["return ast_for_for_stmt(c, CHILD(n, 1),","1 \/* is_async *\/);","","PyErr_Format(PyExc_SystemError,","\"invalid async stament: %s\","],"label":1}
{"cve":"CVE-2022-41911","code_chunks":["string SummarizeArrayInternal(int64_t limit, int64_t num_elts,","const TensorShape& tensor_shape, const T* array,","const bool print_v2) {","string ret;","const gtl::InlinedVector<int64_t, 4> shape = tensor_shape.dim_sizes();","if (shape.empty()) {"],"label":0}
{"cve":"CVE-2023-28101","code_chunks":["      g_autoptr(FlatpakContext) middle = flatpak_context_new ();","      g_autoptr(FlatpakContext) highest = flatpak_context_new ();","      g_autoptr(GError) local_error = NULL;","      gpointer value;","","      context_parse_args (lowest,","                          &local_error,"],"label":0}
{"cve":"CVE-2020-7247","code_chunks":["{","char   *p, *e;","","if (line == NULL)","return (0);",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["aux_input_zp->type = kTfLiteFloat32;","aux_input_zp->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(aux_input_zp->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"CVE-2018-18839","code_chunks":["if(unlikely(*s == '%')) {","if(likely(s[1] && s[2])) {","char t = from_hex(s[1]) << 4 | from_hex(s[2]);","*d++ = (char)((isprint(t))? t : ' ');","s += 2;","}"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["extern uint32_t _WM_SetupMidiEvent(struct _mdi *mdi, uint8_t * event_data, uint8_t running_event);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep_map_from_field(ep_t p, const uint8_t *uniform_bytes, int len);"],"label":1}
{"cve":"CVE-2022-36017","code_chunks":["      float minimum = given_y_min_, maximum = given_y_max_;","      if (!output_range_given_) {","        MinAndMax(reinterpret_cast<const uint8_t*>(input_tensor.data()), H * W,","                  C, float_mean.data(), float_variance.data(),","                  variance_epsilon_, &minimum, &maximum);","      }",""],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["d = AST_type.tp_dict;","empty_tuple = PyTuple_New(0);","if (!empty_tuple ||","PyDict_SetItemString(d, \"_fields\", empty_tuple) < 0 ||","PyDict_SetItemString(d, \"_attributes\", empty_tuple) < 0) {","Py_XDECREF(empty_tuple);"],"label":1}
{"cve":"PYSEC-2021-550","code_chunks":["      const TensorBuffer* buffer = DMAHelper::buffer(&component);","      if (buffer) {","        total_size += buffer->size();","      }","    } else {","      non_memcpy_components.emplace_back();","      component.AsProtoTensorContent(&non_memcpy_components.back());"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* a0 = GetInput(context, node, 0);","TfLiteTensor* a1 = GetOutput(context, node, 0);","int num = a0->dims->data[0];","for (int i = 0; i < num; i++) {","a1->data.f[i] = a0->data.f[i];"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","  const TfLiteTensor* lookup;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));","  TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);","  TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);"],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["p->order = 0x4949;","dcr_fread(p->obj_, tag, 4, 1);","size = dcr_get4(p);","end = dcr_ftell(p->obj_) + size;","if (!memcmp(tag,\"RIFF\",4) || !memcmp(tag,\"LIST\",4)) {","dcr_get4(p);","while (dcr_ftell(p->obj_)+7 < (long)end)"],"label":1}
{"cve":"CVE-2020-35538","code_chunks":["JDIMENSION in_row_group_ctr,","JSAMPARRAY output_buf)","{","my_merged_upsample_ptr upsample = (my_merged_upsample_ptr)cinfo->upsample;","register int y, cred, cgreen, cblue;","int cb, cr;","register JSAMPROW outptr;"],"label":0}
{"cve":"PYSEC-2021-458","code_chunks":["ValidateInputs(ctx, *input_matrix, input_permutation_indices, &batch_size,","&num_rows);","","Tensor batch_ptr(cpu_allocator(), DT_INT32, TensorShape({batch_size + 1}));","auto batch_ptr_vec = batch_ptr.vec<int32>();"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus EvalHashtableSize(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input_resource_id_tensor =","GetInput(context, node, kInputResourceIdTensor);","int resource_id = input_resource_id_tensor->data.i32[0];","","TfLiteTensor* output_tensor = GetOutput(context, node, kOutputTensor);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    isinstance = PyObject_IsInstance(obj, (PyObject *)Param_type);","    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {","        *out = Param;","        return 0;"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["m->negated ? \"!\" : \"\", m->name ? m->name : \"ALL\",","matched == true ? \"true\" : \"false\");","debug_return_int(matched);","}","","\/*"],"label":1}
{"cve":"CVE-2022-36879","code_chunks":["*num_xfrms = 0;","return 0;","}","if (IS_ERR(pols[0]))","return PTR_ERR(pols[0]);","","*num_xfrms = pols[0]->xfrm_nr;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["}","","node->temporaries->data[2] = scratch_tensor_index + 2;","TfLiteTensor* scaling_factors = GetTemporary(context, node, \/*index=*\/2);","scaling_factors->type = kTfLiteFloat32;","scaling_factors->allocation_type = kTfLiteArenaRw;","int scaling_dims[1] = {batch_size};"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["if (fdt_check_header(fit)) {","debug(\"Wrong FIT format: not a flattened device tree\\n\");","return 0;","}"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["}","","return tsl::Status(","port::error::NOT_FOUND,","absl::StrCat(\"Check if module containing symbol \", symbol_name,","\" is loaded (module_handle = \",","reinterpret_cast<uintptr_t>(module_handle.id()), \")\"));"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int fp_bits(const fp_t a) {","int i = RLC_FP_DIGS - 1;","","while (i >= 0 && a[i] == 0) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["if (fc_params->weights_format != kTfLiteFullyConnectedWeightsFormatDefault) {","return false;","}","const TfLiteTensor* input = GetInput(context, node, kInput);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["{","PyObject *m, *d;","if (!init_types()) return NULL;","m = PyModule_Create(&_astmodule);","if (!m) return NULL;","d = PyModule_GetDict(m);","if (PyDict_SetItemString(d, \"AST\", (PyObject*)&AST_type) < 0) return NULL;"],"label":0}
{"cve":"CVE-2019-12107","code_chunks":["\t\tsub = subnext;","\t}","}","","#ifdef USE_MINIUPNPDCTL","void write_events_details(int s) {","\tint n;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["    auto* op_data = reinterpret_cast<OpData*>(node->user_data);","    op_data->compute_row_sums = true;","    TfLiteIntArrayFree(node->temporaries);","    node->temporaries = TfLiteIntArrayCreate(6);","    node->temporaries->data[0] = op_data->scratch_tensor_index;","    TfLiteTensor* input_quantized;","    TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, \/*index=*\/0,"],"label":0}
{"cve":"CVE-2020-24870","code_chunks":["\t\t\theight = 2144;","\t\t\twidth = 2880;","\t\t\tflip = 6;","\t\t}","\t\telse if (load_raw != &LibRaw::packed_load_raw && strncmp(model, \"X-\", 2) &&","\t\t\tfilters >= 1000) \t\t\tmaximum = (is_raw == 2 && shot_select) ? 0x2f00 : 0x3e00;",""],"label":0}
{"cve":"CVE-2017-12595","code_chunks":["    this->objid = 0;","    this->generation = 0;","","    PointerHolder<QPDFObject> new_obj;","","    if (isBool())","    {"],"label":0}
{"cve":"CVE-2022-35173","code_chunks":["&ctx->try_exit_label,","&ctx->catch_exit_label);","if (njs_slow_path(dest_label == NULL)) {","return NJS_ERROR;","}",""],"label":1}
{"cve":"CVE-2023-48221","code_chunks":["","bundle.mid = 0;","bundle.mb = mbuf_alloc(128);","mbuf_printf(bundle.mb, sdp_session_rattr(sess, \"group\"));","","list_flush((struct list *)sdp_session_medial(sess, true));",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    return context->ResizeTensor(context, output, outputSize);","  };","  reg_len.invoke = [](TfLiteContext* context, TfLiteNode* node) {","    const TfLiteTensor* a0;","    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &a0));","    TfLiteTensor* a1;","    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &a1));"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_color_cache_capability_set(wStream* s, UINT16 length, rdpSettings* settings)","{","WINPR_UNUSED(settings);","if (length < 8)","return FALSE;","","Stream_Seek_UINT16(s); \/* colorTableCacheSize (2 bytes) *\/"],"label":1}
{"cve":"CVE-2022-1451","code_chunks":["RBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);","if (attr) {","attr->type = R_BIN_JAVA_ATTR_TYPE_CONST_VALUE_ATTR;","attr->info.constant_value_attr.constantvalue_idx = R_BIN_JAVA_USHORT (buffer, offset);","offset += 2;","attr->size = offset;","}"],"label":1}
{"cve":"PYSEC-2022-150","code_chunks":["      }","      NodeDef* gnode = AddNode(name);","      if (ints_on_device && dtypes[i] == DataType::DT_INT32) {","        gnode->set_op(FunctionLibraryDefinition::kDeviceRetOp);","      } else {","        gnode->set_op(FunctionLibraryDefinition::kRetOp);","      }"],"label":0}
{"cve":"CVE-2016-4564","code_chunks":["*clone_info;","","MagickBooleanType","closed_path;","","MagickStatusType"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT32 keyboardFunctionKey;","WLog_INFO(TAG, \"InputCapabilitySet (length %\" PRIu16 \")\", length);","","if (length < 88)","return FALSE;",""],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}"],"label":1}
{"cve":"CVE-2016-3134","code_chunks":["\t\tif (copy_to_user(userptr + off","\t\t\t\t + offsetof(struct ip6t_entry, counters),","\t\t\t\t &counters[num],","\t\t\t\t sizeof(counters[num])) != 0) {","\t\t\tret = -EFAULT;","\t\t\tgoto free_counters;","\t\t}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\tif (len == 16 * RLC_FP_BYTES) {","\t\tfp4_zero(a[0][0]);","\t\tfp4_zero(a[0][1]);","\t\tfp4_read_bin(a[1][0], bin, 4 * RLC_FP_BYTES);","\t\tfp4_read_bin(a[1][1], bin + 4 * RLC_FP_BYTES, 4 * RLC_FP_BYTES);","\t\tfp4_read_bin(a[2][0], bin + 8 * RLC_FP_BYTES, 4 * RLC_FP_BYTES);","\t\tfp4_read_bin(a[2][1], bin + 12 * RLC_FP_BYTES, 4 * RLC_FP_BYTES);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fb_read_str(fb_t a, const char *str, int len, int radix);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    p = (type_ignore_ty)PyArena_Malloc(arena, sizeof(*p));","    if (!p)","        return NULL;","    p->kind = TypeIgnore_kind;","    p->v.TypeIgnore.lineno = lineno;","    return p;","}"],"label":0}
{"cve":"CVE-2022-1237","code_chunks":["\t}","\tif (!bin->segment_entries) {","\t\treturn;","\t}","\tr_buf_read_at (buf, offset, (ut8 *)bin->segment_entries, size);","\tbin->entry_table = calloc (1, bin->ne_header->EntryTableLength);","\tr_buf_read_at (buf, (ut64)bin->header_offset + bin->ne_header->EntryTableOffset, bin->entry_table, bin->ne_header->EntryTableLength);"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["","CALLOC_ARRAY(res, 1);","while (fgets(buf, sizeof(buf), fp)) {","char *bufp = buf;","if (!lineno)","skip_utf8_bom(&bufp, strlen(bufp));"],"label":1}
{"cve":"CVE-2016-9583","code_chunks":["picomp->numrlvls; ++rlvlno, ++pirlvl) {","xstep = picomp->hsamp * (1 <<","(pirlvl->prcwidthexpn + picomp->numrlvls -","rlvlno - 1));","ystep = picomp->vsamp * (1 <<","(pirlvl->prcheightexpn + picomp->numrlvls -"],"label":1}
{"cve":"CVE-2018-5344","code_chunks":["static void lo_release(struct gendisk *disk, fmode_t mode)","{","struct loop_device *lo = disk->private_data;","int err;","","if (atomic_dec_return(&lo->lo_refcnt))"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* top_k = GetInput(context, node, kInputTopK);","TF_LITE_ENSURE_TYPES_EQ(context, top_k->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, NumElements(top_k), 1);","const int32 k = *GetTensorData<int32_t>(top_k);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2022-41859","code_chunks":["\treturn req;","}","","int compute_keys(UNUSED REQUEST *request, pwd_session_t *session, uint8_t *peer_confirm, uint8_t *msk, uint8_t *emsk)","{","\tHMAC_CTX\t*hmac_ctx;","\tuint8_t\t\tmk[SHA256_DIGEST_LENGTH], *cruft;"],"label":0}
{"cve":"CVE-2016-4303","code_chunks":["void cJSON_Minify(char *json)","{","\tchar *into=json;","\twhile (*json)","\t{","\t\tif (*json==' ') json++;","\t\telse if (*json=='\\t') json++;\t\/* Whitespace characters. *\/"],"label":0}
{"cve":"CVE-2019-13308","code_chunks":["","  register ssize_t","    x;","","  ssize_t","    i,","    y;"],"label":0}
{"cve":"CVE-2018-25032","code_chunks":["    unsigned dist;      \/* distance of matched string *\/","    int lc;             \/* match length or unmatched char (if dist == 0) *\/","    unsigned sx = 0;    \/* running index in sym_buf *\/","    unsigned code;      \/* the code to send *\/","    int extra;          \/* number of extra bits to send *\/","","    if (s->sym_next != 0) do {"],"label":0}
{"cve":"CVE-2018-18313","code_chunks":["else {","STRLEN length;","char name = *RExC_parse;","char * endbrace;","RExC_parse += 2;","endbrace = strchr(RExC_parse, '}');"],"label":1}
{"cve":"PYSEC-2020-117","code_chunks":["visited.device(d) = visited.constant(false);","","for (int i = 0; i < N; ++i) {","d_values(i) = grad_values(reverse_index_map(i));","visited(reverse_index_map(i)) = true;","}"],"label":1}
{"cve":"CVE-2022-37032","code_chunks":["","\/* Fetch option type and length. *\/","opt_type = *pnt++;","opt_length = *pnt++;","","\/* Option length check. *\/"],"label":1}
{"cve":"CVE-2022-2980","code_chunks":["if (!is_drag && drag_status_line)","{","drag_status_line = FALSE;","update_mouseshape(SHAPE_IDX_STATUS);","}","if (!is_drag && drag_sep_line)"],"label":1}
{"cve":"CVE-2021-45942","code_chunks":["","","int compressorMaxDataSize = std::numeric_limits<int>::max();","if (sampleCountTableDataSize > uint64_t(compressorMaxDataSize))","{","THROW (IEX_NAMESPACE::ArgExc, \"This version of the library does not \""],"label":1}
{"cve":"CVE-2022-39347","code_chunks":["return FALSE;","}","","#ifdef _WIN32","drive_file_init(file);","#endif"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["context, affine_quantization->scale->size,","filter->dims->data[affine_quantization->quantized_dimension]);","node->temporaries->data[data->input_offset_index] = data->input_offset_id;","TfLiteTensor* input_offsets ="],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int cp_sokaka_key(uint8_t *key, size_t key_len, const char *id1,","const sokaka_t k, const char *id2) {","size_t size, len1 = strlen(id1), len2 = strlen(id2);","int first = 0, result = RLC_OK;","uint8_t *buf;","g1_t p;","g2_t q;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["}","}","","TfLiteTensor* fw_output = GetOutput(context, node, kFwOutputTensor);","TfLiteIntArray* fw_output_size_array = TfLiteIntArrayCreate(3);","fw_output_size_array->data[0] = (time_major) ? max_time : batch_size;","fw_output_size_array->data[1] = (time_major) ? batch_size : max_time;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        if (*out == NULL) goto failed;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)While_type);","    if (isinstance == -1) {","        return 1;","    }"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["    node->temporaries->data[3] = op_data->scratch_tensor_index + 3;","    TfLiteTensor* accum_scratch;","    TF_LITE_ENSURE_OK(","        context, GetTemporarySafe(context, node, \/*index=*\/3, &accum_scratch));","    accum_scratch->type = kTfLiteInt32;","    accum_scratch->allocation_type = kTfLiteArenaRw;","    int accum_scratch_dims[2] = {num_units, batch_size};"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["DeviceMemoryBase grads_data, DeviceMemory<uint8_t> scratch_memory,","int ctc_loss_algo_id) {","if (CUDNN_VERSION < 7603 || element_type != dnn::DataType::kFloat) {","return tsl::Status(port::error::INVALID_ARGUMENT,","\"CudnnCtcLossDescriptor is supported only when the \"","\"CUDNN_VERSION >= 7.6.3 and DataType is float\");","}"],"label":1}
{"cve":"CVE-2017-12595","code_chunks":["                             input->getLastOffset(),","                             \"treating unexpected array close token as null\"));","                object = newNull();","\t    }","\t    break;","","\t    if (state == st_dictionary)"],"label":0}
{"cve":"CVE-2022-43995","code_chunks":["* only compare the first DESLEN characters in that case.","*\/","epass = (char *) crypt(pass, pw_epasswd);","pass[8] = sav;","if (epass != NULL) {","if (HAS_AGEINFO(pw_epasswd, pw_len) && strlen(epass) == DESLEN)","matched = !strncmp(pw_epasswd, epass, DESLEN);"],"label":1}
{"cve":"CVE-2016-10093","code_chunks":["\/*"," * Separate strips -> separate tiles."," *\/","DECLAREcpFunc(cpSeparateStrips2SeparateTiles)","{","\treturn cpImage(in, out,","\t    readSeparateStripsIntoBuffer,"],"label":0}
{"cve":"CVE-2020-5209","code_chunks":["#endif",") {","#ifdef SECURE","(void) setgid(getgid());","(void) setuid(getuid()); \/* Ron Wessels *\/","#endif"],"label":1}
{"cve":"CVE-2020-27153","code_chunks":["static void cancel_att_send_op(struct att_send_op *op)","{","if (op->destroy)","op->destroy(op->user_data);"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["    const DeviceMemory<U>& estimated_variance,","    const DeviceMemory<T>& side_input, const dnn::BatchDescriptor& x_desc,","    const dnn::BatchDescriptor& scale_offset_desc, const double epsilon,","    const double exponential_average_factor,","    dnn::ActivationMode activation_mode, DeviceMemory<T>* y,","    DeviceMemory<U>* batch_mean, DeviceMemory<U>* batch_var,","    DeviceMemory<U>* saved_mean, DeviceMemory<U>* saved_inv_var,"],"label":0}
{"cve":"CVE-2022-28068","code_chunks":["\t\t\t\t\t\t\t\tif (attribute->attr_name == DW_AT_comp_dir && is_valid_string_form) {","\t\t\tconst char *name = attribute->string.content;","\t\t\tsdb_set (sdb, \"DW_AT_comp_dir\", name, 0);","\t\t}","\t\tdie->count++;","\t}","\treturn buf;"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["  RETURN_IF_CUDNN_ERROR(cudnnGetRNNParamsSize(","      \/*handle=*\/cudnn.handle(), \/*rnnDesc=*\/rnn_desc.handle(),","      \/*xDesc=*\/input_desc.handles()[0], \/*sizeInBytes=*\/&params_size_in_bytes,","      \/*dataType=*\/rnn_desc.data_type()));","#endif","  if (static_cast<int64_t>(params_size_in_bytes) !=","      rnn_desc.ParamsSizeInBytes()) {"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["TEST(PayloadSerialization, PayloadsAreTransmitted) {","Status status = errors::InvalidArgument(\"invalid arg message\");","status.SetPayload(\"a\", \"\\\\xFF\\\\x02\\\\x03\");","Status status_recovered = FromGrpcStatus(ToGrpcStatus(status));","","ASSERT_TRUE(status_recovered.GetPayload(\"a\").has_value());"],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["    const uint64_t added_size = appendToHeader(entry->value(), buf);","    addSize(added_size);","    return;","  }","  HeaderString new_key;","  new_key.setCopy(key.get().c_str(), key.get().size());","  HeaderString new_value;"],"label":0}
{"cve":"PYSEC-2021-246","code_chunks":["while (i < a_nnz && j < b_nnz) {","switch (sparse::DimComparator::cmp(a_indices_mat, b_indices_mat, i, j,","num_dims)) {","entries_to_copy.emplace_back(true, i);","out_values.push_back(a_values(i));","++i;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["GetInput(context, node, kInputTensorBoxEncodings);","const TfLiteTensor* decoded_boxes =","&context->tensors[op_data->decoded_boxes_index];","const int num_boxes = input_box_encodings->dims->data[1];"],"label":1}
{"cve":"CVE-2020-11095","code_chunks":["if (!check_primary_order_supported(update->log, settings, orderInfo->orderType, orderName))","return FALSE;","","if (!update_read_field_flags(s, &(orderInfo->fieldFlags), flags,"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","*data->invoke_count += 1;","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const uint8_t* input_data = GetTensorData<uint8_t>(input);","int size = NumElements(input->dims);",""],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["    { \"Olympus XZ-2\", 0, 0,","      { 9777,-3483,-925,-2886,11297,1800,-602,1663,5134 } },","    { \"OmniVision\", 16, 0x3ff,","      { 12782,-4059,-379,-478,9066,1413,1340,1513,5176 } }, \/* DJC *\/","    { \"Pentax *ist DL2\", 0, 0,","      { 10504,-2438,-1189,-8603,16207,2531,-1022,863,12242 } },","    { \"Pentax *ist DL\", 0, 0,"],"label":0}
{"cve":"CVE-2016-5418","code_chunks":["\t}","","\t\/*","\t * Yes, this should be stat() and not lstat().  Using lstat()","\t * here loses the ability to extract through symlinks.  Also note","\t * that this should not use the a->st cache.","\t *\/"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["#if EP_DEPTH > 2","ep4_add(t[1], t[0], p);","for (int i = 2; i < (1 << (EP_DEPTH - 2)); i++) {","ep4_add(t[i], t[i - 1], t[0]);","}",""],"label":0}
{"cve":"CVE-2021-3772","code_chunks":["*  o no-bundle flag - instructs SCTP not to bundle this user data with","*    other outbound DATA chunks. SCTP MAY still bundle even when","*    this flag is present, when faced with network congestion.","*","*  o payload protocol-id - A 32 bit unsigned integer that is to be","*    passed to the peer indicating the type of payload protocol data"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static int test(void) {","uint8_t out[64];","size_t len = sizeof(out) \/ 2, code = RLC_ERR;","","TEST_ONCE(\"rdrand hardware generator is non-trivial\") {","memset(out, 0, 2 * len);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["GetTemporary(context, node, \/*index=*\/kZeroPoints);","zero_points->type = kTfLiteInt32;","zero_points->allocation_type = kTfLiteArenaRw;","int zero_points_dims[1] = {batch_size};"],"label":1}
{"cve":"CVE-2016-10249","code_chunks":["* Code.","\\******************************************************************************\/","","int jas_matrix_resize(jas_matrix_t *matrix, int numrows, int numcols)","{","\tint size;","\tint i;"],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["        tperror(outName);","        exitCode = XMLWF_EXIT_OUTPUT_ERROR;","        free(outName);","        XML_ParserFree(parser);","        if (continueOnError) {","          continue;","        } else {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["            handlers = _Ta3_asdl_seq_new(len, arena);","            if (handlers == NULL) goto failed;","            for (i = 0; i < len; i++) {","                excepthandler_ty val;","                res = obj2ast_excepthandler(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["int fit_check_format(const void *fit);"],"label":1}
{"cve":"PYSEC-2021-834","code_chunks":["    TF_RETURN_IF_ERROR(file->Append(sp));","  }","  TF_RETURN_IF_ERROR(file->Close());","  return Status::OK();","}","","TEST(ImmutableConstantOpTest, FromFile) {"],"label":0}
{"cve":"CVE-2018-20181","code_chunks":["\t\t\t\t\t*out = x;","\t\t\t\t\tout += 4;","\t\t\t\t\tindexw++;","\t\t\t\t\treplen--;","\t\t\t\t}","\t\t\t}","\t\t}"],"label":0}
{"cve":"CVE-2018-12561","code_chunks":["        break;","    }","    case Type_File: {","        QString path=fileFolder->text().trimmed();","        if (path.isEmpty()) {","            path=\"\/\";","        }"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["                                input->type == kTfLiteUInt8 ||","                                input->type == kTfLiteInt16);","  } else {","    TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","  }","","  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);"],"label":0}
{"cve":"CVE-2021-3622","code_chunks":["_get_children (hive_h *h, hive_node_h blkoff,","offset_list *children, offset_list *blocks,","int flags)","{","\/* Add this intermediate block. *\/","if (_hivex_add_to_offset_list (blocks, blkoff) == -1)"],"label":1}
{"cve":"CVE-2017-11462","code_chunks":["d_cred ? &tmp_d_cred : NULL);","","\/* If there's more work to do, keep going... *\/","if (status == GSS_S_CONTINUE_NEEDED)","return GSS_S_CONTINUE_NEEDED;","","\/* if the call failed, return with failure *\/"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"],"label":1}
{"cve":"CVE-2022-1238","code_chunks":["\t\treturn NULL;","\t}","\tRBinAddr *entry;","\tRList *segments = r_bin_ne_get_segments (bin);","\tif (!segments) {","\t\tr_list_free (entries);","\t\treturn NULL;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteNode* node) {","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input = tflite::GetInput(context, node, kInputTensor);","if (input->type != kTfLiteUInt8) return kTfLiteError;","if (NumElements(input->dims) == 0) return kTfLiteError;",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  const TfLiteTensor* bias = has_bias ? GetInput(context, node, 2) : nullptr;","  TfLiteTensor* im2col =","      data->need_im2col","          ? &context->tensors[node->temporaries->data[data->im2col_index]]","          : nullptr;","  TfLiteTensor* hwcn_weights =","      data->need_hwcn_weights"],"label":0}
{"cve":"CVE-2018-20406","code_chunks":["_Unpickler_ResizeMemoList(UnpicklerObject *self, Py_ssize_t new_size)","{","Py_ssize_t i;","","assert(new_size > self->memo_size);",""],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["break;","","","{ if (yang_read_extcomplex_str(trg, ext_instance, \"prefix\", ext_name, s,","0, LY_STMT_PREFIX)) {","YYABORT;","}"],"label":1}
{"cve":"CVE-2021-42782","code_chunks":["","while (len != 0) {","p = sc_asn1_find_tag(card->ctx, p, len, 0xe1, &tlen);","if (p == NULL)","return 0;","q = sc_asn1_find_tag(card->ctx, p, tlen, 0x01, &ilen);"],"label":1}
{"cve":"CVE-2018-8799","code_chunks":["\ts = iso_recv(&is_fastpath, &fastpath_hdr);","","\tif (s == NULL)","\t\treturn False;","\t","\tpacket = *s;",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["          TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","          const int input_dims_size = input1->dims->size;","          TF_LITE_ENSURE(context, output->dims->size == input_dims_size);","          for (int i = 0; i < input_dims_size; ++i) {","            TF_LITE_ENSURE(context,","                           output->dims->data[i] == input1->dims->data[i]);","          }"],"label":0}
{"cve":"CVE-2023-46728","code_chunks":["return;","} else if (state->sentry->checkDeferRead(-1)) {","state->sentry->flush();","eventAdd(\"statObjects\", statObjects, state, 0.1, 1);","return;","}"],"label":1}
{"cve":"CVE-2019-20392","code_chunks":["} else {","trg_mod = lys_node_module(parent);","}","rc = lys_getnext_data(trg_mod, context_node, source, sour_len, LYS_LEAF | LYS_LEAFLIST, &src_node);","if (rc) {","LOGVAL(ctx, LYE_NORESOLV, LY_VLOG_LYS, parent, \"leafref predicate\", path-parsed);","return 0;"],"label":1}
{"cve":"CVE-2022-35970","code_chunks":["    OP_REQUIRES_OK(ctx, ctx->allocate_output(1, TensorShape({}), &output_min));","    Tensor* output_max = nullptr;","    OP_REQUIRES_OK(ctx, ctx->allocate_output(2, TensorShape({}), &output_max));","","    OP_REQUIRES(","        ctx, requested_output_min_float <= 0.0f,","        errors::InvalidArgument(\"requested_output_min must be <= 0, but got \","],"label":0}
{"cve":"CVE-2022-35971","code_chunks":["","AddInputFromArray<qint32>(TensorShape({value_count}),","{-(1 << 23), 0, (1 << 23)});","AddInputFromArray<float>(TensorShape({1}), {-256.0f});","AddInputFromArray<float>(TensorShape({1}), {256.0f});"],"label":1}
{"cve":"CVE-2021-44108","code_chunks":["                status = OGS_SBI_HTTP_STATUS_ACCEPTED;","                N1N2MessageTransferRspData.cause =","                    OpenAPI_n1_n2_message_transfer_cause_ATTEMPTING_TO_REACH_UE;","","                \/* Location *\/","                server = ogs_sbi_server_from_stream(stream);","                ogs_assert(server);"],"label":0}
{"cve":"CVE-2020-35538","code_chunks":["{","my_main_ptr main_ptr = (my_main_ptr)cinfo->main;","my_coef_ptr coef = (my_coef_ptr)cinfo->coef;","my_master_ptr master = (my_master_ptr)cinfo->master;","JDIMENSION i, x;","int y;","JDIMENSION lines_per_iMCU_row, lines_left_in_iMCU_row, lines_after_iMCU_row;"],"label":0}
{"cve":"CVE-2018-8796","code_chunks":["x = CVAL(in);","if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["\"Underscores in numeric literals are only supported in Python 3.6 and greater\");","return NULL;","}","pynum = parsenumber(c, s);","if (!pynum)","return NULL;",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["        op_data->scratch_tensor_index + kOutputStateZeroPoints;","    TfLiteTensor* output_state_zp;","    TF_LITE_ENSURE_OK(context,","                      GetTemporarySafe(context, node, kOutputStateZeroPoints,","                                       &output_state_zp));","    output_state_zp->type = kTfLiteFloat32;","    output_state_zp->allocation_type = kTfLiteArenaRw;"],"label":0}
{"cve":"CVE-2019-13454","code_chunks":["  *\/","  else","    while ( source != (Image *) NULL && destination != (Image *) NULL )","    {","      CompositeCanvas(destination, compose, source, x_offset, y_offset,","        exception);","      source=GetNextImageInList(source);"],"label":0}
{"cve":"PYSEC-2021-568","code_chunks":["        OP_REQUIRES(c,","                updates.dims() == 0 ||","                    updates.dims() == indices.dims() + params->dims() - 1,","                errors::InvalidArgument(","                    \"Must have updates.shape = indices.shape + \"","                    \"params.shape[1:] or updates.shape = [], got \",","                    \"updates.shape \", updates.shape().DebugString(),"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["                                       &output_state_zp));","    output_state_zp->type = kTfLiteFloat32;","    output_state_zp->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqualsArray(output_state_zp->dims, 1, scaling_dims)) {","      TfLiteIntArray* output_state_zp_size = TfLiteIntArrayCreate(1);","      output_state_zp_size->data[0] = n_batch;","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, output_state_zp,"],"label":0}
{"cve":"PYSEC-2022-136","code_chunks":["const std::vector<ShapeHandle>& input_tensors_as_shapes) {","const auto ret = full_type::SpecializeType(attrs_, op_def);","if (!ret.status().ok()) {","construction_status_ = ret.status();","return;","}"],"label":0}
{"cve":"CVE-2018-20177","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2017-3733","code_chunks":["EVP_MD_CTX_free(hmac);","return -1;","}","if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())","if (!tls_fips_digest_extra(ssl->enc_read_ctx,","mac_ctx, rec->input,","rec->length, rec->orig_len)) {"],"label":1}
{"cve":"CVE-2023-22742","code_chunks":["","\tptr = list;","\twhile (ptr) {","\t\tif (*ptr == ',')","\t\t\tptr++;","","\t\tif (!git__prefixcmp(ptr, SSH_AUTH_PUBLICKEY)) {"],"label":0}
{"cve":"CVE-2023-22742","code_chunks":["\tssh_subtransport *t,","\tconst char *url,","\tgit_smart_subtransport_stream **stream)","{","\tGIT_UNUSED(url);","","\tif (t->current_stream) {"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"SetComp field \\\"generators\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(generators, i, val);","            }"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\tRLC_THROW(ERR_CAUGHT);","\t\t}","\t\tRLC_FINALLY {","\t\t\tbn_free(n);","\t\t\tbn_free(u);","\t\t\tfor (int i = 0; i < 4; i++) {","\t\t\t\tbn_free(_b[i]);"],"label":0}
{"cve":"CVE-2023-1801","code_chunks":["char time_buf[128];","","tm = localtime(&seconds);","strftime(time_buf, sizeof (time_buf), \"%Y\/%m\/%d %H:%M:%S\", tm);","ND_PRINT(\" (%s)\", time_buf);","}"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["if (length <= 0) {","raise_warning(\"The length must be greater than zero\");","return make_tv<KindOfBoolean>(false);","}","","if (offset < 0) {","offset = s1_len + offset;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* cond_tensor =","GetInput(context, node, kInputConditionTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["}","","return scratch_allocator->AllocateBytes(size_in_bytes);","}","","tsl::StatusOr<bool> UseTensorOps(Stream* stream, dnn::DataType type,"],"label":1}
{"cve":"PYSEC-2020-283","code_chunks":["        OP_REQUIRES(ctx, precision < 0,","                    errors::InvalidArgument(\"precision not supported \"","                                            \"for datatype \",","                                            DataTypeString(dtype)));","    }","    OP_REQUIRES(","        ctx, fill_string.size() <= 1,"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["                asdl_seq_SET(ifs, j, expression);","                if (NCH(n) == 3)","                    n = CHILD(n, 2);","            }","            \/* on exit, must guarantee that n is a comp_for *\/","            if (TYPE(n) == comp_iter)","                n = CHILD(n, 0);"],"label":0}
{"cve":"CVE-2021-41220","code_chunks":["                             {0}, 0, col_params->instance.shape, &output),","                         done_with_cleanup);","    Run(c, col_params, std::move(done_with_cleanup));","  }","","  std::unique_ptr<OpKernel> merge_op_;","  std::unique_ptr<OpKernel> final_op_;"],"label":0}
{"cve":"CVE-2021-3996","code_chunks":["fputs(_(\" -b, --bytes            print sizes in bytes rather than in human readable format\\n\"), out);","fputs(_(\" -C, --nocanonicalize   don't canonicalize when comparing paths\\n\"), out);","fputs(_(\" -c, --canonicalize     canonicalize printed paths\\n\"), out);","fputs(_(\"     --deleted          print filesystems with mountpoint marked as deleted\\n\"), out);","fputs(_(\" -D, --df               imitate the output of df(1)\\n\"), out);","fputs(_(\" -d, --direction <word> direction of search, 'forward' or 'backward'\\n\"), out);","fputs(_(\" -e, --evaluate         convert tags (LABEL,UUID,PARTUUID,PARTLABEL) \\n\""],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["            PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from Await\");","            return 1;","        }","        else {","            int res;","            res = obj2ast_expr(tmp, &value, arena);","            if (res != 0) goto failed;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      TF_LITE_ENSURE_OK(","          context, context->ResizeTensor(context, fw_activation_state_quantized,","                                         fw_activation_state_quantized_size));","    }","    node->temporaries->data[kBwActivationStateQuantized] =","        op_data->scratch_tensor_index + kBwActivationStateQuantized;","    TfLiteTensor* bw_activation_state_quantized;"],"label":0}
{"cve":"CVE-2022-3996","code_chunks":["    POLICY_MAPPING *map;","    X509_POLICY_DATA *data;","    X509_POLICY_CACHE *cache = x->policy_cache;","    int i;","    int ret = 0;","    if (sk_POLICY_MAPPING_num(maps) == 0) {","        ret = -1;"],"label":0}
{"cve":"CVE-2019-13220","code_chunks":["         return 1;       } else if (f->current_loc + frame_samples + max_frame_samples > sample_number) {","                  vorbis_pump_first_frame(f);","      } else {","                  f->current_loc += frame_samples;","         f->previous_length = 0;","         maybe_start_packet(f);","         flush_packet(f);"],"label":0}
{"cve":"CVE-2018-20457","code_chunks":["int i, j;","char buf[128];","ArmOpcode aop = {.off = off};","for (i = j = 0; i < sizeof (buf) - 1 && str[i]; i++, j++) {","if (str[j] == '#') {","i--; continue;","}"],"label":1}
{"cve":"CVE-2018-8099","code_chunks":["for (i = 0; i < header.entry_count && buffer_size > INDEX_FOOTER_SIZE; ++i) {","git_index_entry *entry = NULL;","size_t entry_size = read_entry(&entry, index, buffer, buffer_size, last);","","\/* 0 bytes read means an object corruption *\/","if (entry_size == 0) {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["        if (!tmp)","            return NULL;","","        tmp_result = BinOp(result, newoperator, tmp,","                           LINENO(next_oper), next_oper->n_col_offset,","                           CHILD(n, i * 2 + 2)->n_end_lineno,","                           CHILD(n, i * 2 + 2)->n_end_col_offset,"],"label":0}
{"cve":"CVE-2021-40145","code_chunks":["gdIOCtx *out = gdNewDynamicCtx (2048, NULL);","if (out == NULL) return NULL;","","if (_gdImageGd2(im, out, cs, fmt)) {","rv = NULL;","} else {"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["int utf8_strwidth(const char *string)","{","return utf8_strnwidth(string, -1, 0);","}","","int is_utf8(const char *text)"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["static int item_length(const char *s)","{","return utf8_strnwidth(s, -1, 1);","}","","\/*"],"label":1}
{"cve":"CVE-2019-13297","code_chunks":["  }","  threshold_view=DestroyCacheView(threshold_view);","  image_view=DestroyCacheView(image_view);","  if (status == MagickFalse)","    threshold_image=DestroyImage(threshold_image);","  return(threshold_image);","}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp54_exp_cyc_sps(fp54_t c, const fp54_t a, const int *b, size_t len,","int sign) {","size_t i, j, k, w = len;","fp54_t t, *u = RLC_ALLOCA(fp54_t, w);","","if (len == 0) {"],"label":0}
{"cve":"PYSEC-2016-5","code_chunks":["char *filename = \"tempfile.tif\";","char *mode = \"r\";","TIFF *tiff;","int size;","","","\/* buffer is the encoded file, bytes is the length of the encoded file *\/"],"label":1}
{"cve":"CVE-2018-20457","code_chunks":["\t\tbuf[i] = tolower ((const ut8)str[j]);","\t}","\tbuf[i] = 0;","\tarm_opcode_parse (&aop, buf);","\taop.off = off;","\tif (thumb < 0 || thumb > 1) {","\t\treturn -1;"],"label":0}
{"cve":"CVE-2017-12643","code_chunks":["magn_first=(p[0] << 8) | p[1];","","else","magn_first=0;","","if (length > 3)"],"label":1}
{"cve":"PYSEC-2021-568","code_chunks":["","if (N > 0) {","auto indices_flat = indices.flat<Index>();","auto params_flat = params->flat_outer_dims<T>();","if (TensorShapeUtils::IsScalar(updates.shape())) {","const auto update = updates.scalar<T>();"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["input->type == kTfLiteInt16) {","node->temporaries->data[data->scratch_tensor_index] =","data->scratch_tensor_id;","TfLiteTensor* scratch_buffer ="],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TF_LITE_ENSURE(context, NumDimensions(input) >= 2);","if (input->type != kTfLiteFloat32) {"],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["            return ret;","    }","    return size;","}","","static int http_shutdown(URLContext *h, int flags)","{"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp12_write_bin(uint8_t *bin, size_t len, const fp12_t a, int pack) {","fp12_t t;","","fp12_null(t);"],"label":0}
{"cve":"CVE-2016-5356","code_chunks":["if (pkt_len == -1)","return FALSE;","","\/* Convert the ASCII hex dump to binary data *\/","return parse_cosine_hex_dump(wth->fh, &wth->phdr, pkt_len,","wth->frame_buffer, err, err_info);","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const int scratch_dimension[2] = {n_batch, n_cell};","if (!TfLiteIntArrayEqualsArray(scratch_tensor->dims, 2,","scratch_dimension)) {","TfLiteIntArray* scratch_buffer_size = TfLiteIntArrayCreate(2);","scratch_buffer_size->data[0] = n_batch;","scratch_buffer_size->data[1] = n_cell;"],"label":1}
{"cve":"CVE-2016-6875","code_chunks":["    find_var_recursive(tv, wddxPacket);","  }","  Variant packet = wddxPacket->packet_end();","  return arReturn(ar, std::move(packet));","}","",""],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["        return 1;","    }","    if (isinstance) {","","        *out = Continue(lineno, col_offset, arena);","        if (*out == NULL) goto failed;","        return 0;"],"label":0}
{"cve":"CVE-2020-12279","code_chunks":["\ttest_checkout_passes(\"refs\/heads\/symlink2\", \".git\/foobar\");","}","","void test_checkout_nasty__symlink3(void)","{","\ttest_checkout_passes(\"refs\/heads\/symlink3\", \".git\/foobar\");","}"],"label":0}
{"cve":"CVE-2019-16163","code_chunks":["      if (IS_NULL(*headp)) {","        onig_node_free(node);","        onig_node_free(*top);","        return ONIGERR_MEMORY;","      }","","      headp = &(NODE_CDR(*headp));"],"label":0}
{"cve":"CVE-2022-0521","code_chunks":["R_API RBinJavaAnnotation *r_bin_java_annotation_new(ut8 *buffer, ut64 sz, ut64 buf_offset) {","ut32 i = 0;","RBinJavaAnnotation *annotation = NULL;","RBinJavaElementValuePair *evps = NULL;","ut64 offset = 0;","annotation = R_NEW0 (RBinJavaAnnotation);"],"label":1}
{"cve":"CVE-2019-15165","code_chunks":["if (amt_read == 0 && !fail_on_eof)","return (0);\t\/* EOF *\/","pcap_snprintf(errbuf, PCAP_ERRBUF_SIZE,","\"truncated dump file; tried to read %\" PRIsize \" bytes, only got %\" PRIsize,","bytes_to_read, amt_read);","}","return (-1);"],"label":1}
{"cve":"CVE-2023-39355","code_chunks":["rawHeights[0] = nSrcHeight;","rawSizes[1] = planeSize; \/* OrangeChromaOrGreenPlane *\/","rawWidths[1] = nSrcWidth;","rawHeights[1] = nSrcHeight;","rawSizes[2] = planeSize; \/* GreenChromaOrBluePlane *\/","rawWidths[2] = nSrcWidth;"],"label":1}
{"cve":"CVE-2021-41204","code_chunks":["return unique_constant_id.fetch_add(1);","}","","void AddNodeToConstantGraph(","Node* n, std::unordered_map<Node*, std::vector<Node*>>* node_map,","Graph* constant_graph) {"],"label":1}
{"cve":"PYSEC-2021-847","code_chunks":["done);","OP_REQUIRES_ASYNC(","context, input.dim_size(ndims - 2) == n,","errors::InvalidArgument(\"Input matrices must be squares, got\",","input.dim_size(ndims - 2), \" != \", n),","done);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["return Py_None;","}","","result = PyType_GenericNew(comprehension_type, NULL, NULL);"],"label":1}
{"cve":"CVE-2019-20911","code_chunks":["next = dwg_next_object (ref->obj);","if (next && next->fixedtype == DWG_TYPE_SEQEND)","{","seqend = dwg_find_objectref (dwg, next);","if (seqend == NULL)","{"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t}","\tif (SHA224Input(&ctx, msg, len) != shaSuccess) {","\t\tRLC_THROW(ERR_NO_VALID);","\t\treturn;","\t}","\tif (SHA224Result(&ctx, hash) != shaSuccess) {","\t\tRLC_THROW(ERR_NO_VALID);"],"label":0}
{"cve":"CVE-2022-29694","code_chunks":["}","","","QLIST_REMOVE_RCU(block, next);","uc->ram_list.mru_block = NULL;","\/* Write list before version *\/","reclaim_ramblock(uc, block);"],"label":0}
{"cve":"CVE-2022-1207","code_chunks":["if (len > 5) {","st32 delta = buf[2];","delta |= buf[3]<<8;","delta |= buf[4]<<16;","delta |= buf[5]<<24;","op->jump = addr + delta;"],"label":1}
{"cve":"CVE-2018-20175","code_chunks":["uint32 length;","struct stream packet = *s;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","","if (!s_check_rem(s, length))"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["\t*arg = (char_u *)\"\";","","    if (!evaluate)","    {","\tret = OK;","\tgoto erret;","    }"],"label":0}
{"cve":"CVE-2018-7254","code_chunks":["CAFAudioFormat caf_audio_format;","int i;","","infilesize = DoGetFileSize (infile);","memcpy (&caf_file_header, fourcc, 4);",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    }","","    TF_LITE_ENSURE_EQ(context, weights->quantization.type,","                      kTfLiteAffineQuantization);","    const auto* affine_quantization =","        reinterpret_cast<TfLiteAffineQuantization*>(","            weights->quantization.params);"],"label":0}
{"cve":"CVE-2020-27153","code_chunks":["","if (op->callback)","op->callback(rsp_opcode, rsp_pdu, rsp_pdu_len, op->user_data);","","destroy_att_send_op(op);","chan->pending_req = NULL;"],"label":1}
{"cve":"CVE-2021-3610","code_chunks":["              {","                TIFFClose(tiff);","                image=DestroyImageList(image);","                return((Image *) NULL);","              }","            AcquireNextImage(image_info,image,exception);","            if (GetNextImageInList(image) == (Image *) NULL)"],"label":0}
{"cve":"CVE-2021-3331","code_chunks":["{","  std::unique_ptr<TSessionData> Result(new TSessionData(L\"\"));","","  TSessionData * SameData = StoredSessions->FindSame(Data);","  if (SameData != NULL)","  {","    Result->CopyStateData(Data);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["return Py_None;","}","","result = PyType_GenericNew(comprehension_type, NULL, NULL);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void ep_write_bin(uint8_t *bin, int len, const ep_t a, int pack);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* shape = GetInput(context, node, kShape);","","switch (updates->type) {","break;"],"label":1}
{"cve":"CVE-2016-0775","code_chunks":["\/* COPY chunk *\/","for (y = 0; y < state->ysize; y++) {","UINT8* buf = (UINT8*) im->image[y];","memcpy(buf+x, data, state->xsize);","data += state->xsize;","}","break;"],"label":1}
{"cve":"CVE-2017-12475","code_chunks":["inspector.AddField(\"Level\", m_Level);","inspector.AddField(\"NALU Length Size\", m_NaluLengthSize);","for (unsigned int i=0; i<m_SequenceParameters.ItemCount(); i++) {","inspector.AddField(\"Sequence Parameter\", m_SequenceParameters[i].GetData(), m_SequenceParameters[i].GetDataSize());","}","for (unsigned int i=0; i<m_SequenceParameters.ItemCount(); i++) {"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["char tmp[128];","pj_size_t nwritten;","","pj_lock_acquire(ds->ossl_lock);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["","\t\tRLC_TRY {","\t\t\tif (u == NULL) {","\t\t\t\tRLC_THROW(ERR_NO_MEMORY);","\t\t\t}","\t\t\tfor (size_t i = 0; i < w; i++) {","\t\t\t\tfp24_null(u[i]);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(body, i, value);","}","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2021-21375","code_chunks":["unsigned oi; \/* old offer media index *\/","pj_status_t status;","","\/* Check arguments are valid. *\/","PJ_ASSERT_RETURN(pool && neg && local, PJ_EINVAL);",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","BYTE bitmapCacheV3CodecId;","","WINPR_UNUSED(settings);","if (Stream_GetRemainingLength(s) < 1)","return FALSE;"],"label":0}
{"cve":"CVE-2023-45898","code_chunks":["\t\t\t\tes = right_es;","\t\t\t} else {","\t\t\t\tnode = rb_next(&right_es->rb_node);","\t\t\t\tes = node ? rb_entry(node, struct extent_status,","\t\t\t\t\t\t     rb_node) : NULL;","\t\t\t}","\t\t\twhile (es && es->es_lblk <="],"label":0}
{"cve":"CVE-2021-38201","code_chunks":["len -= this_len;","obj += this_len;","this_len = min_t(unsigned int, len, subbuf->page_len);","_copy_from_pages(obj, subbuf->pages, subbuf->page_base, this_len);","len -= this_len;","obj += this_len;"],"label":1}
{"cve":"PYSEC-2020-306","code_chunks":["        TFE_Executor* exc = TFE_NewExecutor(is_async);","        return exc;","      },","      py::return_value_policy::reference);","  m.def(\"TFE_DeleteExecutor\", &TFE_DeleteExecutor);","  m.def(\"TFE_ExecutorIsAsync\", &TFE_ExecutorIsAsync);","  m.def(\"TFE_ExecutorWaitForAllPendingNodes\", [](TFE_Executor& exc) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["}","return nullptr;","}"],"label":0}
{"cve":"PYSEC-2021-843","code_chunks":["                              OP_REQUIRES_ASYNC(context, host_infos[0].data()[i] <= 0,","                            errors::InvalidArgument(kErrMsg), done);","        }","      }","      OP_REQUIRES_OK_ASYNC(context, status, done);","      done();","    };"],"label":0}
{"cve":"CVE-2023-4756","code_chunks":["}","}","if (!parser->line_size) {","if (!gf_gzeof(parser->gz_in)) gf_bt_check_line(parser);","else parser->done = 1;"],"label":1}
{"cve":"PYSEC-2021-259","code_chunks":["for (auto& component : element) {","if (DataTypeCanUseMemcpy(component.dtype())) {","const TensorBuffer* buffer = DMAHelper::buffer(&component);","if (buffer) {","total_size += buffer->size();","}"],"label":0}
{"cve":"CVE-2018-25032","code_chunks":["","Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",","opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,","s->last_lit));","","if (static_lenb <= opt_lenb) opt_lenb = static_lenb;",""],"label":1}
{"cve":"CVE-2016-4564","code_chunks":["const PrimitiveInfo *primitive_info)","{","typedef struct _LineSegment","{","double","p,"],"label":0}
{"cve":"CVE-2023-5217","code_chunks":["if (!IsVP9(iface)) {","\"after VP8 is fixed.\";","}"],"label":1}
{"cve":"CVE-2019-25050","code_chunks":["return alloc;","}","","char attr_vals[NC_MAX_NAME + 1];","memset(attr_vals, 0, NC_MAX_NAME + 1);",""],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["WLog_INFO(TAG, \"MultifragmentUpdateCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 8)","return FALSE;","","Stream_Read_UINT32(s, maxRequestSize); \/* maxRequestSize (4 bytes) *\/"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["if (IsDynamicTensor(output)) {","has_dynamic_output_tensors = true;","break;","}","}",""],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\treturn FALSE;","","\tStream_Read_UINT8(s, cacheVersion); \/* cacheVersion (1 byte) *\/","\tStream_Read_UINT8(s, pad1);         \/* pad1 (1 byte) *\/","\tStream_Read_UINT16(s, pad2);        \/* pad2 (2 bytes) *\/","\tWLog_INFO(TAG, \"\\tcacheVersion: 0x%02\" PRIX8 \"\", cacheVersion);","\tWLog_INFO(TAG, \"\\tpad1: 0x%02\" PRIX8 \"\", pad1);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* shape = GetInput(context, node, kShape);","","switch (updates->type) {","break;"],"label":1}
{"cve":"CVE-2022-39347","code_chunks":["\t\t\tStream_Write_UINT32(output, file->find_data.nFileSizeHigh);    \/* AllocationSize *\/","\t\t\tStream_Write_UINT32(output, file->find_data.dwFileAttributes); \/* FileAttributes *\/","\t\t\tStream_Write_UINT32(output, (UINT32)length);                   \/* FileNameLength *\/","\t\t\tStream_Write(output, file->find_data.cFileName, length);","\t\t\tbreak;","",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params =","reinterpret_cast<TfLiteSpaceToDepthParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["if (*ref_lookup_response.entry_ == nullptr) {","maybeCreateInline(ref_lookup_response.entry_, *ref_lookup_response.key_, std::move(value));","} else {","appendToHeader((*ref_lookup_response.entry_)->value(), value.getStringView());","value.clear();","}","} else {"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["void CLASS rollei_load_raw()","{","uchar pixel[10];","unsigned iten=0, isix, i, buffer=0, todo[16];","","isix = raw_width * raw_height * 5 \/ 8;","while (fread (pixel, 1, 10, ifp) == 10) {"],"label":1}
{"cve":"CVE-2020-15192","code_chunks":["return nullptr;","}","","auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);","if (!status->status.ok()) {","return nullptr;"],"label":0}
{"cve":"CVE-2021-29592","code_chunks":["TF_LITE_ENSURE_STATUS(EnsureTensorDataIsReadable(tensor_index));","}","if (tensor->data.raw == nullptr && tensor->bytes > 0) {","if (registration.builtin_code == kTfLiteBuiltinReshape && i == 1) {","continue;","} else {","ReportError(\"Input tensor %d lacks data\", tensor_index);"],"label":1}
{"cve":"CVE-2022-43286","code_chunks":["    switch (space->type) {","        length = njs_string_prop(&prop, space);","","        if (njs_is_byte_string(&prop)) {","            njs_internal_error(vm, \"space argument cannot be\"","                               \" a byte string\");","            return NJS_ERROR;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {"],"label":1}
{"cve":"CVE-2024-0727","code_chunks":["","PKCS7 *SMIME_read_PKCS7_ex(BIO *bio, BIO **bcont, PKCS7 **p7)","{","    PKCS7 *ret;","    OSSL_LIB_CTX *libctx = NULL;","    const char *propq = NULL;",""],"label":0}
{"cve":"CVE-2021-32785","code_chunks":["}","","static int oidc_cache_redis_destroy(server_rec *s) {","\toidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(s->module_config,","\t\t\t&auth_openidc_module);","\toidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t *) cfg->cache_cfg;",""],"label":0}
{"cve":"PYSEC-2021-748","code_chunks":["    component.shape().AsProto(metadata->mutable_tensor_shape());","    if (DataTypeCanUseMemcpy(component.dtype())) {","      const TensorBuffer* buffer = DMAHelper::buffer(&component);","      if (buffer) {","        memcpy(position, buffer->data(), buffer->size());","        metadata->set_tensor_size_bytes(buffer->size());","      }"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t} else {","\t\t\t\tfp24_copy(t[0], a);","","\t\t\t\tfor (int i = bn_bits(b) - 2; i >= 0; i--) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["}","node->temporaries->data[kAccumScratch] =","op_data->scratch_tensor_index + kAccumScratch;","TfLiteTensor* accum_scratch = GetTemporary(context, node, kAccumScratch);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {std::max(fw_num_units, bw_num_units),"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["oidset_iter_init(&options->gitmodules_found, &iter);","while ((oid = oidset_iter_next(&iter))) {","enum object_type type;","unsigned long size;","char *buf;",""],"label":1}
{"cve":"CVE-2020-23932","code_chunks":["}","gf_isom_sdp_get(file, &sdp, &size);","fprintf(dump, \"%s\", sdp);","fprintf(dump, \"\\r\\n\");","","for (i=0; i<gf_isom_get_track_count(file); i++) {"],"label":1}
{"cve":"CVE-2022-0156","code_chunks":["else","{","ga_init2(&values, sizeof(bval_T), 20);","bartype = getdigits(&p);","switch (bartype)","{"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["if(len<1) return;   string[len-1]=0;","if(len<3) return;   len = strnlen(string,len-1);","for(int i=len-1; i>=0; i--)","{","if(isspace(string[i]))","string[i]=0;"],"label":1}
{"cve":"PYSEC-2022-148","code_chunks":["if (width != static_cast<int64_t>(decode.width) || width <= 0 ||","width >= (1LL << 27) || height != static_cast<int64_t>(decode.height) ||","height <= 0 || height >= (1LL << 27) || total_size >= (1LL << 29)) {","png::CommonFreeDecode(&decode);","OP_REQUIRES(context, false,","errors::InvalidArgument(\"PNG size too large for int: \",","decode.width, \" by \", decode.height));"],"label":1}
{"cve":"CVE-2021-37637","code_chunks":["      tstring uncompressed;","  uncompressed.resize_uninitialized(total_size);","    char* position = uncompressed.mdata();","  int non_memcpy_component_index = 0;","  for (auto& component : element) {","    CompressedComponentMetadata* metadata =","        out->mutable_component_metadata()->Add();"],"label":0}
{"cve":"CVE-2023-28486","code_chunks":["    }","","    debug_return_bool(true);","","    sudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));","    debug_return_bool(false);","}"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["","if (!iconInfo->colorTable)","return FALSE;","}","}","else if (iconInfo->cbColorTable)"],"label":1}
{"cve":"CVE-2022-0521","code_chunks":["ut32 i = 0;","ut64 offset = 0, curpos;","if (sz < 8) {","return NULL;","}","RBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);"],"label":0}
{"cve":"CVE-2018-14880","code_chunks":["               EXTRACT_16BITS(&lshp->ls_length)-(u_int)sizeof(struct lsa6_hdr)));","","\tospf6_print_ls_type(ndo, EXTRACT_16BITS(&lshp->ls_type), &lshp->ls_stateid);","","\treturn (0);","\treturn (1);","}"],"label":0}
{"cve":"CVE-2018-5810","code_chunks":["{","if(len<1) return;   string[len-1]=0;","if(len<3) return;   len = strnlen(string,len-1);","for(int i=len-1; i>=0; i--)","{","if(isspace(string[i]))"],"label":1}
{"cve":"CVE-2020-35534","code_chunks":["if (!img->tiles)","{","img->tiles = (CrxTile *)","#ifdef LIBRAW_CR3_MEMPOOL","img->memmgr.","#endif"],"label":0}
{"cve":"CVE-2021-3770","code_chunks":["{","int *oldarray = curbuf->b_p_vts_array;","","if (tabstop_set(*varp, &(curbuf->b_p_vts_array)))","{","vim_free(oldarray);","#ifdef FEAT_FOLDING"],"label":1}
{"cve":"CVE-2022-39347","code_chunks":["\t\t\tStream_Write_UINT32(output, 0);                                \/* EaSize *\/","\t\t\tStream_Write_UINT8(output, 0);                                 \/* ShortNameLength *\/","\t\t\t\/* Reserved(1), MUST NOT be added! *\/","\t\t\tStream_Zero(output, 24); \/* ShortName *\/","\t\t\tStream_Write(output, file->find_data.cFileName, length);","\t\t\tbreak;",""],"label":0}
{"cve":"CVE-2016-9388","code_chunks":["","\tfor (y = 0; y < hdr->height; y++) {","\t\tfor (i = 0; i < numcmpts; ++i) {","\t\t\tif (jas_image_readcmpt(image, cmpts[i], 0, y,","\t\t\t\t\tjas_image_width(image), 1, data[i])) {","\t\t\t\tgoto error;","\t\t\t}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["      TileString(*(input->dims), input, multipliers, &buffer, output);","      buffer.WriteToTensor(output, \/*new_shape=*\/nullptr);","      break;","    }","      Tile<bool>(*(input->dims), input, multipliers, output);","      break;","      context->ReportError(context, \"Type '%s' is not supported by tile.\","],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["                         TfLiteTypeGetName(input0->type));","    return kTfLiteError;","  }","    for (int i = 1; i < data->values_count; ++i) {","    const TfLiteTensor* input;","    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, i, &input));","    TF_LITE_ENSURE(context, HaveSameShapes(input0, input));"],"label":0}
{"cve":"CVE-2021-3772","code_chunks":["*\/","if (SCTP_ADDR_DEL ==","sctp_bind_addr_state(&asoc->base.bind_addr, &chunk->dest))","return sctp_sf_discard_chunk(net, ep, asoc, type, arg, commands);","","if (!sctp_err_chunk_valid(chunk))","return sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);"],"label":1}
{"cve":"CVE-2018-8800","code_chunks":["x = CVAL(in);","if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["                       \"No scratch allocator provided\");","  }","","  return scratch_allocator->AllocateBytes(size_in_bytes);","}","","tsl::StatusOr<DeviceMemory<uint8_t>>"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp4_write_bin(uint8_t *bin, int len, const fp4_t a) {","if (len != 4 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":1}
{"cve":"CVE-2016-4564","code_chunks":["*path_p,","*path_q;","","PrimitiveInfo","*polygon_primitive,","*stroke_polygon;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\trdpRdp* rdp = client->context->rdp;","","\tswitch (rdp->state)","\t{","\t\t\tif (!rdp_server_accept_nego(rdp, s))","\t\t\t{","\t\t\t\tWLog_ERR(TAG, \"%s: %s - rdp_server_accept_nego() fail\", __FUNCTION__,"],"label":0}
{"cve":"CVE-2016-10167","code_chunks":["{","gdImagePtr src, dst;","FILE *fp;","int black;","char *path;",""],"label":0}
{"cve":"PYSEC-2021-261","code_chunks":["","    std::unique_ptr<checkpoint::TensorSliceReader> allocated_reader;","","  const checkpoint::TensorSliceReader* reader = nullptr;","","  if (context->slice_reader_cache()) {","    reader = context->slice_reader_cache()->GetReader(file_pattern, open_func,"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* input_weights;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","const TfLiteTensor* recurrent_weights;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2017-14638","code_chunks":["","if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;","atom = AP4_HvccAtom::Create(size_32, stream);","atom->SetType(AP4_ATOM_TYPE_HVCE);","break;"],"label":1}
{"cve":"CVE-2018-5804","code_chunks":["{  3370752,1232, 912, 0, 0,16, 0, 0,0x00,0,0,\"Kodak\",\"C330\" },","{  6163328,2864,2152, 0, 0, 0, 0, 0,0x94,0,0,\"Kodak\",\"C603\" },","{  6166488,2864,2152, 0, 0, 0, 0, 0,0x94,0,0,\"Kodak\",\"C603\",3160 },","{   460800, 640, 480, 0, 0, 0, 0, 0,0x00,0,0,\"Kodak\",\"C603\" },","{  9116448,2848,2134, 0, 0, 0, 0, 0,0x00,0,0,\"Kodak\",\"C603\" },","{ 12241200,4040,3030, 2, 0, 0,13, 0,0x49,0,0,\"Kodak\",\"12MP\" },"],"label":1}
{"cve":"CVE-2019-13297","code_chunks":["threshold_image=CloneImage(image,0,0,MagickTrue,exception);","if (threshold_image == (Image *) NULL)","return((Image *) NULL);","if (width == 0)","return(threshold_image);","if (SetImageStorageClass(threshold_image,DirectClass) == MagickFalse)","{"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"PYSEC-2022-124","code_chunks":["TfLiteStatus FormatConverter<T>::SparseToDense(const T* src_data) {","  data_.resize(dense_size_);","  std::fill(data_.begin(), data_.end(), T(0));","","  int total_rank = traversal_order_.size();","  int src_data_ptr = 0;","  std::vector<int> indices(total_rank);"],"label":0}
{"cve":"CVE-2022-37032","code_chunks":["vty_out (vty, \"AFI IPv6, \");","break;","vty_out (vty, \"AFI Unknown %d, \", ntohs (cap.mpc.afi));","break;","}","switch (cap.mpc.safi)"],"label":1}
{"cve":"CVE-2021-41099","code_chunks":["sds sdsMakeRoomFor(sds s, size_t addlen) {","void *sh, *newsh;","size_t avail = sdsavail(s);","size_t len, newlen;","char type, oldtype = s[-1] & SDS_TYPE_MASK;","int hdrlen;",""],"label":1}
{"cve":"CVE-2021-38199","code_chunks":["\t\t.net\t\t= net,","\t\t.dstaddr\t= sap,","\t\t.addrlen\t= salen,","\t\t.servername\t= hostname,","\t};","\tchar buf[INET6_ADDRSTRLEN + 1];","\tstruct sockaddr_storage address;"],"label":0}
{"cve":"CVE-2023-4756","code_chunks":["parser->line_pos++;","continue;","parser->line_pos = parser->line_size;","break;","}","break;"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["SerializeToTString(proto, &output.scalar<tstring>()());","ctx->set_output(0, output);","status.SetPayload(TpuCompileInterface::kTpuCompileErrorPayloadKey,","output.scalar<tstring>()());","}","","if (status.ok()) {"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["#if WINAPI_MSWINDOWS","bool","ArgParser::parseMSWindowsArg(ArgsBase& argsBase, const int& argc, const char* const* argv, int& i)","{","    if (isArg(i, argc, argv, NULL, \"--service\")) {","        LOG((CLOG_WARN \"obsolete argument --service, use barrierd instead.\"));","        argsBase.m_shouldExit = true;"],"label":0}
{"cve":"CVE-2016-5842","code_chunks":["static inline signed int ReadPropertySignedLong(const EndianType endian,","const unsigned char *buffer)","{","union","{","unsigned int"],"label":1}
{"cve":"CVE-2021-32139","code_chunks":["    if (p->contentEncoding) s->size += strlen(p->contentEncoding);","\treturn GF_OK;","}","#endif \/*GPAC_DISABLE_ISOM_WRITE*\/","","",""],"label":0}
{"cve":"CVE-2018-8099","code_chunks":["","\/* buffer is not guaranteed to be aligned *\/","memcpy(&source, buffer, sizeof(struct entry_short));","","entry.ctime.seconds = (git_time_t)ntohl(source.ctime.seconds);","entry.ctime.nanoseconds = ntohl(source.ctime.nanoseconds);"],"label":1}
{"cve":"CVE-2018-5806","code_chunks":["memmove(&table[q+camera_count],&const_table[q],sizeof(const_table[0]));","camera_count += sizeof(const_table)\/sizeof(const_table[0]);","#endif","","tiff_flip = flip = filters = UINT_MAX;\t\/* unknown *\/","raw_height = raw_width = fuji_width = fuji_layout = cr2_slice[0] = 0;"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["{","if (len < 1)","return;   string[len - 1] = 0;","if (len < 3)","return;   len = strnlen(string, len - 1);","for (int i = len - 1; i >= 0; i--)"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static int square_root(void) {","size_t bits;","bn_t a, b, c;","int code = RLC_ERR;","","bn_null(a);","bn_null(b);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void eb_write_bin(uint8_t *bin, size_t len, const eb_t a, int pack) {","eb_t t;","","eb_null(t);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["goto failed;","}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["RETURN_IF_ERROR(CheckInputsOutputs(context, tflite_node,","\/*runtime_inputs=*\/1, \/*outputs=*\/1));","RETURN_IF_ERROR(CheckTensorIsAvailable(context, tflite_node, 1));","auto pad_tensor = tflite::GetInput(context, tflite_node, 1);","if (pad_tensor->dims->size != 2) {","return absl::InvalidArgumentError(absl::StrCat(","\"Invalid paddings tensor dimension: expected 2 dim, got \","],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        else {","            int res;","            res = obj2ast_expr(tmp, &target, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }","        if (_PyObject_LookupAttrId(obj, &PyId_annotation, &tmp) < 0) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","","const TfLiteTensor* multipliers = GetInput(context, node, kInputMultipliers);","if (multipliers->type != kTfLiteInt32 && multipliers->type != kTfLiteInt64) {","context->ReportError(context,","\"Multipliers of type '%s' are not supported by tile.\","],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["int namelen;","int num_attr, i;","const char *cp, *name, *states;","struct match_attr *res = NULL;","int is_macro;"],"label":1}
{"cve":"CVE-2021-3770","code_chunks":[" * Get window or buffer local options."," *\/","    dict_T *","get_winbuf_options(int bufopt)","{","    dict_T\t*d;","    int\t\topt_idx;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"CVE-2018-12559","code_chunks":["int t=create","? Type_Samba",": d.isLocalFile()","? Type_File"],"label":1}
{"cve":"CVE-2020-4030","code_chunks":["}","","\/* Bail out if namespace is too long *\/","if (trio_length(name) >= MAX_USER_NAME)","return NULL;","","\/* Bail out if namespace already is registered *\/"],"label":1}
{"cve":"CVE-2022-1244","code_chunks":["\tut32 i;","\tfor (i = 0; i < cache->n_hdr; i++) {","\t\tcache_hdr_t *hdr = &cache->hdr[i];","\t\tut64 hdr_offset = cache->hdr_offset[i];","\t\tut32 maps_index = cache->maps_index[i];","\t\tcache_img_t *img = read_cache_images (cache->buf, hdr, hdr_offset);","\t\tif (!img) {"],"label":0}
{"cve":"CVE-2023-5520","code_chunks":["};","","","const GF_FilterRegister *rfac3_register(GF_FilterSession *session)","{","\treturn &AC3DmxRegister;","}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  } else {","    TF_LITE_ENSURE_OK(","        context, GetOutputSafe(context, node, kNMSOutputTensorSelectedIndices,","                               &output_selected_indices));","    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node,","                                             kNMSOutputTensorNumSelectedIndices,","                                             &output_num_selected_indices));"],"label":0}
{"cve":"CVE-2016-6875","code_chunks":["m_packetString.append(\"<struct>\");","if (!isArray) {","m_packetString.append(\"<var name='php_class_name'><string>\");","m_packetString.append(varAsObject->getClassName());","m_packetString.append(\"<\/string><\/var>\");","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["auto* params =","reinterpret_cast<TfLiteSpaceToDepthParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["        PyObject *name;","        const char *s = STR(ch);","        size_t len = strlen(s);","        if (len >= 4 && len <= 5) {","            if (!strcmp(s, \"None\"))","                return NameConstant(Py_None, LINENO(n), n->n_col_offset, c->c_arena);","            if (!strcmp(s, \"True\"))"],"label":0}
{"cve":"CVE-2019-19922","code_chunks":["\t\t *","\t\t * A better way of solving this problem would be to wait for","\t\t * the PELT signals of tasks to converge before taking them","\t\t * into account, but that is not straightforward to implement,","\t\t * and the following generally works well enough in practice.","\t\t *\/","\t\tif (flags & ENQUEUE_WAKEUP)"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["NULL,","#endif","global_data->instance_name);","fp = fopen(file_name, \"a\");","FREE(file_name);","","set_time_now();"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ASSERT_EQ(aux_input->dims->data[1], input->dims->data[1]);","}","","TfLiteTensor* fw_output = GetOutput(context, node, kFwOutputTensor);","TfLiteTensor* fw_activation_state =","GetVariableInput(context, node, kFwInputActivationStateTensor);","TF_LITE_ENSURE(context, fw_activation_state != nullptr);"],"label":1}
{"cve":"CVE-2023-25136","code_chunks":["\t\tcp = p;","\t\tif ((p = match_filter_denylist(p,","\t\t    \"diffie-hellman-group-exchange-sha256,\"","\t\t    \"diffie-hellman-group-exchange-sha1\")) == NULL)","\t\t\tfatal(\"match_filter_denylist failed\");","\t\tfree(cp);","\t}"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input_tensor = GetInput(context, node, 0);","const TfLiteTensor* padding_matrix = GetInput(context, node, 1);","TfLiteTensor* output_tensor = GetOutput(context, node, 0);","","TF_LITE_ENSURE_EQ(context, NumDimensions(padding_matrix), 2);","TF_LITE_ENSURE_EQ(context, SizeOfDimension(padding_matrix, 0),"],"label":1}
{"cve":"PYSEC-2020-321","code_chunks":["}","","if (graph_def.has_library()) {","const FunctionDefLibrary& library = graph_def.library();","for (const auto& function : library.function()) {","for (const auto& node : function.node_def()) {"],"label":0}
{"cve":"CVE-2017-10911","code_chunks":["\/* Place on the response ring for the relevant domain. *\/","switch (ring->blkif->blk_protocol) {","memcpy(RING_GET_RESPONSE(&blk_rings->native, blk_rings->native.rsp_prod_pvt),","&resp, sizeof(resp));","break;","memcpy(RING_GET_RESPONSE(&blk_rings->x86_32, blk_rings->x86_32.rsp_prod_pvt),"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (input1->type) {","case kTfLiteInt32: {"],"label":1}
{"cve":"PYSEC-2021-750","code_chunks":["const int64_t size = file_pattern_t.NumElements();","OP_REQUIRES(","context, size == 1,","errors::InvalidArgument(","\"Input 0 (file_pattern) must be a string scalar; got a tensor of \",","size, \" elements\"));"],"label":0}
{"cve":"PYSEC-2022-101","code_chunks":["    }","    DCHECK(edge->dst_input() < input_nodes.size()) << DebugString();","    int i = edge->dst_input();","    input_nodes.at(i) = edge->src();","    input_idx.at(i) = edge->src_output();","  }",""],"label":0}
{"cve":"CVE-2022-0519","code_chunks":["if (!sz) {","return NULL;","}","ut64 offset = 0;"],"label":1}
{"cve":"CVE-2020-1916","code_chunks":["        } else {","          m_scalableCache->snapshotKeys(keys);","        }","        for (auto& key: keys) {","          folly::writeFull(file.fd(), key.data(), key.size());","          folly::writeFull(file.fd(), \"\\n\", 1);","        }"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (params->type) {","break;"],"label":1}
{"cve":"CVE-2016-10012","code_chunks":["#define\tKEX_DEFAULT_COMP\t\"none,zlib@openssh.com,zlib\""],"label":1}
{"cve":"CVE-2020-1712","code_chunks":["                return r;","        else if (r > 0)","                return 1;","#if ENABLE_POLKIT","        else {","                _cleanup_(sd_bus_message_unrefp) sd_bus_message *request = NULL;","                _cleanup_(sd_bus_message_unrefp) sd_bus_message *reply = NULL;"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["void CLASS samsung_load_raw()","{","int row, col, c, i, dir, op[4], len[4];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width> 32768 || raw_height > 32768)      throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\t\t\t\t\t} else {","\t\t\t\t\t\t\t\t\tbn_sub_dig(b, b, -gama[tnaf[k] \/ 2]);","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tif (tnaf[k] < 0) {","\t\t\t\t\t\t\t\tif (beta[-tnaf[k] \/ 2] >= 0) {","\t\t\t\t\t\t\t\t\tbn_sub_dig(a, a, beta[-tnaf[k] \/ 2]);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2019-20915","code_chunks":["}","","\/** Read handle-references. Returns error code: DWG_ERR_INVALIDHANDLE"," *  or 0 on success."," *\/","int","bit_read_H (Bit_Chain *restrict dat, Dwg_Handle *restrict handle)"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["}","}","}","tok_backup(tok, c);","*p_start = tok->start;","*p_end = tok->cur;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["                                                &input_quantized));","    input_quantized->type = fw_input_to_output_weights->type;","    input_quantized->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {","      TfLiteIntArray* input_quantized_size = TfLiteIntArrayCopy(input->dims);","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_quantized,","                                                       input_quantized_size));"],"label":0}
{"cve":"CVE-2018-11376","code_chunks":["}","}","} else {","for (i = 0; i < sec->size; i += 8) {","ut64 addr64 = r_read_le64 (buf + i);","if (addr64) {","RBinAddr *ba = newEntry (sec->paddr + i, addr64, type, bits);"],"label":1}
{"cve":"CVE-2018-11378","code_chunks":["}","op->len += n;","snprintf (op->txt, R_ASM_BUFSIZE, \"%s %d \", opdef->txt, count);","for (i = 0; i < count && strlen (op->txt) + 10 < R_ASM_BUFSIZE; i++) {","int optxtlen = strlen (op->txt);"],"label":1}
{"cve":"CVE-2021-38203","code_chunks":[],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  const bool has_aux_input = (fw_aux_input_to_forget_weights != nullptr);","","  if (has_aux_input) {","        TF_LITE_ASSERT_EQ(aux_input->dims->data[0], input->dims->data[0]);","    TF_LITE_ASSERT_EQ(aux_input->dims->data[1], input->dims->data[1]);","  }",""],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["\t\tsetlinebuf(log_op);","","\t\tfprintf(log_op, \"\\n\");","\t}","","\tfree(log_name);",""],"label":0}
{"cve":"CVE-2016-8654","code_chunks":["\/* Get a buffer. *\/","if (bufsize > QMFB_SPLITBUFSIZE) {","if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {","\/* We have no choice but to commit suicide in this case. *\/","abort();","}"],"label":1}
{"cve":"CVE-2023-23457","code_chunks":["e_phnum = get_te16(&ehdri.e_phnum);","e_shnum = get_te16(&ehdri.e_shnum);","unsigned const e_phentsize = get_te16(&ehdri.e_phentsize);","if (ehdri.e_ident[Elf64_Ehdr::EI_CLASS]!=Elf64_Ehdr::ELFCLASS64","|| sizeof(Elf64_Phdr) != e_phentsize","|| (Elf64_Ehdr::ELFDATA2MSB == ehdri.e_ident[Elf64_Ehdr::EI_DATA]","&& &N_BELE_RTP::be_policy != bele)"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 type;","UINT16 offset = 0;","UINT16 blockLength;","BYTE* holdp;","","while (offset < length)"],"label":0}
{"cve":"CVE-2016-10167","code_chunks":["\tgdImagePtr src, dst;","\tFILE *fp;","\tint black;","\tchar *path;","","\tfp = gdTestFileOpen2(\"gdimagerotate\", \"php_bug_65070.gif\");","\tsrc = gdImageCreateFromGif(fp);"],"label":0}
{"cve":"CVE-2018-11381","code_chunks":["\tRBinObject *o = r_bin_cur_object (bin);","\tint res = false;","\tif (a && !o) {","\t\t\t\tres = true;","\t} else if (a && o->referenced - 1 < 1) {","\t\t\t\tres = true;","\t\t\t} else if (o) {"],"label":0}
{"cve":"CVE-2022-41409","code_chunks":["}","","i = (int32_t)li;","if (i-- == 0)","{","fprintf(outfile, \"** Zero repeat not allowed\\n\");"],"label":1}
{"cve":"CVE-2022-2287","code_chunks":["if (!spin->si_nosugfile","&& (spin->si_sal.ga_len > 0","|| (spin->si_sofofr != NULL && spin->si_sofoto != NULL)))","{","putc(SN_SUGFILE, fd);\t\t\t\t\tputc(0, fd);\t\t\t\t\t\tput_bytes(fd, (long_u)8, 4);","spin->si_sugtime = time(NULL);"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["pj_lock_release(ds->ossl_lock);","return PJ_EGONE;","}","","\/* Consume (and ignore) the packet *\/","while (1) {"],"label":1}
{"cve":"CVE-2018-12247","code_chunks":["mrb_field_write_barrier(mrb, (struct RBasic*)p, (struct RBasic*)p->c);","clone = mrb_obj_value(p);","init_copy(mrb, clone, self);","p->flags = mrb_obj_ptr(self)->flags;","","return clone;","}"],"label":1}
{"cve":"PYSEC-2021-255","code_chunks":["CHECK_GE(in.dims(), 2);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* params = GetInput(context, node, kParams);","const TfLiteTensor* indices = GetInput(context, node, kIndices);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (indices->type) {","return EvalGatherNd<int32_t>(context, params, indices, output);"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["SecureSocket* socket = NULL;","try {","socket = new SecureSocket(m_events, m_socketMultiplexer,","ARCH->acceptSocket(m_socket, NULL), security_level_);","socket->initSsl(true);",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","    const TfLiteTensor* gate_bias;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kGateBias, &gate_bias));","  TF_LITE_ENSURE_EQ(context, gate_bias->dims->size, 1);","  TF_LITE_ENSURE_EQ(context, gate_bias->dims->data[0], 2 * n_output);",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 type;","UINT16 offset = 0;","UINT16 blockLength;","BYTE* holdp;","","while (offset < length)"],"label":0}
{"cve":"CVE-2019-15226","code_chunks":["  TestHeaderMapImpl request_headers;","  HttpTestUtility::addDefaultHeaders(request_headers);","    request_headers.refreshByteSize();","  std::string key = \"big\";","  uint32_t head_room = 77;","  uint32_t long_string_length =","      codec_limit_kb * 1024 - request_headers.byteSize().value() - key.length() - head_room;"],"label":0}
{"cve":"CVE-2020-6017","code_chunks":["return -k_EResultLimitExceeded;","}","","if ( cbData > k_cbMaxUnreliableMsgSize && !( pSendMessage->m_nFlags & k_nSteamNetworkingSend_Reliable )  )","{","SpewWarningRateLimited( usecNow, \"Trying to send a very large (%d bytes) unreliable message.  Sending as reliable instead.\\n\", cbData );","pSendMessage->m_nFlags |= k_nSteamNetworkingSend_Reliable;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["size_t bn_size_str(const bn_t a, unsigned int radix) {","int digits = 0;","bn_t t;",""],"label":0}
{"cve":"CVE-2021-29463","code_chunks":["long size = Exiv2::getULong(size_buff, littleEndian);","DataBuf payload(size);","io_->read(payload.pData_, payload.size_);","byte c;"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["        }","","        \/* stored value *\/","        *val = value;","","        if (i) {","            \/* enlarge the array *\/"],"label":0}
{"cve":"CVE-2022-0696","code_chunks":["\t{","\t    \t    \t    CLEAR_FIELD(bool_tv);","\t    bool_tv.v_type = VAR_BOOL;","\t    bool_tv.vval.v_number = tv2bool(tv) ? VVAL_TRUE : VVAL_FALSE;","\t    tv = &bool_tv;","\t}",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["cell_state_quantized->type = input_to_output_weights->type;","cell_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(cell_state_quantized->dims, cell_state->dims)) {"],"label":1}
{"cve":"PYSEC-2022-111","code_chunks":["int64_t num_threads = 0;","OP_REQUIRES_OK(","ctx, ParseScalarArgument<int64_t>(ctx, \"num_threads\", &num_threads));","OP_REQUIRES(ctx, num_threads >= 0,"],"label":1}
{"cve":"CVE-2019-17541","code_chunks":["            (void) LogMagickEvent(CoderEvent,GetMagickModule(),","              \"  Input sampling-factors=%s\",sampling_factor);","        }","    }","  value=GetImageOption(image_info,\"jpeg:sampling-factor\");","  if (image_info->sampling_factor != (char *) NULL)","    sampling_factor=image_info->sampling_factor;"],"label":0}
{"cve":"CVE-2021-23520","code_chunks":["{","const std::map<String, bool> testCases = { { \"a\",                    true  },","#if JUCE_WINDOWS","{ \"C:\/b\",                 false },","#else","{ \"\/b\",                   false },"],"label":0}
{"cve":"CVE-2023-46407","code_chunks":["if (ret < 0)","goto end;","","buf = av_mallocz(dist->alphabet_size * (2 * sizeof(int8_t) + sizeof(int16_t) + sizeof(uint32_t))","+ sizeof(uint32_t));","if (!buf) {","ret = AVERROR(ENOMEM);"],"label":1}
{"cve":"CVE-2018-20761","code_chunks":["AVFormatContext *ctx;","AVOutputFormat *fmt_out;","Bool ret = GF_FALSE;","char *ext, szName[1000], szExt[20];","const char *szExtList;","FFDemux *ffd;","if (!plug || !url)"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["lazyClassToStringHelper(value.toLazyClassVal());","auto const size = str->size();","if (size >= RuntimeOption::MaxSerializedStringSize) {","throw Exception(\"Size of serialized string (%d) exceeds max\", size);","}","StringBuffer sb;","sb.append(\"s:\");"],"label":1}
{"cve":"CVE-2021-38114","code_chunks":["ctx->mb_width  = (ctx->width + 15)>> 4;","ctx->mb_height = AV_RB16(buf + 0x16c);","","if ((ctx->height + 15) >> 4 == ctx->mb_height && frame->interlaced_frame)","ctx->height <<= 1;",""],"label":1}
{"cve":"CVE-2021-32139","code_chunks":["fount_count = 1;","}","} else {","if (a->font_table) {","fount_count = a->font_table->entry_count;","for (j=0; j<fount_count; j++) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","TfLiteTensor* output_state =","GetVariableInput(context, node, kOutputStateTensor);","TF_LITE_ENSURE(context, output_state != nullptr);","TfLiteTensor* cell_state = GetVariableInput(context, node, kCellStateTensor);"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["\treturn width;","}","","static void strbuf_add_tabexpand(struct strbuf *sb, struct grep_opt *opt,","\t\t\t\t int color, int tabwidth, const char *line,","\t\t\t\t int linelen)","{"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(","context, GetOutputSafe(context, node, kOutputValues, &output_values));","TfLiteTensor* output_indexes;","TF_LITE_ENSURE_OK(","context, GetOutputSafe(context, node, kOutputIndexes, &output_indexes));","if (IsDynamicTensor(output_values)) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static int square_root(void) {","int bits, code = RLC_ERR;","bn_t a, b, c;","","bn_null(a);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["assert(s <= end);","assert(s == end || *s == '{' || *s == '}');","if (literal_start != s) {","if (raw)","*literal = PyUnicode_DecodeUTF8Stateful(literal_start,","s - literal_start,"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["{","for (; stack; stack = stack->prev) {","unsigned i;","for (i = stack->num_matches; i > 0; i--) {","const struct match_attr *ma = stack->attrs[i - 1];","if (ma->is_macro) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      } break;","      case kTfLiteInt64: {","        switch (input->type) {","            TF_LITE_ARG_MIN_MAX(float, int64_t, int64_t);","            break;","            TF_LITE_ARG_MIN_MAX(uint8_t, int64_t, int64_t);","            break;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT16 type;","UINT16 length;","BYTE* em;","BYTE* bm = Stream_Pointer(s);","rdp_read_capability_set_header(s, &length, &type);"],"label":1}
{"cve":"CVE-2019-18218","code_chunks":["}","nelements = CDF_GETUINT32(q, 1);","if (nelements == 0) {","DPRINTF((\"CDF_VECTOR with nelements == 0\\n\"));","goto out;","}"],"label":1}
{"cve":"CVE-2020-35538","code_chunks":["#define h2v1_merged_upsample_565_internal  h2v1_merged_upsample_565_be","#define h2v1_merged_upsample_565D_internal  h2v1_merged_upsample_565D_be","#define h2v2_merged_upsample_565_internal  h2v2_merged_upsample_565_be","#define h2v2_merged_upsample_565D_internal  h2v2_merged_upsample_565D_be","#include \"jdmrg565.c\"","#undef PACK_SHORT_565","#undef PACK_TWO_PIXELS"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params = reinterpret_cast<TfLiteSubParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"],"label":1}
{"cve":"PYSEC-2020-282","code_chunks":["","auto do_work = [num_batches, samples_per_batch, &ctx, &bcast, &means,","&stddevs, &minvals, &maxvals, &gen, &output,","kStdDevsInsideBoundsToUseRandnSampler](int start_output,","int limit_output) {","random::PhiloxRandom gen_copy = gen;"],"label":1}
{"cve":"CVE-2020-15121","code_chunks":["\"Accept: *\/*\\r\\n\"","\"Host: %s:%s\\r\\n\"","\"\\r\\n\", path, host, port);","response = r_socket_http_answer (s, code, rlen);","} else {","eprintf (\"Cannot connect to %s:%s\\n\", host, port);","response = NULL;"],"label":1}
{"cve":"CVE-2022-0695","code_chunks":["int n_classes = classlist_sample_size \/ 8;","ut64 sect_offset = sections[classlist_idx].offset + bin->hdr_offset;","","if (r_buf_fread_at (cache->buf, sect_offset, (ut8*) classlist, \"l\", n_classes) < classlist_sample_size) {","goto next_bin;","}",""],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["","Buffer::OwnedImpl fake_input(\"1234\");","conn_manager_->onData(fake_input, false);","","EXPECT_CALL(*decoder_filters_[1], decodeHeaders(_, _))"],"label":1}
{"cve":"CVE-2021-25940","code_chunks":["generateError(rest::ResponseCode::BAD, TRI_ERROR_HTTP_BAD_PARAMETER,","\"invalid JSON\");","return RestStatus::DONE;","}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static int valid_radix(int radix) {","while (radix > 0) {","if (radix != 1 && radix % 2 == 1)","return 0;"],"label":1}
{"cve":"CVE-2020-8597","code_chunks":["if (vallen >= len + sizeof (rhostname)) {","dbglog(\"EAP: trimming really long peer name down\");","BCOPY(inp + vallen, rhostname, sizeof (rhostname) - 1);","rhostname[sizeof (rhostname) - 1] = '\\0';","} else {","BCOPY(inp + vallen, rhostname, len - vallen);"],"label":1}
{"cve":"PYSEC-2023-196","code_chunks":["","import p"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["if (!fingerprintRegex.exactMatch(line)) {","return;","}","","barrier::FingerprintData fingerprint_sha1 = {","barrier::fingerprint_type_to_string(barrier::FingerprintType::SHA1),","barrier::string::from_hex(fingerprintRegex.cap(1).toStdString())"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["    TF_LITE_ENSURE_EQ(context, num_outputs, subgraph->outputs().size());","  }","","  bool has_dynamic_output_tensors = false;","  for (auto* subgraph : {then_subgraph, else_subgraph}) {","    for (int i = 0; i < num_inputs; ++i) {","                  const TfLiteTensor* input;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["dummy = Name(dummy_name, Load, LINENO(n), n->n_col_offset, c->c_arena);","call = ast_for_call(c, CHILD(n, 3), dummy);","if (!call)","return NULL;","}"],"label":1}
{"cve":"PYSEC-2021-462","code_chunks":["    OP_REQUIRES_OK(context, TensorShapeUtils::MakeShape(","                                input_shape_vec.data() + 1,","                                input_shape->NumElements() - 1, &output_shape));","","        std::unordered_set<int64> visited;","    sparse::GroupIterable minibatch = input_st.group({0});","    for (const auto& subset : minibatch) {"],"label":0}
{"cve":"CVE-2019-5489","code_chunks":["struct mm_walk *walk)","{","unsigned char *vec = walk->private;","unsigned long nr = (end - addr) >> PAGE_SHIFT;","","memset(vec, 0, nr);"],"label":0}
{"cve":"PYSEC-2022-67","code_chunks":["size_t TfLiteIntArrayGetSizeInBytes(int size) {","static TfLiteIntArray dummy;","","size_t computed_size = sizeof(dummy) + sizeof(dummy.data[0]) * size;","#if defined(_MSC_VER)","computed_size -= sizeof(dummy.data[0]);","#endif"],"label":0}
{"cve":"PYSEC-2020-319","code_chunks":["","void Compute(OpKernelContext* ctx) override {","const Tensor& val = ctx->input(0);","int64 id = ctx->session_state()->GetNewId();","TensorStore::TensorAndKey tk{val, id, requested_device()};","OP_REQUIRES_OK(ctx, ctx->tensor_store()->AddTensor(name(), tk));",""],"label":1}
{"cve":"CVE-2024-23327","code_chunks":["  }","","      if (proxy_protocol_header_.value().wholeHeaderLength() > max_proxy_protocol_len_) {","    max_proxy_protocol_len_ = proxy_protocol_header_.value().wholeHeaderLength();","        return ReadOrParseState::TryAgainLater;","  }",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["char *dup, *end;","PyObject *res = NULL;","","assert(s != NULL);","","if (strchr(s, '_') == NULL) {"],"label":0}
{"cve":"CVE-2021-23520","code_chunks":["static MemoryBlock createZipMemoryBlock (const StringArray& entryNames)","{","ZipFile::Builder builder;","HashMap<String, MemoryBlock> blocks;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep4_map(ep4_t p, const uint8_t *msg, int len);"],"label":1}
{"cve":"CVE-2022-3976","code_chunks":["* characters.","*\/","if (strstr(filename, \"..\") != NULL) {","mmsMsg_createServiceErrorPdu(invokeId, response, MMS_ERROR_FILE_FILENAME_SYNTAX_ERROR);","return false;","}",""],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["{","    bool desktopMode = appConfig().processMode() == Desktop;","    bool serviceMode = appConfig().processMode() == Service;","","    appendLogDebug(\"starting process\");","    m_ExpectedRunningState = kStarted;","    setBarrierState(barrierConnecting);"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["BYTE codecId;","GUID codecGuid;","RPC_STATUS rpc_status;","BYTE bitmapCodecCount;","UINT16 codecPropertiesLength;",""],"label":0}
{"cve":"PYSEC-2021-735","code_chunks":["        ctx, a_shape->IsSameSize(*b_shape),","        errors::InvalidArgument(","            \"Operands do not have the same ranks; got shapes: \",","            a_shape->SummarizeValue(10), \" and \", b_shape->SummarizeValue(10)));","    const auto a_shape_flat = a_shape->flat<int64>();","    const auto b_shape_flat = b_shape->flat<int64>();","    for (int i = 0; i < a_shape->NumElements(); ++i) {"],"label":0}
{"cve":"CVE-2018-8799","code_chunks":["{","x = x >> 1;","x = x + 1;","color = -x;","}","else"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["lock.unlock();","","bool authorizer_valid;","if (!async_msgr->verify_authorizer(this, peer_type, connect.authorizer_protocol, authorizer_bl,"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT32 drawNineGridSupportLevel;","UINT16 DrawNineGridCacheSize;","UINT16 DrawNineGridCacheEntries;","WLog_INFO(TAG,","\"DrawNineGridCacheCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));"],"label":0}
{"cve":"CVE-2022-2304","code_chunks":["","\/*","* Dump one word: apply case modifications and append a line to the buffer.","* When \"lnum\" is zero add insert mode completion.","*\/","static void"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output = GetOutput(context, node, \/*index=*\/0);","","int32_t* output_data = output->data.i32;","*output_data = *(input1->data.i32) + *(input2->data.i32);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteNode* node) {","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const int num_dims = NumDimensions(input);","TF_LITE_ENSURE(context, num_dims >= 2);","const TfLiteTensor* fft_length;"],"label":0}
{"cve":"CVE-2023-27600","code_chunks":["start++;","","while(*end != '\\n' && end < (stream->body.s+stream->body.len) )","end++;","end++;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"ClassDef field \\\"body\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            body = _Ta3_asdl_seq_new(len, arena);","            if (body == NULL) goto failed;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from DictComp\");","            return 1;","        }","        else {","            int res;"],"label":0}
{"cve":"CVE-2016-6873","code_chunks":["","enum class CountMode {","  NORMAL = 0,","  RECURSIVE = 1,","};","","int64_t HHVM_FUNCTION(count,"],"label":0}
{"cve":"CVE-2016-4997","code_chunks":["\tret = seq_open_net(inode, file, &xt_table_seq_ops,","\t\t\t   sizeof(struct xt_names_priv));","\tif (!ret) {","\t\tpriv = ((struct seq_file *)file->private_data)->private;","\t\tpriv->af = (unsigned long)PDE_DATA(inode);","\t}","\treturn ret;"],"label":0}
{"cve":"CVE-2022-35972","code_chunks":["","float input_min = context->input(1).flat<float>()(0);","float input_max = context->input(2).flat<float>()(0);","float input_scale = (input_max - input_min) \/ 255.0f;","","OP_REQUIRES(context, input_min < input_max,"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["},",".invoke =","[](TfLiteContext* context, TfLiteNode* node) {","TfLiteTensor* output = tflite::GetOutput(context, node, 0);","std::fill(output->data.f,","output->data.f + tflite::NumElements(output), 7.0f);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["dummy = Name(dummy_name, Load, LINENO(n), n->n_col_offset, c->c_arena);","call = ast_for_call(c, CHILD(n, 3), dummy);","if (!call)","return NULL;","}"],"label":1}
{"cve":"CVE-2023-25671","code_chunks":["\"' has empty control result name\");","}","Value result = value_manager.GetValueOrCreatePlaceholder(","(Twine(\"^\") + ret_val.second).str());","if (!result.getType().isa<ControlType>())","return InvalidArgument(\"failed to map returned value \", ret_val.second,"],"label":1}
{"cve":"CVE-2019-1010305","code_chunks":["return MSPACK_ERR_OK;","}","","\/* seek to the first PMGL chunk, and reduce the number of chunks to read *\/","if ((x = chm->first_pmgl) != 0) {","if (sys->seek(fh,(off_t) (x * chm->chunk_size), MSPACK_SYS_SEEK_CUR)) {"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["    {\"_parse\",  ast3_parse, METH_VARARGS, \"Parse string into typed AST.\"},","    {NULL, NULL, 0, NULL}","};","static struct PyModuleDef _astmodule = {","    PyModuleDef_HEAD_INIT, \"_ast3\", NULL, 0, ast3_methods","};","PyMODINIT_FUNC"],"label":0}
{"cve":"CVE-2021-4188","code_chunks":["{","mrb_int n;","","if (mrb_get_args(mrb, \"|i\", &n) == 0) {","return mrb_ary_shift(mrb, self);","}"],"label":0}
{"cve":"PYSEC-2022-43065","code_chunks":["        if (!loaded_) {","        return;","    }","","    WriteToFile(seg_data.buffer, 0, seg_data.buffer_size);","","    mbModified = false;"],"label":0}
{"cve":"CVE-2022-24793","code_chunks":["    }","","    \/* Otherwise duplicate the string, and insert new name in nametable *\/","    pj_strdup(pool, dst, src);","","    if (*count < PJ_DNS_MAX_NAMES_IN_NAMETABLE) {","\tnametable[*count].ptr = dst->ptr;"],"label":0}
{"cve":"CVE-2021-30020","code_chunks":["","\treturn 0;","}","","\/*this needs further tests !*\/","static void vvc_compute_poc(VVCSliceInfo *si)","{"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep_map_dst(ep_t p, const uint8_t *msg, size_t len, const uint8_t *dst,","size_t dst_len) {","","\/* enough space for two field elements plus extra bytes for uniformity *\/","const int len_per_elm = (FP_PRIME + ep_param_level() + 7) \/ 8;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["                keyword_ty val;","                res = obj2ast_keyword(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"Call field \\\"keywords\\\" changed size during iteration\");","                    goto failed;","                }"],"label":0}
{"cve":"CVE-2018-8800","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    }","    case kTfLiteUInt8: {","      reference_ops::Reverse<uint8_t>(","          axis, GetTensorShape(input), GetTensorData<uint8_t>(input),","          GetTensorShape(output), GetTensorData<uint8_t>(output));","      break;","    }"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* axis;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxisTensor, &axis));"],"label":0}
{"cve":"CVE-2024-0727","code_chunks":["bags = PKCS12_unpack_p7data(p7);","} else if (bagnid == NID_pkcs7_encrypted) {","bags = PKCS12_unpack_p7encdata(p7, oldpass, -1);","if (!alg_get(p7->d.encrypted->enc_data->algorithm,","&pbe_nid, &pbe_iter, &pbe_saltlen, &cipherid))","goto err;","} else {"],"label":1}
{"cve":"CVE-2020-12887","code_chunks":["uint16_t option_number = *dst;","","if (option_number == 13) {","uint8_t option_ext;","int8_t read_result = sn_coap_parser_read_packet_u8(&option_ext,","*packet_data_pptr,"],"label":0}
{"cve":"PYSEC-2021-629","code_chunks":["if (group_key_t.dims() > 0) {","return errors::Internal(\"Unexpected dimensions on input group_key, got \",","group_key_t.shape().DebugString());","}","","auto group_size = group_size_t.unaligned_flat<int32>()(0);"],"label":1}
{"cve":"CVE-2022-0890","code_chunks":["}","else {","value = fiber_result(mrb, a, len);","if (vmexec) {","c->ci[1].stack[0] = value;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["a0 = GetInput(context, node, 0);","a1 = a0;","}","TfLiteTensor* out = GetOutput(context, node, 0);","int num = 1;","for (int i = 0; i < a0->dims->size; ++i) {","num *= a0->dims->data[i];"],"label":1}
{"cve":"CVE-2016-10161","code_chunks":["\tif (yych >= ':') goto yy18;","\t++YYCURSOR;","\tif (YYLIMIT <= YYCURSOR) YYFILL(1);","\tyych = *YYCURSOR;","\tif (yych <= '\/') goto yy18;","\tif (yych <= '9') goto yy91;","\tif (yych != ';') goto yy18;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, data->num, input_shape->data[axis]);","for (int i = 0; i < data->num; ++i) {","TfLiteIntArray* copied_output_shape = TfLiteIntArrayCopy(output_shape);","TfLiteTensor* output = GetOutput(context, node, i);","TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);","TF_LITE_ENSURE_EQ(context, input->params.zero_point,","output->params.zero_point);"],"label":1}
{"cve":"CVE-2022-28049","code_chunks":["","if (njs_fast_path(ret == NJS_OK)) {","if (njs_slow_path(!njs_is_object(&value))) {","njs_type_error(vm, \"Function has non-object prototype \"","\"in instanceof\");","return NJS_ERROR;"],"label":1}
{"cve":"CVE-2020-26247","code_chunks":["        if (xmlIsBlankNode(node)) {","            return 1;","        }","    }","","    return 0;","}"],"label":0}
{"cve":"CVE-2018-16393","code_chunks":["\tsc_file_t *file=NULL;","\tu8 buf[SC_MAX_APDU_BUFFER_SIZE], pathbuf[SC_MAX_PATH_SIZE], *path = pathbuf;","\tunsigned int i;","\tint r, pathlen;","","\tassert(card != NULL && in_path != NULL);","\tctx=card->ctx;"],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["    return \"\\\\x94\";","    return \"\\\\x95\";","    return \"\\\\x96\";","    return \"\\\\x97\";","    return \"\\\\x98\";","    return \"\\\\x99\";","    return \"\\\\x9A\";"],"label":0}
{"cve":"CVE-2021-41220","code_chunks":["\/*group_size*\/ c->input(1),","\/*group_key*\/ c->input(2),","\/*instance_key*\/ c->input(3)),","done);","col_params->instance.shape = c->input(0).shape();","col_params->merge_op = merge_op_.get();","col_params->final_op = final_op_.get();"],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["","    memset(&paddedSalt[1], '$', maxSaltLength - 1);","    memcpy(paddedSalt, salt, std::min(maxSaltLength, saltLen));","    paddedSalt[std::min(maxSaltLength, saltLen)] = '\\0';","","    if (php_crypt_blowfish_rn(key, paddedSalt, output, sizeof(output))) {","      return strdup(output);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input_resource_id_tensor =","GetInput(context, node, kInputResourceIdTensor);","TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, NumDimensions(input_resource_id_tensor), 1);","TF_LITE_ENSURE_EQ(context, SizeOfDimension(input_resource_id_tensor, 0), 1);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const std::vector<float>& scores, std::vector<int>* selected,","int max_detections) {","const TfLiteTensor* input_box_encodings;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorBoxEncodings,","&input_box_encodings));"],"label":0}
{"cve":"CVE-2018-9336","code_chunks":["            ReturnLastError(pipe, L\"GetTokenInformation (service token)\");","            goto out;","        }","        free(svc_user);","        svc_user = malloc(len);","        if (svc_user == NULL)","        {"],"label":0}
{"cve":"CVE-2022-1381","code_chunks":["char_u  *orig_cmd = eap->cmd;","char_u  *cmd_start = NULL;","int\t    did_plus_cmd = FALSE;","char_u  *p;","int\t    starts_with_colon = FALSE;","int\t    vim9script = in_vim9script();"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["\"Underscores in numeric literals are only supported in Python 3.6 and greater\");","return NULL;","}","pynum = parsenumber(c, s);","if (!pynum)","return NULL;",""],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["todo[i]   = isix++;","todo[i+1] = buffer >> (14-i)*5;","}","for (i=0; i < 16; i+=2)"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["raise_warning(\"Iv size incorrect; supplied length: %d, needed: %d\",","iv.size(), iv_size);","}","memcpy(iv_s, iv.data(), std::min(iv_size, iv.size()));","","mcrypt_generic_deinit(pm->m_td);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["fw_input_to_output_weights->type);","const int n_fw_output = fw_recurrent_to_output_weights->dims->data[1];","","const TfLiteTensor* bw_recurrent_to_output_weights ="],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["debug_decl(sudo_passwd_verify, SUDOERS_DEBUG_AUTH);","","\/* Simple string compare for systems without crypt(). *\/","matched = !strcmp(pass, pw_passwd);","","debug_return_int(matched ? AUTH_SUCCESS : AUTH_FAILURE);"],"label":1}
{"cve":"CVE-2022-1714","code_chunks":["#else","\tsdb_set (bin->kv, \"elf_s_flags_32.cparse\", \"enum elf_s_flags_32 {SF32_None=0,SF32_Exec=1,\"","\t\t\t\"SF32_Alloc=2,SF32_Alloc_Exec=3,SF32_Write=4,SF32_Write_Exec=5,\"","\t\t\t\"SF32_Write_Alloc=6,SF32_Write_Alloc_Exec=7};\", 0);","\tsdb_set (bin->kv, \"elf_shdr.format\", \"x[4]E[4]Exxxxxxx name (elf_s_type)type\"","\t\t\t\" (elf_s_flags_32)flags addr offset size link info addralign entsize\", 0);","#endif"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2018-1000127","code_chunks":["                stats_prefix_record_get(key, nkey, NULL != it);","            }","            if (it) {","                if (i >= c->isize) {","                    item **new_list = realloc(c->ilist, sizeof(item *) * c->isize * 2);","                    if (new_list) {","                        c->isize *= 2;"],"label":0}
{"cve":"CVE-2022-29339","code_chunks":["bs->EndOfStream(bs->par);","if (!bs->overflow_state) bs->overflow_state = 1;","} else {","GF_LOG(GF_LOG_ERROR, GF_LOG_CORE, (\"[BS] Attempt to overread bitstream\\n\"));","}","assert(bs->position <= 1+bs->size);","return 0;"],"label":1}
{"cve":"CVE-2021-46880","code_chunks":["if (ctx->roots == NULL || ctx->max_depth == 0) {","ctx->error = X509_V_ERR_INVALID_CALL;","goto err;","}","","if (ctx->xsc != NULL) {"],"label":0}
{"cve":"CVE-2017-12595","code_chunks":["bool content_stream)","{","","empty = false;","","QPDFObjectHandle object;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"args\\\" missing from arguments\");","return 1;","}"],"label":1}
{"cve":"CVE-2022-26530","code_chunks":["ZWLR_LAYER_SURFACE_V1_ANCHOR_TOP |","ZWLR_LAYER_SURFACE_V1_ANCHOR_RIGHT |","ZWLR_LAYER_SURFACE_V1_ANCHOR_BOTTOM |","ZWLR_LAYER_SURFACE_V1_ANCHOR_LEFT);","zwlr_layer_surface_v1_set_exclusive_zone(surface->layer_surface, -1);","zwlr_layer_surface_v1_set_keyboard_interactivity("],"label":1}
{"cve":"CVE-2019-15165","code_chunks":["\/* Allocation failed. *\/","*err = 1;","return (NULL);","}","p->swapped = swapped;","ps = p->priv;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["        }","        else {","            int res;","            Py_ssize_t len;","            Py_ssize_t i;","            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"For field \\\"orelse\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"],"label":0}
{"cve":"CVE-2021-26926","code_chunks":["","\treturn 0;","}","","static jp2_dec_t *jp2_dec_create(void)","{","\tjp2_dec_t *dec;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["mod_ty res;","PyObject *req_type[3];","char *req_name[] = {\"Module\", \"Expression\", \"Interactive\", \"FunctionType\"};","int isinstance;","","req_type[0] = (PyObject*)Module_type;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["int iflags = 0;","","assert(expr_end >= expr_start);","assert(*(expr_start-1) == '{');","assert(*expr_end == '}' || *expr_end == '!' || *expr_end == ':');",""],"label":0}
{"cve":"CVE-2022-40299","code_chunks":["            tmp.rtyp=IDHDL;","            tmp.data=h;","            Print(\"(type %s):\\n\",Tok2Cmdname(tmp.Typ()));","            tmp.Print();","          }","          break;","        }"],"label":0}
{"cve":"CVE-2023-27597","code_chunks":["switch(uri->type){","\/* fix tel uris, move the number in uri and empty the host *\/","uri->user=uri->host;","uri->host.s=\"\";","uri->host.len=0;","break;"],"label":1}
{"cve":"PYSEC-2021-160","code_chunks":["errors::InvalidArgument(","\"Rank of input SparseTensor should be > 1, but saw rank: \", rank));","","TensorShape tensor_input_shape(input_shape->vec<int64>());","gtl::InlinedVector<int64, 8> std_order(rank);","std::iota(std_order.begin(), std_order.end(), 0);","SparseTensor input_st;"],"label":1}
{"cve":"CVE-2022-23608","code_chunks":["    \t      pj_hash_get_lower(mod_ua.dlg_table, local_tag->ptr,","                                (unsigned)local_tag->slen, NULL);","    if (dlg_set == NULL) {","\t\/* Not found *\/","\tpj_mutex_unlock(mod_ua.mutex);","\treturn NULL;","    }"],"label":0}
{"cve":"CVE-2021-3610","code_chunks":["\/*","Convert stripped TIFF image.","*\/","extent=2*TIFFStripSize(tiff);","#if defined(TIFF_VERSION_BIG)","extent+=image->columns*sizeof(uint64);","#else"],"label":1}
{"cve":"CVE-2022-1237","code_chunks":["\t\t\tif (!reloc) {","\t\t\t\treturn NULL;","\t\t\t}","\t\t\tNE_image_reloc_item rel;","\t\t\tr_buf_read_at (bin->buf, off, (ut8 *)&rel, sizeof (rel));","\t\t\treloc->paddr = seg->paddr + rel.offset;","\t\t\tswitch (rel.type) {"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["return PyBytes_DecodeEscape(s, len, NULL, 0, NULL);","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["      TF_LITE_ENSURE_OK(","          context, GetTemporarySafe(context, node, kBwActivationStateQuantized,","                                    &bw_activation_state_quantized));","      TfLiteTensor* fw_cell_state_quantized;","      TF_LITE_ENSURE_OK(context,","                        GetTemporarySafe(context, node, kFwCellStateQuantized,","                                         &fw_cell_state_quantized));"],"label":0}
{"cve":"PYSEC-2020-282","code_chunks":["template <typename T>","struct TruncatedNormalFunctor<CPUDevice, T> {","  void operator()(OpKernelContext* ctx, const CPUDevice& d, int64 num_batches,","                  int64 samples_per_batch, int64 num_elements,","                  typename TTypes<T>::ConstFlat means,","                  typename TTypes<T>::ConstFlat stddevs,","                  typename TTypes<T>::ConstFlat minvals,"],"label":0}
{"cve":"CVE-2021-45934","code_chunks":["            rc = SN_Encode_Publish(client->tx_buf, client->tx_buf_len,","                    publish);","        #ifdef WOLFMQTT_DEBUG_CLIENT","            PRINTF(\"MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d,\"","                    \" QoS %d\",","                rc, SN_Packet_TypeDesc(SN_MSG_TYPE_PUBLISH),","                SN_MSG_TYPE_PUBLISH, publish->packet_id,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","auto* params = reinterpret_cast<TfLiteMfccParams*>(node->user_data);","","const TfLiteTensor* input_wav = GetInput(context, node, kInputTensorWav);","const TfLiteTensor* input_rate = GetInput(context, node, kInputTensorRate);"],"label":1}
{"cve":"CVE-2019-13133","code_chunks":["      x_bits_per_pixel,","      y_bits_per_pixel;","","    unsigned int","      location_type,","      location_dimension,","      number_of_images,"],"label":0}
{"cve":"CVE-2015-8631","code_chunks":["static gprincs_ret              ret;","char                            *prime_arg;","gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;","gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;","OM_uint32                       minor_stat;","kadm5_server_handle_t           handle;"],"label":0}
{"cve":"PYSEC-2021-550","code_chunks":["int64 total_size = 0;","for (auto& component : element) {","if (DataTypeCanUseMemcpy(component.dtype())) {","total_size += DMAHelper::buffer(&component)->size();","} else {","non_memcpy_components.emplace_back();","component.AsProtoTensorContent(&non_memcpy_components.back());"],"label":1}
{"cve":"CVE-2018-8784","code_chunks":["\t\t\t\t\t\t\tcount = 4;","\t\t\t\t\t\t\textra = 2;","\t\t\t\t\t\t\tzgfx_GetBits(zgfx, 1);","","\t\t\t\t\t\t\twhile (zgfx->bits == 1)","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\tcount *= 2;"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["{","struct strbuf buf = STRBUF_INIT;","int fd;","FILE *fp;","struct attr_stack *res;","int lineno = 0;"],"label":0}
{"cve":"CVE-2018-10540","code_chunks":["","            if (chunk_header.ckSize > 16 && WaveHeader.cbSize == 2)","                config->qmode |= QMODE_ADOBE_MODE;","","            format = (WaveHeader.FormatTag == 0xfffe && chunk_header.ckSize == 40) ?","                WaveHeader.SubFormat : WaveHeader.FormatTag;",""],"label":0}
{"cve":"PYSEC-2021-617","code_chunks":["","      std::vector<int32> output_node_ids;","      std::vector<float> output_gains;","      std::vector<int32> output_thresholds;","      std::vector<float> output_left_node_contribs;","      std::vector<float> output_right_node_contribs;","      for (int node_id = node_id_first; node_id < node_id_last; ++node_id) {"],"label":0}
{"cve":"CVE-2015-8629","code_chunks":["size = strlen(*objp) + 1;","}","if (! xdr_u_int(xdrs, &size)) {","return FALSE;","}","switch (xdrs->x_op) {","if (size == 0) {"],"label":0}
{"cve":"CVE-2018-5805","code_chunks":["memset (mask, 0, sizeof mask);","thumb_offset = thumb_length = thumb_width = thumb_height = 0;","load_raw = thumb_load_raw = 0;","write_thumb = &CLASS jpeg_thumb;","data_offset = meta_offset = meta_length = tiff_bps = tiff_compress = 0;","kodak_cbpp = zero_after_ff = dng_version = load_flags = 0;"],"label":1}
{"cve":"CVE-2019-13307","code_chunks":["","number_threads=(size_t) GetMagickResourceLimit(ThreadResource);","pixels=(PixelChannels **) AcquireQuantumMemory(number_threads,","sizeof(*pixels));","if (pixels == (PixelChannels **) NULL)","return((PixelChannels **) NULL);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2016-3134","code_chunks":["\tif (*len < sizeof(get)) {","\t\tduprintf(\"compat_get_entries: %u < %zu\\n\", *len, sizeof(get));","\t\treturn -EINVAL;","\t}","","\tif (copy_from_user(&get, uptr, sizeof(get)) != 0)","\t\treturn -EFAULT;"],"label":0}
{"cve":"CVE-2023-30549","code_chunks":["\tint de_len;","","\tde = de_buf;","\tif (old_size) {","\t\tlimit = de_buf + old_size;","\t\tdo {","\t\t\tprev_de = de;"],"label":0}
{"cve":"CVE-2022-24754","code_chunks":["* We respond with selecting \"qop=auth\" protection.","*\/","cred->qop = pjsip_AUTH_STR;","cred->nc.ptr = (char*) pj_pool_alloc(pool, 16);","cred->nc.slen = pj_ansi_snprintf(cred->nc.ptr, 16, \"%08u\", nc);",""],"label":1}
{"cve":"CVE-2023-46853","code_chunks":["}","","const char *s = memchr(command, ' ', cmdlen-2);","if (s != NULL) {","cl = s - command;","} else {"],"label":1}
{"cve":"CVE-2022-1987","code_chunks":["debug_print(\"%s\", \"INDX structure not initialized\\n\");","return MOBI_INIT_FAILED;","}","const size_t entry_offset = indx->entries_count;","const size_t entry_length = idxt.offsets[curr_number + 1] - idxt.offsets[curr_number];","mobi_buffer_setpos(buf, idxt.offsets[curr_number]);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["goto failed;","}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["","t = naf + len - 1;","ep4_set_infty(r);","for (i = len - 1; i >= 0; i--, t--) {","ep4_dbl(r, r);","","n = *t;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int i, j, trc, cof;","int8_t naf[RLC_FB_BITS + 1], *_k;","eb_t q, s, t[1 << (EB_WIDTH - 2)];","bn_t n, m;","fb_t u, v, w, z;","size_t l;"],"label":0}
{"cve":"CVE-2022-1061","code_chunks":["\tif (size < 32) {","\t\treturn NULL;","\t}","\tut8 *b = malloc (size);","\tif (!b) {","\t\treturn NULL;","\t}"],"label":0}
{"cve":"CVE-2020-15191","code_chunks":["              TFE_Py_EncodeArg(o.ptr(), include_tensor_ranks_only));","        });","  m.def(\"TFE_EnableCollectiveOps\", [](const py::handle& ctx, py::bytes proto) {","    tensorflow::Safe_TF_StatusPtr status =","        tensorflow::make_safe(TF_NewStatus());","    tensorflow::Safe_TF_BufferPtr buf =","        tensorflow::make_safe(tensorflow::ProtoStringToTFBuffer(proto.ptr()));"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["    if (PyDict_SetItemString(d, \"FunctionDef\", (PyObject*)FunctionDef_type) <","        0) return NULL;","    if (PyDict_SetItemString(d, \"AsyncFunctionDef\",","        (PyObject*)AsyncFunctionDef_type) < 0) return NULL;","    if (PyDict_SetItemString(d, \"ClassDef\", (PyObject*)ClassDef_type) < 0)","        return NULL;","    if (PyDict_SetItemString(d, \"Return\", (PyObject*)Return_type) < 0) return"],"label":0}
{"cve":"CVE-2020-1921","code_chunks":["  if (!format) {","    return word_count;","  }","  return ret;","}","","int64_t HHVM_FUNCTION(levenshtein,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["          gram[i] = words[stack[i]];","        }","        buf.AddJoinedString(gram, ' ');","      }","                        stack_idx--;","    }","  }"],"label":0}
{"cve":"CVE-2020-11095","code_chunks":["Stream_Write_UINT8(s, orderInfo->orderType); \/* orderType (1 byte) *\/","","update_write_field_flags(s, orderInfo->fieldFlags, orderInfo->controlFlags,","PRIMARY_DRAWING_ORDER_FIELD_BYTES[orderInfo->orderType]);","update_write_bounds(s, orderInfo);","Stream_SetPosition(s, position);","return 0;"],"label":1}
{"cve":"CVE-2021-38171","code_chunks":["int off;","","init_get_bits(&gb, buf, size * 8);","off = avpriv_mpeg4audio_get_config2(&m4ac, buf, size, 1, s);","if (off < 0)","return off;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","","  const TfLiteTensor* multipliers;","  TF_LITE_ENSURE_OK(","      context, GetInputSafe(context, node, kInputMultipliers, &multipliers));"],"label":0}
{"cve":"CVE-2022-21722","code_chunks":["p = (pj_uint8_t*)pkt;","p_end = p + size;","while (p < p_end) {","pjmedia_rtcp_common *common;","unsigned len;",""],"label":0}
{"cve":"PYSEC-2020-114","code_chunks":["(*stride_arr)[i] = (*shape_arr)[i + 1] * (*stride_arr)[i + 1];","}","","dlm_tensor->dl_tensor.shape = &(*shape_arr)[0];"],"label":1}
{"cve":"CVE-2022-37032","code_chunks":["  if (BGP_DEBUG (normal, NORMAL))","    zlog_debug (\"%s rcv CAPABILITY\", peer->host);","","  \/* If peer does not have the capability, send notification. *\/","  if (! CHECK_FLAG (peer->cap, PEER_CAP_DYNAMIC_ADV))","    {","      plog_err (peer->log, \"%s [Error] BGP dynamic capability is not enabled\","],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["auto* output_data = GetTensorData<std::int64_t>(output_tensor);","","Subgraph* subgraph = reinterpret_cast<Subgraph*>(context->impl_);"],"label":1}
{"cve":"CVE-2022-24786","code_chunks":["if (hdr->pt != RTCP_RTPFB || hdr->count != 1)","return PJ_ENOTFOUND;","","cnt = pj_ntohs((pj_uint16_t)hdr->length);"],"label":1}
{"cve":"CVE-2016-9388","code_chunks":["\t\t\t\tz &= RAS_ONES(nz);","\t\t\t}","\t\t}","\t\tif (nz > 0) {","\t\t\tc = (z >> (8 - nz)) & RAS_ONES(nz);","\t\t\tif (jas_stream_putc(out, c) == EOF) {","\t\t\t\tgoto error;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["            PyErr_SetString(PyExc_TypeError, \"required field \\\"id\\\" missing from Name\");","            return 1;","        }","        else {","            int res;","            res = obj2ast_identifier(tmp, &id, arena);","            if (res != 0) goto failed;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","bool requires_broadcast = !HaveSameShapes(input1, input2);","switch (input1->type) {","Comparison<float, reference_ops::LessFn>(input1, input2, output,"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["}","const int input_dims = NumDimensions(input_tensor);","","TfLiteTensor* output_tensor = GetOutput(context, node, 0);","if (IsDynamicTensor(output_tensor)) {","auto output_size = GetPaddedOutputShape(input_tensor, padding_matrix);","if (output_size == nullptr) {"],"label":1}
{"cve":"CVE-2022-35972","code_chunks":["AddInputFromArray<qint32>(TensorShape({value_count}),","{-(1 << 23), 0, (1 << 23)});","AddInputFromArray<float>(TensorShape({1}), {-256.0f});","AddInputFromArray<float>(TensorShape({1}), {256.0f});","AddInputFromArray<float>(TensorShape({1}), {-1.0f});","AddInputFromArray<float>(TensorShape({1}), {1.0f});"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","    const TfLiteTensor* output_shape;","  TF_LITE_ENSURE_OK(","      context, GetInputSafe(context, node, kOutputShapeTensor, &output_shape));","  const TfLiteTensor* weights;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kWeightsTensor, &weights));"],"label":0}
{"cve":"CVE-2018-20180","code_chunks":["\t}","","\tif (g_redirect_flags & LB_TARGET_FQDN)","\t{","\t\tin_uint32_le(s, len);","","\t\t\/* Let target FQDN replace target IP address *\/"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["return Py_None;","}","","result = PyType_GenericNew(withitem_type, NULL, NULL);"],"label":1}
{"cve":"CVE-2022-35941","code_chunks":["TensorShape output_shape;","auto shape_vec = tensor_in_shape.vec<int32>();","for (int64_t i = 0; i < tensor_in_shape.NumElements(); ++i) {","output_shape.AddDim(shape_vec(i));","}","if (output_shape.num_elements() == 0) {","Tensor* output = nullptr;"],"label":1}
{"cve":"CVE-2019-20218","code_chunks":["","\/* Process NATURAL keywords, and ON and USING clauses of joins.","*\/","if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){","return WRC_Abort;","}",""],"label":1}
{"cve":"CVE-2018-20178","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"target\\\" missing from AsyncFor\");","            return 1;","        }","        else {"],"label":0}
{"cve":"CVE-2018-8799","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;"],"label":1}
{"cve":"CVE-2019-11411","code_chunks":["\t\tjsB_propf(J, \"Number.prototype.valueOf\", Np_valueOf, 0);","\t\tjsB_propf(J, \"Number.prototype.toString\", Np_toString, 1);","\t\tjsB_propf(J, \"Number.prototype.toLocaleString\", Np_toString, 0);","\t\tjsB_propf(J, \"Number.prototype.toFixed\", Np_toFixed, 1);","\t\tjsB_propf(J, \"Number.prototype.toExponential\", Np_toExponential, 1);","\t\tjsB_propf(J, \"Number.prototype.toPrecision\", Np_toPrecision, 1);","\t}"],"label":0}
{"cve":"CVE-2023-46853","code_chunks":["size_t _process_request_next_key(mcp_parser_t *pr) {","const char *cur = pr->request + pr->parsed;","int remain = pr->reqlen - pr->parsed - 2;","","while (remain) {","if (*cur == ' ') {"],"label":1}
{"cve":"CVE-2021-43860","code_chunks":["","  return handle_runtime_repo_deps (self, id, dep_url, runtime_repo_keyfile, cancellable, error);","}","","static gboolean","flatpak_transaction_resolve_bundles (FlatpakTransaction *self,","                                     GCancellable       *cancellable,"],"label":0}
{"cve":"CVE-2017-12932","code_chunks":["const unsigned char *cursor, *limit, *marker, *start;","zval *rval_ref;","","limit = max;","cursor = *p;",""],"label":0}
{"cve":"CVE-2021-3997","code_chunks":["}","","subdir_fd = openat(fd, fname, O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC|O_NOFOLLOW|O_NOATIME);","if (subdir_fd < 0)","return -errno;",""],"label":1}
{"cve":"CVE-2018-5809","code_chunks":["{","uchar pixel[10];","unsigned iten = 0, isix, i, buffer = 0, todo[16];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width > 32767 || raw_height > 32767)","throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"CVE-2017-9763","code_chunks":["if (! indir)","return grub_errno;","","if (grub_disk_read (data->disk,","((grub_disk_addr_t)","grub_le_to_cpu32 (inode->blocks.double_indir_block))"],"label":1}
{"cve":"CVE-2022-45909","code_chunks":["url->url_host = szHost ;","url->url_port = szPort ;","","int nChars = sip_name_addr_e(obuf, 255, 0, display, 1, url, params, comment) ;","","if( params ) {","su_free(home, (void *) params) ;"],"label":1}
{"cve":"CVE-2023-43887","code_chunks":["","bool success = new_pps->read(&reader,this);","if (!success) {","return DE265_WARNING_PPS_HEADER_INVALID;","}",""],"label":0}
{"cve":"CVE-2017-17081","code_chunks":["    const int oxs  = ox  >> 4;","    const int oys  = oy  >> 4;","    const int dxxs = dxx >> 4;","    const int dxys = dxy >> 4;","    const int dyxs = dyx >> 4;","    const int dyys = dyy >> 4;","    const uint16_t r4[4]   = { r, r, r, r };"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static int test(void) {","uint8_t out[64];","int len = sizeof(out) \/ 2, code = RLC_ERR;","","TEST_ONCE(\"rdrand hardware generator is non-trivial\") {","memset(out, 0, 2 * len);"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["}","","\/* static *\/ tsl::StatusOr<int64_t> GpuDriver::GetMaxSharedMemoryPerBlock(","    CUdevice device) {","  return GetSimpleAttribute<int64_t>(","      device, CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK);","}"],"label":0}
{"cve":"PYSEC-2022-67","code_chunks":["int TfLiteIntArrayGetSizeInBytes(int size) {","static TfLiteIntArray dummy;","","int computed_size = sizeof(dummy) + sizeof(dummy.data[0]) * size;","#if defined(_MSC_VER)","computed_size -= sizeof(dummy.data[0]);","#endif"],"label":1}
{"cve":"CVE-2022-1296","code_chunks":["break;","reloc->type = R_BIN_RELOC_64;","break;","}","","ut32 offset;"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["<< \"\\noutput_data.opaque() = \" << output_data.opaque();","","if (IsTensorMathOpSet(conv_) != tensor_ops_enabled_) {","return tsl::Status(port::error::FAILED_PRECONDITION,","\"Tensor op math type in dnn::AlgorithmDesc does not \"","\"match that of the CudnnConvolutionDescriptor\");","}"],"label":1}
{"cve":"CVE-2018-20177","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"PYSEC-2020-329","code_chunks":["int max_index = -1;","const int segment_id_size = segment_ids->dims->data[0];","if (segment_id_size > 0) {","max_index = segment_ids->data.i32[segment_id_size - 1];","}","const int data_rank = NumDimensions(data);"],"label":1}
{"cve":"CVE-2016-10250","code_chunks":["uint_fast64_t extlen;","bool dataflag;","","box = 0;","tmpstream = 0;",""],"label":0}
{"cve":"CVE-2022-28927","code_chunks":["try","{","ctx.eval(script);","auto rename = (std::function<std::string(const Proxy&)>) ctx.eval(\"rename\");","returned_remark = rename(node);","if(!returned_remark.empty())"],"label":1}
{"cve":"CVE-2022-4415","code_chunks":["\"SIZE_LIMIT=%\"PRIu64, max_size,","\"MESSAGE_ID=\" SD_MESSAGE_TRUNCATED_CORE_STR);","","r = fix_permissions(fd, tmp, fn, context, uid);","if (r < 0)","return log_error_errno(r, \"Failed to fix permissions and finalize coredump %s into %s: %m\", coredump_tmpfile_name(tmp), fn);",""],"label":1}
{"cve":"CVE-2023-0302","code_chunks":["char *out;","const char *comment = r_meta_get_string (core->anal, R_META_TYPE_COMMENT, addr);","out = r_core_editor (core, NULL, comment);","if (out) {","r_core_cmdf (core, \"CC-@0x%08\"PFMT64x, addr);","r_meta_set_string (core->anal,"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["scaling_factors_size));","}","node->temporaries->data[3] = op_data->scratch_tensor_index + 3;","TfLiteTensor* accum_scratch = GetTemporary(context, node, \/*index=*\/3);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {num_units, batch_size};"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* hash;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &hash));","TF_LITE_ENSURE_EQ(context, NumDimensions(hash), 2);","TF_LITE_ENSURE(context, SizeOfDimension(hash, 1) <= 32);"],"label":0}
{"cve":"CVE-2020-15121","code_chunks":["{","char *p = strstr (ptr, \":\\\\\");","if (p) {","ptr = p + 2;","}","}","#endif"],"label":1}
{"cve":"CVE-2021-36222","code_chunks":["}","","\/* Check for a configured FAST ec auth indicator. *\/","realmstr = k5memdup0(realm.data, realm.length, &retval);","if (realmstr != NULL)","retval = profile_get_string(context->profile, KRB5_CONF_REALMS,","realmstr,"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["GetInput(context, node, kInputTensorBoxEncodings);","const TfLiteTensor* decoded_boxes =","&context->tensors[op_data->decoded_boxes_index];","const int num_boxes = input_box_encodings->dims->data[1];"],"label":1}
{"cve":"PYSEC-2020-115","code_chunks":["if (!status->status.ok()) {","return nullptr;","}","","auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);","if (!status->status.ok()) {"],"label":0}
{"cve":"CVE-2016-6912","code_chunks":["}","gdImageWebpCtx(im, out, quality);","rv = gdDPExtractData(out, size);","out->gd_free(out);","return rv;","}"],"label":1}
{"cve":"CVE-2017-11447","code_chunks":["%                                                                             %","%   R e g i s t e r S C R E E N S H O T I m a g e                             %","%                                                                             %","%                                                                             %","%                                                                             %","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","%"],"label":0}
{"cve":"CVE-2020-15888","code_chunks":["#define checkstackp(L,n,p)  \\"],"label":1}
{"cve":"CVE-2020-1917","code_chunks":["if (length <= 0) {","raise_warning(\"The length must be greater than zero\");","return make_tv<KindOfBoolean>(false);","}","","if (offset < 0) {","offset = s1_len + offset;"],"label":0}
{"cve":"PYSEC-2020-338","code_chunks":["static const char* ConvertScalar(PyObject* v, Eigen::half* out) {","Safe_PyObjectPtr as_float = make_safe(PyNumber_Float(v));","double v_double = PyFloat_AS_DOUBLE(as_float.get());","*out = Eigen::half(v_double);","","return nullptr;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp2_read_bin(fp2_t a, const uint8_t *bin, int len) {","if (len != RLC_FP_BYTES + 1 && len != 2 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":1}
{"cve":"CVE-2020-1712","code_chunks":["if (r < 0) {","\/* Treat no PK available as access denied *\/","if (sd_bus_error_has_name(e, SD_BUS_ERROR_SERVICE_UNKNOWN)) {","sd_bus_error_free(e);","return -EACCES;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["","fb_set_dig(r, 1);","l = RLC_FB_BITS + 1;","bn_rec_slw(win, &l, b, FB_WIDTH);","for (i = 0; i < l; i++) {","if (win[i] == 0) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2019-20630","code_chunks":["pmt->program->pcr_pid = ((data[0] & 0x1f) << 8) | data[1];","","info_length = ((data[2]&0xf)<<8) | data[3];","if (info_length != 0) {","\/* ...Read Descriptors ... *\/","u8 tag, len;","u32 first_loop_len = 0;"],"label":1}
{"cve":"PYSEC-2021-782","code_chunks":["TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {","    if (tuple[index].has_value()) {","      return errors::InvalidArgument(","          \"The tensor for index '\", index, \"' for key '\", key.scalar<int64>()(),","          \"' was already initialized '\", dtypes_.size(), \"'.\");","    }",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","  return kTfLiteOk;","}","","namespace {","void CalculateActivationRangeQuantizedImpl(TfLiteFusedActivation activation,","                                           int32_t qmin, int32_t qmax,"],"label":0}
{"cve":"CVE-2019-6978","code_chunks":["\tint Resolution;","\tint ColorMapSize;","\tint InitCodeSize;","\tint i;","\tGifCtx ctx;","","\tmemset(&ctx, 0, sizeof(ctx));"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["}","","node->temporaries->data[3] = data->scratch_tensor_index + 3;","TfLiteTensor* input_offsets = GetTemporary(context, node, \/*index=*\/3);","input_offsets->type = kTfLiteInt32;","input_offsets->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumDimensions(value), 1);","}","","TfLiteTensor* hits = GetOutput(context, node, 1);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["zero_points_size));","}","node->temporaries->data[5] = op_data->scratch_tensor_index + 5;","TfLiteTensor* row_sums = GetTemporary(context, node, \/*index=*\/5);","row_sums->type = kTfLiteInt32;","row_sums->allocation_type = kTfLiteArenaRwPersistent;","int row_sums_dims[2] = {2, num_units};"],"label":1}
{"cve":"CVE-2016-7532","code_chunks":["p=PushShortPixel(MSBEndian,p,&short_sans);","p=PushLongPixel(MSBEndian,p,&count);","if ((id == 0x000003ed) && (PSDQuantum(count) < (ssize_t) (length-12)))","{","(void) CopyMagickMemory(q,q+PSDQuantum(count)+12,length-","(PSDQuantum(count)+12)-(q-datum));"],"label":1}
{"cve":"PYSEC-2022-141","code_chunks":["  }","  return Status::OK();","}","","Status GetAssetFileDefs(const MetaGraphDef& meta_graph_def,","                        std::vector<AssetFileDef>* asset_file_defs) {","      if (meta_graph_def.asset_file_def_size() > 0) {"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["    return is_enabled;","  }","","  static bool IsEnabledImpl() {","    const char* tf_env_var_val = getenv(EnvVar::kName);","    if (tf_env_var_val != nullptr) {","      absl::string_view tf_env_var_val_str(tf_env_var_val);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"],"label":1}
{"cve":"CVE-2020-27153","code_chunks":["\tqueue_destroy(att->chans, bt_att_chan_free);","","\tfree(att);","}","","static uint16_t io_get_mtu(int fd)","{"],"label":0}
{"cve":"CVE-2018-8798","code_chunks":["x = CVAL(in);","if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int i, n;","int8_t naf[RLC_FP_BITS + 1];","ep4_t t[1 << (EP_WIDTH - 2)];","size_t l;","","RLC_TRY {"],"label":0}
{"cve":"PYSEC-2021-550","code_chunks":["for (auto& component : element) {","if (DataTypeCanUseMemcpy(component.dtype())) {","const TensorBuffer* buffer = DMAHelper::buffer(&component);","if (buffer) {","total_size += buffer->size();","}","} else {"],"label":0}
{"cve":"CVE-2021-40574","code_chunks":["{","u32 i, j, len;","char *sOK;","char szLineConv[1024];","unsigned short *sptr;","","memset(szLine, 0, sizeof(char)*lineSize);"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["  typed_secret.set_name(\"abc.com\");","  auto* dynamic_cvc = typed_secret.mutable_validation_context();","  dynamic_cvc->set_allow_expired_certificate(false);","  dynamic_cvc->mutable_trusted_ca()->set_filename(TestEnvironment::substitute(","      \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/ca_cert.pem\"));","  auto* san_matcher = dynamic_cvc->add_match_typed_subject_alt_names();","  san_matcher->mutable_matcher()->set_exact(\"second san\");"],"label":0}
{"cve":"CVE-2018-10888","code_chunks":["\t\t\tif (cmd & 0x02) ADD_DELTA(off, 8UL);","\t\t\tif (cmd & 0x04) ADD_DELTA(off, 16UL);","\t\t\tif (cmd & 0x08) ADD_DELTA(off, 24UL);","","\t\t\tif (cmd & 0x10) ADD_DELTA(len, 0UL);","\t\t\tif (cmd & 0x20) ADD_DELTA(len, 8UL);","\t\t\tif (cmd & 0x40) ADD_DELTA(len, 16UL);"],"label":0}
{"cve":"CVE-2016-3134","code_chunks":["\t\tt = ip6t_get_target_c(e);","\t\tif (copy_to_user(userptr + off + e->target_offset","\t\t\t\t + offsetof(struct xt_entry_target,","\t\t\t\t\t    u.user.name),","\t\t\t\t t->u.kernel.target->name,","\t\t\t\t strlen(t->u.kernel.target->name)+1) != 0) {","\t\t\tret = -EFAULT;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");"],"label":1}
{"cve":"CVE-2018-14357","code_chunks":["char *buf = mutt_str_strdup(src);","imap_utf_encode(idata, &buf);","","imap_quote_string(dest, dlen, buf);","","FREE(&buf);","}"],"label":1}
{"cve":"CVE-2021-30022","code_chunks":["pps->state = 1;","}","pps->sps_id = gf_bs_read_int_log(bs, 4, \"sps_id\");","if (pps->sps_id >= 16) {","GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] wrong SPS ID %d in PPS\\n\", pps->sps_id));","pps->sps_id=0;","return -1;"],"label":1}
{"cve":"CVE-2023-52266","code_chunks":["LOG_INFO(\"TOO BIG REQUEST WE WILL REFUSE IT! MAX_REQ_SIZE:%d\", MAX_REQ_SIZE);","return -1;","}","LOG_DEBUG(\"read from client: size:%d, content:%s\", read_size, read_buffer);","ssize_t nparsed = http_parser_execute(&_parser, &_settings, read_buffer, read_size);","if (nparsed != read_size) {","std::string err_msg = \"unkonw\";"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;","","TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);","TF_LITE_ENSURE(context,"],"label":1}
{"cve":"PYSEC-2021-552","code_chunks":["const int64_t size = file_pattern_t.NumElements();","OP_REQUIRES(","context, size == 1,","errors::InvalidArgument(","\"Input 0 (file_pattern) must be a string scalar; got a tensor of \",","size, \" elements\"));"],"label":0}
{"cve":"CVE-2023-41337","code_chunks":["\/* server-name *\/","ptls_buffer_push_block(buf, 2, {","if (server_name != NULL)","ptls_buffer_pushv(buf, server_name, strlen(server_name));","});","\/* alpn *\/"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["Py_CLEAR(tmp);","step = NULL;","}"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","if (_PyObject_HasAttrId(obj, &PyId_col_offset)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_col_offset);","if (tmp == NULL) goto failed;","res = obj2ast_int(tmp, &col_offset, arena);"],"label":1}
{"cve":"CVE-2016-3156","code_chunks":["void *ptr)","{","struct net_device *dev = ((struct in_ifaddr *)ptr)->ifa_dev->dev;","struct netdev_notifier_info info;","","netdev_notifier_info_init(&info, dev);"],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["if(len<1) return;   string[len-1]=0;","if(len<3) return;   len = strnlen(string,len-1);","for(int i=len-1; i>=0; i--)","{","if(isspace(string[i]))","string[i]=0;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["int num_inputs = node->inputs->size;","","const TfLiteTensor* t0;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &t0));","TfLiteType input_type = t0->type;","if (axis < 0) axis += t0->dims->size;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["input_type == kTfLiteInt16 || input_type == kTfLiteInt32 ||","input_type == kTfLiteInt64 || input_type == kTfLiteInt8);","for (int i = 0; i < NumOutputs(node); ++i) {","GetOutput(context, node, i)->type = input_type;","}","","auto size_splits = op_context.size_splits;"],"label":1}
{"cve":"PYSEC-2020-135","code_chunks":["const int segment_id_size = segment_ids->dims->data[0];","if (segment_id_size > 0) {","max_index = segment_ids->data.i32[segment_id_size - 1];","}","const int data_rank = NumDimensions(data);","TfLiteIntArray* output_shape = TfLiteIntArrayCreate(NumDimensions(data));"],"label":1}
{"cve":"CVE-2023-1428","code_chunks":["void Encode(Key, const Value& value) {","AddToSummary(Key::key(), EncodedSizeOfKey(Key(), value));","}"],"label":0}
{"cve":"CVE-2021-30020","code_chunks":["si->intra_slice_allowed_flag = gf_bs_read_int_log(bs, 1, \"intra_slice_allowed_flag\");","","pps_id = gf_bs_read_ue_log(bs, \"pps_id\");","if (pps_id >= 64)","return -1;","si->pps = &vvc->pps[pps_id];","si->sps = &vvc->sps[si->pps->sps_id];"],"label":1}
{"cve":"CVE-2019-20392","code_chunks":["","\/* try to find the node *\/","node = NULL;","while ((node = lys_getnext(node, parent, mod, 0))) {","if (!type || (node->nodetype & type)) {","\/* module check *\/","if (lys_node_module(node) != lys_main_module(mod)) {"],"label":1}
{"cve":"CVE-2023-28487","code_chunks":["","    \/* Parse search expression if present *\/","    parse_expr(&search_expr, argv, false);","","    \/* optional regex *\/","    if (pattern) {","\tre = &rebuf;"],"label":0}
{"cve":"CVE-2017-5506","code_chunks":["The directory entry contains an offset.","*\/","offset=(ssize_t)  ReadProfileLong(endian,q+8);","if ((size_t) (offset+number_bytes) > length)","continue;","if (~length < number_bytes)","continue;  \/* prevent overflow *\/"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2017-9520","code_chunks":["RBinInfo *info = binobj ? binobj->info: NULL;","if (info) {","int va = info->has_va;","const char * arch = info->arch;","ut16 bits = info->bits;","ut64 baseaddr = r_bin_get_baddr (r->bin);","\/* Hack to make baddr work on some corner *\/"],"label":1}
{"cve":"CVE-2022-0632","code_chunks":["if (!tree) {","if (val) {","genop_1(s, OP_LOADNIL, cursp());","push();","}","return;"],"label":0}
{"cve":"PYSEC-2020-131","code_chunks":["return shape1.Dims(index1);"],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["{","uchar pixel[10];","unsigned iten = 0, isix, i, buffer = 0, todo[16];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width > 32767 || raw_height > 32767)","throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["goto failed;","}","len = PyList_GET_SIZE(tmp);","names = _Ta3_asdl_seq_new(len, arena);","if (names == NULL) goto failed;","for (i = 0; i < len; i++) {"],"label":1}
{"cve":"CVE-2020-11089","code_chunks":["\ttpdu_write_connection_confirm(s, length - 5);","\tStream_SetPosition(s, em);","\tStream_SealLength(s);","","\tif (transport_write(nego->transport, s) < 0)","\t{","\t\tStream_Free(s, TRUE);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","const int num_elements = NumElements(input);","TF_LITE_ENSURE_EQ(context, num_elements, NumElements(output));","switch (input->type) {"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["}","","\/* static *\/ bool GpuDriver::SynchronizeContext(GpuContext* context) {","ScopedActivateContext activation(context);","CUresult res = cuCtxSynchronize();","if (res != CUDA_SUCCESS) {"],"label":1}
{"cve":"CVE-2017-6448","code_chunks":["sprintf (str, \" v%i:v%i, 0x%\"PFMT64x, vA, vA + 1, lB);","strasm = r_str_concat (strasm, str);","break;","vA = (int) buf[1];"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;"],"label":1}
{"cve":"CVE-2021-41864","code_chunks":["static int prealloc_elems_and_freelist(struct bpf_stack_map *smap)","{","u64 elem_size = sizeof(struct stack_map_bucket) +","(u64)smap->map.value_size;","int err;","","smap->elems = bpf_map_area_alloc(elem_size * smap->map.max_entries,"],"label":0}
{"cve":"CVE-2021-32132","code_chunks":["","i=0;","if (ptr->size<8) return GF_ISOM_INVALID_FILE;","tmp_strsize =(u32)ptr->size;","tmp_str = gf_malloc(sizeof(char)*tmp_strsize);","if (!tmp_str) return GF_OUT_OF_MEM;"],"label":1}
{"cve":"CVE-2018-20406","code_chunks":["static PyObject *","load(UnpicklerObject *self)","{","    PyObject *value = NULL;","    char *s = NULL;","","    self->num_marks = 0;"],"label":0}
{"cve":"PYSEC-2022-77","code_chunks":["\"Number of dimensions must match second dimension of indices. \",","\"Got \", input_shape->shape().dim_size(0),","\" dimensions, indices shape: \",","input_indices->shape().DebugString()));","","int rank = input_shape->NumElements();"],"label":1}
{"cve":"CVE-2018-20459","code_chunks":["int i, j;","char buf[128];","ArmOpcode aop = {.off = off};","for (i = j = 0; i < sizeof (buf) - 1 && str[i]; i++, j++) {","if (str[j] == '#') {","i--; continue;","}"],"label":1}
{"cve":"CVE-2018-8794","code_chunks":["","\t\tif (s->p[0] != (BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED))","\t{","\t\tlogger(Protocol, Error,","\t\t       \"cssp_read_tsrequest(), expected BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, got %x\",","\t\t       s->p[0]);","\t\treturn False;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (_PyObject_HasAttrId(obj, &PyId_name)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_name);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"CVE-2018-8800","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2022-1587","code_chunks":["int length = 1;","int size, offset;","PCRE2_SPTR alternative;","BOOL quit_found = FALSE;","BOOL accept_found = FALSE;","BOOL setsom_found = FALSE;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","const int resource_id = std::hash<std::string>{}(params->table_name);","","TfLiteTensor* resource_handle_tensor;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, kResourceHandleTensor,","&resource_handle_tensor));","auto* resource_handle_data ="],"label":0}
{"cve":"CVE-2022-25885","code_chunks":["","Local<Object> anArray = NEW_ARRAY((int)inBufferSize);","for(int i=0;i<(int)inBufferSize;++i)","anArray->Set(GET_CURRENT_CONTEXT, NEW_NUMBER(i),NEW_NUMBER(inBuffer[i]));",""],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["auto it = name_map_.find(absl::AsciiStrToLower(target));","if (it == name_map_.end()) {","return tsl::Status(","tsl::error::NOT_FOUND,","absl::StrCat(\"Could not find registered platform with name: \\\"\", target,","\"\\\". Available platform names are: \",","absl::StrJoin(InitializedPlatformNamesWithFilter(), \" \")));"],"label":0}
{"cve":"CVE-2020-14147","code_chunks":["static int getnum (const char **fmt, int df) {","if (!isdigit(**fmt))  \/* no number? *\/","return df;  \/* return default value *\/","else {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}"],"label":1}
{"cve":"CVE-2018-10887","code_chunks":["memcpy(res_dp, base + off, len);","res_dp += len;","res_sz -= len;","","}","else if (cmd) {"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["                                     YYABORT;","                                   }","                                   s = NULL;","                                 }","","    break;",""],"label":0}
{"cve":"CVE-2020-15472","code_chunks":["NDPI_SET_BIT(flow->risk, risk);","","fprintf(out, \"[URL: %s[StatusCode: %u]\",","flow->http.url, flow->http.response_status_code);","","if(flow->http.content_type[0] != '\\0')"],"label":1}
{"cve":"CVE-2023-46728","code_chunks":["srcGopher = 1 << (16 + 14), \/\/\/< Gopher server"],"label":1}
{"cve":"CVE-2020-15202","code_chunks":["                                    random::PhiloxRandom gen = random;","            gen.Skip(kReservedSamplesPerOutput * output_idx);","            int16 uniform_remaining = 0;","            UNIFORM(u);","            const double res = -log1p(-u);","            samples_alpha_offset[sample_idx * num_alphas] = static_cast<T>(res);","          }               } else {                                                                                                      const bool alpha_less_than_one = alpha < 1;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["{","PyObject *m, *d;","if (!init_types()) return NULL;","m = PyModule_Create(&_astmodule3);","if (!m) return NULL;","d = PyModule_GetDict(m);","if (PyDict_SetItemString(d, \"AST\", (PyObject*)&AST_type) < 0) return NULL;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_OK(context,","context->ResizeTensor(context, output, output_size));","","TfLiteTensor* output_state = GetOutput(context, node, kOutputState);","TF_LITE_ENSURE_OK(","context, context->ResizeTensor(context, output_state,","TfLiteIntArrayCopy(input_state->dims)));"],"label":1}
{"cve":"CVE-2019-13454","code_chunks":["{","RectangleInfo","bounds;","","register Image","*image,"],"label":0}
{"cve":"CVE-2016-10093","code_chunks":["\t\t}","\t\tif (TIFFIsTiled(out)) {","\t\t\tif (!TIFFGetField(in, TIFFTAG_TILEWIDTH, &tw))","\t\t\t\ttw = w;","\t\t\tif (!TIFFGetField(in, TIFFTAG_TILELENGTH, &tl))","\t\t\t\ttl = l;","\t\t\tbychunk = (tw == tilewidth && tl == tilelength);"],"label":0}
{"cve":"CVE-2021-40562","code_chunks":["*max_enh_width = max_ew;","*max_enh_height = max_eh;","}","","static void naludmx_check_pid(GF_Filter *filter, GF_NALUDmxCtx *ctx)","{"],"label":1}
{"cve":"CVE-2022-39347","code_chunks":["\t\t\tStream_Write_UINT32(output, file->find_data.nFileSizeLow);           \/* EndOfFile *\/","\t\t\tStream_Write_UINT32(output, file->find_data.nFileSizeHigh);          \/* EndOfFile *\/","\t\t\tStream_Write_UINT32(output, file->find_data.nFileSizeLow);     \/* AllocationSize *\/","\t\t\tStream_Write_UINT32(output, file->find_data.nFileSizeHigh);    \/* AllocationSize *\/","\t\t\tStream_Write_UINT32(output, file->find_data.dwFileAttributes); \/* FileAttributes *\/","\t\t\tStream_Write_UINT32(output, (UINT32)length);                   \/* FileNameLength *\/","\t\t\tStream_Write_UINT32(output, 0);                                \/* EaSize *\/"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["size_t fp_size_str(const fp_t a, unsigned int radix) {","bn_t t;","size_t digits = 0;","","bn_null(t);",""],"label":0}
{"cve":"CVE-2017-18017","code_chunks":["tcph = (struct tcphdr *)(skb_network_header(skb) + tcphoff);","tcp_hdrlen = tcph->doff * 4;","","if (len < tcp_hdrlen)","return -1;","","if (info->mss == XT_TCPMSS_CLAMP_PMTU) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["\/* Push non-terminal *\/","int nt = (x >> 8) + NT_OFFSET;","int arrow = x & ((1<<7)-1);","dfa *d1 = PyGrammar_FindDFA(","ps->p_grammar, nt);","if ((err = push(&ps->p_stack, nt, d1,","arrow, lineno, col_offset,"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, 0);","TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","","LeakyReluOpData* data = reinterpret_cast<LeakyReluOpData*>(node->user_data);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["return 1;","}","if (tmp == NULL || tmp == Py_None) {","Py_CLEAR(tmp);","arg = NULL;","}"],"label":0}
{"cve":"CVE-2021-32686","code_chunks":["listener = (struct tls_listener*) pj_ssl_sock_get_user_data(ssock);","","if (accept_status != PJ_SUCCESS) {","if (listener && listener->tls_setting.on_accept_fail_cb) {","pjsip_tls_on_accept_fail_param param;","pj_ssl_sock_info ssi;",""],"label":1}
{"cve":"CVE-2018-20847","code_chunks":["","\/* here calculation of tx0, tx1, ty0, ty1, maxprec, l_dx and l_dy *\/","*p_tx0 = opj_int_max((OPJ_INT32)(p_cp->tx0 + p * p_cp->tdx), (OPJ_INT32)p_image->x0);","*p_tx1 = opj_int_min((OPJ_INT32)(p_cp->tx0 + (p + 1) * p_cp->tdx), (OPJ_INT32)p_image->x1);","*p_ty0 = opj_int_max((OPJ_INT32)(p_cp->ty0 + q * p_cp->tdy), (OPJ_INT32)p_image->y0);","*p_ty1 = opj_int_min((OPJ_INT32)(p_cp->ty0 + (q + 1) * p_cp->tdy), (OPJ_INT32)p_image->y1);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t}","\tif (bn_is_zero(m) || ep2_is_infty(q)) {","\t\tep2_mul(r, p, k);","\t\treturn;","\t}","","\tbn_null(n);"],"label":0}
{"cve":"PYSEC-2019-209","code_chunks":["                                        \" must not be negative.\"));","    TensorShape output_shape;","    output_shape.AddDim(output_rows);","    for (int i = segment_ids.dims(); i < data.dims(); i++) {","      output_shape.AddDim(data.dim_size(i));","    }","    Tensor* output = nullptr;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* in_tensor = GetInput(context, node, 0);","TfLiteTensor* out_tensor = GetOutput(context, node, 0);","TfLiteIntArray* new_size = TfLiteIntArrayCopy(in_tensor->dims);","return context->ResizeTensor(context, out_tensor, new_size);","};"],"label":1}
{"cve":"CVE-2018-5809","code_chunks":["gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,255);","else","gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,65535);","fseek (ifp, data_offset, SEEK_SET);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["    context->ReportError(context, \"Axis Type '%s' is not supported by reverse.\",","                         TfLiteTypeGetName(axis->type));","    return kTfLiteError;","  }","","    if (NumElements(axis) > 1) {","    context->ReportError(context, \"Current does not support more than 1 axis.\");"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (params->type) {","break;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["};","} else if (fail_delegate_node_prepare_) {","reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","return kTfLiteError;","};","} else {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    if (kernel_type == kReference) {","      TF_LITE_LOCAL_RESPONSE_NORM(reference_ops);","    }","    if (kernel_type == kGenericOptimized) {","      TF_LITE_LOCAL_RESPONSE_NORM(optimized_ops);","    }","#undef TF_LITE_LOCAL_RESPONSE_NORM"],"label":0}
{"cve":"CVE-2022-41898","code_chunks":["TF_RETURN_IF_ERROR(","context->allocate_temp(index_type, TensorShape({N}), &row_indices_t));","auto row_indices = row_indices_t.flat<Tindex>();","TF_RETURN_IF_ERROR(wrap_kernel_call(CopyRowIndicesKernel<Tindex>,","\/*device=*\/device, \/*size=*\/N, rank,"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from arg\");","return 1;","}"],"label":1}
{"cve":"CVE-2022-35977","code_chunks":["        return;","    }","","    o = lookupKeyWrite(c->db,c->argv[1]);","    if (o == NULL) {","        \/* Return 0 when setting nothing on a non-existing string *\/","        if (sdslen(value) == 0) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      return EvalFloat(input, input_weights, recurrent_weights, bias, params,","                       hidden_state, output);","    case kTfLiteInt8: {","            TfLiteTensor* input_quantized;","      TF_LITE_ENSURE_OK(context,","                        GetTemporarySafe(context, node, 0, &input_quantized));","      TfLiteTensor* hidden_state_quantized;"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["#endif","","    if (!m_AppConfig->getCryptoEnabled()) {","        args << \"--disable-crypto\";","    }","","#if defined(Q_OS_WIN)"],"label":0}
{"cve":"CVE-2021-27097","code_chunks":[" *   | |-o fdt-2"," *   |"," *   |-o configurations"," *     |-o config-1"," *     | |-fdt = fdt-1"," *     |"," *     |-o config-2"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["    if (PyDict_SetItemString(d, \"BitXor\", (PyObject*)BitXor_type) < 0) return","        NULL;","    if (PyDict_SetItemString(d, \"BitAnd\", (PyObject*)BitAnd_type) < 0) return","        NULL;","    if (PyDict_SetItemString(d, \"FloorDiv\", (PyObject*)FloorDiv_type) < 0)","        return NULL;","    if (PyDict_SetItemString(d, \"unaryop\", (PyObject*)unaryop_type) < 0) return"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["}","","const TfLiteIntArray* input_shape = input0->dims;","TfLiteIntArray* output_shape = TfLiteIntArrayCreate(dimension_size);","int i = 0;","for (int index = 0; index < dimension_size; ++index) {"],"label":1}
{"cve":"CVE-2021-45943","code_chunks":["return;","}","","seg_data.SetSize((int)data_size - 1024);","","ReadFromFile(seg_data.buffer, 0, data_size - 1024);",""],"label":1}
{"cve":"PYSEC-2021-843","code_chunks":["","void ComputeAsync(OpKernelContext* context, DoneCallback done) final {","const Tensor& input = context->input(0);","const Tensor& rhs = context->input(1);","const int ndims = input.dims();","const int64 n = input.dim_size(ndims - 1);"],"label":0}
{"cve":"CVE-2019-16163","code_chunks":["Node* qn;","Node** tp;","unsigned int parse_depth;","","group = 0;","*np = NULL;"],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["}","cc += 1 + LINK_SIZE;","break;","","CASE_ITERATOR_PRIVATE_DATA_1","if (PRIVATE_DATA(cc))"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_bitmap_cache_capability_set(wStream* s, rdpSettings* settings)","{","WINPR_UNUSED(settings);","if (Stream_GetRemainingLength(s) < 36)","return FALSE;","","Stream_Seek_UINT32(s); \/* pad1 (4 bytes) *\/"],"label":0}
{"cve":"CVE-2018-18585","code_chunks":["static int chmd_error(struct mschm_decompressor *base) {","  struct mschm_decompressor_p *self = (struct mschm_decompressor_p *) base;","  return (self) ? self->error : MSPACK_ERR_ARGS;","}","","\/***************************************"," * READ_OFF64"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2018-20176","code_chunks":["\t\t\t\t\tx = CVAL(in);","\t\t\t\t\tif (x & 1)","\t\t\t\t\t{","\t\t\t\t\t\tx = x >> 1;","\t\t\t\t\t\tx = x + 1;","\t\t\t\t\t\tcolor = -x;","\t\t\t\t\t}"],"label":0}
{"cve":"CVE-2020-14404","code_chunks":["","    rect.r.x = Swap16IfLE(x);","    rect.r.y = Swap16IfLE(y);","    rect.r.w = Swap16IfLE(w);","    rect.r.h = Swap16IfLE(h);","    rect.encoding = Swap32IfLE(rfbEncodingCoRRE);",""],"label":0}
{"cve":"CVE-2017-12664","code_chunks":["}","if (one_row != (unsigned char *) NULL)","one_row=(unsigned char *) RelinquishMagickMemory(one_row);","if (lastrow != (unsigned char *) NULL)","lastrow=(unsigned char *) RelinquishMagickMemory(lastrow);"],"label":1}
{"cve":"CVE-2016-4562","code_chunks":["        *clone_info;","","      if (primitive_info->text == (char *) NULL)","        break;","      clone_info=CloneDrawInfo((ImageInfo *) NULL,draw_info);","      (void) CloneString(&clone_info->text,primitive_info->text);","      (void) FormatLocaleString(geometry,MagickPathExtent,\"%+f%+f\","],"label":0}
{"cve":"CVE-2020-35534","code_chunks":["      int32_t compHdrRoundedBits = (dataPtr[8] >> 1) & 3;","      comp->supportsPartial = (dataPtr[8] & 8) != 0;","","      comp->dataOffset = compOffset;","      comp->tileFlag = tile->tileFlag;","","      compOffset += comp->compSize;"],"label":0}
{"cve":"CVE-2023-0302","code_chunks":["bool is_string = (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string);","bool is_valid_string_form = is_string && attribute->string.content;","if (attribute->attr_name == DW_AT_comp_dir && is_valid_string_form) {","const char *name = attribute->string.content;","sdb_set (sdb, \"DW_AT_comp_dir\", name, 0);"],"label":1}
{"cve":"CVE-2019-19922","code_chunks":["\t\t\tbusiest = rq;","\t\t}","\t}","","\treturn busiest;","}",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputDataTensor, &data));","const TfLiteTensor* segment_ids;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputSegmentIdsTensor,","&segment_ids));","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_write_bin(uint8_t *bin, int len, const bn_t a);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["node->temporaries = TfLiteIntArrayCreate(1);","}","node->temporaries->data[kScratchBuffer] =","scratch_tensor_index + kScratchBuffer;","","TfLiteTensor* scratch_buffer = GetTemporary(context, node, kScratchBuffer);"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["}","var_len_shift = 0;","chunk_delta[i] = 0;","if (*hmp_chunk[i] < 0x80) {","do {","chunk_delta[i] = chunk_delta[i] + ((*hmp_chunk[i] & 0x7F) << var_len_shift);","var_len_shift += 7;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static void ep_mul_sim_plain(ep_t r, const ep_t p, const bn_t k, const ep_t q,","const bn_t m, const ep_t *t) {","int i, l, l0, l1, w, gen;","int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], n0, n1, *u, *v;","ep_t t0[1 << (EP_WIDTH - 2)];","ep_t t1[1 << (EP_WIDTH - 2)];"],"label":1}
{"cve":"CVE-2018-20458","code_chunks":["\tif (!(dbuf = r_buf_new ())) {","\t\teprintf (\"new (dbuf)\\n\");","\t\tfree (ret);","\t\treturn NULL;","\t}","\taddend = mh->magic == MH_MAGIC? sizeof (struct mach_header) : sizeof (struct mach_header_64);","\tr_buf_set_bytes (dbuf, data, addend);"],"label":0}
{"cve":"PYSEC-2020-318","code_chunks":["        errors::InvalidArgument(\"Fill string must be one or fewer characters\"));","    OP_REQUIRES(ctx, !(scientific && shortest),","                errors::InvalidArgument(","                    \"Cannot select both scientific and shortest notation\"));","","    format_ = \"%\";","    if (!fill_string.empty()) {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output = GetOutput(context, node, 0);","if (output->type == kTfLiteInt16) {","TF_LITE_ENSURE(context, input->type == kTfLiteInt8 ||","input->type == kTfLiteUInt8 ||"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  TfLiteTensor* variable_tensor = variable->GetTensor();","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputValue, &output));","","  TF_LITE_ENSURE_TYPES_EQ(context, variable_tensor->type, output->type);","  TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["bn_t a, b, c, d[3], e[3];","crt_t crt;","dig_t f;","size_t len;","","bn_null(a);","bn_null(b);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["","\t\tl0 = l1 = RLC_FP_BITS + 1;","\t\tbn_rec_naf(naf0, &l0, b, FP_WIDTH);","\t\tbn_rec_naf(naf1, &l1, d, FP_WIDTH);","","\t\tl = RLC_MAX(l0, l1);","\t\tif (bn_sign(b) == RLC_NEG) {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const float* input_data = GetTensorData<float>(input);","const TfLiteTensor* fft_length;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFftLengthTensor, &fft_length));"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["}","else {","int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (positions->type == kTfLiteInt32) {","switch (input->type) {"],"label":1}
{"cve":"CVE-2019-20628","code_chunks":["\t\t\tafext_bytes-=2;","\t\t}","\t\tif (pwr_flag) {","\t\t\taf_extension += 3;","\t\t\tif (afext_bytes<3) {","\t\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MPEG-2 TS] PID %d: Bad Adaptation Extension found\\n\", pid));","\t\t\t\treturn;"],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["GFile                       *sideload_path,","GBytes                      *metadata,","GBytes                      *old_metadata,","GError                     **error)","{","g_debug (\"marking op %s:%s resolved to %s\", kind_to_str (op->kind), flatpak_decomposed_get_ref (op->ref), commit ? commit : \"-\");"],"label":0}
{"cve":"CVE-2017-6436","code_chunks":["","static int is_ascii_string(char* s, int len)","{","  int ret = 1, i = 0;","  for(i = 0; i < len; i++)","  {","      if ( !isascii( s[i] ) )"],"label":0}
{"cve":"CVE-2023-4778","code_chunks":["\t}","\treturn 0;","}","","static Bool check_keyword(GF_BTParser *parser, char *str, s32 *val)","{","\ts32 res;"],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["{","HTTPContext *s = h->priv_data;","URLContext *old_hd = s->hd;","int64_t old_off = s->off;","uint8_t old_buf[BUFFER_SIZE];","int old_buf_size, ret;","AVDictionary *options = NULL;"],"label":1}
{"cve":"CVE-2021-4173","code_chunks":["","sourcing_lnum_top = SOURCING_LNUM;","","if (get_function_body(eap, &newlines, line_arg, &line_to_free) == FAIL","|| eap->skip)","goto erret;",""],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["}","for (c=0; c < 16; c+=2) {","i = len[((c & 1) << 1) | (c >> 3)];","RAW(row,col+c) = ((signed) ph1_bits(i) << (32-i) >> (32-i)) +","(dir ? RAW(row+(~c | -2),col+c) : col ? RAW(row,col+(c | -2)) : 128);","if (c == 14) c = -1;"],"label":1}
{"cve":"CVE-2017-11368","code_chunks":["if (code) {","*status = \"INVALID_S4U2SELF_CHECKSUM\";","krb5_free_pa_for_user(kdc_context, for_user);","return code;","}",""],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);","  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);","","  return context->ResizeTensor(context, output, output_shape);","}"],"label":0}
{"cve":"CVE-2020-19490","code_chunks":["\/\/ #include <iostream> \/\/ debug"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\t}","\t\t\t}","\t\t}","\t\teb_norm(r, r);","\t}","\tRLC_CATCH_ANY {","\t\tRLC_THROW(ERR_CAUGHT);"],"label":0}
{"cve":"CVE-2020-27153","code_chunks":["{","struct att_send_op *op = data;","","if (op->destroy)","op->destroy(op->user_data);",""],"label":0}
{"cve":"CVE-2020-1712","code_chunks":["                hashmap_remove(q->registry, q->request);","","        sd_bus_message_unref(q->request);","        sd_bus_message_unref(q->reply);","","        free(q->action);","        strv_free(q->details);"],"label":0}
{"cve":"PYSEC-2021-451","code_chunks":["&input_st));","","auto input_shape_t = input_shape->vec<int64>();","const int64 N = input_shape_t(0);","","Tensor sparse_handles(DT_INT64, TensorShape({N}));"],"label":1}
{"cve":"CVE-2017-6802","code_chunks":["ALLOCCHECK_CHAR(dst);","memcpy(dst, comp_Prebuf.data, comp_Prebuf.size);","out = comp_Prebuf.size;","while (out < (comp_Prebuf.size + uncompressedSize)) {","flags = (flagCount++ % 8 == 0) ? src[in++] : flags >> 1;","if ((flags & 1) == 1) {         unsigned int offset = src[in++];","unsigned int length = src[in++];"],"label":1}
{"cve":"PYSEC-2022-93","code_chunks":["if (width != static_cast<int64_t>(decode.width) || width <= 0 ||","width >= (1LL << 27) || height != static_cast<int64_t>(decode.height) ||","height <= 0 || height >= (1LL << 27) || total_size >= (1LL << 29)) {","png::CommonFreeDecode(&decode);","OP_REQUIRES(context, false,","errors::InvalidArgument(\"PNG size too large for int: \",","decode.width, \" by \", decode.height));"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2022-0521","code_chunks":["RBinJavaAttrInfo *attr;","ut32 i = 0;","if (!buffer || sz < 1) {","return NULL;","}","attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);"],"label":1}
{"cve":"CVE-2021-32847","code_chunks":["break;","\/* We currently limit the discard to one segment in the initial negotiation","so expect exactly one correctly-sized payload descriptor. *\/","assert(iov[1].iov_len = sizeof(struct virtio_blk_discard_write_zeroes));","assert(n == 2);","vbdiscard = iov[1].iov_base;","io->io_req.br_offset = (off_t) vbdiscard->sector * DEV_BSIZE;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2018-13006","code_chunks":["fprintf(trace, \" maxPicWidth=\\\"%u\\\" maxPicHeight=\\\"%u\\\"\", op->maxPicWidth, op->maxPicHeight);","fprintf(trace, \" maxChromaFormat=\\\"%u\\\" maxBitDepth=\\\"%u\\\"\", op->maxChromaFormat, op->maxBitDepth);","fprintf(trace, \" frame_rate_info_flag=\\\"%u\\\" bit_rate_info_flag=\\\"%u\\\"\", op->frame_rate_info_flag, op->bit_rate_info_flag);","if (op->frame_rate_info_flag)"],"label":1}
{"cve":"CVE-2019-13221","code_chunks":["   if (!vorbis_decode_packet(f, &len, &left, &right)) {","      f->channel_buffer_start = f->channel_buffer_end = 0;","      return 0;","   }","","   len = vorbis_finish_frame(f, len, left, right);","   for (i=0; i < f->channels; ++i)"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output_tensor));","","  Subgraph* subgraph = reinterpret_cast<Subgraph*>(context->impl_);","  auto& resources = subgraph->resources();","  auto* lookup = resource::GetHashtableResource(&resources, resource_id);","  TF_LITE_ENSURE(context, lookup != nullptr);","  TF_LITE_ENSURE_STATUS("],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &tensor0));","    TfLiteTensor* tensor1;","    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &tensor1));","","    TfLiteIntArray* newSize = TfLiteIntArrayCopy(tensor0->dims);","    TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, tensor1, newSize));",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"],"label":1}
{"cve":"CVE-2018-13006","code_chunks":["\t\t\t\tif (!is_new_line) {","\t\t\t\t\tsize_t sl;","\t\t\t\t\tchar szChar[30];","\t\t\t\t\ts16 swT[2], *swz;","\t\t\t\t\tswT[0] = utf16Line[j];","\t\t\t\t\tswT[1] = 0;","\t\t\t\t\tswz= (s16 *)swT;"],"label":0}
{"cve":"CVE-2018-8793","code_chunks":["\tmcs_send_to_channel(s, MCS_GLOBAL_CHANNEL);","}","","\/* Receive an MCS transport data packet *\/","STREAM","mcs_recv(uint16 * channel, RD_BOOL * is_fastpath, uint8 * fastpath_hdr)","{"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["CryptoKey& session_key) { return false; }"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["      TfLiteTensor* zero_points;","      TF_LITE_ENSURE_OK(context,","                        GetTemporarySafe(context, node, 4, &zero_points));","      TfLiteTensor* row_sums;","      TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, 5, &row_sums));","      return EvalHybrid(input, input_weights, recurrent_weights, bias, params,","                        input_quantized, hidden_state_quantized,"],"label":0}
{"cve":"CVE-2018-14017","code_chunks":["\t}","\toffset += 6;","\tattr->type = R_BIN_JAVA_ATTR_TYPE_CODE_ATTR;","\tattr->info.code_attr.max_stack = R_BIN_JAVA_USHORT (buffer, offset);","\toffset += 2;","\tattr->info.code_attr.max_locals = R_BIN_JAVA_USHORT (buffer, offset);","\toffset += 2;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["GetTemporary(context, node, kAuxInputScalingFactors);","aux_input_sf->type = kTfLiteFloat32;","aux_input_sf->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(aux_input_sf->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;"],"label":1}
{"cve":"CVE-2016-10012","code_chunks":["","\treturn (0);","}","","int","mm_answer_gss_accept_ctx(int sock, Buffer *m)","{"],"label":0}
{"cve":"CVE-2022-41860","code_chunks":["","\/*"," * definitions changed to take a buffer for unknowns"," * as this is more thread safe."," *\/","static char const *simstates[] = { \"init\", \"start\", NULL };",""],"label":0}
{"cve":"CVE-2020-11087","code_chunks":["return SEC_E_INTERNAL_ERROR;","}","","CopyMemory(context->AuthenticateMessage.pvBuffer, Stream_Buffer(s), length);","buffer->cbBuffer = length;",""],"label":1}
{"cve":"CVE-2022-42898","code_chunks":["    p = (unsigned char *)client_info.data;","    pac_nt_authtime = load_64_le(p);","    p += 8;","    pac_princname_length = load_16_le(p);","    p += 2;","","    ret = k5_time_to_seconds_since_1970(pac_nt_authtime, &pac_authtime);"],"label":0}
{"cve":"PYSEC-2020-283","code_chunks":["\"Cannot select both scientific and shortest notation\"));","format_ = \"%\";","if (width > -1) {","strings::Appendf(&format_, \"%s%d\", fill_string.c_str(), width);","}","if (precision > -1) {","strings::Appendf(&format_, \".%d\", precision);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["output_state_quantized->type = input_to_output_weights->type;","output_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(output_state_quantized->dims,"],"label":1}
{"cve":"CVE-2019-12973","code_chunks":["OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height)","{","OPJ_UINT32 x, y, written;","OPJ_UINT8 *pix;","const OPJ_UINT8 *beyond;",""],"label":0}
{"cve":"CVE-2019-19057","code_chunks":["return ret;","}","","\/*","* This function downloads the boot command to device","*\/"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["","break;","","if (!gcc_read_server_multitransport_channel_data(s, mcs))","{","WLog_ERR(TAG, \"gcc_read_server_data_blocks: \"","\"gcc_read_server_multitransport_channel_data failed\");"],"label":1}
{"cve":"CVE-2023-0358","code_chunks":["}","","if ((ar->type != GF_VVC_NALU_DEC_PARAM) && (ar->type != GF_VVC_NALU_OPI))","nalucount = gf_bs_read_int(bs, 16);","else","nalucount = 1;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["","\/* If we're just a constant string with no expressions, return","that. *\/","if(state->expr_list.size == 0) {","if (!state->last_str) {","\/* Create a zero length string. *\/","state->last_str = PyUnicode_FromStringAndSize(NULL, 0);"],"label":1}
{"cve":"CVE-2022-1714","code_chunks":["}","Elf_(Verdef) *defs = calloc (shdr->sh_size, 1);","if (!defs) {","R_LOG_ERROR (\"Cannot allocate memory (Check Elf_(Verdef))\");","return false;","}","if (bin->shstrtab && shdr->sh_name < bin->shstrtab_size) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));",""],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_HasAttrId(obj, &PyId_context_expr)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_context_expr);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void ed_write_bin(uint8_t *bin, int len, const ed_t a, int pack);"],"label":1}
{"cve":"CVE-2023-28487","code_chunks":["list_session(char *log_dir, regex_t *re, const char *user, const char *tty)","{","char idbuf[7], *idstr, *cp;","struct eventlog *evlog = NULL;","const char *timestr;","int ret = -1;"],"label":1}
{"cve":"CVE-2022-4202","code_chunks":["\t\t\t\t\/*either error or text content*\/","\t\t\t}","\t\t}","\t}","\tif (!skip_init) gf_node_init((GF_Node*)elt);","}",""],"label":0}
{"cve":"CVE-2023-4720","code_chunks":["static s16 swf_get_s16(SWFReader *read)","{","return (s16) gf_bs_read_u16_le(read->bs);","}","","static u32 swf_get_color(SWFReader *read)"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["RLC_TRY {","bn_new(n);","bn_new(_k);","for (i = 0; i < (1 << (EP_WIDTH - 1)); i ++) {","ep_null(t[i]);","ep_new(t[i]);","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["reinterpret_cast<TfLiteSpaceToDepthParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["if (fc_params->weights_format != kTfLiteFullyConnectedWeightsFormatDefault) {","return false;","}","const TfLiteTensor* input = GetInput(context, node, kInput);"],"label":1}
{"cve":"CVE-2023-30186","code_chunks":["\t\tglobal_js->call_func(\"NativeOpenFileData\", 3, args_open);","\t\tif (try_catch->Check())","\t\t\tbIsBreak = true;","\t}","","\tif (!bIsBreak)","\t\tbIsBreak = !this->ExecuteCommand(L\"Api.asc_nativeInitBuilder();\");"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2020-19488","code_chunks":["if (sub_type == GF_ISOM_BOX_TYPE_DATA ) {","e = gf_isom_box_parse(&a, bs);","","if (!e && ptr->size < a->size) {","GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[isom] not enough bytes in box %s: %d left, reading %d (file %s, line %d)\\n\", gf_4cc_to_str(ptr->type), ptr->size, a->size, __FILE__, __LINE__ )); \\","e = GF_ISOM_INVALID_FILE;","}"],"label":1}
{"cve":"CVE-2016-10250","code_chunks":["uint_fast64_t extlen;","bool dataflag;","","box = 0;","tmpstream = 0;",""],"label":0}
{"cve":"CVE-2019-25078","code_chunks":["char *sanitized_url = str_replace(url, \"'\", \"%27\");","if (strchr(host, '\\'')) {","print_error(\"%s %s\\n\", error_prefix,","\"Invalid hostname: hostname can't have single quotes.\");"],"label":1}
{"cve":"CVE-2019-12107","code_chunks":["if(!obj->buffer) {","syslog(LOG_ERR, \"%s: malloc returned NULL\", \"upnp_event_prepare\");","if(xml) {","free(xml);","}","obj->state = EError;"],"label":1}
{"cve":"CVE-2021-3658","code_chunks":["return false;","}","","if (defaults->link_supervision_timeout) {","if (!mgmt_tlv_add_fixed(list, 0x0006,","&defaults->link_supervision_timeout))"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["          for (int i = 0; i < input_dims_size; ++i) {","            TF_LITE_ENSURE(context,","                           output->dims->data[i] == input1->dims->data[i]);","          }","          return kTfLiteOk;","        };","      } else if (fail_delegate_node_prepare_) {"],"label":0}
{"cve":"CVE-2021-32139","code_chunks":["\t\ttxt->font_table->fonts[i].fontID = desc->fonts[i].fontID;","\t\tif (desc->fonts[i].fontName) txt->font_table->fonts[i].fontName = gf_strdup(desc->fonts[i].fontName);","\t}","\treturn e;","}","",""],"label":0}
{"cve":"CVE-2019-9718","code_chunks":["break;","tag_close = in[1] == '\/';","len = 0;","if (sscanf(in+tag_close+1, \"%127[^<>]>%n\", buffer, &len) >= 1 && len > 0) {","const char *tagname = buffer;","while (*tagname == ' ')","tagname++;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","TF_LITE_ENSURE(context,"],"label":1}
{"cve":"CVE-2019-11924","code_chunks":["  addToQueue(\"17030100050123456789\");","  EXPECT_CALL(*readAead_, _decrypt(_, _, 0))","      .WillOnce(Invoke([](std::unique_ptr<IOBuf>& buf, const IOBuf*, uint64_t) {","        expectSame(buf, \"0123456789\");","        return getBuf(\"16000000\");","      }));","  EXPECT_ANY_THROW(read_.read(queue_));"],"label":0}
{"cve":"CVE-2019-13310","code_chunks":["{","index_image=GetImageFromList(_images,index-1);","if (index_image == (Image *) NULL)","CLIWandExceptArgBreak(OptionError,\"NoSuchImage\",option,arg1);","InsertImageInList(&index_image,insert_image);","}","_images=GetFirstImageInList(index_image);"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["        filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/ca_cert.pem\"","      - san_type: DNS","          exact: \"example.com\"",")EOF\";","","  TestUtilOptions test_options(client_ctx_yaml, server_ctx_yaml, false, GetParam());","  testUtil(test_options.setExpectedServerStats(\"ssl.fail_verify_no_cert\"));"],"label":0}
{"cve":"CVE-2017-12668","code_chunks":[],"label":1}
{"cve":"CVE-2022-1886","code_chunks":["\t\temsg(_(e_resulting_text_too_long));","\t\tbreak;","\t    }","","\t    totlen = count * (yanklen + spaces) + bd.startspaces + bd.endspaces;","\t    newp = alloc(totlen + oldlen + 1);","\t    if (newp == NULL)"],"label":0}
{"cve":"CVE-2022-1714","code_chunks":["\t}","","\tif (!(bin->shstrtab = calloc (1, bin->shstrtab_size + 1))) {","\t\tr_sys_perror (\"malloc\");","\t\tbin->shstrtab = NULL;","\t\treturn false;","\t}"],"label":0}
{"cve":"CVE-2022-23608","code_chunks":["PJ_ASSERT_RETURN(dlg->dlg_set, PJ_EINVALIDOP);","","\/* Lock user agent. *\/","pj_mutex_lock(mod_ua.mutex);","","\/* Find this dialog from the dialog set. *\/"],"label":1}
{"cve":"CVE-2023-23557","code_chunks":["      (!excludedItems || !excludedItems->isProxyObject()) &&","      \"excludedItems internal List is a Proxy\");","","            if (source->isProxyObject() || source->isHostObject() ||","      source->getClass(runtime)->getMayHaveAccessor()) {","    return copyDataPropertiesSlowPath_RJS(","        runtime, target, source, excludedItems);"],"label":0}
{"cve":"CVE-2019-20393","code_chunks":["break;","","","{ if (yang_read_extcomplex_str(trg, ext_instance, \"namespace\", ext_name, s,","0, LY_STMT_NAMESPACE)) {","YYABORT;","}"],"label":1}
{"cve":"PYSEC-2020-282","code_chunks":["const int32 last_tree = resource->num_trees() - 1;","","auto do_work = [&resource, &bucketized_features, &output_debug_info,","last_tree](int32 start, int32 end) {","for (int32 i = start; i < end; ++i) {","boosted_trees::DebugOutput example_debug_info;","const auto& tree_logits = resource->node_value(0, 0);"],"label":1}
{"cve":"CVE-2021-32139","code_chunks":["ISOM_DECREASE_SIZE(ptr, 8);","e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);","if (e) return e;","if (!ptr->size) {","ptr->textJustification = 1;","return GF_OK;"],"label":0}
{"cve":"CVE-2022-43995","code_chunks":["* Truncate to 8 chars if standard DES since not all crypt()'s do this.","* If this turns out not to be safe we will have to use OS #ifdef's (sigh).","*\/","sav = pass[8];","pw_len = strlen(pw_epasswd);","if (pw_len == DESLEN || HAS_AGEINFO(pw_epasswd, pw_len))"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["noffset = fdt_next_node(fit, images_noffset, &ndepth);","while (noffset >= 0 && ndepth > 0) {","if (ndepth != 1)","goto next_node;","","fit_image_name = (char *)fit_get_name(fit, noffset, NULL);"],"label":1}
{"cve":"CVE-2021-33910","code_chunks":["int unit_name_path_escape(const char *f, char **ret) {","char *p, *s;","","assert(f);","assert(ret);"],"label":1}
{"cve":"CVE-2022-23558","code_chunks":["size_t TfLiteIntArrayGetSizeInBytes(int size) {","static TfLiteIntArray dummy;","","size_t computed_size = sizeof(dummy) + sizeof(dummy.data[0]) * size;","#if defined(_MSC_VER)","computed_size -= sizeof(dummy.data[0]);","#endif"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["accum_scratch_size));","}","node->temporaries->data[4] = op_data->scratch_tensor_index + 4;","TfLiteTensor* zero_points = GetTemporary(context, node, \/*index=*\/4);","zero_points->type = kTfLiteInt32;","zero_points->allocation_type = kTfLiteArenaRw;","int zero_points_dims[1] = {batch_size};"],"label":1}
{"cve":"CVE-2016-2315","code_chunks":["finish_object(obj, path, component, cb_data);","if (info->flags & REV_LIST_QUIET)","return;","show_object_with_name(stdout, obj, path, component);","}",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["GetTensorData<int>(fft_integer_working_area);","","TfLiteTensor* fft_double_working_area =","GetTemporary(context, node, kFftDoubleWorkingAreaTensor);","double* fft_double_working_area_data = reinterpret_cast<double*>(","GetTensorData<int64_t>(fft_double_working_area));"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static int log_radix(unsigned int radix) {","int l = 0;","","while (radix > 0) {"],"label":0}
{"cve":"CVE-2022-28068","code_chunks":["could make malicious resource exhaustion attack, so a depth counter might be cool? *\/","VariableLocation *location = parse_dwarf_location (ctx, frame_base, NULL);","if (location) {","location->offset += offset;","return location;","}"],"label":1}
{"cve":"CVE-2022-29228","code_chunks":["  const CookieNames& cookie_names = config_->cookieNames();","","  response_headers->addReferenceKey(","      Http::Headers::get().SetCookie,","      absl::StrCat(cookie_names.oauth_hmac_, \"=\", encoded_token, cookie_tail_http_only));","  response_headers->addReferenceKey(","      Http::Headers::get().SetCookie,"],"label":0}
{"cve":"CVE-2023-25667","code_chunks":["            p_dst[j * channel + 1] = 0;","            p_dst[j * channel + 2] = 0;","          }","        }","      }","","      imgLeft = std::max(imgLeft, 0);"],"label":0}
{"cve":"CVE-2020-23930","code_chunks":["\t\tif (!e) e = gf_dasher_enable_rap_splitting(dasher, seg_at_rap, frag_at_rap);","\t\tif (!e) e = gf_dasher_set_segment_marker(dasher, segment_marker);","\t\tif (!e) e = gf_dasher_enable_sidx(dasher, (subsegs_per_sidx>=0) ? 1 : 0, (u32) subsegs_per_sidx, daisy_chain_sidx, use_ssix);","\t\tif (!e) e = gf_dasher_set_dynamic_mode(dasher, dash_mode, mpd_update_time, time_shift_depth, mpd_live_duration);","\t\tif (!e) e = gf_dasher_set_min_buffer(dasher, min_buffer);","\t\tif (!e) e = gf_dasher_set_ast_offset(dasher, ast_offset_ms);","\t\tif (!e) e = gf_dasher_enable_memory_fragmenting(dasher, memory_frags);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["FrontendReset(data->state);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["                PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Py_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT32 frameAcknowledge;","WLog_INFO(TAG,","\"FrameAcknowledgeCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));","","if (Stream_GetRemainingLength(s) < 4)"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["goto error;","}","","make_canonical(ctx, LY_TYPE_UINT64, value_, &unum, NULL);","","if (store) {","\/* store the result *\/"],"label":1}
{"cve":"CVE-2022-3099","code_chunks":["current_line = cstack.cs_line[cstack.cs_idx];","cstack.cs_lflags |= CSL_HAD_LOOP;","line_breakcheck();","if (breakpoint != NULL)","{","*breakpoint = dbg_find_breakpoint(","getline_equal(fgetline, cookie, getsourceline),"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fb_write_bin(uint8_t *bin, int len, const fb_t a);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* fft_length = GetInput(context, node, kFftLengthTensor);","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TF_LITE_ENSURE(context, IsPowerOfTwo(fft_length_data[0]));","TF_LITE_ENSURE(context, IsPowerOfTwo(fft_length_data[1]));"],"label":1}
{"cve":"CVE-2021-32613","code_chunks":["static pyc_object *get_none_object(void) {","pyc_object *ret;","","ret = R_NEW0 (pyc_object);","if (!ret) {","return NULL;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp12_write_bin(uint8_t *bin, int len, const fp12_t a, int pack) {","fp12_t t;","","fp12_null(t);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;"],"label":1}
{"cve":"CVE-2020-15191","code_chunks":["  TensorReference tensor_ref(*tensor);    auto* tf_dlm_tensor_ctx = new TfDlManagedTensorCtx(tensor_ref);","  tf_dlm_tensor_ctx->reference = tensor_ref;","","  DLManagedTensor* dlm_tensor = &tf_dlm_tensor_ctx->tensor;","  dlm_tensor->manager_ctx = tf_dlm_tensor_ctx;","  dlm_tensor->deleter = &DLManagedTensorDeleter;","  dlm_tensor->dl_tensor.ctx = tf_dlm_context;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fb_exp_slide(fb_t c, const fb_t a, const bn_t b) {","fb_t t[1 << (FB_WIDTH - 1)], r;","uint8_t win[RLC_FB_BITS + 1];","size_t l;","","fb_null(r);",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["return kTfLiteOk;","};","reg.invoke = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* a0 = GetInput(context, node, 0);","","auto populate = [&](int id) {","TfLiteTensor* t = &context->tensors[id];"],"label":1}
{"cve":"CVE-2019-5489","code_chunks":["static int mincore_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end,","struct mm_walk *walk)","{","spinlock_t *ptl;","struct vm_area_struct *vma = walk->vma;","pte_t *ptep;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["output->type = input->type;","","return context->ResizeTensor(context, output,"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","WINPR_UNUSED(settings);","if (length > 4)","Stream_Seek_UINT16(s); \/* fontSupportFlags (2 bytes) *\/","","if (length > 6)"],"label":1}
{"cve":"CVE-2018-17182","code_chunks":["\"tlb_flush_pending %d\\n\"","\"def_flags: %#lx(%pGv)\\n\",","","mm, mm->mmap, mm->vmacache_seqnum, mm->task_size,","#ifdef CONFIG_MMU","mm->get_unmapped_area,","#endif"],"label":1}
{"cve":"CVE-2018-14395","code_chunks":["        put_bits32(&pbc, 0xffffffff);","","    flush_put_bits(&pbc);","","    av_free(unescaped);","","    return 0;"],"label":0}
{"cve":"CVE-2022-24950","code_chunks":["FATAL_FAIL(fd);","initServerSocket(fd);","local.sun_family = AF_UNIX; \/* local is declared before socket() ^ *\/","strcpy(local.sun_path, pipePath.c_str());","unlink(local.sun_path);","","FATAL_FAIL(::bind(fd, (struct sockaddr*)&local, sizeof(sockaddr_un)));"],"label":1}
{"cve":"CVE-2020-14403","code_chunks":["seg = data+(j*w);                                           \\","if (seg[x] != cl2) {break;}                                 \\","i = x;                                                      \\","while ((seg[i] == cl2) && (i < w)) i += 1;                  \\","i -= 1;                                                     \\","if (j == y) vx = hx = i;                                    \\","if (i < vx) vx = i;                                         \\"],"label":1}
{"cve":"CVE-2018-10536","code_chunks":["int ParseRiffHeaderConfig (FILE *infile, char *infilename, char *fourcc, WavpackContext *wpc, WavpackConfig *config)","{","int is_rf64 = !strncmp (fourcc, \"RF64\", 4), got_ds64 = 0, format_chunk = 0;","int64_t total_samples = 0, infilesize;","RiffChunkHeader riff_chunk_header;","ChunkHeader chunk_header;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["    if (isinstance) {","        identifier name;","        arguments_ty args;","        asdl_seq* body;","        asdl_seq* decorator_list;","        expr_ty returns;","        string type_comment;"],"label":0}
{"cve":"PYSEC-2021-617","code_chunks":["const int32_t hessian_dim =","stats_summaries_list[0].dim_size(3) - logits_dim;","DCHECK_GT(hessian_dim, 0);","DCHECK_LE(hessian_dim, logits_dim * logits_dim);","","std::vector<TTypes<float, 4>::ConstTensor> stats_summaries;"],"label":1}
{"cve":"CVE-2017-9144","code_chunks":["    if (opcode == EOF)","      ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");","    do","    {","      switch (opcode & 0x3f)","      {","        {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  } else {","    reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),","                         GetTensorShape(output), GetTensorData<float>(output));","  }","","  return kTfLiteOk;","}"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* axis = GetInput(context, node, kAxis);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_STATUS(ResizeOutput(context, input, axis, output));","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["","    result = Ta3AST_mod2obj(mod);","    PyArena_Free(arena);","    return result;","}","","static PyObject *"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","TfLiteTensor* output = GetOutput(context, node, \/*index=*\/0);","","int32_t* output_data = output->data.i32;","*output_data = *(input1->data.i32) + *(input2->data.i32);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"CVE-2016-9392","code_chunks":["siz->comps = 0;","","\/* Eliminate compiler warning about unused variables. *\/","cstate = 0;","","if (jpc_getuint16(in, &siz->caps) ||"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["for (int i = 1; i < num_inputs; ++i) {","const TfLiteTensor* t;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, i, &t));","TF_LITE_ENSURE_EQ(context, t->dims->size, t0->dims->size);","TF_LITE_ENSURE_EQ(context, t->type, input_type);","for (int d = 0; d < t0->dims->size; ++d) {"],"label":0}
{"cve":"CVE-2023-25667","code_chunks":["uint8* p_dst = this_dst + i * width * channel;","uint8* l_dst = last_dst + i * width * channel;","for (int j = 0; j < width; ++j) {","p_dst[j * channel + 0] = l_dst[j * channel + 0];","p_dst[j * channel + 1] = l_dst[j * channel + 1];","p_dst[j * channel + 2] = l_dst[j * channel + 2];"],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["#if defined(CONFIG_FIT)","puts(\"   FIT image found\\n\");","","if (!fit_check_format(hdr)) {","puts(\"Bad FIT image format!\\n\");","unmap_sysmem(hdr);","return 1;"],"label":1}
{"cve":"CVE-2017-6890","code_chunks":["void CLASS foveon_dp_load_raw()","{","unsigned c, roff[4], row, col, diff;","ushort huff[512], vpred[2][2], hpred[2];","","fseek (ifp, 8, SEEK_CUR);","foveon_huff (huff);"],"label":1}
{"cve":"CVE-2018-12562","code_chunks":["    if (!details.isLocalFile() && !details.isEmpty()) {","                bool needAskPass=!details.extraOptions.contains(\"IdentityFile=\");","","        if (needAskPass) {","            QStringList askPassList;","            if (Utils::KDE==Utils::currentDe()) {","                askPassList << QLatin1String(\"ksshaskpass\") << QLatin1String(\"ssh-askpass\") << QLatin1String(\"ssh-askpass-gnome\");"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\t\t\t\tbreak;","","\t\t\t\tif (!rdp_read_order_capability_set(&sub, settings))","\t\t\t\t\treturn FALSE;","","\t\t\t\tbreak;",""],"label":0}
{"cve":"CVE-2021-36978","code_chunks":["if (len)","{","this->m->count += QIntC::to_offset(len);","getNext()->write(buf, len);","this->m->last_char = buf[len - 1];","}","}"],"label":1}
{"cve":"CVE-2018-20762","code_chunks":["GF_DownloadSession *sess = gf_dm_sess_new(term->downloader, the_url, GF_NETIO_SESSION_NOT_THREADED, NULL, NULL, &e);","if (sess) {","e = gf_dm_sess_process(sess);","if (!e) strcpy(the_url, gf_dm_sess_get_cache_name(sess));","gf_dm_sess_del(sess);","}","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["fw_hidden_state_quantized->type = fw_input_weights->type;","fw_hidden_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(fw_hidden_state_quantized->dims,"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tif (a->used > digits) {","\t\tc->used = a->used - digits;","\t} else {","\t\tc->used = 0;","\t}","\tc->sign = a->sign;",""],"label":0}
{"cve":"CVE-2016-5358","code_chunks":["call_dissector_with_data(ieee80211_radio_handle, next_tvb, pinfo, tree, &phdr);","} else {","\/* Everything else.  This will pass a NULL data argument. *\/","dissector_try_uint(wtap_encap_dissector_table,"],"label":1}
{"cve":"CVE-2022-41900","code_chunks":["                  (b * input_size[1] + h) * input_size[2] + w;","              out_mat.col(out_offset) += in_mat.col(in_offset);","              out_count(out_offset)++;","            }","          }","        }","      }"],"label":0}
{"cve":"PYSEC-2020-273","code_chunks":["(*stride_arr)[i] = (*shape_arr)[i + 1] * (*stride_arr)[i + 1];","}","","dlm_tensor->dl_tensor.shape = &(*shape_arr)[0];"],"label":1}
{"cve":"CVE-2019-16778","code_chunks":["","const Index total_stripe_count =","input_inner_dim_size * input_outer_dim_num_stripe;","","config = GetGpuLaunchConfig(total_stripe_count, d);","TF_CHECK_OK(GpuLaunchKernel("],"label":1}
{"cve":"CVE-2022-35977","code_chunks":["if (mustObeyClient(c))","return C_OK;","\/* 'uint64_t' cast is there just to prevent undefined behavior on overflow *\/","long long total = (uint64_t)size + append;","\/* Test configured max-bulk-len represending a limit of the biggest string object,","* and also test for overflow. *\/"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* zero_points = GetTemporary(context, node, \/*index=*\/4);","TfLiteTensor* row_sums = GetTemporary(context, node, \/*index=*\/5);","if (!op_data->float_weights_time_initialized) {","const float dequantization_scale = weights_time->params.scale;","const int8_t* weights_time_ptr = GetTensorData<int8_t>(weights_time);"],"label":1}
{"cve":"CVE-2020-12279","code_chunks":["int action,","git_diff_delta *delta)","{","unsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS;","","if (action & CHECKOUT_ACTION__REMOVE) {","if (!git_path_isvalid(repo, delta->old_file.path, delta->old_file.mode, flags)) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp12_exp_cyc_sps(fp12_t c, const fp12_t a, const int *b, int len, int sign) {","int i, j, k, w = len;","fp12_t t, *u = RLC_ALLOCA(fp12_t, w);","","if (len == 0) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_OK(","context, context->ResizeTensor(context, fw_output, fw_output_size_array));","if (!params->merge_outputs) {","TfLiteTensor* bw_output = GetOutput(context, node, kBwOutputTensor);","TfLiteIntArray* bw_output_size_array = TfLiteIntArrayCreate(3);","bw_output_size_array->data[0] = batch_size;","bw_output_size_array->data[1] = max_time;"],"label":1}
{"cve":"CVE-2019-6978","code_chunks":["","","    im      - The image to write","    size    - Output: the size of the resulting image.","    quality - Compression quality.","",""],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["}","if (tmp == NULL || tmp == Py_None) {","Py_CLEAR(tmp);","arg = NULL;","}","else {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output_index_tensor =","GetOutput(context, node, kOutputIndexTensor);","","TF_LITE_ENSURE_EQ(context, NumDimensions(input), 1);","TfLiteIntArray* output_index_shape = TfLiteIntArrayCopy(input->dims);"],"label":1}
{"cve":"CVE-2017-6448","code_chunks":["\t\t\t\tbreak;","\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);","\t\t\t\tbreak;","\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i}\", buf[4] & 0x0f,","\t\t\t\t\t\t(buf[4] & 0xf0) >> 4, buf[5] & 0x0f);","\t\t\t\tbreak;","\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,"],"label":0}
{"cve":"CVE-2021-3331","code_chunks":["void __fastcall DoLoad(THierarchicalStorage * Storage, bool PuttyImport, bool & RewritePassword);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TF_LITE_ENSURE(context, NumDimensions(input) >= 2);","if (input->type != kTfLiteFloat32) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","node->temporaries->data[kBwHiddenStateQuantized] =","op_data->scratch_tensor_index + kBwHiddenStateQuantized;","TfLiteTensor* bw_hidden_state_quantized =","GetTemporary(context, node, kBwHiddenStateQuantized);"],"label":1}
{"cve":"CVE-2017-14608","code_chunks":["short buf[256];","int row, col, len, pred[2], ret, i;","","for (row=0; row < height; row++)","{","#ifdef LIBRAW_LIBRARY_BUILD"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }","        if (lookup_attr_id(obj, &PyId_op, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {"],"label":0}
{"cve":"PYSEC-2021-636","code_chunks":["      ->set_opt_level(OptimizerOptions::L0);","  std::unique_ptr<Session> session(NewSession(session_options));","  ASSERT_TRUE(session != nullptr) << \"Failed to create session\";","  TF_ASSERT_OK(session->Create(graph_def)) << \"Can't create test graph\";","  std::vector<Tensor> outputs;","  TF_ASSERT_OK(session->Run({}, {result.node()->name() + \":0\"}, {}, &outputs));","  ASSERT_EQ(outputs.size(), 1);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        NULL;","    if (PyDict_SetItemString(d, \"Continue\", (PyObject*)Continue_type) < 0)","        return NULL;","    if (PyDict_SetItemString(d, \"expr\", (PyObject*)expr_type) < 0) return NULL;","    if (PyDict_SetItemString(d, \"BoolOp\", (PyObject*)BoolOp_type) < 0) return","        NULL;","    if (PyDict_SetItemString(d, \"NamedExpr\", (PyObject*)NamedExpr_type) < 0)"],"label":0}
{"cve":"CVE-2023-5520","code_chunks":["}","","if (ctx->timescale && pck) {","cts = gf_filter_pck_get_cts(pck);","if (!ctx->cts && (cts != GF_FILTER_NO_TS))","ctx->cts = cts;"],"label":1}
{"cve":"CVE-2022-1587","code_chunks":["delayed_mem_copy_move(&status, SLJIT_SP, common->control_head_ptr, base_reg, stackptr);","}","","stackptr += sizeof(sljit_sw);","#endif",""],"label":1}
{"cve":"CVE-2020-11089","code_chunks":["","switch (type)","{","nego_process_negotiation_response(nego, s);","WLog_DBG(TAG, \"selected_protocol: %\" PRIu32 \"\", nego->SelectedProtocol);","","\/* enhanced security selected ? *\/"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (tmp == NULL) goto failed;","res = obj2ast_expr(tmp, &lower, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","} else {","lower = NULL;"],"label":1}
{"cve":"CVE-2020-5238","code_chunks":["      }","    }","    yych = *++p;","    if (yybm[0 + yych] & 128) {","      goto yy10;","    }","    goto yy9;"],"label":0}
{"cve":"CVE-2016-10009","code_chunks":["process_add_smartcard_key(SocketEntry *e)","{","char *provider = NULL, *pin;","int r, i, version, count = 0, success = 0, confirm = 0;","u_int seconds;","time_t death = 0;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (!vararg)","return NULL;","","i += 2; \/* the star and the name *\/"],"label":1}
{"cve":"CVE-2019-12108","code_chunks":["\t\tif(p2 && (p2 - action) <= n)","\t\t\tmethodlen = p2 - p;","\t\telse","\t\t\tmethodlen = n - (p - action);","\t\t\/*syslog(LOG_DEBUG, \"SoapMethod: %.*s %d %d %p %p %d\",","\t\t       methodlen, p, methodlen, n, action, p, (int)(p - action));*\/","\t\tfor(i = 0; soapMethods[i].methodName; i++) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  const TfLiteTensor* size;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSizeTensor, &size));"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["input->quantization.params);","auto* output_params = reinterpret_cast<TfLiteAffineQuantization*>(","output->quantization.params);","TfLiteTensor* output_temp = GetTemporary(context, node, \/*index=*\/1);","","TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActRelu);","reference_ops::EvalIntegerSVDF("],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp24_exp_cyc_sim(fp24_t e, const fp24_t a, const bn_t b, const fp24_t c, const bn_t d) {","int i, l, n0, n1, l0, l1;","int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], *_k, *_m;","fp24_t r, t0[1 << (EP_WIDTH - 2)];","fp24_t s, t1[1 << (EP_WIDTH - 2)];"],"label":1}
{"cve":"CVE-2021-3609","code_chunks":["struct bcm_sock *bo;","struct bcm_op *op, *next;","","if (!sk)","return 0;",""],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["pj_scan_get_char(scanner);","","\/* get value *\/","if (*scanner->curptr != '\\r' && *scanner->curptr != '\\n') {","pj_scan_get_until_chr(scanner, \"\\r\\n\", &attr->value);","} else {","attr->value.ptr = NULL;"],"label":1}
{"cve":"CVE-2020-11046","code_chunks":["{","WINPR_UNUSED(update);","Stream_Seek_UINT16(s); \/* pad2Octets (2 bytes) *\/","\/**","* The Synchronize Update is an artifact from the","* T.128 protocol and should be ignored."],"label":1}
{"cve":"CVE-2018-20748","code_chunks":["  }","","  ci.shared = (client->appData.shareDesktop ? 1 : 0);","","  if (!WriteToRFBServer(client,  (char *)&ci, sz_rfbClientInitMsg)) return FALSE;","","  if (!ReadFromRFBServer(client, (char *)&client->si, sz_rfbServerInitMsg)) return FALSE;"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["}","","\/*","* This callback is called by SRTP transport when incoming rtp is received.","* Originally this is send_rtp() op.","*\/"],"label":1}
{"cve":"CVE-2016-10129","code_chunks":["error = add_push_report_pkt(push, pkt);","break;","}","","git_pkt_free(pkt);",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["OpData* op_data) {","const TfLiteTensor* input_box_encodings;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorBoxEncodings,","&input_box_encodings));","TF_LITE_ENSURE_EQ(context, input_box_encodings->dims->data[0], kBatchSize);"],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["  else if (type == 2) {","    count = strnlen((char *)th + val, count-1) + 1;","    if (count <= 4)","      FORC(4) tt->val.c[c] = ((char *)th)[val+c];","  } else if (type == 3 && count <= 2)","    FORC(2) tt->val.s[c] = val >> (c << 4);","  tt->count = count;"],"label":0}
{"cve":"CVE-2020-15888","code_chunks":["int nextra = ci->u.l.nextraargs;","if (wanted < 0) {","wanted = nextra;  \/* get all extra arguments available *\/","checkstackp(L, nextra, where);  \/* ensure stack space *\/","L->top = where + nextra;  \/* next instruction will need top *\/","}","for (i = 0; i < wanted && i < nextra; i++)"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2017-12662","code_chunks":["      \"      <\/rdf:Description>\\n\"","      \"      <rdf:Description rdf:about=\\\"\\\"\\n\"","      \"         <dc:format>application\/pdf<\/dc:format>\\n\"","      \"         <dc:title>\\n\"","      \"           <rdf:Alt>\\n\"","      \"              <rdf:li xml:lang=\\\"x-default\\\">%s<\/rdf:li>\\n\"","      \"           <\/rdf:Alt>\\n\""],"label":0}
{"cve":"CVE-2021-31260","code_chunks":["GF_TrackReferenceTypeBox *dpnd;","u16 tmpRef;","","entry = NULL;","tref = NULL;",""],"label":1}
{"cve":"CVE-2020-15260","code_chunks":["    status = pjsip_get_dest_info(uri, NULL, tdata->pool, &dest_info);","    if (status != PJ_SUCCESS) {","\tpjsip_tx_data_dec_ref(tdata);","\treturn status;","    }","","    \/* Copy data (note: data_len may be zero!) *\/"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  ASSERT_EQ(interpreter.SetTensorParametersReadWrite(4, kTfLiteInt32, \"\", {1},","                                                     quantized),","            kTfLiteOk);","","    TfLiteRegistration reg_copy = {nullptr, nullptr, nullptr, nullptr};","  reg_copy.invoke = [](TfLiteContext* context, TfLiteNode* node) {","    const TfLiteTensor* input;"],"label":0}
{"cve":"CVE-2022-29201","code_chunks":["OP_REQUIRES(context, filter.dims() == 4,","errors::InvalidArgument(\"filter must be 4-dimensional: \",","filter.shape().DebugString()));","","const float min_input = context->input(2).flat<float>()(0);","const float max_input = context->input(3).flat<float>()(0);"],"label":1}
{"cve":"CVE-2021-3658","code_chunks":["g_dbus_emit_property_changed(dbus_conn, adapter->path,","ADAPTER_INTERFACE, \"Alias\");","","attrib_gap_set(adapter, GATT_CHARAC_DEVICE_NAME,","(const uint8_t *) adapter->current_alias,","strlen(adapter->current_alias));"],"label":1}
{"cve":"CVE-2018-11379","code_chunks":["const char* basename;","if (!dbg_data) {","return 0;","}","switch (dbg_dir_entry->Type) {","if (!strncmp ((char*) dbg_data, \"RSDS\", 4)) {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["tmp = _PyObject_GetAttrId(obj, &PyId_names);","if (tmp == NULL) goto failed;","if (!PyList_Check(tmp)) {","PyErr_Format(PyExc_TypeError, \"Global field \\\"names\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","goto failed;"],"label":1}
{"cve":"CVE-2018-12561","code_chunks":["void RemoteFsDevice::renamed(const QString &oldName, const QString &newName)","{","Configuration cfg;","QStringList names=cfg.get(constCfgKey, QStringList());","if (names.contains(oldName)) {","names.removeAll(oldName);"],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["CHECK_HANDLE(handle, f);","int64_t ret = f->write(data, length);","if (ret < 0) {","raise_notice(\"fwrite(): send of %ld bytes failed with errno=%d %s\",","data.size(), errno, folly::errnoStr(errno).c_str());","ret = 0;","}"],"label":0}
{"cve":"CVE-2017-3733","code_chunks":["        return 0;","","    padding_length = rec->data[rec->length - 1];","","    if (EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_read_ctx)) &","        EVP_CIPH_FLAG_AEAD_CIPHER) {","        \/* padding is already verified *\/"],"label":0}
{"cve":"CVE-2016-9388","code_chunks":["","for (i = 0; i < jas_image_numcmpts(image); ++i) {","data[i] = jas_matrix_create(1, jas_image_width(image));","assert(data[i]);","}",""],"label":1}
{"cve":"CVE-2022-1620","code_chunks":["","\t    new_items = vim_realloc(stl_items, sizeof(stl_item_T) * new_len);","\t    if (new_items == NULL)","\t\tbreak;","\t    stl_items = new_items;","\t    new_groupitem = vim_realloc(stl_groupitem, sizeof(int) * new_len);","\t    if (new_groupitem == NULL)"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["\tif (skip_iprefix(src, \"utf\", &src) && skip_iprefix(dst, \"utf\", &dst)) {","\t\tskip_prefix(src, \"-\", &src);","\t\tskip_prefix(dst, \"-\", &dst);","\t\treturn !strcasecmp(src, dst);","\t}","\treturn 0;","}"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE(context, scale_diff \/ output_scale <= 0.02);","}","return GetQuantizedConvolutionMultipler(context, input, filter, output,","multiplier);","}",""],"label":1}
{"cve":"CVE-2016-10167","code_chunks":["path = gdTestFilePath2(\"gdimagecolor\", \"basic_exp.png\");","gdAssertImageEqualsToFile(path, im);","gdFree(path);","","gdImageDestroy(im);",""],"label":1}
{"cve":"CVE-2022-41889","code_chunks":["const int num_values = PySequence_Size(py_list);","if (attr_list_sizes != nullptr) (*attr_list_sizes)[key] = num_values;","","#define PARSE_LIST(c_type, parse_fn)                                       \\","std::unique_ptr<c_type[]> values(new c_type[num_values]);                \\","for (int i = 0; i < num_values; ++i) {                                   \\","tensorflow::Safe_PyObjectPtr py_value(PySequence_ITEM(py_list, i));    \\"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["Stream_Read_UINT8(s, colorLossLevel);        \/* colorLossLevel (1 byte) *\/","","if (colorLossLevel < 1)","colorLossLevel = 1;"],"label":1}
{"cve":"PYSEC-2021-734","code_chunks":["    auto partition_type = GetRowPartitionTypeByDimension(dimension);","    switch (partition_type) {","        CalculateOutputIndexValueRowID(","            row_partition_tensor, parent_output_index, output_index_multiplier,","            output_size, result);","        return tensorflow::Status::OK();","        CalculateOutputIndexRowSplit(row_partition_tensor, parent_output_index,"],"label":0}
{"cve":"CVE-2019-15140","code_chunks":["if(EOFBlob(image)) break;","MATLAB_HDR.ObjectSize = ReadBlobXXXLong(image);","if(EOFBlob(image)) break;","if((MagickSizeType) (MATLAB_HDR.ObjectSize+filepos) > GetBlobSize(image))","goto MATLAB_KO;","filepos += (MagickOffsetType) MATLAB_HDR.ObjectSize + 4 + 4;",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int util(void) {","int code = RLC_ERR;","gt_t a, b, c;","uint8_t bin[24 * RLC_PC_BYTES];",""],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty val;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2018-20174","code_chunks":["for (y = 0; y < height; y++)","{","in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)],","width * Bpp);","}","ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","        for (int bp = 0; bp < top_paths; ++bp) {","      log_probabilities_output[b * top_paths + bp] = log_probs[bp];","    }","  }","","  free(input_chip_t_data);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (isinstance) {","asdl_seq* dims;","","if (_PyObject_HasAttrId(obj, &PyId_dims)) {","int res;","Py_ssize_t len;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["reinterpret_cast<TfLiteResizeNearestNeighborParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2020-35538","code_chunks":["JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail)","\/* 1:1 vertical sampling case: much easier, never need a spare row. *\/","{","my_upsample_ptr upsample = (my_upsample_ptr)cinfo->upsample;","","\/* Just do the upsampling. *\/","(*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["if (index >= 0 && index < node->inputs->size) {","const int tensor_index = node->inputs->data[index];","if (tensor_index != kTfLiteOptionalTensor) {","if (context->tensors != nullptr) {"],"label":1}
{"cve":"CVE-2017-6448","code_chunks":["sprintf (str, \" {v%i}\", buf[4] & 0x0f);","break;","sprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["SetTensorToDynamic(output0);","const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output1 = GetOutput(context, node, 1);","TF_LITE_ENSURE_STATUS(context->ResizeTensor(","context, output1, TfLiteIntArrayCopy(input->dims)));","return kTfLiteOk;"],"label":1}
{"cve":"CVE-2016-7520","code_chunks":["\/*","Write HDR pixels.","*\/","pixels=(unsigned char *) AcquireQuantumMemory(image->columns,4*","sizeof(*pixels));","if (pixels == (unsigned char *) NULL)","ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"],"label":1}
{"cve":"CVE-2016-4564","code_chunks":["status=MagickTrue;","maximum_length=0.0;","total_length=0.0;","for (i=1; (i < number_vertices) && (length >= 0.0); i++)","{","dx=primitive_info[i].point.x-primitive_info[i-1].point.x;","dy=primitive_info[i].point.y-primitive_info[i-1].point.y;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["scaling_factors_size));","}","node->temporaries->data[3] = op_data->scratch_tensor_index + 3;","TfLiteTensor* accum_scratch = GetTemporary(context, node, \/*index=*\/3);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {num_units, batch_size};"],"label":1}
{"cve":"CVE-2023-2006","code_chunks":["","\t_enter(\"%d\", call->debug_id);","","\tif (!gfpflags_allow_blocking(gfp)) {","\t\trxrpc_maybe_add_conn(bundle, gfp);","\t\trxrpc_activate_channels(bundle);","\t\tret = bundle->alloc_error ?: -EAGAIN;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;"],"label":1}
{"cve":"CVE-2018-25020","code_chunks":["\t\t\tBPF_EMIT_JMP;","\t\t\tinsn++;","","\t\t\tinsn->code = BPF_JMP | BPF_JA;","\t\t\ttarget = i + fp->jf + 1;","\t\t\tBPF_EMIT_JMP;","\t\t\tbreak;"],"label":0}
{"cve":"CVE-2022-0476","code_chunks":["\tst64 o_addr = r_buf_seek (b, 0, R_BUF_CUR);","\tif (r_buf_seek (b, addr, R_BUF_SET) == -1) {","\t\treturn NULL;","\t}","\tstruct minidump_module *module = R_NEW0 (struct minidump_module);","\tif (!module) {","\t\treturn NULL;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const int n_batch = time_major ? input->dims->data[1] : input->dims->data[0];","const int n_input = input->dims->data[2];","","const TfLiteTensor* fw_input_to_output_weights ="],"label":1}
{"cve":"CVE-2022-37032","code_chunks":["          }","      if (stream_get_getp(s) != (start + caphdr.length))","        {","          if (stream_get_getp(s) > (start + caphdr.length))","            zlog_warn (\"%s Cap-parser for %s read past cap-length, %u!\",","                       peer->host, LOOKUP (capcode_str, caphdr.code),","                       caphdr.length);"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["        if (!local_mod) {","            local_mod = leaf->schema->module;","        }","        val = &leaf->value;","        val_type = &leaf->value_type;","        val_flags = &leaf->value_flags;","        contextnode = (struct lyd_node *)leaf;"],"label":0}
{"cve":"CVE-2020-15260","code_chunks":["if (data_len)","pj_memcpy(tdata->buf.start, raw_data, data_len);","tdata->buf.cur = tdata->buf.start + data_len;","","\/* Init send_raw_data *\/","sraw_data = PJ_POOL_ZALLOC_T(tdata->pool, struct send_raw_data);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["auto* params = reinterpret_cast<TfLiteSkipGramParams*>(node->builtin_data);","","std::vector<StringRef> words;","tflite::StringRef strref = tflite::GetString(GetInput(context, node, 0), 0);","int prev_idx = 0;","for (int i = 1; i < strref.len; i++) {","if (isspace(*(strref.str + i))) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    TfLiteTensor* output_state_sf;","    TF_LITE_ENSURE_OK(","        context, GetTemporarySafe(context, node, kOutputStateScalingFactors,","                                  &output_state_sf));","    output_state_sf->type = kTfLiteFloat32;","    output_state_sf->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqualsArray(output_state_sf->dims, 1, scaling_dims)) {"],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["#define TOFF(ptr) ((char *)(&(ptr)) - (char *)th)","","void CLASS tiff_head (struct tiff_hdr *th, int full)","{","  int c, psize=0;","  struct tm *t;",""],"label":0}
{"cve":"CVE-2020-36177","code_chunks":["                          const byte* digest, word32 digestLen,","                          enum wc_HashType hash, int mgf,","                          RsaKey* key)","{","    int ret = 0, verify, saltLen, hLen, bits = 0;","","    hLen = wc_HashGetDigestSize(hash);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["          fw_recurrent_to_output_weights,","          \/*recurrent_to_output_weights_ledger*\/ nullptr,","          fw_cell_to_input_weights, fw_cell_to_forget_weights,","          fw_cell_to_output_weights,","          \/*input_layer_norm_coefficients=*\/nullptr,","          \/*forget_layer_norm_coefficients=*\/nullptr,","          \/*cell_layer_norm_coefficients=*\/nullptr,"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["alias_ty o = (alias_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_RETURN_NONE;","}","","result = PyType_GenericNew(alias_type, NULL, NULL);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp_write_str(char *str, int len, const fp_t a, int radix) {","bn_t t;","","bn_null(t);"],"label":1}
{"cve":"CVE-2021-33910","code_chunks":["                return -ENOMEM;","","        path_simplify(p, false);","","        if (empty_or_root(p))","                s = strdup(\"-\");","        else {"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["","if (authorizer_data.length()) {","bool ret = cephx_verify_authorizer(g_ceph_context, &keyring, iter,","auth_ticket_info, authorizer_reply);","if (ret) {","session_key = auth_ticket_info.session_key;","isvalid = true;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":[],"label":1}
{"cve":"CVE-2021-32613","code_chunks":["if (!obj->chained_starts[i]) {","continue;","}","ut64 page_size = obj->chained_starts[i]->page_size;","ut64 start = obj->segs[i].fileoff;","ut64 end = start + obj->segs[i].filesize;","if (end >= off && start <= eob) {"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","const auto* params =","reinterpret_cast<const TfLiteGatherParams*>(node->builtin_data);","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* positions = GetInput(context, node, kInputPositions);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["        id = id2;","    }","    PyUnicode_InternInPlace(&id);","    if (PyArena_AddPyObject(c->c_arena, id) < 0) {","        Py_DECREF(id);","        return NULL;","    }"],"label":0}
{"cve":"CVE-2016-9843","code_chunks":["}","","\/* ========================================================================= *\/","#define DOBIG4 c ^= *++buf4; \\","c = crc_table[4][c & 0xff] ^ crc_table[5][(c >> 8) & 0xff] ^ \\","crc_table[6][(c >> 16) & 0xff] ^ crc_table[7][c >> 24]","#define DOBIG32 DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4"],"label":1}
{"cve":"CVE-2022-33099","code_chunks":["      }","      if (tl <= LUAI_MAXSHORTLEN) {  \/* is result a short string? *\/","        char buff[LUAI_MAXSHORTLEN];","        copy2buff(top, n, buff);  \/* copy strings to buffer *\/","        ts = luaS_newlstr(L, buff, tl);","      }","      else {  \/* long string; copy strings directly to final result *\/"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (isdigit(c)) {","return syntaxerror(tok,","\"invalid digit '%c' in octal literal\", c);","}","}"],"label":1}
{"cve":"CVE-2022-39347","code_chunks":["WIN32_FIND_DATAW findFileData = { 0 };","BOOL ret = TRUE;","HANDLE dir = INVALID_HANDLE_VALUE;","WCHAR* fullpath = NULL;","WCHAR* path_slash = NULL;","size_t base_path_length = 0;"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["                            event_data++;","                            siz--;","                            ret_cnt++;","                        } while (*event_data > 0x7f);","                    }","                    if (!siz) goto shortbuf;","                    tmp_length = (tmp_length << 7) + (*event_data & 0x7f);"],"label":0}
{"cve":"CVE-2022-35971","code_chunks":["    typedef TTypes<float>::Tensor::Index Index;","","    const Eigen::IndexList<Eigen::type2index<1>, Eigen::type2index<2>>","        reduction_indices;","    Eigen::IndexList<Eigen::type2index<1>, Index, Index, Eigen::type2index<1>>","        broadcast_spec;","    broadcast_spec.set(1, H);"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["","\t\tstrbuf_grow(sb, linelen + indent + 20);","\t\tif (indent)","\t\t\tpp_handle_indent(pp, sb, indent, line, linelen);","\t\telse if (pp->expand_tabs_in_log)","\t\t\tstrbuf_add_tabexpand(sb, opt, pp->color,","\t\t\t\t\t     pp->expand_tabs_in_log, line,"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["unsigned kodak, entries, tag, type, len, save, c;","double expo,ape;","","kodak = !strncmp(make,\"EASTMAN\",7) && tiff_nifds < 3;","entries = get2();","if(!strncmp(make,\"Hasselblad\",10) && (tiff_nifds > 3) && (entries > 512)) return;"],"label":0}
{"cve":"CVE-2022-35939","code_chunks":["","TfLiteStatus status = kTfLiteError;","switch (updates->type) {","status = ScatterNd<IndicesT, float>(indices, updates, output);","break;","status = ScatterNd<IndicesT, uint8_t>(indices, updates, output);"],"label":0}
{"cve":"CVE-2019-25078","code_chunks":["  char *proxy;","  char *out;","  int initialized_here = 0;","  char *error_prefix = \"pacparser.c: pacparser_just_find_proxy:\";","  if (!global) {","    if (!pacparser_init()) {","      print_error(\"%s %s\\n\", error_prefix, \"Could not initialize pacparser\");"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["input_quantized->type = fw_input_weights->type;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2020-1712","code_chunks":["assert(reply);","assert(q);","","assert(q->slot);","q->slot = sd_bus_slot_unref(q->slot);",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* cond_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputConditionTensor,","&cond_tensor));","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["}","res = PyObject_SetAttr(self, name, PyTuple_GET_ITEM(args, i));","Py_DECREF(name);","if (res < 0)","goto cleanup;","}"],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["\"ListCachedUsers\",","g_variant_new (\"()\"),","G_DBUS_CALL_FLAGS_NONE,","-1,","NULL,","NULL);","if (ret != NULL)"],"label":1}
{"cve":"PYSEC-2022-67","code_chunks":["  static TfLiteIntArray dummy;","","  size_t computed_size = sizeof(dummy) + sizeof(dummy.data[0]) * size;","#if defined(_MSC_VER)","    computed_size -= sizeof(dummy.data[0]);","#endif","  return computed_size;"],"label":0}
{"cve":"CVE-2021-29618","code_chunks":["CHECK_GE(in.dims(), 2);"],"label":1}
{"cve":"CVE-2016-10130","code_chunks":["if ((!error || error == GIT_ECERTIFICATE) && t->owner->certificate_check_cb != NULL &&","git_stream_is_encrypted(t->io)) {","git_cert *cert;","int is_valid;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  auto* params =","      reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);","  OpData* data = static_cast<OpData*>(node->user_data);","","  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","  TF_LITE_ENSURE(context, output != nullptr);","  const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":0}
{"cve":"CVE-2022-3352","code_chunks":["    --buf->b_locked_split;","","                if (is_curwin && curwin != the_curwin &&  win_valid_any_tab(the_curwin))","    {","\tblock_autocmds();","\tgoto_tabpage_win(the_curtab, the_curwin);","\tunblock_autocmds();"],"label":0}
{"cve":"CVE-2022-3299","code_chunks":["","    ogs_assert(sbi_sess);","    addr = sbi_sess->addr;","    ogs_assert(addr);","","    ogs_assert(msg);",""],"label":0}
{"cve":"PYSEC-2020-129","code_chunks":["if (node_value.has_tensor()) {","const PartialTensorShape node_shape(node_value.tensor().tensor_shape());","if (node_shape.num_elements() < 0) {","return errors::FailedPrecondition(","\"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\",","node.op(), \"\\\") which initializes from a tensor with \","],"label":1}
{"cve":"PYSEC-2021-251","code_chunks":["    OP_REQUIRES_OK(","        context, context->allocate_output(\"output\", out_shape, &output_tensor));","","    if (flat_in.size() == 0) {        return;","    }","","    auto out = output_tensor->flat_inner_dims<T>();"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["OpContext op_context(context, node);","OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","const TfLiteTensor* lhs;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputLHSTensor, &lhs));","const TfLiteTensor* rhs;"],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["    if (s->hd)","        ffurl_closep(&s->hd);","    av_dict_free(&s->chained_options);","    return ret;","}","","static int64_t http_seek_internal(URLContext *h, int64_t off, int whence, int force_reconnect)"],"label":0}
{"cve":"CVE-2018-1000050","code_chunks":["{","   int bits_read, bytes_read;","","   if (!vorbis_decode_initial(f, p_left_start, p_left_end, p_right_start, p_right_end, mode))","      return 0;","","      bits_read = 1 + ilog(f->mode_count-1);"],"label":0}
{"cve":"CVE-2016-2324","code_chunks":["","obj->flags |= SEEN;","show(obj, base, name, cb_data);","","strbuf_addstr(base, name);","if (base->len)"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["Py_ssize_t i;","            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);"],"label":0}
{"cve":"CVE-2017-9949","code_chunks":["if (dirent.direntlen == 0)","return 0;","","if (dirent.namelen != 0)","{","#ifndef _MSC_VER"],"label":1}
{"cve":"CVE-2020-35538","code_chunks":["JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail)","\/* 1:1 vertical sampling case: much easier, never need a spare row. *\/","{","my_merged_upsample_ptr upsample = (my_merged_upsample_ptr)cinfo->upsample;","","\/* Just do the upsampling. *\/","(*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from DictComp\");","            return 1;","        }","        else {","            int res;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","","  if (IsDynamicTensor(output)) {","    TF_LITE_ENSURE_OK(context,","                      ResizeOutputTensor(context, data, segment_ids, output));","  }"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["void MainWindow::checkFingerprint(const QString& line)","{","QRegExp fingerprintRegex(\".*server fingerprint \\\\(SHA1\\\\): ([A-F0-9:]+) \\\\(SHA256\\\\): ([A-F0-9:]+)\");","if (!fingerprintRegex.exactMatch(line)) {","return;","}"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["if (length <= 0) {","raise_warning(\"The length must be greater than zero\");","return make_tv<KindOfBoolean>(false);","}","","if (offset < 0) {","offset = s1_len + offset;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["        asdl_seq* orelse;","        string type_comment;","","        if (lookup_attr_id(obj, &PyId_target, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {"],"label":0}
{"cve":"CVE-2020-11096","code_chunks":["return FALSE;","","bitmapData = &cache_bitmap_v3->bitmapData;","bitsPerPixelId = BPP_CBR23[cache_bitmap_v3->bpp];","*flags = (cache_bitmap_v3->cacheId & 0x00000003) |","((cache_bitmap_v3->flags << 7) & 0x0000FF80) | ((bitsPerPixelId << 3) & 0x00000078);","Stream_Write_UINT16(s, cache_bitmap_v3->cacheIndex); \/* cacheIndex (2 bytes) *\/"],"label":1}
{"cve":"CVE-2021-22550","code_chunks":["    is_pool_empty = buffer_pool_.empty();","    if (is_pool_empty) {","      buffers =","          primitives::AllocateUntrustedBuffers(kPoolIncrement, kPoolEntrySize);","      for (int i = 0; i < kPoolIncrement; i++) {","        void *buf = buffers[i];","        if (!buf || !TrustedPrimitives::IsOutsideEnclave(buf, kPoolEntrySize)) {"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["    if (PyDict_SetItemString(d, \"ExceptHandler\", (PyObject*)ExceptHandler_type)","        < 0) return NULL;","    if (PyDict_SetItemString(d, \"arguments\", (PyObject*)arguments_type) < 0)","        return NULL;","    if (PyDict_SetItemString(d, \"arg\", (PyObject*)arg_type) < 0) return NULL;","    if (PyDict_SetItemString(d, \"keyword\", (PyObject*)keyword_type) < 0) return","        NULL;"],"label":0}
{"cve":"PYSEC-2020-336","code_chunks":["const absl::Span<const int>& seq_lengths, bool time_major,","cudnnDataType_t data_type) {","if (max_seq_length <= 0) {","return port::Status(port::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");","}","int dims[] = {batch_size, data_size, 1};"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["void MainWindow::on_m_pGroupClient_toggled(bool on)","{","    m_pGroupServer->setChecked(!on);","    if (on) {","        updateZeroconfService();","    }","}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* axis = GetInput(context, node, kAxis);","TF_LITE_ENSURE_EQ(context, NumElements(axis), 1);","TF_LITE_ENSURE(context,","axis->type == kTfLiteInt32 || axis->type == kTfLiteInt64);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"],"label":1}
{"cve":"CVE-2019-13308","code_chunks":["          Cr->blue=Ar->blue-Br->blue;","          Ci->blue=Ai->blue-Bi->blue;","          if (Cr_image->matte != MagickFalse)","            {","              Cr->opacity=Ar->opacity-Br->opacity;","              Ci->opacity=Ai->opacity-Bi->opacity;","            }"],"label":0}
{"cve":"CVE-2022-24786","code_chunks":["    hdr->rtcp_common.count = 1; \/* FMT = 1 *\/","    hdr->rtcp_common.length = pj_htons((pj_uint16_t)(len\/4 - 1));","","    \/* Finally *\/","    *length = len;","","    return PJ_SUCCESS;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","const int32_t* input_data = input->data.i32;","const TfLiteTensor* weight;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &weight));","const uint8_t* weight_data = weight->data.uint8;"],"label":0}
{"cve":"CVE-2019-17546","code_chunks":["DECLAREContigPutFunc(putcontig8bitYCbCr12tile)","{","\tuint32* cp2;","\tint32 incr = 2*toskew+w;","\t(void) y;","\tfromskew = (fromskew \/ 1) * (1 * 2 + 2);","\tcp2 = cp+w+toskew;"],"label":0}
{"cve":"CVE-2018-14360","code_chunks":["{","struct NntpServer *nserv = data;","struct NntpData *nntp_data = NULL;","char group[LONG_STRING];","char desc[HUGE_STRING] = \"\";","char mod;","anum_t first, last;"],"label":1}
{"cve":"CVE-2018-12559","code_chunks":["static inline bool isMountable(const RemoteFsDevice::Details &d)","{","return RemoteFsDevice::constSshfsProtocol==d.url.scheme() ||","RemoteFsDevice::constSambaProtocol==d.url.scheme() || RemoteFsDevice::constSambaAvahiProtocol==d.url.scheme();","}","","QList<Device *> RemoteFsDevice::loadAll(MusicLibraryModel *m)"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["if (IsDynamicTensor(output)) {","has_dynamic_output_tensors = true;","break;","}","}",""],"label":1}
{"cve":"CVE-2018-8792","code_chunks":["uint32 length;","struct stream packet = *s;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","","if (!s_check_rem(s, length))"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT16 largePointerSupportFlags;","","if (length < 6)","return FALSE;",""],"label":1}
{"cve":"CVE-2023-45898","code_chunks":["\" delayed and written which can potentially \"","\" cause data loss.\", lblk, len);","WARN_ON(1);","}","","newes.es_lblk = lblk;","newes.es_len = len;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["return Py_None;","}","","switch (o->kind) {"],"label":1}
{"cve":"CVE-2023-4322","code_chunks":["static int getid(char ch) {","const char *keys = \"[]<>+-,.\";","const char *cidx = strchr (keys, ch);","return cidx? cidx - keys + 1: 0;","}"],"label":1}
{"cve":"PYSEC-2020-298","code_chunks":["                    \"Source format must be of length 4 or 5, received \"","                    \"src_format = \",","                    src_format));","    OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,","                errors::InvalidArgument(\"Destination format must be of length \"","                                        \"4 or 5, received dst_format = \",","                                        dst_format));"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["","bool ms_verify_authorizer(Connection *con, int peer_type, int protocol,","bufferlist& authorizer, bufferlist& authorizer_reply,","bool& isvalid, CryptoKey& session_key) override {","isvalid = true;","return true;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputValue, &output));","  SetTensorToDynamic(output);","","  return kTfLiteOk;","}"],"label":0}
{"cve":"CVE-2020-35538","code_chunks":["\/* Calculate how many full iMCU rows we can skip. *\/","if (cinfo->upsample->need_context_rows)","lines_to_skip = ((lines_after_iMCU_row - 1) \/ lines_per_iMCU_row) *","lines_per_iMCU_row;","else","lines_to_skip = (lines_after_iMCU_row \/ lines_per_iMCU_row) *"],"label":1}
{"cve":"PYSEC-2020-82","code_chunks":["if (c->bpc ==1) {","if(expandrow(&state->buffer[c->channo], &ptr[c->rleoffset], c->rlelength, im->bands))","goto sgi_finish_decode;","}","else {","if(expandrow2(&state->buffer[c->channo * 2], &ptr[c->rleoffset], c->rlelength, im->bands))"],"label":1}
{"cve":"CVE-2017-18248","code_chunks":["ippAddInteger(job->attrs, IPP_TAG_JOB, IPP_TAG_INTEGER, \"time-at-creation\", time(NULL));","ippAddOutOfBand(job->attrs, IPP_TAG_JOB, IPP_TAG_NOVALUE, \"time-at-processing\");","","\/*","* Add remaining job attributes...","*\/"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["barrier::string::from_hex(fingerprintRegex.cap(2).toStdString())","};","","auto db_path = barrier::DataDirectories::trusted_servers_ssl_fingerprints_path();","","auto db_dir = db_path.parent_path();","if (!barrier::fs::exists(db_dir)) {"],"label":1}
{"cve":"CVE-2016-4564","code_chunks":["GetNextToken(q,&q,extent,token);","weight=ParseCommandOption(MagickWeightOptions,MagickFalse,token);","if (weight == -1)","weight=StringToUnsignedLong(token);","graphic_context[n]->weight=(size_t) weight;","break;","}"],"label":1}
{"cve":"CVE-2020-9432","code_chunks":["if (lua_isstring(L, 2))","{","const char *ip_asc = lua_tostring(L, 2);","lua_pushboolean(L, X509_check_ip_asc(cert, ip_asc, 0));","}","else"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["\/* Reuse len to be the length of the utf-8 input string. *\/","len = expr_end - expr_start;","\/* Allocate 3 extra bytes: open paren, close paren, null byte. *\/","str = PyMem_RawMalloc(len + 3);","if (str == NULL)","return NULL;"],"label":1}
{"cve":"PYSEC-2022-122","code_chunks":["int TfLiteIntArrayGetSizeInBytes(int size) {","static TfLiteIntArray dummy;","","int computed_size = sizeof(dummy) + sizeof(dummy.data[0]) * size;","#if defined(_MSC_VER)","computed_size -= sizeof(dummy.data[0]);","#endif"],"label":1}
{"cve":"CVE-2019-20805","code_chunks":["for (; (unsigned)((char const *)dynp - (char const *)dynseg) < sz_dynseg","&& Elf64_Dyn::DT_NULL!=dynp->d_tag; ++dynp) if (get_te64(&dynp->d_tag)==key) {","upx_uint64_t const t= elf_get_offset_from_address(get_te64(&dynp->d_val));","if (t) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &value));","  TF_LITE_ENSURE(context, NumDimensions(value) >= 1);","  TF_LITE_ENSURE_EQ(context, SizeOfDimension(key, 0),","                    SizeOfDimension(value, 0));","  if (value->type == kTfLiteString) {","    TF_LITE_ENSURE_EQ(context, NumDimensions(value), 1);","  }"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(","context, GetOutputSafe(context, node, kOutputValues, &output_values));","TfLiteTensor* output_indexes;","TF_LITE_ENSURE_OK(","context, GetOutputSafe(context, node, kOutputIndexes, &output_indexes));","if (IsDynamicTensor(output_values)) {"],"label":0}
{"cve":"CVE-2018-8792","code_chunks":["\tindexh = 0;","\twhile (indexh < height)","\t{","\t\tout = (org_out + width * height * 4) - ((indexh + 1) * width * 4);","\t\tcolor = 0;","\t\tthis_line = out;","\t\tindexw = 0;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2021-33366","code_chunks":["op->output_layer_set_idx = gf_bs_read_u16(bs);","op->max_temporal_id = gf_bs_read_u8(bs);","op->layer_count = gf_bs_read_u8(bs);","if (op->layer_count > GF_ARRAY_LENGTH(op->layers_info))","return GF_NON_COMPLIANT_BITSTREAM;","for (j = 0; j < op->layer_count; j++) {","op->layers_info[j].ptl_idx = gf_bs_read_u8(bs);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["output_state_quantized->type = input_to_output_weights->type;","output_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(output_state_quantized->dims,"],"label":1}
{"cve":"PYSEC-2022-140","code_chunks":["found_unknown_shapes);","for (const auto& dim : output_shape.dim()) {","int64_t new_output_size =","MultiplyWithoutOverflow(output_size, dim.size());","if (new_output_size < 0) {","VLOG(1) << \"Overflow encountered when estimating cost, multiplying \""],"label":0}
{"cve":"CVE-2018-12321","code_chunks":["if (pos + 8 > len) {","return op->size;","}","int min_val = (ut32)(UINT (data, pos + 4)),","max_val = (ut32)(UINT (data, pos + 8));",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params = reinterpret_cast<TfLiteSkipGramParams*>(node->builtin_data);","","std::vector<StringRef> words;","tflite::StringRef strref = tflite::GetString(GetInput(context, node, 0), 0);","int prev_idx = 0;","for (int i = 1; i < strref.len; i++) {","if (isspace(*(strref.str + i))) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"target\\\" missing from NamedExpr\");","return 1;","}"],"label":1}
{"cve":"CVE-2016-9843","code_chunks":["","    c = ZSWAP32((z_crc_t)crc);","    c = ~c;","    while (len && ((ptrdiff_t)buf & 3)) {","        c = crc_table[4][(c >> 24) ^ *buf++] ^ (c << 8);","        len--;","    }"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 0);","  OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","","  OpContext op_context(context, node);","","  TF_LITE_ENSURE(context, op_context.input->type == kTfLiteUInt8 ||"],"label":0}
{"cve":"CVE-2020-36316","code_chunks":["uint8_t pad, h1[RLC_MD_LEN], h2[RLC_MD_LEN];","\/* MSVC does not allow dynamic stack arrays *\/","uint8_t *mask = RLC_ALLOCA(uint8_t, k_len);","int result = RLC_OK;","bn_t t;","","bn_null(t);"],"label":1}
{"cve":"CVE-2021-4173","code_chunks":["{","char_u *line_to_free = NULL;","","(void)define_function(eap, NULL, &line_to_free);","vim_free(line_to_free);","}"],"label":0}
{"cve":"CVE-2023-28101","code_chunks":["context_parse_args (FlatpakContext *context,","...)","{","g_autoptr(GError) local_error = NULL;","g_autoptr(GOptionContext) oc = NULL;","g_autoptr(GOptionGroup) group = NULL;","g_autoptr(GPtrArray) args = g_ptr_array_new_with_free_func (g_free);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["        if (_PyObject_SetAttrId(result, &PyId_type_ignores, value) == -1)","            goto failed;","        Py_DECREF(value);","        break;","        result = PyType_GenericNew(Interactive_type, NULL, NULL);","        if (!result) goto failed;","        value = ast2obj_list(o->v.Interactive.body, ast2obj_stmt);"],"label":0}
{"cve":"CVE-2019-14495","code_chunks":["\t\t\t if(!cp->ace || !cp->ace->users){","\t\t\t\tinbuf += sprintf(buf+inbuf, \"<center>ANY<\/center>\");","\t\t\t }","\t\t\t else {","\t\t\t\tinbuf += printuserlist(buf+inbuf, LINESIZE-800, cp->ace->users, \",<br \/>\\r\\n\");","\t\t\t }","\t\t\t inbuf += sprintf(buf+inbuf, \"<\/td><td>\");"],"label":0}
{"cve":"CVE-2018-20458","code_chunks":["\tif (!bin) {","\t\treturn NULL;","\t}","\tif (!buf) {","\t\treturn r_bin_dyldcache_free (bin);","\t}","\tbin->b = r_buf_new ();"],"label":0}
{"cve":"CVE-2023-29323","code_chunks":["ss->ss_family = AF_LOCAL;","}","else if (buf[0] == '[' && buf[strlen(buf)-1] == ']') {","buf[strlen(buf)-1] = '\\0';","if (inet_pton(AF_INET6, buf+1, &ssin6.sin6_addr) != 1)","return 0;"],"label":1}
{"cve":"CVE-2016-8687","code_chunks":["\t\tarchive_entry_copy_pathname(entry, name);","\t}","\tif (hardlinkname != original_hardlinkname) {","\t\tarchive_entry_copy_hardlink(entry, hardlinkname);","\t}","\treturn (0);","}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["#if EP_DEPTH > 2","ep4_add(t[1], t[0], p);","for (i = 2; i < (1 << (EP_DEPTH - 2)); i++) {","ep4_add(t[i], t[i - 1], t[0]);","}",""],"label":1}
{"cve":"CVE-2016-8649","code_chunks":["\t\trexit(-1);","\t}","","\t\/* set user \/ group id *\/","\tnew_uid = 0;","\tnew_gid = 0;","\t\/* ignore errors, we will fall back to root in that case"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));"],"label":0}
{"cve":"CVE-2023-25663","code_chunks":["TF_RETURN_IF_ERROR(GetHandle(ctx, &container, &ta_handle));","ResourceMgr* rm = ctx->resource_manager();","if (rm == nullptr) return errors::Internal(\"No resource manager.\");","ScopedStepContainer* sc = ctx->step_container();","if (sc == nullptr) return errors::Internal(\"No step container.\");","TF_RETURN_IF_ERROR(sc->Lookup(rm, container + ta_handle, tensor_array));","return OkStatus();"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["\t}","","\tif (skip_prefix(var, \"fsck.\", &var)) {","\t\tfsck_set_msg_type(options, var, value);","\t\treturn 0;","\t}",""],"label":0}
{"cve":"CVE-2016-1904","code_chunks":["size_t estimate = (4 * l) + 3;","","","cmd = zend_string_alloc(4 * l + 2, 0); \/* worst case *\/","","#ifdef PHP_WIN32","ZSTR_VAL(cmd)[y++] = '\"';"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["stmt_ty val;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"AsyncFunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["Py_CLEAR(tmp);","step = NULL;","}"],"label":0}
{"cve":"CVE-2022-26530","code_chunks":["enum line_mode line_mode = LM_LINE;","state.failed_attempts = 0;","state.args = (struct swaylock_args){",".mode = BACKGROUND_MODE_FILL,",".font = strdup(\"sans-serif\"),",".font_size = 0,"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["Py_ssize_t len;","Py_ssize_t i;","tmp = _PyObject_GetAttrId(obj, &PyId_values);","if (tmp == NULL) goto failed;","if (!PyList_Check(tmp)) {","PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["stmt_ty o = (stmt_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT16 soundFlags;","UINT16 pad2OctetsA;","WLog_INFO(TAG, \"SoundCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));","","if (Stream_GetRemainingLength(s) < 4)"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["char_u\t    *line = NULL;","","ga_init2(&ga, sizeof(char_u *), 10);","if (ga_add_string(&ga, p) == FAIL)","return retp;","","if (p[STRLEN(p) - 1] != '}')"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus ReverseSequenceImpl(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* seq_lengths_tensor =","GetInput(context, node, kSeqLengthsTensor);","const TS* seq_lengths = GetTensorData<TS>(seq_lengths_tensor);","","auto* params ="],"label":1}
{"cve":"CVE-2023-22741","code_chunks":["    return 0;","","  \/* otherwise the check must match *\/","","#if defined(HAVE_OPENSSL)","","  \/* message integrity not received *\/"],"label":0}
{"cve":"CVE-2017-6889","code_chunks":["    pix = image[row*width+2];","    for (col=2; col < width-2; col++) {","      smred = ( 6 *  smrow[2][col][0]","\t      + 4 * (smrow[1][col][0] + smrow[3][col][0])","\t      +      smrow[0][col][0] + smrow[4][col][0] + 8 ) >> 4;","      if (col == 2)","\tsmred_p = smred;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","    node->temporaries->data[kActivation] = *scratch_tensor_index;","  TfLiteTensor* activation;","  TF_LITE_ENSURE_OK(context,","                    GetTemporarySafe(context, node, kActivation, &activation));","  activation->type = input->type;","  activation->allocation_type = kTfLiteArenaRw;"],"label":0}
{"cve":"CVE-2022-0695","code_chunks":["if (!ptr) {","goto beach;","}","if (r_buf_fread_at (bf->buf, offset, (ut8 *)&lres, \"ssss\", 1) < sizeof (lmf_resource)) {","goto beach;","}","ptr->name = strdup (\"LMF_RESOURCE\");"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["                assert(i);","","                if (kwarg)","                    arg = kwarg;","","                \/* arg will be equal to the last argument processed *\/","                arg->type_comment = NEW_TYPE_COMMENT(ch);"],"label":0}
{"cve":"CVE-2019-13221","code_chunks":["len <<= 1;","if (len == f->blocksize_0) return f->window[0];","if (len == f->blocksize_1) return f->window[1];","assert(0);","return NULL;","}",""],"label":1}
{"cve":"CVE-2021-40145","code_chunks":["if (out == NULL) return NULL;","_gdImageGd2 (im, out, cs, fmt);","rv = gdDPExtractData (out, size);","out->gd_free (out);","return rv;","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["for (int index = 0; index < dimension_size; ++index) {","if (index == data->axis) {","output_shape->data[index] = data->values_count;","} else {","output_shape->data[index] = input_shape->data[i++];","}"],"label":1}
{"cve":"CVE-2018-10199","code_chunks":["mrb_free(mrb, fptr_copy);","}","fptr_copy = (struct mrb_io *)mrb_io_alloc(mrb);","fptr_orig = io_get_open_fptr(mrb, orig);","","DATA_TYPE(copy) = &mrb_io_type;","DATA_PTR(copy) = fptr_copy;"],"label":1}
{"cve":"PYSEC-2021-462","code_chunks":["void Compute(OpKernelContext* context) override {","const Tensor* input_indices;","const Tensor* input_values;","const Tensor* input_shape;","SparseTensorsMap* map;",""],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["if (!end || end == start)","return 0;","width = strtol(start, &next, 10);","if (next == start || width == 0)","return 0;","if (width < 0) {"],"label":1}
{"cve":"CVE-2020-1912","code_chunks":["      Builder.getFunction()->getThisParameter(),","      curFunction()->capturedThis,","      true);","","    curFunction()->capturedNewTarget = Builder.createVariable(","      scope, Variable::DeclKind::Var, genAnonymousLabelName(\"new.target\"));","  emitStore("],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","if (_PyObject_HasAttrId(obj, &PyId_col_offset)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_col_offset);","if (tmp == NULL) goto failed;","res = obj2ast_int(tmp, &col_offset, arena);"],"label":1}
{"cve":"CVE-2016-10167","code_chunks":["\tgdImageSetAntiAliased(im, black);","    gdImageLine(im, 1,1, 1,1, gdAntiAliased);","","    path = gdTestFilePath2(\"gdimageline\", \"bug00315_exp.png\");","    gdAssertImageEqualsToFile(path, im);","    gdFree(path);",""],"label":0}
{"cve":"CVE-2022-3510","code_chunks":["  int n = upb_EnumDef_ValueCount(e);","  for (int i = 0; i < n; i++) {","    const upb_EnumValueDef* ev = upb_EnumDef_Value(e, i);","    char* name = strdup(upb_EnumValueDef_Name(ev));","    int32_t value = upb_EnumValueDef_Number(ev);","    if (name[0] < 'A' || name[0] > 'Z') {","      if (name[0] >= 'a' && name[0] <= 'z') {"],"label":0}
{"cve":"CVE-2023-28101","code_chunks":["return FALSE;","","for (i = 0; persistent[i] != NULL; i++)","flatpak_context_set_persistent (context, persistent[i]);","}","","if (g_key_file_has_group (metakey, FLATPAK_METADATA_GROUP_SESSION_BUS_POLICY))"],"label":1}
{"cve":"CVE-2020-23930","code_chunks":["\tctx->mdia_pos += data_size;","","\tif (ctx->opid_mdia) {","\t\t\t\tdst_pck = gf_filter_pck_new_ref(ctx->opid_mdia, data, data_size, pck);","\t\tgf_filter_pck_merge_properties(pck, dst_pck);","\t\t","\t\tgf_filter_pck_set_framing(dst_pck, ctx->first, GF_FALSE);"],"label":0}
{"cve":"PYSEC-2020-301","code_chunks":["const absl::Span<const int>& seq_lengths, bool time_major,","cudnnDataType_t data_type) {","if (max_seq_length <= 0) {","return port::Status(port::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");","}","int dims[] = {batch_size, data_size, 1};"],"label":0}
{"cve":"CVE-2022-28927","code_chunks":["","for(const RegexMatchConfig &x : emoji_array)","{","if(!x.Script.empty() && ext.authorized)","{","std::string result;","script_safe_runner(ext.js_runtime, ext.js_context, [&](qjs::Context &ctx)"],"label":0}
{"cve":"CVE-2023-1801","code_chunks":["struct tm *tm;","char time_buf[128];","","seconds = (time_t)seconds_64bit;","if (seconds != seconds_64bit) {","\/*"],"label":1}
{"cve":"CVE-2023-51698","code_chunks":["","if (!comics_document->decompress_tmp) {","argv = extract_argv (document, rc->page->index);","success = g_spawn_async_with_pipes (NULL, argv, NULL,","G_SPAWN_SEARCH_PATH |","G_SPAWN_STDERR_TO_DEV_NULL,"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void ep_mul_slide(ep_t r, const ep_t p, const bn_t k) {","bn_t _k, n;","ep_t t[1 << (EP_WIDTH - 1)], q;","int i, j, l;","uint8_t win[RLC_FP_BITS + 1];","","if (bn_is_zero(k) || ep_is_infty(p)) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* fft_length = GetInput(context, node, kFftLengthTensor);","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TF_LITE_ENSURE(context, IsPowerOfTwo(fft_length_data[0]));","TF_LITE_ENSURE(context, IsPowerOfTwo(fft_length_data[1]));"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["break;","#endif","#if defined(CONFIG_FIT)","if (!fit_check_format(hdr))","goto next_sector;","","printf(\"FIT Image at %08lX:\\n\", (ulong)hdr);"],"label":1}
{"cve":"CVE-2018-18838","code_chunks":["        s++;","    }","","    *d = '\\0';","","    return to;","}"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    case kTfLiteBool: {","      reference_ops::Reverse<bool>(","          axis, GetTensorShape(input), GetTensorData<bool>(input),","          GetTensorShape(output), GetTensorData<bool>(output));","      break;","    }","    default: {"],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["parser->m_processingInstructionHandler(parser->m_handlerArg, target, data);","poolClear(&parser->m_tempPool);","return 1;","}","","static int"],"label":1}
{"cve":"CVE-2016-3134","code_chunks":["{","\tint ret;","","\tret = register_pernet_subsys(&ip_tables_net_ops);","\tif (ret < 0)","\t\tgoto err1;",""],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["}","if (_PyObject_LookupAttrId(obj, &PyId_name, &tmp) < 0) {","return 1;","}","if (tmp == NULL || tmp == Py_None) {","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2019-17539","code_chunks":["}","","return ret;","if (avctx->codec &&","(codec_init_ok ||","(avctx->codec->caps_internal & FF_CODEC_CAP_INIT_CLEANUP)))","avctx->codec->close(avctx);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE(context, num_inputs >= 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"],"label":1}
{"cve":"CVE-2021-4019","code_chunks":["    char_u\t*line;","    int\t\tin_example = FALSE;","    int\t\tlen;","    char_u\t*fname;","    char_u\t*p;","    char_u\t*rt;","    int\t\tmustfree;"],"label":0}
{"cve":"CVE-2021-29608","code_chunks":["return tensorflow::Status::OK();","return errors::InvalidArgument(","\"Unsupported partition type:\",","RowPartitionTypeToString(partition_type));"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","const TfLiteTensor* alpha;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &alpha));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));"],"label":0}
{"cve":"CVE-2016-4303","code_chunks":["test->remote_cpu_util[1] = j_cpu_util_user->valuefloat;","test->remote_cpu_util[2] = j_cpu_util_system->valuefloat;","result_has_retransmits = j_sender_has_retransmits->valueint;","if (! test->sender)","test->sender_has_retransmits = result_has_retransmits;"],"label":1}
{"cve":"CVE-2019-13045","code_chunks":["        set = settings_get_str(\"hostname\");","\tif (set == NULL || *set == '\\0') {","\t\tstr = g_getenv(\"IRCHOST\");","\t\tif (str != NULL) {","\t\t\tsettings_set_str(\"hostname\", str);","\t\t\tchanged |= USER_SETTINGS_HOSTNAME;","\t\t}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["      context->ReportError(context, \"Type '%s' is not supported by pack.\",","                           TfLiteTypeGetName(output->type));","      return kTfLiteError;","    }","  }","","  return kTfLiteOk;"],"label":0}
{"cve":"CVE-2023-1127","code_chunks":["if (byfold)","(void)hasFolding(lnum, NULL, &lnum);","# endif","if (lnum == curwin->w_topline && do_sms)","{","int add = curwin->w_skipcol > 0 ? width2 : width1;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["input->quantization.params);","auto* output_params = reinterpret_cast<TfLiteAffineQuantization*>(","output->quantization.params);","TfLiteTensor* output_temp = GetTemporary(context, node, \/*index=*\/1);","","TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActRelu);","reference_ops::EvalIntegerSVDF("],"label":1}
{"cve":"CVE-2022-0521","code_chunks":["R_API RBinJavaAttrInfo *r_bin_java_rtv_annotations_attr_new(RBinJavaObj *bin, ut8 *buffer, ut64 sz, ut64 buf_offset) {","ut32 i = 0;","ut64 offset = 0;","if (buf_offset + 8 > sz) {","return NULL;","}","RBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);"],"label":1}
{"cve":"CVE-2022-0519","code_chunks":["\t}","\tRBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);","\toffset += 6;","\tif (attr) {","\t\tattr->type = R_BIN_JAVA_ATTR_TYPE_RUNTIME_VISIBLE_ANNOTATION_ATTR;","\t\tattr->info.annotation_array.num_annotations = R_BIN_JAVA_USHORT (buffer, offset);","\t\toffset += 2;"],"label":0}
{"cve":"CVE-2016-9391","code_chunks":["\/* We can reliably put at most 31 bits since ISO\/IEC 9899 only","guarantees that a long can represent values up to 2^31-1. *\/","if (n < 0 || n >= 32) {","return EOF;","}","\/* Ensure that only the bits to be output are nonzero. *\/"],"label":0}
{"cve":"CVE-2023-28487","code_chunks":["if (evlog->submituser != NULL)","res = strcmp(sn->u.user, evlog->submituser) == 0;","break;","rc = regexec(&sn->u.cmdre, evlog->command, 0, NULL, 0);","if (rc && rc != REG_NOMATCH) {","char buf[BUFSIZ];","regerror(rc, &sn->u.cmdre, buf, sizeof(buf));"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["","\/* verify that image data is a proper FDT blob *\/","if (image_type == IH_TYPE_FLATDT && fdt_check_header(loadbuf)) {","puts(\"Subimage data is not a FDT\");"],"label":1}
{"cve":"CVE-2022-2286","code_chunks":["if (ctrl_x_mode_normal() && dec(&st->first_match_pos) < 0)","{","st->first_match_pos.lnum = st->ins_buf->b_ml.ml_line_count;","st->first_match_pos.col =","(colnr_T)STRLEN(ml_get(st->first_match_pos.lnum));","}"],"label":1}
{"cve":"CVE-2021-41099","code_chunks":["    else","        newlen += SDS_MAX_PREALLOC;","","    type = sdsReqType(newlen);","","    \/* Don't use type 5: the user is appending to the string and type 5 is","     * not able to remember empty space, so sdsMakeRoomFor() must be called"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\tfp2_upk(a, a);","\t}","\tif (len == 2 * RLC_FP_BYTES) {","\t\tfp_read_bin(a[0], bin, RLC_FP_BYTES);","\t\tfp_read_bin(a[1], bin + RLC_FP_BYTES, RLC_FP_BYTES);","\t}","}"],"label":0}
{"cve":"CVE-2022-39209","code_chunks":["  }","  if (image != 0) {","    return b->in_bracket_image1;","  } else {","    return b->in_bracket_image0;","  }","}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["fw_cell_state_quantized->type = fw_input_to_output_weights->type;","fw_cell_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(fw_cell_state_quantized->dims,"],"label":1}
{"cve":"CVE-2018-12561","code_chunks":["if (details.isLocalFile()) {","return;","}","if (isConnected() || proc) {","return;","}"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["                PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {"],"label":0}
{"cve":"CVE-2020-9434","code_chunks":["if (lua_isstring(L, 2))","{","const char *hostname = lua_tostring(L, 2);","lua_pushboolean(L, X509_check_host(cert, hostname, strlen(hostname), 0, NULL));","}","else"],"label":1}
{"cve":"CVE-2016-3134","code_chunks":["\txt_free_table_info(private);","}","","int arpt_register_table(struct net *net,","\t\t\tconst struct xt_table *table,","\t\t\tconst struct arpt_replace *repl,","\t\t\tconst struct nf_hook_ops *ops,"],"label":0}
{"cve":"CVE-2023-40589","code_chunks":["","if (ncrush->HistoryBufferFence != 0xABABABAB)","{","WLog_ERR(TAG, \"NCrushDecompress: history buffer fence was overwritten, potential buffer \"","\"overflow detected!\");","return -1007;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* fft_length = GetInput(context, node, kFftLengthTensor);","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (output->type != kTfLiteComplex64) {"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["  }","  int siglen = EVP_MD_size(mdtype);","  String rv = String(siglen, ReserveString);","  unsigned char *sigbuf = (unsigned char *)rv.mutableData();","  EVP_MD_CTX *md_ctx = EVP_MD_CTX_new();","  SCOPE_EXIT {","    EVP_MD_CTX_free(md_ctx);"],"label":0}
{"cve":"CVE-2018-14016","code_chunks":["","\/* Parse each entry in the directory *\/","for (i = 0; i < (int)obj->hdr->number_of_streams; i++) {","entry = (struct minidump_directory *)(directory_base + (i * sizeof (struct minidump_directory)));","r_bin_mdmp_init_directory_entry (obj, entry);","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* seq_lengths;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"PYSEC-2021-846","code_chunks":["output_shape.set_dim(0, output_rows);"],"label":1}
{"cve":"PYSEC-2020-300","code_chunks":["      }","    };","    ForEach(0, expand_queue.size(), handle_level);","","        std::swap(expand_queue, next_expand_queue);","  }",""],"label":0}
{"cve":"CVE-2022-23584","code_chunks":["if (width != static_cast<int64_t>(decode.width) || width <= 0 ||","width >= (1LL << 27) || height != static_cast<int64_t>(decode.height) ||","height <= 0 || height >= (1LL << 27) || total_size >= (1LL << 29)) {","png::CommonFreeDecode(&decode);","OP_REQUIRES(context, false,","errors::InvalidArgument(\"PNG size too large for int: \",","decode.width, \" by \", decode.height));"],"label":1}
{"cve":"PYSEC-2021-584","code_chunks":["if (tuple[index].has_value()) {","return errors::InvalidArgument(","\"The tensor for index '\", index, \"' for key '\", key.scalar<int64>()(),","\"' was already initialized '\", dtypes_.size(), \"'.\");","}",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE(context, NumDimensions(input) >= 2);","  if (input->type != kTfLiteFloat32) {","    context->ReportError(context,","                         \"Type '%s' for input is not supported by rfft2d.\",","                         TfLiteTypeGetName(input->type));","    return kTfLiteError;","  }"],"label":0}
{"cve":"CVE-2023-1170","code_chunks":["mch_memmove(ptr, y_array[i], (size_t)yanklen);","ptr += yanklen;","","if ((j < count - 1 || !shortline) && spaces)","{","vim_memset(ptr, ' ', (size_t)spaces);","ptr += spaces;"],"label":1}
{"cve":"CVE-2021-41202","code_chunks":["    OP_REQUIRES(context,","                TensorShapeUtils::IsScalar(delta_in.shape()) ||","                    (TensorShapeUtils::IsVector(delta_in.shape()) &&","                     delta_in.shape().dim_size(0) == 1),","                errors::InvalidArgument(\"delta must be a scalar, not shape \",","                                        delta_in.shape().DebugString()));","    const T start = start_in.scalar<T>()();"],"label":0}
{"cve":"CVE-2017-6436","code_chunks":["return NULL;","}","return parse_string_node(object, size);","","if (size*2 < size) {","PLIST_BIN_ERR(\"%s: Integer overflow when calculating BPLIST_UNICODE data size.\\n\", __func__);"],"label":1}
{"cve":"CVE-2018-14498","code_chunks":[],"label":1}
{"cve":"CVE-2023-23557","code_chunks":[": Handle<JSObject>::vmcast(","runtime.makeHandle(*toObject(runtime, untypedSource)));","","Handle<JSObject> excludedItems = args.dyncastArg<JSObject>(2);","assert(","(!excludedItems || !excludedItems->isProxyObject()) &&"],"label":1}
{"cve":"CVE-2022-1908","code_chunks":["length--;","}","\/* self closing tag '\/>' *\/","if (*(data - 1) == '\/' && *data == '>') {","value--;","}","*value = '\\0';"],"label":1}
{"cve":"CVE-2018-20839","code_chunks":["                        continue;","                }","","                \/* all checks passed, return this one as a source console *\/","                *ret_idx = i;","                *ret_path = TAKE_PTR(path);","                return TAKE_FD(fd);"],"label":0}
{"cve":"CVE-2016-10012","code_chunks":["\tchar *myproposal[PROPOSAL_MAX] = { KEX_SERVER };","\tstruct kex *kex;","\tint r;","","\tmyproposal[PROPOSAL_KEX_ALGS] = compat_kex_proposal(","\t    options.kex_algorithms);","\tmyproposal[PROPOSAL_ENC_ALGS_CTOS] = compat_cipher_proposal("],"label":0}
{"cve":"CVE-2022-31624","code_chunks":["static volatile int internal_stop_logging= 0;","static char incl_user_buffer[1024];","static char excl_user_buffer[1024];","static char *big_buffer= NULL;","static size_t big_buffer_alloced= 0;"],"label":1}
{"cve":"CVE-2016-10190","code_chunks":["((whence == SEEK_CUR && off == 0) ||","(whence == SEEK_SET && off == s->off)))","return s->off;","else if ((s->filesize == -1 && whence == SEEK_END))","return AVERROR(ENOSYS);","","if (whence == SEEK_CUR)"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    if (tmp == NULL || tmp == Py_None) {","        Py_CLEAR(tmp);","        end_col_offset = 0;","    }","    else {","        int res;","        res = obj2ast_int(tmp, &end_col_offset, arena);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["return ::tsl::OkStatus();","} else {","return tsl::Status(","tsl::error::INTERNAL,","absl::StrFormat(\"error recording waiting for CUDA event on stream %p\",","stream));","}"],"label":0}
{"cve":"CVE-2020-8905","code_chunks":["}","","auto buffer_received = output.next();","memcpy(buf, buffer_received.data(), len);","","if (src_addr != nullptr && addrlen != nullptr) {","auto klinux_sockaddr_buf = output.next();"],"label":1}
{"cve":"CVE-2023-51698","code_chunks":["","if (sort_last_1 && !sort_last_2)","{","compare = +1;","}","else if (!sort_last_1 && sort_last_2)"],"label":1}
{"cve":"CVE-2021-32139","code_chunks":["GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;","","\/*base + this + string length*\/","s->size += 51 + 1;","if (ptr->textName)","s->size += strlen(ptr->textName);","return GF_OK;"],"label":1}
{"cve":"CVE-2020-11097","code_chunks":["\t\t                           cbAvNbDomainName))","\t\t\tgoto fail;","\t}","","\tif (AvNbComputerName)","\t{","\t\tif (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo,"],"label":0}
{"cve":"CVE-2019-11411","code_chunks":["\/* lame number to string conversion for any radix from 2 to 36 *\/","{","static const char digits[] = \"0123456789abcdefghijklmnopqrstuvwxyz\";","char buf[100];","double number = self->u.number;","int sign = self->u.number < 0;","js_Buffer *sb = NULL;"],"label":1}
{"cve":"CVE-2021-3996","code_chunks":["\t *\/","\tif (filename && *tid == -1)","\t\t*tid = path_to_tid(filename);","","\tfs->tid = *tid;","","\t\/*"],"label":0}
{"cve":"CVE-2023-1801","code_chunks":["if (i) {","int64_t seconds_64bit = (int64_t)i - JAN_1970;","time_t seconds;","struct tm *tm;","char time_buf[128];","","seconds = (time_t)seconds_64bit;"],"label":1}
{"cve":"CVE-2020-26267","code_chunks":["OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));","OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,","errors::InvalidArgument(","\"Source format must be of length 4 or 5, received \"","\"src_format = \",","src_format));"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* input_weights;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","const TfLiteTensor* recurrent_weights;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"PYSEC-2021-764","code_chunks":["const Tensor& params) {","int64_t batch_size = 1;      for (int idx = 0; idx < batch_dims_; ++idx) {","batch_size *= params.dim_size(idx);","}","OP_REQUIRES(","ctx, batch_size != 0,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  const int filter_height = SizeOfDimension(weights, 1);","","  int unused_output_height, unused_output_width;","  data->padding = ComputePaddingHeightWidth(","      params->stride_height, params->stride_width, 1, 1, height, width,","      filter_height, filter_width, params->padding, &unused_output_height,","      &unused_output_width);"],"label":0}
{"cve":"CVE-2022-35959","code_chunks":["                (GetTensorDim(ksize_, data_format_, 'N') == 1 &&","                 GetTensorDim(stride_, data_format_, 'N') == 1),","                errors::Unimplemented(","                    \"Pooling is not yet supported on the batch dimension.\"));","    OP_REQUIRES(context,","                (GetTensorDim(ksize_, data_format_, 'C') == 1 &&","                 GetTensorDim(stride_, data_format_, 'C') == 1),"],"label":0}
{"cve":"PYSEC-2021-601","code_chunks":["} else {"],"label":1}
{"cve":"CVE-2018-10887","code_chunks":["\/* cmd is a literal insert instruction; copy from","* the delta stream itself.","*\/","if (delta_end - delta < cmd || res_sz < cmd)","goto fail;","memcpy(res_dp, delta, cmd);"],"label":1}
{"cve":"CVE-2022-1587","code_chunks":["  else","    {","    \/* We only care about the first newline character. *\/","    common->nlmax = common->newline & 0xff;","    }","","  if (common->nltype == NLTYPE_FIXED)"],"label":0}
{"cve":"CVE-2021-32785","code_chunks":["reply = oidc_cache_redis_command(r, context,","apr_psprintf(r->pool, \"DEL %s\",","oidc_cache_redis_get_key(r->pool, section, key)));",""],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["pj_size_t len;","pj_status_t status = PJ_SUCCESS;","","DTLS_LOCK(ds);","","if (!ds->ossl_wbio[idx]) {","DTLS_UNLOCK(ds);"],"label":0}
{"cve":"CVE-2019-12904","code_chunks":["do_prefetch_tables (const void *gcmM, size_t gcmM_size)","{","prefetch_table(gcmM, gcmM_size);","prefetch_table(gcmR, sizeof(gcmR));","}","","#ifdef GCM_TABLES_USE_U64"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["const bn_t m, const ed_t *t) {","int i, n0, n1, w, gen;","int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], *_k, *_m;","ed_t t0[1 << (ED_WIDTH - 2)];","ed_t t1[1 << (ED_WIDTH - 2)];","size_t l, l0, l1;"],"label":0}
{"cve":"CVE-2022-21722","code_chunks":["","    cnt = pj_ntohs((pj_uint16_t)hdr->length) - 2;","    if (length < (cnt+3)*4)","\treturn PJ_ETOOSMALL;","","    *sli_cnt = PJ_MIN(*sli_cnt, cnt);",""],"label":0}
{"cve":"CVE-2018-5806","code_chunks":["#endif","  for (i=0; i < sizeof corp \/ sizeof *corp; i++)","    if (strcasestr (make, corp[i]))\t\/* Simplify company names *\/","\t    strcpy (make, corp[i]);","  if ((!strncmp(make,\"Kodak\",5) || !strncmp(make,\"Leica\",5)) &&","\t((cp = strcasestr(model,\" DIGITAL CAMERA\")) ||","\t (cp = strstr(model,\"FILE VERSION\"))))"],"label":0}
{"cve":"CVE-2022-0476","code_chunks":["\t\t\t}","\t\t\tr = r_buf_read_at (obj->b, offset, (ut8 *)op, sizeof (*op));","\t\t\tif (r != sizeof (*op)) {","\t\t\t\tbreak;","\t\t\t}","\t\t\tr_list_append (obj->streams.operations, op);","\t\t\toffset += sizeof (*op);"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["\t\t\t       const char *path,","\t\t\t       struct attr_check *check)","{","\tint pathlen, rem, dirlen;","\tconst char *cp, *last_slash = NULL;","\tint basename_offset;",""],"label":0}
{"cve":"CVE-2022-45873","code_chunks":["assert(fd >= 0);","","r = dlopen_dw();","if (r < 0)","return r;",""],"label":0}
{"cve":"CVE-2018-10540","code_chunks":["                    return WAVPACK_SOFT_ERROR;","                }","            }","","            config->bytes_per_sample = WaveHeader.BlockAlign \/ WaveHeader.NumChannels;","            config->num_channels = WaveHeader.NumChannels;","            config->sample_rate = WaveHeader.SampleRate;"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["\treturn ret;","}","","struct attr_check_item *attr_check_append(struct attr_check *check,","\t\t\t\t\t  const struct git_attr *attr)","{","\tstruct attr_check_item *item;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep4_mul_sim_lot(ep4_t r, const ep4_t p[], const bn_t k[], int n);"],"label":1}
{"cve":"CVE-2021-3772","code_chunks":["\t *\/","","\trepl = sctp_make_init(asoc, &asoc->base.bind_addr, GFP_ATOMIC, 0);","\tif (!repl)","\t\tgoto nomem;","","\t\/* Choose transport for INIT. *\/"],"label":0}
{"cve":"CVE-2016-5357","code_chunks":["\/* If there is no more data and the line was not empty,","* then there must be an error in the file","*\/","if(n == -1) {","*err = WTAP_ERR_BAD_FILE;","*err_info = g_strdup(\"netscreen: cannot parse hex-data\");","return FALSE;"],"label":1}
{"cve":"CVE-2018-7648","code_chunks":["fread(frame_codestream, sample->sample_size - 8, 1,","file); \/* Assuming that jp and ftyp markers size do*\/","","sprintf(outfilename, \"%s_%05d.j2k\", argv[2], snum);","outfile = fopen(outfilename, \"wb\");","if (!outfile) {","fprintf(stderr, \"failed to open %s for writing\\n\", outfilename);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputResourceIdTensor,","&input_resource_id_tensor));","const int resource_id = input_resource_id_tensor->data.i32[0];","","const TfLiteTensor* key_tensor;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["TF_ASSIGN_OR_RETURN(Platform * platform, LookupByIdLocked(id));","if (platform->Initialized()) {","return tsl::Status(","tsl::error::FAILED_PRECONDITION,","absl::StrFormat(\"platform with id %p is already initialized\", id));","}",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["zero_points_size));","}","node->temporaries->data[5] = op_data->scratch_tensor_index + 5;","TfLiteTensor* row_sums = GetTemporary(context, node, \/*index=*\/5);","row_sums->type = kTfLiteInt32;","row_sums->allocation_type = kTfLiteArenaRwPersistent;","int row_sums_dims[2] = {2, num_units};"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["ep_tab(t, p, EP_WIDTH);","","\/* Compute the w-NAF representation of k. *\/","l = RLC_FP_BITS + 2;","bn_rec_naf(naf, &l, _k, EP_WIDTH);",""],"label":1}
{"cve":"CVE-2018-20761","code_chunks":["GF_DownloadSession *sess = gf_dm_sess_new(term->downloader, the_url, GF_NETIO_SESSION_NOT_THREADED, NULL, NULL, &e);","if (sess) {","e = gf_dm_sess_process(sess);","if (!e) strcpy(the_url, gf_dm_sess_get_cache_name(sess));","gf_dm_sess_del(sess);","}","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2022-0520","code_chunks":["\t\tbreak;","\t\tret = get_binary_float_object (buffer);","\t\tbreak;","\t\tret = get_complex_object (buffer); \t\tbreak;","\t\tret = get_binary_complex_object (buffer);","\t\tbreak;","\t\tret = get_list_object (buffer);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor1, &input1));","  const TfLiteTensor* input2;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor2, &input2));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2022-128","code_chunks":["    }","    if (!ps[i].FromProto(proto).ok()) {","      return false;","    }","  }","  return true;","}"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (input1->type) {","case kTfLiteInt32: {"],"label":1}
{"cve":"CVE-2022-24786","code_chunks":["\t}","","\t\/* Specific codec *\/","\tif (sci_cnt == 0) {","\t    sci_cnt = PJ_ARRAY_SIZE(sci);","\t    status = get_codec_info_from_sdp(endpt, m, &sci_cnt, sci);","\t    if (status != PJ_SUCCESS) {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2023-46853","code_chunks":["static int _process_tokenize(mcp_parser_t *pr, const size_t max) {","const char *s = pr->request;","int len = pr->endlen;","","if (len > PARSER_MAXLEN) {","len = PARSER_MAXLEN;"],"label":0}
{"cve":"CVE-2018-12559","code_chunks":["void RemoteDevicePropertiesWidget::checkSaveable()","{","    RemoteFsDevice::Details det=details();","    modified=det!=orig;","    saveable=!det.isEmpty();","    emit updated();","}"],"label":0}
{"cve":"CVE-2019-20630","code_chunks":["\t\tpes->last_pcr_value = pes->program->last_pcr_value;","\t\tpes->last_pcr_value_pck_number = pes->program->last_pcr_value_pck_number;","\t} else if (pes->pes_len && (pes->pck_data_len + data_size == pes->pes_len + 6)) {","\t\t\/* 6 = startcode+stream_id+length*\/","\t\t\/*reassemble pes*\/","\t\tif (pes->pck_data_len + data_size > pes->pck_alloc_len) {","\t\t\tpes->pck_alloc_len = pes->pck_data_len + data_size;"],"label":0}
{"cve":"CVE-2018-14461","code_chunks":["         *  you are welcome to contribute code ;-)","         *\/","","","            if (ndo->ndo_vflag <= 1)","                print_unknown_data(ndo, msg_tptr, \"\\n\\t  \", msg_tlen);","            break;"],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["bool CxImageICO::Decode(CxFile *hFile)","{","if (hFile==NULL) return false;","","uint32_t off = hFile->Tell(); \tint32_t\tpage=info.nFrame;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* a0 = GetInput(context, node, 0);","TfLiteTensor* a1 = GetOutput(context, node, 0);","int num = a0->dims->data[0];","for (int i = 0; i < num; i++) {","a1->data.f[i] = a0->data.f[i];"],"label":1}
{"cve":"CVE-2022-1587","code_chunks":["CASE_ITERATOR_PRIVATE_DATA_2B","if (PRIVATE_DATA(cc))","{","private_count = 2;","private_srcw[0] = PRIVATE_DATA(cc);","private_srcw[1] = PRIVATE_DATA(cc) + sizeof(sljit_sw);"],"label":1}
{"cve":"CVE-2019-13222","code_chunks":["   int i,j,o,n = BUFFER_SIZE >> 1;","      check_endianness();","   for (o = 0; o < len; o += BUFFER_SIZE >> 1) {","            int o2 = o << 1;","      memset(buffer, 0, sizeof(buffer));","      if (o + n > len) n = len - o;","      for (j=0; j < num_c; ++j) {"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["        filename: \"{{ test_rundir }}\/test\/config\/integration\/certs\/upstreamcacert.pem\"","      - san_type: IP_ADDRESS","          exact: \"127.0.0.1\"",")EOF\";","","  const std::string server_ctx_yaml = R\"EOF(","        filename: \"{{ test_rundir }}\/test\/config\/integration\/certs\/upstreamlocalhostcert.pem\""],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["{","PyCompilerFlags cf;","node *mod_n;","mod_ty mod;","char *str;","Py_ssize_t len;"],"label":0}
{"cve":"CVE-2018-20174","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* lookup = GetInput(context, node, 0);","const TfLiteTensor* value = GetInput(context, node, 1);","TfLiteTensor* output = GetOutput(context, node, 0);","switch (value->type) {","return EvalSimple(context, node, lookup, value, output);","if (output->type == kTfLiteFloat32) {"],"label":1}
{"cve":"CVE-2022-3341","code_chunks":["goto fail;","}","for (i = 0; i < stream_count; i++)","avformat_new_stream(s, NULL);","","return 0;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\tlm = Stream_GetPosition(s);","\tStream_Seek_UINT16(s); \/* lengthCombinedCapabilities (2 bytes) *\/","\tStream_Write(s, SOURCE_DESCRIPTOR, lengthSourceDescriptor); \/* sourceDescriptor *\/","\tbm = Stream_GetPosition(s);","\tStream_Seek_UINT16(s);     \/* numberCapabilities (2 bytes) *\/","\tStream_Write_UINT16(s, 0); \/* pad2Octets (2 bytes) *\/","\t\/* Capability Sets *\/"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["}","*out = Nonlocal(names, lineno, col_offset, end_lineno, end_col_offset,","arena);","if (*out == NULL) goto failed;","return 0;","}"],"label":0}
{"cve":"CVE-2017-18190","code_chunks":["      * Prefix matches; check the character at the end - it must be \".\" or nul.","      *\/","","      end = con->clientname + a->namelen;","","      if (!*end || (*end == '.' && !end[1]))","        return (1);"],"label":0}
{"cve":"CVE-2017-3733","code_chunks":["SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);","#endif","","s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;","","s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",""],"label":1}
{"cve":"CVE-2022-40299","code_chunks":["void sdb_edit(procinfo *pi)","{","char * filename = omStrDup(\"\/tmp\/sd000000\");","sprintf(filename+7,\"%d\",getpid());","FILE *fp=fopen(filename,\"w\");","if (fp==NULL)"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["    TF_LITE_ENSURE(context, out->data.f);","    int num = a0->dims->data[0];","    for (int i = 0; i < num; i++) {","      out->data.f[i] = a0->data.f[i] + a1->data.f[i];","    }","    return kTfLiteOk;","  };"],"label":0}
{"cve":"CVE-2021-3997","code_chunks":["if (is_dir < 0 ||","root_dev ||","(is_dir > 0 && (root_dev || (flags & REMOVE_SUBVOLUME)))) {","","r = fstatat_harder(fd, fname, &st, AT_SYMLINK_NOFOLLOW, flags);","if (r < 0)"],"label":1}
{"cve":"PYSEC-2019-227","code_chunks":["if (output.size() == 0) {","return;","}","GpuLaunchConfig config = GetGpuLaunchConfig(output.size(), d);","TF_CHECK_OK(GpuLaunchKernel(SetZero<T>, config.block_count,","config.thread_per_block, 0, d.stream(),"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":[],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2016-10248","code_chunks":["\t\tband->synenergywt = jpc_dbltofix(tsfb->qmfb->hpenergywts[","\t\t  tsfb->numlvls - numlvls] * tsfb->qmfb->hpenergywts[","\t\t  tsfb->numlvls - numlvls]);","\t\t++(*bands);","","\t} else {",""],"label":0}
{"cve":"CVE-2020-27793","code_chunks":["static int r_cmd_java_call(void *user, const char *input) {","\tRCore *core = (RCore *) user;","\tint res = false;","\tut32 i = 0;","\tif (strncmp (input, \"java\", 4)) {","\t\treturn false;","\t}"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["todo[i]   = isix++;","todo[i+1] = buffer >> (14-i)*5;","}","for (i=0; i < 16; i+=2)"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["switch (tag) {","#ifdef LIBRAW_LIBRARY_BUILD","imgdata.lens.FocalLengthIn35mmFormat = get2();","break;","stmread(imgdata.shootinginfo.BodySerial, len, ifp);","break;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["reinterpret_cast<TfLiteAudioMicrofrontendParams*>(node->user_data);","FrontendReset(data->state);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2019-13134","code_chunks":["PixelPacket","shift;","","\/*","Verify BMP identifier.","*\/"],"label":1}
{"cve":"CVE-2018-20685","code_chunks":["SCREWUP(\"size out of range\");","size = (off_t)ull;","","if ((strchr(cp, '\/') != NULL) || (strcmp(cp, \"..\") == 0)) {","run_err(\"error: unexpected filename: %s\", cp);","exit(1);","}"],"label":1}
{"cve":"CVE-2019-6978","code_chunks":["gdImageJpegCtx(im, out, quality);","rv = gdDPExtractData(out, size);","out->gd_free(out);","return rv;","}"],"label":1}
{"cve":"CVE-2018-20180","code_chunks":["\t\t\t\t\t*out = color;","\t\t\t\t\tout += 4;","\t\t\t\t\tindexw++;","\t\t\t\t\treplen--;","\t\t\t\t}","\t\t\t}","\t\t}"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        NULL;","    if (PyDict_SetItemString(d, \"And\", (PyObject*)And_type) < 0) return NULL;","    if (PyDict_SetItemString(d, \"Or\", (PyObject*)Or_type) < 0) return NULL;","    if (PyDict_SetItemString(d, \"operator\", (PyObject*)operator_type) < 0)","        return NULL;","    if (PyDict_SetItemString(d, \"Add\", (PyObject*)Add_type) < 0) return NULL;","    if (PyDict_SetItemString(d, \"Sub\", (PyObject*)Sub_type) < 0) return NULL;"],"label":0}
{"cve":"PYSEC-2021-734","code_chunks":["return tensorflow::Status::OK();","return errors::InvalidArgument(","\"Unsupported partition type:\",","RowPartitionTypeToString(partition_type));"],"label":1}
{"cve":"CVE-2018-20174","code_chunks":["\tiso_send(s);","}","","\/* Send an MCS transport data packet to the global channel *\/","void","mcs_send(STREAM s)","{"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["true \/* is_async *\/);","","return ast_for_for_stmt(c, n,","true \/* is_async *\/);","","PyErr_Format(PyExc_SystemError,"],"label":0}
{"cve":"CVE-2016-6873","code_chunks":["static bool couldRecur(const Variant& v, const Array& arr) {","return v.isReferenced() ||","arr.get()->kind() == ArrayData::kGlobalsKind ||","arr.get()->kind() == ArrayData::kProxyKind;","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  FrontendReset(data->state);","","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["      TF_LITE_ENSURE_OK(","          context, context->ResizeTensor(context, fw_hidden_state_quantized,","                                         fw_hidden_state_quantized_size));","    }","","    node->temporaries->data[kBwHiddenStateQuantized] =","        op_data->scratch_tensor_index + kBwHiddenStateQuantized;"],"label":0}
{"cve":"CVE-2021-43780","code_chunks":["port io","","from redash import settings","from redash.query_"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Rfft2dHelper(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const float* input_data = GetTensorData<float>(input);","const TfLiteTensor* fft_length = GetInput(context, node, kFftLengthTensor);","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"],"label":1}
{"cve":"CVE-2022-31031","code_chunks":["msg->attr_count = 0;","p_attr = (char*)buf + sizeof(pjstun_msg_hdr);","","while (msg_len > 0) {","pjstun_attr_hdr **attr = &msg->attr[msg->attr_count];","pj_uint32_t len;","pj_uint16_t attr_type;"],"label":1}
{"cve":"CVE-2019-13217","code_chunks":["      offset += n * v->channels;","      if (offset + limit > total) {","         short *data2;","         total *= 2;","         data2 = (short *) realloc(data, total * sizeof(*data));","         if (data2 == NULL) {","            free(data);"],"label":0}
{"cve":"CVE-2016-1904","code_chunks":["#endif","","\tfor (x = 0; x < l; x++) {","\t\tint mb_len = php_mblen(str + x, (l - x));","","\t\t\/* skip non-valid multibyte characters *\/","\t\tif (mb_len < 0) {"],"label":0}
{"cve":"CVE-2017-18344","code_chunks":["","if ((event->sigev_notify & SIGEV_THREAD_ID ) &&","(!(rtn = find_task_by_vpid(event->sigev_notify_thread_id)) ||","!same_thread_group(rtn, current) ||","(event->sigev_notify & ~SIGEV_THREAD_ID) != SIGEV_SIGNAL))","return NULL;"],"label":1}
{"cve":"CVE-2021-44109","code_chunks":["data = multipart_parser_get_data(parser);","ogs_assert(data);","","data->num_of_part++;","","return 0;","}"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["    (salt[5] >= '0') && (salt[5] <= '9') &&","    (salt[6] == '$')) {","        char output[61];","","    static constexpr size_t maxSaltLength = 123;","    char paddedSalt[maxSaltLength + 1];","    paddedSalt[0] = paddedSalt[maxSaltLength] = '\\0';"],"label":0}
{"cve":"CVE-2021-32792","code_chunks":["\"        document.forms[0].action = \\\"%s\\\";\\n\"","\"        document.forms[0].submit();\\n\"","\"      }\\n\"","\"    <\/script>\\n\", method, original_url);","","const char *body = \"    <p>Restoring...<\/p>\\n\"","\"    <form method=\\\"post\\\"><\/form>\\n\";"],"label":1}
{"cve":"PYSEC-2021-827","code_chunks":["OP_REQUIRES_OK_ASYNC(c, LookupResource(c, HandleFromInput(c, 1), &resource),","done);","","Tensor group_assignment = c->input(2);","","OP_REQUIRES_OK_ASYNC("],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["                                 &input_iou_threshold));","  const float iou_threshold = *GetTensorData<float>(input_iou_threshold);","  const TfLiteTensor* input_score_threshold;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensorScoreThreshold,","                                 &input_score_threshold));","  const float score_threshold = *GetTensorData<float>(input_score_threshold);"],"label":0}
{"cve":"PYSEC-2021-397","code_chunks":["return unique_constant_id.fetch_add(1);","}","","void AddNodeToConstantGraph(","Node* n, std::unordered_map<Node*, std::vector<Node*>>* node_map,","Graph* constant_graph) {"],"label":1}
{"cve":"CVE-2017-1000251","code_chunks":["\t\t\tbreak;","","\t\t\terr = l2cap_information_req(conn, &cmd, data);","\t\t\tbreak;","","\t\t\terr = l2cap_information_rsp(conn, &cmd, data);","\t\t\tbreak;"],"label":0}
{"cve":"CVE-2023-51698","code_chunks":["","\tpage_path = g_ptr_array_index (comics_document->page_names, page->index);","","\tif (!archive_reopen_if_needed (comics_document, page_path, &error)) {","\t\tg_warning (\"Fatal error opening archive: %s\", error->message);","\t\tg_error_free (error);","\t\treturn;"],"label":0}
{"cve":"CVE-2019-19603","code_chunks":["  memset(&pSrc->a[iStart], 0, sizeof(pSrc->a[0])*nExtra);","  for(i=iStart; i<iStart+nExtra; i++){","    pSrc->a[i].iCursor = -1;","  }","","  \/* Return a pointer to the enlarged SrcList *\/","  return pSrc;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["    if (NumElements(axis) > 1) {","    context->ReportError(context, \"Current does not support more than 1 axis.\");","  }","","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["entry_oid);","else","retval += report(options, tree_oid, OBJ_TREE,","FSCK_MSG_GITMODULES_SYMLINK,","\".gitmodules is a symbolic link\");","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)While_type);","    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {","        expr_ty test;"],"label":0}
{"cve":"CVE-2019-13305","code_chunks":["                    q=PopCharPixel((unsigned char) pixel,q);","                    pixel=ScaleQuantumToAny(GetPixelBlue(image,p),max_value);","                    q=PopCharPixel((unsigned char) pixel,q);","                    p+=GetPixelChannels(image);","                  }","                  extent=(size_t) (q-pixels);","                  break;"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["TAILQ_FOREACH_REVERSE(us, &nss->parse_tree->userspecs, userspec_list, entries) {","int user_match = userlist_matches(nss->parse_tree, ctx->user.pw, &us->users);","if (user_match != ALLOW) {","if (callback != NULL && user_match != UNSPEC) {","callback(nss->parse_tree, us, user_match, NULL, UNSPEC, NULL,","UNSPEC, UNSPEC, UNSPEC, cb_data);","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","const TfLiteTensor* multipliers;"],"label":0}
{"cve":"CVE-2024-0964","code_chunks":[")","assert examples.processed_examples == [[\"hello\"]]","","examples = gr.Examples([\"test\/test_files\/bus.png\"], gr.Image())","assert ("],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  switch (rhs->type) {","            if (kernel_type == kGenericOptimized) {","        optimized_ops::BatchMatMul(rhs_shape, GetTensorData<float>(rhs_tensor),","                                   lhs_shape, GetTensorData<float>(lhs_tensor),","                                   GetTensorShape(output),","                                   GetTensorData<float>(output),","                                   CpuBackendContext::GetFromContext(context));"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["                                          &fw_input_weights));","  const TfLiteTensor* fw_recurrent_weights;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kFwRecurrentWeightsTensor,","                                 &fw_recurrent_weights));","  const TfLiteTensor* fw_bias;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2020-15121","code_chunks":["if (curl_env && *curl_env) {","char *encoded_url = r_str_escape (url);","char *res = r_sys_cmd_strf (\"curl '%s'\", encoded_url);","free (encoded_url);","if (res) {","if (code) {"],"label":1}
{"cve":"CVE-2016-7520","code_chunks":["}","if (image->gamma != 0.0)","{","count=FormatLocaleString(header,MagickPathExtent,\"GAMMA=%g\\n\",image->gamma);","(void) WriteBlob(image,(size_t) count,(unsigned char *) header);","}","count=FormatLocaleString(header,MagickPathExtent,"],"label":1}
{"cve":"CVE-2023-39355","code_chunks":["\t\treturn FALSE;","\t}","","\tFormatHeader = *srcp++;","\tcll = (FormatHeader & PLANAR_FORMAT_HEADER_CLL_MASK);","\tcs = (FormatHeader & PLANAR_FORMAT_HEADER_CS) ? TRUE : FALSE;","\trle = (FormatHeader & PLANAR_FORMAT_HEADER_RLE) ? TRUE : FALSE;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\t\t\t\tbreak;","","\t\t\t\tif (!rdp_print_glyph_cache_capability_set(&sub))","\t\t\t\t\treturn FALSE;","","\t\t\t\tbreak;",""],"label":0}
{"cve":"CVE-2022-23595","code_chunks":["device->tensorflow_cpu_worker_threads()->num_threads);","","string allowed_gpus =","flr->config_proto()->gpu_options().visible_device_list();","TF_ASSIGN_OR_RETURN(absl::optional<std::set<int>> gpu_ids,","ParseVisibleDeviceList(allowed_gpus));"],"label":1}
{"cve":"CVE-2018-8791","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["{","\tOJPEGState* sp=(OJPEGState*)tif->tif_data;","\tif (sp->qtable[table_index]!=0)","\t{","\t\t*mem=(void*)(sp->qtable[table_index]+sizeof(uint32));","\t\t*len=*((uint32*)sp->qtable[table_index])-sizeof(uint32);","\t}"],"label":0}
{"cve":"PYSEC-2021-465","code_chunks":["","void Compute(OpKernelContext* context) override {","const auto& in_min_tensor = context->input(2);","OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_min_tensor.shape()),","errors::InvalidArgument(\"min must be a scalar\"));","const float in_min = in_min_tensor.flat<float>()(0);"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT16 controlFlags;","UINT16 remoteDetachFlag;","UINT16 controlInterest;","UINT16 detachInterest;","WLog_INFO(TAG, \"ControlCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));"],"label":0}
{"cve":"CVE-2017-9763","code_chunks":["    (log2blocksize + GRUB_DISK_SECTOR_BITS);","","  for (i = pos >> (log2blocksize + GRUB_DISK_SECTOR_BITS); i < blockcnt; i++)","    {","      grub_disk_addr_t blknr;","      int blockoff = pos & (blocksize - 1);","      int blockend = blocksize;"],"label":0}
{"cve":"CVE-2021-23521","code_chunks":["static MemoryBlock createZipMemoryBlock (const StringArray& entryNames)","{","ZipFile::Builder builder;","HashMap<String, MemoryBlock> blocks;"],"label":0}
{"cve":"CVE-2021-3772","code_chunks":["chunk->subh.cookie_hdr = (struct sctp_signed_cookie *)chunk->skb->data;","if (!pskb_pull(chunk->skb, ntohs(chunk->chunk_hdr->length) -","sizeof(struct sctp_chunkhdr)))","goto nomem;","","\/* In RFC 2960 5.2.4 3, if both Verification Tags in the State Cookie"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* in_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &in_tensor));","TfLiteTensor* out_tensor;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));"],"label":0}
{"cve":"CVE-2021-38597","code_chunks":["","\/* Don't verify if we don't have access to Cert Manager. *\/","ret = ParseCertRelative(&cert, CERT_TYPE,","noVerify ? NO_VERIFY : VERIFY_OCSP, cm);","if (ret < 0) {","WOLFSSL_MSG(\"\\tOCSP Responder certificate parsing failed\");","FreeDecodedCert(&cert);"],"label":1}
{"cve":"CVE-2020-1912","code_chunks":["namespace {","void buildDummyLexicalParent(","    IRBuilder &builder,","    Function *parent,","    Function *child) {","      auto *block = builder.createBasicBlock(parent);","  builder.setInsertionBlock(block);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["      accum_scratch_size->data[1] = accum_scratch_dims[1];","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, accum_scratch,","                                                       accum_scratch_size));","    }","    node->temporaries->data[4] = op_data->scratch_tensor_index + 4;","    TfLiteTensor* zero_points;","    TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2019-15226","code_chunks":["void HeaderMapImpl::appendToHeader(HeaderString& header, absl::string_view data) {","if (data.empty()) {","return;","}","if (!header.empty()) {","header.append(\",\", 1);"],"label":1}
{"cve":"PYSEC-2021-617","code_chunks":["    Tensor* summary_indices_t = nullptr;","    OP_REQUIRES_OK(context,","                   context->allocate_output(\"stats_summary_indices\",","                                            TensorShape({num_slots, 4}),","                                            &summary_indices_t));","    auto summary_indices = summary_indices_t->matrix<int32>();","    Tensor* summary_values_t = nullptr;"],"label":0}
{"cve":"PYSEC-2021-171","code_chunks":["","TensorShape output_shape;","OP_REQUIRES_OK(context, TensorShapeUtils::MakeShape(","input_shape_t.data() + 1,","input_shape->NumElements() - 1, &output_shape));","","std::unordered_set<int64> visited;"],"label":1}
{"cve":"PYSEC-2020-273","code_chunks":["  for (int i = 0; i < ndim; i++) {","    (*shape_arr)[i] = tensor->dim_size(i);","  }","  for (int i = ndim - 2; i >= 0; --i) {","    (*stride_arr)[i] = (*shape_arr)[i + 1] * (*stride_arr)[i + 1];","  }",""],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["else","g_message (\"Warning: Failed to parse old metadata for %s\\n\", flatpak_decomposed_get_ref (op->ref));","}","}","","static void"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":[],"label":1}
{"cve":"CVE-2018-20180","code_chunks":["\t\tlogger(Protocol, Error, \"mcs_recv_cjcf(), expected opcode CJcf, got %d\", opcode);","\t\treturn False;","\t}","","\tin_uint8(s, result);","\tif (result != 0)","\t{"],"label":0}
{"cve":"PYSEC-2022-67","code_chunks":["TfLiteIntArray* TfLiteIntArrayCreate(int size) {","int alloc_size = TfLiteIntArrayGetSizeInBytes(size);","if (alloc_size <= 0) return NULL;","TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);","if (!ret) return ret;"],"label":1}
{"cve":"CVE-2023-25136","code_chunks":["debug2_f(\"original cipher proposal: %s\", cipher_prop);","if ((cipher_prop = match_filter_denylist(cipher_prop, \"aes*\")) == NULL)","fatal(\"match_filter_denylist failed\");","debug2_f(\"compat cipher proposal: %s\", cipher_prop);","if (*cipher_prop == '\\0')","fatal(\"No supported ciphers found\");"],"label":0}
{"cve":"CVE-2023-2006","code_chunks":["}","spin_unlock(&bundle->channel_lock);","","\/* If there are no more connections, remove the bundle *\/","if (!bundle->avail_chans) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static void ep_mul_naf_imp(ep_t r, const ep_t p, const bn_t k) {","int i, l;","\/* Some of the supported prime curves have order > field. *\/","int8_t u, naf[RLC_FP_BITS + 2];","ep_t t[1 << (EP_WIDTH - 2)];"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void ep2_map(ep2_t p, const uint8_t *msg, size_t len) {","ep2_map_dst(p, msg, len, (const uint8_t *)\"RELIC\", 5);","}"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["int axis = params->axis;","int num_inputs = node->inputs->size;","","const TfLiteTensor* t0 = GetInput(context, node, 0);","TfLiteType input_type = t0->type;","if (axis < 0) axis += t0->dims->size;","TF_LITE_ENSURE(context, axis >= 0);"],"label":1}
{"cve":"CVE-2021-4173","code_chunks":["if (nextcmd != NULL && *skipwhite(nextcmd) != NUL)","{","eap->nextcmd = nextcmd;","if (*line_to_free != NULL)","{","vim_free(*eap->cmdlinep);","*eap->cmdlinep = *line_to_free;"],"label":1}
{"cve":"PYSEC-2021-174","code_chunks":["","void Compute(OpKernelContext* context) override {","const float in_min = context->input(2).flat<float>()(0);","const float in_max = context->input(3).flat<float>()(0);","","ImageResizerState st(align_corners_, false);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                \/* Octal *\/","                c = tok_nextc(tok);","                do {","                    if (c == '_') {","                        c = tok_nextc(tok);","                    }","                    if (c < '0' || c >= '8') {"],"label":0}
{"cve":"CVE-2018-14017","code_chunks":["\t\toffset += 2;","\t\tlnattr->file_offset = curpos;","\t\tlnattr->size = 4;","\t\tr_list_append (linenum_list, lnattr);","\t}","\tattr->size = offset;","\treturn attr;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["            temp = PyNumber_Add(result, item);","            Py_DECREF(result);","            Py_DECREF(item);","            result = temp;","            if (result == NULL) {","                Py_DECREF(iter);","                return NULL;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));",""],"label":0}
{"cve":"PYSEC-2020-308","code_chunks":["  m.def(\"TF_SetXlaConstantFoldingDisabled\", &TF_SetXlaConstantFoldingDisabled);","  m.def(\"TF_GetXlaConstantFoldingDisabled\", &TF_GetXlaConstantFoldingDisabled);","  m.def(\"TF_SetXlaMinClusterSize\", &TF_SetXlaMinClusterSize);","  m.def(\"TF_GetCompilerIr\", &tensorflow::TFE_GetCompilerIr);","","    m.def(\"TF_IsMlirBridgeEnabled\", [] {","    return tensorflow::GetMlirCommonFlags()->tf_mlir_enable_mlir_bridge;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &key));","  const TfLiteTensor* value;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &value));","","  const int num_rows = SizeOfDimension(value, 0);","  const int row_bytes = value->bytes \/ num_rows;","  void* pointer = nullptr;"],"label":0}
{"cve":"CVE-2019-20805","code_chunks":["unsigned w = get_te32(&file_image[d]);","if (xct_off <= w) {","set_te32(&file_image[d], asl_delta + w);","}","++n_jmp_slot;","}"],"label":1}
{"cve":"CVE-2018-18311","code_chunks":["dVAR;","char *envstr;","const int nlen = strlen(nam);","int vlen;","","if (!val) {"],"label":1}
{"cve":"CVE-2020-5215","code_chunks":["if (TF_PREDICT_FALSE(sizeof(T) < sizeof(double) && std::isinf(*out) &&","std::isfinite(as_double))) {","return ErrorOutOfRangeDouble;","}"],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["} else {","response = codec_client_->makeHeaderOnlyRequest(request_headers);","}","waitForNextUpstreamRequest(upstream_index);","upstream_request_->encodeHeaders(response_headers, response_size == 0);","if (response_size) {","upstream_request_->encodeData(response_size, true);"],"label":1}
{"cve":"CVE-2022-35959","code_chunks":["TensorShape output_shape;","auto shape_vec = tensor_in_shape.vec<int32>();","for (int64_t i = 0; i < tensor_in_shape.NumElements(); ++i) {","output_shape.AddDim(shape_vec(i));","}","","Tensor* output;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2018-12562","code_chunks":["","det.name=name->text().trimmed();","switch (t) {","case Type_SshFs: {","det.url.setHost(sshHost->text().trimmed());","det.url.setUserName(sshUser->text().trimmed());"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void eb_write_bin(uint8_t *bin, int len, const eb_t a, int pack) {","eb_t t;","","eb_null(t);"],"label":1}
{"cve":"CVE-2021-3778","code_chunks":["match = FALSE;","break;","}","len2 += MB_CHAR2LEN(c2);","}","if (match","&& !(enc_utf8"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 soundFlags;","","if (length < 8)","return FALSE;","","Stream_Read_UINT16(s, soundFlags); \/* soundFlags (2 bytes) *\/"],"label":1}
{"cve":"CVE-2017-9990","code_chunks":["if (ptr + cpp > end)","return AVERROR_INVALIDDATA;","index = ptr;","ptr += cpp;"],"label":1}
{"cve":"CVE-2018-14362","code_chunks":["*        - if we don't have a body: new","*\/","const bool bcached =","(mutt_bcache_exists(pop_data->bcache, ctx->hdrs[i]->data) == 0);","ctx->hdrs[i]->old = false;","ctx->hdrs[i]->read = false;","if (hcached)"],"label":1}
{"cve":"PYSEC-2021-645","code_chunks":["Status ValidateInput(const OpInputList& indices_list_in,","const OpInputList& values_list_in,","const OpInputList& shapes_list_in,","const OpInputList& dense_list_in) {","const auto size = indices_list_in.size();","for (int i = 0; i < size; i++) {","if (!TensorShapeUtils::IsMatrix(indices_list_in[i].shape())) {"],"label":1}
{"cve":"PYSEC-2022-141","code_chunks":["meta_graph_def.signature_def().find(kSavedModelInitOpSignatureKey);","if (init_op_sig_it != sig_def_map.end()) {","const auto& sig_def_outputs = init_op_sig_it->second.outputs();","const auto& sig_def_outputs_it =","sig_def_outputs.find(kSavedModelInitOpSignatureKey);","if (sig_def_outputs_it == sig_def_outputs.end()) {"],"label":0}
{"cve":"CVE-2018-18313","code_chunks":["vFAIL2(\"Empty \\\\%c\", (U8)value);","if (*RExC_parse == '{') {","const U8 c = (U8)value;","e = strchr(RExC_parse, '}');","if (!e) {","RExC_parse++;","vFAIL2(\"Missing right brace on \\\\%c{}\", c);"],"label":1}
{"cve":"PYSEC-2021-542","code_chunks":["auto out = output_tensor->flat_inner_dims<T>();","T* out_data = out.data();","","memset(out_data, 0, fixed_length * flat_in.size());","","if (!convert_data_endianness_ || sizeof(T) == 1) {"],"label":1}
{"cve":"CVE-2018-8791","code_chunks":["}","ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);","xfree(bmpdata);","continue;","}",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  const TfLiteTensor* value;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kValueTensor, &value));","","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));",""],"label":0}
{"cve":"CVE-2022-29788","code_chunks":["        MOBIIndexTag t = e.tags[j];","        if (t.tagid == INDX_TAGARR_INFL_PARTS_V1) {","            for (size_t k = 0; k + 1 < t.tagvalues_count; k += 2) {","                uint32_t len = t.tagvalues[k];","                uint32_t offset = t.tagvalues[k + 1];","                char *base = mobi_get_cncx_string_flat(indx->cncx_record, offset, len);","                if (base == NULL) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int i, n;","int8_t naf[RLC_FB_BITS + 1];","eb_t t[1 << (EB_WIDTH - 2)];","size_t l;","","RLC_TRY {"],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["    label = LABEL();","    compile_char1_matchingpath(common, type, cc, &backtrack->topbacktracks, FALSE);","    OP2(SLJIT_SUB | SLJIT_SET_Z, tmp_base, tmp_offset, tmp_base, tmp_offset, SLJIT_IMM, 1);","    JUMPTO(SLJIT_NOT_ZERO, label);","    }","  else","    {"],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["  }","  fseek (ifp, 72, SEEK_CUR);","  switch ((get4()+3600) % 360) {","    case 270:  flip = 4;  break;","    case 180:  flip = 1;  break;","    case  90:  flip = 7;  break;","    case   0:  flip = 2;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE(context, input_dims_size >= 1);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","TfLiteIntArray* output_shape = TfLiteIntArrayCreate(input_dims_size + 1);","for (int i = 0; i < input_dims_size; i++) {","output_shape->data[i] = input_dims->data[i];"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["    LOG(ERROR) << \"CUDA LRN does not support cudnn-around mode\";","    return false;","  }","  if (normalize_descriptor.segment_size()) {","    LOG(ERROR) << \"CUDA LRN does not support segmentation\";","    return false;","  }"],"label":0}
{"cve":"CVE-2021-41197","code_chunks":["errors::InvalidArgument(\"Paddings must be non-negative: \",","before_d, \" \", after_d));","const int64_t size_d = in0.dim_size(d);","output_shape.AddDim(before_d + size_d + after_d);","}","","if (output_shape.num_elements() == in0.NumElements()) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp24_exp_cyc_sps(fp24_t c, const fp24_t a, const int *b, int len, int sign) {","int i, j, k, w = len;","fp24_t t, *u = RLC_ALLOCA(fp24_t, w);","","if (len == 0) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output = GetOutput(context, node, 0);","DynamicBuffer buf;","StringRef str_ref = GetString(input, 0);","buf.AddString(str_ref);","buf.WriteToTensorAsVector(output);"],"label":1}
{"cve":"PYSEC-2021-596","code_chunks":["TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","","if (output->type == kTfLiteFloat32 || output->type == kTfLiteInt32) {","EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);","} else if (output->type == kTfLiteUInt8) {","TF_LITE_ENSURE_OK("],"label":1}
{"cve":"CVE-2023-26123","code_chunks":["        data = (unsigned char *)RL_CALLOC(MAX_DECOMPRESSION_SIZE*1024*1024, 1);","    int length = sinflate(data, MAX_DECOMPRESSION_SIZE*1024*1024, compData, compDataSize);","","            unsigned char *temp = (unsigned char *)RL_REALLOC(data, length);","","    if (temp != NULL) data = temp;","    else TRACELOG(LOG_WARNING, \"SYSTEM: Failed to re-allocate required decompression memory\");"],"label":0}
{"cve":"CVE-2018-16643","code_chunks":["c=ReadBlobByte(image);","if (c == EOF)","break;","(void) fputc(c,file);","}","}","(void) fclose(file);"],"label":1}
{"cve":"CVE-2019-17177","code_chunks":["","if (intersects)","return region16_union_rect(dst, dst, &common);","","return TRUE;","}"],"label":1}
{"cve":"CVE-2022-4415","code_chunks":["","        if (uid_is_system(uid) || uid_is_dynamic(uid) || uid == UID_NOBODY)","                return 0;","","        \/* Make sure normal users can read (but not write or delete) their own coredumps *\/","        r = fd_add_uid_acl_permission(fd, uid, ACL_READ);","        if (r < 0)"],"label":0}
{"cve":"CVE-2020-29074","code_chunks":["","#if HAVE_XSHM","shm->shmid = shmget(IPC_PRIVATE,","xim->bytes_per_line * xim->height, IPC_CREAT | 0777);","","if (shm->shmid == -1) {","rfbErr(\"shmget(%s) failed.\\n\", name);"],"label":1}
{"cve":"CVE-2018-20786","code_chunks":["init_vterm_ansi_colors(term->tl_vterm);","#endif","","\/* This may change a string in \"argvar\". *\/","term->tl_job = job_start(argvar, argv, opt, TRUE);","if (term->tl_job != NULL)"],"label":1}
{"cve":"CVE-2019-13305","code_chunks":["        if (q != pixels)","          {","            *q++='\\n';","            (void) WriteBlob(image,q-pixels,pixels);","          }","        break;","      }"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","  const int scratch_tensor_index = op_data->scratch_tensor_index;","","    bool is_layer_norm_lstm = false;","  if (node->inputs->size == 24) {","    const TfLiteTensor* forget_layer_norm_coefficients = GetOptionalInputTensor(","        context, node, lstm::full::kForgetLayerNormCoefficientsTensor);"],"label":0}
{"cve":"CVE-2021-40563","code_chunks":["","\t\t\t\tif (!ctx->opid && current) {","\t\t\tassert(remain>=current);","            assert((s32) current >= 0);","","\t\t\tstart += current;","\t\t\tremain -= current;"],"label":0}
{"cve":"CVE-2017-16818","code_chunks":["if ((s == \"*\") && wildcards) {","return ARN(Partition::wildcard, Service::wildcard, \"*\", \"*\", \"*\");","} else if (regex_match(s, match, wildcards ? rx_wild : rx_no_wild)) {","ceph_assert(match.size() == 6);","","ARN a;","{"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params = reinterpret_cast<TfLiteDivParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputVariableId,","&input_resource_id_tensor));","int resource_id = input_resource_id_tensor->data.i32[0];","auto& resources = subgraph->resources();","auto* variable = resource::GetResourceVariable(&resources, resource_id);","TF_LITE_ENSURE(context, variable != nullptr);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static void eb_mul_ltnaf_imp(eb_t r, const eb_t p, const bn_t k) {","int i, l, n;","int8_t tnaf[RLC_FB_BITS + 8], u;","eb_t t[1 << (EB_WIDTH - 2)];",""],"label":1}
{"cve":"CVE-2019-15161","code_chunks":["goto error;","","rpcap_createhdr((struct rpcap_header *) sendbuf, ver,","RPCAP_MSG_FINDALLIF_REPLY, nif, plen);","","for (d = alldevs; d != NULL; d = d->next)","{"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["for (int p = 0; p < top_paths; ++p) {","const int32_t p_num = num_entries[p];","","TfLiteTensor* indices = GetOutput(context, node, p);","TF_LITE_ENSURE_OK(context, Resize(context, {p_num, 2}, indices));"],"label":1}
{"cve":"PYSEC-2022-148","code_chunks":["void DecodePngV2(OpKernelContext* context, StringPiece input) {","    int channel_bits = (data_type_ == DataType::DT_UINT8) ? 8 : 16;","    png::DecodeContext decode;","    OP_REQUIRES(","        context, png::CommonInitDecode(input, channels_, channel_bits, &decode),","        errors::InvalidArgument(\"Invalid PNG. Failed to initialize decoder.\"));",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["void* Init(TfLiteContext* context, const char* buffer, size_t length) {","  auto* data = new OpData;","  return data;","}","","void Free(TfLiteContext* context, void* buffer) {","  delete reinterpret_cast<OpData*>(buffer);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","TfLiteTensor* output0;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output0));","SetTensorToDynamic(output0);","const TfLiteTensor* input;"],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["{","if(!image)","throw LIBRAW_EXCEPTION_IO_CORRUPT;","","int bypp = tiff_bps <= 8 ? 1 : 2;","int bufsize = width * 3 * bypp;"],"label":0}
{"cve":"CVE-2023-52076","code_chunks":["extract_one_file(EpubDocument* epub_document, GFile *tmp_gfile, GError ** error)","{","GFile * outfile ;","gsize writesize = 0;"],"label":0}
{"cve":"CVE-2020-8904","code_chunks":["uint64_t *output_len) {","if (!asylo::primitives::TrustedPrimitives::IsOutsideEnclave(input,","input_len) ||","!asylo::primitives::TrustedPrimitives::IsOutsideEnclave(","output_len, sizeof(uint64_t))) {","asylo::primitives::TrustedPrimitives::BestEffortAbort("],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["   filters = 0x49494949;","   order = 0x4949;","   maximum = 0xfffC;","  } else if (!strcmp(model,\"BB-500CL\")) {","   height = 2058;","   width = 2448;","   load_raw = &CLASS unpacked_load_raw;"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["debug_decl(userlist_matches, SUDOERS_DEBUG_MATCH);","","TAILQ_FOREACH_REVERSE(m, list, member_list, entries) {","if ((matched = user_matches(parse_tree, pw, m)) != UNSPEC)","break;","}","debug_return_int(matched);"],"label":1}
{"cve":"CVE-2018-16643","code_chunks":["c=ReadBlobByte(pwp_image);","if (c == EOF)","break;","(void) fputc(c,file);","}","(void) fclose(file);","if (c == EOF)"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2016-4562","code_chunks":["          if (dot_product <= miterlimit)","            path_p[p++]=box_p[4];","          else","            {","              path_p[p++]=box_p[1];","              path_p[p++]=box_p[2];","            }"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp12_write_bin(uint8_t *bin, size_t len, const fp12_t a, int pack) {","\tfp12_t t;","","\tfp12_null(t);","","\tRLC_TRY {","\t\tfp12_new(t);"],"label":0}
{"cve":"CVE-2024-23324","code_chunks":["                      \"Extension length is {}, current index is {}, current type is {}, current \"","                      \"value length is {}.\",","                      len, idx, tlv_type, tlv_length_upper));","      return false;","    }","","        absl::string_view tlv_value(reinterpret_cast<char const*>(buf + idx), tlv_value_length);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\tbn_zero(l);","\t\tbn_set_2b(h, bits >> 1);","\t\tif (bits >= 2) {","\t\t\tbn_set_2b(l, (bits >> 1) - 1);","\t\t}","","\t\t\/* Trivial binary search approach. *\/"],"label":0}
{"cve":"CVE-2023-27601","code_chunks":["\t\t\tlmp->u.value[i+buff_len] = lmp->u.value[i];","","\t\tmemcpy(lmp->u.value,buff,buff_len);","","\t\tlmp->len += buff_len;","","\t}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["l = RLC_MAX(l, _l[i]);","}","","ep2_set_infty(r);","for (j = l - 1; j >= 0; j--) {","ep2_dbl(r, r);"],"label":1}
{"cve":"CVE-2018-20177","code_chunks":["\t}","","\tif (tag != tagval)","\t{","\t\tlogger(Core, Error, \"ber_parse_header(), expected tag %d, got %d\", tagval, tag);","\t\treturn False;","\t}"],"label":0}
{"cve":"CVE-2020-15191","code_chunks":["}","","dlm_tensor->dl_tensor.shape = &(*shape_arr)[0];","dlm_tensor->dl_tensor.strides = &(*stride_arr)[0];","dlm_tensor->dl_tensor.byte_offset =","0;    return static_cast<void*>(dlm_tensor);"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["\/*algo=*\/ToConvForwardAlgo(algorithm_desc),","\/*sizeInBytes=*\/&size_in_bytes));","}","","int64_t size_in_bytes_int64_t = size_in_bytes;",""],"label":1}
{"cve":"PYSEC-2020-258","code_chunks":["static const char* ConvertScalar(PyObject* v, Eigen::half* out) {","Safe_PyObjectPtr as_float = make_safe(PyNumber_Float(v));","double v_double = PyFloat_AS_DOUBLE(as_float.get());","*out = Eigen::half(v_double);","","return nullptr;","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["    input_quantized->type = input_weights->type;","    input_quantized->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {","      TfLiteIntArray* input_quantized_size = TfLiteIntArrayCopy(input->dims);","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_quantized,","                                                       input_quantized_size));","    }"],"label":0}
{"cve":"CVE-2018-14362","code_chunks":["int count = snprintf(dest, destlen, \"%s.hcache\", path);","","\/* Strip out any directories in the path *\/","char *first = strchr(dest, '\/');","char *last = strrchr(dest, '\/');","if (first && last && (last > first))"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteType input_type = GetInput(context, node, 0)->type;","TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;","","TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);","TF_LITE_ENSURE(context,"],"label":1}
{"cve":"CVE-2016-0740","code_chunks":["\t\t\tTRACE((\"error in TIFFSetSubDirectory\"));","\t\t\treturn -1;","\t\t}","\t}","","\tsize = TIFFScanlineSize(tiff);","\tTRACE((\"ScanlineSize: %d \\n\", size));"],"label":0}
{"cve":"CVE-2019-13307","code_chunks":["    rows;","","  rows=MagickMax(GetImageListLength(images),","    (size_t) GetMagickResourceLimit(ThreadResource));","  pixels=(MagickPixelPacket **) AcquireQuantumMemory(rows,sizeof(*pixels));","  if (pixels == (MagickPixelPacket **) NULL)","    return((MagickPixelPacket **) NULL);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  if (node->builtin_data == nullptr) return false;","  const auto* fc_params =","      reinterpret_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);","  const int kInput = 0;","  const int kWeights = 1;","  const int kBias = 2;",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int i, n0, n1, s0, s1;","int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], *t0, *t1;","bn_t n, _k, k0, k1, v1[3], v2[3];","ep_t q, t[1 << (EP_WIDTH - 2)];","size_t l, l0, l1;",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* input_weights;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","const TfLiteTensor* recurrent_weights;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2020-11558","code_chunks":["if (GF_4CC((u32)data[i+4], (u8)data[i+5], (u8)data[i+6], (u8)data[i+7]) == GF_ISOM_BOX_TYPE_ESDS) {","GF_BitStream *mybs = gf_bs_new(data + i, size - i, GF_BITSTREAM_READ);","if (ptr->esd) {","gf_isom_box_del((GF_Box *)ptr->esd);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output_index_tensor = GetOutput(context, node, 1);","TF_LITE_ENSURE_EQ(context, NumElements(output_index_tensor),","NumElements(input));",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    TfLiteRegistration reg = {nullptr, nullptr, nullptr, nullptr};","","    reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","                        TfLiteTensor* output0;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output0));","      TF_LITE_ENSURE(context, IsDynamicTensor(output0));","            const TfLiteTensor* input;"],"label":0}
{"cve":"CVE-2018-20180","code_chunks":["{","color = CVAL(in);","*out = color;","out += 4;","indexw++;","collen--;"],"label":1}
{"cve":"CVE-2022-35972","code_chunks":["void Compute(OpKernelContext* context) override {","const Tensor& input = context->input(0);","const Tensor& bias = context->input(1);","","const Tensor& min_input = context->input(2);","const Tensor& max_input = context->input(3);"],"label":0}
{"cve":"CVE-2018-20406","code_chunks":["PyErr_NoMemory();","return NULL;","}","for (i = 0; i < self->mt_allocated; i++) {","Py_XINCREF(self->mt_table[i].me_key);","}","memcpy(new->mt_table, self->mt_table,"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE(context, node->inputs->size == kInputNum);","TF_LITE_ENSURE(context, node->outputs->size == kOutputNum);","","const TfLiteTensor* input = GetInput(context, node, kInputData);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2021-3995","code_chunks":[" * mnt_context_helper_setopt() backend."," *"," * This function applies umount.type command line option (for example parsed"," * by getopt() or getopt_long()) to @cxt. All unknown options are ignored and"," * then 1 is returned."," *"," * Returns: negative number on error, 1 if @c is unknown option, 0 on success."],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["}","if (_PyObject_HasAttrId(obj, &PyId_values)) {","int res;","Py_ssize_t len;","Py_ssize_t i;","tmp = _PyObject_GetAttrId(obj, &PyId_values);"],"label":1}
{"cve":"CVE-2022-0359","code_chunks":["ccline.cmdfirstc = (firstc == '@' ? 0 : firstc);","ccline.cmdindent = (firstc > 0 ? indent : 0);","","alloc_cmdbuff(exmode_active ? 250 : indent + 1);","if (ccline.cmdbuff == NULL)","return FAIL;","ccline.cmdlen = ccline.cmdpos = 0;"],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["addDummyHeaders(headers, state.range(0));","uint64_t size = 0;","for (auto _ : state) {","size += headers.byteSize();","}","benchmark::DoNotOptimize(size);","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (type == kGenericOptimized) {","optimized_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["isinstance = PyObject_IsInstance(obj, (PyObject*)Slice_type);","if (isinstance == -1) {","return 1;","}","if (isinstance) {","expr_ty lower;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["        }","        return E_SYNTAX;","    }","}","","","#ifdef Py_DEBUG"],"label":0}
{"cve":"CVE-2023-0302","code_chunks":["#if 0","\t\/* THIS IS TOO SLOW *\/","\tif (r_file_exists (file)) {","\t\tp = file;","\t}","#else","\tp = file;"],"label":0}
{"cve":"CVE-2022-3299","code_chunks":["connection_t *conn = NULL;","ogs_sbi_response_t *response = NULL;","","ogs_assert(client);","multi = client->multi;","ogs_assert(multi);"],"label":0}
{"cve":"CVE-2020-26247","code_chunks":["{","VALUE content;","VALUE parse_options;","int parse_options_int;","xmlSchemaParserCtxtPtr ctx;","xmlSchemaPtr schema;"],"label":0}
{"cve":"CVE-2018-20181","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["    return false;","  }","  if (normalize_descriptor.segment_size()) {","    LOG(ERROR) << \"CUDA LRN does not support segmentation\";","    return false;","  }",""],"label":0}
{"cve":"CVE-2016-5688","code_chunks":["if (status == MagickFalse)","{","image=DestroyImageList(image);","return((Image *) NULL);","}","\/*"],"label":1}
{"cve":"CVE-2017-6887","code_chunks":["maximum = 0xffff;","break;","case 50454: \/* Sinar tag *\/","if (len > 2560000 || !(cbuf = (char *)malloc(len)))","break;","#ifndef LIBRAW_LIBRARY_BUILD","fread(cbuf, 1, len, ifp);"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["Network::TransportSocketFactoryPtr XfccIntegrationTest::createClientSslContext(bool mtls) {","const std::string yaml_tls = R\"EOF(","filename: {{ test_rundir }}\/test\/config\/integration\/certs\/cacert.pem","exact: \"lyft.com\"","exact: \"www.lyft.com\""],"label":1}
{"cve":"PYSEC-2021-663","code_chunks":["","void Compute(OpKernelContext* context) override {","const float in_min = context->input(2).flat<float>()(0);","const float in_max = context->input(3).flat<float>()(0);","","ImageResizerState st(align_corners_, false);"],"label":1}
{"cve":"CVE-2021-32785","code_chunks":["\t\t\t\toidc_cache_redis_command(r, context, \"SETEX %s %d %s\", oidc_cache_redis_get_key(r->pool, section, key), timeout, value);","","\t}","","\trv = (reply != NULL) && (reply->type != REDIS_REPLY_ERROR);","","\t\/* free the reply object resources *\/"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["","break;","","if (!gcc_read_server_security_data(s, mcs))","{","WLog_ERR(TAG,","\"gcc_read_server_data_blocks: gcc_read_server_security_data failed\");"],"label":1}
{"cve":"CVE-2022-45909","code_chunks":["bool replaceHostInUri( std::string& uri, const char* szHost, const char* szPort ) {","su_home_t* home = theOneAndOnlyController->getHome() ;","char *s ;","char buf[255];","char obuf[255] ;","char hp[64] ;"],"label":1}
{"cve":"CVE-2020-24342","code_chunks":["  if (getCcalls(L) <= CSTACKERR) {  \/* possible C stack overflow? *\/","    luaE_exitCcall(L);  \/* to compensate decrement in next call *\/","    luaE_enterCcall(L);  \/* check properly *\/","  }","  luaD_call(L, func, nResults);","  decXCcalls(L);","}"],"label":0}
{"cve":"CVE-2018-12320","code_chunks":["\tr_anal_cond_free (bb->cond);","\tR_FREE (bb->fingerprint);","\tr_anal_diff_free (bb->diff);","\tbb->diff = NULL;","\tR_FREE (bb->op_bytes);","\tr_anal_switch_op_free (bb->switch_op);","\tbb->switch_op = NULL;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2023-26123","code_chunks":["void OpenURL(const char *url)","{","if (strchr(url, '\\'') != NULL) TRACELOG(LOG_WARNING, \"SYSTEM: Provided URL could be potentially malicious, avoid [\\'] character\");","else","{","#if defined(PLATFORM_DESKTOP)"],"label":0}
{"cve":"CVE-2017-6439","code_chunks":["    if (ref_size == 0) {","        PLIST_BIN_ERR(\"object reference size in trailer must be larger than 0\\n\");","        return;","    }","","    if (root_object >= num_objects) {","        PLIST_BIN_ERR(\"root object index (%\" PRIu64 \") must be smaller than number of objects (%\" PRIu64 \")\\n\", root_object, num_objects);"],"label":0}
{"cve":"CVE-2021-32628","code_chunks":["            if (sdslen(nodekey) != sizeof(streamID)) {","                rdbExitReportCorruptRDB(\"Stream node key entry is not the \"","                                        \"size of a stream ID\");","            }","","            \/* Load the listpack. *\/","            unsigned char *lp ="],"label":0}
{"cve":"CVE-2019-13307","code_chunks":["size_t","columns,","rows;","","rows=MagickMax(GetImageListLength(images),","(size_t) GetMagickResourceLimit(ThreadResource));"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["void MainWindow::checkFingerprint(const QString& line)","{","QRegExp fingerprintRegex(\".*peer fingerprint \\\\(SHA1\\\\): ([A-F0-9:]+) \\\\(SHA256\\\\): ([A-F0-9:]+)\");","if (!fingerprintRegex.exactMatch(line)) {","return;","}"],"label":0}
{"cve":"CVE-2023-40589","code_chunks":["if (HistoryPtr >= HistoryBufferEnd)","{","WLog_ERR(TAG, \"ncrush_decompress error: HistoryPtr (%p) >= HistoryBufferEnd (%p)\",","(void*)HistoryPtr, (void*)HistoryBufferEnd);","return -1003;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp54_write_bin(uint8_t *bin, int len, const fp54_t a, int pack) {","fp54_t t;","","fp54_null(t);"],"label":1}
{"cve":"CVE-2022-4202","code_chunks":["","#ifdef GPAC_FIXED_POINT","if (val >> (nb_bits-1) ) {","s32 neg = (s32) val - (1<<nb_bits);","if (neg < -FIX_ONE \/ 2)","return 2 * gf_divfix(INT2FIX(neg\/2), lsr->res_factor);"],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["op->txt = r_str_newf (\"%s %d\", opdef->txt, op->val);","}","op->len += n;","}","break;","{"],"label":1}
{"cve":"CVE-2022-41898","code_chunks":["    if (N > 0) {","      TF_RETURN_IF_ERROR(wrap_kernel_call(CopyRowIndicesKernel<Tindex>,","                                          \/*device=*\/device, \/*size=*\/N, rank,","                                          indices, row_indices));","    }","        TF_RETURN_IF_ERROR(context->allocate_temp(index_type, TensorShape({N}),","                                              input_index_map_t));"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            items = _Ta3_asdl_seq_new(len, arena);","            if (items == NULL) goto failed;","            for (i = 0; i < len; i++) {","                withitem_ty val;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["GetOptionalInputTensor(context, node, lstm::full::kProjectionBiasTensor);","if (projection_bias != nullptr) {","TF_LITE_ENSURE_EQ(context, projection_bias->dims->size, 1);","TF_LITE_ENSURE_EQ(context, projection_bias->dims->data[0], n_output);","}",""],"label":1}
{"cve":"CVE-2016-4563","code_chunks":["            {","              target.red=(double) draw_info->border_color.red;","              target.green=(double) draw_info->border_color.green;","              target.blue=(double) draw_info->border_color.blue;","            }","          status&=FloodfillPaintImage(image,draw_info,&target,x,y,","            MagickTrue,exception);"],"label":0}
{"cve":"CVE-2022-1238","code_chunks":["ut8 segnum = *(bin->entry_table + off);","off++;","ut16 segoff = *(ut16 *)(bin->entry_table + off);","entry->paddr = (ut64)bin->segment_entries[segnum - 1].offset * bin->alignment + segoff;","} else { \t\t\t\tentry->paddr = (ut64)bin->segment_entries[bundle_type - 1].offset * bin->alignment + *(ut16 *)(bin->entry_table + off);","}","off += 2;"],"label":1}
{"cve":"CVE-2018-20761","code_chunks":["\t\t\t\ti++;","\t\t\t}","\t\t\telse if (!stricmp(arg, \"-service\")) {","\t\t\t\tinitial_service_id = atoi(argv[i+1]);","\t\t\t\ti++;","\t\t\t}","\t\t}"],"label":0}
{"cve":"PYSEC-2021-735","code_chunks":["\"Operands do not have the same ranks; got shapes: \",","a_shape->SummarizeValue(10), \" and \", b_shape->SummarizeValue(10)));","const auto a_shape_flat = a_shape->flat<int64>();","const auto b_shape_flat = b_shape->flat<int64>();","for (int i = 0; i < a_shape->NumElements(); ++i) {","OP_REQUIRES(ctx, a_shape_flat(i) == b_shape_flat(i),"],"label":1}
{"cve":"CVE-2016-7514","code_chunks":["SetPixelIndex(image,(((unsigned char) pixel) &","(0x01 << (7-bit))) != 0 ? 0 : 255,q);","SetPixelViaPixelInfo(image,image->colormap+(ssize_t)","GetPixelIndex(image,q),q);","q+=GetPixelChannels(image);","x++;","}"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            for (i = 0; i < len; i++) {","                stmt_ty val;","                res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"For field \\\"body\\\" changed size during iteration\");","                    goto failed;"],"label":0}
{"cve":"CVE-2017-17081","code_chunks":["const int dyh = (dyy - (1 << (16 + shift))) * (h - 1);","const int dxh = dxy * (h - 1);","const int dyw = dyx * (w - 1);","int need_emu  =  (unsigned) ix >= width  - w ||"],"label":1}
{"cve":"CVE-2019-16718","code_chunks":["}","if (p && *p && p[1] == '>') {","str = p + 2;","while (*str == '>') {","str++;","}"],"label":1}
{"cve":"CVE-2023-23457","code_chunks":["                ph.getPackHeaderSize() + sizeof(overlay_offset))","            < up4(file_size)) {","                funpad4(fi);          unsigned d_info[4]; fi->readx(d_info, sizeof(d_info));","        if (0==old_dtinit) {","            old_dtinit = get_te32(&d_info[2 + (0==d_info[0])]);","            is_asl = 1u& get_te32(&d_info[0 + (0==d_info[0])]);","        }"],"label":0}
{"cve":"CVE-2017-9141","code_chunks":["MagickBooleanType","status,","cubemap = MagickFalse,","volume = MagickFalse;","","CompressionType"],"label":0}
{"cve":"CVE-2019-3556","code_chunks":["    return string_crypt(key, random_salt);","  }","","  auto const saltLen = strlen(salt);","  if ((saltLen > sizeof(\"$2X$00$\")) &&","    (salt[0] == '$') &&","    (salt[1] == '2') &&"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["reinterpret_cast<TfLiteFullyConnectedParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2021-33910","code_chunks":["_cleanup_free_ char *p = NULL;","char *s;","","assert(f);","assert(ret);",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* value;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kValueTensor, &value));","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["bw_activation_state_quantized->type = fw_input_to_output_weights->type;","bw_activation_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(bw_activation_state_quantized->dims,"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* tensor0;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &tensor0));","TfLiteTensor* tensor1;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &tensor1));"],"label":0}
{"cve":"CVE-2021-3744","code_chunks":["memset(&op, 0, sizeof(op));","op.cmd_q = cmd_q;","op.jobid = CCP_NEW_JOBID(cmd_q->ccp);","op.sb_key = cmd_q->sb_key;","op.sb_ctx = cmd_q->sb_ctx;","op.init = 1;"],"label":1}
{"cve":"CVE-2020-9434","code_chunks":["{","X509 * cert = CHECK_OBJECT(1, X509, \"openssl.x509\");","size_t sz;","const char *email = luaL_checklstring(L, 2, &sz);","int flags = luaL_optint(L, 3, 0);","int ret = X509_check_email(cert, email, sz, flags);"],"label":0}
{"cve":"CVE-2017-3733","code_chunks":["\/* r->length is now the compressed data plus mac *\/","if ((sess != NULL) &&","(s->enc_read_ctx != NULL) &&","(EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {","\/* s->read_hash != NULL => mac_size != -1 *\/","unsigned char *mac = NULL;","unsigned char mac_tmp[EVP_MAX_MD_SIZE];"],"label":1}
{"cve":"CVE-2017-3731","code_chunks":["\/* Correct length for explicit IV *\/","len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;","\/* If decrypting correct for tag too *\/","if (!EVP_CIPHER_CTX_encrypting(c))","len -= cctx->M;","EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;","EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["keyword_ty o = (keyword_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"CVE-2017-9763","code_chunks":["eprintf (\"oops. no disk\\n\");","return 1;","}","const int blocksize = 512; \tRIOBind *iob = disk->data;","if (bio) {","iob = bio;"],"label":0}
{"cve":"CVE-2020-16587","code_chunks":["    return parts[partNumber];","}","","","","void","MultiPartInputFile::Data::readChunkOffsetTables(bool reconstructChunkOffsetTable)"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["tmp = _PyObject_GetAttrId(obj, &PyId_names);","if (tmp == NULL) goto failed;","if (!PyList_Check(tmp)) {","PyErr_Format(PyExc_TypeError, \"Global field \\\"names\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","goto failed;"],"label":1}
{"cve":"CVE-2022-45909","code_chunks":["su_home_t* home = theOneAndOnlyController->getHome() ;","char *s ;","char buf[MAX_SIP_URI_LEN];","char obuf[MAX_SIP_URI_LEN] ;","char hp[64] ;","char const *display = NULL;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep4_mul_sim_lot(ep4_t r, const ep4_t p[], const bn_t k[], int n) {","const int len = RLC_FP_BITS + 1;","int i, j, m, l, *_l = RLC_ALLOCA(int, 8 * n);","bn_t _k[8], q, x;","int8_t *naf = RLC_ALLOCA(int8_t, 8 * n * len);",""],"label":1}
{"cve":"PYSEC-2021-764","code_chunks":["void AddBatchOffsets(Tensor* indices, const Tensor& params) {","int64_t batch_size = 1;      for (int idx = 0; idx < batch_dims_; ++idx) {","batch_size *= params.dim_size(idx);","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["bw_hidden_state_quantized->type = fw_input_weights->type;","bw_hidden_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(bw_hidden_state_quantized->dims,"],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["if (data.empty()) {","return 0;","}","uint64_t byte_size = 0;","if (!header.empty()) {","header.append(\",\", 1);"],"label":0}
{"cve":"PYSEC-2021-171","code_chunks":["                         map->AddSparseTensor(context, empty_st, &handle));","          sparse_handles_t(b) = handle;","        }","      }","    }","","    context->set_output(0, sparse_handles);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (_PyObject_HasAttrId(obj, &PyId_lineno)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_lineno);","if (tmp == NULL) goto failed;","res = obj2ast_int(tmp, &lineno, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2018-8800","code_chunks":["","\t\t\tout_uint8p(&token, output_tok.value, output_tok.length);","\t\t\ts_mark_end(&token);","","\t\t\tif (!cssp_send_tsrequest(&token, NULL, NULL))","\t\t\t\tgoto bail_out;",""],"label":0}
{"cve":"CVE-2020-28196","code_chunks":["return ASN1_MISMATCH_INDEF;","p = asn1;","while (!(len >= 2 && p[0] == 0 && p[1] == 0)) {","ret = get_tag(p, len, &t, &c, &clen, &p, &len);","if (ret)","return ret;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t} RLC_CATCH_ANY {","\t\tRLC_THROW(ERR_CAUGHT);","\t} RLC_FINALLY {","\t\tg1_free(g1);","\t\tg2_free(g2);","\t\tgt_free(e);","\t\tgt_free(u);"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["barrier::FingerprintData fingerprint_sha1 = {","barrier::fingerprint_type_to_string(barrier::FingerprintType::SHA1),","barrier::string::from_hex(fingerprintRegex.cap(1).toStdString())","};","","barrier::FingerprintData fingerprint_sha256 = {"],"label":1}
{"cve":"CVE-2022-1061","code_chunks":["static RCoreSymCacheElement *parseDragons(RBinFile *bf, RBuffer *buf, int off, int bits, R_OWN char *file_name) {","D eprintf (\"Dragons at 0x%x\\n\", off);","ut64 size = r_buf_size (buf);","if (off >= size) {","return NULL;","}"],"label":1}
{"cve":"CVE-2018-20176","code_chunks":["x = CVAL(in);","if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;"],"label":1}
{"cve":"CVE-2021-45938","code_chunks":["                \/* use generic packet object *\/","                use_packet_obj = &client->msg;","            }","            use_packet_type = packet_type;","","        #ifdef WOLFMQTT_MULTITHREAD","            \/* Check to see if we have a pending response for this packet *\/"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\t\t\tif (!rdp_write_bitmap_cache_v3_codec_id_capability_set(s, settings))","\t\t\t\treturn FALSE;","\t\t}","\t}","","\tem = Stream_GetPosition(s);","\tStream_SetPosition(s, lm); \/* go back to lengthCombinedCapabilities *\/"],"label":0}
{"cve":"CVE-2018-15473","code_chunks":["\t\treason = \"Refused by certificate options\";","\t\tgoto fail_reason;","\t}","\tif (principals_opts == NULL) {","\t\tfinal_opts = cert_opts;","\t\tcert_opts = NULL;","\t} else {"],"label":0}
{"cve":"CVE-2020-1918","code_chunks":["if (length > 0) {","memcpy(buffer, (const void *)(m_data + m_cursor), length);","}","m_cursor += length;","return length;","}"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["const absl::Span<const int>& seq_lengths, bool time_major,","cudnnDataType_t data_type) {","if (max_seq_length <= 0) {","return tsl::Status(tsl::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");","}","int dims[] = {batch_size, data_size, 1};","int strides[] = {dims[1] * dims[2], dims[2], 1};"],"label":0}
{"cve":"CVE-2021-30014","code_chunks":["Bool vps_default_ptl_dpb_hrd_max_tid_flag=0;","","vps_id = gf_bs_read_int_log(bs, 4, \"vps_id\");","if (vps_id >= 16) return -1;","if (!vps_id) {","GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] VPS ID 0 is forbidden\\n\"));","return -1;"],"label":1}
{"cve":"CVE-2019-18853","code_chunks":["{","svg_info->parser=xmlCreatePushParserCtxt(sax_handler,svg_info,(char *)","message,n,image->filename);","(void) xmlCtxtUseOptions(svg_info->parser,XML_PARSE_HUGE);","while ((n=ReadBlob(image,MagickPathExtent-1,message)) != 0)","{","message[n]='\\0';"],"label":1}
{"cve":"CVE-2019-19924","code_chunks":["","pTab = sqlite3DbMallocZero(db, sizeof(Table));","if( pTab==0 ){","return SQLITE_NOMEM;","}","","p->pSrc = 0;"],"label":1}
{"cve":"CVE-2016-3134","code_chunks":["(*rulenum)++;","","if (s->target_offset == sizeof(struct ipt_entry) &&","strcmp(t->target.u.kernel.target->name,","XT_STANDARD_TARGET) == 0 &&","t->verdict < 0 &&"],"label":1}
{"cve":"CVE-2018-5808","code_chunks":["{","if(!image)","throw LIBRAW_EXCEPTION_IO_CORRUPT;","","int bypp = tiff_bps <= 8 ? 1 : 2;","int bufsize = width * 3 * bypp;"],"label":0}
{"cve":"CVE-2017-6197","code_chunks":["c->interfaces_offset <","bin->header.data_offset + bin->header.data_size) {","p = r_buf_get_at (binfile->buf, c->interfaces_offset, NULL);","int types_list_size = r_read_le32(p);","if (types_list_size < 0 || types_list_size >= bin->header.types_size ) {","return;","}"],"label":1}
{"cve":"PYSEC-2022-81","code_chunks":["            flat_t());","      }","      return ReturnUnknownShape(out);","    } else {","      *out = nullptr;","      return errors::InvalidArgument(","          \"Input tensor must be int32 or int64, but was \","],"label":0}
{"cve":"CVE-2018-6767","code_chunks":["JunkChunk junkchunk;","WaveHeader wavhdr;","uint32_t bcount;","","int64_t total_data_bytes, total_riff_bytes;","int num_channels = WavpackGetNumChannels (wpc);","int32_t channel_mask = WavpackGetChannelMask (wpc);"],"label":0}
{"cve":"CVE-2020-27764","code_chunks":["break;","}","{","result=(MagickRealType) ((size_t) pixel << (size_t) (value+0.5));","break;","}","{"],"label":1}
{"cve":"CVE-2022-37032","code_chunks":["\t\t\t\t     BGP_NOTIFY_OPEN_UNSUP_CAPBL, ","\t\t\t\t     error_data, error - error_data);","\t  return -1;","\t}","","      \/* Check local capability does not negotiated with remote","         peer. *\/"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["GetInput(context, node, kRecurrentWeightsTensor);","const TfLiteTensor* bias = GetInput(context, node, kBiasTensor);","TfLiteTensor* hidden_state =","&context->tensors[node->inputs->data[kHiddenStateTensor]];","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t} else {","\t\t\tif (len != 48 * RLC_FP_BYTES) {","\t\t\t\tRLC_THROW(ERR_NO_BUFFER);","\t\t\t}","\t\t\tfp24_write_bin(bin, 24 * RLC_FP_BYTES, a[0], 0);","\t\t\tfp24_write_bin(bin + 24 * RLC_FP_BYTES, 24 * RLC_FP_BYTES, a[1], 0);","\t\t}"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));","TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);","TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);","","const TfLiteTensor* value;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &value));"],"label":0}
{"cve":"CVE-2021-41227","code_chunks":["Status CreateTempFileFloat(Env* env, float value, uint64 size,","string* filename) {","const string dir = testing::TmpDir();","*filename = io::JoinPath(dir, strings::StrCat(\"file_\", value));","std::unique_ptr<WritableFile> file;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus EvalImpl(TfLiteContext* context, const TfLiteTensor* input,","TfLiteNode* node) {","std::map<T, int> unique_values;","TfLiteTensor* output_indexes = GetOutput(context, node, 1);","std::vector<T> output_values;","I* indexes = GetTensorData<I>(output_indexes);","const T* data = GetTensorData<T>(input);"],"label":1}
{"cve":"CVE-2022-0519","code_chunks":["ut32 i = 0;","ut64 offset = 0, curpos;","if (sz < 8) {","return NULL;","}","RBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["                    goto failed;","                }","                asdl_seq_SET(body, i, val);","            }","            Py_CLEAR(tmp);","        }","        if (_PyObject_LookupAttrId(obj, &PyId_orelse, &tmp) < 0) {"],"label":0}
{"cve":"CVE-2020-11735","code_chunks":["XFREE(t2, NULL, DYNAMIC_TYPE_ECC);","XFREE(t1, NULL, DYNAMIC_TYPE_ECC);","}","#endif","return MEMORY_E;","}"],"label":1}
{"cve":"PYSEC-2021-400","code_chunks":["const int64_t stats_dims = logits_dims + hessians_dims;","const int64_t num_sparse_entries = feature_indices_t->dim_size(0);","const int32_t feature_dims = feature_shape(1);","DCHECK_LE(num_sparse_entries, batch_size * feature_dims);","","StatsPartitionMap stats_map;",""],"label":1}
{"cve":"CVE-2016-10190","code_chunks":["static void update_metadata(HTTPContext *s, char *data)","{","    char *key;","    char *val;","    char *end;","    char *next = data;",""],"label":0}
{"cve":"CVE-2018-14679","code_chunks":["\t    cmp = compare(filename, (char *)p, fname_len, name_len);","","\t    if (cmp == 0) break;","\t    else if (cmp < 0) { if (M) R = M - 1; else return 0; }","\t    else if (cmp > 0) L = M + 1;","\t} while (L <= R);","\tM = (L + R) >> 1;"],"label":0}
{"cve":"CVE-2021-30218","code_chunks":["return -1;","}","ret = 0;","if (fwrite(s->s, 1, s->n, f) != s->n || fflush(f) != 0) {","warn(\"write %s:\", name);","ret = -1;","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["    if (!kwdefaults && nkwonlyargs)","        return NULL;","","    \/* tfpdef: NAME [':' test]","       vfpdef: NAME","    *\/","    i = 0;"],"label":0}
{"cve":"CVE-2021-41136","code_chunks":["goto st21;","if ( ++p == pe )","goto _test_eof21;","#line 509 \"ext\/puma_http11\/http11_parser.c\"","switch( (*p) ) {","case 32: goto tr33;","case 60: goto st0;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["hidden_state_quantized->type = input_weights->type;","hidden_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(hidden_state_quantized->dims,"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["}","","QuantizeMultiplier(effective_input_to_input_scale,","&integer_lstm_param->effective_input_to_input_scale_a,","&integer_lstm_param->effective_input_to_input_scale_b);","QuantizeMultiplier(effective_recurrent_to_input_scale,"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["return ast_for_call(c, CHILD(n, 1), left_expr, true);","}"],"label":0}
{"cve":"CVE-2021-36082","code_chunks":["#ifdef DEBUG_TLS","printf(\"TLS %s() called\\n\", __FUNCTION__);","#endif","","memset(&ja3, 0, sizeof(ja3));",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["fw_input_to_output_weights->type);","const int n_fw_output = fw_recurrent_to_output_weights->dims->data[1];","","const TfLiteTensor* bw_recurrent_to_output_weights ="],"label":1}
{"cve":"CVE-2023-39978","code_chunks":["clone_info->composite_mask=CloneImage(draw_info->composite_mask,0,0,","MagickTrue,&draw_info->composite_mask->exception);","clone_info->render=draw_info->render;","clone_info->image_info=CloneImageInfo(draw_info->image_info);","clone_info->debug=draw_info->debug;","return(clone_info);","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TF_LITE_ENSURE(context, NumDimensions(input) >= 2);","if (input->type != kTfLiteFloat32) {","context->ReportError(context,"],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["goto err;","}","if (txt) {","op->txt = r_str_newf (\"%s %d\", opdef->txt, op->val);","}","op->len += n;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2021-32139","code_chunks":["GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;","","s->size += 8;","\/*base + this + string length*\/","s->size += 43 + 1;","if (ptr->textName)"],"label":0}
{"cve":"CVE-2018-10199","code_chunks":["  }","","  if (!mrb_nil_p(write)) {","    mrb_check_type(mrb, write, MRB_TT_ARRAY);","    wp = &wset;","    FD_ZERO(wp);","    for (i = 0; i < RARRAY_LEN(write); i++) {"],"label":0}
{"cve":"CVE-2016-9388","code_chunks":["int v;","int i;","jas_matrix_t *data[3];","","\/* Note: This function does not properly handle images with a colormap. *\/","\/* Avoid compiler warnings about unused parameters. *\/","cmap = 0;"],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["\tif (td->td_compression==COMPRESSION_OJPEG)","\t{","\t\tif (!TIFFFieldSet(tif,FIELD_PHOTOMETRIC))","\t\t{","\t\t\tTIFFWarningExt(tif->tif_clientdata, \"TIFFReadDirectory\",","\t\t\t\"Photometric tag is missing, assuming data is YCbCr\");","\t\t\tif (!TIFFSetField(tif,TIFFTAG_PHOTOMETRIC,PHOTOMETRIC_YCBCR))"],"label":0}
{"cve":"CVE-2018-14882","code_chunks":["\t}","\tif (bp[24] & 0x07) {","\t\tND_PRINT((ndo,\" robustness=%d\", bp[24] & 0x07));","\t}","\tif (bp[25] < 128) {","\t\tqqi = bp[25];","\t} else {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["           expression, literal will be NULL. If we're at the end of","           the f-string, expression will be NULL (unless result == 1,","           see below). *\/","        int result = fstring_find_literal_and_expr(str, end, raw, recurse_lvl,","                                                   &literal, &expression,","                                                   c, n);","        if (result < 0)"],"label":0}
{"cve":"CVE-2017-12595","code_chunks":["","empty = false;","","QPDFObjectHandle object;","","std::vector<std::vector<QPDFObjectHandle> > olist_stack;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"CVE-2023-23143","code_chunks":["if (si->slice_type > 9) return -1;","","pps_id = gf_bs_read_ue_log(bs, \"pps_id\");","if ((pps_id<0) || (pps_id > 255)) return -1;"],"label":1}
{"cve":"CVE-2021-44109","code_chunks":["break;","","DEFAULT","ogs_log_hexdump(OGS_LOG_FATAL, (unsigned char *)at, length);","ogs_error(\"Unknown content_type [%s]\",","data->part[data->num_of_part].content_type);","END"],"label":1}
{"cve":"CVE-2018-10540","code_chunks":["}","else {","int bytes_to_copy = (chunk_header.ckSize + 1) & ~1L;","char *buff = malloc (bytes_to_copy);","","if (debug_logging_mode)","error_line (\"extra unknown chunk \\\"%c%c%c%c\\\" of %d bytes\","],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["prod_scaling_factors->type = kTfLiteFloat32;","prod_scaling_factors->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(prod_scaling_factors->dims, 1,"],"label":1}
{"cve":"CVE-2021-44108","code_chunks":["","    p = ogs_slprintf(p, last, \"%s\\r\\n\\r\\n%s\",","            OGS_SBI_CONTENT_TYPE \": \" OGS_SBI_CONTENT_JSON_TYPE, json);","","    ogs_free(json);","","    \/* Add part *\/"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["{","if (len < 1)","return;   string[len - 1] = 0;","if (len < 3)","return;   len = strnlen(string, len - 1);","for (int i = len - 1; i >= 0; i--)"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["alias_ty o = (alias_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_RETURN_NONE;","}","","result = PyType_GenericNew(alias_type, NULL, NULL);"],"label":0}
{"cve":"CVE-2023-29007","code_chunks":["}","","while (fgets(buf, sizeof(buf), config_file)) {","unsigned i;","int length;","int is_section = 0;"],"label":1}
{"cve":"CVE-2016-9841","code_chunks":["}","len -= op - whave;","do {","PUP(out) = 0;","} while (--op > whave);","if (op == 0) {"],"label":1}
{"cve":"CVE-2018-8795","code_chunks":["static RD_BOOL","process_data_pdu(STREAM s, uint32 * ext_disc_reason)","{","\tuint8 data_pdu_type;","\tuint8 ctype;","\tuint16 clen;","\tuint32 len;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  }","      if (input->dims->data[input->dims->size - 1] != NumElements(input)) {","    return false;","  }","","  if (node->inputs->size > 2) {","    const TfLiteTensor* bias;"],"label":0}
{"cve":"CVE-2016-9388","code_chunks":["{","\tif (ras_getint(in, &hdr->magic) || ras_getint(in, &hdr->width) ||","\t  ras_getint(in, &hdr->height) || ras_getint(in, &hdr->depth) ||","\t  ras_getint(in, &hdr->length) || ras_getint(in, &hdr->type) ||","\t  ras_getint(in, &hdr->maptype) || ras_getint(in, &hdr->maplength)) {","\t\treturn -1;","\t}"],"label":0}
{"cve":"CVE-2021-3881","code_chunks":["    mobi_buffer_setpos(buf, data2_offset);","    if (buf->offset + (64 * 4) > buf->maxlen) {","        debug_print(\"%s\", \"HUFF data2 too short\\n\");","        mobi_buffer_free_null(buf);","        return MOBI_DATA_CORRUPT;","    }","    \/* read 32 mincode-maxcode pairs from data2 big-endian *\/"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {"],"label":1}
{"cve":"CVE-2020-26269","code_chunks":["return Status(tensorflow::error::INVALID_ARGUMENT,","\"Filesystem calls GetMatchingPaths with nullptr arguments\");","}","","results->clear();","if (pattern.empty()) {"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (!FunctionDef_type) return 0;","AsyncFunctionDef_type = make_type(\"AsyncFunctionDef\", stmt_type,","AsyncFunctionDef_fields, 6);","if (!AsyncFunctionDef_type) return 0;","ClassDef_type = make_type(\"ClassDef\", stmt_type, ClassDef_fields, 5);","if (!ClassDef_type) return 0;"],"label":0}
{"cve":"CVE-2021-32628","code_chunks":["","            if (rdbtype == RDB_TYPE_ZSET_2) {","                if (rdbLoadBinaryDoubleValue(rdb,&score) == -1) {","                    decrRefCount(o);","                    sdsfree(sdsele);","                    return NULL;","                }"],"label":0}
{"cve":"CVE-2018-7254","code_chunks":["}","}","else if (!strncmp (caf_chunk_header.mChunkType, \"chan\", 4)) {","CAFChannelLayout *caf_channel_layout = malloc ((size_t) caf_chunk_header.mChunkSize);","","if (caf_chunk_header.mChunkSize < sizeof (CAFChannelLayout) ||"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  mfcc.set_upper_frequency_limit(params->upper_frequency_limit);","  mfcc.set_lower_frequency_limit(params->lower_frequency_limit);","  mfcc.set_filterbank_channel_count(params->filterbank_channel_count);","  mfcc.set_dct_coefficient_count(params->dct_coefficient_count);","","  mfcc.Initialize(spectrogram_channels, sample_rate);",""],"label":0}
{"cve":"CVE-2020-11044","code_chunks":["Stream_Read_UINT16(s, bitmapData->height); \/* height (2 bytes) *\/","Stream_Read_UINT32(s, new_len);            \/* length (4 bytes) *\/","","if (Stream_GetRemainingLength(s) < new_len)","goto fail;","","new_data = (BYTE*)realloc(bitmapData->data, new_len);"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["}","if (!options.san_.empty()) {","common_context->mutable_validation_context()->add_match_subject_alt_names()->set_exact(","options.san_);","}","for (const std::string& cipher_suite : options.cipher_suites_) {"],"label":1}
{"cve":"CVE-2016-9840","code_chunks":["code FAR *next;             \/* next available space in table *\/","const unsigned short FAR *base;     \/* base value table to use *\/","const unsigned short FAR *extra;    \/* extra bits table to use *\/","int end;                    \/* use base and extra for symbol > end *\/","unsigned short count[MAXBITS+1];    \/* number of codes of each length *\/","unsigned short offs[MAXBITS+1];     \/* offsets in table for each length *\/","static const unsigned short lbase[31] = { \/* Length codes 257..285 base *\/"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["bool& isvalid, CryptoKey& session_key) override;"],"label":1}
{"cve":"PYSEC-2022-150","code_chunks":["for (size_t i = 0; i < dtypes.size(); ++i) {","TF_RETURN_IF_ERROR(AddItem(strings::StrCat(arg_def.name(), \":\", i),","{true, arg_index, 0, false, {dtypes[i]}}));","DCHECK_EQ(arg_index, result_.nodes.size());","string name = arg_def.name();","if (dtypes.size() > 1) {","strings::StrAppend(&name, \"_\", i);"],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["      }","","      i++;","      return false;","    }","  );","  bt_slab.len = i;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(body, i, value);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;"],"label":0}
{"cve":"CVE-2021-4173","code_chunks":["lambda_name = vim_strsave(get_lambda_name());","if (lambda_name == NULL)","return NULL;","ufunc = define_function(eap, lambda_name);","","if (ufunc == NULL)","{"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["      if (delete_on_error != nullptr) {","        TfLiteIntArrayFree(delete_on_error);","      }","    }","    return status;","  };","  TF_LITE_ENSURE_OK(context, resize_tensor(output_indexes, output_indexes_shape,"],"label":0}
{"cve":"CVE-2018-5729","code_chunks":["            if ((strval[0] = getstringtime(unlock_time)) == NULL)","                goto cleanup;","","            if ((st=krb5_add_str_mem_ldap_mod(&mods, \"krbLastAdminUnlock\",","                                              LDAP_MOD_REPLACE, strval)) != 0) {","                free (strval[0]);","                goto cleanup;"],"label":0}
{"cve":"CVE-2019-15165","code_chunks":["if (total_length < sizeof(*bhdrp) + sizeof(*shbp) + sizeof(struct block_trailer)) {","pcap_snprintf(errbuf, PCAP_ERRBUF_SIZE,","\"Section Header Block in pcapng dump file has a length of %u < %\" PRIsize,","total_length,","sizeof(*bhdrp) + sizeof(*shbp) + sizeof(struct block_trailer));","*err = 1;","return (NULL);"],"label":1}
{"cve":"CVE-2023-48221","code_chunks":["\tmbuf_strdup(mbb, &sdpres, mbb->end);","\tmem_deref(mbb);","\t\t","\tif (flow_updateh) {","\t\tflow_updateh(flow, sdpres);","\t}",""],"label":0}
{"cve":"PYSEC-2022-70","code_chunks":["","if (sparsity.dim_metadata_size == kDimMetadataSizeRandomSparse) {","optimized_ops::FullyConnectedSparseWeight(","sparsity, op_params, GetTensorShape(input),","GetTensorData<float>(input), GetTensorShape(filter),","GetTensorData<float>(filter), GetTensorShape(bias),"],"label":1}
{"cve":"CVE-2018-11376","code_chunks":["\t\t\t\t}","\t\t\t}","\t\t\tfree (buf);","\t\t}","\t}","\tr_list_free (secs);","}"],"label":0}
{"cve":"CVE-2021-36080","code_chunks":["Dwg_Object_##token *_obj = obj->tio.object->tio.token;","","#define DWG_OBJECT_END                                                        \\","if (!obj->hdlpos)                                                         \\","{                                                                       \\","START_OBJECT_HANDLE_STREAM                                            \\"],"label":1}
{"cve":"CVE-2021-29594","code_chunks":["int8_t* filter_ptr = nullptr;","if (im2col != nullptr) {","im2col_ptr = im2col->data.int8;","}","filter_ptr = filter->data.int8;","const auto* affine_quantization ="],"label":1}
{"cve":"CVE-2023-4683","code_chunks":["if (parser->done) break;","","\/*X3D specific things (ignored for now)*\/","if (!strcmp(str, \"PROFILE\")) gf_bt_force_line(parser);","else if (!strcmp(str, \"COMPONENT\")) gf_bt_force_line(parser);","else if (!strcmp(str, \"META\")) gf_bt_force_line(parser);","else if (!strcmp(str, \"IMPORT\") || !strcmp(str, \"EXPORT\")) {"],"label":1}
{"cve":"CVE-2020-36316","code_chunks":["\t\t\t\t\tif (pad == RSA_PAD) {","\t\t\t\t\t\tresult = RLC_OK;","\t\t\t\t\t}","\t\t\t\t\tbn_mod_2b(m, m, (k_len - *p_len) * 8);","\t\t\t\t}","\t\t\t\tbreak;","\t\t}"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp54_exp_cyc_sps(fp54_t c, const fp54_t a, const int *b, int len, int sign) {","int i, j, k, w = len;","fp54_t t, *u = RLC_ALLOCA(fp54_t, w);","","if (len == 0) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["else {","int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}"],"label":1}
{"cve":"CVE-2022-23595","code_chunks":["platform_info.xla_device_metadata()->client(),","platform_info.xla_device_metadata()->jit_device_type());","return Status::OK();","}","","auto platform =","se::MultiPlatformManager::PlatformWithId(platform_info.platform_id());"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\t\t(*p_len)--;","\t\t\t\t\tbn_rsh(t, m, *p_len * 8);","\t\t\t\t\tif (pad == 0 && bn_cmp_dig(t, 1) == RLC_EQ) {","\t\t\t\t\t\tresult = RLC_OK;","\t\t\t\t\t}","\t\t\t\t\tbn_mod_2b(m, m, *p_len * 8);","\t\t\t\t\t*p_len = k_len - *p_len;"],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["todo[i]   = isix++;","todo[i+1] = buffer >> (14-i)*5;","}","for (i=0; i < 16; i+=2)"],"label":1}
{"cve":"CVE-2018-8794","code_chunks":["\t\t\t\tcollen = (code >> 4) & 0xf;","\t\t\t\trevcode = (replen << 4) | collen;","\t\t\t\tif ((revcode <= 47) && (revcode >= 16))","\t\t\t\t{","\t\t\t\t\treplen = revcode;","\t\t\t\t\tcollen = 0;","\t\t\t\t}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["GetTemporary(context, node, kProductScalingFactors);","prod_scaling_factors->type = kTfLiteFloat32;","prod_scaling_factors->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(prod_scaling_factors->dims, 1,"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["      TfLiteIntArray* accum_size = TfLiteIntArrayCreate(2);","      accum_size->data[0] = n_cell;","      accum_size->data[1] = n_batch;","      TF_LITE_ENSURE_OK(","          context, context->ResizeTensor(context, accum_scratch, accum_size));","    }","    node->temporaries->data[kInputZeroPoints] ="],"label":0}
{"cve":"PYSEC-2020-271","code_chunks":["    m.def(\"TFE_NewCancellationManager\", &TFE_NewCancellationManager,","        py::return_value_policy::reference);","  m.def(\"TFE_CancellationManagerIsCancelled\",","        &TFE_CancellationManagerIsCancelled);","  m.def(\"TFE_CancellationManagerStartCancel\",","        &TFE_CancellationManagerStartCancel);","  m.def(\"TFE_DeleteCancellationManager\", &TFE_DeleteCancellationManager,"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(context,","context->ResizeTensor(context, output, output_size));","","TfLiteTensor* output_state = GetOutput(context, node, kOutputState);","TF_LITE_ENSURE_OK(","context, context->ResizeTensor(context, output_state,","TfLiteIntArrayCopy(input_state->dims)));"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["","\t\tbn_read_str(t, str, len, radix);","","\t\tif (bn_bits(t) > RLC_FB_BITS) {","\t\t\tRLC_THROW(ERR_NO_BUFFER);","\t\t}",""],"label":0}
{"cve":"CVE-2023-23457","code_chunks":["    static const int filters[] = {","        0xd0,","    FT_END };","    return filters;","}","","int const *"],"label":0}
{"cve":"CVE-2018-21017","code_chunks":["}","if (!((GF_DataInformationBox *)s)->dref) {","GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Missing dref box in dinf\\n\"));","((GF_DataInformationBox *)s)->dref = (GF_DataReferenceBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_DREF);","}","return GF_OK;","}"],"label":1}
{"cve":"CVE-2022-0523","code_chunks":["","n = get_ut32 (buffer, &error);","if (n > ST32_MAX) {","eprintf (\"bad marshal data (list size out of range)\\n\");","return NULL;","}"],"label":1}
{"cve":"CVE-2020-5310","code_chunks":["char *mode = \"r\";","TIFF *tiff;","","\/* buffer is the encoded file, bytes is the length of the encoded file *\/","\/*     it all ends up in state->buffer, which is a uint8* from Imaging.h *\/",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["context, context->ResizeTensor(context, activation, activation_size));","","node->temporaries->data[kConcat] = (*scratch_tensor_index) + kConcat;","TfLiteTensor* concat = GetTemporary(context, node, kConcat);","concat->type = input->type;","concat->allocation_type = kTfLiteArenaRw;","TfLiteIntArray* concat_size = TfLiteIntArrayCreate(2);"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["    if (offset >= 0 && offset < bufferedLen()) {","      setReadPosition(getReadPosition() + offset);","      setPosition(getPosition() + offset);","      return true;","    }","    offset += getPosition();","    whence = SEEK_SET;"],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["void CLASS samsung_load_raw()","{","int row, col, c, i, dir, op[4], len[4];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width> 32768 || raw_height > 32768)      throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["Py_ssize_t i;","            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["{","\tFILE *file = fopen_safe(stats_file, \"w\");","\telement e;","\tvrrp_t *vrrp;","","\tif (!file) {","\t\tlog_message(LOG_INFO, \"Can't open %s (%d: %s)\","],"label":0}
{"cve":"CVE-2022-36026","code_chunks":["void Compute(OpKernelContext* ctx) override {","const Tensor& input = ctx->input(0);","OP_REQUIRES(ctx, axis_ < input.dims(),","InvalidArgument(","\"Axis requested is larger than input dimensions. Axis: \",","axis_, \" Input Dimensions: \", input.dims()));","const int depth = (axis_ == -1) ? 1 : input.dim_size(axis_);"],"label":0}
{"cve":"CVE-2023-22738","code_chunks":["","module_name = logger_name(__name__)","log = logging.getLogger(module_name)","","","def setup(api, api_base, services):","    path = \"\/\".join([api_base, module_name])"],"label":0}
{"cve":"CVE-2023-3013","code_chunks":["}","else if (ds->codec_id == GF_CODECID_AVC || ds->codec_id == GF_CODECID_SVC || ds->codec_id == GF_CODECID_MVC) {","AVCState avc;","GF_AVCConfig* avccfg = gf_odf_avc_cfg_read(dsi->value.data.ptr, dsi->value.data.size);","GF_NALUFFParam *sl = (GF_NALUFFParam *)gf_list_get(avccfg->sequenceParameterSets, 0);","if (sl) {"],"label":1}
{"cve":"CVE-2021-44109","code_chunks":["if (at && length) {","SWITCH(data->header_field)","CASE(OGS_SBI_CONTENT_TYPE)","if (data->part[data->num_of_part].content_type)"],"label":1}
{"cve":"CVE-2023-28101","code_chunks":["","if (opt_show_metadata)","{","g_print (\"%s\", xa_metadata ? xa_metadata : \"\");","if (xa_metadata == NULL || !g_str_has_suffix (xa_metadata, \"\\n\"))","g_print (\"\\n\");","}"],"label":1}
{"cve":"PYSEC-2021-868","code_chunks":["","QLIST_FOREACH(block, &uc->ram_list.blocks, next)","{","if (block->offset <= mr->addr &&","block->used_length >= (mr->end - mr->addr)) {","break;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\tRLC_FREE(win);","\t\tbn_zero(c);","\t\treturn;","\t}","","\tif (bn_is_zero(b)) {","\t\tRLC_FREE(win);"],"label":0}
{"cve":"CVE-2022-3234","code_chunks":["\t\tint old_byte_len = mb_ptr2len(ml_get_cursor());","","\t\tif (new_byte_len > 1 || old_byte_len > 1)","\t\t{","\t\t    \t\t    \t\t    if (curwin->w_cursor.lnum == oap->end.lnum)","\t\t\toap->end.col += new_byte_len - old_byte_len;","\t\t    replace_character(c);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void md_hmac(uint8_t *mac, const uint8_t *in, int in_len, const uint8_t *key,","int key_len) {","#if MD_MAP == SH224 || MD_MAP == SH256 || MD_MAP == B2S160 || MD_MAP == B2S256","#define block_size 64","#elif MD_MAP == SH384 || MD_MAP == SH512"],"label":1}
{"cve":"CVE-2022-31624","code_chunks":["  ADD_ATOMIC(internal_stop_logging, -1);","}","","","static void update_mode(MYSQL_THD thd  __attribute__((unused)),","              struct st_mysql_sys_var *var  __attribute__((unused)),","              void *var_ptr  __attribute__((unused)), const void *save)"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["return 1;","}","if (isinstance) {","int lineno;","","if (_PyObject_HasAttrId(obj, &PyId_lineno)) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void rand_bytes(uint8_t *buf, int size);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus ReverseSequenceImpl(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* seq_lengths_tensor =","GetInput(context, node, kSeqLengthsTensor);","const TS* seq_lengths = GetTensorData<TS>(seq_lengths_tensor);","","auto* params ="],"label":1}
{"cve":"PYSEC-2022-90","code_chunks":["","bool ConstantFolding::ReplaceOperationWithBroadcastTo(","    int input_to_broadcast, const GraphProperties& properties, NodeDef* node,","    GraphDef* graph) {","  const DataType dtype = GetDataTypeFromNodeOrProps(*node, properties);","  if (dtype == DT_INVALID) {","    return false;"],"label":0}
{"cve":"PYSEC-2021-550","code_chunks":["                                      compressed_data.size(), iov.data(),","                                      num_components)) {","    return errors::Internal(\"Failed to perform snappy decompression.\");","  }","","    int tensor_proto_strs_index = 0;","  for (int i = 0; i < num_components; ++i) {"],"label":0}
{"cve":"CVE-2022-4254","code_chunks":["* @param[in]  der_cert   binary blog with the DER encoded certificate"],"label":1}
{"cve":"CVE-2023-52076","code_chunks":["g_string_free(dir_create,TRUE);","}","","outfile = g_file_new_for_path(gfilepath->str);","outstream = g_file_create(outfile,G_FILE_CREATE_PRIVATE,NULL,error);","gpointer buffer = g_malloc0(512);","while ( (writesize = unzReadCurrentFile(epub_document->epubDocument,buffer,512) ) != 0 )"],"label":1}
{"cve":"CVE-2020-11735","code_chunks":["\/* make the public key *\/","if (err == MP_OKAY) {","err = wc_ecc_mulmod_ex(&key->k, base, pub, curve->Af, curve->prime,","1, key->heap);","if (err == MP_MEM) {","err = MEMORY_E;","}"],"label":1}
{"cve":"CVE-2021-29608","code_chunks":["if (index_size == 0) {","return;","}","","INDEX_TYPE current_output_column = 0;","INDEX_TYPE current_value_rowid = value_rowids(0);"],"label":0}
{"cve":"CVE-2021-41136","code_chunks":["\t}","\tif ( 0 <= (*p) && (*p) <= 31 )","\t\tgoto st0;","\tgoto tr40;","#line 60 \"ext\/puma_http11\/http11_parser.rl\"","\t{ MARK(query_start, p); }","\tgoto st26;"],"label":0}
{"cve":"CVE-2018-20182","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2019-17177","code_chunks":["","\t\/* adds the piece of rect that is on the top of src *\/","\tif (rect->top < srcExtents->top)","\t{","\t\tdstRect->top = rect->top;","\t\tdstRect->left = rect->left;","\t\tdstRect->right = rect->right;"],"label":0}
{"cve":"CVE-2018-8795","code_chunks":["\tinput += bytes_pro;","\tbytes_pro = process_plane(input, width, height, output + 2, size - total_pro);","\ttotal_pro += bytes_pro;","\tinput += bytes_pro;","\tbytes_pro = process_plane(input, width, height, output + 1, size - total_pro);","\ttotal_pro += bytes_pro;","\tinput += bytes_pro;"],"label":0}
{"cve":"CVE-2020-15945","code_chunks":["          pc++; setivalue(s2v(ra), luaV_shiftl(ic, ib));","        }","        vmbreak;","      }","      vmcase(OP_ADD) {","        op_arith(L, l_addi, luai_numadd);","        vmbreak;"],"label":0}
{"cve":"CVE-2016-9393","code_chunks":["jas_eprintf(\"all tiles are outside the image area\\n\");","return -1;","}","if (!(siz->comps = jas_alloc2(siz->numcomps, sizeof(jpc_sizcomp_t)))) {","return -1;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\tbn_free(_k);","\t\t\/* Free the precomputation table. *\/","\t\tfor (int i = 0; i < (1 << (EP_WIDTH - 2)); i++) {","\t\t\tep_free(t[i]);","\t\t}","\t}","}"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["{","PyObject *m, *d;","if (!init_types()) return NULL;","m = PyModule_Create(&_astmodule3);","if (!m) return NULL;","d = PyModule_GetDict(m);","if (PyDict_SetItemString(d, \"AST\", (PyObject*)&AST_type) < 0) return NULL;"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["\t\tdebug(\"FPGA: Using default OCRAM buffer and size.\\n\");","\t} else {","\t\tret = fit_image_get_load(buffer_p, images_noffset,","\t\t\t\t\t(ulong *)loadable);","\t\tif (ret < 0) {","\t\t\tbuffer_p = (u32 *)DEFAULT_DDR_LOAD_ADDRESS;","\t\t\tdebug(\"FPGA: No loadable was found.\\n\");"],"label":0}
{"cve":"CVE-2019-13305","code_chunks":["(void) strncpy((char *) q,buffer,extent);","q+=extent;","if ((q-pixels+extent+2) >= sizeof(pixels))","{"],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["CHECK_HANDLE(handle, f);","int64_t ret = f->write(data, length);","if (ret < 0) {","raise_notice(\"fwrite(): send of %d bytes failed with errno=%d %s\",","data.size(), errno, folly::errnoStr(errno).c_str());","ret = 0;","}"],"label":1}
{"cve":"CVE-2016-6871","code_chunks":["static String HHVM_FUNCTION(bcmul, const String& left, const String& right,","int64_t scale \/* = -1 *\/) {","if (scale < 0) scale = BCG(bc_precision);","bc_num first, second, result;","bc_init_num(&first);","bc_init_num(&second);"],"label":1}
{"cve":"CVE-2020-35538","code_chunks":["JDIMENSION in_row_group_ctr,","JSAMPARRAY output_buf)","{","my_upsample_ptr upsample = (my_upsample_ptr)cinfo->upsample;","register int y, cred, cgreen, cblue;","int cb, cr;","register JSAMPROW outptr0, outptr1;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","  if (!IsFloatType(input->type)) {","    return false;","  }","  if (!IsFloatType(weights->type) || !IsConstantTensor(weights)) {","    return false;","  }"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2016-5350","code_chunks":["end_offset = tvb_reported_length_remaining(tvb, offset) + 1;","}","","while (offset < end_offset)","offset = dissect_spoolss_uint16uni(","tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer);",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2023-0818","code_chunks":["}","","const GF_FilterRegister *rfsrt_register(GF_FilterSession *session)","{","\treturn NULL;","}",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output_index_tensor =","GetOutput(context, node, kOutputIndexTensor);","","TF_LITE_ENSURE_EQ(context, NumDimensions(input), 1);","TfLiteIntArray* output_index_shape = TfLiteIntArrayCopy(input->dims);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tif (bn_is_zero(b)) {","\t\tfb_set_dig(c, 1);","\t\treturn;","\t}","","","\t\/* Initialize table. *\/"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params = reinterpret_cast<TfLiteMfccParams*>(node->user_data);","","const TfLiteTensor* input_wav;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorWav, &input_wav));","const TfLiteTensor* input_rate;"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_cert.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_key.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/ca_cert.pem\"","exact: localhost","san_type: URI","exact: 127.0.0.1","san_type: IP_ADDRESS"],"label":0}
{"cve":"CVE-2017-6887","code_chunks":["maximum = 0xffff;","break;","case 50454: \/* Sinar tag *\/","if (len > 2560000 || !(cbuf = (char *)malloc(len)))","break;","#ifndef LIBRAW_LIBRARY_BUILD","fread(cbuf, 1, len, ifp);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["GetTemporary(context, node, \/*index=*\/kFwRowSums);","fw_row_sums->type = kTfLiteInt32;","fw_row_sums->allocation_type = kTfLiteArenaRwPersistent;","int fw_row_sums_dims[2] = {num_row_sums, fw_num_units};"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["\t\t\t\tconst char **arg,","\t\t\t\tchar **invalid_arg)","{","\tfor (;;) {","\t\tconst char *argval;","\t\tsize_t arglen;",""],"label":0}
{"cve":"CVE-2023-24824","code_chunks":["  cmark_node_type *ref = !is_inline ? &CMARK_NODE_LAST_BLOCK : &CMARK_NODE_LAST_INLINE;","","  if ((*ref & CMARK_NODE_VALUE_MASK) >= CMARK_NODE_TYPE_BLOCK_LIMIT) {","                assert(false);","    return (cmark_node_type) 0;","  }",""],"label":0}
{"cve":"CVE-2019-20393","code_chunks":["","{ (yyval.token) = actual_type;","if (is_ext_instance) {","if (yang_read_extcomplex_str(trg, ext_instance, \"belongs-to\", ext_name, s,","0, LY_STMT_BELONGSTO)) {","YYABORT;","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2016-8649","code_chunks":["ret = lxc_read_nointr_expect(ipc_sockets[0], &status, sizeof(status), &expected);","if (ret <= 0) {","if (ret != 0)","ERROR(\"error using IPC to receive notification from attached process (1)\");","goto cleanup_error;","}",""],"label":1}
{"cve":"CVE-2020-11096","code_chunks":["","if (brush->bpp == 0)","brush->bpp = 1;","}","","if (fieldFlags & ORDER_FIELD_04)"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2019-11413","code_chunks":["\t\t\tbreak;","\t\t\tsp += chartorune(&c, sp);","\t\t\tif (c == 0)","\t\t\t\treturn 1;","\t\t\tif (flags & REG_ICASE) {","\t\t\t\tif (!incclasscanon(pc->cc, canon(c)))","\t\t\t\t\treturn 1;"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["\t\t\t\tstrbuf_addch(sb, ' ');","\t\t\tstrbuf_add_unique_abbrev(sb, &p->item->object.oid,","\t\t\t\t\t\t c->pretty_ctx->abbrev);","\t\t}","\t\treturn 1;","\tcase 'm':\t\t\/* left\/right\/bottom *\/","\t\tstrbuf_addstr(sb, get_revision_mark(NULL, commit));"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  } else if (output->type == kTfLiteInt16) {","    reference_ops::ResizeNearestNeighbor(","        op_params, GetTensorShape(input), GetTensorData<int16_t>(input),","        GetTensorShape(size), GetTensorData<int32>(size),","        GetTensorShape(output), GetTensorData<int16_t>(output));","  } else {","    TF_LITE_KERNEL_LOG("],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["{","struct strbuf buf = STRBUF_INIT;","int fd;","FILE *fp;","struct attr_stack *res;","int lineno = 0;"],"label":0}
{"cve":"CVE-2023-27114","code_chunks":["\t\t\tif (txt && opdef->txt) {","\t\t\t\top->txt = strdup (opdef->txt);","\t\t\t}","\t\t\tbreak;","\t\t\t{","\t\t\t\tst32 val = 0;","\t\t\t\tsize_t n = read_i32_leb128 (buf + 1, buf + buf_len, &val);"],"label":0}
{"cve":"CVE-2019-20393","code_chunks":["","int","yang_extcomplex_node(struct lys_ext_instance_complex *ext, char *parent_name, char *node_name,","                     struct lys_node *node, LY_STMT stmt)","{","    struct lyext_substmt *info;","    struct lys_node **snode, *siter;"],"label":0}
{"cve":"CVE-2019-19324","code_chunks":["*        must be freed.  cjwt_destroy() must be called to destry the object"],"label":1}
{"cve":"CVE-2018-8797","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"PYSEC-2020-254","code_chunks":["QUInt16() {}"],"label":1}
{"cve":"PYSEC-2020-338","code_chunks":["  }","  if (PyIsInstance(v, &PyIntegerArrType_Type)) {  #if PY_MAJOR_VERSION < 3","    Safe_PyObjectPtr as_int = make_safe(PyNumber_Int(v));","#else","    Safe_PyObjectPtr as_int = make_safe(PyNumber_Long(v));","#endif","    if (PyErr_Occurred()) {"],"label":0}
{"cve":"CVE-2020-28196","code_chunks":["const uint8_t *contents, *remainder;","size_t clen, rlen;","","ret = get_tag(*der, len, tag_out, &contents, &clen, &remainder, &rlen);","if (ret)","return ret;","if (rlen != 0)"],"label":1}
{"cve":"CVE-2022-41859","code_chunks":["if (xbuf) talloc_free(xbuf);","if (pm1buf) talloc_free(pm1buf);","","HMAC_CTX_free(ctx);","","return ret;","}"],"label":1}
{"cve":"PYSEC-2021-408","code_chunks":["","for (int32_t i = 0; i < rank; ++i) {","int64_t in_idx = data[i];","if (in_idx >= rank) {","return errors::InvalidArgument(\"perm dim \", in_idx,","\" is out of range of input rank \", rank);","}"],"label":1}
{"cve":"CVE-2019-17542","code_chunks":["}","s->width = AV_RL16(&s->avctx->extradata[6]);","s->height = AV_RL16(&s->avctx->extradata[8]);","if ((ret = av_image_check_size(s->width, s->height, 0, avctx)) < 0) {","s->width= s->height= 0;","return ret;","}"],"label":1}
{"cve":"CVE-2021-3753","code_chunks":["if (!perm)","return -EPERM;","","return vt_kdsetmode(vc, arg);","","return put_user(vc->vc_mode, (int __user *)arg);",""],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["","if (!dont_inherit) {","PyEval_MergeCompilerFlags(&cf);","}","","if (strcmp(mode, \"exec\") == 0)"],"label":1}
{"cve":"CVE-2021-30014","code_chunks":["GF_EXPORT","GF_Err gf_hevc_change_color(GF_HEVCConfig *hvcc, s32 fullrange, s32 vidformat, s32 colorprim, s32 transfer, s32 colmatrix)","{","\tGF_VUIInfo vuii;","\tmemset(&vuii, 0, sizeof(GF_VUIInfo));","\tvuii.ar_num = -1;","\tvuii.ar_den = -1;"],"label":0}
{"cve":"CVE-2023-28366","code_chunks":["if(!context) return MOSQ_ERR_INVAL;","","*stored = NULL;","DL_FOREACH(context->msgs_in.inflight, tail){","if(tail->store->source_mid == mid){","*stored = tail->store;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE(context, forget_layer_norm_coefficients != nullptr);","TF_LITE_ENSURE_EQ(context, forget_layer_norm_coefficients->dims->size, 1);","TF_LITE_ENSURE_EQ(context, forget_layer_norm_coefficients->dims->data[0],","n_cell);","TF_LITE_ENSURE_TYPES_EQ(context, forget_layer_norm_coefficients->type,","kTfLiteFloat32);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2020-13904","code_chunks":["             * there's still no more segments), switch to a reload","             * interval of half the target duration. *\/","            reload_interval = v->target_duration \/ 2;","        }","        if (v->cur_seq_no < v->start_seq_no) {","            av_log(NULL, AV_LOG_WARNING,","                   \"skipping %d segments ahead, expired from playlists\\n\","],"label":0}
{"cve":"CVE-2022-39347","code_chunks":["\t\t\tif (file->CreateDisposition == FILE_CREATE)","\t\t\t{","\t\t\t\tSetLastError(ERROR_ALREADY_EXISTS);","\t\t\t\treturn FALSE;","\t\t\t}","","\t\t\tif (file->CreateOptions & FILE_NON_DIRECTORY_FILE)"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["","\/*"," * Add string \"p\" to \"gap\"."," * When out of memory \"p\" is freed and FAIL is returned."," *\/","    int","ga_add_string(garray_T *gap, char_u *p)"],"label":0}
{"cve":"CVE-2018-20786","code_chunks":["}","","if(buffer)","vterm_allocator_free(screen->vt, buffer);","","return new_buffer;"],"label":1}
{"cve":"CVE-2019-19221","code_chunks":["\t\t\tucptr = s;","\t\ts += n;","\t\tlen -= n;","","\t\t\/* Read second code point. *\/","\t\twhile ((n2 = parse(&uc2, s, len)) > 0) {","\t\t\tuint32_t ucx[FDC_MAX];"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["return NULL;","if (forbidden_name(c, classname, CHILD(n, 3), 0))","return NULL;","return ClassDef(classname, NULL, NULL, s, decorator_seq, LINENO(n),","n->n_col_offset, c->c_arena);","}"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT16 colorPointerFlag;","UINT16 colorPointerCacheSize;","UINT16 pointerCacheSize;","","if (Stream_GetRemainingLength(s) < 4)"],"label":0}
{"cve":"CVE-2020-36315","code_chunks":["uint8_t pad, h1[RLC_MD_LEN], h2[RLC_MD_LEN];","\/* MSVC does not allow dynamic stack arrays *\/","uint8_t *mask = RLC_ALLOCA(uint8_t, k_len);","int result = RLC_ERR;","bn_t t;","","bn_null(t);"],"label":0}
{"cve":"CVE-2020-1898","code_chunks":["inline typename V::SetType FBUnserializer<V>::unserializeSet() {"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["new TMethodEventJob<ClientListener>(this,","&ClientListener::handleClientAccepted, socket));","","if (!m_useSecureNetwork) {","m_events->addEvent(Event(m_events->forClientListener().accepted(),","socket->getEventTarget()));","}"],"label":1}
{"cve":"CVE-2022-43286","code_chunks":["","reviver = njs_arg(args, nargs, 2);","","if (njs_slow_path(njs_is_function(reviver) && njs_is_object(&value))) {"],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["SET(auth->flags, FLAG_DISABLED);","else if (status == AUTH_NONINTERACTIVE)","goto done;","else if (status == AUTH_ERROR || user_interrupted())","goto done;\t\t\/* assume error msg already printed *\/","}","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2019-19922","code_chunks":["remaining -= runtime;","","cfs_rq->runtime_remaining += runtime;","cfs_rq->runtime_expires = expires;","","\/* we check whether we're throttled above *\/","if (cfs_rq->runtime_remaining > 0)"],"label":1}
{"cve":"CVE-2018-8796","code_chunks":["in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)],","width * Bpp);","}","ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);","xfree(bmpdata);","continue;"],"label":1}
{"cve":"CVE-2022-45474","code_chunks":["                                       boost::bind(&event_cb, g, s,","                                                   action, boost::placeholders::_1, fdp));","        } ","      }","    }","  }",""],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["            if (res != 0) goto failed;","            if (len != PyList_GET_SIZE(tmp)) {","                PyErr_SetString(PyExc_RuntimeError, \"comprehension field \\\"ifs\\\" changed size during iteration\");","                goto failed;","            }","            asdl_seq_SET(ifs, i, val);","        }"],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["\/* Indent string is defined in header image.h *\/","p = IMAGE_INDENT_STRING;","","if (!fit_check_format(fit)) {","printf(\"Bad FIT image format\\n\");","return -1;","}"],"label":1}
{"cve":"CVE-2022-4843","code_chunks":["const ut64 buf_off = R_MAX (addr, r_io_submap_from (sm)) - addr;","const int read_len = R_MIN (r_io_submap_to ((&fake_sm)),","r_io_submap_to (sm)) - (addr + buf_off) + 1;","if (map->perm & R_PERM_RELOC) {","ret &= map->reloc_map->read (io, map, addr + buf_off, &buf[buf_off], read_len);","} else {","const ut64 paddr = addr + buf_off - r_io_map_from (map) + map->delta;"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["if (length > 0) {","memcpy(buffer, (const void *)(m_data + m_cursor), length);","}","m_cursor += length;","return length;","}"],"label":1}
{"cve":"CVE-2022-33099","code_chunks":["setsvalue2s(L, top - n, ts);  \/* create result *\/","}","total -= n-1;  \/* got 'n' strings to create 1 new *\/","L->top -= n-1;  \/* popped 'n' strings and pushed one *\/","} while (total > 1);  \/* repeat until only 1 result left *\/","}"],"label":1}
{"cve":"CVE-2022-28068","code_chunks":["ut64 result;","switch (size) {","case 2: result = READ16 (*buf); break;","case 4: result = READ32 (*buf); break;","case 8: result = READ64 (*buf); break;","result = 0;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* cond = GetInput(context, node, 0);","bool cond_value = cond->data.b[0];","","Subgraph* this_subgraph = reinterpret_cast<Subgraph*>(context->impl_);"],"label":1}
{"cve":"CVE-2016-3134","code_chunks":["const struct xt_entry_target *t;","unsigned int verdict;","","if (!unconditional(&e->ipv6))","return false;","t = ip6t_get_target_c(e);","if (strcmp(t->u.user.name, XT_STANDARD_TARGET) != 0)"],"label":1}
{"cve":"CVE-2022-23559","code_chunks":["&context_,","MultiplyAndCheckOverflow(old_count, dims[k], &count) == kTfLiteOk,","\"BytesRequired number of elements overflowed.\\n\");","}","size_t type_size = 0;","TF_LITE_ENSURE_OK(&context_, GetSizeOfType(&context_, type, &type_size));","TF_LITE_ENSURE_MSG("],"label":1}
{"cve":"CVE-2022-1286","code_chunks":["MRB_CLASS_ORIGIN(c);","h = c->mt;","","if (h && mt_del(mrb, h, mid)) {","mrb_mc_clear_by_class(mrb, c);","return;","}"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["}","","#ifndef Q_OS_LINUX","","    if (m_ServerConfig.enableDragAndDrop()) {","        args << \"--enable-drag-drop\";","    }"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["            op_data->ledger_index + kRecurrentToCellWeightsLedgerOffset;","        const TfLiteTensor* recurrent_to_cell_weights =","            GetInput(context, node, kRecurrentToCellWeightsTensor);","        TfLiteTensor* recurrent_to_cell_weights_ledger =","            &context->tensors[op_data->ledger_index +","                              kRecurrentToCellWeightsLedgerOffset];","        auto status = make_ledger(recurrent_to_cell_weights->sparsity, context,"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* indices;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kIndices, &indices));","const TfLiteTensor* updates;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kUpdates, &updates));"],"label":0}
{"cve":"CVE-2018-12561","code_chunks":["return;","}","if (constPromptPassword==det.url.password()) {","bool ok=false;","QString passwd=InputDialog::getPassword(QString(), &ok, QApplication::activeWindow());","if (!ok) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["                     \"TopK k is higher than the internal dimension.\");","","  TfLiteIntArray* output_indexes_shape = TfLiteIntArrayCreate(num_dimensions);","  TfLiteIntArray* output_values_shape = TfLiteIntArrayCreate(num_dimensions);","  for (int i = 0; i < num_dimensions - 1; ++i) {","    output_indexes_shape->data[i] = input->dims->data[i];","    output_values_shape->data[i] = input->dims->data[i];"],"label":0}
{"cve":"CVE-2019-19905","code_chunks":["    }","#endif \/* __APPLE__ *\/","    raw_printf(\"    \\\"%s\\\"\", buf);","#else \/* !UNIX *\/","    fqn = (const char *) 0;","#ifdef PREFIXES_IN_USE","    fqn = fqname(default_configfile, CONFIGPREFIX, 2);"],"label":0}
{"cve":"CVE-2019-15139","code_chunks":["colors=(XColor *) AcquireQuantumMemory((size_t) header.ncolors,","sizeof(*colors));","if (colors == (XColor *) NULL)","{","ximage=(XImage *) RelinquishMagickMemory(ximage);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["PyErr_Format(PyExc_TypeError, \"FunctionDef field \\\"body\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","goto failed;","}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;"],"label":1}
{"cve":"CVE-2016-3137","code_chunks":["struct cypress_private *priv = usb_get_serial_port_data(port);","\/* drop dtr and rts *\/","spin_lock_irq(&priv->lock);","if (on == 0)","priv->line_control = 0;","else"],"label":1}
{"cve":"CVE-2016-10251","code_chunks":["\t\t\t\t}","\t\t\t}","\t\t}","\t}","\treturn 1;","}",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["},",".invoke =","[](TfLiteContext* context, TfLiteNode* node) {","TfLiteTensor* output = tflite::GetOutput(context, node, 0);","std::fill(output->data.f,","output->data.f + tflite::NumElements(output), 7.0f);"],"label":1}
{"cve":"CVE-2022-32545","code_chunks":["}","ReadFile(hFile,pBits,dwSize,&dwSize,NULL);","CloseHandle(hFile);","if (((PAPMHEADER) pBits)->dwKey != 0x9ac6cdd7l)","{","pBits=(BYTE *) DestroyString((char *) pBits);","return((HENHMETAFILE) NULL);"],"label":1}
{"cve":"CVE-2016-4563","code_chunks":["","  MagickBooleanType","    closed_path;","","  double","    delta_theta,","    dot_product,"],"label":0}
{"cve":"CVE-2018-20182","code_chunks":["in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)],","width * Bpp);","}","ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);","xfree(bmpdata);","continue;"],"label":1}
{"cve":"CVE-2022-1587","code_chunks":["if (has_quit && !setsom_found)","{","kept_shared_srcw[0] = OVECTOR(0);","kept_shared_count = 1;","setsom_found = TRUE;","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* cond_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputConditionTensor,","&cond_tensor));","TfLiteTensor* output;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["                                     input_offset_dims)) {","        TfLiteIntArray* input_offsets_size = TfLiteIntArrayCreate(1);","        input_offsets_size->data[0] = input_offset_dims[0];","        TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_offsets,","                                                         input_offsets_size));","      }","      node->temporaries->data[data->row_sums_index] = data->row_sums_id;"],"label":0}
{"cve":"CVE-2019-9162","code_chunks":["const void *data, size_t datalen)","{","struct snmp_ctx *ctx = (struct snmp_ctx *)context;","__be32 *pdata = (__be32 *)data;","","if (*pdata == ctx->from) {","pr_debug(\"%s: %pI4 to %pI4\\n\", __func__,"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["- san_type: DNS","exact: \"lyft.com\"","- san_type: DNS","exact: \"www.lyft.com\"",")EOF\";",""],"label":0}
{"cve":"CVE-2017-9144","code_chunks":["{","operand=ReadBlobByte(image);","if (opcode & 0x40)","operand=ReadBlobLSBSignedShort(image);","x+=operand;","break;"],"label":1}
{"cve":"CVE-2019-19333","code_chunks":["break;","","exp = lyxp_parse_expr(ctx, *value);","LY_CHECK_ERR_RETURN(!exp, LOGINT(ctx), 0);","","module_name = NULL;","count = 0;"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["double p,cx,cy,cz,cr,cg,cb;","while (ii<\/*line*\/width){\t\t\t\t\t\t\t\tbitsoffset = ii*samplesperpixel+offset;","l=bits[bitsoffset];","a=bits[bitsoffset+1];","b=bits[bitsoffset+2];","if (a>127) a-=256;"],"label":1}
{"cve":"CVE-2022-4254","code_chunks":["}","","memmove(ipv6addr, &ipv6addr[1], len - 2);","ipv6addr[len -2] = '\\0';","}",""],"label":1}
{"cve":"CVE-2022-37032","code_chunks":["#include \"bgp_clist.h\"","#include \"bgp_ecommunity.h\"","","\/* VTY functions.  *\/","","\/* Direction value to string conversion.  *\/","static const char *"],"label":0}
{"cve":"CVE-2017-7524","code_chunks":["TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2;","UINT8 *tpm2bBitsPtr = &tpm2bBits.t.buffer[0];","UINT8 *tpm2b_i_2Ptr = &tpm2b_i_2.t.buffer[0];","TPM2B_DIGEST *bufferList[8];","UINT32 bitsSwizzled, i_Swizzled;"],"label":1}
{"cve":"CVE-2018-12562","code_chunks":["        det.url.setPort(sshPort->value());","        det.url.setScheme(RemoteFsDevice::constSshfsProtocol);","        det.extraOptions=sshExtra->text().trimmed();","        break;","    }","    case Type_File: {","        QString path=fileFolder->text().trimmed();"],"label":0}
{"cve":"CVE-2017-11142","code_chunks":["return 0;","}","","vsep = memchr(var->ptr, '&', var->end - var->ptr);","if (!vsep) {","if (!eof) {","return 0;"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["  tsl::StatusOr<dnn::AlgorithmDesc> ToAlgorithmDesc() const override {","    return MakeAlgorithmDesc();","  }","","  tsl::Status operator()(Stream* stream, dnn::ProfileResult* profile_result,","                         DeviceMemoryBase scratch_memory,","                         DeviceMemoryBase input_data,"],"label":0}
{"cve":"CVE-2016-8339","code_chunks":["long val;","","if ((j % 4) == 0) {","if (getClientTypeByName(v[j]) == -1) {","sdsfreesplitres(v,vlen);","goto badfmt;","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp48_write_bin(uint8_t *bin, int len, const fp48_t a, int pack);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\t}","\t\t\t\tif (naf[j*l + i] < 0) {","\t\t\t\t\ted_sub(r, r, _p[j]);","\t\t\t\t}","\t\t\t}","\t\t}",""],"label":0}
{"cve":"CVE-2019-16778","code_chunks":["explicit UnsortedSegmentReductionOp(OpKernelConstruction* context)","      : OpKernel(context), reduction_functor_(DeviceReductionFunctor()) {}","","  void Compute(OpKernelContext* context) override {","    const Tensor& data = context->input(0);","    const Tensor& segment_ids = context->input(1);","    const Tensor& num_segments = context->input(2);"],"label":0}
{"cve":"CVE-2017-9949","code_chunks":["type = GRUB_FSHELP_REG;","}","","if (hook (filename, type, fdiro, closure))","return 1;","}",""],"label":1}
{"cve":"CVE-2021-32687","code_chunks":["static intset *intsetResize(intset *is, uint32_t len) {","uint32_t size = len*intrev32ifbe(is->encoding);","is = zrealloc(is,sizeof(intset)+size);","return is;","}"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["std::vector<int64_t> input_dims = input_descriptor.vectorized_dims(","dnn::DataLayout::kBatchDepthYX, vector_size, vector_dim);","std::vector<int64_t> input_strides = input_descriptor.vectorized_strides(","dnn::DataLayout::kBatchDepthYX, vector_size, vector_dim);","","if (vector_size == 32) {"],"label":1}
{"cve":"CVE-2020-5238","code_chunks":["if (yych <= ' ') {","if (yych <= '\\n') {","if (yych == '\\t')","goto yy4;","} else {","if (yych <= '\\f')"],"label":0}
{"cve":"CVE-2015-8631","code_chunks":["    if (setup_gss_names(rqstp, &client_name, &service_name) < 0) {","        ret.code = KADM5_FAILURE;","        goto exit_func;","    }","    prime_arg = arg->name;","","    if (CHANGEPW_SERVICE(rqstp) || !kadm5int_acl_check(handle->context,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["    }","    node->temporaries->data[kZeroPoints] =","        op_data->scratch_tensor_index + kZeroPoints;","    TfLiteTensor* zero_points;","    TF_LITE_ENSURE_OK(","        context,","        GetTemporarySafe(context, node, \/*index=*\/kZeroPoints, &zero_points));"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["struct strbuf dst;","int w = 0;","","strbuf_init(&dst, sb_src->len);","","while (src < end) {"],"label":0}
{"cve":"CVE-2023-50247","code_chunks":["\/* bail out unless this is a server-side connection waiting for ClientFinished *\/","if (!(conn->handshake != NULL && conn->application != NULL && !quicly_is_client(conn)))","return 0;","quicly_stream_t *stream = quicly_get_stream(conn, (quicly_stream_id_t)-1 - QUICLY_EPOCH_HANDSHAKE);","assert(stream != NULL);","return stream->sendstate.pending.num_ranges == 0 && stream->sendstate.acked.ranges[0].end == stream->sendstate.size_inflight;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (tmp == NULL) goto failed;","if (!PyList_Check(tmp)) {","PyErr_Format(PyExc_TypeError, \"FunctionDef field \\\"body\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","goto failed;","}","len = PyList_GET_SIZE(tmp);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* hash = GetInput(context, node, 0);","TF_LITE_ENSURE_EQ(context, NumDimensions(hash), 2);","TF_LITE_ENSURE(context, SizeOfDimension(hash, 1) <= 32);","","const TfLiteTensor* input = GetInput(context, node, 1);","TF_LITE_ENSURE(context, NumDimensions(input) >= 1);"],"label":1}
{"cve":"CVE-2017-11368","code_chunks":["did_log = 1;","","if (errcode != 0)","assert (state->status != 0);","","au_state->status = state->status;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["return 1;","}"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["g1_t t;","uint8_t mac[RLC_MD_LEN];","int len, dlen = strlen(data), result = RLC_OK;","uint8_t *buf = RLC_ALLOCA(uint8_t, 1 + 8 * RLC_PC_BYTES + dlen);","","bn_null(k);"],"label":1}
{"cve":"CVE-2018-25032","code_chunks":["","if (deflateStateCheck(strm)) return Z_STREAM_ERROR;","s = strm->state;","if ((Bytef *)(s->d_buf) < s->pending_out + ((Buf_size + 7) >> 3))","return Z_BUF_ERROR;","do {","put = Buf_size - s->bi_valid;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  std::vector<T> output_values;","  I* indexes = GetTensorData<I>(output_indexes);","  const T* data = GetTensorData<T>(input);","  const int num_elements = NumElements(input);","","  for (int i = 0; i < num_elements; ++i) {","    const auto element_it = unique_values.find(data[i]);"],"label":0}
{"cve":"CVE-2017-3733","code_chunks":["        if (s->enc_write_ctx == NULL)","            enc = NULL;","        else {","            int ivlen;","            enc = EVP_CIPHER_CTX_cipher(s->enc_write_ctx);","            \/* For TLSv1.1 and later explicit IV *\/","            if (SSL_USE_EXPLICIT_IV(s)"],"label":0}
{"cve":"CVE-2018-14882","code_chunks":["cp += op->nd_opt_len << 3;","resid -= op->nd_opt_len << 3;","}","return;","","ND_PRINT((ndo, \"[ndp opt]\"));"],"label":1}
{"cve":"CVE-2018-20177","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  } else {","        fw_scratch_buffer_size->data[1] = n_fw_cell * 4;","  }","  TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, fw_scratch_buffer,","                                                   fw_scratch_buffer_size));","  ","    TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2020-36254","code_chunks":["\t\t}","\t}","\trun_err(\"protocol error: %s\", why);","\texit(1);","}","","int"],"label":0}
{"cve":"CVE-2021-38114","code_chunks":["    DNXHDContext *ctx = avctx->priv_data;","","    ff_free_vlc(&ctx->ac_vlc);","    ff_free_vlc(&ctx->dc_vlc);","    ff_free_vlc(&ctx->run_vlc);","","    av_freep(&ctx->rows);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (isdigit(c)) {","return syntaxerror(tok,","\"invalid digit '%c' in octal literal\", c);","}","}"],"label":1}
{"cve":"CVE-2019-19924","code_chunks":["static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){","assert( p->nOp>0 || p->aOp==0 );","assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed","|| p->pParse->nErr>0 );","if( p->nOp ){","assert( p->aOp );","sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);"],"label":0}
{"cve":"CVE-2022-1383","code_chunks":["RCoreSymCacheElementHdr *hdr = r_coresym_cache_element_header_new (buf, off, bits);","if (!hdr) {","return NULL;","}","if (hdr->version != 1) {","eprintf (\"Unsupported CoreSymbolication cache version (%d)\\n\", hdr->version);","goto beach;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["}","output_indexes_shape->data[num_dimensions - 1] = k;","output_values_shape->data[num_dimensions - 1] = k;","TfLiteTensor* output_indexes = GetOutput(context, node, kOutputIndexes);","TfLiteTensor* output_values = GetOutput(context, node, kOutputValues);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["        break;","      }","    }","  }","","  for (int i = 0; i < num_outputs; ++i) {","    TfLiteTensor* output;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["                                \"keyword argument\");","                    }","                    return NULL;","                }","                e = ast_for_expr(c, chch);","                if (!e)","                    return NULL;"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["result = implementation_->SynchronousMemcpy(device_dst, host_src, size);","if (!result.ok()) {","result = tsl::Status(","port::error::INTERNAL,","absl::StrFormat(\"failed to synchronously memcpy host-to-device: host \"","\"%p to device %p size %d: %s\",","host_src, device_dst->opaque(), size,"],"label":1}
{"cve":"CVE-2019-19324","code_chunks":["static int cjwt_update_header( cjwt_t *p_cjwt, char *p_dechead )","{","if( !p_cjwt || !p_dechead ) {","return EINVAL;","}","","cJSON *j_header = cJSON_Parse( ( char* )p_dechead );"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["      }","      case dnn::ConvolutionKind::BACKWARD_FILTER: {","        TF_RETURN_IF_ERROR(get_bwd_filter_bugs());","        RETURN_IF_CUDNN_ERROR(cudnnConvolutionBackwardFilter(","            cudnn.handle(),","            \/*alpha=*\/alpha,","            \/*srcDesc=*\/input_nd_.handle(),"],"label":0}
{"cve":"CVE-2019-19221","code_chunks":["* No single byte will be more than one wide character,","* so this length estimate will always be big enough.","*\/","size_t wcs_length = len;","size_t mbs_length = len;","const char *mbs = p;","wchar_t *wcs;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2016-10129","code_chunks":["","\/* Prefer side-band-64k if the server supports both *\/","if (caps->side_band_64k)","git_buf_printf(&str, \"%s \", GIT_CAP_SIDE_BAND_64K);","else if (caps->side_band)","git_buf_printf(&str, \"%s \", GIT_CAP_SIDE_BAND);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT32 offscreenSupportLevel;","","if (length < 12)","return FALSE;","","Stream_Read_UINT32(s, offscreenSupportLevel);           \/* offscreenSupportLevel (4 bytes) *\/"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":[],"label":1}
{"cve":"CVE-2018-21010","code_chunks":["            if (inbuf == NULL || outbuf == NULL || g == NULL || b == NULL) {","                goto fails3;","            }","","            new_comps = (opj_image_comp_t*)realloc(image->comps,","                                                   (image->numcomps + 2) * sizeof(opj_image_comp_t));",""],"label":0}
{"cve":"CVE-2020-21674","code_chunks":["\t\t}","\t\tgoto invalid_sequence;","\t}","","\t\/* Make a Unicode code point from a single UTF-8 sequence. *\/","\tswitch (cnt) {","\tcase 1:\t\/* 1 byte sequence. *\/"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","const TfLiteTensor* fw_input_gate_bias =","GetOptionalInputTensor(context, node, kFwInputGateBiasTensor);","const TfLiteTensor* fw_forget_gate_bias =","GetInput(context, node, kFwForgetGateBiasTensor);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* inputs = GetInput(context, node, kInputsTensor);","const TfLiteTensor* sequence_length =","GetInput(context, node, kSequenceLengthTensor);","const CTCBeamSearchDecoderParams* option =","reinterpret_cast<CTCBeamSearchDecoderParams*>(node->user_data);",""],"label":1}
{"cve":"CVE-2021-40812","code_chunks":["\t\t\t}","","\t\t\tif (!compression) {","\t\t\t\t\/* Add padding to make sure we have n mod 4 == 0 bytes per row *\/","\t\t\t\tfor (xpos = padding; xpos > 0; --xpos) {","\t\t\t\t\tgdPutC('\\0', out);","\t\t\t\t}"],"label":0}
{"cve":"CVE-2019-20393","code_chunks":["const char *parent_name, char *value, int parent_stmt, LY_STMT stmt);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* inputs = GetInput(context, node, kInputsTensor);","const TfLiteTensor* sequence_length =","GetInput(context, node, kSequenceLengthTensor);","const CTCBeamSearchDecoderParams* option =","reinterpret_cast<CTCBeamSearchDecoderParams*>(node->user_data);",""],"label":1}
{"cve":"PYSEC-2021-537","code_chunks":["a_shape->SummarizeValue(10), \" and \", b_shape->SummarizeValue(10)));","const auto a_shape_flat = a_shape->flat<int64>();","const auto b_shape_flat = b_shape->flat<int64>();","for (int i = 0; i < a_shape->NumElements(); ++i) {","OP_REQUIRES(ctx, a_shape_flat(i) == b_shape_flat(i),","errors::InvalidArgument("],"label":1}
{"cve":"CVE-2023-5686","code_chunks":["if (len > 1) {","snprintf (output, outlen, \"%s %d\", JAVA_OPS[idx].name, (char) bytes[1]);","output[outlen - 1] = 0;","return update_bytes_consumed (JAVA_OPS[idx].size);","}"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (_PyObject_HasAttrId(obj, &PyId_values)) {","int res;","Py_ssize_t len;","Py_ssize_t i;","tmp = _PyObject_GetAttrId(obj, &PyId_values);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["        return NULL;","    }","    p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));","    if (!p)","        return NULL;","    p->kind = If_kind;","    p->v.If.test = test;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp8_read_bin(fp8_t a, const uint8_t *bin, int len) {","if (len != 8 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["{","if(!image)","throw LIBRAW_EXCEPTION_IO_CORRUPT;","","int bypp = tiff_bps <= 8 ? 1 : 2;","int bufsize = width * 3 * bypp;"],"label":0}
{"cve":"CVE-2022-24754","code_chunks":["","} else if ((cred_info->data_type & PASSWD_MASK) == PJSIP_CRED_DATA_DIGEST)","{","pj_assert(cred_info->data.slen == 32);","pj_memcpy( ha1, cred_info->data.ptr, cred_info->data.slen );","} else {","pj_assert(!\"Invalid data_type\");"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void ep_mul_sim_lot_endom(ep_t r, const ep_t p[], const bn_t k[], int n) {","const int len = RLC_FP_BITS + 1;","int i, j, m, l, _l[2], sk;","bn_t _k[2], q, v1[3], v2[3];","int8_t ptr, *naf = RLC_ALLOCA(int8_t, 2 * n * len);",""],"label":1}
{"cve":"CVE-2017-11522","code_chunks":["  if (logging != MagickFalse)","    {","     (void) LogMagickEvent(CoderEvent,GetMagickModule(),","        \"    width=%.20g\",(double) ping_width);","     (void) LogMagickEvent(CoderEvent,GetMagickModule(),","        \"    height=%.20g\",(double) ping_height);","     (void) LogMagickEvent(CoderEvent,GetMagickModule(),"],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["  } else if (!strncmp(make,\"Sony\",4) && raw_width == 6048) {","    width -= 24;","    if (strstr(model,\"RX1\") || strstr(model,\"A99\"))","      width -= 6;","  } else if (!strncmp(make,\"Sony\",4) && raw_width == 7392) {","    width -= 30;","  } else if (!strncmp(make,\"Sony\",4) && raw_width == 8000) {"],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["case 37385:  flash_used = getreal(type);          break;","case 37386:  focal_len = getreal(type);\t\tbreak;","#ifdef LIBRAW_LIBRARY_BUILD","if (((make[0] == '\\0') && (!strncmp(model, \"ov5647\",6))) ||","((!strncmp(make, \"RaspberryPi\",11)) && (!strncmp(model, \"RP_OV5647\",9))) ||","((!strncmp(make, \"RaspberryPi\",11)) && (!strncmp(model, \"RP_imx219\",9)))) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["                    GetOutputSafe(context, node, kOutputTensor, &output));","","    TF_LITE_ENSURE_EQ(context, NumDimensions(output_shape), 1);","  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);","  TF_LITE_ENSURE_EQ(context, NumDimensions(weights), 4);","  TF_LITE_ENSURE(context,","                 input->type == kTfLiteFloat32 || input->type == kTfLiteUInt8 ||"],"label":0}
{"cve":"CVE-2022-24786","code_chunks":["    \/* RPSI uses pt==RTCP_PSFB and FMT==3 *\/","    if (hdr->rtcp_common.pt != RTCP_PSFB || hdr->rtcp_common.count != 3)","\treturn PJ_ENOTFOUND;","","    if (hdr->rtcp_common.length < 3) {    ","        PJ_PERROR(3, (THIS_FILE, PJ_ETOOSMALL,","                      \"Failed parsing FB RPSI, invalid header length\"));"],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["return CMD_RET_FAILURE;","}","","if (!fit_check_format(fit_hdr)) {","puts(\"Bad FIT image format\\n\");","return CMD_RET_FAILURE;","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["    *output_data = NumDimensions(input);","  } else {","    return kTfLiteError;","  }","","  return kTfLiteOk;","}"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["Py_ssize_t len;","Py_ssize_t i;","tmp = _PyObject_GetAttrId(obj, &PyId_values);","if (tmp == NULL) goto failed;","if (!PyList_Check(tmp)) {","PyErr_Format(PyExc_TypeError, \"Dict field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* tensor0;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &tensor0));","TfLiteTensor* tensor1;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &tensor1));"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["keyword_ty o = (keyword_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"CVE-2022-0525","code_chunks":["}","}","break;","","{","int nk = gen_hash(s, tree, val, GEN_LIT_ARY_MAX);"],"label":1}
{"cve":"CVE-2022-0518","code_chunks":["attr->info.inner_classes_attr.classes = r_list_newf (r_bin_java_inner_classes_attr_entry_free);","for (i = 0; i < attr->info.inner_classes_attr.number_of_classes; i++) {","curpos = buf_offset + offset;","if (offset + 8 > sz) {","eprintf (\"Invalid amount of inner classes\\n\");","break;","}"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}"],"label":1}
{"cve":"CVE-2018-14357","code_chunks":["    goto out;","  }","","  rc = 0;","","  mutt_buffer_free(&sync_cmd);","  FREE(&mx.mbox);"],"label":0}
{"cve":"CVE-2019-13218","code_chunks":["c->value_bits = get_bits(f, 4)+1;","c->sequence_p = get_bits(f,1);","if (c->lookup_type == 1) {","c->lookup_values = lookup1_values(c->entries, c->dimensions);","} else {","c->lookup_values = c->entries * c->dimensions;","}"],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["{","if(!image)","throw LIBRAW_EXCEPTION_IO_CORRUPT;","","int bypp = tiff_bps <= 8 ? 1 : 2;","int bufsize = width * 3 * bypp;"],"label":0}
{"cve":"CVE-2021-32437","code_chunks":["\t\tremove_ocr = 1;","\t}","","\t\/*if we want ISMA like iods, we need at least BIFS *\/","\tif ( (IOD_Profile == GF_SDP_IOD_ISMA) && !sceneT ) return GF_BAD_PARAM;","","\t\/*do NOT change PLs, we assume they are correct*\/"],"label":0}
{"cve":"CVE-2019-19960","code_chunks":["ecc_point     *tG, *M[M_POINTS];","int           i, err;","#ifdef WOLFSSL_SMALL_STACK","mp_int*       mu = NULL;","#ifdef WOLFSSL_SMALL_STACK_CACHE","ecc_key       key;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["static int add_attributes(PyTypeObject* type, char**attrs, int num_fields)","{","int i, result;","_Py_IDENTIFIER(_attributes);","PyObject *s, *l = PyTuple_New(num_fields);","if (!l)","return 0;"],"label":1}
{"cve":"CVE-2022-23592","code_chunks":["const auto& node_t = node->def().experimental_type();","if (node_t.type_id() != TFT_UNSET) {","int ix = input_idx[i];","DCHECK(ix < node_t.args_size())","<< \"input \" << i << \" should have an output \" << ix","<< \" but instead only has \" << node_t.args_size()"],"label":1}
{"cve":"CVE-2021-30022","code_chunks":["\t\tbreak;","\t\tvvc->last_parsed_pps_id = gf_media_vvc_read_pps_bs_internal(bs, vvc);","\t\tret = (vvc->last_parsed_pps_id>=0) ? 0 : -1;","\t\tbreak;","\t\tvvc->last_parsed_vps_id = gf_media_vvc_read_vps_bs_internal(bs, vvc, GF_FALSE);","\t\tret = (vvc->last_parsed_vps_id>=0) ? 0 : -1;","\t\tbreak;"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["if (LIST_ISEMPTY(vrrp_data->vrrp))","return;","","file = fopen (\"\/tmp\/keepalived.json\",\"w\");","if (!file) {","log_message(LOG_INFO, \"Can't open \/tmp\/keepalived.json (%d: %s)\",","errno, strerror(errno));"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","const TfLiteTensor* fw_input_gate_bias =","GetOptionalInputTensor(context, node, kFwInputGateBiasTensor);","const TfLiteTensor* fw_forget_gate_bias =","GetInput(context, node, kFwForgetGateBiasTensor);"],"label":1}
{"cve":"PYSEC-2021-552","code_chunks":["context, size == 1,","errors::InvalidArgument(","\"Input 0 (file_pattern) must be a string scalar; got a tensor of \",","size, \"elements\"));","}","const string& file_pattern = file_pattern_t.flat<tstring>()(0);",""],"label":1}
{"cve":"CVE-2018-20175","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"CVE-2018-14016","code_chunks":["\/* We could confirm data sizes but a malcious MDMP will always get around","** this! But we can ensure that the data is not outside of the file *\/","if (entry->location.rva + entry->location.data_size > obj->b->length) {","eprintf(\"[ERROR] Size Mismatch - Stream data is larger than file size!\\n\");","return false;","}",""],"label":1}
{"cve":"CVE-2016-9841","code_chunks":["                        if (len > 1)","                            *out++ = *from++;","                    }","                }","                else {","                    from = out - dist;          \/* copy direct from output *\/","                    do {                        \/* minimum length is three *\/"],"label":0}
{"cve":"PYSEC-2021-167","code_chunks":["ValidateInputs(ctx, *input_matrix, input_permutation_indices, &batch_size,","&num_rows);","","Tensor batch_ptr(cpu_allocator(), DT_INT32, TensorShape({batch_size + 1}));","auto batch_ptr_vec = batch_ptr.vec<int32>();"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["int total_consumed = 0, len, padding = c->padding;","if (padding < 0) {","const char *start = strrchr(sb->buf, '\\n');","int occupied;","if (!start)","start = sb->buf;"],"label":1}
{"cve":"CVE-2022-0156","code_chunks":["if (cctx.ctx_skip == SKIP_YES && ea.cmdidx != CMD_eval)","{","line += STRLEN(line);","goto nextline;","}","else if (ea.cmdidx != CMD_eval)"],"label":1}
{"cve":"CVE-2018-16393","code_chunks":["\t\/* sanity check *\/","\tif (priv->env.operation != SC_SEC_OPERATION_DECIPHER)","\t\treturn SC_ERROR_INVALID_ARGUMENTS;","","\tkey_id = priv->rsa_key_ref * 2; \/* Private key *\/","","\tif (out_len < crgram_len) {"],"label":0}
{"cve":"CVE-2019-20393","code_chunks":["","           if ((yyvsp[-1].deviate)->dflt_size) {","             tmp = realloc((yyvsp[-1].deviate)->dflt, (yyvsp[-1].deviate)->dflt_size * sizeof *(yyvsp[-1].deviate)->dflt);","             if (!tmp) {","               LOGMEM(trg->ctx);","               YYABORT;","             }"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input_resource_id_tensor =","GetInput(context, node, kInputVariableId);","int resource_id = input_resource_id_tensor->data.i32[0];","auto& resources = subgraph->resources();","auto* variable = resource::GetResourceVariable(&resources, resource_id);","TF_LITE_ENSURE(context, variable != nullptr);"],"label":1}
{"cve":"CVE-2021-33910","code_chunks":["","                \/* Truncate trailing slashes and skip leading slashes *\/","                delete_trailing_chars(p, \"\/\");","                s = unit_name_escape(skip_leading_chars(p, \"\/\"));","        }","        if (!s)","                return -ENOMEM;"],"label":0}
{"cve":"CVE-2020-25669","code_chunks":["","switch (data) {","","schedule_work(&sunkbd->tq);","sunkbd->reset = -1;","break;",""],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;"],"label":1}
{"cve":"CVE-2018-15473","code_chunks":["\t\terror(\"Refusing RSA key because peer uses unsafe \"","\t\t    \"signature format\");","\t\tgoto done;","\t}","\tif (match_pattern_list(pkalg, options.hostbased_key_types, 0) != 1) {","\t\tlogit(\"%s: key type %s not in HostbasedAcceptedKeyTypes\",","\t\t    __func__, sshkey_type(key));"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["  envoy::type::matcher::v3::StringMatcher matcher;","  matcher.MergeFrom(TestUtility::createRegexMatcher(R\"raw([^.]*\\.example\\.net)raw\"));","  std::vector<SanMatcherPtr> subject_alt_name_matchers;","  subject_alt_name_matchers.push_back(","      SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_DNS, matcher)});","  subject_alt_name_matchers.push_back(","      SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_IPADD, matcher)});"],"label":0}
{"cve":"CVE-2018-25032","code_chunks":["unsigned lc;    \/* match length-MIN_MATCH or unmatched char (if dist==0) *\/","{","s->d_buf[s->last_lit] = (ush)dist;","s->l_buf[s->last_lit++] = (uch)lc;","if (dist == 0) {","\/* lc is the unmatched char *\/"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["node->temporaries = TfLiteIntArrayCreate(1);","node->temporaries->data[0] = op_data->cache_tensor_id;","","TfLiteTensor* dequantized = GetTemporary(context, node, \/*index=*\/0);","dequantized->type = op_context.ref->type;","dequantized->allocation_type = kTfLiteDynamic;",""],"label":1}
{"cve":"CVE-2018-10537","code_chunks":["        error_line (\"total_data_bytes = %lld, so riff\", total_data_bytes);","","    CLEAR (wavhdr);","","    wavhdr.FormatTag = format;","    wavhdr.NumChannels = num_channels;","    wavhdr.SampleRate = sample_rate;"],"label":0}
{"cve":"CVE-2016-2315","code_chunks":["static void test_show_object(struct object *object, const char *name,","void *data)","{","struct bitmap_test_data *tdata = data;","int bitmap_pos;"],"label":0}
{"cve":"CVE-2017-9141","code_chunks":["    image->compression = compression;","    image->columns = dds_info.width;","    image->rows = dds_info.height;","    image->storage_class = DirectClass;","    image->endian = LSBEndian;","    image->depth = 8;","    if (image_info->ping != MagickFalse)"],"label":0}
{"cve":"CVE-2018-20839","code_chunks":["err = -fd;","continue;","}","r = verify_vc_kbmode(fd);","if (r < 0) {","if (!err)","err = -r;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["return Py_None;","}","","result = PyType_GenericNew(arguments_type, NULL, NULL);"],"label":1}
{"cve":"CVE-2021-32399","code_chunks":["return -ENETDOWN;","","\/* Serialize all requests *\/","hci_req_sync_lock(hdev);","ret = __hci_req_sync(hdev, req, opt, timeout, hci_status);","hci_req_sync_unlock(hdev);"],"label":1}
{"cve":"CVE-2023-28101","code_chunks":["","  if (unset_env->len > 0)","    {","      g_ptr_array_add (unset_env, NULL);","      g_key_file_set_string_list (metakey, FLATPAK_METADATA_GROUP_CONTEXT,","                                  FLATPAK_METADATA_KEY_UNSET_ENVIRONMENT,","                                  (const char * const *) unset_env->pdata,"],"label":0}
{"cve":"CVE-2020-15945","code_chunks":["luaD_hook(L, LUA_HOOKRET, -1, ftransfer, nres);  \/* call it *\/","ci->func -= delta;","}","if (isLua(ci->previous))","L->oldpc = ci->previous->u.l.savedpc;  \/* update 'oldpc' *\/","return restorestack(L, oldtop);","}"],"label":1}
{"cve":"CVE-2022-36019","code_chunks":["  AddInputFromArray<float>(TensorShape({}), {256.0f});","  AddInputFromArray<float>(TensorShape({}), {-1.0f});","  AddInputFromArray<float>(TensorShape({}), {1.0f});","  TF_ASSERT_OK(RunOpKernel());","  Tensor expected(allocator(), DT_QUINT8, TensorShape({value_count}));","  test::FillValues<quint8>(&expected, {0, 128, 255});","  test::ExpectTensorEqual<quint8>(expected, *GetOutput(0));"],"label":0}
{"cve":"CVE-2020-15473","code_chunks":["","      hmac_size = check_pkid_and_detect_hmac_size(ovpn_payload);","","      if(hmac_size > 0) {","\tu_int16_t offset = P_PACKET_ID_ARRAY_LEN_OFFSET(hmac_size);","\t  ","        alen = ovpn_payload[offset];"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","const float epsilon = 1e-6f;","if (output->type == kTfLiteFloat32) {"],"label":1}
{"cve":"CVE-2018-12436","code_chunks":["\/* find s = (e + xr)\/k *\/","err = mp_invmod(&pubkey.k, curve->order, &pubkey.k);","if (err != MP_OKAY) break;","","\/* s = xr *\/"],"label":1}
{"cve":"CVE-2017-9144","code_chunks":["break;","for (x=0; x < (ssize_t) image->columns; x++)","{","SetPixelIndex(image,*p++,q);","q+=GetPixelChannels(image);","}","if (SyncAuthenticPixels(image,exception) == MagickFalse)"],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["\tbreak;","      case 33422:\t\t\t\/* CFAPattern *\/","\tif (filters == 9) {","\t  FORC(36) ((char *)xtrans)[c] = fgetc(ifp) & 3;","\t  break;","\t}","      case 64777:\t\t\t\/* Kodak P-series *\/"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":[],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["                                                  input, filter, bias, output);","      break;","      return EvalQuantizedPerChannel16x8(params, data, input, filter, bias,","                                         output);","      break;","      context->ReportError(context, \"Type %d not currently supported.\",","                           input->type);"],"label":0}
{"cve":"CVE-2021-3609","code_chunks":["* Only remove subscriptions that had not","* been removed due to NETDEV_UNREGISTER","* in bcm_notifier()","*\/","if (op->rx_reg_dev) {","struct net_device *dev;"],"label":1}
{"cve":"CVE-2022-0521","code_chunks":["\t}","\t\tannotation->type_idx = R_BIN_JAVA_USHORT (buffer, offset);","\toffset += 2;","\t\tannotation->num_element_value_pairs = R_BIN_JAVA_USHORT (buffer, offset);","\toffset += 2;","\tannotation->element_value_pairs = r_list_newf (r_bin_java_element_pair_free);","\t\tfor (i = 0; i < annotation->num_element_value_pairs; i++) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input_boxes = GetInput(context, node, kInputTensorBoxes);","const int num_boxes = SizeOfDimension(input_boxes, 0);","const TfLiteTensor* input_scores =","GetInput(context, node, kInputTensorScores);","const TfLiteTensor* input_max_output_size ="],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\tStream_Write_UINT8(s, 75);","\treturn TRUE;","}","","\/**"," * Write NSCODEC Server Capability Container.\\n"," * @param s stream"],"label":0}
{"cve":"PYSEC-2021-660","code_chunks":["void Compute(OpKernelContext* context) override {","const Tensor* input_indices;","const Tensor* input_values;","const Tensor* input_shape;","SparseTensorsMap* map;",""],"label":0}
{"cve":"CVE-2019-9721","code_chunks":["","if (!closing_brace_missing) {","if (   (an != 1 && in[1] == '\\\\')","|| (in[1] && strchr(\"CcFfoPSsYy\", in[1]) && in[2] == ':')) {","char *bracep = strchr(in+2, '}');","if (bracep) {"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["if (pos)","strbuf_add(&tmp, sb->buf, pos);","strbuf_add_wrapped_text(&tmp, sb->buf + pos,","(int) indent1, (int) indent2, (int) width);","strbuf_swap(&tmp, sb);","strbuf_release(&tmp);","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void ep_read_bin(ep_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_HasAttrId(obj, &PyId_lineno)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_lineno);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* axis_tensor = GetInput(context, node, kAxisTensor);","int axis = GetTensorData<int32_t>(axis_tensor)[0];","const int rank = NumDimensions(input);","if (axis < 0) {"],"label":1}
{"cve":"CVE-2024-23638","code_chunks":["if (io.flag == Comm::ERR_CLOSING || !Comm::IsConnOpen(clientConnection)) {","debugs(33,5, io.conn << \" closing Bailout.\");","return;","}","","Must(io.conn->fd == clientConnection->fd);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["    active_branch_subgraph.EnsureTensorDataIsReadable(tensor_index);","  }","","  bool has_dynamic_output_tensors = false;","  for (int i = 0; i < node->outputs->size; ++i) {","    TfLiteTensor* output;","    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &output));"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["}","","TF_LITE_ENSURE(context, axis >= 0 && axis < rank);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (output->type) {","case kTfLiteFloat32: {"],"label":1}
{"cve":"CVE-2019-11072","code_chunks":["    }","","    if (flags & (BURL_TOUPPER|BURL_TOLOWER)) off = buffer_string_length(b);","","    if (flags & BURL_ENCODE_NONE) {","        buffer_append_string_len(b, str, len);","    }"],"label":0}
{"cve":"CVE-2023-52267","code_chunks":["                nparsed, read_size, err_msg.c_str());","        return -1;","    }","","    if (_parse_err) {","        return _parse_err;","    }"],"label":0}
{"cve":"CVE-2016-6871","code_chunks":["static Variant HHVM_FUNCTION(bcsqrt, const String& operand,","int64_t scale \/* = -1 *\/) {","if (scale < 0) scale = BCG(bc_precision);","bc_num result;","bc_init_num(&result);","SCOPE_EXIT {"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["if (length > 0) {","memcpy(buffer, (const void *)(m_data + m_cursor), length);","}","m_cursor += length;","return length;","}"],"label":1}
{"cve":"CVE-2021-24028","code_chunks":["size_t written = iprot->writeStructBegin(structInfo.name);","if (UNLIKELY(structInfo.unionExt != nullptr)) {","const FieldInfo* end = structInfo.fieldInfos + structInfo.numFields;","const auto& unionId =","activeUnionMemberId(object, structInfo.unionExt->unionTypeOffset);"],"label":1}
{"cve":"CVE-2020-27788","code_chunks":["        if (!hashtab) {","            char msg[40]; snprintf(msg, sizeof(msg),","               \"bad DT_HASH %#x\", v_hsh);","            throwCantPack(msg);","        }","        unsigned const nbucket = get_te32(&hashtab[0]);","        unsigned const *const buckets = &hashtab[2];"],"label":0}
{"cve":"CVE-2018-12562","code_chunks":["RemoteFsDevice::Details det=details();","modified=det!=orig;","saveable=!det.isEmpty();","if (saveable && Type_SambaAvahi==type->itemData(type->currentIndex()).toInt()) {","saveable=!smbAvahiName->text().trimmed().isEmpty();"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE(context, seq_lengths[i] <= SizeOfDimension(input, seq_dim));","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","reference_ops::ReverseSequence<T, TS>(","seq_lengths, seq_dim, batch_dim, GetTensorShape(input),"],"label":1}
{"cve":"CVE-2019-19333","code_chunks":["                    LOGVAL(ctx, LYE_INVAL, LY_VLOG_LYD, contextnode, *value_, itemname);","                } else {","                    LOGVAL(ctx, LYE_INMETA, LY_VLOG_LYD, contextnode, \"<none>\", itemname, *value_);","                }","                goto error;","            } else if (ly_strequal(value, *value_, 1)) {","                \/* we have actually created the same expression (prefixes are the same as the module names)"],"label":0}
{"cve":"CVE-2020-5238","code_chunks":["    if (yych <= 0x1F) {","      if (yych <= '\\t') {","        if (yych <= 0x08)","          goto yy78;","        goto yy73;","      } else {","        if (yych <= '\\n')"],"label":0}
{"cve":"CVE-2022-2566","code_chunks":["\/* Build an unrolled index of the samples *\/","sc->sample_offsets_count = 0;","for (uint32_t i = 0; i < sc->ctts_count; i++)","sc->sample_offsets_count += sc->ctts_data[i].count;","av_freep(&sc->sample_offsets);","sc->sample_offsets = av_calloc(sc->sample_offsets_count, sizeof(*sc->sample_offsets));"],"label":1}
{"cve":"CVE-2019-19221","code_chunks":["\/*","* No single byte will be more than one wide character,","* so this length estimate will always be big enough.","*\/","size_t mbs_length = len;","const char *mbs = p;","wchar_t *wcs;"],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["raise_warning(\"Iv size incorrect; supplied length: %d, needed: %d\",","iv.size(), iv_size);","}","memcpy(iv_s, iv.data(), std::min(iv_size, iv.size()));","","mcrypt_generic_deinit(pm->m_td);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params =","reinterpret_cast<TfLiteSpaceToDepthParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["res = obj2ast_identifier(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"Global field \\\"names\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"CVE-2022-36017","code_chunks":["AddInputFromArray<qint32>(TensorShape({value_count}),","{-(1 << 23), 0, (1 << 23)});","AddInputFromArray<float>(TensorShape({}), {-256.0f});","AddInputFromArray<float>(TensorShape({}), {256.0f});","AddInputFromArray<float>(TensorShape({}), {-1.0f});","AddInputFromArray<float>(TensorShape({}), {1.0f});"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","if (Stream_GetRemainingLength(s) < 4)","return FALSE;","Stream_Read_UINT16(s, *type);   \/* capabilitySetType *\/","Stream_Read_UINT16(s, *length); \/* lengthCapability *\/","if (*length < 4)"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);","","const TfLiteTensor* lookup = GetInput(context, node, 0);","TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);","TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\t\t\t\tep4_add(_p[m*c + (ptr\/2)], _p[m*c + (ptr\/2)], t);","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","","\t\t\t\tep4_set_infty(t);","\t\t\t\tfor (m = 3; m >= 0; m--) {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["output_state_sf->type = kTfLiteFloat32;","output_state_sf->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(output_state_sf->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"PYSEC-2021-636","code_chunks":["Status CreateTempFileFloat(Env* env, float value, uint64 size,","string* filename) {","const string dir = testing::TmpDir();","*filename = io::JoinPath(dir, strings::StrCat(\"file_\", value));","std::unique_ptr<WritableFile> file;"],"label":0}
{"cve":"CVE-2021-25940","code_chunks":["_username = usernameSlice.copyString();","std::string const password = passwordSlice.copyString();","","auth::UserManager* um = AuthenticationFeature::instance()->userManager();","if (um == nullptr) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["prod_scaling_factors->type = kTfLiteFloat32;","prod_scaling_factors->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(prod_scaling_factors->dims, 1,"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["if (length < 8)","return FALSE;","","Stream_Read_UINT32(s, frameAcknowledge); \/* frameAcknowledge (4 bytes) *\/"],"label":1}
{"cve":"CVE-2020-12279","code_chunks":["\tstruct checkout_stream *stream = (struct checkout_stream *)s;","\tassert(stream && stream->open);","","\tstream->open = 0;","\treturn p_close(stream->fd);","}",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE(context, num_dims >= 2);","const TfLiteTensor* fft_length = GetInput(context, node, kFftLengthTensor);","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TF_LITE_ENSURE(context, IsPowerOfTwo(fft_length_data[0]));","TF_LITE_ENSURE(context, IsPowerOfTwo(fft_length_data[1]));"],"label":1}
{"cve":"CVE-2019-13308","code_chunks":["","      \/*","        Normalize Fourier transform.","      *\/","      i=0L;","      gamma=PerceptibleReciprocal((double) fourier_info->width*","        fourier_info->height);"],"label":0}
{"cve":"CVE-2022-2872","code_chunks":["","_file_cache = {}","_file_cache_mutex = threading.RLock()","","_DATA_FORMAT_VERSION = \"v2\"","",""],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2022-35977","code_chunks":["\/* \"append\" is an argument, so always an sds *\/","append = c->argv[2];","totlen = stringObjectLen(o)+sdslen(append->ptr);","if (checkStringLength(c,totlen) != C_OK)","return;",""],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT32 flags;","UINT32 VCChunkSize;","WLog_INFO(TAG,","\"VirtualChannelCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["GetOutput(context, node, kSoftNMSOutputTensorSelectedScores);","output_num_selected_indices =","GetOutput(context, node, kSoftNMSOutputTensorNumSelectedIndices);","if (!is_max_output_size_const) {","SetTensorSizes(context, output_selected_indices, {max_output_size_value});","SetTensorSizes(context, output_selected_scores, {max_output_size_value});"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["PyUnicode_GET_LENGTH(state->last_str) != 0);","","\/* We've dealt with the literal now. It can't be leaked on further","errors. *\/"],"label":1}
{"cve":"CVE-2023-38403","code_chunks":["if (Nread(fd, (char*) &nsize, sizeof(nsize), Ptcp) >= 0) {","hsize = ntohl(nsize);","\/* Allocate a buffer to hold the JSON *\/","str = (char *) calloc(sizeof(char), hsize+1);\t\/* +1 for trailing null *\/","if (str != NULL) {","rc = Nread(fd, str, hsize, Ptcp);","if (rc >= 0) {"],"label":1}
{"cve":"CVE-2016-10161","code_chunks":["yych = *++YYCURSOR;","if (yych != '\"') goto yy18;","++YYCURSOR;","#line 699 \"ext\/standard\/var_unserializer.re\""],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT32 multifragMaxRequestSize;","","if (length < 8)","return FALSE;",""],"label":1}
{"cve":"CVE-2021-3984","code_chunks":["if ((colnr_T)cin_skip2pos(trypos) == trypos->col","&& (pos = ind_find_start_CORS(NULL)) == NULL) \t    break;","if (pos != NULL)","curwin->w_cursor.lnum = pos->lnum;","}","curwin->w_cursor = cursor_save;","return trypos;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor2, &input2));"],"label":0}
{"cve":"CVE-2021-3772","code_chunks":["","packet = sctp_ootb_pkt_new(net, asoc, chunk);","if (!packet)","return SCTP_DISPOSITION_NOMEM;","","\/* Make an SHUTDOWN_COMPLETE."],"label":1}
{"cve":"CVE-2021-44108","code_chunks":["","sendmsg.N1N2MessageTransferRspData = &N1N2MessageTransferRspData;","","switch (n2InfoContent->ngap_ie_type) {","if (!n2buf) {","ogs_error(\"[%s] No N2 SM Content\", amf_ue->supi);","return OGS_ERROR;"],"label":1}
{"cve":"CVE-2022-1052","code_chunks":["R_API RCmdAliasVal *r_cmd_alias_get(RCmd *cmd, const char *k) {","r_return_val_if_fail (cmd && cmd->aliases && k, NULL);","return ht_pp_find (cmd->aliases, k, NULL);","}"],"label":0}
{"cve":"CVE-2021-45931","code_chunks":["hb_set_union (hb_set_t       *set,","const hb_set_t *other)","{","\/* Immutible-safe. *\/","set->union_ (*other);","}",""],"label":0}
{"cve":"CVE-2021-37491","code_chunks":["    return result;","}","","bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool internal)","{","    if (nIndex == -1)","    {"],"label":0}
{"cve":"CVE-2020-14403","code_chunks":["                cl->updateBuf[cl->ublen++] = rfbHextileRaw;                     \\","                (*cl->translateFn)(cl->translateLookupTable,                    \\","                                   &(cl->screen->serverFormat), &cl->format, fbptr,        \\","                                   (char *)clientPixelData,                     \\","                                   cl->scaledScreen->paddedWidthInBytes, w, h); \\","                                                                                \\","                memcpy(&cl->updateBuf[cl->ublen], (char *)clientPixelData,      \\"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE(context, seq_lengths[i] <= SizeOfDimension(input, seq_dim));","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","reference_ops::ReverseSequence<T, TS>(","seq_lengths, seq_dim, batch_dim, GetTensorShape(input),"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["return NULL;","\/* \"\u00e4\" (2 bytes) may become \"\\U000000E4\" (10 bytes), or 1:5","\"\\\u00e4\" (3 bytes) may become \"\\u005c\\U000000E4\" (16 bytes), or ~1:6 *\/","u = PyBytes_FromStringAndSize((char *)NULL, len * 6);","if (u == NULL)","return NULL;"],"label":1}
{"cve":"PYSEC-2021-663","code_chunks":["    const auto& in_max_tensor = context->input(3);","    OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_max_tensor.shape()),","                errors::InvalidArgument(\"max must be a scalar\"));","    const float in_max = in_max_tensor.flat<float>()(0);","","    ImageResizerState st(align_corners_, false);","    st.ValidateAndCreateOutput(context);"],"label":0}
{"cve":"CVE-2021-42782","code_chunks":["sc_apdu_t apdu;","u8        rbuf[SC_MAX_APDU_BUFFER_SIZE];","int       r;","const u8  *p = rbuf, *q, *pp;","size_t    len, tlen = 0, ilen = 0;","","sc_format_apdu(card, &apdu, SC_APDU_CASE_2_SHORT, 0xca, 0x01, 0x88);"],"label":0}
{"cve":"CVE-2023-44488","code_chunks":["                          libvpx_test::Encoder *encoder) override {","    if (video->frame() == 0) {","      encoder->Control(VP9E_SET_AQ_MODE, 3);","      encoder->Control(VP8E_SET_CPUUSED, set_cpu_used_);","    }","","    if (change_bitrate_ && video->frame() == 120) {"],"label":0}
{"cve":"CVE-2022-35970","code_chunks":["AddInputFromArray<qint32>(TensorShape({value_count}),","{-(1 << 23), 0, (1 << 23)});","AddInputFromArray<float>(TensorShape({}), {-256.0f});","AddInputFromArray<float>(TensorShape({}), {256.0f});","AddInputFromArray<float>(TensorShape({}), {-1.0f});","AddInputFromArray<float>(TensorShape({}), {1.0f});"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["Py_CLEAR(tmp);","step = NULL;","}"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2021-24028","code_chunks":["const FieldID& activeUnionMemberId(const void* object, ptrdiff_t offset) {","return *reinterpret_cast<const FieldID*>(","offset + static_cast<const char*>(object));","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    if (!TfLiteIntArrayEqualsArray(prod_scaling_factors->dims, 1,","                                   scaling_dims)) {","      TfLiteIntArray* prod_scaling_factors_size = TfLiteIntArrayCreate(1);","      prod_scaling_factors_size->data[0] = n_batch;","      TF_LITE_ENSURE_OK(context,","                        context->ResizeTensor(context, prod_scaling_factors,","                                              prod_scaling_factors_size));"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["    if (PyDict_SetItemString(d, \"Compare\", (PyObject*)Compare_type) < 0) return","        NULL;","    if (PyDict_SetItemString(d, \"Call\", (PyObject*)Call_type) < 0) return NULL;","    if (PyDict_SetItemString(d, \"Num\", (PyObject*)Num_type) < 0) return NULL;","    if (PyDict_SetItemString(d, \"Str\", (PyObject*)Str_type) < 0) return NULL;","    if (PyDict_SetItemString(d, \"FormattedValue\",","        (PyObject*)FormattedValue_type) < 0) return NULL;"],"label":0}
{"cve":"CVE-2021-30022","code_chunks":["\tret = gf_media_vvc_parse_nalu_bs(bs, vvc, nal_unit_type, temporal_id, layer_id);","\tgf_bs_del(bs);","\treturn ret;","}","","Bool gf_media_vvc_slice_is_ref(VVCState *vvc)","{"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["GetInput(context, node, kInputToOutputWeightsTensor);","TfLiteTensor* input_to_output_weights_ledger =","&context->tensors[op_data->ledger_index +","kInputToOutputWeightsLedgerOffset];","auto status = make_ledger(input_to_output_weights->sparsity, context,","input_to_output_weights_ledger);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    if (data->im2col_id == kTensorNotAllocated) {","      context->AddTensors(context, 1, &data->im2col_id);","    }","    ++temporaries_count;","  }","  if (data->need_hwcn_weights) {","    data->hwcn_weights_index = temporaries_count;"],"label":0}
{"cve":"CVE-2018-16435","code_chunks":["t-> nPatches   = atoi(cmsIT8GetProperty(it8, \"NUMBER_OF_SETS\"));","","t-> Data = (char**)AllocChunk (it8, ((cmsUInt32Number) t->nSamples + 1) * ((cmsUInt32Number) t->nPatches + 1) *sizeof (char*));","if (t->Data == NULL) {","","SynError(it8, \"AllocateDataSet: Unable to allocate data array\");"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  const int row_bytes = value->bytes \/ num_rows;","  void* pointer = nullptr;","  DynamicBuffer buf;","","  for (int i = 0; i < SizeOfDimension(lookup, 0); i++) {","    int idx = -1;","    pointer = bsearch(&(lookup->data.i32[i]), key->data.i32, num_rows,"],"label":0}
{"cve":"CVE-2021-32132","code_chunks":["ISOM_DECREASE_SIZE(ptr, 1)","ptr->server_entry_count = gf_bs_read_u8(bs);","for (i=0; i<ptr->server_entry_count; i++) {","int j=0;","zfound = GF_FALSE;","tmp_strsize=(u32)ptr->size;"],"label":1}
{"cve":"CVE-2023-51698","code_chunks":["gconstpointer b)","{","gchar *temp1, *temp2;","gint ret;","temp1 = g_utf8_collate_key_for_filename (* (const char **) a, -1);","temp2 = g_utf8_collate_key_for_filename (* (const char **) b, -1);"],"label":0}
{"cve":"PYSEC-2020-116","code_chunks":["int ndim = tensor->dims();","dlm_tensor->dl_tensor.ndim = ndim;","dlm_tensor->dl_tensor.data = TFE_TensorHandleDevicePointer(h, status);","dlm_tensor->dl_tensor.dtype = GetDlDataType(data_type, status);","","std::vector<int64_t>* shape_arr = &tf_dlm_tensor_ctx->shape;"],"label":1}
{"cve":"CVE-2021-4110","code_chunks":["\/* Calling Proc.new without a block is not implemented yet *\/","mrb_get_args(mrb, \"&!\", &blk);","p = MRB_OBJ_ALLOC(mrb, MRB_TT_PROC, mrb_class_ptr(proc_class));","mrb_proc_copy(p, mrb_proc_ptr(blk));","proc = mrb_obj_value(p);","mrb_funcall_with_block(mrb, proc, MRB_SYM(initialize), 0, NULL, proc);","if (!MRB_PROC_STRICT_P(p) &&"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2018-5809","code_chunks":["gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,255);","else","gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,65535);","fseek (ifp, data_offset, SEEK_SET);"],"label":1}
{"cve":"CVE-2018-14882","code_chunks":["                \/* plus 4, because struct icmp6_hdr contains 4 bytes of icmp payload *\/","                rpl_print(ndo, dp, &dp->icmp6_data8[0], length-sizeof(struct icmp6_hdr)+4);","                break;","                ND_PRINT((ndo,\", length %u\", length));","                if (ndo->ndo_vflag <= 1)","                        print_unknown_data(ndo, bp,\"\\n\\t\", length);","                return;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["bool IsPadOpSupported(const TfLiteRegistration* registration,","const TfLiteNode* node, TfLiteContext* context) {","const TfLiteTensor* padding = GetInput(context, node, 1);","if (!IsConstantTensor(padding)) {","TF_LITE_KERNEL_LOG(context,","\"%s: Only constant padding is supported for PAD.\","],"label":1}
{"cve":"CVE-2019-16778","code_chunks":["if (output.size() == 0) {","return;","}","GpuLaunchConfig config = GetGpuLaunchConfig(output.size(), d);","TF_CHECK_OK(GpuLaunchKernel(SetZero<T>, config.block_count,","config.thread_per_block, 0, d.stream(),"],"label":1}
{"cve":"PYSEC-2020-272","code_chunks":["","m.def(\"TFE_ToDlpackCapsule\", [](py::handle& o) {","PyObject* eager_tensor_pyobject_ptr = o.ptr();","TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);","tensorflow::Safe_TF_StatusPtr status =","tensorflow::make_safe(TF_NewStatus());","void* dlm_ptr = tensorflow::TFE_HandleToDLPack(thandle, status.get());"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["break;","","","{ if (yang_read_extcomplex_str(trg, ext_instance, \"organization\", ext_name, s,","0, LY_STMT_ORGANIZATION)) {","YYABORT;","}"],"label":1}
{"cve":"CVE-2021-32628","code_chunks":["     * to do so we consider the ID as a single 128 bit number written in","     * big endian, so that the most significant bytes are the first ones. *\/","    uint64_t rax_key[2];    \/* Key in the radix tree containing the listpack.*\/","    streamID master_id;     \/* ID of the master entry in the listpack. *\/","","    \/* Create a new listpack and radix tree node if needed. Note that when","     * a new listpack is created, we populate it with a \"master entry\". This"],"label":0}
{"cve":"CVE-2018-12326","code_chunks":["sds prompt = sdsempty();","if (config.hostsocket != NULL) {","prompt = sdscatfmt(prompt,\"redis %s\",config.hostsocket);","} else {","char addr[256];","anetFormatAddr(addr, sizeof(addr), config.hostip, config.hostport);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        }","        *out = AsyncWith(items, body, type_comment, lineno, col_offset,","                         end_lineno, end_col_offset, arena);","        if (*out == NULL) goto failed;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)Raise_type);"],"label":0}
{"cve":"CVE-2018-8798","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kGateWeight, &gate_weight));","  TF_LITE_ENSURE_EQ(context, gate_weight->dims->size, 2);","  TF_LITE_ENSURE_EQ(context, gate_weight->dims->data[0], 2 * n_output);","  TF_LITE_ENSURE_EQ(context, gate_weight->dims->data[1], n_input + n_output);","","    const TfLiteTensor* gate_bias;"],"label":0}
{"cve":"PYSEC-2021-660","code_chunks":["errors::InvalidArgument(","\"Rank of input SparseTensor should be > 1, but saw rank: \", rank));","","TensorShape tensor_input_shape(input_shape->vec<int64>());","gtl::InlinedVector<int64, 8> std_order(rank);","std::iota(std_order.begin(), std_order.end(), 0);","SparseTensor input_st;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["                    PyErr_SetString(PyExc_RuntimeError, \"AsyncFor field \\\"body\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(body, i, val);","            }","            Py_CLEAR(tmp);","        }"],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["","static int http_get_file_handle(URLContext *h)","{","    HTTPContext *s = h->priv_data;","    return ffurl_get_file_handle(s->hd);","}",""],"label":0}
{"cve":"CVE-2022-21725","code_chunks":["        ","    int64_t crop_area = MultiplyWithoutOverflow(crop_height, crop_width);","  if (crop_area < 0)","    return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",","                                   crop_height, \" with \", crop_width,","                                   \" would overflow\");","  int64_t crop_volume = MultiplyWithoutOverflow(crop_area, num_boxes);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  const TfLiteTensor* input2;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor2, &input2));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));",""],"label":0}
{"cve":"CVE-2021-43848","code_chunks":["                offsetof(struct st_h2o_http3_server_conn_t, h3._control_streams.egress.control),","                offsetof(struct st_h2o_http3_server_conn_t, h3._control_streams.egress.qpack_encoder),","                offsetof(struct st_h2o_http3_server_conn_t, h3._control_streams.egress.qpack_decoder)};","            \/* 1. obtain pointer to the offending stream *\/","            struct st_h2o_http3_egress_unistream_t *stream = NULL;","            size_t i;","            for (i = 0; i != sizeof(stream_offsets) \/ sizeof(stream_offsets[0]); ++i) {"],"label":0}
{"cve":"CVE-2022-3256","code_chunks":["\tpos_T\tpos;","\tint\tslcb = listcmd_busy;","","\tpos = curwin->w_cursor;","\tlistcmd_busy = TRUE;\t    \tif (findsent(c == ')' ? FORWARD : BACKWARD, 1L))","\t{","\t    pos_copy = curwin->w_cursor;"],"label":0}
{"cve":"CVE-2023-51781","code_chunks":["* user tasks fiddle here","*\/","struct sk_buff *skb = skb_peek(&sk->sk_receive_queue);","long amount = 0;","","if (skb)"],"label":1}
{"cve":"CVE-2021-30020","code_chunks":["pps->state = 1;","}","pps->sps_id = gf_bs_read_int_log(bs, 4, \"sps_id\");","if (pps->sps_id >= 16) {","GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] wrong SPS ID %d in PPS\\n\", pps->sps_id));","pps->sps_id=0;","return -1;"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["void CLASS rollei_load_raw()","{","uchar pixel[10];","unsigned iten=0, isix, i, buffer=0, todo[16];","","isix = raw_width * raw_height * 5 \/ 8;","while (fread (pixel, 1, 10, ifp) == 10) {"],"label":1}
{"cve":"CVE-2017-7524","code_chunks":["tpm2bBits.t.size = 4;","bitsSwizzled = string_bytes_endian_convert_32( bits );","*(UINT32 *)tpm2bBitsPtr = bitsSwizzled;","","for(i = 0; label[i] != 0 ;i++ );",""],"label":1}
{"cve":"CVE-2018-10538","code_chunks":["}","else {","int bytes_to_copy = (int)(((dff_chunk_header.ckDataSize) + 1) & ~(int64_t)1);","char *buff = malloc (bytes_to_copy);","","if (debug_logging_mode)","error_line (\"extra unknown chunk \\\"%c%c%c%c\\\" of %d bytes\","],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\/* compare sign of y and sign of t; fix if necessary *\/\t\t\t\\","\t\t\tneg = neg != fp_sgn0(PT->y, k);\t\t\t\t\t\t\t\t\t\\","\t\t\tfp_neg(t, PT->y);\t\t\t\t\t\t\t\t\t\t\t\t\\","\t\t\tdv_copy_cond(PT->y, t, RLC_FP_DIGS, neg);\t\t\t\t\t\t\\","\t\t} while (0)","","\t\t\/* first map invocation *\/"],"label":0}
{"cve":"PYSEC-2020-140","code_chunks":["    functor::DataFormatDimMap<Device, T>()(context->eigen_device<Device>(),","                                           input.flat<T>(), output->flat<T>(),","                                           dst_idx_.vec<int>());","  }","","  Tensor dst_idx_;","};"],"label":0}
{"cve":"CVE-2017-6886","code_chunks":["          FORC3 imgdata.color.ccm[i][c] = imgdata.color.ccm[i][c] \/ num;","      }","      break;","#endif","      FORC4 cblack[c ^ c >> 1] = get2();","      i = cblack[3];","      FORC3 if (i > cblack[c]) i = cblack[c];"],"label":0}
{"cve":"CVE-2020-15473","code_chunks":["      hmac_size = check_pkid_and_detect_hmac_size(ovpn_payload);","","      if(hmac_size > 0) {","\tu_int16_t offset = P_PACKET_ID_ARRAY_LEN_OFFSET(hmac_size);","\t  ","        alen = ovpn_payload[offset];","\t"],"label":0}
{"cve":"CVE-2019-13221","code_chunks":["","   float *e0 = e + d0;","   float *e2 = e0 + k_off;","","   for (i=lim >> 2; i > 0; --i) {","      k00_20 = e0[-0] - e2[-0];","      k01_21 = e0[-1] - e2[-1];"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["            int res;","            res = obj2ast_identifier(tmp, &name, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }","        if (lookup_attr_id(obj, &PyId_args, &tmp) < 0) {","            return 1;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input_y = GetInput(context, node, kInputTensorY);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","#define TF_LITE_SELECT(type, op)                                           \\","reference_ops::op(GetTensorShape(input_condition),                       \\"],"label":1}
{"cve":"CVE-2016-10190","code_chunks":["    if (post && !s->post_data) {","        send_expect_100 = s->send_expect_100;","        \/* The user has supplied authentication but we don't know the auth type,","         * send Expect: 100-continue to get the 401 response including the","         * WWW-Authenticate header, or an 100 continue if no auth actually","         * is needed. *\/","        if (auth && *auth &&"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["perrdetail err;","int iflags = PARSER_FLAGS(flags);","node *n;","","if (feature_version >= 7)","iflags |= PyPARSE_ASYNC_ALWAYS;"],"label":0}
{"cve":"CVE-2016-10156","code_chunks":["        va_start(ap, files);","        while (files != NULL) {","                _cleanup_free_ char *path = strappend(tmp_dir, files);","                assert_se(touch_file(path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, MODE_INVALID) == 0);","                files = va_arg(ap, const char *);","        }","        va_end(ap);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (full_checks) {","        const char * const *p;","        for (p = FORBIDDEN; *p; p++) {","            if (_PyUnicode_EqualToASCIIString(name, *p)) {","                ast_error(c, n, \"assignment to keyword\");","                return 1;","            }"],"label":0}
{"cve":"CVE-2021-29605","code_chunks":["  int alloc_size = TfLiteIntArrayGetSizeInBytes(size);","  if (alloc_size <= 0) return NULL;","  TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);","  if (!ret) return ret;","  ret->size = size;","  return ret;","}"],"label":0}
{"cve":"CVE-2016-9583","code_chunks":["\t  ++pi->compno, ++pi->picomp) {","\t\tpirlvl = pi->picomp->pirlvls;","\t\t\t\tif (pirlvl->prcwidthexpn + pi->picomp->numrlvls >","\t\t  JAS_UINTFAST32_NUMBITS - 2 ||","\t\t  pirlvl->prcheightexpn + pi->picomp->numrlvls >","\t\t  JAS_UINTFAST32_NUMBITS - 2) {","\t\t\treturn -1;"],"label":0}
{"cve":"CVE-2022-35972","code_chunks":["void Compute(OpKernelContext* context) override {","const Tensor& input = context->input(0);","const Tensor& bias = context->input(1);","const float input_min = context->input(2).flat<float>()(0);","const float input_max = context->input(3).flat<float>()(0);","const float bias_min = context->input(4).flat<float>()(0);"],"label":1}
{"cve":"CVE-2023-30207","code_chunks":["tagLoaderTagLib.Load(file.GetDynPath(), m_tag, strFallbackFileExtension);","","int nErrors = 0;","for (int nPacket=0; nPacket < 10 && (m_channels == 0 || m_format.m_sampleRate == 0); nPacket++)","{","uint8_t dummy[256];","size_t nSize = 256;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kInputTensorBoxes, &input_boxes));","const int num_boxes = SizeOfDimension(input_boxes, 0);","const TfLiteTensor* input_scores;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kInputTensorScores, &input_scores));"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      TfLiteTensor* t = &context->tensors[id];","      int num = a0->dims->data[0];","      for (int i = 0; i < num; i++) {","        t->data.f[i] = a0->data.f[i];","      }","    };",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 inputFlags;","","if (length < 88)","return FALSE;","","Stream_Read_UINT16(s, inputFlags); \/* inputFlags (2 bytes) *\/"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(","context, GetOutputSafe(context, node, kOutputValues, &output_values));","TfLiteTensor* output_indexes;","TF_LITE_ENSURE_OK(","context, GetOutputSafe(context, node, kOutputIndexes, &output_indexes));","if (IsDynamicTensor(output_values)) {"],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["{","uchar pixel[10];","unsigned iten = 0, isix, i, buffer = 0, todo[16];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width > 32767 || raw_height > 32767)","throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["\/* This cannot be done earlier,","* we need complete FIT image in RAM first *\/","if (genimg_get_format((void *) addr) == IMAGE_FORMAT_FIT) {","if (!fit_check_format(fit_hdr)) {","bootstage_error(BOOTSTAGE_ID_IDE_FIT_READ);","puts(\"** Bad FIT image format\\n\");","return 1;"],"label":1}
{"cve":"CVE-2022-31624","code_chunks":["  cn= get_loc_info(thd);","  if (!ci_needs_setup(cn) && cn->query_length)","  {","    cn->log_always= 1;","    log_statement_ex(cn, cn->query_time, thd_get_thread_id(thd),","\t\t     cn->query, cn->query_length, 0, \"QUERY\", 0);","    cn->log_always= 0;"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["char file_name[21];","","if (!level) {","snprintf(file_name, sizeof(file_name), \"\/tmp\/keywords.%d\", getpid());","fp = fopen(file_name, \"w\");","if (!fp)"],"label":1}
{"cve":"CVE-2022-0695","code_chunks":["","\tif (!qo) {","\t\tgoto beach;","\t}","\tif (!(sections = r_list_newf ((RListFree)r_bin_section_free)) || !(fixups = r_list_new ())) {","\t\tgoto beach;","\t}"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  const uint8_t* weight_data = weight->data.uint8;","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","  int32_t* output_data = output->data.i32;","  output_data[0] =","      0;    output_data[0] = input_data[0] + weight_data[0];","  return kTfLiteOk;"],"label":0}
{"cve":"CVE-2022-28068","code_chunks":["static inline ut64 dwarf_read_address(size_t size, const ut8 **buf, const ut8 *buf_end) {","\tut64 result;","\tswitch (size) {","\tcase 2: result = READ16 (*buf); break;","\tcase 4: result = READ32 (*buf); break;","\tcase 8: result = READ64 (*buf); break;","\t\tresult = 0;"],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["    if (mode.is_aead &&","      !EVP_DecryptUpdate(","          cipher_ctx,","          nullptr,","          &result_len,","          (unsigned char*)aad.data(),","          aad.size())) {"],"label":0}
{"cve":"CVE-2021-3772","code_chunks":["\t\t\t\t\tstruct net *net,","\t\t\t\t\tconst struct sctp_endpoint *ep,","\t\t\t\t\tconst struct sctp_association *asoc,","\t\t\t\t\tconst union sctp_subtype type,","\t\t\t\t\tvoid *arg,","\t\t\t\t\tstruct sctp_cmd_seq *commands)","{"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"CVE-2016-9388","code_chunks":["\t\treturn -1;","\t}","","\treturn 0;","}","","static int ras_getint(jas_stream_t *in, int_fast32_t *val)"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      TF_LITE_ENSURE_EQ(context, input1->dims->data[i], input2->dims->data[i]);","    }","","    TF_LITE_ENSURE_STATUS(context->ResizeTensor(","        context, output, TfLiteIntArrayCopy(input1->dims)));","    return kTfLiteOk;","  };"],"label":0}
{"cve":"CVE-2023-5377","code_chunks":["if (ptr->version==0) {","gf_bs_write_u8(bs, ptr->layout.stream_structure);","} else {","gf_bs_write_int(bs, ptr->layout.stream_structure, 4);","gf_bs_write_int(bs, ptr->layout.format_ordering, 4);","gf_bs_write_u8(bs, ptr->layout.base_channel_count);"],"label":0}
{"cve":"CVE-2023-22742","code_chunks":["const char *cmd,","git_smart_subtransport_stream **stream)","{","int auth_methods, error = 0;","ssh_stream *s;","git_credential *cred = NULL;","LIBSSH2_SESSION *session=NULL;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["GetTemporary(context, node, kInputQuantized);","input_quantized->type = input_to_output_weights->type;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2020-9434","code_chunks":["#if OPENSSL_VERSION_NUMBER > 0x10002000L","{\"check_host\",  openssl_x509_check_host},","{\"check_email\", openssl_x509_check_email},","{\"check_ip_asc\", openssl_x509_check_ip_asc},","#endif","{\"pubkey\",      openssl_x509_public_key},","{\"version\",     openssl_x509_version},"],"label":1}
{"cve":"CVE-2022-29226","code_chunks":["{Http::Headers::get().Path.get(), \"\/test?role=bearer\"},","{Http::Headers::get().Host.get(), \"traffic.example.com\"},","{Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},","{Http::Headers::get().Scheme.get(), \"https\"},","{Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},","};"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["","if (!dont_inherit) {","PyEval_MergeCompilerFlags(&cf);","}","","if (strcmp(mode, \"exec\") == 0)"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp8_write_bin(uint8_t *bin, size_t len, const fp8_t a) {","\tif (len != 8 * RLC_FP_BYTES) {","\t\tRLC_THROW(ERR_NO_BUFFER);","\t\treturn;","\t}","\tfp4_write_bin(bin, 4 * RLC_FP_BYTES, a[0]);","\tfp4_write_bin(bin + 4 * RLC_FP_BYTES, 4 * RLC_FP_BYTES, a[1]);"],"label":0}
{"cve":"CVE-2017-12932","code_chunks":["if (!objprops) {","if (Z_TYPE(key) == IS_LONG) {","idx = Z_LVAL(key);","if (UNEXPECTED((old_data = zend_hash_index_find(ht, idx)) != NULL)) {","var_push_dtor(var_hash, old_data);","data = zend_hash_index_update(ht, idx, &d);"],"label":1}
{"cve":"CVE-2020-26164","code_chunks":["        const QByteArray line = m_socket->readLine();","        if (line.length() > 1) {             m_packets.enqueue(line);","        }","    }","","        if (!m_packets.isEmpty()) {","        Q_EMIT readyRead();"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["expr_ty o = (expr_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"CVE-2018-10675","code_chunks":["\t\t\tmode_flags |= MPOL_F_STATIC_NODES;","\t\telse if (!strcmp(flags, \"relative\"))","\t\t\tmode_flags |= MPOL_F_RELATIVE_NODES;","\t\telse","\t\t\tgoto out;","\t}",""],"label":0}
{"cve":"CVE-2023-30187","code_chunks":["\t\t\telse","\t\t\t{","\t\t\t\t\t\t\t\tsJsCommands += command;","\t\t\t\tsJsCommands += \"\\n\";","\t\t\t}","","\t\t\tif (!bIsNoError)"],"label":0}
{"cve":"CVE-2021-32628","code_chunks":["\/* Generate the new entry ID. *\/","streamID id;","if (use_id)","id = *use_id;","else","streamNextID(&s->last_id,&id);"],"label":0}
{"cve":"PYSEC-2020-127","code_chunks":["void Compute(OpKernelContext* ctx) override {","const Tensor& val = ctx->input(0);","auto session_state = ctx->session_state();","OP_REQUIRES(ctx, session_state != nullptr,","errors::FailedPrecondition(","\"GetSessionHandle called on null session state\"));"],"label":0}
{"cve":"CVE-2016-9583","code_chunks":["\t\t\tjpc_pchg_destroy(pchglist->pchgs[pchgno]);","\t\t}","\t\tjas_free(pchglist->pchgs);","\t}","\tjas_free(pchglist);","}",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input_y = GetInput(context, node, kInputTensorY);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","#define TF_LITE_SELECT(type, op)                                           \\","reference_ops::op(GetTensorShape(input_condition),                       \\"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["assertx(isStringType(type(class_name)));","strncpy(frame->class_name,","val(class_name).pstr->data(),","std::min(val(class_name).pstr->size(), strobelight::kClassNameMax));","frame->class_name[strobelight::kClassNameMax - 1] = '\\0';","}",""],"label":1}
{"cve":"CVE-2016-8649","code_chunks":["\t\trexit(-1);","\t}","","\t\/* the rest is in the hands of the initial and the attached process *\/","\trexit(0);","}",""],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["for (exif_cfa=c=0; c < 8; c+=2)","exif_cfa |= fgetc(ifp) * 0x01010101 << c;","}","fseek (ifp, save, SEEK_SET);","}","}"],"label":1}
{"cve":"CVE-2022-43995","code_chunks":["sudo_passwd_verify(struct passwd *pw, char *pass, sudo_auth *auth, struct sudo_conv_callback *callback)","{","char des_pass[9], *epass;","char *pw_epasswd = auth->data;","size_t pw_len;","int matched = 0;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","TfLiteTensor* output0;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output0));","SetTensorToDynamic(output0);","const TfLiteTensor* input;"],"label":0}
{"cve":"CVE-2021-32686","code_chunks":[],"label":1}
{"cve":"CVE-2023-25667","code_chunks":["uint8* p_dst = this_dst + i * width * channel;","uint8* l_dst = last_dst + i * width * channel;","for (int j = 0; j < width; ++j) {","p_dst[j * channel + 0] = l_dst[j * channel + 0];","p_dst[j * channel + 1] = l_dst[j * channel + 1];","p_dst[j * channel + 2] = l_dst[j * channel + 2];"],"label":1}
{"cve":"CVE-2023-1655","code_chunks":["\t}","\tgf_filter_pid_drop_packet(ctx->ipid);","","\tif (ctx->probe_data) {","\t\tgf_free(ctx->probe_data);","\t\tctx->probe_data = NULL;","\t\tctx->probe_data_size = 0;"],"label":0}
{"cve":"CVE-2021-40574","code_chunks":["{","u32 i, j, len;","char *sOK;","char szLineConv[2048];","unsigned short *sptr;","","memset(szLine, 0, sizeof(char)*lineSize);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["}","node->temporaries->data[kBwRowSums] =","op_data->scratch_tensor_index + kBwRowSums;","TfLiteTensor* bw_row_sums = GetTemporary(context, node, kBwRowSums);","bw_row_sums->type = kTfLiteInt32;","bw_row_sums->allocation_type = kTfLiteArenaRwPersistent;","int bw_row_sums_dims[2] = {bw_row_sums_rows, n_bw_cell};"],"label":1}
{"cve":"CVE-2018-8798","code_chunks":["\t\t}","\t\tindexh++;","\t\tlast_line = this_line;","\t}","\treturn (int) (in - org_in);","}",""],"label":0}
{"cve":"PYSEC-2022-104","code_chunks":["bool found_unknown_shapes = false;","const auto& op_info = op_context.op_info;","ConvolutionDimensions dims = OpDimensionsFromInputs(","op_info.inputs(0).shape(), op_info, &found_unknown_shapes);","","int64_t ops = dims.batch * dims.ox * dims.oy * dims.oz * dims.kx * dims.ky;"],"label":1}
{"cve":"CVE-2022-29339","code_chunks":["\t\tret <<= 1;","\t\tret |= gf_bs_read_bit(bs);","\t}","\treturn ret;","}","","GF_EXPORT"],"label":0}
{"cve":"CVE-2017-14642","code_chunks":["    stream.ReadUI32(m_Reserved[2]);","    ","        if (size < AP4_FULL_ATOM_HEADER_SIZE+20) return;","    AP4_UI32 name_size = size-(AP4_FULL_ATOM_HEADER_SIZE+20);","    char* name = new char[name_size+1];","    if (name == NULL) return;","    stream.Read(name, name_size);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","const TfLiteTensor* bw_input_gate_bias =","GetOptionalInputTensor(context, node, kBwInputGateBiasTensor);","const TfLiteTensor* bw_forget_gate_bias =","GetInput(context, node, kBwForgetGateBiasTensor);"],"label":1}
{"cve":"CVE-2022-3256","code_chunks":["continue;","}","if (buflist_getfile(jmp->fmark.fnum, jmp->fmark.mark.lnum,","0, FALSE) == FAIL)","return (pos_T *)NULL;","curwin->w_cursor = jmp->fmark.mark;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        if (res != 0) goto failed;","        Py_CLEAR(tmp);","    }","    if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {","        return 1;","    }","    if (tmp == NULL) {"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["return Py_None;","}","","result = PyType_GenericNew(alias_type, NULL, NULL);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tbn_t t;","","\tbn_null(t);","","\t\/* Check the radix. *\/","\tif (radix < 2 || radix > 64) {","\t\tRLC_THROW(ERR_NO_VALID);"],"label":0}
{"cve":"CVE-2023-39354","code_chunks":["if (!context)","return FALSE;","","BYTE* rle = context->Planes;","WINPR_ASSERT(rle);","","for (size_t i = 0; i < 4; i++)"],"label":1}
{"cve":"CVE-2023-4322","code_chunks":["}","if (isValidCall) {","ut8 buf[4] = {0};","r_io_read_at (core->io, op.jump, buf, 4);","isValidCall = memcmp (buf, \"\\x00\\x00\\x00\\x00\", 4);","}"],"label":1}
{"cve":"CVE-2021-4069","code_chunks":["\treturn NULL;","","    for (p = result; *p; )","    {","\tif (STRNCMP(p, \"<sfile>\", 7) != 0)","\t    ++p;","\telse"],"label":0}
{"cve":"CVE-2020-15121","code_chunks":["return true;","}","if (errno == EINPROGRESS) {","struct timeval tv;","tv.tv_sec = timeout;","tv.tv_usec = 0;"],"label":1}
{"cve":"CVE-2017-16909","code_chunks":["int row, col, i, j, sh = 0, pred[2], nonz[2];","","pana_bits(0);","for (row = 0; row < raw_height; row++)","{","#ifdef LIBRAW_LIBRARY_BUILD","checkCancel();"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_set_bit(bn_t a, int bit, int value) {","int d;","","if (bit < 0) {"],"label":1}
{"cve":"CVE-2022-0523","code_chunks":["static pyc_object *get_set_object(RBuffer *buffer) {","pyc_object *ret = NULL;","bool error = false;","ut32 n = get_ut32 (buffer, &error);","if (n > ST32_MAX) {"],"label":1}
{"cve":"CVE-2021-26926","code_chunks":["++i) {","if (jas_image_cmptdtype(dec->image, i) !=","JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {","jas_eprintf(\"warning: component data type mismatch (BPCC)\\n\");","}","}","} else {"],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[] = {0, 0};","if(width > 2064) return 0.f;","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["                                                &scaling_factors));","    scaling_factors->type = kTfLiteFloat32;","    scaling_factors->allocation_type = kTfLiteArenaRw;","    int scaling_dims[1] = {batch_size};","    if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {","      TfLiteIntArray* scaling_factors_size = TfLiteIntArrayCreate(1);","      scaling_factors_size->data[0] = batch_size;"],"label":0}
{"cve":"CVE-2020-35538","code_chunks":["","  \/* Loop for each group of output pixels *\/","  for (col = cinfo->output_width >> 1; col > 0; col--) {","    \/* Do the chroma part of the calculation *\/","    cb = GETJSAMPLE(*inptr1++);","    cr = GETJSAMPLE(*inptr2++);","    cred = Crrtab[cr];"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* dims = GetInput(context, node, kDimsTensor);","TF_LITE_ENSURE_OK(context, ResizeOutput(context, dims, output));","}","#define TF_LITE_FILL(data_type)                                               \\"],"label":1}
{"cve":"CVE-2023-51698","code_chunks":["\t\treturn FALSE;","","\tif (!comics_check_decompress_support (mime_type, comics_document, error)) {","\t\tg_free (mime_type);","\t\treturn FALSE;","\t}",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["guidRemoteFx = TRUE;","settings->RemoteFxCodecId = codecId;","Stream_Read_UINT32(s, rfxPropsLength); \/* length (4 bytes) *\/","Stream_Read_UINT32(s, captureFlags);   \/* captureFlags (4 bytes) *\/","Stream_Read_UINT32(s, rfxCapsLength);  \/* capsLength (4 bytes) *\/","settings->RemoteFxCaptureFlags = captureFlags;"],"label":1}
{"cve":"CVE-2021-41099","code_chunks":["","len = sdslen(s);","sh = (char*)s-sdsHdrSize(oldtype);","newlen = (len+addlen);","assert(newlen > len);   \/* Catch size_t overflow *\/","if (newlen < SDS_MAX_PREALLOC)","newlen *= 2;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2022-75","code_chunks":["        GetUnknownOutputShape(node, output_port);","    InferenceContext* ctx = GetContext(node);","    if (ctx == nullptr) {","      return errors::InvalidArgument(\"SetUnknownShape: Missing context\");","    }","    if (output_port < 0 || output_port >= ctx->num_outputs()) {","      return errors::InvalidArgument("],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["loadbuf = buf;","\/* Kernel images get decompressed later in bootm_load_os(). *\/","if (!fit_image_get_comp(fit, noffset, &comp) &&","comp != IH_COMP_NONE &&","!(image_type == IH_TYPE_KERNEL ||","image_type == IH_TYPE_KERNEL_NOLOAD ||"],"label":1}
{"cve":"CVE-2023-25665","code_chunks":["OP_REQUIRES(ctx,","TensorShapeUtils::IsVector(a_values_t->shape()) &&","TensorShapeUtils::IsVector(b_values_t->shape()),","errors::InvalidArgument(","\"Inputs a_values and b_values should be vectors \"","\"but received shapes: \","],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["} else if (result == CUDA_ERROR_NOT_FOUND) {","return tsl::Status(","port::error::NOT_FOUND,","absl::StrFormat(\"not a device pointer %p; %s\",","reinterpret_cast<void*>(dptr), ToString(result)));","}"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["Stream_Read_UINT16(s, bitmapData->height); \/* height (2 bytes) *\/","Stream_Read_UINT32(s, new_len);            \/* length (4 bytes) *\/","","if (Stream_GetRemainingLength(s) < new_len)","goto fail;","","new_data = (BYTE*)realloc(bitmapData->data, new_len);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\t\t\tif (!rdp_print_control_capability_set(&sub))","\t\t\t\t\treturn FALSE;","","\t\t\t\tbreak;","","\t\t\t\tif (!rdp_print_window_activation_capability_set(&sub))","\t\t\t\t\treturn FALSE;"],"label":0}
{"cve":"CVE-2020-35535","code_chunks":["&tag_offset, &tag_id, &tag_type, &tag_dataoffset,","&tag_datalen, &tag_dataunitlen) == 0) {","if (tag_id == 0x0000) {","SRF2Key = sget4(srf_buf + tag_dataoffset);","} else if (tag_id == 0x0001) {","RawDataKey = sget4(srf_buf + tag_dataoffset);"],"label":1}
{"cve":"CVE-2021-40576","code_chunks":["u32 GetHintFormat(GF_TrackBox *trak)","{","GF_HintMediaHeaderBox *hmhd = (GF_HintMediaHeaderBox *)trak->Media->information->InfoHeader;","if (!hmhd || (hmhd->type != GF_ISOM_BOX_TYPE_HMHD))","return 0;","","if (!hmhd || !hmhd->subType) {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* lookup = GetInput(context, node, 0);","const TfLiteTensor* value = GetInput(context, node, 1);","TfLiteTensor* output = GetOutput(context, node, 0);","switch (value->type) {","return EvalSimple(context, node, lookup, value, output);","if (output->type == kTfLiteFloat32) {"],"label":1}
{"cve":"PYSEC-2021-259","code_chunks":["if (DataTypeCanUseMemcpy(component.dtype())) {","const TensorBuffer* buffer = DMAHelper::buffer(&component);","memcpy(position, buffer->data(), buffer->size());","metadata->set_tensor_size_bytes(buffer->size());","} else {","TensorProto& proto = non_memcpy_components[non_memcpy_component_index++];"],"label":1}
{"cve":"CVE-2021-41136","code_chunks":["goto st26;","if ( ++p == pe )","goto _test_eof26;","#line 618 \"ext\/puma_http11\/http11_parser.c\"","switch( (*p) ) {","case 32: goto tr44;","case 34: goto st0;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","output->type = input->type;","return context->ResizeTensor(context, output,"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["RLC_THROW(ERR_CAUGHT);","}","RLC_FINALLY {","for (i = 0; i < (1 << (EP_WIDTH - 1)); i++) {","ed_free(t[i]);","}","ed_free(q);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    }","    if (isinstance) {","        expr_ty value;","        int conversion;","        expr_ty format_spec;","","        if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {"],"label":0}
{"cve":"CVE-2023-1801","code_chunks":["","\/* There's no good way to detect an error in strftime since a return","* value of 0 isn't necessarily failure; if orig_name is an empty","* string, the formatted string will be empty.","*","* However, the C90 standard says that, if there *is* a"],"label":0}
{"cve":"CVE-2022-32545","code_chunks":["method;","","if (*option == '+')","break;","i++;","if (i == (ssize_t) argc)"],"label":1}
{"cve":"CVE-2020-15192","code_chunks":["    auto output =","        TFE_ContextHasFunction(tensorflow::InputTFE_Context(ctx), name);","    tensorflow::MaybeRaiseRegisteredFromTFStatus(status.get());","    return output;","  });","  m.def(\"TFE_ContextEnableRunMetadata\", [](py::handle& ctx) {","    TFE_ContextEnableRunMetadata(tensorflow::InputTFE_Context(ctx));"],"label":0}
{"cve":"CVE-2022-0496","code_chunks":["if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[1]][0], this->points[lines[k].idx[1]][1])) {","current_line = k;","current_point = 1;","goto found_next_line_in_open_path;","}","}"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["int fd;","FILE *fp;","struct attr_stack *res;","char buf[2048];","int lineno = 0;","","if (flags & READ_ATTR_NOFOLLOW)"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["                    GetOutputSafe(context, node, kOutputTensor, &output));","","  reference_ops::ReverseSequence<T, TS>(","      seq_lengths, seq_dim, batch_dim, GetTensorShape(input),","      GetTensorData<T>(input), GetTensorShape(output),","      GetTensorData<T>(output));",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["zero_points_size));","}","node->temporaries->data[5] = op_data->scratch_tensor_index + 5;","TfLiteTensor* row_sums = GetTemporary(context, node, \/*index=*\/5);","row_sums->type = kTfLiteInt32;","row_sums->allocation_type = kTfLiteArenaRwPersistent;","int row_sums_dims[2] = {2, num_units};"],"label":1}
{"cve":"CVE-2018-19044","code_chunks":["size_t length;","gchar *ret = NULL;","","f = fopen(filepath, \"rb\");","if (f) {","fseek(f, 0, SEEK_END);","length = (size_t)ftell(f);"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["","\/* NOTE: free'd when events are cleared during closure of mdi *\/","text = malloc(tmp_length + 1);","memcpy(text, event_data, tmp_length);","text[tmp_length] = '\\0';","midi_setup_copyright(mdi, text);"],"label":1}
{"cve":"CVE-2021-3770","code_chunks":["#endif","#ifdef FEAT_VARTABS","vim_free(curbuf->b_p_vsts_array);","tabstop_set(curbuf->b_p_vsts, &curbuf->b_p_vsts_array);","vim_free(curbuf->b_p_vts_array);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["return GetInput(context, node, index);","}"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"PYSEC-2022-101","code_chunks":["const auto& node_t = node->def().experimental_type();","if (node_t.type_id() != TFT_UNSET) {","int ix = input_idx[i];","DCHECK(ix < node_t.args_size())","<< \"input \" << i << \" should have an output \" << ix","<< \" but instead only has \" << node_t.args_size()"],"label":1}
{"cve":"CVE-2021-32786","code_chunks":["static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,","const char *url, apr_byte_t restrict_to_host, char **err_str,","char **err_desc) {","apr_uri_t uri;","const char *c_host = NULL;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["int res;","tmp = _PyObject_GetAttrId(obj, &PyId_lineno);","if (tmp == NULL) goto failed;","res = obj2ast_int(tmp, &lineno, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2019-19922","code_chunks":[],"label":1}
{"cve":"CVE-2021-4069","code_chunks":["regmatch.rm_ic = p_ic;","p = ml_get_curline();","if (vim_regexec(&regmatch, p, (colnr_T)0))","curwin->w_cursor.col = (colnr_T)(regmatch.startp[0] - p);","else","emsg(_(e_nomatch));"],"label":1}
{"cve":"CVE-2018-20175","code_chunks":["\t\t\t\t\tcollen--;","\t\t\t\t}","\t\t\t\twhile (indexw < width && replen > 0)","\t\t\t\t{","\t\t\t\t\tx = last_line[indexw * 4] + color;","\t\t\t\t\t*out = x;","\t\t\t\t\tout += 4;"],"label":0}
{"cve":"CVE-2016-6912","code_chunks":["if (out == NULL) {","return NULL;","}","if (_gdImageWebpCtx(im, out, -1)) {","rv = NULL;","} else {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2021-636","code_chunks":["","string two_file, three_file;","TF_ASSERT_OK(CreateTempFileFloat(env, 2.0f, 1000, &two_file));","TF_ASSERT_OK(CreateTempFileFloat(env, 3.0f, 1000, &three_file));","auto node1 = ops::ImmutableConst(root, DT_FLOAT, kFileTensorShape, two_file);","auto node2 ="],"label":0}
{"cve":"CVE-2020-11097","code_chunks":["{","return ntlm_av_pair_check_data(pAvPair, cbAvPair, 0);","}","","static NTLM_AV_PAIR* ntlm_av_pair_next(NTLM_AV_PAIR* pAvPair, size_t* pcbAvPair)","{"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int l, i, n;","int8_t naf[RLC_FP_BITS + 1];","ep2_t t[1 << (EP_WIDTH - 2)];","","RLC_TRY {","\/* Prepare the precomputation table. *\/"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["node->temporaries->data[kScratchBuffer] =","scratch_tensor_index + kScratchBuffer;","","TfLiteTensor* scratch_buffer = GetTemporary(context, node, kScratchBuffer);","scratch_buffer->type = input->type;","scratch_buffer->allocation_type = kTfLiteArenaRw;",""],"label":1}
{"cve":"CVE-2018-14353","code_chunks":["","*pt++ = '\"';","\/* save room for trailing quote-char *\/","dlen -= 2;","","for (; *s && dlen; s++)"],"label":1}
{"cve":"PYSEC-2022-49","code_chunks":["ConvolutionDimensions dims = OpDimensionsFromInputs(","op_info.inputs(0).shape(), op_info, &found_unknown_shapes);","int per_output_ops = dims.kx * dims.ky == 1 ? 1 : dims.kx * dims.ky - 1;","int64_t ops = dims.batch * dims.ox * dims.oy * dims.oz * per_output_ops;","node_costs->num_compute_ops = ops;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input2 = GetInput(context, node, 1);","TfLiteTensor* output = GetOutput(context, node, 0);","","TF_LITE_ENSURE_EQ(context, input1->dims->size, input2->dims->size);","for (int i = 0; i < input1->dims->size; ++i) {"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["for (;;) {","const char *next = NULL;","int tok = XmlPrologTok(parser->m_encoding, s, end, &next);","#if defined(XML_DTD) || XML_GE == 1","if (! accountingDiffTolerated(parser, tok, s, next, __LINE__,","XML_ACCOUNT_DIRECT)) {","accountingOnAbort(parser);"],"label":0}
{"cve":"CVE-2017-9949","code_chunks":["grub_ext2_read_inode (diro->data, diro->ino, &diro->inode);","if (grub_errno)","return 0;","}","","\/* Search the file.  *\/","if (hook)"],"label":0}
{"cve":"PYSEC-2021-220","code_chunks":["    OP_REQUIRES_OK(context, context->forward_input_or_allocate_output(","                                {0}, 0, alloc_shape, &y));","","    Tensor* batch_mean = nullptr;","    OP_REQUIRES_OK(context, context->forward_input_or_allocate_output(","                                {3}, 1, scale.shape(), &batch_mean));","    Tensor* batch_var = nullptr;"],"label":0}
{"cve":"CVE-2020-5215","code_chunks":["const double as_double = PyFloat_AS_DOUBLE(v);","*out = static_cast<T>(as_double);","if (TF_PREDICT_FALSE(CheckForOverflow<T>(as_double, out))) {","return ErrorOutOfRangeDouble;","}","return nullptr;"],"label":0}
{"cve":"CVE-2021-31257","code_chunks":["\t\tstreamType = 0;","\t\tesd = gf_isom_get_esd(file, i+1, 1);","\t\tif (esd && esd->decoderConfig) {","\t\t\tstreamType = esd->decoderConfig->streamType;","\t\t\tif (!prev_ocr) {","\t\t\t\tprev_ocr = esd->OCRESID;","\t\t\t\tif (!esd->OCRESID) prev_ocr = esd->ESID;"],"label":0}
{"cve":"CVE-2018-20406","code_chunks":["{","size_t i;","size_t perturb;","size_t mask = self->mt_mask;","PyMemoEntry *table = self->mt_table;","PyMemoEntry *entry;","Py_hash_t hash = (Py_hash_t)key >> 3;"],"label":0}
{"cve":"CVE-2022-3510","code_chunks":["for (int i = 0; i < n; i++) {","const upb_EnumValueDef* ev = upb_EnumDef_Value(e, i);","char* name = strdup(upb_EnumValueDef_Name(ev));","int32_t value = upb_EnumValueDef_Number(ev);","if (name[0] < 'A' || name[0] > 'Z') {","if (name[0] >= 'a' && name[0] <= 'z') {"],"label":0}
{"cve":"PYSEC-2021-847","code_chunks":["TensorShape shape_in = logits_in.shape();","","BCast bcast(BCast::FromShape(logits_in.shape()),","BCast::FromShape(labels_in.shape()));","if (!logits_in.IsSameSize(labels_in)) {","OP_REQUIRES(context, bcast.IsValid(),","errors::InvalidArgument("],"label":1}
{"cve":"CVE-2020-11735","code_chunks":["return MEMORY_E;","}","","err = wc_ecc_mulmod_ex(k, point, result, curve->Af, curve->prime, 1,","private_key->heap);","if (err == MP_OKAY) {","x = mp_unsigned_bin_size(curve->prime);"],"label":1}
{"cve":"CVE-2018-19044","code_chunks":["","\tflags = SC_ISSCRIPT;","","\t\/* We have the final file. Check if root is executing it, or it is set uid\/gid root. *\/","\tif (is_executable(&file_buf, script->uid, script->gid)) {","\t\tflags |= SC_EXECUTABLE;","\t\tif (script->uid == 0 || script->gid == 0 ||"],"label":0}
{"cve":"CVE-2021-32439","code_chunks":["u64 *DTSs, curDTS;","Bool inserted;","GF_SttsEntry *ent;","","GF_TimeToSampleBox *stts = stbl->TimeToSample;","","stts->r_FirstSampleInEntry = 0;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2021-32139","code_chunks":["GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;","","ISOM_DECREASE_SIZE(ptr, 51);","","e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);","if (e) return e;"],"label":1}
{"cve":"CVE-2019-13218","code_chunks":["      int n = f->scan[i].bytes_done;","      int m = f->scan[i].bytes_left;","      if (m > data_len - n) m = data_len - n;","            crc = f->scan[i].crc_so_far;","      for (j=0; j < m; ++j)","         crc = crc32_update(crc, data[n+j]);","      f->scan[i].bytes_left -= m;"],"label":0}
{"cve":"CVE-2022-37032","code_chunks":["u_char *pnt;","int ret;","","\/* Fetch pointer. *\/","pnt = stream_pnt (peer->ibuf);",""],"label":0}
{"cve":"CVE-2021-29608","code_chunks":["        return errors::InvalidArgument(","            \"Cannot handle VALUE_ROWIDS in first dimension.\");","        *result = first_partition_tensor.shape().dim_size(0) - 1;","        return Status::OK();","        return errors::InvalidArgument(","            \"Cannot handle type \",","            RowPartitionTypeToString(first_partition_type));"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/unittest_cert.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/unittest_key.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/ca_cert.pem\"","exact: \"example.com\"",")EOF\";","","TestUtilOptions test_options(client_ctx_yaml, server_ctx_yaml, false, GetParam());"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["goto endEntityValue;","\/* This default case should be unnecessary -- all the tokens","* that XmlEntityValueTok() can return have their own explicit","* cases -- but should be retained for safety.  We do however","* exclude it from the coverage statistics.","*"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void ep_map(ep_t p, const uint8_t *msg, size_t len) {","ep_map_dst(p, msg, len, (const uint8_t *)\"RELIC\", 5);","}"],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["\/* Copy the integer value to the output buffer *\/","#if PCRE2_CODE_UNIT_WIDTH == 16 || PCRE2_CODE_UNIT_WIDTH == 32","OP2(SLJIT_ASHR, SLJIT_S1, 0, SLJIT_S1, 0, SLJIT_IMM, UCHAR_SHIFT);","#endif","","SLJIT_ASSERT(sizeof(PCRE2_SIZE) == 4 || sizeof(PCRE2_SIZE) == 8);"],"label":1}
{"cve":"CVE-2022-1451","code_chunks":["\t\tattr->type = R_BIN_JAVA_ATTR_TYPE_CONST_VALUE_ATTR;","\t\tif (offset + 4 < sz) {","\t\t\tattr->info.constant_value_attr.constantvalue_idx = R_BIN_JAVA_USHORT (buffer, offset);","\t\t}","\t\toffset += 2;","\t\tattr->size = offset;","\t}"],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["","if (common->capture_last_ptr != 0 && !capture_last_found)","{","shared_srcw[2] = common->capture_last_ptr;","shared_count = 3;","capture_last_found = TRUE;"],"label":1}
{"cve":"CVE-2018-12562","code_chunks":["static inline bool isMountable(const RemoteFsDevice::Details &d)","{","return RemoteFsDevice::constSshfsProtocol==d.url.scheme() ||","RemoteFsDevice::constSambaProtocol==d.url.scheme() || RemoteFsDevice::constSambaAvahiProtocol==d.url.scheme();","}","","QList<Device *> RemoteFsDevice::loadAll(MusicLibraryModel *m)"],"label":1}
{"cve":"CVE-2017-12595","code_chunks":["    result.replaceStreamData(data, newNull(), newNull());","    return result;","}","","QPDFObjectHandle","QPDFObjectHandle::newStream(QPDF* qpdf, std::string const& data)","{"],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["\t\t\t\tif (buff32){","                    hFile->Read(buff32, imagesize,1,GetDIB(),GetDIBLimit()); ","#if CXIMAGE_SUPPORT_ALPHA","\t\t\t\t\tif (dwCompression == BI_RGB){","\t\t\t\t\t\tAlphaCreate();","\t\t\t\t\t\tif (AlphaIsValid()){","\t\t\t\t\t\t\tbool bAlphaOk = false;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    TF_LITE_ENSURE_OK(context, ResizeOutput(context, node));","  }","","              if (output->type == kTfLiteString) {","    auto bytes_required = input->bytes;","    TfLiteTensorRealloc(bytes_required, output);","    output->bytes = bytes_required;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["static void update_read_synchronize(rdpUpdate* update, wStream* s)","{","WINPR_UNUSED(update);","Stream_Seek_UINT16(s); \/* pad2Octets (2 bytes) *\/"],"label":1}
{"cve":"CVE-2017-14175","code_chunks":["static Image *ReadXBMImage(const ImageInfo *image_info,ExceptionInfo *exception)","{","char","buffer[MagickPathExtent],","name[MagickPathExtent];"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["                    GetInputSafe(context, node, kInputTensorScoreThreshold,","                                 &input_score_threshold));","  const float score_threshold = *GetTensorData<float>(input_score_threshold);","","  TfLiteTensor* output_selected_indices = nullptr;","  TfLiteTensor* output_selected_scores = nullptr;","  TfLiteTensor* output_num_selected_indices = nullptr;"],"label":0}
{"cve":"CVE-2019-13391","code_chunks":["            {","               Cr->opacity=Ar->opacity*cos(2.0*MagickPI*(Ai->opacity-0.5));","               Ci->opacity=Ar->opacity*sin(2.0*MagickPI*(Ai->opacity-0.5));","            }","          break;","        }","        {"],"label":0}
{"cve":"PYSEC-2020-333","code_chunks":["\"Source format must of length 4 or 5, received \"","\"src_format = \",","src_format)));","OP_REQUIRES(","context, dst_format.size() == 4 || dst_format.size() == 5,","errors::InvalidArgument(strings::StrCat("],"label":1}
{"cve":"CVE-2018-14055","code_chunks":["    bool bReturn = false;","    IRCSOCKMODULECALL(OnRaw(sLine), &bReturn);","    if (bReturn) return;","","    CMessage Message(sLine);","    Message.SetNetwork(m_pNetwork);",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));"],"label":0}
{"cve":"CVE-2021-45985","code_chunks":["ci->func -= delta;  \/* restore 'func' (if vararg) *\/","for (i = 0; i < narg1; i++)  \/* move down function and arguments *\/","setobjs2s(L, ci->func + i, func + i);","checkstackGC(L, fsize);","func = ci->func;  \/* moved-down function *\/","for (; narg1 <= nfixparams; narg1++)","setnilvalue(s2v(func + narg1));  \/* complete missing arguments *\/"],"label":1}
{"cve":"CVE-2016-5355","code_chunks":["","} while (strcmp(line, \"OFFSET 0001-0203\") != 0);","","num_items_scanned = sscanf(line+64, \"LEN=%9d\", &pkt_len);","if (num_items_scanned != 1) {","*err = WTAP_ERR_BAD_FILE;","*err_info = g_strdup(\"toshiba: OFFSET line doesn't have valid LEN item\");"],"label":1}
{"cve":"CVE-2021-32136","code_chunks":["\t\tu32 width, height;","\t\ts32 par_n, par_d;","","\t\tif (ar->type !=GF_HEVC_NALU_SEQ_PARAM) continue;","\t\tfor (idx=0; idx<gf_list_count(ar->nalus); idx++) {","\t\t\tGF_Err e;","\t\t\tGF_NALUFFParam *sps = gf_list_get(ar->nalus, idx);"],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["assertx(isStringType(type(class_name)));","strncpy(frame->class_name,","val(class_name).pstr->data(),","std::min(val(class_name).pstr->size(), strobelight::kClassNameMax));","frame->class_name[strobelight::kClassNameMax - 1] = '\\0';","}",""],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["return 1;","}","if (tmp == NULL || tmp == Py_None) {","Py_CLEAR(tmp);","arg = NULL;","}"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  const TfLiteTensor* axis;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxisTensor, &axis));","  TF_LITE_ENSURE_EQ(context, NumDimensions(axis), 1);","  TF_LITE_ENSURE(context, NumDimensions(input) >= NumElements(axis));",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","TfLiteTensor* hits;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &hits));","const TfLiteTensor* lookup;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));"],"label":0}
{"cve":"CVE-2018-10539","code_chunks":["break;","}","else {                      int bytes_to_copy = (chunk_header.ckSize + 7) & ~7L;","char *buff = malloc (bytes_to_copy);","","if (debug_logging_mode)","error_line (\"extra unknown chunk \\\"%c%c%c%c\\\" of %d bytes\","],"label":1}
{"cve":"CVE-2022-35979","code_chunks":["void Compute(OpKernelContext* context) override {","const Tensor& input = context->input(0);","const float min_input = context->input(1).flat<float>()(0);","const float max_input = context->input(2).flat<float>()(0);","Tensor* output = nullptr;","OP_REQUIRES_OK(context,"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["unsigned kodak, entries, tag, type, len, save, c;","double expo,ape;","","kodak = !strncmp(make,\"EASTMAN\",7) && tiff_nifds < 3;","entries = get2();","if(!strncmp(make,\"Hasselblad\",10) && (tiff_nifds > 3) && (entries > 512)) return;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  for (int i = 0; i < data->num; ++i) {","    TfLiteIntArray* copied_output_shape = TfLiteIntArrayCopy(output_shape);","    TfLiteTensor* output;","    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &output));","    TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);","            TF_LITE_ENSURE_EQ(context, input->params.zero_point,","                      output->params.zero_point);"],"label":0}
{"cve":"CVE-2020-5238","code_chunks":["}","if (yych <= 0xEC) {","if (yych <= 0xC1) {","if (yych <= '\\r')","goto yy25;","if (yych <= '\\\\')"],"label":0}
{"cve":"CVE-2015-8631","code_chunks":["static gprinc_ret               ret;","char                            *prime_arg, *funcname;","gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER;","gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER;","OM_uint32                       minor_stat;","kadm5_server_handle_t           handle;"],"label":0}
{"cve":"CVE-2016-10009","code_chunks":["id->key = k;","id->provider = xstrdup(provider);","id->comment = xstrdup(provider); \/* XXX *\/","id->death = death;","id->confirm = confirm;","TAILQ_INSERT_TAIL(&tab->idlist, id, next);"],"label":1}
{"cve":"CVE-2022-32545","code_chunks":["  entry->magick=(IsImageFormatHandler *) IsEMF;","  entry->blob_support=MagickFalse;","  entry->magick_module=ConstantString(\"EMF\");","  (void) RegisterMagickInfo(entry);","  entry=SetMagickInfo(\"WMF\");","#if defined(MAGICKCORE_WINGDI32_DELEGATE)","  entry->decoder=ReadEMFImage;"],"label":0}
{"cve":"CVE-2022-0476","code_chunks":["\"SizeOfHeader SizeOfEntry NumberOfEntries\", 0);","","offset = entry->location.rva + sizeof (thread_info_list);","for (i = 0; i < thread_info_list.number_of_entries; i++) {","struct minidump_thread_info *info = R_NEW (struct minidump_thread_info);","if (!info) {","break;"],"label":1}
{"cve":"CVE-2018-12561","code_chunks":["load();","mount();","icn=MonoIcon::icon(details.isLocalFile()","? FontAwesome::foldero",": constSshfsProtocol==details.url.scheme()","? FontAwesome::linux_os"],"label":1}
{"cve":"CVE-2022-2279","code_chunks":["        } else {","            printf(\"PalmDoc\\n\");","        }","    } else {","        printf(\"Mobi version: %zu\", mobi_get_fileversion(m));","        if (mobi_is_hybrid(m)) {","            size_t version = mobi_get_fileversion(m->next);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_TYPES_EQ(context, top_k->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, NumElements(top_k), 1);","const int32 k = *GetTensorData<int32_t>(top_k);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const int num_dimensions = NumDimensions(input);"],"label":1}
{"cve":"CVE-2022-0156","code_chunks":["\t    screen_fill(msg_row, msg_row + 1, 0, msg_col + 1, ' ', ' ', 0);","\t    screen_fill(msg_row + 1, (int)Rows, 0, (int)Columns, ' ', ' ', 0);","\t}","\telse","#endif","\t{","\t    screen_fill(msg_row, msg_row + 1, msg_col, (int)Columns,"],"label":0}
{"cve":"CVE-2019-13225","code_chunks":["    }","    break;","","    {","      int ret;","      int state1;","      BagNode* en = BAG_(node);"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["                sysex_store = malloc(sizeof(uint8_t) * sysex_len);","                memcpy(sysex_store, event_data, sysex_len);","","                if (sysex_store[sysex_len - 1] == 0xF7) {","                    uint8_t rolandsysexid[] = { 0x41, 0x10, 0x42, 0x12 };","                    if (memcmp(rolandsysexid, sysex_store, 4) == 0) {","                        \/* For Roland Sysex Messages *\/"],"label":0}
{"cve":"CVE-2019-15946","code_chunks":["","\/* Strip off padding zero *\/","if ((entry->flags & SC_ASN1_UNSIGNED)","&& obj[0] == 0x00 && objlen > 1) {","objlen--;","obj++;","}"],"label":1}
{"cve":"CVE-2019-15139","code_chunks":["    status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,","      image->rows);","    if (status == MagickFalse)","      break;","  }","  pixels=(unsigned char *) RelinquishMagickMemory(pixels);","  (void) CloseBlob(image);"],"label":0}
{"cve":"CVE-2021-32434","code_chunks":["\tif (!p_voice->last_sym) {","\t\terror(1, s, txt_no_note);","\t\treturn;","\t}","\tp_voice->last_sym->sflags |= S_BEAM_END;","\tvoice2 = s->u.v_over.voice;","\tp_voice2 = &voice_tb[voice2];"],"label":0}
{"cve":"CVE-2023-44488","code_chunks":["  vp9_set_rc_buffer_sizes(cpi);","","    vp9_new_framerate(cpi, cpi->framerate);","","    rc->worst_quality = cpi->oxcf.worst_allowed_q;","  rc->best_quality = cpi->oxcf.best_allowed_q;",""],"label":0}
{"cve":"CVE-2019-13311","code_chunks":["WandPrivate MagickBooleanType CLIListOperatorImages(MagickCLI *cli_wand,","const char *option,const char *arg1n,const char *arg2n)","{","const char    \/* percent escaped versions of the args *\/","*arg1,","*arg2;"],"label":0}
{"cve":"CVE-2019-15226","code_chunks":["    addSize(added_size);","    key.clear();","    value.clear();","  } else {","    insertByKey(std::move(key), std::move(value));","  }","}"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_frame_acknowledge_capability_set(wStream* s, UINT16 length,","rdpSettings* settings)","{","if (length < 8)","return FALSE;","","if (settings->ServerMode)"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp48_read_bin(fp48_t a, const uint8_t *bin, size_t len) {","if (len != 32 * RLC_FP_BYTES && len != 48 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["            _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_CORUPT, \"(missing track header)\", 0);","            goto _end;","        }","        midi_data += 4;","        midi_size -= 4;","","        \/* track size *\/"],"label":0}
{"cve":"CVE-2019-19922","code_chunks":["\t\t * We only want to steal up to the prescribed amount of","\t\t * runnable load.","\t\t *\/","\t\tif (env->imbalance <= 0)","\t\t\tbreak;","","\t\tcontinue;"],"label":0}
{"cve":"CVE-2021-3996","code_chunks":["\t\t\tbreak;","\t\t\tflags |= FL_ASCII;","\t\t\tbreak;","\t\t\tflags |= FL_BYTES;","\t\t\tbreak;","\t\t\tflags |= FL_NOCACHE;","\t\t\tbreak;"],"label":0}
{"cve":"CVE-2021-3995","code_chunks":["struct libmnt_ns *ns_old;","const char *type = mnt_fs_get_fstype(cxt->fs);","const char *optstr;","uid_t uid, entry_uid;","","*errsv = 0;",""],"label":0}
{"cve":"CVE-2021-37491","code_chunks":["nValue += recipient.nAmount;","","if (recipient.fSubtractFeeFromAmount)","nSubtractFeeFromAmount++;","}","if (vecSend.empty())"],"label":0}
{"cve":"PYSEC-2020-258","code_chunks":["if (TF_PREDICT_FALSE(sizeof(T) < sizeof(double) && std::isinf(*out) &&","std::isfinite(as_double))) {","return ErrorOutOfRangeDouble;","}"],"label":1}
{"cve":"PYSEC-2020-332","code_chunks":["QInt32() {}"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["","    break;","","","    { if (!strcmp(s,\"true\")) {","                  (yyval.i) = 1;","                } else if (!strcmp(s,\"false\")) {"],"label":0}
{"cve":"PYSEC-2020-272","code_chunks":["dlm_tensor->dl_tensor.ctx = GetDlContext(h, status);","int ndim = tensor->dims();","dlm_tensor->dl_tensor.ndim = ndim;","dlm_tensor->dl_tensor.data = TFE_TensorHandleDevicePointer(h, status);","dlm_tensor->dl_tensor.dtype = GetDlDataType(data_type, status);",""],"label":1}
{"cve":"CVE-2021-23521","code_chunks":["#if JUCE_WINDOWS","auto entryPath = zei->entry.filename;","#else","auto entryPath = zei->entry.filename.replaceCharacter ('\\\\', '\/');","#endif",""],"label":0}
{"cve":"CVE-2021-4173","code_chunks":["    ufunc->uf_script_ctx = current_sctx;","    ufunc->uf_script_ctx_version = current_sctx.sc_version;","    ufunc->uf_script_ctx.sc_lnum += sourcing_lnum_top;","    set_function_type(ufunc);","","    function_using_block_scopes(ufunc, evalarg->eval_cstack);",""],"label":0}
{"cve":"CVE-2023-38703","code_chunks":[" * This callback is called by SRTP transport when incoming rtp is received."," * Originally this is send_rtp() op."," *\/","static pj_status_t dtls_on_recv_rtp( pjmedia_transport *tp,","                                     const void *pkt,","                                     pj_size_t size)","{"],"label":0}
{"cve":"CVE-2019-15163","code_chunks":["\t *","\t * XXX - hopefully, this returns errors such as ERROR_LOGON_FAILURE,","\t * which merely indicates that the user name or password is","\t * incorrect, not whether it's the user name or the password","\t * that's incorrect, so a client that's trying to brute-force","\t * accounts doesn't know whether it's the user name or the","\t * password that's incorrect, so it doesn't know whether to"],"label":0}
{"cve":"CVE-2022-1444","code_chunks":["r_return_val_if_fail (tree && data && cmp, false);","bool inserted = false;","","if (tree->root == NULL) {"],"label":1}
{"cve":"CVE-2023-0302","code_chunks":["buf = r_uleb128 (buf, buf_end - buf, &value->uconstant, NULL);","break;","value->kind = DW_AT_KIND_STRING;","value->string.content = *buf ? r_str_ndup ((const char *)buf, buf_end - buf) : NULL;","if (value->string.content) {","buf += strlen (value->string.content) + 1;","}"],"label":1}
{"cve":"CVE-2022-39244","code_chunks":["if (*(scanner->curptr+1) != '=') {","on_scanner_error(scanner);","return;","}"],"label":1}
{"cve":"PYSEC-2021-245","code_chunks":["        return Status::OK();","        return errors::InvalidArgument(","            \"Cannot handle VALUE_ROWIDS in first dimension.\");","        *result = first_partition_tensor.shape().dim_size(0) - 1;","        return Status::OK();","        return errors::InvalidArgument(","            \"Cannot handle type \","],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["{","\/* TMP2 contains the high surrogate. *\/","jump = CMP(SLJIT_GREATER_EQUAL, TMP2, 0, SLJIT_IMM, 0xdc00 - 0xd800);","OP1(MOV_UCHAR, TMP1, 0, SLJIT_MEM1(STR_PTR), IN_UCHARS(1));","OP2(SLJIT_SHL, TMP2, 0, TMP2, 0, SLJIT_IMM, 10);","OP2(SLJIT_ADD, TMP1, 0, TMP1, 0, SLJIT_IMM, 0x10000 - 0xdc00);"],"label":1}
{"cve":"CVE-2022-4254","code_chunks":["if (item->san_opt == san_opt) {","if (item->san_opt == SAN_DIRECTORY_NAME) {","\/* use LDAP order for matching *\/","ret = rdn_list_2_dn_str(ctx, NULL, item->rdn_list, &tmp_str);","if (ret != 0 || tmp_str == NULL) {","return false;"],"label":1}
{"cve":"CVE-2020-5209","code_chunks":["choose_windows(s)","const char *s;","{","register int i;","","for (i = 0; winchoices[i].procs; i++) {","if ('+' == winchoices[i].procs->name[0])"],"label":1}
{"cve":"CVE-2022-39244","code_chunks":["","scanner->curptr = s;","","if (PJ_SCAN_IS_PROBABLY_SPACE(*s) && scanner->skip_ws) {","pj_scan_skip_whitespace(scanner);","}","}"],"label":1}
{"cve":"CVE-2018-20406","code_chunks":["_Unpickler_MemoGet(UnpicklerObject *self, size_t idx)","{","if (idx >= self->memo_size)","return NULL;","","return self->memo[idx];"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input2 = GetInput(context, node, 1);","TfLiteTensor* output = GetOutput(context, node, 0);","","TF_LITE_ENSURE_EQ(context, input1->dims->size, input2->dims->size);","for (int i = 0; i < input1->dims->size; ++i) {"],"label":1}
{"cve":"CVE-2018-20181","code_chunks":["\tinput += bytes_pro;","\tbytes_pro = process_plane(input, width, height, output + 0, size - total_pro);","\ttotal_pro += bytes_pro;","\treturn size == total_pro;","}","","\/* main decompress function *\/"],"label":0}
{"cve":"CVE-2020-15192","code_chunks":["}","","dlm_tensor->dl_tensor.shape = &(*shape_arr)[0];","dlm_tensor->dl_tensor.strides = &(*stride_arr)[0];","dlm_tensor->dl_tensor.byte_offset =","0;    return static_cast<void*>(dlm_tensor);"],"label":1}
{"cve":"CVE-2016-9583","code_chunks":["\t\tpi->xstep = pi->picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<","\t\t  (pirlvl->prcwidthexpn + pi->picomp->numrlvls - 1));","\t\tpi->ystep = pi->picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<","\t\t  (pirlvl->prcheightexpn + pi->picomp->numrlvls - 1));","\t\tfor (rlvlno = 1, pirlvl = &pi->picomp->pirlvls[1];","\t\t  rlvlno < pi->picomp->numrlvls; ++rlvlno, ++pirlvl) {","\t\t\tpi->xstep = JAS_MIN(pi->xstep, pi->picomp->hsamp *"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["                                                  scratch_buffer_size));","        }","      }","    }","  }","  return kTfLiteOk;","}"],"label":0}
{"cve":"CVE-2022-35972","code_chunks":["","void Compute(OpKernelContext* ctx) override {","const Tensor& input = ctx->input(0);","const float input_min_float = ctx->input(1).flat<float>()(0);","const float input_max_float = ctx->input(2).flat<float>()(0);","const float requested_output_min_float = ctx->input(3).flat<float>()(0);"],"label":1}
{"cve":"CVE-2022-35967","code_chunks":["                   .Finalize(node_def()));","  TF_ASSERT_OK(InitOp());","  const float input_min = -128.0f;","  const float input_max = 127.0f;","  const int input_width = 2;","  const int input_height = 4;","  Tensor input_float(DT_FLOAT, {input_height, input_width});"],"label":0}
{"cve":"CVE-2016-10189","code_chunks":["bee_t *bee = ic->bee;","bee_user_t *bu = bee_user_by_handle(bee, ic, handle);","","if (bee->ui->ft_in_start) {","return bee->ui->ft_in_start(bee, bu, file_name, file_size);","} else {","return NULL;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), data->num);","","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TF_LITE_ENSURE(context, NumElements(input) > 0);"],"label":0}
{"cve":"CVE-2019-12111","code_chunks":["\t\t\t\t    pcp_msg_info->peer_port,","\t\t\t\t    extip_s,","\t\t\t\t    eport,","\t\t\t\t    pcp_msg_info->mapped_str,","\t\t\t\t    pcp_msg_info->int_port,","\t\t\t\t    pcp_msg_info->protocol,","\t\t\t\t    pcp_msg_info->desc,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  const int32_t* input_data = input->data.i32;","  const TfLiteTensor* weight;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &weight));","  const uint8_t* weight_data = weight->data.uint8;","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","  int32_t* output_data = output->data.i32;"],"label":0}
{"cve":"CVE-2021-3881","code_chunks":["if (!(t1 & 0x80)) {","\/* get offset from mincode, maxcode tables *\/","while (code < huffcdic->mincode_table[code_length]) {","code_length++;","}","maxcode = huffcdic->maxcode_table[code_length];","}"],"label":1}
{"cve":"CVE-2018-20175","code_chunks":["\t\tlogger(Protocol, Warning, \"process_redirect_pdu(), unhandled LB_SERVER_TSV_URL\");","\t}","","\tif (g_redirect_flags & LB_PASSWORD_IS_PK_ENCRYPTED)","\t{","\t\tlogger(Protocol, Warning,","\t\t       \"process_redirect_pdu(), unhandled LB_PASSWORD_IS_PK_ENCRYPTED \");"],"label":0}
{"cve":"CVE-2023-1801","code_chunks":["\/* There's no good way to detect an error in strftime since a return","* value of 0 isn't necessarily failure.","*\/","strftime(filename, PATH_MAX, orig_name, local_tm);","} else {","strncpy(filename, orig_name, PATH_MAX);"],"label":1}
{"cve":"CVE-2020-15888","code_chunks":["int n;  \/* number of returns *\/","CallInfo *ci;","checkstackGCp(L, LUA_MINSTACK, func);  \/* ensure minimum stack size *\/","L->ci = ci = next_ci(L);","ci->nresults = nresults;","ci->callstatus = CIST_C;","ci->top = L->top + LUA_MINSTACK;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  shape->data[0] = unique_values.size();","  TF_LITE_ENSURE_STATUS(","      context->ResizeTensor(context, unique_output, shape.release()));","    T* output_unique_values = GetTensorData<T>(unique_output);","  for (int i = 0; i < output_values.size(); ++i) {","    output_unique_values[i] = output_values[i];","  }"],"label":0}
{"cve":"CVE-2021-41203","code_chunks":["status_ = TensorShape::BuildTensorShapeBase(ssm.shape(), &ssm_shape);","if (!status_.ok()) return;","for (const TensorSliceProto& tsp : ssm.slice()) {","TensorSlice ss_slice(tsp);","status_ = RegisterTensorSlice(ssm.name(), ssm_shape, ssm.type(), fname,","ss_slice, &tensors_);","if (!status_.ok()) return;"],"label":1}
{"cve":"CVE-2016-8649","code_chunks":["\t\t\tSYSERROR(\"PR_SET_NO_NEW_PRIVS could not be set. \"","\t\t\t\t \"Process can use execve() gainable \"","\t\t\t\t \"privileges.\");","\t\t\tshutdown(ipc_socket, SHUT_RDWR);","\t\t\trexit(-1);","\t\t}","\t\tINFO(\"PR_SET_NO_NEW_PRIVS is set. Process cannot use execve() \""],"label":0}
{"cve":"CVE-2021-3772","code_chunks":[" *"," * The return value is the disposition."," *\/","enum sctp_disposition sctp_sf_do_9_1_prm_abort(","\t\t\t\t\tstruct net *net,","\t\t\t\t\tconst struct sctp_endpoint *ep,","\t\t\t\t\tconst struct sctp_association *asoc,"],"label":0}
{"cve":"CVE-2022-24792","code_chunks":["* fmt header data.","*\/","if (wave_hdr.fmt_hdr.len > 16) {","size_to_read = wave_hdr.fmt_hdr.len - 16;","status = pj_file_setpos(fport->fd, size_to_read, PJ_SEEK_CUR);","if (status != PJ_SUCCESS) {","pj_file_close(fport->fd);"],"label":1}
{"cve":"CVE-2022-24754","code_chunks":["\t\t\t\t\t      const pj_str_t *cnonce,","\t\t\t\t\t      const pj_str_t *qop,","\t\t\t\t\t      const pj_str_t *uri,","\t\t\t\t\t      const pj_str_t *realm,","\t\t\t\t\t      const pjsip_cred_info *cred_info,","\t\t\t\t\t      const pj_str_t *method)","{"],"label":0}
{"cve":"CVE-2017-12424","code_chunks":["#if KEEP_NIS_AT_END","&& (NULL != ptr->line)","&& (   ('+' != ptr->line[0])","&& ('-' != ptr->line[0]))","#endif",";"],"label":1}
{"cve":"CVE-2018-8787","code_chunks":["UINT32 SrcSize = length;","rdpGdi* gdi = context->gdi;","UINT32 size = DstWidth * DstHeight;","bitmap->compressed = FALSE;","bitmap->format = gdi->dstFormat;",""],"label":0}
{"cve":"CVE-2022-27650","code_chunks":["          capabilities->ambient = dup_array (exec_options.cap, exec_options.cap_size);","          capabilities->ambient_len = exec_options.cap_size;","","          capabilities->permitted = dup_array (exec_options.cap, exec_options.cap_size);","          capabilities->permitted_len = exec_options.cap_size;","","          process->capabilities = capabilities;"],"label":0}
{"cve":"CVE-2020-6016","code_chunks":["return -k_EResultLimitExceeded;","}","","if ( cbData > k_cbMaxUnreliableMsgSize && !( pSendMessage->m_nFlags & k_nSteamNetworkingSend_Reliable )  )","{","SpewWarningRateLimited( usecNow, \"Trying to send a very large (%d bytes) unreliable message.  Sending as reliable instead.\\n\", cbData );","pSendMessage->m_nFlags |= k_nSteamNetworkingSend_Reliable;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"operand\\\" missing from UnaryOp\");","            return 1;","        }","        else {"],"label":0}
{"cve":"CVE-2022-35972","code_chunks":["input_quantized.flat<quint8>());","AddInputFromArray<quint8>(bias_quantized.shape(),","bias_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});","AddInputFromArray<float>(TensorShape({1}), {input_max});"],"label":1}
{"cve":"CVE-2022-29226","code_chunks":["      {Http::Headers::get().Method.get(), Http::Headers::get().MethodValues.Get},","      {Http::Headers::get().Scheme.get(), \"https\"},","      {Http::CustomHeaders::get().Authorization.get(), \"Bearer xyz-header-token\"},","  };","","    EXPECT_CALL(*validator_, setParams(_, _));","  EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["    }","","    node->temporaries->data[kInputQuantized] =","        op_data->scratch_tensor_index + kInputQuantized;","    TfLiteTensor* input_quantized;","    TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, kInputQuantized,","                                                &input_quantized));"],"label":0}
{"cve":"CVE-2020-26272","code_chunks":["  Dictionary dict(isolate, event);","  dict.Set(\"sender\", sender);","    if (frame) {","    dict.Set(\"frameId\", frame->GetRoutingID());","    dict.Set(\"processId\", frame->GetProcess()->GetID());","  }","  return event;"],"label":0}
{"cve":"CVE-2020-25427","code_chunks":["GF_Box *gf_isom_box_new(u32 boxType)","{","\treturn gf_isom_box_new_ex(boxType, 0, 0, GF_FALSE);","}","","void gf_isom_box_add_for_dump_mode(GF_Box *parent, GF_Box *a)","{"],"label":0}
{"cve":"CVE-2020-13396","code_chunks":["\tif (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)","\t\tntlm_write_version_info(s, &(message->Version)); \/* Version (8 bytes) *\/","","\t\/* Payload (variable) *\/","","\tif (message->NegotiateFlags & NTLMSSP_REQUEST_TARGET)","\t\tntlm_write_message_fields_buffer(s, &(message->TargetName));"],"label":0}
{"cve":"CVE-2016-10129","code_chunks":["\t\t(error = gen_pktline(&pktline, push)) < 0 ||","\t\t(error = packbuilder_payload.stream->write(packbuilder_payload.stream, git_buf_cstr(&pktline), git_buf_len(&pktline))) < 0)","\t\tgoto done;","","\tif (need_pack &&","\t\t(error = git_packbuilder_foreach(push->pb, &stream_thunk, &packbuilder_payload)) < 0)","\t\tgoto done;"],"label":0}
{"cve":"CVE-2016-2324","code_chunks":["static void show_object(struct object *object, struct strbuf *path,","const char *last, void *data)","{","struct bitmap *base = data;","bitmap_set(base, find_object_pos(object->oid.hash));"],"label":1}
{"cve":"CVE-2018-25032","code_chunks":["}","}","","\/* Output a literal byte *\/","s->match_length = 0;","Tracevv((stderr,\"%c\", s->window[s->strstart]));"],"label":1}
{"cve":"CVE-2018-8798","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"CVE-2021-41136","code_chunks":["\tgoto st0;","\tif ( ++p == pe )","\t\tgoto _test_eof30;","\tswitch( (*p) ) {","\t\tcase 32: goto tr2;","\t\tcase 36: goto st31;","\t\tcase 95: goto st31;"],"label":0}
{"cve":"CVE-2021-41208","code_chunks":["const int32_t num_buckets = stats_summary_t->dim_size(2) - 1;","const int32_t logits_dim = logits_dim_;","const int32_t hessian_dim = stats_summary_t->dim_size(3) - logits_dim;","DCHECK_GT(hessian_dim, 0);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["perrdetail err;","int iflags = PARSER_FLAGS(flags);","node *n;","","if (feature_version >= 7)","iflags |= PyPARSE_ASYNC_ALWAYS;"],"label":0}
{"cve":"CVE-2023-5595","code_chunks":["(*out_desc)->horiz_justif = txt->horizontal_justification;","(*out_desc)->font_count = txt->font_table->entry_count;","(*out_desc)->fonts = (GF_FontRecord *) gf_malloc(sizeof(GF_FontRecord) * txt->font_table->entry_count);","for (i=0; i<txt->font_table->entry_count; i++) {","(*out_desc)->fonts[i].fontID = txt->font_table->fonts[i].fontID;","if (txt->font_table->fonts[i].fontName)"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(values, i, val);","            }"],"label":0}
{"cve":"CVE-2019-19905","code_chunks":["if (config_section_chosen)","free(config_section_chosen);","section = choose_random_part(bufp, ',');","if (section)","config_section_chosen = dupstr(section);","else {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["bool& isvalid, CryptoKey& session_key) override;"],"label":1}
{"cve":"CVE-2022-40299","code_chunks":["if (pi->language!= LANG_SINGULAR)","{","Print(\"cannot edit type %d\\n\",pi->language);","close(f);","f=NULL;","}","else"],"label":0}
{"cve":"CVE-2019-13454","code_chunks":["\/*","the two images are the same, merge time delays and delete one.","*\/","size_t time;","time = curr->delay*1000\/curr->ticks_per_second;","time += next->delay*1000\/next->ticks_per_second;"],"label":1}
{"cve":"CVE-2022-24786","code_chunks":["","\/* Build RTCP-FB RPSI header *\/","hdr = (pjmedia_rtcp_common*)buf;","pj_memcpy(hdr, &session->rtcp_rr_pkt.common,  sizeof(*hdr));","hdr->pt = RTCP_PSFB;","hdr->count = 3; \/* FMT = 3 *\/"],"label":1}
{"cve":"CVE-2019-20911","code_chunks":["      break;","      error = dwg_decode_XRECORD (dat, obj);","      break;","      error = dwg_decode_PLACEHOLDER (dat, obj);","      break;","      error = dwg_decode_OLEFRAME (dat, obj);","      break;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["\/* Note different signature for ast_for_call *\/","static expr_ty ast_for_call(struct compiling *, const node *, expr_ty);","","static PyObject *parsenumber(struct compiling *, const char *);","static expr_ty parsestrplus(struct compiling *, const node *n);"],"label":1}
{"cve":"CVE-2018-8794","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"PYSEC-2020-129","code_chunks":["}","","if (graph_def.has_library()) {","const FunctionDefLibrary& library = graph_def.library();","for (const auto& function : library.function()) {","for (const auto& node : function.node_def()) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["                               input2, output);","    }","    case kTfLiteFloat32: {","      return EvalImpl<float>(context, data->requires_broadcast, input1, input2,","                             output);","    }","    default: {"],"label":0}
{"cve":"CVE-2019-20393","code_chunks":["if (info->cardinality >= LY_STMT_CARD_SOME) {","\/* there can be multiple instances, str is actually const char *** *\/","p = (const char ***)str;","if (!p[0]) {","\/* allocate initial array *\/","p[0] = calloc(2, sizeof(const char *));"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp54_read_bin(fp54_t a, const uint8_t *bin, int len) {","if (len != 36 * RLC_FP_BYTES && len != 54 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":1}
{"cve":"PYSEC-2021-160","code_chunks":["void Compute(OpKernelContext* context) override {","const Tensor* input_indices;","const Tensor* input_values;","const Tensor* input_shape;","SparseTensorsMap* map;",""],"label":0}
{"cve":"CVE-2018-10539","code_chunks":["DFFChunkHeader dff_chunk_header;","uint32_t bcount;","","infilesize = DoGetFileSize (infile);","memcpy (&dff_file_header, fourcc, 4);",""],"label":0}
{"cve":"CVE-2019-10672","code_chunks":["z = x % dz + start[2];","y = (x \/ dz) % dy + start[1];","x = (x \/ dzy) + start[0];","if (z < sz && y < sy && x < sx) {"],"label":1}
{"cve":"CVE-2019-17546","code_chunks":["}","if (colorchannels > 1","&& TIFFReadEncodedStrip(tif, TIFFComputeStrip(tif, offset_row, 1),","p1, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1)","&& img->stoponerr)","{","ret = 0;"],"label":1}
{"cve":"PYSEC-2021-662","code_chunks":["void Compute(OpKernelContext* ctx) override {","ReshapeOp::Compute(ctx);","if (!ctx->status().ok()) {","return;","}",""],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["    memcpy ((char *)oprof+pbody[8]+8, pwhite, sizeof pwhite);","    pcurve[3] = (short)(256\/gamm[5]+0.5) << 16;","    for (i=4; i < 7; i++)","      memcpy ((char *)oprof+pbody[i*3+2], pcurve, sizeof pcurve);","    pseudoinverse ((double (*)[3]) out_rgb[output_color-1], inverse, 3);","    for (i=0; i < 3; i++)","      for (j=0; j < 3; j++) {"],"label":0}
{"cve":"PYSEC-2021-776","code_chunks":["ctx, input.dims() == 4,","errors::InvalidArgument(\"Current RequantizePerChannel operator\"","\"supports 4D tensors only.\"));","","const Tensor& input_min_vec = ctx->input(kInputMinVecIndex);","size_t depth = input_min_vec.NumElements();"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["return 1;","}"],"label":1}
{"cve":"PYSEC-2021-305","code_chunks":["TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","","if (output->type == kTfLiteFloat32 || output->type == kTfLiteInt32) {","EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);","} else if (output->type == kTfLiteUInt8) {","TF_LITE_ENSURE_OK("],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["if(len<1) return;   string[len-1]=0;","if(len<3) return;   len = strnlen(string,len-1);","for(int i=len-1; i>=0; i--)","{","if(isspace(string[i]))","string[i]=0;"],"label":1}
{"cve":"CVE-2022-3647","code_chunks":["","#ifdef HAVE_BACKTRACE","ucontext_t *uc = (ucontext_t*) secret;","void *eip = getMcontextEip(uc);","if (eip != NULL) {"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT32 drawGDIPlusSupportLevel;","UINT32 drawGdiplusCacheLevel;","","if (length < 40)","return FALSE;",""],"label":1}
{"cve":"CVE-2016-8649","code_chunks":[],"label":1}
{"cve":"CVE-2023-25667","code_chunks":["                                    : gif_file->SColorMap;","    if (color_map == nullptr) {","      *error_string = absl::StrCat(\"missing color map for frame \", k);","      return nullptr;","    }","","    for (ptrdiff_t i = imgTop; i < imgBottom; ++i) {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["for (int i = 0; i < NumOutputs(node); ++i) {","TfLiteIntArray* output_dims = TfLiteIntArrayCopy(input->dims);","output_dims->data[axis_value] = size_splits_vector.at(i);","TfLiteTensor* output = GetOutput(context, node, i);","TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_dims));","}",""],"label":1}
{"cve":"CVE-2023-25671","code_chunks":["StringRef node_name;","StringRef output_name = \"\";","bool is_control_dep = full_name[0] == '^';","int output_num = 0;","if (is_control_dep) full_name = full_name.drop_front();","{"],"label":1}
{"cve":"CVE-2022-37032","code_chunks":["BGP_NOTIFY_HEADER_ERR,","BGP_NOTIFY_HEADER_BAD_MESLEN,","(u_char *) notify_data_length, 2);","goto done;","}",""],"label":1}
{"cve":"CVE-2022-3996","code_chunks":["if (data == NULL) {","data = ossl_policy_data_new(NULL, map->issuerDomainPolicy,","cache->anyPolicy->flags","& POLICY_DATA_FLAG_CRITICAL);","if (data == NULL)","goto bad_mapping;"],"label":1}
{"cve":"CVE-2019-17177","code_chunks":["}","","if (format)","\/* coverity[buffer_size] *\/","strncpy(&tmp[cs], \"<replaceable>\", len);","else"],"label":1}
{"cve":"CVE-2021-40812","code_chunks":["ret = 1;","goto freeargb;","}","gdPutBuf(out, out_size, outfile);","free(out);","","gdFree(argb);"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["            \"No suitable \" PLUGIN_STRING                                      \\","            \" plugin registered. Have you linked in a \" PLUGIN_STRING         \\","            \"-providing plugin?\");                                            \\","      } else {                                                                \\","        VLOG(2) << \"Selecting default \" PLUGIN_STRING \" plugin, \"             \\","                << plugin_names_[plugin_id];                                  \\","      }                                                                       \\"],"label":0}
{"cve":"CVE-2016-9841","code_chunks":["#endif","}","from = window - OFF;","if (wnext == 0) {           \/* very common case *\/","from += wsize - op;","if (op < len) {         \/* some from window *\/"],"label":1}
{"cve":"CVE-2022-35993","code_chunks":["sparse::SparseTensor* tensor) {","TensorShape shape;","TF_RETURN_IF_ERROR(TensorShape::BuildTensorShape(","ctx->input(base_index + 2).vec<int64_t>(), &shape));","CheckRankAtLeast2(ctx, shape);","std::vector<int64_t> order(shape.dims());"],"label":1}
{"cve":"CVE-2021-24028","code_chunks":["    if (readState.atStop()) {","      structInfo.unionExt->clear(object);","      readState.readStructEnd(iprot);","      return;","    }","    if (const auto* fieldInfo = findFieldInfo(iprot, readState, structInfo)) {","      auto& activeId = const_cast<int&>(getActiveId(object, structInfo));"],"label":0}
{"cve":"CVE-2022-2279","code_chunks":["*m->mh->dict_input_lang && *m->mh->dict_output_lang) {","const char *locale_in = mobi_get_locale_string(*m->mh->dict_input_lang);","const char *locale_out = mobi_get_locale_string(*m->mh->dict_output_lang);","printf(\": %s => %s\", locale_in, locale_out);","}","printf(\"\\n\");","}"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty value;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2018-5808","code_chunks":["{","if (len < 1)","return;   string[len - 1] = 0;","if (len < 3)","return;   len = strnlen(string, len - 1);","for (int i = len - 1; i >= 0; i--)"],"label":0}
{"cve":"CVE-2020-15209","code_chunks":["      \"tensorflow\/lite\/testdata\/segment_sum_invalid_buffer.bin\";","","  std::unique_ptr<tflite::FlatBufferModel> model =","      FlatBufferModel::BuildFromFile(model_path);","  ASSERT_NE(model, nullptr);","","  tflite::ops::builtin::BuiltinOpResolver resolver;"],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["{","if (len < 1)","return;   string[len - 1] = 0;","if (len < 3)","return;   len = strnlen(string, len - 1);","for (int i = len - 1; i >= 0; i--)"],"label":0}
{"cve":"CVE-2022-39347","code_chunks":["const WCHAR* path, UINT32 PathLength, wStream* output);"],"label":1}
{"cve":"CVE-2020-5238","code_chunks":["  return res;","}","","static const char *get_type_string(cmark_syntax_extension *self,","                                   cmark_node *node) {","  if (node->type == CMARK_NODE_TABLE) {","    return \"table\";"],"label":0}
{"cve":"CVE-2020-1919","code_chunks":["  switch (value.getType()) {","    case KindOfString: {","      auto const str =","        lazyClassToStringHelper(value.toLazyClassVal());","      auto const size = str->size();","      if (size >= RuntimeOption::MaxSerializedStringSize) {","        throw Exception(\"Size of serialized string (%ld) exceeds max\", size);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(body, i, value);"],"label":1}
{"cve":"PYSEC-2020-329","code_chunks":["int previous_segment_id = -1;","for (int i = 0; i < segment_id_size; i++) {","const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];","if (i == 0) {","TF_LITE_ENSURE_EQ(context, current_segment_id, 0);","} else {"],"label":0}
{"cve":"CVE-2017-9949","code_chunks":["\t\t       void *closure)","{","  unsigned int fpos = 0;","  struct grub_fshelp_node *diro = (struct grub_fshelp_node *) dir;","","  if (! diro->inode_read)","    {"],"label":0}
{"cve":"CVE-2018-18837","code_chunks":["","        else","            *d++ = *s;","","        s++;","    }",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["scaling_factors->type = kTfLiteFloat32;","scaling_factors->allocation_type = kTfLiteArenaRw;","const int height = NumElements(input) \/ channels_in;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp24_read_bin(fp24_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"CVE-2017-6886","code_chunks":["maximum = 0xffff;","break;","case 50454: \/* Sinar tag *\/","if (len > 2560000 || !(cbuf = (char *)malloc(len)))","break;","#ifndef LIBRAW_LIBRARY_BUILD","fread(cbuf, 1, len, ifp);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  const int n_time = input->dims->data[0];","  const int n_batch = input->dims->data[1];","  const int n_input = input->dims->data[2];","","    const TfLiteTensor* input_state;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputState, &input_state));"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* input_weights;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","const TfLiteTensor* recurrent_weights;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2022-47515","code_chunks":["            m_os.flush() ;","            m_sipMessage = m_os.str() ;","            if (m_sipMessage.length() > 1) m_sipMessage.resize( m_sipMessage.length() - 1) ;","            boost::replace_all(m_sipMessage, \"\\n\", DR_CRLF);","        }","        else if( 0 == strcmp(szLine, \"\\n\") ) {","            m_os << endl ;"],"label":0}
{"cve":"CVE-2019-19922","code_chunks":["","runtime = distribute_cfs_runtime(cfs_b, runtime, expires);","","raw_spin_lock_irqsave(&cfs_b->lock, flags);","if (expires == cfs_b->runtime_expires)","lsub_positive(&cfs_b->runtime, runtime);"],"label":1}
{"cve":"CVE-2023-22490","code_chunks":["\tif (option_filter_submodules > 0 && !filter_options.choice)","\t\tdie(_(\"the option '%s' requires '%s'\"),","\t\t    \"--also-filter-submodules\", \"--filter\");","\tif (option_filter_submodules > 0 && !option_recurse_submodules.nr)","\t\tdie(_(\"the option '%s' requires '%s'\"),","\t\t    \"--also-filter-submodules\", \"--recurse-submodules\");",""],"label":0}
{"cve":"CVE-2017-18017","code_chunks":["static int __init tcpmss_tg_init(void)","{","\treturn xt_register_targets(tcpmss_tg_reg, ARRAY_SIZE(tcpmss_tg_reg));","}","","static void __exit tcpmss_tg_exit(void)","{"],"label":0}
{"cve":"CVE-2018-11219","code_chunks":["int opt = *fmt++;","size_t size = optsize(L, opt, &fmt);","pos += gettoalign(pos, &h, opt, size);","luaL_argcheck(L, pos+size <= ld, 2, \"data string too short\");","\/* stack space for item + next position *\/","luaL_checkstack(L, 2, \"too many results\");","switch (opt) {"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from AugAssign\");","            return 1;","        }","        else {","            int res;","            res = obj2ast_expr(tmp, &value, arena);","            if (res != 0) goto failed;"],"label":0}
{"cve":"CVE-2020-11097","code_chunks":["if (!ntlm_av_pair_check(pAvPair, *pcbAvPair))","return NULL;","","offset = ntlm_av_pair_get_next_offset(pAvPair);","*pcbAvPair -= offset;","return (NTLM_AV_PAIR*)((PBYTE)pAvPair + offset);","}"],"label":1}
{"cve":"CVE-2017-3733","code_chunks":["}","","ret = 1;","if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)","mac_size = EVP_MD_CTX_size(s->read_hash);","if ((bs != 1) && !send) {","int tmpret;"],"label":1}
{"cve":"CVE-2021-20298","code_chunks":["    #if defined (DEBUG)","","\tfor (int i = 1; i < _numChans; ++i)","\t    assert (_channelData[i-1].end == _channelData[i].start);","","\tassert (_channelData[_numChans-1].end == tmpBufferEnd);",""],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["\t\t{  1920000, \"AVT\",      \"F-201C\"          ,0 },","\t\t{  5067304, \"AVT\",      \"F-510C\"          ,0 },","\t\t{ 10134608, \"AVT\",      \"F-510C\"          ,0 },","\t\t{ 16157136, \"AVT\",      \"F-810C\"          ,0 },","\t\t{  1409024, \"Sony\",     \"XCD-SX910CR\"     ,0 },","\t\t{  2818048, \"Sony\",     \"XCD-SX910CR\"     ,0 },","\t\t{  3884928, \"Micron\",   \"2010\"            ,0 },"],"label":0}
{"cve":"CVE-2021-41193","code_chunks":["\tmsg = econn_message_alloc();","\tif (!msg) {","\t\terr = ENOMEM;","\t\tgoto out;","\t}","","\tver = jzon_str(jobj, \"version\");"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\tfp_mul(t[i], t[i - 1], r);","\t\t}","","\t\tfp_set_dig(r, 1);","\t\tl = RLC_FP_BITS + 1;","\t\tbn_rec_slw(win, &l, b, FP_WIDTH);","\t\tfor (size_t i = 0; i < l; i++) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","const TfLiteTensor* multipliers = GetInput(context, node, kInputMultipliers);","","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context, ResizeOutput(context, node));"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["uint8_t data_2 = 0;","char *text = NULL;","","if (!siz) goto shortbuf;","","if (event_data[0] >= 0x80) {","command = *event_data & 0xf0;"],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["void CLASS samsung_load_raw()","{","int row, col, c, i, dir, op[4], len[4];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width> 32768 || raw_height > 32768)      throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["n = CHILD(n, idx);","n_children = NCH(n);","if (n_children % 2 == 0) {","ast_error(c, n, \"trailing comma not allowed without\""],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\tif (securityFlags & (SEC_ENCRYPT | SEC_REDIRECTION_PKT))","\t\t{","\t\t\tif (!rdp_decrypt(rdp, s, &length, securityFlags))","\t\t\t{","\t\t\t\tWLog_ERR(TAG, \"rdp_decrypt failed\");","\t\t\t\treturn -1;","\t\t\t}"],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["unsigned kodak, entries, tag, type, len, save, c;","double expo,ape;","","kodak = !strncmp(make,\"EASTMAN\",7) && tiff_nifds < 3;","entries = get2();","if(!strncmp(make,\"Hasselblad\",10) && (tiff_nifds > 3) && (entries > 512)) return;"],"label":0}
{"cve":"CVE-2018-20178","code_chunks":["STREAM s;","int length;","int tagval;","struct stream packet;","","s = tcp_recv(NULL, 4);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["GetOutput(context, node, kResourceHandleTensor);","TF_LITE_ENSURE(context, resource_handle_tensor != nullptr);","TF_LITE_ENSURE_EQ(context, resource_handle_tensor->type, kTfLiteInt32);","TfLiteIntArray* outputSize = TfLiteIntArrayCreate(1);","outputSize->data[0] = 1;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["        if (*out == NULL) goto failed;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)AnnAssign_type);","    if (isinstance == -1) {","        return 1;","    }"],"label":0}
{"cve":"CVE-2023-28101","code_chunks":["g_autoptr(GString) res = g_string_new (NULL);","int i;","","g_string_append_printf (res, \"    [%d] %s\", idx, (char *) items->pdata[0]);","","for (i = 1; i < items->len; i++)","{"],"label":1}
{"cve":"PYSEC-2020-333","code_chunks":["          break;","        }","      }","    }","  }","","  void Compute(OpKernelContext* context) override {"],"label":0}
{"cve":"CVE-2020-36315","code_chunks":["md_mgf(mask, k_len - RLC_MD_LEN - 1, h1, RLC_MD_LEN);","bn_read_bin(t, mask, k_len - RLC_MD_LEN - 1);","for (int i = 0; i < t->used; i++) {","m->dp[i] ^= t->dp[i];","}","bn_write_bin(mask, k_len - RLC_MD_LEN - 1, m);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp24_write_bin(uint8_t *bin, int len, const fp24_t a, int pack);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* axis = GetInput(context, node, kAxisTensor);","TF_LITE_ENSURE_EQ(context, NumDimensions(axis), 1);","TF_LITE_ENSURE(context, NumDimensions(input) >= NumElements(axis));",""],"label":1}
{"cve":"CVE-2018-10528","code_chunks":["\t\t\t  if (!strcmp (name, \"CAMMODEL\"))","\t\t\t\t  strcpy (imgdata.idata.model, value);","\t\t\t  if (!strcmp (name, \"CAMSERIAL\"))","\t\t\t\t  strcpy (imgdata.shootinginfo.BodySerial, value);","\t\t\t  if (!strcmp (name, \"WB_DESC\"))","\t\t\t\t  strcpy (imgdata.color.model2, value);","\t\t\t  if (!strcmp (name, \"TIME\"))"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["return 1;","}"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["AsyncFunctionDef_fields, 5);","if (!AsyncFunctionDef_type) return 0;","ClassDef_type = make_type(\"ClassDef\", stmt_type, ClassDef_fields, 5);","if (!ClassDef_type) return 0;"],"label":1}
{"cve":"CVE-2018-8795","code_chunks":["process_plane(uint8 * in, int width, int height, uint8 * out, int size)","{","\tUNUSED(size);","\tint indexw;","\tint indexh;","\tint code;","\tint collen;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\tep_null(t[i]);","\t\t\tep_new(t[i]);","\t\t}","\t\tep_new(q);","","\t\tep_copy(t[0], p);","\t\tep_dbl(q, p);"],"label":0}
{"cve":"CVE-2018-15856","code_chunks":["                else {","                    scanner_warn(s, \"unknown escape sequence (%c) in string literal\", peek(s));","                    \/* Ignore. *\/","                }","            } else {","                buf_append(s, next(s));","            }"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumDimensions(seq_lengths), 1);","","if (input->type != kTfLiteInt32 && input->type != kTfLiteFloat32 &&"],"label":1}
{"cve":"CVE-2022-3109","code_chunks":["AV_GET_BUFFER_FLAG_REF)) < 0)","goto error;","","if (!s->edge_emu_buffer)","s->edge_emu_buffer = av_malloc(9 * FFABS(s->current_frame.f->linesize[0]));","","if (s->keyframe) {"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT32 flags;","UINT32 VCChunkSize;","","if (Stream_GetRemainingLength(s) < 4)","return FALSE;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["stmt_ty val;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"AsyncFunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;"],"label":1}
{"cve":"CVE-2020-5215","code_chunks":["static const char* ConvertScalar(PyObject* v, Eigen::half* out) {","return ConvertOneFloat<Eigen::half>(v, out);","}"],"label":0}
{"cve":"CVE-2020-11097","code_chunks":["\tlength = ntlm_av_pair_list_size(AvPairsCount, AvPairsLength);","","\tif (!sspi_SecBufferAlloc(&context->ChallengeTargetInfo, length))","\t\tgoto fail;","","\tpAvPairList = (NTLM_AV_PAIR*)context->ChallengeTargetInfo.pvBuffer;","\tcbAvPairList = context->ChallengeTargetInfo.cbBuffer;"],"label":0}
{"cve":"CVE-2017-9763","code_chunks":["    {","      *uuid = grub_xasprintf (\"%04x%04x-%04x-%04x-%04x-%04x%04x%04x\",","\t\t\t     grub_be_to_cpu16 (data->sblock.uuid[0]),","\t\t\t     grub_be_to_cpu16 (data->sblock.uuid[1]),","\t\t\t     grub_be_to_cpu16 (data->sblock.uuid[2]),","\t\t\t     grub_be_to_cpu16 (data->sblock.uuid[3]),","\t\t\t     grub_be_to_cpu16 (data->sblock.uuid[4]),"],"label":0}
{"cve":"CVE-2022-29788","code_chunks":["for (size_t j = 0; j < e.tags_count; j++) {","MOBIIndexTag t = e.tags[j];","if (t.tagid == INDX_TAGARR_INFL_PARTS_V1) {","for (size_t k = 0; k < t.tagvalues_count - 1; k += 2) {","uint32_t len = t.tagvalues[k];","uint32_t offset = t.tagvalues[k + 1];","char *base = mobi_get_cncx_string_flat(indx->cncx_record, offset, len);"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["src += n;","dst += n;","}","","if (src >= end)","break;"],"label":1}
{"cve":"PYSEC-2022-88","code_chunks":["      return false;","    }","    if (IsSwitch(*input)) {","      for (const string& consumer_input : consumer->input()) {","        if (consumer_input == AsControlDependency(node.name())) {","          return false;","        }"],"label":0}
{"cve":"CVE-2020-15889","code_chunks":["static void youngcollection (lua_State *L, global_State *g) {","GCObject **psurvival;  \/* to point to first non-dead survival object *\/","lua_assert(g->gcstate == GCSpropagate);","markold(g, g->survival, g->reallyold);","markold(g, g->finobj, g->finobjrold);","atomic(L);",""],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["\"\\\"%s\\\" field, calculating from imagelength\",","tif->tif_name,","_TIFFFieldWithTag(tif,TIFFTAG_STRIPBYTECOUNTS)->field_name);","if (EstimateStripByteCounts(tif, dir, dircount) < 0)","goto bad;","\/*"],"label":1}
{"cve":"CVE-2023-0817","code_chunks":["","\twhile (gf_bs_available(bs)) {","\t\tu32 type = (u32) gf_mpegh_escaped_value(bs, 3, 8, 8);","\t\t\/*u64 label = *\/gf_mpegh_escaped_value(bs, 2, 8, 32);","\t\tu64 mh_size = gf_mpegh_escaped_value(bs, 11, 24, 24);","\t\tif (mh_size > gf_bs_available(bs))","\t\t\tbreak;"],"label":0}
{"cve":"CVE-2020-11085","code_chunks":["WLog_ERR(TAG, \"malloc failed!\");","error = CHANNEL_RC_NO_MEMORY;","goto error_out;","}","CopyMemory(formats[index].formatName, szFormatName, 32);","formats[index].formatName[32] = '\\0';"],"label":1}
{"cve":"CVE-2018-20180","code_chunks":["{","color = CVAL(in);","*out = color;","out += 4;","indexw++;","collen--;"],"label":1}
{"cve":"CVE-2021-42917","code_chunks":["else","{","CXBMCTinyXML xmlDoc;","stream >> xmlDoc;","","if (xmlDoc.Error())","{"],"label":1}
{"cve":"CVE-2016-3134","code_chunks":["const struct xt_entry_target *t;","unsigned int verdict;","","if (!unconditional(&e->ip))","return false;","t = ipt_get_target_c(e);","if (strcmp(t->u.user.name, XT_STANDARD_TARGET) != 0)"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["return Py_None;","}","","result = PyType_GenericNew(withitem_type, NULL, NULL);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":[],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2021-842","code_chunks":["output_shape.set_dim(0, output_rows);"],"label":1}
{"cve":"CVE-2021-40572","code_chunks":["tg_start = 0;","tg_end = numTiles - 1;","\/*state->frame_state.tg[0].start_idx = 0;","state->frame_state.tg[0].end_idx = numTiles - 1;*\/","}","else {"],"label":1}
{"cve":"CVE-2018-8795","code_chunks":["int i;","uint16 num_updates;","","in_uint16_le(s, num_updates);   \/* rectangles *\/","","for (i = 0; i < num_updates; i++)"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","bool MockCustom::freed_ = false;","","AllOpsResolver GetOpResolver() {","  AllOpsResolver op_resolver;","  op_resolver.AddCustom(\"mock_custom\", MockCustom::GetMutableRegistration());","  op_resolver.AddCustom(\"simple_stateful_op\","],"label":0}
{"cve":"PYSEC-2021-155","code_chunks":["const Tensor& handle = ctx->input(0);","const string& name = handle.scalar<tstring>()();","Tensor val;","OP_REQUIRES_OK(ctx, ctx->session_state()->GetTensor(name, &val));","ctx->set_output(0, val);","}",""],"label":1}
{"cve":"CVE-2023-4778","code_chunks":["if ( !parser->line_pos || (parser->line_buffer[parser->line_pos-1] != '\\\\') ) break;","","BT_STR_CHECK_ALLOC","","if ((parser->line_buffer[parser->line_pos]=='\/') && (parser->line_buffer[parser->line_pos+1]=='\/') && (parser->line_buffer[parser->line_pos-1]!=':') ) {","\/*this looks like a comment*\/"],"label":1}
{"cve":"CVE-2016-9841","code_chunks":["            break;","        }","        else {","            strm->msg = (char *)\"invalid literal\/length code\";","            state->mode = BAD;","            break;","        }"],"label":0}
{"cve":"CVE-2017-6448","code_chunks":["\t\t\toffset = R_ASM_GET_OFFSET (a, 's', vB);","\t\t\tif (offset == -1) {","\t\t\t\tsnprintf (str, sizeof (str), \" v%i, string+%i\", vA, vB);","\t\t\t}","\t\t\telse {","\t\t\t\tsnprintf (str, sizeof (str), \" v%i, 0x%\"PFMT64x, vA, offset);","\t\t\t}"],"label":0}
{"cve":"CVE-2018-6334","code_chunks":["","      if (php_rfc1867_callback != nullptr) {","        multipart_event_file_end event_file_end;","","        event_file_end.post_bytes_processed = mbuff->read_post_bytes;","        event_file_end.temp_filename = temp_filename.c_str();","        event_file_end.cancel_upload = cancel_upload;"],"label":0}
{"cve":"CVE-2020-12062","code_chunks":["}","targ = *argv;","if (targetshouldbedirectory)","verifydir(targ);",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void ed_mul_slide(ed_t r, const ed_t p, const bn_t k) {","ed_t t[1 << (EP_WIDTH - 1)], q;","int i, j, l;","uint8_t win[RLC_FP_BITS + 1];","","ed_null(q);"],"label":1}
{"cve":"CVE-2020-13396","code_chunks":["if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))","{","Stream_Free(s, FALSE);","return SEC_E_INTERNAL_ERROR;","}",""],"label":1}
{"cve":"CVE-2015-8631","code_chunks":["","if (errmsg != NULL)","krb5_free_error_message(handle->context, errmsg);","","}","free(prime_arg1);"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["placeholder++;","total_consumed++;","}","len = utf8_strnwidth(local_sb.buf, -1, 1);","","if (c->flush_type == flush_left_and_steal) {","const char *ch = sb->buf + sb->len - 1;"],"label":1}
{"cve":"CVE-2020-6017","code_chunks":["","READ_SEGMENT_DATA_SIZE( unreliable )","Assert( cbSegmentSize > 0 );","bool bLastSegmentInMessage = ( nFrameType & 0x20 ) != 0;","SNP_ReceiveUnreliableSegment( nCurMsgNum, nOffset, pSegmentData, cbSegmentSize, bLastSegmentInMessage, usecNow );","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["row_sums_rows += ceil(static_cast<float>(n_output) \/ n_cell);","}","","TfLiteTensor* row_sums = GetTemporary(context, node, kRowSums);","row_sums->type = kTfLiteInt32;","row_sums->allocation_type = kTfLiteArenaRwPersistent;","const int row_sums_dims[2] = {row_sums_rows, n_cell};"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["for (i = 0; i < 4; i++) {","if (bn_sign(_b[i]) == RLC_NEG) {","fp12_inv_cyc(t[i], t[i]);","}","_l[i] = RLC_FP_BITS + 1;","bn_rec_naf(naf[i], &_l[i], _b[i], 2);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_glyph_cache_capability_set(wStream* s, rdpSettings* settings)","{","if (Stream_GetRemainingLength(s) < 48)","return FALSE;","","\/* glyphCache (40 bytes) *\/"],"label":0}
{"cve":"CVE-2016-6906","code_chunks":["","size = read_test_file(&buffer, \"heap_overflow.tga\");","im = gdImageCreateFromTgaPtr(size, (void *) buffer);","gdTestAssert(im == NULL);","free(buffer);",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["","\t\ted_new(q);","","\t\ted_copy(t[0], p);","\t\ted_dbl(q, p);","","#if defined(EP_MIXED)"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["switch (pduType)","{","rc = rdp_recv_data_pdu(rdp, s);","if (rc < 0)","return rc;","break;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2021-20304","code_chunks":["try","{","cout << \"Testing Huffman encoder\" << endl;","","IMATH_NAMESPACE::Rand48 rand48 (0);",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  for (int i = 0; i < node->outputs->size; ++i) {","    TfLiteTensor* output;","    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &output));","    if (IsDynamicTensor(output)) {","      has_dynamic_output_tensors = true;","      break;","    }"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,255);","else","gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,65535);","fseek (ifp, data_offset, SEEK_SET);"],"label":1}
{"cve":"CVE-2023-36327","code_chunks":["\t\t\tbn_read_bin(b, buf, len);","\t\t\tbn_mul(a, a, b);","\t\t\tbn_mod(a, a, pub->n);","\t\t\tlen = bn_size_bin(pub->n);","\t\t\tbn_write_bin(buf, len, a);","\t\t\tTEST_ASSERT(cp_bdpe_dec(&out, buf, len, prv) == RLC_OK, end);","\t\t\tTEST_ASSERT(in == out, end);"],"label":0}
{"cve":"CVE-2022-2872","code_chunks":["from octoprint.util import sv, time_this","","# ~~ GCODE file handling","","_file_cache = {}","_file_cache_mutex = threading.RLock()"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2021-3751","code_chunks":["unsigned char *source = buf->data + buf->offset;","if (offset >= 0) {","if (buf->offset + aoffset + len > buf->maxlen) {","debug_print(\"%s\", \"End of buffer\\n\");","buf->error = MOBI_BUFFER_END;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* fft_length = GetInput(context, node, kFftLengthTensor);","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (output->type != kTfLiteComplex64) {"],"label":1}
{"cve":"CVE-2023-28096","code_chunks":["        if (!value)","        {","            goto fail;","        }","","        \/* use string as key, not value *\/","        child->string = child->valuestring;"],"label":0}
{"cve":"CVE-2018-14055","code_chunks":["void CIRCSock::ReadLine(const CString& sData) {","CString sLine = sData;","","sLine.TrimRight(\"\\n\\r\");","","DEBUG(\"(\" << m_pNetwork->GetUser()->GetUserName() << \"\/\"","<< m_pNetwork->GetName() << \") IRC -> ZNC [\" << sLine << \"]\");"],"label":1}
{"cve":"CVE-2016-6872","code_chunks":["int lenDelim = delim.size();","for (ArrayIter iter(items); iter; ++iter) {","sitems.emplace_back(iter.second().toString());","len += sitems.back().size() + lenDelim;"],"label":1}
{"cve":"CVE-2016-10009","code_chunks":["signal(SIGTERM, cleanup_handler);","nalloc = 0;","","if (pledge(\"stdio cpath unix id proc exec\", NULL) == -1)","fatal(\"%s: pledge: %s\", __progname, strerror(errno));","","while (1) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["                goto failed;","            }","            asdl_seq_SET(defaults, i, val);","        }","        Py_CLEAR(tmp);","    }","    *out = arguments(args, vararg, kwonlyargs, kw_defaults, kwarg, defaults,"],"label":0}
{"cve":"PYSEC-2021-412","code_chunks":["\/*group_size*\/ c->input(1),","\/*group_key*\/ c->input(2),","\/*instance_key*\/ c->input(3)),","done);","col_params->instance.shape = c->input(0).shape();","col_params->merge_op = merge_op_.get();","col_params->final_op = final_op_.get();"],"label":1}
{"cve":"CVE-2022-35966","code_chunks":["      {1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16,","       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32});","  Tensor input_quantized =","      FloatTensorToQuantized<quint8>(input_float, input_min, input_max);","","  const int expected_width = input_width \/ stride;","  const int expected_height = input_height \/ stride;"],"label":0}
{"cve":"CVE-2023-22490","code_chunks":["*\/","if (stat(iter->base.path.buf, &iter->base.st) < 0) {","saved_errno = errno;","goto error_out;","}"],"label":1}
{"cve":"CVE-2018-20174","code_chunks":["\t\ts_reset(token);","\t\tout_uint8p(token, s->p, length);","\t\ts_mark_end(token);","\t}","","\t\tif (pubkey)","\t{"],"label":0}
{"cve":"CVE-2022-0407","code_chunks":["{","int s = bd->textlen + bd->endspaces;","","while (VIM_ISWHITE(*(bd->textstart + s - 1)) && s > 0)","{","s = s - (*mb_head_off)(bd->textstart, bd->textstart + s - 1) - 1;","pnew--;"],"label":1}
{"cve":"CVE-2021-41198","code_chunks":["context, multiples_array[i] >= 0,","errors::InvalidArgument(\"Expected multiples[\", i, \"] >= 0, but got \",","multiples_array[i]));","output_shape.AddDim(input.dim_size(i) * multiples_array[i]);","}","if (output_shape == input.shape()) {","context->set_output(0, input);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tbn_null(t);","","\tif (len != RLC_FB_BYTES) {","\t\tRLC_THROW(ERR_NO_BUFFER);","\t\treturn;","\t}",""],"label":0}
{"cve":"CVE-2018-11384","code_chunks":["static int sh_op(RAnal *anal, RAnalOp *op, ut64 addr, const ut8 *data, int len) {","ut8 op_MSB,op_LSB;","int ret;","if (!data)","return 0;","memset (op, '\\0', sizeof (RAnalOp));","op->addr = addr;"],"label":1}
{"cve":"CVE-2021-3995","code_chunks":["char *user_id = NULL;","size_t sz;","uid_t uid;","char uidstr[sizeof(stringify_value(ULONG_MAX))];","","*errsv = 0;"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["void CxImage::Startup(uint32_t imagetype)","{","pDib = pSelection = pAlpha = NULL;","ppLayers = ppFrames = NULL;","memset(&head,0,sizeof(BITMAPINFOHEADER));","memset(&info,0,sizeof(CXIMAGEINFO));"],"label":1}
{"cve":"CVE-2017-11462","code_chunks":["GSS_C_NO_BUFFER);","}","free(union_ctx_id);","*context_handle = GSS_C_NO_CONTEXT;","}","","if (src_name)"],"label":1}
{"cve":"CVE-2016-8339","code_chunks":["err = \"Unrecognized client limit class\";","goto loaderr;","}","hard = memtoll(argv[2],NULL);"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["lazyClassToStringHelper(value.toLazyClassVal());","auto const size = str->size();","if (size >= RuntimeOption::MaxSerializedStringSize) {","throw Exception(\"Size of serialized string (%d) exceeds max\", size);","}","StringBuffer sb;","sb.append(\"s:\");"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["res = obj2ast_identifier(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"Global field \\\"names\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["}","output_indexes_shape->data[num_dimensions - 1] = k;","output_values_shape->data[num_dimensions - 1] = k;","TfLiteTensor* output_indexes = GetOutput(context, node, kOutputIndexes);","TfLiteTensor* output_values = GetOutput(context, node, kOutputValues);"],"label":1}
{"cve":"CVE-2020-9432","code_chunks":["if (lua_isstring(L, 2))","{","const char *hostname = lua_tostring(L, 2);","lua_pushboolean(L, X509_check_host(cert, hostname, strlen(hostname), 0, NULL));","}","else"],"label":1}
{"cve":"CVE-2022-0519","code_chunks":["R_API RBinJavaAnnotation *r_bin_java_annotation_new(ut8 *buffer, ut64 sz, ut64 buf_offset) {","ut32 i = 0;","RBinJavaAnnotation *annotation = NULL;","RBinJavaElementValuePair *evps = NULL;","ut64 offset = 0;","annotation = R_NEW0 (RBinJavaAnnotation);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["      prod_scaling_factors_size->data[0] = n_batch;","      TF_LITE_ENSURE_OK(context,","                        context->ResizeTensor(context, prod_scaling_factors,","                                              prod_scaling_factors_size));","    }","","            node->temporaries->data[kRecoveredCellWeights] ="],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  auto* params =","      reinterpret_cast<TfLiteReverseSequenceParams*>(node->builtin_data);","  int seq_dim = params->seq_dim;","  int batch_dim = params->batch_dim;","","  TF_LITE_ENSURE(context, seq_dim >= 0);","  TF_LITE_ENSURE(context, batch_dim >= 0);"],"label":0}
{"cve":"CVE-2023-1801","code_chunks":["{","time_t ts;","char buf[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss\")];","","ts = seconds + (nanoseconds \/ 1000000000);","nanoseconds %= 1000000000;"],"label":0}
{"cve":"CVE-2023-27597","code_chunks":["switch(uri->type){","\/* fix tel uris, move the number in uri and empty the host *\/","uri->user=uri->host;","uri->host.s=\"\";","uri->host.len=0;","break;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["{","PyObject *u;","char *buf;","char *p;","const char *end;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteIntArrayFree(node->temporaries);","node->temporaries = TfLiteIntArrayCreate(6);","node->temporaries->data[0] = op_data->scratch_tensor_index;","TfLiteTensor* input_quantized = GetTemporary(context, node, \/*index=*\/0);","input_quantized->type = input_weights->type;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static int recoding(void) {","int code = RLC_ERR;","bn_t a, b, c, v1[3], v2[3];","int w, k, l;","uint8_t d[RLC_BN_BITS + 1];","int8_t e[2 * (RLC_BN_BITS + 1)];",""],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2019-15162","code_chunks":["\t\t\t\tif (sock_bufferize(NULL, sizeof(struct rpcap_sockaddr), NULL,","\t\t\t\t    &sendbufidx, RPCAP_NETBUF_SIZE, SOCKBUF_CHECKONLY, errmsgbuf, PCAP_ERRBUF_SIZE) == -1)","\t\t\t\t\tgoto error;","\t\t\t\tdaemon_seraddr((struct sockaddr_storage *) address->addr, sockaddr);","","\t\t\t\tsockaddr = (struct rpcap_sockaddr *) &sendbuf[sendbufidx];","\t\t\t\tif (sock_bufferize(NULL, sizeof(struct rpcap_sockaddr), NULL,"],"label":0}
{"cve":"CVE-2021-31258","code_chunks":["if (e) return e;","","switch (entry->type) {","esds = ((GF_MPEGSampleEntryBox *)entry)->esd;","if (!esds || !esds->desc || !esds->desc->slConfig || (esds->desc->slConfig->predefined != SLPredef_MP4))","return GF_ISOM_INVALID_FILE;","slc = & ((GF_MPEGSampleEntryBox *)entry)->slc;"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["","if (!ds->ossl_ssl[idx]) {","pj_lock_release(ds->ossl_lock);","return;","}",""],"label":1}
{"cve":"CVE-2019-9718","code_chunks":["                                             \"{\\\\fs%u}\", font_size);","                                    }","                                } else if (!strncmp(param, \"color=\", 6)) {","                                    param += 6 + (param[6] == '\"');","                                    snprintf(stack[sptr].param[PARAM_COLOR],","                                         sizeof(stack[0].param[PARAM_COLOR]),","                                         \"{\\\\c&H%X&}\","],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["            res = obj2ast_constant(tmp, &value, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }","        *out = Constant(value, lineno, col_offset, end_lineno, end_col_offset,","                        arena);","        if (*out == NULL) goto failed;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["Py_DECREF(value);","    value = ast2obj_int(o->end_col_offset);","    if (!value) goto failed;","    if (_PyObject_SetAttrId(result, &PyId_end_col_offset, value) < 0)","        goto failed;","    Py_DECREF(value);","    return result;"],"label":0}
{"cve":"CVE-2022-45873","code_chunks":["k = read(error_pipe[0], &e, sizeof(e));","if (k < 0 && errno != EAGAIN) \/* Pipe is non-blocking, EAGAIN means there's nothing *\/","return -errno;","if (k == sizeof(e))","return e; \/* propagate error sent to us from child *\/","if (k != 0)"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_EQ(context, fw_input_to_output_weights->dims->size, 2);","  TF_LITE_ENSURE_EQ(context, fw_input_to_output_weights->dims->data[1],","                    n_input);","","  const TfLiteTensor* bw_input_to_output_weights;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kBwInputToOutputWeightsTensor,"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input_box_encodings =","GetInput(context, node, kInputTensorBoxEncodings);","TF_LITE_ENSURE_EQ(context, input_box_encodings->dims->data[0], kBatchSize);","const int num_boxes = input_box_encodings->dims->data[1];","TF_LITE_ENSURE(context, input_box_encodings->dims->data[2] >= kNumCoordBox);","const TfLiteTensor* input_anchors ="],"label":1}
{"cve":"CVE-2018-20179","code_chunks":["in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)],","width * Bpp);","}","ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);","xfree(bmpdata);","continue;"],"label":1}
{"cve":"CVE-2022-0519","code_chunks":["return NULL;","}","RBinJavaStackMapFrame *stack_frame = NULL, *new_stack_frame = NULL;","if (sz < 10) {","return NULL;","}"],"label":0}
{"cve":"PYSEC-2020-273","code_chunks":["return nullptr;","}","","auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);","if (!status->status.ok()) {","return nullptr;"],"label":0}
{"cve":"CVE-2016-7532","code_chunks":["size_t","length;","","unsigned char","*datum;",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), data->values_count);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input0 = GetInput(context, node, 0);","const int dimension_size = NumDimensions(input0) + 1;","if (data->axis < 0) {","data->axis += dimension_size;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {","return 1;"],"label":1}
{"cve":"CVE-2016-10161","code_chunks":["ZVAL_DOUBLE(*rval, zend_strtod((const char *)start + 2, NULL));","return 1;","}","#line 1069 \"ext\/standard\/var_unserializer.c\"","yych = *++YYCURSOR;","if (yych <= ',') {","if (yych != '+') goto yy18;"],"label":1}
{"cve":"CVE-2021-3997","code_chunks":["const struct stat *root_dev,","bool allow_recursion) {","","struct stat st;","int r, q = 0;",""],"label":0}
{"cve":"CVE-2018-16643","code_chunks":["      \/*","        Read a group.","      *\/","      image->offset=(ssize_t) TellBlob(image);","      group=ReadBlobLSBShort(image);","      element=ReadBlobLSBShort(image);","      if ((group == 0xfffc) && (element == 0xfffc))"],"label":0}
{"cve":"PYSEC-2022-111","code_chunks":["int64_t num_threads = 0;","OP_REQUIRES_OK(","ctx, ParseScalarArgument<int64_t>(ctx, \"num_threads\", &num_threads));","OP_REQUIRES_OK(ctx, ValidateNumThreads(num_threads));","*output = new Dataset(ctx, input, num_threads);","}",""],"label":0}
{"cve":"CVE-2021-41208","code_chunks":["        Eigen::VectorXf curr_grad = stats_vec.head(logits_dim);","        Eigen::VectorXf curr_hess = stats_vec.tail(hessian_dim);","        MaybeUpdateBestSplit(curr_grad, total_grad - curr_grad, curr_hess,","                             total_hess - curr_hess, logits_dim, bucket, f_dim,","                             l1, l2, kEqualityDefaultRight, best_gain,","                             best_bucket, best_f_dim, best_split_type,","                             best_contrib_for_left, best_contrib_for_right);"],"label":0}
{"cve":"CVE-2018-18837","code_chunks":["if(unlikely(*s == '%')) {","if(likely(s[1] && s[2])) {","char t = from_hex(s[1]) << 4 | from_hex(s[2]);","*d++ = (char)((isprint(t))? t : ' ');","s += 2;","}"],"label":0}
{"cve":"CVE-2019-20393","code_chunks":["break;","","","{ if (yang_read_extcomplex_str(trg, ext_instance, \"reference\", ext_name, s,","0, LY_STMT_REFERENCE)) {","YYABORT;","}"],"label":1}
{"cve":"CVE-2021-3331","code_chunks":["std::unique_ptr<TObjectList> DataList(new TObjectList());","try","{","GetLoginData(AutoStartSession, Params, DataList.get(), DownloadFile, NeedSession, NULL, pufAllowStoredSiteWithProtocol);","if (DebugAlwaysTrue(!NeedSession || (DataList->Count > 0)))","{","if (CheckSafe(Params))"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["            Py_CLEAR(tmp);","        }","        *out = ClassDef(name, bases, keywords, body, decorator_list, lineno,","                        col_offset, end_lineno, end_col_offset, arena);","        if (*out == NULL) goto failed;","        return 0;","    }"],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["      if (me.second.m_count == 1) continue;","      int min_ser_len = 999999999;","      int max_ser_len = 0;","      int count = 0;","      int member_count = 0;","      bool all_same = true;","      if (me.second.m_has_this) {"],"label":0}
{"cve":"CVE-2024-23327","code_chunks":["if (!proxy_protocol_header_.has_value()) {","const ReadOrParseState read_header_state = readProxyHeader(buffer);","if (read_header_state != ReadOrParseState::Done) {","return read_header_state;","}","}"],"label":0}
{"cve":"PYSEC-2021-644","code_chunks":["const Tensor& handle = ctx->input(0);","const string& name = handle.scalar<tstring>()();","Tensor val;","OP_REQUIRES_OK(ctx, ctx->session_state()->GetTensor(name, &val));","ctx->set_output(0, val);","}",""],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["const char *next","= ptr; \/* XmlAttributeValueTok doesn't always set the last arg *\/","int tok = XmlAttributeValueTok(enc, ptr, end, &next);","#if defined(XML_DTD) || XML_GE == 1","if (! accountingDiffTolerated(parser, tok, ptr, next, __LINE__, account)) {","accountingOnAbort(parser);","return XML_ERROR_AMPLIFICATION_LIMIT_BREACH;"],"label":0}
{"cve":"CVE-2017-9949","code_chunks":["","if (dirent.direntlen == 0)","return 0;","","if (dirent.namelen != 0)","{"],"label":1}
{"cve":"CVE-2016-4563","code_chunks":["          i++;","        }","      stroke_polygon[i]=polygon_primitive[0];","      stroke_polygon[i].point=stroke_polygon[0].point;","      i++;","      stroke_polygon[i].primitive=UndefinedPrimitive;","      stroke_polygon[0].coordinates=(size_t) (p+q+2*closed_path+1);"],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["\tgval[ip[3]] += diff;","\tip += 5;","\tif ((g = ip[-1]) == -1) continue;","\tgval[g] += diff;","\twhile ((g = *ip++) != -1)","\t  gval[g] += diff;","      }"],"label":0}
{"cve":"CVE-2023-32233","code_chunks":["{","struct nft_objref_map *priv = nft_expr_priv(expr);","","priv->set->use++;","}","","static void nft_objref_map_destroy(const struct nft_ctx *ctx,"],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["sudo_getdomainname(void)","{","    debug_decl(sudo_getdomainname, SUDOERS_DEBUG_MATCH);","    debug_return_ptr(NULL);","}","#endif \/* HAVE_GETDOMAINNAME || SI_SRPC_DOMAIN *\/",""],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        if (PyByteArray_Check(result)) {","            PyErr_SetString(PyExc_TypeError,","                \"sum() can't sum bytearray [use b''.join(seq) instead]\");","            Py_DECREF(iter);","            return NULL;","        }","        Py_INCREF(result);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");"],"label":1}
{"cve":"CVE-2023-22742","code_chunks":["}","","if (cert.type == 0) {","git_error_set(GIT_ERROR_SSH, \"unable to get the host key\");","error = -1;","goto done;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","const TfLiteTensor* input_boxes;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kInputTensorBoxes, &input_boxes));","const int num_boxes = SizeOfDimension(input_boxes, 0);","const TfLiteTensor* input_scores;"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["bool& isvalid, CryptoKey& session_key) override {"],"label":1}
{"cve":"CVE-2022-23572","code_chunks":["const OpDef& op_def, const std::vector<const Tensor*>& input_tensors,","const std::vector<ShapeHandle>& input_tensors_as_shapes) {","const auto ret = full_type::SpecializeType(attrs_, op_def);","DCHECK(ret.status().ok()) << \"while instantiating types: \" << ret.status();","ret_types_ = ret.ValueOrDie();","","input_tensors_ = input_tensors;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["BYTE bitmapCacheV3CodecId;","WLog_INFO(TAG, \"BitmapCacheV3CodecIdCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 5)","return FALSE;",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, accum_scratch,","                                                       accum_scratch_size));","    }","    node->temporaries->data[4] = op_data->scratch_tensor_index + 4;","    TfLiteTensor* zero_points;","    TF_LITE_ENSURE_OK(","        context, GetTemporarySafe(context, node, \/*index=*\/4, &zero_points));"],"label":0}
{"cve":"CVE-2022-24793","code_chunks":["    if (src->type == PJ_DNS_TYPE_SRV) {","\tapply_name_table(nametable_count, nametable, &src->rdata.srv.target, ","\t\t\t pool, &dst->rdata.srv.target);","    } else if (src->type == PJ_DNS_TYPE_A) {","\tdst->rdata.a.ip_addr.s_addr =  src->rdata.a.ip_addr.s_addr;","    } else if (src->type == PJ_DNS_TYPE_AAAA) {","\tpj_memcpy(&dst->rdata.aaaa.ip_addr, &src->rdata.aaaa.ip_addr,"],"label":0}
{"cve":"CVE-2022-0521","code_chunks":["ut64 offset = 0, curpos;","attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);","offset += 6;","if (buf_offset + offset + 8 > sz) {","eprintf (\"Invalid amount of inner classes\\n\");","return NULL;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void bn_rec_tnaf_get(uint8_t *t, int8_t *beta, int8_t *gama, int8_t u, int w) {","if (u == -1) {","switch (w) {","*t = 2;"],"label":1}
{"cve":"CVE-2016-10190","code_chunks":["","if (!strncmp(p, \"bytes \", 6)) {","p     += 6;","s->off = strtoull(p, NULL, 10);","if ((slash = strchr(p, '\/')) && strlen(slash) > 0)","s->filesize = strtoull(slash + 1, NULL, 10);","}"],"label":0}
{"cve":"CVE-2020-5235","code_chunks":["(*size)++;","}","if (!pb_close_string_substream(stream, &substream))","return false;"],"label":1}
{"cve":"CVE-2020-13775","code_chunks":["CMessage EchoedMessage = Message;","for (CClient* pClient : GetClients()) {","if (pClient->HasEchoMessage() ||","(pClient != this && (m_pNetwork->IsChan(Message.GetParam(0)) ||","pClient->HasSelfMessage()))) {","EchoedMessage.SetNick(GetNickMask());","pClient->PutClient(EchoedMessage);"],"label":1}
{"cve":"CVE-2022-21725","code_chunks":["bool found_unknown_shapes = false;","const auto& op_info = op_context.op_info;","TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,","OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,","&found_unknown_shapes));","int per_output_ops = dims.kx * dims.ky == 1 ? 1 : dims.kx * dims.ky - 1;"],"label":0}
{"cve":"CVE-2018-18311","code_chunks":["However, if if the C<vsnprintf> is not available, will unfortunately","use the unsafe C<vsprintf> which can overrun the buffer (there is an","overrun check, but that may be too late).  Consider using","C<sv_vcatpvf> instead, or getting C<vsnprintf>.","","=cut","*\/"],"label":0}
{"cve":"CVE-2023-40589","code_chunks":["}","","Literal = (HuffTableLEC[MaskedBits] & 0xFF);","*HistoryPtr++ = Literal;","}",""],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["","if (_PyObject_LookupAttrId(obj, &PyId_name, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"name\\\" missing from alias\");"],"label":0}
{"cve":"CVE-2019-20393","code_chunks":["\/* there can be multiple instances, str is actually const char *** *\/","p = (const char ***)str;","if (!p[0]) {","\/* allocate initial array *\/","p[0] = calloc(2, sizeof(const char *));","LY_CHECK_ERR_GOTO(!p[0], LOGMEM(module->ctx), error);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["return Py_None;","}","","result = PyType_GenericNew(alias_type, NULL, NULL);"],"label":1}
{"cve":"CVE-2023-0302","code_chunks":["\t}","\treturn buf;","}","","\/**"," * @brief"," *"],"label":0}
{"cve":"CVE-2016-6870","code_chunks":["  mbs_needle.no_language = MBSTRG(current_language);","  mbs_needle.no_encoding = MBSTRG(current_internal_encoding)->no_encoding;","  mbs_needle.val = (unsigned char *)needle.data();","  mbs_needle.len = needle.size();","  if (!mbs_needle.len) {","    raise_warning(\"Empty delimiter.\");","    return false;"],"label":0}
{"cve":"CVE-2018-8795","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"CVE-2020-15202","code_chunks":["            T(2) *","            Eigen::numext::exp(T(0.5) +","                               (normMin * (normMin - sqrtFactor)) \/ T(4)) \/","            (normMin + sqrtFactor);","        const T diff = normMax - normMin;","","        if (((normMin < -kStdDevsInsideBoundsToUseRandnSampler) &&"],"label":0}
{"cve":"CVE-2023-28096","code_chunks":["","if (item->child != NULL)","{","cJSON_Delete(child);","item->child = NULL;","}",""],"label":1}
{"cve":"CVE-2019-13217","code_chunks":["ady -= abs(base) * adx;","if (x1 > n) x1 = n;","if (x < x1) {","LINE_OP(output[x], inverse_db_table[y]);","for (++x; x < x1; ++x) {"],"label":1}
{"cve":"CVE-2017-3733","code_chunks":["* If in encrypt-then-mac mode calculate mac from encrypted record. All","* the details below are public so no timing details can leak.","*\/","if (SSL_USE_ETM(s) && s->read_hash) {","unsigned char *mac;","mac_size = EVP_MD_CTX_size(s->read_hash);","OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);"],"label":1}
{"cve":"CVE-2022-0476","code_chunks":["\t\t\t0);","","\t\tobj->streams.memories64.base_rva = memory64_list.base_rva;","\t\toffset = entry->location.rva + sizeof (memory64_list);","\t\tfor (i = 0; i < memory64_list.number_of_memory_ranges && offset < obj->size; i++) {","\t\t\tstruct minidump_memory_descriptor64 *desc = R_NEW (struct minidump_memory_descriptor64);","\t\t\tif (!desc) {"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"comprehension field \\\"ifs\\\" changed size during iteration\");","goto failed;","}"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);"],"label":1}
{"cve":"CVE-2022-27008","code_chunks":["        ret = njs_value_to_integer(vm, value, &end);","        if (njs_slow_path(ret != NJS_OK)) {","            return ret;","        }","    }","","    end = (end < 0) ? njs_max(length + end, 0) : njs_min(end, length);"],"label":0}
{"cve":"CVE-2023-51698","code_chunks":["ComicsDocument *comics_document,","GError         **error)","{","if (g_content_type_is_a (mime_type, \"application\/x-cbr\") ||","g_content_type_is_a (mime_type, \"application\/x-rar\")) {","if (ev_archive_set_archive_type (comics_document->archive, EV_ARCHIVE_TYPE_RAR))"],"label":0}
{"cve":"CVE-2020-25669","code_chunks":["","\t\/*","\t * It is OK that we check sunkbd->enabled without pausing serio,","\t * as we only want to catch true->false transition that will","\t * happen once and we will be woken up for it.","\t *\/","\twait_event_interruptible_timeout(sunkbd->wait,"],"label":0}
{"cve":"CVE-2021-23521","code_chunks":["bool TemporaryFile::deleteTemporaryFile() const","{","        for (int i = 5; --i >= 0;)","    {","        if (temporaryFile.isDirectory() ? temporaryFile.deleteRecursively() : temporaryFile.deleteFile())","            return true;",""],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)With_type);","    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {"],"label":0}
{"cve":"CVE-2019-17177","code_chunks":["\t\t\t\t{","\t\t\t\t\tfprintf(stderr,  \"Could not reallocate string buffer.\\n\");","\t\t\t\t\texit(-5);","\t\t\t\t}","","\t\t\t\ttmp[cs++] = '&';","\t\t\t\ttmp[cs++] = 'a';"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["}","if (_PyObject_HasAttrId(obj, &PyId_col_offset)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_col_offset);","if (tmp == NULL) goto failed;","res = obj2ast_int(tmp, &col_offset, arena);"],"label":1}
{"cve":"CVE-2017-3733","code_chunks":["         * doing a handshake for the first time","         *\/","        if (SSL_in_init(s) && (type == SSL3_RT_APPLICATION_DATA) &&","            (s->enc_read_ctx == NULL)) {","            al = SSL_AD_UNEXPECTED_MESSAGE;","            SSLerr(SSL_F_SSL3_READ_BYTES, SSL_R_APP_DATA_IN_HANDSHAKE);","            goto f_err;"],"label":0}
{"cve":"CVE-2019-3556","code_chunks":["          folly::writeFull(file.fd(), key.data(), key.size());","          folly::writeFull(file.fd(), \"\\n\", 1);","        }","      }","      break;","  }","}"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["      TfLiteIntArray* input_quantized_size = TfLiteIntArrayCopy(input->dims);","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_quantized,","                                                       input_quantized_size));","    }","    node->temporaries->data[1] = op_data->scratch_tensor_index + 1;","    TfLiteTensor* hidden_state_quantized;","    TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, \/*index=*\/1,"],"label":0}
{"cve":"CVE-2017-6439","code_chunks":["return NULL;","}","return parse_string_node(object, size);","","if (size*2 < size) {","PLIST_BIN_ERR(\"%s: Integer overflow when calculating BPLIST_UNICODE data size.\\n\", __func__);"],"label":1}
{"cve":"CVE-2019-1010317","code_chunks":["int ParseCaffHeaderConfig (FILE *infile, char *infilename, char *fourcc, WavpackContext *wpc, WavpackConfig *config)","{","uint32_t chan_chunk = 0, desc_chunk = 0, channel_layout = 0, bcount;","unsigned char *channel_identities = NULL;","unsigned char *channel_reorder = NULL;","int64_t total_samples = 0, infilesize;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"],"label":1}
{"cve":"CVE-2022-2549","code_chunks":["} else {","if (sdump->X3DDump) {","gf_fprintf(sdump->trace, \"<field name=\\\"%s\\\" type=\\\"%s\\\" accessType=\\\"%s\\\"\",","field.name, gf_sg_vrml_get_field_type_name(field.fieldType), gf_sg_vrml_get_event_type_name(field.eventType, 1));","} else {","gf_fprintf(sdump->trace, \"<field name=\\\"%s\\\" type=\\\"%s\\\" vrml97Hint=\\\"%s\\\"\","],"label":1}
{"cve":"PYSEC-2020-303","code_chunks":["if (TF_PREDICT_FALSE(sizeof(T) < sizeof(double) && std::isinf(*out) &&","std::isfinite(as_double))) {","return ErrorOutOfRangeDouble;","}"],"label":1}
{"cve":"CVE-2020-11096","code_chunks":["\t\t\tWLog_Print(update->log, WLOG_DEBUG, \"Primary Drawing Order %s\", orderName);","\t\t\trc = IFCALLRESULT(FALSE, primary->FastIndex, context, &primary->fast_index);","\t\t}","\t\tbreak;","","\t\t{","\t\t\tWLog_Print(update->log, WLOG_DEBUG, \"Primary Drawing Order %s\", orderName);"],"label":0}
{"cve":"CVE-2022-1899","code_chunks":["rc = 2;","}","} else {","rc = r_utf8_decode (buf + needle - from, to - needle, &r);","if (rc > 1) {","str_type = R_STRING_TYPE_UTF8;","}"],"label":1}
{"cve":"CVE-2022-0696","code_chunks":["    {","\tint\ti;","\tchar_u\t*val = NULL;","\tsize_t\tvallen = 0;","\tsize_t\tattrlen = len;","","\t\tfor (i = 0; i < (int)len; ++i)"],"label":0}
{"cve":"CVE-2018-14882","code_chunks":["                                  (i & NI_NODEADDR_FLAG_LINKLOCAL) ? \"L\" : \"\",","                                  (i & NI_NODEADDR_FLAG_COMPAT) ? \"C\" : \"\",","                                  (i & NI_NODEADDR_FLAG_ALL) ? \"A\" : \"\",","                                  (i & NI_NODEADDR_FLAG_TRUNCATE) ? \"T\" : \"\"));","\t\t\tbreak;","\t\t\tif (needcomma)","\t\t\t\tND_PRINT((ndo,\", \"));"],"label":0}
{"cve":"CVE-2020-27764","code_chunks":["            GetPixelAlpha(p)*GetPixelAlpha(p);","          channel_statistics[OpacityChannel].sum_cubed+=(double)","            GetPixelAlpha(p)*GetPixelAlpha(p)*GetPixelAlpha(p);","          channel_statistics[OpacityChannel].sum_fourth_power+=(double)","            GetPixelAlpha(p)*GetPixelAlpha(p)*GetPixelAlpha(p)*GetPixelAlpha(p);","          histogram[ScaleQuantumToMap(GetPixelAlpha(p))].opacity++;","        }"],"label":0}
{"cve":"CVE-2023-36327","code_chunks":["#undef bn_get_prime"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["\/* Remember only PE-COFF and FIT images *\/","if (efi_check_pe(buffer, buffer_size, NULL) != EFI_SUCCESS) {","#ifdef CONFIG_FIT","if (!fit_check_format(buffer))","return;","\/*","* FIT images of type EFI_OS are started via command bootm."],"label":1}
{"cve":"CVE-2018-6334","code_chunks":["max_file_size = atol(value);","}","","free(param);","free(value);","continue;"],"label":1}
{"cve":"CVE-2021-43860","code_chunks":["                                        FLATPAK_TRANSACTION_OPERATION_INSTALL_BUNDLE,","                                        data->file, metadata, FALSE, error))","        return FALSE;","    }","","  return TRUE;","}"],"label":0}
{"cve":"CVE-2021-42782","code_chunks":["sc_pkcs15_pubkey_t *key = NULL;","int r;","","cert_info.value.value = NULL;","r = coolkey_get_certificate(p15card->card, obj, &cert_info.value);","if (r < 0) {","goto fail;"],"label":1}
{"cve":"PYSEC-2021-731","code_chunks":["int alloc_size = TfLiteIntArrayGetSizeInBytes(size);","if (alloc_size <= 0) return NULL;","TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);","if (!ret) return ret;","ret->size = size;","return ret;"],"label":0}
{"cve":"CVE-2022-39347","code_chunks":["BOOL drive_file_query_directory(DRIVE_FILE* file, UINT32 FsInformationClass, BYTE InitialQuery,","const WCHAR* path, UINT32 PathWCharLength, wStream* output)","{","size_t length;","WCHAR* ent_path;"],"label":0}
{"cve":"CVE-2022-25297","code_chunks":["FileType HttpFile::getFileType() const","{","    return implPtr_->getFileType();","}","","void HttpFile::setFile(const char *data, size_t length)","{"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT32 drawGdiPlusSupportLevel;","UINT32 GdipVersion;","UINT32 drawGdiplusCacheLevel;","WLog_INFO(TAG,","\"DrawGdiPlusCacheCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));"],"label":0}
{"cve":"CVE-2023-4722","code_chunks":["if (p && p->value.lfrac.den) {","tkw->pid_dur = p->value.lfrac;","if (tkw->pid_dur.num<0) tkw->pid_dur.num = -tkw->pid_dur.num;","if (max_dur.num * (s64) tkw->pid_dur.den < (s64) max_dur.den * tkw->pid_dur.num) {","max_dur.num = tkw->pid_dur.num;","max_dur.den = tkw->pid_dur.den;","}"],"label":1}
{"cve":"CVE-2022-26530","code_chunks":["\t\t\treturn result;","\t\t}","\t}","","\tif (line_mode == LM_INSIDE) {","\t\tstate.args.colors.line = state.args.colors.inside;","\t} else if (line_mode == LM_RING) {"],"label":0}
{"cve":"CVE-2017-10965","code_chunks":["                                fullmatch = FALSE;","\t\t\t\twhile (*nick != '\\0' && !i_isalnum(*nick))","\t\t\t\t\tnick++;","\t\t\t}","","\t\t\tif (*nick == '\\0') {","\t\t\t\t\/* yes, match! *\/"],"label":0}
{"cve":"CVE-2023-5377","code_chunks":["if (ptr->version==1) s->size++;","if (ptr->layout.stream_structure & 1) {","s->size += 1;","if (ptr->layout.definedLayout==0) {","u32 i;","if (ptr->version==1) s->size++;"],"label":0}
{"cve":"CVE-2018-18837","code_chunks":["while(*s && d < e) {","if(unlikely(*s == '%')) {","if(likely(s[1] && s[2])) {","*d++ = from_hex(s[1]) << 4 | from_hex(s[2]);","s += 2;","}","}"],"label":1}
{"cve":"CVE-2018-16393","code_chunks":["mscfs_check_cache(priv->fs);","","for(x = 0; x < fs->cache.size; x++) {","u8* oid= fs->cache.array[x].objectId.id;","sc_debug(card->ctx, SC_LOG_DEBUG_NORMAL,","\"FILE: %02X%02X%02X%02X\\n\",","oid[0],oid[1],oid[2],oid[3]);"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["","\t\t\t\tND_PRINT(\"Format %s (%u), HwInfo %s (%u), Timestamp \",","\t\t         tok2str(ts_format_str, \"Unknown\", ts_format),","\t\t         ts_format,","\t\t         tok2str(hw_info_str, \"Unknown\", hw_info),","\t\t         hw_info);","\t\tswitch (ts_format) {"],"label":0}
{"cve":"CVE-2021-3770","code_chunks":["tabstop_set(p_vts, &buf->b_p_vts_array);","else","buf->b_p_vts_array = NULL;","#endif"],"label":1}
{"cve":"CVE-2018-8794","code_chunks":["{","int y;","bmpdata = (uint8 *) xmalloc(width * height * Bpp);","for (y = 0; y < height; y++)","{","in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)],"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus EluPrepare(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output = GetOutput(context, node, 0);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","if (input->type == kTfLiteInt8) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp_write_bin(uint8_t *bin, int len, const fp_t a);"],"label":1}
{"cve":"CVE-2022-41886","code_chunks":["}  ","namespace generator {","","#define DECLARE_MAP_FUNCTOR(Mode)                                         \\","  template <>                                                             \\","  float MapCoordinate<GPUDevice, Mode>::operator()(const float out_coord, \\","                                                   const DenseIndex len); \\"],"label":0}
{"cve":"CVE-2016-3134","code_chunks":["const struct xt_entry_target *t;","unsigned int verdict;","","if (!unconditional(e))","return false;","t = arpt_get_target_c(e);","if (strcmp(t->u.user.name, XT_STANDARD_TARGET) != 0)"],"label":0}
{"cve":"CVE-2020-1921","code_chunks":["    m_cursor = offset;","  } else if (whence == SEEK_END) {","    if (m_len + offset < 0) return false;","    m_cursor = m_len + offset;","  } else {","    return false;","  }"],"label":0}
{"cve":"CVE-2018-20457","code_chunks":["\t\t\tif (op->operands[operand].reg > 31) {","\t\t\t\treturn false;","\t\t\t}","\t\t\tbreak;","\t\t\top->operands_count ++;","\t\t\top->operands[operand].type = ARM_GPR;","\t\t\top->operands[operand].reg_type = ARM_REG32;"],"label":0}
{"cve":"CVE-2018-14461","code_chunks":["ND_PRINT((ndo, \"\\n\\t\\t  CV Types (0x%02x) = [%s]\",","*(tptr+3),","bittok2str(ldp_fec_martini_ifparm_vccv_cv_values, \"none\", *(tptr+3))));","break;","","print_unknown_data(ndo, tptr+2, \"\\n\\t\\t  \", vc_info_tlv_len-2);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    TfLiteTensor* row_sums;","    TF_LITE_ENSURE_OK(context,","                      GetTemporarySafe(context, node, \/*index=*\/5, &row_sums));","    row_sums->type = kTfLiteInt32;","    row_sums->allocation_type = kTfLiteArenaRwPersistent;","    int row_sums_dims[2] = {2, num_units};","    if (!TfLiteIntArrayEqualsArray(row_sums->dims, 2, row_sums_dims)) {"],"label":0}
{"cve":"CVE-2020-35965","code_chunks":["};","","static const AVClass exr_class = {","    .class_name = \"EXR\",","    .item_name  = av_default_item_name,","    .option     = options,","    .version    = LIBAVUTIL_VERSION_INT,"],"label":0}
{"cve":"CVE-2016-10170","code_chunks":["static void bs_open_read (Bitstream *bs, void *buffer_start, void *buffer_end)","{","    bs->error = bs->sr = bs->bc = 0;","    bs->ptr = (bs->buf = buffer_start) - 1;","    bs->end = buffer_end;","    bs->wrap = bs_read;","}"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[]={0,0};","","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void ep4_mul_slide(ep4_t r, const ep4_t p, const bn_t k) {","ep4_t t[1 << (EP_WIDTH - 1)], q;","int i, j, l;","uint8_t win[RLC_FP_BITS + 1];","","ep4_null(q);"],"label":1}
{"cve":"CVE-2023-22741","code_chunks":["int stun_parse_attribute(stun_msg_t *msg, unsigned char *p);"],"label":1}
{"cve":"CVE-2022-1533","code_chunks":["if (dir == '>') {","pos = *decoded_size;","}","pos -= c - 10;","dir = 0;","if (pos < 0 || pos > *decoded_size) {"],"label":1}
{"cve":"CVE-2016-3672","code_chunks":["\t\tmm->mmap_base = mm->mmap_legacy_base;","\t\tmm->get_unmapped_area = arch_get_unmapped_area;","\t} else {","\t\tmm->mmap_base = mmap_base(random_factor);","\t\tmm->get_unmapped_area = arch_get_unmapped_area_topdown;","\t}","}"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["std::vector<std::vector<std::vector<int>>> best_paths(batch_size);","std::vector<float> log_probs;","","TfLiteTensor* log_probabilities = GetOutput(context, node, 3 * top_paths);","float* log_probabilities_output = GetTensorData<float>(log_probabilities);","","for (int b = 0; b < batch_size; ++b) {"],"label":1}
{"cve":"CVE-2022-3234","code_chunks":["PBYTE(curwin->w_cursor, c);","}","}","else if (virtual_op && curwin->w_cursor.lnum == oap->end.lnum)"],"label":1}
{"cve":"CVE-2021-30145","code_chunks":["mf_t *mf = talloc_zero(talloc_ctx, mf_t);","mf->log = log;","","if (filename[0] == '@') {","struct stream *s = stream_create(filename + 1,","d->stream_origin | STREAM_READ, d->cancel, d->global);"],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["        return NULL;","    needSep = XML_TRUE;","  }","","  hashTableIterInit(&iter, &(dtd->generalEntities));","  for (;;) {","    const XML_Char *s;"],"label":0}
{"cve":"CVE-2016-9841","code_chunks":["if (wnext == 0) {           \/* very common case *\/","from += wsize - op;","if (op < len) {         \/* some from window *\/","len -= op;","do {","PUP(out) = PUP(from);"],"label":1}
{"cve":"PYSEC-2022-146","code_chunks":["int64_t TensorByteSize(const TensorProto& t) {","int64_t num_elems = TensorShape(t.tensor_shape()).num_elements();","return num_elems < 0 ? -1 : num_elems * DataTypeSize(t.dtype());","}"],"label":1}
{"cve":"CVE-2020-14398","code_chunks":["const int USECS_WAIT_PER_RETRY = 100000;","int retries = 0;","#undef DEBUG_READ_EXACT","#ifdef DEBUG_READ_EXACT","char* oout=out;","unsigned int nn=n;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["}","scratch_tensor->allocation_type = kTfLiteArenaRw;","const int scratch_dimension[2] = {n_batch, n_cell};","if (!TfLiteIntArrayEqualsArray(scratch_tensor->dims, 2,","scratch_dimension)) {","TfLiteIntArray* scratch_buffer_size = TfLiteIntArrayCreate(2);"],"label":1}
{"cve":"PYSEC-2022-91","code_chunks":["int64_t TensorByteSize(const TensorProto& t) {","int64_t num_elems = TensorShape(t.tensor_shape()).num_elements();","return num_elems < 0 ? -1 : num_elems * DataTypeSize(t.dtype());","}"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["static const int kBufferSize = 64;","absl::InlinedVector<char, 4> chars(kBufferSize);","chars[kBufferSize - 1] = '\\0';","CUresult res = cuDeviceGetPCIBusId(chars.begin(), kBufferSize - 1, device);","if (res != CUDA_SUCCESS) {","LOG(ERROR) << \"failed to query PCI bus id for device: \" << ToString(res);"],"label":1}
{"cve":"CVE-2017-12678","code_chunks":["tag->frameList(\"TDAT\").size() == 1)","{","TextIdentificationFrame *tdrc =","dynamic_cast<TextIdentificationFrame *>(tag->frameList(\"TDRC\").front());","UnknownFrame *tdat = static_cast<UnknownFrame *>(tag->frameList(\"TDAT\").front());","","if(tdrc &&"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input1;","const TfLiteTensor* input2;","if (node->inputs->size == 2) {","input1 = GetInput(context, node, 0);","input2 = GetInput(context, node, 1);","} else {"],"label":1}
{"cve":"CVE-2016-5418","code_chunks":["#endif","\/* Skip leading '\/'. *\/","if (*src == '\/') {","if (a->flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS) {"],"label":1}
{"cve":"CVE-2018-6621","code_chunks":["bytestream2_get_bytes_left(&gb) < slice_end) {","av_log(avctx, AV_LOG_ERROR, \"Incorrect slice size\\n\");","return AVERROR_INVALIDDATA;","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    node->temporaries->data[1] = op_data->scratch_tensor_index + 1;","    TfLiteTensor* hidden_state_quantized;","    TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, \/*index=*\/1,","                                                &hidden_state_quantized));","    hidden_state_quantized->type = input_weights->type;","    hidden_state_quantized->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqual(hidden_state_quantized->dims,"],"label":0}
{"cve":"CVE-2018-14354","code_chunks":["mutt_buffer_init(&err);","err.data = errstr;","err.dsize = sizeof(errstr);","snprintf(mbox, sizeof(mbox), \"%smailboxes \\\"%s\\\"\", subscribe ? \"\" : \"un\", path);","if (mutt_parse_rc_line(mbox, &token, &err))","mutt_debug(1, \"Error adding subscribed mailbox: %s\\n\", errstr);","FREE(&token.data);"],"label":1}
{"cve":"CVE-2019-15161","code_chunks":["\tSleep(secs*1000);","#else","\tunsigned secs_remaining;","","\tif (secs <= 0)","\t\treturn;","\tsecs_remaining = secs;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["return kTfLiteError;","}","","const TfLiteTensor* fft_length = GetInput(context, node, kFftLengthTensor);","const RuntimeShape fft_length_shape = GetTensorShape(fft_length);","","TF_LITE_ENSURE_EQ(context, NumDimensions(fft_length), 1);"],"label":1}
{"cve":"CVE-2017-12665","code_chunks":["if ((buffer == (unsigned char *) NULL) ||","(packed_scanline == (unsigned char *) NULL) ||","(scanline == (unsigned char *) NULL))","ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");","(void) ResetMagickMemory(scanline,0,row_bytes);","(void) ResetMagickMemory(packed_scanline,0,(size_t) (row_bytes+MaxCount));","\/*"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["Py_ssize_t len;","Py_ssize_t i;","if (!PyList_Check(tmp)) {","PyErr_Format(PyExc_TypeError, \"ExceptHandler field \\\"body\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","goto failed;","}"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["FSCK_MSG_GITMODULES_LARGE,","\".gitmodules too large to parse\");","}","","data.oid = oid;","data.options = options;"],"label":1}
{"cve":"CVE-2016-2315","code_chunks":["static void finish_object(struct object *obj, const char *name, void *cb_data)","{","struct rev_list_info *info = cb_data;","if (obj->type == OBJ_BLOB && !has_object_file(&obj->oid))"],"label":0}
{"cve":"CVE-2023-22741","code_chunks":["  return p;","}","","void stun_init_buffer(stun_buffer_t *p) {","  p->data = NULL;","  p->size = 0;","}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_rec_rtnaf(int8_t *tnaf, int *len, const bn_t k, int8_t u, int m, int w) {","int i, l;","bn_t tmp, r0, r1;","int8_t beta[64], gama[64];"],"label":1}
{"cve":"CVE-2018-12562","code_chunks":["return;","}","if (isConnected() || proc) {","return;","}",""],"label":1}
{"cve":"CVE-2018-8796","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2019-13224","code_chunks":["if (IS_NOT_NULL(einfo)) einfo->par = (UChar* )NULL;","","if (ci->pattern_enc != ci->target_enc) {","r = conv_encoding(ci->pattern_enc, ci->target_enc, pattern, pattern_end,"],"label":1}
{"cve":"CVE-2020-14147","code_chunks":["case 'c': return getnum(fmt, 1);","case 'i': case 'I': {","int sz = getnum(fmt, sizeof(int));","if (sz > MAXINTSIZE)","luaL_error(L, \"integral size %d is larger than limit of %d\",","sz, MAXINTSIZE);"],"label":1}
{"cve":"CVE-2020-36316","code_chunks":["static int pad_pkcs1(bn_t m, int *p_len, int m_len, int k_len, int operation) {","uint8_t *id, pad = 0;","int len, result = RLC_OK;","bn_t t;","","bn_null(t);"],"label":1}
{"cve":"PYSEC-2019-234","code_chunks":["for (int input_index : GpuGridRangeX(input_total_size)) {","const Index input_segment_index = input_index \/ inner_dim_size;","const Index segment_offset = input_index % inner_dim_size;","const Index output_segment_index = segment_ids[input_segment_index];","if (output_segment_index < 0 || output_segment_index >= output_total_size) {","continue;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE(context, bw_cell_state != nullptr);","","if (!params->merge_outputs) {","TfLiteTensor* bw_output = GetOutput(context, node, kBwOutputTensor);","TfLiteIntArray* bw_output_size = TfLiteIntArrayCreate(3);","bw_output_size->data[0] = time_major ? max_time : n_batch;","bw_output_size->data[1] = time_major ? n_batch : max_time;"],"label":1}
{"cve":"CVE-2016-5418","code_chunks":["* We've just copied zero or more path elements, not including the","* final '\/'.","*\/","if (dest == a->name) {","\/*","* Nothing got copied.  The path must have been something","* like '.' or '\/' or '.\/' or '\/.\/.\/.\/.\t\t *\/"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    auto* op_data = reinterpret_cast<OpData*>(node->user_data);","    op_data->compute_row_sums = true;","    TfLiteIntArrayFree(node->temporaries);","    node->temporaries = TfLiteIntArrayCreate(6);","    node->temporaries->data[0] = op_data->scratch_tensor_index;","    TfLiteTensor* input_quantized;","    TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, \/*index=*\/0,"],"label":0}
{"cve":"PYSEC-2021-834","code_chunks":["  session_options.config.mutable_graph_options()","      ->mutable_optimizer_options()","      ->set_opt_level(OptimizerOptions::L0);","  std::unique_ptr<Session> session(NewSession(session_options));","  ASSERT_TRUE(session != nullptr) << \"Failed to create session\";","  TF_ASSERT_OK(session->Create(graph_def)) << \"Can't create test graph\";","  std::vector<Tensor> outputs;"],"label":0}
{"cve":"CVE-2021-4043","code_chunks":["\t\t\twhile (remain) {","\t\t\t\tISOM_DECREASE_SIZE(s, 1)","\t\t\t\tptr->layout.layouts[ptr->layout.channels_count].position = gf_bs_read_u8(bs);","\t\t\t\tremain--;","\t\t\t\tif (ptr->layout.layouts[ptr->layout.channels_count].position == 126) {","\t\t\t\t\tISOM_DECREASE_SIZE(s, 3)","\t\t\t\t\tptr->layout.layouts[ptr->layout.channels_count].azimuth = gf_bs_read_int(bs, 16);"],"label":0}
{"cve":"CVE-2023-28101","code_chunks":["gboolean remove;","g_auto(GStrv) groups = NULL;","gsize i;","","if (g_key_file_has_key (metakey, FLATPAK_METADATA_GROUP_CONTEXT, FLATPAK_METADATA_KEY_SHARED, NULL))","{"],"label":0}
{"cve":"CVE-2022-36017","code_chunks":["input_quantized.flat<quint8>());","AddInputFromArray<quint8>(bias_quantized.shape(),","bias_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});","AddInputFromArray<float>(TensorShape({1}), {input_max});"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","","  if (IsDynamicTensor(output)) {","    TF_LITE_ENSURE_OK(context,","                      ResizeOutputTensor(context, data, segment_ids, output));"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["rtcp_port = pj_sockaddr_get_port(rem_rtp) + 1;","pj_sockaddr_set_port(rem_rtcp, (pj_uint16_t)rtcp_port);","}","}","","\/* Check if remote indicates the desire to use rtcp-mux in its SDP. *\/"],"label":1}
{"cve":"CVE-2021-3744","code_chunks":["\tunsigned int authsize;","\tunsigned int jobid;","\tunsigned int ilen;","\tbool in_place = true; \/* Default value *\/","\t__be64 *final;","\tint ret;",""],"label":0}
{"cve":"CVE-2023-6546","code_chunks":["static void gsm_cleanup_mux(struct gsm_mux *gsm, bool disc)","{","int i;","struct gsm_dlci *dlci = gsm->dlci[0];","struct gsm_msg *txq, *ntxq;","","gsm->dead = true;"],"label":1}
{"cve":"CVE-2024-0727","code_chunks":["    if (ctype_nid == NID_pkcs7_signed) {","        if (p7->d.sign == NULL)","            return 0;","        mdalgs = p7->d.sign->md_algs;","    } else {","        mdalgs = NULL;","    }"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["        if (_PyObject_LookupAttrId(obj, &PyId_handlers, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"handlers\\\" missing from Try\");","            return 1;","        }"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["bool IsPadOpSupported(const TfLiteRegistration* registration,","const TfLiteNode* node, TfLiteContext* context) {","const TfLiteTensor* padding;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &padding));","if (!IsConstantTensor(padding)) {","TF_LITE_KERNEL_LOG(context,","\"%s: Only constant padding is supported for PAD.\","],"label":0}
{"cve":"CVE-2018-20762","code_chunks":["","\t\treturn GF_OK;","\t}","","\treturn GF_OK;","}",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_read_control_capability_set(wStream* s, UINT16 length, rdpSettings* settings)","{","WINPR_UNUSED(settings);","if (length < 12)","return FALSE;","","Stream_Seek_UINT16(s); \/* controlFlags (2 bytes) *\/"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["GetTemporary(context, node, kInputQuantized);","input_quantized->type = input_to_output_weights->type;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        return 1;","    }","    if (isinstance) {","        *out = Del;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject *)AugLoad_type);"],"label":0}
{"cve":"CVE-2016-10249","code_chunks":["void *jas_realloc(void *ptr, size_t size)","{","void *result;","JAS_DBGLOG(101, (\"jas_realloc called with %x,%zu\\n\", ptr, size));","result = realloc(ptr, size);","JAS_DBGLOG(100, (\"jas_realloc(%p, %zu) -> %p\\n\", ptr, size, result));","return result;"],"label":1}
{"cve":"CVE-2022-24792","code_chunks":["* fmt header data.","*\/","if (wavehdr.fmt_hdr.len > 16) {","size_to_read = wavehdr.fmt_hdr.len - 16;","status = pj_file_setpos(fport->fd_list[index], size_to_read,","PJ_SEEK_CUR);","if (status != PJ_SUCCESS) {"],"label":1}
{"cve":"CVE-2020-35534","code_chunks":["if (img->encType == 3 && img->nPlanes == 4 && img->nBits > 8)","{","img->planeBuf =","(int16_t *)malloc(img->planeHeight * img->planeWidth * img->nPlanes *","((img->samplePrecision + 7) >> 3));","if (!img->planeBuf)","return -1;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const float cell_clip = params->cell_clip;","const float proj_clip = params->proj_clip;","","const TfLiteTensor* output_tensor = GetOutput(context, node, kOutputTensor);","","auto* cell_state_params = reinterpret_cast<TfLiteAffineQuantization*>(","cell_state->quantization.params);"],"label":1}
{"cve":"CVE-2020-23930","code_chunks":["if (dump_iod) {","GF_InitialObjectDescriptor *iod = (GF_InitialObjectDescriptor *)gf_isom_get_root_od(file);","if (!iod) {","fprintf(stderr, \"File %s has no IOD\", inName);","} else {","char szName[GF_MAX_PATH+10];","FILE *iodf;"],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["}","","fit_size = fdt_totalsize(buffer_p);","","if (fit_size > buffer_size) {","debug(\"FPGA: FIT image is larger than available buffer.\\n\");"],"label":1}
{"cve":"CVE-2019-19054","code_chunks":["\tv4l2_set_subdevdata(sd, state);","\t\/* FIXME - fix the formatting of dev->v4l2_dev.name and use it *\/","\tsnprintf(sd->name, sizeof(sd->name), \"%s\/888-ir\", dev->name);","\tsd->grp_id = CX23885_HW_888_IR;","","\tret = v4l2_device_register_subdev(&dev->v4l2_dev, sd);","\tif (ret == 0) {"],"label":0}
{"cve":"CVE-2023-46407","code_chunks":["            repeat_count_zero = 0;","            level2_codecounts[prev] += extra;","        } else if (len == 17) {","            int extra = 3 + get_bits(gb, 3);","            if (repeat_count_zero > 0)","                extra += 8 * (repeat_count_zero - 2) - repeat_count_zero;","            extra = FFMIN(extra, dist->alphabet_size - i);"],"label":0}
{"cve":"CVE-2018-8794","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"PYSEC-2021-465","code_chunks":["    OP_REQUIRES_OK(","        context, context->GetAttr(\"half_pixel_centers\", &half_pixel_centers_));","  }","","  void Compute(OpKernelContext* context) override {","    const auto& in_min_tensor = context->input(2);","    OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_min_tensor.shape()),"],"label":0}
{"cve":"CVE-2021-44108","code_chunks":["","    if (sendmsg.http.location)","        ogs_free(sendmsg.http.location);","","    return OGS_OK;","}",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["      std::vector<optimized_ops::TTypes<float>::UnalignedConstMatrix> input_list_t;","","  for (std::size_t t = 0; t < max_time; ++t) {","    input_list_t.emplace_back(","        GetTensorData<float>(inputs) + t * batch_size * num_classes, batch_size,","        num_classes);","  }"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;"],"label":0}
{"cve":"CVE-2019-20807","code_chunks":["\tea.amount = 1;","\twhile (*ea.arg == *ea.cmd)\t\t\/* count number of '>' or '<' *\/","\t{","\t    ++ea.arg;","\t    ++ea.amount;","\t}","\tea.arg = skipwhite(ea.arg);"],"label":0}
{"cve":"CVE-2021-33363","code_chunks":["} else {","ptr->content_encoding = (char*)gf_malloc(sizeof(char)*string_len);","if (!ptr->content_encoding) return GF_OUT_OF_MEM;","memcpy(ptr->content_encoding, buf+string_start, string_len);","}"],"label":1}
{"cve":"CVE-2022-23567","code_chunks":["    Tensor *output_values = nullptr;","    Tensor dense_gathered;","    const int64_t nnz = indices_t->dim_size(0);","    OP_REQUIRES_OK(ctx,","                   ctx->allocate_output(0, TensorShape({nnz}), &output_values));","    OP_REQUIRES_OK(","        ctx, ctx->allocate_temp(DataTypeToEnum<T>::value, TensorShape({nnz}),"],"label":0}
{"cve":"CVE-2019-7397","code_chunks":["                *q++=ScaleQuantumToChar(ClampToQuantum(GetPixelLuma(","                  tile_image,p)));","                p+=GetPixelChannels(tile_image);","              }","            }","#if defined(MAGICKCORE_ZLIB_DELEGATE)","            if (compression == ZipCompression)"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["bool (*func)(bool, bool)) {","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"PYSEC-2022-136","code_chunks":["}","","Status InferenceContext::Concatenate(ShapeHandle s1, ShapeHandle s2,","                                     ShapeHandle* out) {","  if (!RankKnown(s1) || !RankKnown(s2)) {","    return ReturnUnknownShape(out);","  }"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":[],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");"],"label":1}
{"cve":"CVE-2017-3733","code_chunks":["if (type == SSL3_RT_APPLICATION_DATA &&","u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&","s->compress == NULL && s->msg_callback == NULL &&","!SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&","EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &","EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {","unsigned char aad[13];"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        switch (expr1->kind) {","                break;","                ast_error(c, ch, \"illegal expression for augmented assignment\");","                return NULL;","        }","","        ch = CHILD(n, 2);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["    TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_dims));","  }","","  return kTfLiteOk;","}","","TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {"],"label":0}
{"cve":"CVE-2022-31624","code_chunks":["    db_off= 0;","    db_len_off= 0;","#endif \/*x86_64*\/","  }","","  *name= *(char **) (((char *) thd) + db_off);","  *len= *((int *) (((char*) thd) + db_len_off));"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["return EvalFloat(input, input_weights, recurrent_weights, bias, params,","hidden_state, output);","case kTfLiteInt8: {","TfLiteTensor* input_quantized = GetTemporary(context, node, 0);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["bn_rec_naf(naf, &l, k, EP_WIDTH);","","ep2_set_infty(r);","for (i = l - 1; i >= 0; i--) {","ep2_dbl(r, r);","","n = naf[i];"],"label":1}
{"cve":"CVE-2018-20181","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["","    isinstance = PyObject_IsInstance(obj, (PyObject *)Eq_type);","    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {","        *out = Eq;"],"label":0}
{"cve":"CVE-2020-26270","code_chunks":["GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,","const absl::Span<const int>& seq_lengths, bool time_major,","cudnnDataType_t data_type) {","CHECK_GT(max_seq_length, 0);","int dims[] = {batch_size, data_size, 1};","int strides[] = {dims[1] * dims[2], dims[2], 1};","TensorDescriptor tensor_desc = CreateTensorDescriptor();"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["","    HHVM_RC_STR_SAME(OPENSSL_VERSION_TEXT);","","    HHVM_RC_INT_SAME(X509_PURPOSE_SSL_CLIENT);","    HHVM_RC_INT_SAME(X509_PURPOSE_SSL_SERVER);","    HHVM_RC_INT_SAME(X509_PURPOSE_NS_SSL_SERVER);","    HHVM_RC_INT_SAME(X509_PURPOSE_SMIME_SIGN);"],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["op->skip = TRUE;","continue;","}","mark_op_resolved (op, checksum, NULL, metadata_bytes, NULL);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (type == kGenericOptimized) {","optimized_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2020-15888","code_chunks":["int inuse = stackinuse(L);","int goodsize = inuse + BASIC_STACK_SIZE;","if (goodsize > LUAI_MAXSTACK)","goodsize = LUAI_MAXSTACK;  \/* respect stack limit *\/","\/* if thread is currently not handling a stack overflow and its","good size is smaller than current size, shrink its stack *\/"],"label":0}
{"cve":"CVE-2016-4564","code_chunks":["              compose;","","            primitive_type=ImagePrimitive;","            GetNextToken(q,&q,extent,token);","            compose=ParseCommandOption(MagickComposeOptions,MagickFalse,token);","            if (compose == -1)","              status=MagickFalse;"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["goto error;","}","","make_canonical(ctx, LY_TYPE_UINT16, value_, &unum, NULL);","","if (store) {","\/* store the result *\/"],"label":1}
{"cve":"CVE-2020-15888","code_chunks":["while (!ttisfunction(s2v(ra))) {  \/* not a function? *\/","luaD_tryfuncTM(L, ra);  \/* try '__call' metamethod *\/","b++;  \/* there is now one extra argument *\/","checkstackp(L, 1, ra);","}","if (!ttisLclosure(s2v(ra))) {  \/* C function? *\/","luaD_call(L, ra, LUA_MULTRET);  \/* call it *\/"],"label":1}
{"cve":"CVE-2019-10672","code_chunks":["\t\t\t\tfor (i = 0; i < olen; i++) {","\t\t\t\t\tb = i \/ elements;","\t\t\t\t\tx = i % elements;","\t\t\t\t\ty = x % dy + start[1];","\t\t\t\t\tx = x \/ dy + start[0];","\t\t\t\t\tj = ((x * sy + y) * size) + b;","\t\t\t\t\tif (j>=0 && j < elements * size) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["for (int i = 0; i < node->outputs->size; ++i) {","TfLiteTensor* output = GetOutput(context, node, i);","TfLiteTensor* subgraph_output =","active_branch_subgraph.tensor(active_branch_subgraph.outputs()[i]);","TfLiteIntArray* output_size = TfLiteIntArrayCopy(subgraph_output->dims);","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","{","node->temporaries->data[0] = op_data->scratch_tensor_index;","TfLiteTensor* scratch_buffer = GetTemporary(context, node, \/*index=*\/0);","TfLiteIntArray* scratch_buffer_size = TfLiteIntArrayCreate(lhs_rank);","for (int i = 0; i < lhs_rank - 2; ++i) {","scratch_buffer_size->data[i] = lhs->dims->data[i];"],"label":1}
{"cve":"CVE-2023-51698","code_chunks":["g_set_error_literal (error,","EV_DOCUMENT_ERROR,","EV_DOCUMENT_ERROR_INVALID,","_(\"Can't find an appropriate command to \"","\"decompress this type of comic book\"));","return FALSE;"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["            else {","                end_quote_size = 0;","                if (c == '\\\\') {","                    tok_nextc(tok);  \/* skip escaped char *\/","                }","            }","        }"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","WINPR_UNUSED(update);","return Stream_SafeSeek(s, 2); \/* pad2Octets (2 bytes) *\/","\/**","* The Synchronize Update is an artifact from the","* T.128 protocol and should be ignored."],"label":0}
{"cve":"CVE-2020-35538","code_chunks":["if (upsample->spare_full) {","\/* If we have a spare row saved from a previous cycle, just return it. *\/","JDIMENSION size = upsample->out_row_width;","if (cinfo->out_color_space == JCS_RGB565)","size = cinfo->output_width * 2;","jcopy_sample_rows(&upsample->spare_row, 0, output_buf + *out_row_ctr, 0, 1,"],"label":1}
{"cve":"CVE-2022-3016","code_chunks":["* particular line\/column, adjust the folds and display a message about the","* jump.","* Returns OK on success and FAIL on failing to open the file\/buffer.  Returns","* NOTDONE if the quickfix\/location list is freed by an autocmd when opening","* the file.","*\/","static int"],"label":1}
{"cve":"CVE-2018-14466","code_chunks":["\tND_PRINT((ndo, \" [|cb]\"));","}","","\/*"," * Handle replies to the AFS Callback Service"," *\/",""],"label":0}
{"cve":"CVE-2016-2324","code_chunks":["void show_object_with_name(FILE *out, struct object *obj, const char *name)","{","const char *p;","","fprintf(out, \"%s \", oid_to_hex(&obj->oid));","for (p = name; *p && *p != '\\n'; p++)"],"label":0}
{"cve":"CVE-2016-5842","code_chunks":["{","union","{","unsigned int","unsigned_value;","","signed int"],"label":0}
{"cve":"CVE-2020-23931","code_chunks":["","\tgf_free(ptr);","}","","GF_Err asrt_box_read(GF_Box *s, GF_BitStream *bs)","{","\tunsigned int i;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT32 drawNineGridSupportLevel;","","if (Stream_GetRemainingLength(s) < 8)","return FALSE;",""],"label":0}
{"cve":"CVE-2018-17205","code_chunks":["const struct rule_actions *actions = rule_get_actions(rule);","","\/* A rule may not be reinserted. *\/","ovs_assert(rule->state != RULE_INSERTED);","","if (rule->hard_timeout || rule->idle_timeout) {","ovs_list_insert(&ofproto->expirable, &rule->expirable);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["","  cudnnDataType_t cudnn_matmul_type = ToCudnnDataType(accumulator_type);","  auto matmul_desc = cudnn_frontend::MatMulDescBuilder()","                         .setMathPrecision(cudnn_matmul_type)","                         .build();","  RETURN_MSG_IF_CUDNN_ERROR(matmul_desc);","  auto matmul_op = cudnn_frontend::OperationBuilder("],"label":0}
{"cve":"CVE-2016-9391","code_chunks":["static int jpc_sop_dumpparms(jpc_ms_t *ms, FILE *out)","{","\tjpc_sop_t *sop = &ms->parms.sop;","\tfprintf(out, \"seqno = %\"PRIuFAST16\";\\n\", sop->seqno);","\treturn 0;","}",""],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["\t\t\tbreak;","\t\t\t__set_bit(LOG_CONSOLE_BIT, &debug);","\t\t\treopen_log = true;","\t\t\tbreak;","\t\t\t__set_bit(DONT_FORK_BIT, &debug);","\t\t\tbreak;","\t\t\t__set_bit(DUMP_CONF_BIT, &debug);"],"label":0}
{"cve":"CVE-2016-8649","code_chunks":[],"label":1}
{"cve":"CVE-2020-11096","code_chunks":["\t\treturn FALSE;","","\tiBitmapFormat = get_bpp_bmf(cache_brush->bpp, &rc);","\tif (!rc)","\t\treturn FALSE;","\tStream_Write_UINT8(s, cache_brush->index);  \/* cacheEntry (1 byte) *\/","\tStream_Write_UINT8(s, iBitmapFormat);       \/* iBitmapFormat (1 byte) *\/"],"label":0}
{"cve":"CVE-2018-8799","code_chunks":["STREAM s;","int length;","int tagval;","struct stream packet;","","s = tcp_recv(NULL, 4);"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["        configFilename = QString(\"\\\"%1\\\"\").arg(configFilename);","#endif","    args << \"-c\" << configFilename << \"--address\" << address();","","    return true;","}",""],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["} else {","PyObject* buf = tok->decoding_buffer;","if (buf == NULL) {","buf = PyObject_CallObject(tok->decoding_readline, NULL);","if (buf == NULL) {","error_ret(tok);","return 1;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","TfLiteTensor* output = GetOutput(context, node, \/*index=*\/0);","","int32_t* output_data = output->data.i32;","*output_data = *(input1->data.i32) + *(input2->data.i32);"],"label":1}
{"cve":"CVE-2017-6448","code_chunks":["{","unsigned short array_size = buf[2] | (buf[3] << 8);","int first_key = buf[4] | (buf[5] << 8) | (buf[6] << 16) | (buf[7] << 24);","sprintf (op->buf_asm, \"packed-switch-payload %d, %d\", array_size, first_key);","size = 8;","payload = 2 * (array_size * 2);","len = 0;"],"label":1}
{"cve":"CVE-2021-37662","code_chunks":["std::vector<int32> output_thresholds;","std::vector<Eigen::VectorXf> output_left_node_contribs;","std::vector<Eigen::VectorXf> output_right_node_contribs;","std::vector<string> output_split_types;","","for (int32_t node_id = node_id_first; node_id < node_id_last; ++node_id) {","float best_gain = std::numeric_limits<float>::lowest();"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["                             TfLiteEvalTensor* output) {","  DepthwiseParams op_params;","  op_params.padding_type = PaddingType::kSame;","  op_params.padding_values.width = data.padding.width;","  op_params.padding_values.height = data.padding.height;","  op_params.stride_width = params->stride_width;","  op_params.stride_height = params->stride_height;"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["}","","\/* NOTE: free'd when events are cleared during closure of mdi *\/","text = malloc(tmp_length + 1);","memcpy(text, event_data, tmp_length);","text[tmp_length] = '\\0';"],"label":1}
{"cve":"CVE-2018-5808","code_chunks":["void CLASS rollei_load_raw()","{","uchar pixel[10];","unsigned iten=0, isix, i, buffer=0, todo[16];","","isix = raw_width * raw_height * 5 \/ 8;","while (fread (pixel, 1, 10, ifp) == 10) {"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["                    GetOutputSafe(context, node, kOutputTensor, &output));","","  switch (input_weights->type) {","      return EvalFloat(input, input_weights, recurrent_weights, bias, params,","                       hidden_state, output);","    case kTfLiteInt8: {","            auto* op_data = reinterpret_cast<OpData*>(node->user_data);"],"label":0}
{"cve":"CVE-2021-4173","code_chunks":["\tplen = STRLEN(last);","\tpnl = vim_strnsave((char_u *)\"\\n\", plen + 1);","\tif (pnl != NULL)","\t    mch_memmove(pnl + 1, last, plen + 1);","\t((char_u **)gap->ga_data)[gap->ga_len++] = pnl;","\t((char_u **)freegap->ga_data)[freegap->ga_len++] = pnl;","    }"],"label":0}
{"cve":"CVE-2021-30020","code_chunks":["{","return gf_avc_read_sps_bs_internal(bs, avc, subseq_sps, vui_flag_pos, 0);","}","","GF_EXPORT","s32 gf_avc_read_sps(const u8 *sps_data, u32 sps_size, AVCState *avc, u32 subseq_sps, u32 *vui_flag_pos)"],"label":1}
{"cve":"PYSEC-2022-150","code_chunks":["bool is_type_list;","DataTypeVector dtypes;","TF_RETURN_IF_ERROR(ArgNumType(attrs, ret_def, &is_type_list, &dtypes));","CHECK_GE(dtypes.size(), size_t{1});","const auto* item = GetItemOrNull(ret_iter->second);","if (item == nullptr) {","return errors::InvalidArgument(\"Return \", ret_def.name(), \" -> \","],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["    if (!isinstance) {","        PyErr_Format(PyExc_TypeError, \"expected %s node, got %.400s\",","                     req_name[mode], Py_TYPE(ast)->tp_name);","        return NULL;","    }","    if (obj2ast_mod(ast, &res, arena) != 0)","        return NULL;"],"label":0}
{"cve":"CVE-2020-1921","code_chunks":["    VMRegAnchor _;","    ActRec *ar = vmfp();","            if (ar->func()->isCPPBuiltin() || isResumed(ar)) return;","    auto ret = tvAsCVarRef(retval);","    if (ret.isNull()) return;","    if (!(ret.isString() || ret.isObject() || ret.isArray())) return;","    VariableSerializer vs(VariableSerializer::Type::DebuggerSerialize);"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["        return 0;","    Py_XSETREF(tok->decoding_readline, readline);","","    if (pos > 0) {","        PyObject *bufobj = _PyObject_CallNoArg(readline);","        if (bufobj == NULL)","            return 0;"],"label":0}
{"cve":"CVE-2020-5210","code_chunks":["{","    char *user;","    unsigned uid;","    static struct passwd *pw = (struct passwd *) 0;","","    if (pw)","        return pw; \/* cache answer *\/"],"label":0}
{"cve":"CVE-2021-40812","code_chunks":["bitmap_size += compressed_size;","","","gdPutBuf(uncompressed_row, compressed_size, out);","gdPutC(BMP_RLE_COMMAND, out);","gdPutC(BMP_RLE_ENDOFLINE, out);","bitmap_size += 2;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["const bn_t m) {","ep_t t0[1 << (EP_WIDTH \/ 2)], t1[1 << (EP_WIDTH \/ 2)], t[1 << EP_WIDTH];","bn_t n, _k, _m;","size_t l0, l1, w = EP_WIDTH \/ 2;","uint8_t w0[RLC_FP_BITS + 1], w1[RLC_FP_BITS + 1];","","if (bn_is_zero(k) || ep_is_infty(p)) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["}","}","","TfLiteTensor* fw_output = GetOutput(context, node, kFwOutputTensor);","TfLiteIntArray* fw_output_size_array = TfLiteIntArrayCreate(3);","fw_output_size_array->data[0] = (time_major) ? max_time : batch_size;","fw_output_size_array->data[1] = (time_major) ? batch_size : max_time;"],"label":1}
{"cve":"PYSEC-2022-95","code_chunks":["bool is_type_list;","DataTypeVector dtypes;","TF_RETURN_IF_ERROR(ArgNumType(attrs, ret_def, &is_type_list, &dtypes));","CHECK_GE(dtypes.size(), size_t{1});","const auto* item = GetItemOrNull(ret_iter->second);","if (item == nullptr) {","return errors::InvalidArgument(\"Return \", ret_def.name(), \" -> \","],"label":1}
{"cve":"CVE-2018-20839","code_chunks":["int vt_reset_keyboard(int fd) {","int kb;","","\/* If we can't read the default, then default to unicode. It's 2017 after all. *\/","kb = vt_default_utf8() != 0 ? K_UNICODE : K_XLATE;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","TfLiteStatus ComparisonPrepare(TfLiteContext* context, TfLiteNode* node) {","  return ComparisonPrepareCommon(context, node, false);","}","","TfLiteStatus ComparisonPrepareStringAllowed(TfLiteContext* context,","                                            TfLiteNode* node) {"],"label":0}
{"cve":"CVE-2018-20762","code_chunks":["\t\t\t\t}","\t\t\t}","\t\t\tbreak;","\t\t\tif (playlist) {","\t\t\t\tu32 count;","\t\t\t\tgf_term_disconnect(term);","\t\t\t\tif (1 > scanf(\"%u\", &count)) {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":[".invoke =","[](TfLiteContext* context, TfLiteNode* node) {","TfLiteTensor* output = tflite::GetOutput(context, node, 0);","std::fill(output->data.f,","output->data.f + tflite::NumElements(output), 7.0f);","return kTfLiteOk;"],"label":1}
{"cve":"CVE-2017-17439","code_chunks":["\t\t\t    EncTicketPart *tkt,","\t\t\t    int type,","\t\t\t    const krb5_data *data)","{","    krb5_error_code ret;","    size_t size = 0;",""],"label":0}
{"cve":"CVE-2018-1068","code_chunks":["\t\/* starting with hook_entry, 32 vs. 64 bit structures are different *\/","\tfor (i = 0; i < NF_BR_NUMHOOKS; i++)","\t\trepl->hook_entry[i] = compat_ptr(tmp.hook_entry[i]);","","\trepl->num_counters = tmp.num_counters;","\trepl->counters = compat_ptr(tmp.counters);","\trepl->entries = compat_ptr(tmp.entries);"],"label":0}
{"cve":"CVE-2017-12664","code_chunks":["(void) WriteBlobMSBShort(image,0);  \/* fill in size later *\/","lastrow=(unsigned char *) NULL;","if (image_info->compression == FaxCompression)","lastrow=(unsigned char *) AcquireQuantumMemory(bytes_per_row,","sizeof(*lastrow));","\/* TODO check whether memory really was acquired? *\/"],"label":1}
{"cve":"CVE-2022-48571","code_chunks":["","\/* If this is a multi-packet request, drop it. *\/","if (buf[4] != 0 || buf[5] != 1) {","out_string(c, \"SERVER_ERROR multi-packet request not supported\");","return READ_NO_DATA_RECEIVED;","}",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["    case kTfLiteInt32: {","      return EvalImpl<int32_t>(context, data->requires_broadcast, input1,","                               input2, output);","    }","    case kTfLiteFloat32: {","      return EvalImpl<float>(context, data->requires_broadcast, input1, input2,","                             output);"],"label":0}
{"cve":"CVE-2020-14397","code_chunks":["rfbReleaseClientIterator(rfbClientIteratorPtr iterator)","{","if(iterator->next) rfbDecrClientRef(iterator->next);","free(iterator);","}",""],"label":1}
{"cve":"PYSEC-2022-128","code_chunks":["if (!proto.ParseFromArray(d->Data(sizes[i]), sizes[i])) {","return false;","}","ps[i].FromProto(proto);","}","return true;","}"],"label":1}
{"cve":"CVE-2023-0302","code_chunks":["}","count++;","if (mode == R_MODE_PRINT && i) {","print (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\", entry_index++, id_idx, mod_time, file_len, filename);","}","}","if (i == 0) {"],"label":1}
{"cve":"CVE-2022-1587","code_chunks":["common->cbra_ptr = OVECTOR_START + (re->top_bracket + 1) * 2 * sizeof(sljit_sw);","","total_length = ccend - common->start;","common->private_data_ptrs = (sljit_s32 *)SLJIT_MALLOC(total_length * (sizeof(sljit_s32) + (common->has_then ? 1 : 0)), allocator_data);","if (!common->private_data_ptrs)","{","SLJIT_FREE(common->optimized_cbracket, allocator_data);"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["\\","if (plugin_id == kNullPlugin) {                                         \\","return tsl::Status(                                                   \\","port::error::FAILED_PRECONDITION,                                 \\","\"No suitable \" PLUGIN_STRING                                      \\","\" plugin registered. Have you linked in a \" PLUGIN_STRING         \\","\"-providing plugin?\");                                            \\"],"label":1}
{"cve":"CVE-2021-30022","code_chunks":["si->intra_slice_allowed_flag = gf_bs_read_int_log(bs, 1, \"intra_slice_allowed_flag\");","","pps_id = gf_bs_read_ue_log(bs, \"pps_id\");","if (pps_id >= 64)","return -1;","si->pps = &vvc->pps[pps_id];","si->sps = &vvc->sps[si->pps->sps_id];"],"label":1}
{"cve":"CVE-2019-13222","code_chunks":["ady -= abs(base) * adx;","if (x1 > n) x1 = n;","if (x < x1) {","LINE_OP(output[x], inverse_db_table[y]);","for (++x; x < x1; ++x) {"],"label":1}
{"cve":"CVE-2020-35965","code_chunks":["for (y = 0; y < FFMIN(s->ymin, s->h); y++) {","memset(ptr, 0, out_line_size);","ptr += picture->linesize[i];","}","}",""],"label":1}
{"cve":"CVE-2019-12111","code_chunks":["static void copyIPv6IfDifferent(void * dest, const void * src)","{","if(dest != src && src != NULL) {","memcpy(dest, src, sizeof(struct in6_addr));","}","}"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        }","        else {","            int res;","            Py_ssize_t len;","            Py_ssize_t i;","            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"ListComp field \\\"generators\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"],"label":0}
{"cve":"PYSEC-2021-834","code_chunks":["Status CreateTempFileFloat(Env* env, float value, uint64 size,","string* filename) {","const string dir = testing::TmpDir();","*filename = io::JoinPath(dir, strings::StrCat(\"file_\", value));","std::unique_ptr<WritableFile> file;"],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["    { \"Nikon E5400\", 0, 0,","      { 9349,-2987,-1001,-7919,15766,2266,-2098,2680,6839 } },","    { \"Nikon E5700\", 0, 0,","      { -5368,11478,2368,5537,-113,3148,-4969,10021,5782,778,9028,211 } },","    { \"Nikon E8400\", 0, 0,","      { 7842,-2320,-992,-8154,15718,2599,-1098,1342,7560 } },","    { \"Nikon E8700\", 0, 0,"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["scratch_size_array->data[0] = batch_size;","scratch_size_array->data[1] = num_filters;","","TfLiteTensor* scratch_tensor = GetTemporary(context, node, \/*index=*\/0);","","if (is_full_integer) {","scratch_tensor->type = kTfLiteInt32;"],"label":1}
{"cve":"CVE-2020-1916","code_chunks":["  if (!pw) {","    log = new StructuredLogEntry();","    log->setStr(\"function\", \"getpwnam_r\");","    if (LightProcess::g_strictUser) {","      throw std::runtime_error{\"getpwnam_r(): not found\"};","    }","    return;"],"label":0}
{"cve":"CVE-2017-10929","code_chunks":["unsigned num;","char *p;","","grub_errno = GRUB_ERR_NONE;","","num = ((size + real_offset + GRUB_DISK_SECTOR_SIZE - 1)"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["node->temporaries->data[kScratchBuffer] =","scratch_tensor_index + kScratchBuffer;","","TfLiteTensor* scratch_buffer = GetTemporary(context, node, kScratchBuffer);","scratch_buffer->type = input->type;","scratch_buffer->allocation_type = kTfLiteArenaRw;",""],"label":1}
{"cve":"CVE-2023-29007","code_chunks":["static int section_name_match (const char *buf, const char *name)","{","int i = 0, j = 0, dot = 0;","if (buf[i] != '[')","return 0;","for (i = 1; buf[i] && buf[i] != ']'; i++) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","const TfLiteTensor* input_boxes;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kInputTensorBoxes, &input_boxes));","const int num_boxes = SizeOfDimension(input_boxes, 0);","const TfLiteTensor* input_scores;"],"label":0}
{"cve":"CVE-2021-32436","code_chunks":["\t\t\tbreak;","\t\t\tif (parenth || brace + bracket >= 2) {","\t\t\t\terror(1, s, \"Misplaced '[' in %%%%staves\");","\t\t\t\terr = 1;","\t\t\t\tbreak;","\t\t\t}","\t\t\tif (brace + bracket == 0)"],"label":0}
{"cve":"CVE-2016-9841","code_chunks":["    len = bits >> 3;","    in -= len;","    bits -= len << 3;","    hold &= (1U << bits) - 1;","","    \/* update state and return *\/","    strm->next_in = in;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);","if (*out == NULL) goto failed;"],"label":1}
{"cve":"CVE-2021-40566","code_chunks":["\t\tfor (i=0; i<count; i++) {","\t\t\tu64 acts;","\t\t\tsrc_pck = gf_list_get(ctx->src_packets, i);","\t\t\tacts = gf_filter_pck_get_cts(src_pck);","\t\t\tif (acts==cts) {","\t\t\t\tgf_filter_pck_unref(pck_ref);","\t\t\t\tbreak;"],"label":0}
{"cve":"CVE-2020-35538","code_chunks":["start_pass_merged_upsample(j_decompress_ptr cinfo)","{","my_merged_upsample_ptr upsample = (my_merged_upsample_ptr)cinfo->upsample;","","\/* Mark the spare buffer empty *\/","upsample->spare_full = FALSE;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input = GetInput(context, node, 0);"],"label":1}
{"cve":"CVE-2019-11413","code_chunks":["{","Resub scratch;","int result;","int i;","Rune c;",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      TopK(row_size, num_rows, GetTensorData<float>(input), k,","           output_indexes->data.i32, GetTensorData<float>(output_values));","      break;","      TopK(row_size, num_rows, input->data.uint8, k, output_indexes->data.i32,","           output_values->data.uint8);","      break;","      TopK(row_size, num_rows, input->data.int8, k, output_indexes->data.i32,"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","WINPR_UNUSED(settings);","if (length < 8)","return FALSE;","","Stream_Seek_UINT32(s); \/* brushSupportLevel (4 bytes) *\/"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            PyErr_SetString(PyExc_TypeError, \"required field \\\"names\\\" missing from Nonlocal\");","            return 1;","        }","        else {","            int res;","            Py_ssize_t len;","            Py_ssize_t i;"],"label":0}
{"cve":"CVE-2021-46880","code_chunks":["\t\t\/*","\t\t * The chain we have using an xsc might not be a verified chain","\t\t * if the callback perverted things while we built it to ignore","\t\t * failures and proceed with chain building. We put this chain","\t\t * and the error associated with it on the xsc.","\t\t *\/","\t\tif (!x509_verify_ctx_set_xsc_chain(ctx, ctx->chains[0], 1, 1))"],"label":0}
{"cve":"CVE-2020-1898","code_chunks":["Variant& out, const char* buf, int n, int& p, size_t depth) {","if (UNLIKELY(depth > 1024)) {","return FB_UNSERIALIZE_MAX_DEPTH_EXCEEDED;","}","","CHECK_ENOUGH(1, p, n);"],"label":0}
{"cve":"CVE-2020-36315","code_chunks":["static int pad_basic(bn_t m, int *p_len, int m_len, int k_len, int operation) {","uint8_t pad = 0;","int result = RLC_OK;","bn_t t;","","RLC_TRY {"],"label":1}
{"cve":"CVE-2022-3299","code_chunks":["int rv;","ogs_sbi_session_t *sbi_sess = user_data;","","ogs_sbi_server_t *server = NULL;","ogs_sbi_stream_t *stream = NULL;","ogs_sbi_request_t *request = NULL;"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["","if (factories->find(plugin_id) != factories->end()) {","return tsl::Status(","port::error::ALREADY_EXISTS,","absl::StrFormat(\"Attempting to register factory for plugin %s when \"","\"one has already been registered\",","plugin_name));"],"label":1}
{"cve":"CVE-2015-8630","code_chunks":["    \/*","     * In version 1, all the defined fields are always returned.","     * entry is a pointer to a kadm5_principal_ent_t_v1 that should be","     * filled with allocated memory.","     *\/","    mask = in_mask;",""],"label":0}
{"cve":"CVE-2016-8649","code_chunks":["{","struct attach_clone_payload* payload = (struct attach_clone_payload*)data;","int ipc_socket = payload->ipc_socket;","int procfd = payload->procfd;","lxc_attach_options_t* options = payload->options;","struct lxc_proc_context_info* init_ctx = payload->init_ctx;","#if HAVE_SYS_PERSONALITY_H"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["if (IsDynamicTensor(output)) {","has_dynamic_output_tensors = true;","break;","}","}",""],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["bool MemFile::seek(int64_t offset, int whence \/* = SEEK_SET *\/) {","assertx(m_len != -1);","if (whence == SEEK_CUR) {","if (offset > 0 && offset < bufferedLen()) {","setReadPosition(getReadPosition() + offset);","setPosition(getPosition() + offset);","return true;"],"label":1}
{"cve":"CVE-2020-6018","code_chunks":["    Assert( sizeof(*pOutputDigest) == crypto_auth_hmacsha256_BYTES );","    Assert( cubKey == crypto_auth_hmacsha256_KEYBYTES );","","    crypto_auth_hmacsha256( *pOutputDigest, pubData, cubData, pubKey );","}","","#endif"],"label":0}
{"cve":"CVE-2016-7538","code_chunks":["if (id == 0x0000040f)","{","(void) CopyMagickMemory(q,q+PSDQuantum(count)+12,length-","(PSDQuantum(count)+12)-(q-datum));","SetStringInfoLength(bim_profile,length-(PSDQuantum(count)+12));","break;"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["\t\t}","\t\tvalue += strspn(value, sep);","\t}","\t\/*","\t * If none of \"always\", \"never\", and \"auto\" is specified, then setting","\t * layout implies \"always\".","\t *"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void bn_read_raw(bn_t a, const dig_t *raw, int len);"],"label":1}
{"cve":"CVE-2022-23576","code_chunks":["found_unknown_shapes);","for (const auto& dim : output_shape.dim()) {","int64_t new_output_size =","MultiplyWithoutOverflow(output_size, dim.size());","if (new_output_size < 0) {","VLOG(1) << \"Overflow encountered when estimating cost, multiplying \""],"label":0}
{"cve":"CVE-2017-9144","code_chunks":["    i;","","  register unsigned char","    *p;","","  size_t","    bits_per_pixel,"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["int res;","tmp = _PyObject_GetAttrId(obj, &PyId_target);","if (tmp == NULL) goto failed;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2022-28927","code_chunks":["        std::string val = toml::format(value);","        ext.tpl_args->local_vars[key.as_string()] = val;","    });","","    auto groups = toml::find_or<std::vector<toml::value>>(root, \"custom_groups\", {});","    importItems(groups, \"custom_groups\", false);","    ext.custom_proxy_group = toml::get<ProxyGroupConfigs>(toml::value(groups));"],"label":0}
{"cve":"CVE-2021-29602","code_chunks":["float output_activation_min, output_activation_max;","CalculateActivationRange(params->activation, &output_activation_min,","&output_activation_max);","const int input_size = NumElements(input) \/ SizeOfDimension(input, 0);","const int batch_size = SizeOfDimension(input, 0);","TfLiteTensor* input_quantized;","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2017-11462","code_chunks":["    gss_OID_desc\ttoken_mech_type_desc;","    gss_OID\t\ttoken_mech_type = &token_mech_type_desc;","    gss_OID\t\tactual_mech = GSS_C_NO_OID;","    gss_OID\t\tselected_mech = GSS_C_NO_OID;","    gss_OID\t\tpublic_mech;","    gss_mechanism\tmech = NULL;","    gss_union_cred_t\tuc;"],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["return ret;","}","","if (!fit_check_format(pfe_fit_addr)) {","printf(\"PFE Firmware: Bad firmware image (bad FIT header)\\n\");","ret = -1;","return ret;"],"label":1}
{"cve":"CVE-2022-35979","code_chunks":["      FloatTensorToQuantized<quint8>(input_float, input_min, input_max);","  Tensor expected_float(DT_FLOAT, {input_height, input_width});","  test::FillValues<float>(&expected_float, {0, 0, 0, 1, 3, 6, 6, 6});","","  AddInputFromArray<quint8>(input_quantized.shape(),","                            input_quantized.flat<quint8>());","  AddInputFromArray<float>(TensorShape({}), {input_min});"],"label":0}
{"cve":"CVE-2016-6871","code_chunks":["static Variant HHVM_FUNCTION(bcpowmod, const String& left, const String& right,","const String& modulus, int64_t scale \/* = -1 *\/) {","scale = adjust_scale(scale);","bc_num first, second, mod, result;","bc_init_num(&first);","bc_init_num(&second);"],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["    gamma_curve (0, 12.25, 1, 1023);","  } else if (!memcmp (head+4,\"RED1\",4)) {","    strcpy (make, \"Red\");","    strcpy (model,\"One\");","    parse_redcine();","    load_raw = &CLASS redcine_load_raw;","    gamma_curve (1\/2.4, 12.92, 1, 4095);"],"label":0}
{"cve":"CVE-2019-6706","code_chunks":["  UpVal **up2 = getupvalref(L, fidx2, n2);","  if (*up1 == *up2)","    return;","  luaC_upvdeccount(L, *up1);","  *up1 = *up2;","  (*up1)->refcount++;","  if (upisopen(*up1)) (*up1)->u.open.touched = 1;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2021-41220","code_chunks":["    auto col_params = new CollectiveParams();","    auto done_with_cleanup = [col_params, done = std::move(done)]() {","      done();","      col_params->Unref();","    };","    core::RefCountPtr<CollectiveGroupResource> resource;","    OP_REQUIRES_OK_ASYNC(c, LookupResource(c, HandleFromInput(c, 1), &resource),"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["}","","template <KernelType kernel_type>","TfLiteStatus EvalHybrid(TfLiteContext* context, TfLiteNode* node, OpData* data,","                        const RuntimeShape& input_shape,","                        const TfLiteTensor* input,","                        const RuntimeShape& filter_shape,"],"label":0}
{"cve":"PYSEC-2019-137","code_chunks":["    inst.outbuf_lock = DummyLock()","        return inst, sock, map","","    def test_ctor(self):","        inst, _, map = self._makeOneWithMap()","        self.assertEqual(inst.addr, \"127.0.0.1\")","        self.assertEqual(inst.sendbuf_l"],"label":0}
{"cve":"CVE-2018-20459","code_chunks":["} else if (!strncmp (token, \"asr\", 3)) {","op->operands[operand].shift = ARM_ASR;","}","if (op->operands[operand].shift != ARM_NO_SHIFT) {","op->operands_count ++;","op->operands[operand].shift_amount = r_num_math (NULL, token + 4);","if (op->operands[operand].shift_amount > 63) {"],"label":1}
{"cve":"CVE-2016-2315","code_chunks":["\t\t  PARSE_OPT_NOARG | PARSE_OPT_NONEG, NULL, 1 },","\t\tOPT_BOOL(0, \"stdout\", &pack_to_stdout,","\t\t\t N_(\"output pack to stdout\")),","\t\tOPT_BOOL(0, \"include-tag\", &include_tag,","\t\t\t N_(\"include tag objects that refer to objects to be packed\")),","\t\tOPT_BOOL(0, \"keep-unreachable\", &keep_unreachable,","\t\t\t N_(\"keep unreachable objects\")),"],"label":0}
{"cve":"CVE-2020-8597","code_chunks":["\tGETCHAR(id, inp);","\tGETSHORT(len, inp);","\tif (len < EAP_HEADERLEN || len > inlen) {","\t\terror(\"EAP: packet has illegal length field %d (%d..%d)\", len,","\t\t    EAP_HEADERLEN, inlen);","\t\treturn;","\t}"],"label":0}
{"cve":"CVE-2016-4805","code_chunks":["","pch->ppp = NULL;","pch->chan = chan;","pch->chan_net = net;","chan->ppp = pch;","init_ppp_file(&pch->file, CHANNEL);","pch->file.hdrlen = chan->hdrlen;"],"label":1}
{"cve":"CVE-2023-25667","code_chunks":["      &error_string));","  ASSERT_NE(imgdata, nullptr);","    ASSERT_EQ(nframes, testcase.num_frames);","  ASSERT_EQ(w, testcase.width);","  ASSERT_EQ(h, testcase.height);","  ASSERT_EQ(c, testcase.channels);","}"],"label":0}
{"cve":"PYSEC-2020-125","code_chunks":["              if (accept || num_iterations + 1 >= kMaxIterations) {","                                                                                                                                if (!accept) {","                  LOG(ERROR) << \"TruncatedNormal uniform rejection sampler \"","                             << \"exceeded max iterations. Sample may contain \"","                             << \"outliers.\";","                  ctx->SetStatus(errors::Internal(","                      \"TruncatedNormal uniform rejection sampler failed to \""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (input1->type) {","case kTfLiteInt32: {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (!is_string_allowed) {","TF_LITE_ENSURE(context, input1->type != kTfLiteString);"],"label":1}
{"cve":"CVE-2022-33099","code_chunks":["        ts = luaS_newlstr(L, buff, tl);","      }","      else {  \/* long string; copy strings directly to final result *\/","        ts = luaS_createlngstrobj(L, tl);","        copy2buff(top, n, getstr(ts));","      }","      setsvalue2s(L, top - n, ts);  \/* create result *\/"],"label":0}
{"cve":"CVE-2016-4563","code_chunks":["(void) SetImageArtifact(image,key,token);","(void) FormatLocaleString(key,MagickPathExtent,\"%s-type\",name);","(void) SetImageArtifact(image,key,type);","(void) FormatLocaleString(key,MagickPathExtent,\"%s-geometry\",name);","(void) FormatLocaleString(geometry,MagickPathExtent,","\"%gx%g%+.15g%+.15g\",","MagickMax(fabs(bounds.x2-bounds.x1+1.0),1.0),"],"label":1}
{"cve":"CVE-2021-31255","code_chunks":["","ISOM_DECREASE_SIZE(ptr, 1)","ptr->server_entry_count = gf_bs_read_u8(bs);","for (i=0; i<ptr->server_entry_count; i++) {","int j=0;","tmp_strsize=(u32)ptr->size;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (_PyObject_HasAttrId(obj, &PyId_lineno)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_lineno);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"CVE-2018-20176","code_chunks":["bmpdata = (uint8 *) xmalloc(width * height * Bpp);","for (y = 0; y < height; y++)","{","in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)],","width * Bpp);","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, tensor1, newSize));","","    TfLiteIntArrayFree(node->temporaries);","    node->temporaries = TfLiteIntArrayCreate(2);","    for (int i = 0; i < 2; ++i) {","      node->temporaries->data[i] = *(first_new_tensor) + i;","    }"],"label":0}
{"cve":"CVE-2021-30020","code_chunks":["\t\tvp->version = oggpack_read(&opb, 32);","\t\tif (vp->version != 0) {","\t\t\treturn GF_FALSE;","\t\t}","\t\tvp->channels = oggpack_read(&opb, 8);","\t\tvp->sample_rate = oggpack_read(&opb, 32);","\t\tvp->max_r = oggpack_read(&opb, 32);"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["    boolop_type = make_type(\"boolop\", &AST_type, NULL, 0);","    if (!boolop_type) return 0;","    if (!add_attributes(boolop_type, NULL, 0)) return 0;","    And_type = make_type(\"And\", boolop_type, NULL, 0);","    if (!And_type) return 0;","    And_singleton = PyType_GenericNew(And_type, NULL, NULL);","    if (!And_singleton) return 0;"],"label":0}
{"cve":"CVE-2019-17541","code_chunks":["length-=2;","if (length <= 14)","{","while (length-- > 0)","if (GetCharacter(jpeg_info) == EOF)","break;"],"label":1}
{"cve":"CVE-2021-32843","code_chunks":["\t}","","\tcr = vi_find_cr((int) offset);","\tif (cr == NULL || cr->cr_size != size || cr->cr_ro) {","\t\tif (cr != NULL) {","\t\t\t\/* offset must be OK, wrong size and\/or reg is R\/O *\/","\t\t\tif (cr->cr_size != size)"],"label":0}
{"cve":"CVE-2016-5688","code_chunks":["  switch (type)","  {","    case WritePixelMask: image->write_mask=MagickTrue; break;","    default: image->read_mask=MagickTrue; break;","  }","  if (SyncImagePixelCache(image,exception) == MagickFalse)","    return(MagickFalse);"],"label":0}
{"cve":"PYSEC-2020-272","code_chunks":["if (!status->status.ok()) {","return nullptr;","}","","auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);","if (!status->status.ok()) {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["output_state_zp->type = kTfLiteFloat32;","output_state_zp->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(output_state_zp->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["}","strbuf_addbuf(sb, &local_sb);","} else {","int sb_len = sb->len, offset = 0;","if (c->flush_type == flush_left)","offset = padding - len;","else if (c->flush_type == flush_both)"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                break;","            }","","            if (!validate_constant(item)) {","                Py_DECREF(it);","                Py_DECREF(item);","                return 0;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE(context, seq_lengths[i] <= SizeOfDimension(input, seq_dim));","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","reference_ops::ReverseSequence<T, TS>(","seq_lengths, seq_dim, batch_dim, GetTensorShape(input),"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLitePackParams* data =","reinterpret_cast<TfLitePackParams*>(node->builtin_data);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","switch (output->type) {","case kTfLiteFloat32: {","return PackImpl<float>(context, node, output, data->values_count,"],"label":1}
{"cve":"CVE-2019-16163","code_chunks":["parse_exp(Node** np, PToken* tok, int term, UChar** src, UChar* end,","ScanEnv* env, int group_head)","{","int r, len, group = 0;","Node* qn;","Node** tp;",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","  fft_height_half = fft_height >> 1;","                      for (int i = fft_height_half + 1; i < fft_height; ++i) {","    real = fft_input_output[i][0];","    img = fft_input_output[i][1];","    fft_input_output[i][fft_width] = img;","    fft_input_output[i][fft_width + 1] = real;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["context->ReportError(context, \"Current does not support more than 1 axis.\");","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);","TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);",""],"label":1}
{"cve":"CVE-2016-4563","code_chunks":["const PrimitiveInfo *primitive_info)","{","typedef struct _LineSegment","{","double","p,"],"label":0}
{"cve":"CVE-2016-10249","code_chunks":["int i;","size_t size;","","matrix = 0;","","if (numrows < 0 || numcols < 0) {"],"label":0}
{"cve":"CVE-2020-14402","code_chunks":["seg = data+(j*w);                                                 \\","if (seg[x] != cl) {break;}                                        \\","i = x;                                                            \\","while ((seg[i] == cl) && (i < w)) i += 1;                         \\","i -= 1;                                                           \\","if (j == y) vx = hx = i;                                          \\","if (i < vx) vx = i;                                               \\"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["for (int i = 0; i < node->outputs->size; ++i) {","TfLiteTensor* output = GetOutput(context, node, i);","TfLiteTensor* subgraph_output =","active_branch_subgraph.tensor(active_branch_subgraph.outputs()[i]);","TfLiteIntArray* output_size = TfLiteIntArrayCopy(subgraph_output->dims);","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["a0 = GetInput(context, node, 0);","a1 = a0;","}","TfLiteTensor* out = GetOutput(context, node, 0);","int num = 1;","for (int i = 0; i < a0->dims->size; ++i) {","num *= a0->dims->data[i];"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputResourceIdTensor,","&input_resource_id_tensor));","TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, NumDimensions(input_resource_id_tensor), 1);","TF_LITE_ENSURE_EQ(context, SizeOfDimension(input_resource_id_tensor, 0), 1);",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(values, i, val);","            }","            Py_CLEAR(tmp);"],"label":0}
{"cve":"CVE-2023-23143","code_chunks":["\tif (!hevc_parse_nal_header(bs, NULL, NULL, &layer_id)) goto exit;","\tsps_id = gf_hevc_read_sps_bs_internal(bs, hevc, layer_id, vui_flag_pos);","","\tif (bs) gf_bs_del(bs);","\treturn sps_id;","}",""],"label":0}
{"cve":"CVE-2019-11924","code_chunks":["}","","EncryptedWriteRecordLayer::EncryptedWriteRecordLayer(","    EncryptionLevel encryptionLevel)","    : encryptionLevel_(encryptionLevel) {}","","TLSContent EncryptedWriteRecordLayer::write(TLSMessage&& msg) const {"],"label":0}
{"cve":"CVE-2022-23568","code_chunks":["\" dimensions, indices shape: \",","input_indices->shape().DebugString()));","","int rank = input_shape->NumElements();","","OP_REQUIRES("],"label":1}
{"cve":"CVE-2019-20395","code_chunks":["if (!strcmp(tpdf[i].name, name) && tpdf[i].type.base > 0) {","match = &tpdf[i];","goto check_leafref;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t} else {","\t\t\t\tbn_copy(u, x);","\t\t\t\tbn_copy(v, y);","\t\t\t}","\t\t\t_x = u->dp[0];","\t\t\t_y = v->dp[0];","\t\t\t_a = _d = 1;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["}","node->temporaries->data[kInputZeroPoints] =","op_data->scratch_tensor_index + kInputZeroPoints;","TfLiteTensor* input_zp = GetTemporary(context, node, kInputZeroPoints);","input_zp->type = kTfLiteFloat32;","input_zp->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(input_zp->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["output_values.push_back(data[i]);","}","}","TfLiteTensor* unique_output = GetOutput(context, node, 0);","std::unique_ptr<TfLiteIntArray, void (*)(TfLiteIntArray*)> shape(","TfLiteIntArrayCreate(NumDimensions(input)), TfLiteIntArrayFree);","shape->data[0] = unique_values.size();"],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["\t\t\t\t}","\t\t\t\tfree (table);","\t\t\t\tbreak;","\t\t\t\tfree (table);","\t\t\t\tgoto err;","\t\t\t}","\t\t\tbreak;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["                    GetInputSafe(context, node, kBwRecurrentToCellWeightsTensor,","                                 &bw_recurrent_to_cell_weights));","  const TfLiteTensor* bw_recurrent_to_output_weights;","  TF_LITE_ENSURE_OK(","      context, GetInputSafe(context, node, kBwRecurrentToOutputWeightsTensor,","                            &bw_recurrent_to_output_weights));",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","auto* params = reinterpret_cast<TfLiteShapeParams*>(node->builtin_data);","switch (params->out_type) {"],"label":1}
{"cve":"CVE-2019-11925","code_chunks":["exif_iif_add_tag(ImageInfo, SECTION_APP12, \"Company\",","TAG_NONE, TAG_FMT_STRING, l1, buffer+2);","if (length > 2+l1+1) {","l2 = php_strnlen(buffer+2+l1+1, length-2-l1+1);","exif_iif_add_tag(ImageInfo, SECTION_APP12, \"Info\",","TAG_NONE, TAG_FMT_STRING, l2, buffer+2+l1+1);","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["GetTemporary(context, node, kFftIntegerWorkingAreaTensor);","TfLiteIntArray* fft_integer_working_area_shape = TfLiteIntArrayCreate(1);","fft_integer_working_area_shape->data[0] =","2 + static_cast<int>(sqrt(fft_working_length));","TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, fft_integer_working_area,","fft_integer_working_area_shape));"],"label":1}
{"cve":"CVE-2022-40138","code_chunks":["      }","    }","","    gcScope.flushToSmallCount(KEEP_HANDLES);","    tmpHandle.clear();","","#ifdef HERMES_ENABLE_DEBUGGER"],"label":0}
{"cve":"CVE-2016-10156","code_chunks":["                            JOB_REPLACE, true, &error, NULL);","        if (r < 0)","                goto fail;","","        dual_timestamp_get(&t->last_trigger);","","        if (t->stamp_path)"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["int utf8_strwidth(const char *string)","{","return utf8_strnwidth(string, -1, 0);","}","","int is_utf8(const char *text)"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["GetInput(context, node, kInputConditionTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (cond_tensor->type != kTfLiteBool) {","context->ReportError(context,"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputDataTensor, &data));","const TfLiteTensor* segment_ids;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputSegmentIdsTensor,","&segment_ids));","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["{","if(len<1) return;   string[len-1]=0;","if(len<3) return;   len = strnlen(string,len-1);","for(int i=len-1; i>=0; i--)","{"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["FSCK_MSG_GITMODULES_LARGE,","\".gitmodules too large to parse\");","}","","data.oid = oid;","data.options = options;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\tep2_norm(q, q);","#endif","","\t\t\/* Create table. *\/","\t\tfor (size_t i = 1; i < (1 << (EP_WIDTH - 1)); i++) {","\t\t\tep2_add(t[i], t[i - 1], q);","\t\t}"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["return ::tsl::OkStatus();","} else {","return tsl::Status(","port::error::INTERNAL,","absl::StrFormat(\"error recording waiting for CUDA event on stream %p\",","stream));","}"],"label":1}
{"cve":"CVE-2020-7247","code_chunks":["","\tresume = tree_pop(&wait_ssl_verify, s->id) != NULL;","","\tswitch (status) {","\t\treason = \"cert-ok\";","\t\ts->flags |= SF_VERIFIED;","\t\tbreak;"],"label":0}
{"cve":"CVE-2017-6448","code_chunks":["\t\t\tstrasm = r_str_concat (strasm, str);","\t\t\tbreak;","\t\t\tstrcpy (op->buf_asm, \"invalid \");","\t\t\tfree (strasm);","\t\t\tstrasm = NULL;","\t\t\tsize = 2;","\t\t}"],"label":0}
{"cve":"CVE-2022-1714","code_chunks":["struct msp430_cmd cmd = {0};","op->size = -1;","op->nopcode = 1;","op->type = R_ANAL_OP_TYPE_UNK;","op->family = R_ANAL_OP_FAMILY_CPU;",""],"label":0}
{"cve":"CVE-2020-1919","code_chunks":["bool MemFile::seek(int64_t offset, int whence \/* = SEEK_SET *\/) {","assertx(m_len != -1);","if (whence == SEEK_CUR) {","if (offset >= 0 && offset < bufferedLen()) {","setReadPosition(getReadPosition() + offset);","setPosition(getPosition() + offset);","return true;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["    mod_ty res = NULL;","    asdl_seq *argtypes = NULL;","    expr_ty ret, arg;","","    c.c_arena = arena;","    \/* borrowed reference *\/","    c.c_filename = filename;"],"label":0}
{"cve":"CVE-2018-8796","code_chunks":["{","\tSTREAM s, contents;","","\tlogger(Protocol, Debug, \"mcs_send_dpu(), reason=%d\", reason);","","\tcontents = malloc(sizeof(struct stream));","\tmemset(contents, 0, sizeof(struct stream));"],"label":0}
{"cve":"PYSEC-2022-49","code_chunks":["ConvolutionDimensions dims = OpDimensionsFromInputs(","op_info.inputs(0).shape(), op_info, &found_unknown_shapes);","","int64_t ops = dims.batch * dims.ox * dims.oy * dims.oz * dims.kx * dims.ky;","node_costs->num_compute_ops = ops;"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["","      i++;","      return false;","    }","  );","  bt_slab.len = i;",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor2, &input2));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","","  TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  output->type = input->type;","","  return context->ResizeTensor(context, output,"],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["parser->m_processingInstructionHandler(parser->m_handlerArg, target, data);","poolClear(&parser->m_tempPool);","return 1;","}","","static int"],"label":1}
{"cve":"CVE-2020-1899","code_chunks":["    } else {","      if (*p++ != '0' + ss) return false;","    }","    if (*p++ != ':') return false;","    if (*p++ != '\\\"') return false;","    if (memcmp(p, str.data(), ss)) return false;","    p += ss;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["","\t\tep2_norm(r, q);","\t\tif (bn_sign(k) == RLC_NEG) {","\t\t\tep2_neg(r, r);","\t\t}","\t}","\tRLC_CATCH_ANY {"],"label":0}
{"cve":"CVE-2016-10161","code_chunks":["ZVAL_STRINGL(*rval, str, len, 1);","return 1;","}","#line 971 \"ext\/standard\/var_unserializer.c\"","yych = *++YYCURSOR;","if (yych <= '\/') {","if (yych <= ',') {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2022-29227","code_chunks":["void ServerConnectionImpl::onResetStream(StreamResetReason reason) {","if (active_request_) {","active_request_->response_encoder_.runResetCallbacks(reason);","connection_.dispatcher().deferredDelete(std::move(active_request_));","}","}"],"label":0}
{"cve":"CVE-2019-13301","code_chunks":["MagickExport MagickBooleanType AnnotateImage(Image *image,","const DrawInfo *draw_info,ExceptionInfo *exception)","{","char","*p,","primitive[MagickPathExtent],"],"label":0}
{"cve":"CVE-2020-15852","code_chunks":["* If the next task has an I\/O bitmap it will handle it on exit to","* user mode.","*\/","if (tifp & _TIF_IO_BITMAP)","tss_invalidate_io_bitmap(this_cpu_ptr(&cpu_tss_rw));","}"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\t\t\t\treturn FALSE;","","\t\t\t\tbreak;","","\t\t\t\tif (!rdp_print_glyph_cache_capability_set(&sub))","\t\t\t\t\treturn FALSE;",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["GetInput(context, node, kInputVariableId);","const TfLiteTensor* input_value_tensor = GetInput(context, node, kInputValue);","","int resource_id = input_resource_id_tensor->data.i32[0];","auto& resources = subgraph->resources();"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["for (int p = 0; p < top_paths; ++p) {","const int32_t p_num = num_entries[p];","","TfLiteTensor* indices = GetOutput(context, node, p);","TF_LITE_ENSURE_OK(context, Resize(context, {p_num, 2}, indices));"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["","BlockingCounter bcount(functions.size());","std::vector<Status> statuses(functions.size());","for (int i = 0; i < functions.size(); i++) {","const DeviceAndFHandle& entry = functions[i];","const string& target_device = entry.device;"],"label":1}
{"cve":"CVE-2018-12562","code_chunks":["load();","mount();","icn=MonoIcon::icon(details.isLocalFile()","? FontAwesome::foldero",": constSshfsProtocol==details.url.scheme()","? FontAwesome::linux_os"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["}","","if (piv.size() < iv_required_len) {","raise_warning(\"IV passed is only %d bytes long, cipher \"","\"expects an IV of precisely %d bytes, padding with \\\\0\",","piv.size(), iv_required_len);","memcpy(iv_new, piv.data(), piv.size());"],"label":1}
{"cve":"CVE-2017-16910","code_chunks":["    else if (!strncmp(make, \"OLYMPUS\", 7))","    {","      int SubDirOffsetValid = strncmp(model, \"E-300\", 5) && strncmp(model, \"E-330\", 5) && strncmp(model, \"E-400\", 5) &&","                              strncmp(model, \"E-500\", 5) && strncmp(model, \"E-1\", 3);","","      if ((tag == 0x2010) || (tag == 0x2020))","      {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["      break;","      memset(GetTensorData<int32_t>(output), 0, num_elements * sizeof(int32_t));","      break;","      memset(GetTensorData<float>(output), 0, num_elements * sizeof(float));","      break;","      context->ReportError(context,","                           \"ZerosLike only currently supports int64, int32, \""],"label":0}
{"cve":"CVE-2023-38408","code_chunks":["\t\tif ((srk = calloc(1, sizeof(*srk))) == NULL) {","\t\t\terror_f(\"calloc failed\");","\t\t\tr = SSH_ERR_ALLOC_FAIL;","\t\t\tgoto out;","\t\t}","\t\tsrk->key = key;","\t\tkey = NULL; \/* transferred *\/"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_gen_prime_basic(bn_t a, int bits) {","while (1) {","do {","bn_rand(a, RLC_POS, bits);"],"label":1}
{"cve":"CVE-2021-45005","code_chunks":["break;","","cswitch(J, F, stm->a, stm->b);","labeljumps(J, F, stm->jumps, here(J,F), 0);","break;"],"label":1}
{"cve":"PYSEC-2019-227","code_chunks":["    GpuLaunchConfig config = GetGpuLaunchConfig(output.size(), d);","  TF_CHECK_OK(GpuLaunchKernel(SetZero<T>, config.block_count,","                              config.thread_per_block, 0, d.stream(),","                              output.size(), output.data()));","  if (data_size == 0 || segment_ids_shape.num_elements() == 0) {","    return;","  }"],"label":0}
{"cve":"CVE-2016-10167","code_chunks":["{","gdImagePtr src, dst;","int color;","","src = gdImageCreate(100, 100);","gdImageColorAllocate(src, 255, 255, 255);"],"label":0}
{"cve":"CVE-2016-9841","code_chunks":["else if (op & 16) {                     \/* length base *\/","len = (unsigned)(here.val);","op &= 15;                           \/* number of extra bits *\/","if (op) {","if (bits < op) {","hold += (unsigned long)(PUP(in)) << bits;"],"label":1}
{"cve":"PYSEC-2021-412","code_chunks":["          group_size_t.shape().DebugString());","    }","    if (group_key_t.dims() > 0) {","      return errors::InvalidArgument(","          \"Unexpected dimensions on input group_key, got \",","          group_key_t.shape().DebugString());","    }"],"label":0}
{"cve":"CVE-2022-2946","code_chunks":["* When desired match not found yet, try to find it (and others).","*\/","if (use_tagstack)","name = tagstack[tagstackidx].tagname;","#if defined(FEAT_QUICKFIX)","else if (g_do_tagpreview != 0)","name = ptag_entry.tagname;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["fb_set_dig(r, 1);","l = RLC_FB_BITS + 1;","bn_rec_slw(win, &l, b, FB_WIDTH);","for (i = 0; i < l; i++) {","if (win[i] == 0) {","fb_sqr(r, r);"],"label":1}
{"cve":"CVE-2021-23521","code_chunks":["{","for (int i = 5; --i >= 0;)","{","if (temporaryFile.deleteFile())","return true;","","Thread::sleep (50);"],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["char buf[32];","StringUtil::itoa(buf, sizeof(buf), value);","const uint64_t added_size = appendToHeader(entry->value(), buf);","addSize(added_size);","return;","}"],"label":0}
{"cve":"CVE-2022-28070","code_chunks":["\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\tif (i == nexti) {","\t\t\t\t\t\tut64 at = r_anal_function_max_addr (fcn);","\t\t\t\t\t\twhile (true) {","\t\t\t\t\t\t\tut64 size;"],"label":0}
{"cve":"CVE-2020-14399","code_chunks":["{","rfbSetPixelFormatMsg spf;","char buf[sz_rfbSetEncodingsMsg + MAX_ENCODINGS * 4];","","rfbSetEncodingsMsg *se = (rfbSetEncodingsMsg *)buf;","uint32_t *encs = (uint32_t *)(&buf[sz_rfbSetEncodingsMsg]);"],"label":1}
{"cve":"CVE-2023-51698","code_chunks":["","for (i = 0; ext[i] != NULL; i++) {","extensions = g_slist_append (extensions,","g_strdup (ext[i]));","}",""],"label":1}
{"cve":"PYSEC-2022-130","code_chunks":["GetUnknownOutputShape(node, output_port);","InferenceContext* ctx = GetContext(node);","if (ctx == nullptr) {","return errors::InvalidArgument(\"Missing context\");","}","ctx->set_output(output_port, shape);","return Status::OK();"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["GetOutput(context, node, kSoftNMSOutputTensorSelectedScores);","output_num_selected_indices =","GetOutput(context, node, kSoftNMSOutputTensorNumSelectedIndices);","if (!is_max_output_size_const) {","SetTensorSizes(context, output_selected_indices, {max_output_size_value});","SetTensorSizes(context, output_selected_scores, {max_output_size_value});"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp6_write_bin(uint8_t *bin, int len, const fp6_t a) {","if (len != 6 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input1));","const TfLiteTensor* input2;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &input2));"],"label":0}
{"cve":"CVE-2019-15165","code_chunks":["\t\tp->buffer = bigger_buffer;","\t}","","\t\/*","\t * Copy the stuff we've read to the buffer, and read the rest","\t * of the block.","\t *\/"],"label":0}
{"cve":"CVE-2018-20406","code_chunks":["        firstitem = PyIter_Next(iter);","        if (firstitem == NULL) {","            if (PyErr_Occurred())","                goto error;","","            \/* nothing more to add *\/","            break;"],"label":0}
{"cve":"CVE-2022-1031","code_chunks":["for (i = from; stack_rev ? i >= to : i < to; stack_rev ? i-- : i++) {","char *tp = r_type_func_args_type (anal->sdb_types, fname, i);","if (!tp) {","break;","}","if (sum_sz == frame_off) {"],"label":1}
{"cve":"CVE-2021-21378","code_chunks":["TEST_F(GroupVerifierTest, TestRequiresAnyWithAllowMissingButUnknownIssuer) {","TestUtility::loadFromYaml(RequiresAnyConfig, proto_config_);","proto_config_.mutable_rules(0)","->mutable_requires()"],"label":0}
{"cve":"CVE-2020-15192","code_chunks":["  stride_arr->resize(ndim, 1);","  for (int i = 0; i < ndim; i++) {","    (*shape_arr)[i] = tensor->dim_size(i);","  }","  for (int i = ndim - 2; i >= 0; --i) {","    (*stride_arr)[i] = (*shape_arr)[i + 1] * (*stride_arr)[i + 1];","  }"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT16 largePointerSupportFlags;","WLog_INFO(TAG, \"LargePointerCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));","","if (Stream_GetRemainingLength(s) < 2)","return FALSE;"],"label":0}
{"cve":"CVE-2023-41337","code_chunks":["int decode_session_identifier(uint64_t *issued_at, ptls_iovec_t *psk, uint32_t *ticket_age_add, ptls_iovec_t *ticket_ctx,","uint16_t *key_exchange_id, uint16_t *csid, ptls_iovec_t *negotiated_protocol, const uint8_t *src,","const uint8_t *const end)","{"],"label":0}
{"cve":"CVE-2021-30022","code_chunks":["","if (!pps->status) pps->status = 1;","pps->sps_id = gf_bs_read_ue_log(bs, \"sps_id\");","if (pps->sps_id >= 32) {","pps->sps_id = 0;","return -1;","}"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["    PyObject *tmp = NULL;","","    if (obj == Py_None) {","        *out = NULL;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)Slice_type);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["                    GetOutputSafe(context, node, kOutputTensor, &output));","","  TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);","","  const TfLiteType type = input1->type;","  if (type != kTfLiteBool) {","    context->ReportError(context, \"Logical ops only support bool type.\");"],"label":0}
{"cve":"CVE-2019-15226","code_chunks":["uint64_t byte_size = 0;","for (const HeaderEntryImpl& header : headers_) {","byte_size += header.key().size();","byte_size += header.value().size();","}","return byte_size;"],"label":0}
{"cve":"PYSEC-2020-116","code_chunks":["if (!status->status.ok()) {","return nullptr;","}","","auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);","if (!status->status.ok()) {"],"label":0}
{"cve":"CVE-2020-11945","code_chunks":["assert(nonce != NULL);","","if (nonce->references > 0) {","-- nonce->references;","} else {","debugs(29, DBG_IMPORTANT, \"Attempt to lower nonce \" << nonce << \" refcount below 0!\");"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2020-24371","code_chunks":["lua_assert(isgray(curr));","gray2black(curr);  \/* make it black, for next barrier *\/","changeage(curr, G_TOUCHED1, G_TOUCHED2);","p = next;  \/* go to next element *\/"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kStartTensor, &start));","const TfLiteTensor* limit;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kLimitTensor, &limit));","const TfLiteTensor* delta;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDeltaTensor, &delta));",""],"label":0}
{"cve":"CVE-2017-13146","code_chunks":["          {","            fclose(clone_info->file);","            clone_info->file = NULL;","            (void) remove_utf8(clone_info->filename);","          }","        }","        }"],"label":0}
{"cve":"CVE-2023-0302","code_chunks":["while (buf + 1 < buf_end) {","const char *filename = (const char *)buf;","size_t maxlen = R_MIN ((size_t) (buf_end - buf - 1), 0xfff);","ut64 id_idx, mod_time, file_len;","size_t len = r_str_nlen (filename, maxlen);",""],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,","const TfLiteTensor* input,","const TfLiteTensor* filter,","TfLiteTensor* output,","double* multiplier) {"],"label":1}
{"cve":"CVE-2022-29228","code_chunks":["","return Http::FilterHeadersStatus::StopIteration;","}","","const auto query_parameters = Http::Utility::parseQueryString(path_str);","if (query_parameters.find(queryParamsError()) != query_parameters.end()) {"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 channelId = 0;","UINT16 securityFlags = 0;","","if (!rdp_read_header(rdp, s, &length, &channelId))","{","WLog_ERR(TAG, \"Incorrect RDP header.\");"],"label":0}
{"cve":"CVE-2020-14404","code_chunks":["seg = data+(j*w);                                                 \\","if (seg[x] != cl) {break;}                                        \\","i = x;                                                            \\","while ((seg[i] == cl) && (i < w)) i += 1;                         \\","i -= 1;                                                           \\","if (j == y) vx = hx = i;                                          \\","if (i < vx) vx = i;                                               \\"],"label":1}
{"cve":"CVE-2023-51782","code_chunks":["case TIOCINQ: {","struct sk_buff *skb;","long amount = 0L;","\/* These two are safe on a single CPU system as only user tasks fiddle here *\/","if ((skb = skb_peek(&sk->sk_receive_queue)) != NULL)","amount = skb->len;","return put_user(amount, (unsigned int __user *) argp);"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["if (!a)","return;","ALLOC_GROW(res->attrs, res->num_matches + 1, res->alloc);","res->attrs[res->num_matches++] = a;","}",""],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    if (use_projection_bias) {","      tensor_utils::VectorBatchVectorAssign(projection_bias, n_output, n_batch,","                                            output_state);","    } else {","      std::fill_n(output_state, n_batch * n_output, 0.0f);","    }","    tensor_utils::MatrixBatchVectorMultiplyAccumulate("],"label":0}
{"cve":"CVE-2023-46853","code_chunks":["static int _process_tokenize(mcp_parser_t *pr, const size_t max) {","const char *s = pr->request;","int len = pr->reqlen - 2;","","if (len > PARSER_MAXLEN) {","len = PARSER_MAXLEN;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"context_expr\\\" missing from withitem\");","return 1;","}","if (exists_not_none(obj, &PyId_optional_vars)) {","int res;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInput, &input));","const TfLiteTensor* axis;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));"],"label":0}
{"cve":"CVE-2017-6890","code_chunks":["void CLASS foveon_dp_load_raw()","{","unsigned c, roff[4], row, col, diff;","ushort huff[1024], vpred[2][2], hpred[2];","","fseek (ifp, 8, SEEK_CUR);","foveon_huff (huff);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["accum_scratch_size));","}","node->temporaries->data[4] = op_data->scratch_tensor_index + 4;","TfLiteTensor* zero_points = GetTemporary(context, node, \/*index=*\/4);","zero_points->type = kTfLiteInt32;","zero_points->allocation_type = kTfLiteArenaRw;","int zero_points_dims[1] = {batch_size};"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["if (is_hybrid_op) {","op_data->compute_row_sums = true;","node->temporaries->data[1] = scratch_tensor_index + 1;","TfLiteTensor* input_quantized = GetTemporary(context, node, \/*index=*\/1);","input_quantized->type = weights_feature->type;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE(context, IsDynamicTensor(output0));","const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output1 = GetOutput(context, node, 1);","TF_LITE_ENSURE(context, input->dims->size == output1->dims->size);","TF_LITE_ENSURE(context, input->dims->data[0] == output1->dims->data[0]);","return kTfLiteOk;"],"label":1}
{"cve":"CVE-2020-5235","code_chunks":["* upwards. *\/","                        allocated_size += (substream.bytes_left - 1) \/ iter->pos->data_size + 1;","                        ","                        if (!allocate_field(&substream, iter->pData, iter->pos->data_size, allocated_size))","                        {","                            status = false;","                            break;"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["ToCudnnDataType(input_type_) == CUDNN_DATA_INT8 &&","ToCudnnDataType(output_type_) == CUDNN_DATA_FLOAT) {","return tsl::Status(","port::error::FAILED_PRECONDITION,","\"This configuration potentially produces incorrect results.\");","}","#else"],"label":1}
{"cve":"CVE-2018-20174","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["            pj_sockaddr_init(pj_AF_INET(), &ap.rem_rtcp, 0, 0);","        }","","        ap.addr_len = pj_sockaddr_get_len(&ap.rem_addr);","        status = pjmedia_transport_attach2(&ds->srtp->base, &ap);","        if (status != PJ_SUCCESS)","            goto on_return;"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["vrrp_print_data(void)","{","FILE *file = fopen (dump_file, \"w\");","","if (!file) {","log_message(LOG_INFO, \"Can't open %s (%d: %s)\","],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["reinterpret_cast<TfLiteResizeNearestNeighborParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\teb_hlv(s, q);","","\t\t\t\t\/* If Tr(x_T) != Tr(a). *\/","\t\t\t\tif (fb_trc(s->x) != 0) {","\t\t\t\t\t\/* z = l_t, w = sqrt(l_Q), l_T = l_T + sqrt(l_Q) + v. *\/","\t\t\t\t\tfb_copy(z, s->y);","\t\t\t\t\tfb_srt(w, q->y);"],"label":0}
{"cve":"CVE-2023-28366","code_chunks":["* due to queue. This isn't an error so don't disconnect them. *\/","\/* FIXME - this is no longer necessary due to failing early above *\/","if(!res){","if(send__pubrec(context, stored->source_mid, 0, NULL)) rc = 1;","}else if(res == 1){","rc = 1;","}"],"label":1}
{"cve":"CVE-2022-39244","code_chunks":["\t++s;","    }","","    pj_strset3(out, scanner->curptr, s);","","    scanner->curptr = s;",""],"label":0}
{"cve":"CVE-2018-12559","code_chunks":["load();","mount();","icn=MonoIcon::icon(details.isLocalFile()","? FontAwesome::foldero",": constSshfsProtocol==details.url.scheme()","? FontAwesome::linux_os"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["uint8_t data_2 = 0;","char *text = NULL;","","if (!siz) goto shortbuf;","","if (event_data[0] >= 0x80) {","command = *event_data & 0xf0;"],"label":0}
{"cve":"CVE-2023-29323","code_chunks":["\tif (!ascii_dump_field(field, ep, buf, sizeof buf))","\t\tgoto err;","\tif (buf[0] == '\\0')","\t\treturn;","","\tl = snprintf(*dest, *len, \"%s: %s\\n\", field, buf);","\tif (l < 0 || (size_t) l >= *len)"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["const bn_t *v2) {","bn_t t, b1, b2;","int r1, r2;","size_t bits;","","bn_null(b1);"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["__set_bit(DONT_FORK_BIT, &debug);","__set_bit(NO_SYSLOG_BIT, &debug);","if (optarg && optarg[0]) {","int fd = open(optarg, O_WRONLY | O_APPEND | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);","if (fd == -1) {","fprintf(stderr, \"Unable to open config-test log file %s\\n\", optarg);","exit(EXIT_FAILURE);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteIntArray* input_dims = input->dims;","int input_dims_size = input_dims->size;"],"label":0}
{"cve":"CVE-2023-35852","code_chunks":["return 0;","}","","const char *dir = ConfigGetDataDirectory();"],"label":1}
{"cve":"CVE-2019-17546","code_chunks":["    for( ; h > 0; --h) {","        uint16 *wp = (uint16 *) pp;","","\tfor (x = w; x > 0; --x)","        {","            \/* use high order byte of 16bit value *\/",""],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["auto* validation_context = context.mutable_common_tls_context()->mutable_validation_context();","validation_context->mutable_trusted_ca()->set_filename(","TestEnvironment::runfilesPath(\"test\/config\/integration\/certs\/upstreamcacert.pem\"));","validation_context->add_match_subject_alt_names()->set_suffix(\"lyft.com\");","if (clientType() == Grpc::ClientType::GoogleGrpc) {","auto* google_grpc = grpc_service->mutable_google_grpc();","auto* ssl_creds = google_grpc->mutable_channel_credentials()->mutable_ssl_credentials();"],"label":1}
{"cve":"CVE-2021-39212","code_chunks":["  (void) exception;","#else","  {","    ImageFilterHandler","      *image_filter;","","    image_filter=(ImageFilterHandler *) NULL;"],"label":0}
{"cve":"PYSEC-2021-376","code_chunks":["import sys","import unittest","import json","import unittest.mock as mock"],"label":1}
{"cve":"CVE-2021-32845","code_chunks":["\t\tWPRINTF((\"vtrnd: \/dev\/random not ready, read(): %d\", len));","\t\treturn (1);","\t}","","\tsc = calloc(1, sizeof(struct pci_vtrnd_softc));","","\tvi_softc_linkup(&sc->vrsc_vs, &vtrnd_vi_consts, sc, pi, &sc->vrsc_vq);"],"label":0}
{"cve":"CVE-2022-0676","code_chunks":["if (!offset) {","return NULL;","}","","ut64 size = sizeof (cache_accel_t);","cache_accel_t *accel = R_NEW0 (cache_accel_t);"],"label":1}
{"cve":"CVE-2022-0156","code_chunks":["\t\tvim_free(line);","\t\tif ((line = eap->getline(':', eap->cookie,","\t\t\t\t\t   0, GETLINE_CONCAT_CONTBAR)) == NULL)","\t\t{","\t\t    emsg(_(e_missing_rcurly));","\t\t    break;","\t\t}"],"label":0}
{"cve":"CVE-2022-0521","code_chunks":["}","RBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);","offset += 6;","IFDBG eprintf(\"r_bin_java_stack_map_table_attr_new: New stack map allocated.\\n\");","if (!attr) {","return NULL;","}"],"label":1}
{"cve":"PYSEC-2021-660","code_chunks":["","TensorShape output_shape;","OP_REQUIRES_OK(context, TensorShapeUtils::MakeShape(","input_shape_t.data() + 1,","input_shape->NumElements() - 1, &output_shape));","","std::unordered_set<int64> visited;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\tWLog_INFO(TAG, \"\\tsoundFlags: 0x%04\" PRIX16 \"\", soundFlags);","\tWLog_INFO(TAG, \"\\tpad2OctetsA: 0x%04\" PRIX16 \"\", pad2OctetsA);","\treturn TRUE;","}","#endif","","\/**"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fb_read_bin(fb_t a, const uint8_t *bin, size_t len) {","bn_t t;","","bn_null(t);"],"label":0}
{"cve":"CVE-2016-5418","code_chunks":["","dest = src = path;","if (*src == '\\0') {","if (error_number) *error_number = ARCHIVE_ERRNO_MISC;","if (error_string)","archive_string_sprintf(error_string,","\"Invalid empty pathname\");"],"label":0}
{"cve":"CVE-2019-20636","code_chunks":["{\t\t\t\t\t\t\t\t\t\\","\tstruct input_dev *input_dev = to_input_dev(dev);\t\t\\","\t\t\t\t\t\t\t\t\t\\","\treturn scnprintf(buf, PAGE_SIZE, \"%s\\n\",\t\t\t\\","\t\t\t input_dev->name ? input_dev->name : \"\");\t\\","}\t\t\t\t\t\t\t\t\t\\","static DEVICE_ATTR(name, S_IRUGO, input_dev_show_##name, NULL)"],"label":0}
{"cve":"CVE-2021-41220","code_chunks":["done);","","Tensor group_assignment = c->input(2);","","OP_REQUIRES_OK_ASYNC(","c,"],"label":1}
{"cve":"CVE-2018-8797","code_chunks":["}","","\/* main decompress function *\/","RD_BOOL","bitmap_decompress(uint8 * output, int width, int height, uint8 * input, int size, int Bpp)","{","\tRD_BOOL rv = False;"],"label":0}
{"cve":"CVE-2022-23582","code_chunks":["int64_t TensorByteSize(const TensorProto& t) {","int64_t num_elems = TensorShape(t.tensor_shape()).num_elements();","return num_elems < 0 ? -1 : num_elems * DataTypeSize(t.dtype());","}"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["  std::unique_ptr<AuthAuthorizerChallenge> *challenge)","{","  ","  return true;","}","",""],"label":0}
{"cve":"CVE-2017-9143","code_chunks":["pixels=(const unsigned char *) ReadBlobStream(image,length,","GetQuantumPixels(quantum_info),&count);","if (count != (ssize_t) length)","ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");","(void) ImportQuantumPixels(image,(CacheView *) NULL,quantum_info,","GrayQuantum,pixels,exception);","pixels=(const unsigned char *) ReadBlobStream(image,(size_t) (-(ssize_t)"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["      context, node, lstm::full::kCellToInputWeightsTensor);","  const TfLiteTensor* cell_to_forget_weights = GetOptionalInputTensor(","      context, node, lstm::full::kCellToForgetWeightsTensor);","  const TfLiteTensor* cell_to_output_weights = GetOptionalInputTensor(","      context, node, lstm::full::kCellToOutputWeightsTensor);","","  const TfLiteTensor* input_gate_bias ="],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ed_map(ed_t p, const uint8_t *msg, int len) {","ed_map_dst(p, msg, len, (const uint8_t *)\"RELIC\", 5);","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  TF_LITE_ENSURE_OK(","      context,","      GetInputSafe(context, node, kRecurrentWeightsTensor, &recurrent_weights));","  const TfLiteTensor* bias;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kBiasTensor, &bias));","    TfLiteTensor* hidden_state =","      GetVariableInput(context, node, kHiddenStateTensor);"],"label":0}
{"cve":"CVE-2023-28487","code_chunks":["if ((evlog = iolog_parse_loginfo(-1, log_dir)) == NULL)","goto done;","","if (evlog->command == NULL || evlog->submituser == NULL ||","evlog->runuser == NULL) {","goto done;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");"],"label":1}
{"cve":"CVE-2021-3770","code_chunks":["\tif (check_opt_strings(*varp, p_fdm_values, FALSE) != OK","\t\t|| *curwin->w_p_fdm == NUL)","\t    errmsg = e_invarg;","\telse","\t{","\t    foldUpdateAll(curwin);","\t    if (foldmethodIsDiff(curwin))"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["for (int i = 0; i < NumOutputs(node); ++i) {","TfLiteIntArray* output_dims = TfLiteIntArrayCopy(input->dims);","output_dims->data[axis_value] = size_splits_vector.at(i);","TfLiteTensor* output = GetOutput(context, node, i);","TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_dims));","}",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp_prime_set_pmers(const int *f, int len) {","bn_t p, t;","","bn_null(p);"],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["todo[i]   = isix++;","todo[i+1] = buffer >> (14-i)*5;","}","for (i=0; i < 16; i+=2)"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["      auto const class_name = bt_frame->get(s_class.get());","      if (class_name.is_init()) {","        assertx(isStringType(type(class_name)));","        strncpy(frame->class_name,","                val(class_name).pstr->data(),","                std::min<int64_t>(","                  val(class_name).pstr->size(),"],"label":0}
{"cve":"CVE-2020-13398","code_chunks":["BN_mod_exp(y, x, exp, mod, ctx);","output_length = BN_bn2bin(y, output);","crypto_reverse(output, output_length);","","if (output_length < (int)key_length)","memset(output + output_length, 0, key_length - output_length);"],"label":1}
{"cve":"PYSEC-2021-718","code_chunks":["TF_LITE_ENSURE_STATUS(EnsureTensorDataIsReadable(tensor_index));","}","if (tensor->data.raw == nullptr && tensor->bytes > 0) {","if (registration.builtin_code == kTfLiteBuiltinReshape && i == 1) {","continue;","} else {","ReportError(\"Input tensor %d lacks data\", tensor_index);"],"label":1}
{"cve":"CVE-2017-12641","code_chunks":["","if (status == MagickFalse)","return((Image *) NULL);","","if (LocaleCompare(image_info->magick,\"JNG\") != 0)","ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT16 helpKeyFlag;","UINT16 helpKeyIndexFlag;","UINT16 helpExtendedKeyFlag;","UINT16 windowManagerKeyFlag;","WLog_INFO(TAG,"],"label":0}
{"cve":"CVE-2023-36327","code_chunks":["\t\t\tcore_clean();","\t\t\treturn 1;","\t\t}","","\t\tif (vbnn() != RLC_OK) {","\t\t\tcore_clean();","\t\t\treturn 1;"],"label":0}
{"cve":"CVE-2017-3733","code_chunks":["goto err;","","for (j = 0; j < numpipes; j++) {","if (SSL_USE_ETM(s) && mac_size != 0) {","if (s->method->ssl3_enc->mac(s, &wr[j],","outbuf[j] + wr[j].length, 1) < 0)","goto err;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fb_rand(fb_t a) {","size_t bits, digits;","","rand_bytes((uint8_t *)a, RLC_FB_DIGS * sizeof(dig_t));",""],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["    if (lb->lb_type == ENDMARKER)","        return \"EMPTY\";","    else if (ISNONTERMINAL(lb->lb_type)) {","        if (lb->lb_str == NULL) {","            PyOS_snprintf(buf, sizeof(buf), \"NT%d\", lb->lb_type);","            return buf;","        }"],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["      if (size >= RuntimeOption::MaxSerializedStringSize) {","        throw Exception(\"Size of serialized string (%ld) exceeds max\", size);","      }","      StringBuffer sb;","      sb.append(\"s:\");","      sb.append(size);","      sb.append(\":\\\"\");"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  output->type = input->type;","","  return context->ResizeTensor(context, output,","                               TfLiteIntArrayCopy(input->dims));"],"label":0}
{"cve":"CVE-2022-35970","code_chunks":["    AddInputFromArray<qint32>(TensorShape({value_count}),","                            {-(1 << 23), 0, (1 << 23)});","  AddInputFromArray<float>(TensorShape({}), {-256.0f});","  AddInputFromArray<float>(TensorShape({}), {256.0f});","  AddInputFromArray<float>(TensorShape({}), {-1.0f});","  AddInputFromArray<float>(TensorShape({}), {1.0f});","  TF_ASSERT_OK(RunOpKernel());"],"label":0}
{"cve":"CVE-2020-11096","code_chunks":["update_write_coord(s, line_to->nYEnd);","orderInfo->fieldFlags |= ORDER_FIELD_06;","update_write_color(s, line_to->backColor);","orderInfo->fieldFlags |= ORDER_FIELD_07;","Stream_Write_UINT8(s, line_to->bRop2);","orderInfo->fieldFlags |= ORDER_FIELD_08;"],"label":1}
{"cve":"PYSEC-2021-412","code_chunks":["\"Unexpected dimensions on input group_size. \"","\"It shoulbe a scalar, got tensor with shape \",","group_size_t.shape().DebugString());","}","if (group_key_t.dims() > 0) {","return errors::InvalidArgument("],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* input_weights;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","const TfLiteTensor* recurrent_weights;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","            reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","      const TfLiteTensor* in_tensor;","      TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &in_tensor));","      TfLiteTensor* out_tensor;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));","      TfLiteIntArray* new_size = TfLiteIntArrayCopy(in_tensor->dims);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\tep_neg(t[0], r);","\t\tdv_copy_cond(r->y, t[0]->y, RLC_FP_DIGS, bn_sign(_k) == RLC_NEG);","\t} RLC_CATCH_ANY {","\t\tRLC_THROW(ERR_CAUGHT);","\t}","\tRLC_FINALLY {","\t\tbn_free(n);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  const TfLiteTensor* default_value;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDefaultValueTensor,","                                          &default_value));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));",""],"label":0}
{"cve":"CVE-2020-23931","code_chunks":["tmp_strsize=(u32)ptr->size-8;","while (tmp_strsize) {","tmp_str[j] = gf_bs_read_u8(bs);","tmp_strsize--;"],"label":1}
{"cve":"CVE-2023-2837","code_chunks":["\t\ts32 read = gf_gzread(parser->gz_in, szLine, XML_INPUT_SIZE);","#endif","\t\tif ((read<=0) \/*&& !parser->node_depth*\/) break;","\t\tszLine[read] = 0;","\t\tszLine[read+1] = 0;","\t\te = gf_xml_sax_parse(parser, szLine);","\t\tif (e) break;"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["m_server(NULL),","m_events(events),","m_useSecureNetwork(enableCrypto)","{","assert(m_socketFactory != NULL);",""],"label":1}
{"cve":"CVE-2022-29228","code_chunks":["bool found_bearer_token_{false};"],"label":1}
{"cve":"CVE-2018-18839","code_chunks":["while(*s && d < e) {","if(unlikely(*s == '%')) {","if(likely(s[1] && s[2])) {","*d++ = from_hex(s[1]) << 4 | from_hex(s[2]);","s += 2;","}","}"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["static int item_length(const char *s)","{","return utf8_strnwidth(s, -1, 1);","}","","\/*"],"label":1}
{"cve":"CVE-2022-1587","code_chunks":["    loop = LABEL();","    OP2(SLJIT_ADD, STR_PTR, 0, STR_PTR, 0, SLJIT_IMM, IN_UCHARS(1));","    quit = CMP(SLJIT_GREATER_EQUAL, STR_PTR, 0, STR_END, 0);","    OP1(MOV_UCHAR, TMP1, 0, SLJIT_MEM1(STR_PTR), IN_UCHARS(-2));","    OP1(MOV_UCHAR, TMP2, 0, SLJIT_MEM1(STR_PTR), IN_UCHARS(-1));","    CMPTO(SLJIT_NOT_EQUAL, TMP1, 0, SLJIT_IMM, (common->newline >> 8) & 0xff, loop);","    CMPTO(SLJIT_NOT_EQUAL, TMP2, 0, SLJIT_IMM, common->newline & 0xff, loop);"],"label":0}
{"cve":"CVE-2021-37653","code_chunks":["const Tensor& params) {","int64_t batch_size = 1;      for (int idx = 0; idx < batch_dims_; ++idx) {","batch_size *= params.dim_size(idx);","}","OP_REQUIRES(","ctx, batch_size != 0,"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["GetInput(context, node, kRecurrentWeightsTensor);","const TfLiteTensor* bias = GetInput(context, node, kBiasTensor);","TfLiteTensor* hidden_state =","&context->tensors[node->inputs->data[kHiddenStateTensor]];","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);",""],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["      const dnn::AlgorithmConfig& algorithm_config, float dropout,","      uint64_t seed, ScratchAllocator* state_allocator, bool use_padded_io) {","    TF_ASSIGN_OR_RETURN(","        CudnnDropoutDescriptor dropout_desc,","        CudnnDropoutDescriptor::Create(cudnn, dropout, seed, state_allocator));","","    gpu::RnnDescriptor rnn_desc = CreateRnnDescriptor();"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["    }","","    if (sep == Py_None) {","        sep = NULL;","    }","    else if (sep && !PyUnicode_Check(sep)) {","        PyErr_Format(PyExc_TypeError,"],"label":0}
{"cve":"CVE-2022-41900","code_chunks":["INFER_OK(op, \"?\", \"[?,?,?,?];[?];[?]\");","INFER_OK(op, \"[?,?,?,?]\", \"[?,?,?,?];[?];[?]\");","","INFER_OK(op, \"[10,20,30,40]\", \"[5,20,45,80];[20];[45]\");"],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["    strcpy (make, \"Apple\");","    strcpy (model,\"QuickTake 150\");","    load_raw = &CLASS kodak_radc_load_raw;","  } else if (!memcmp (head,\"FUJIFILM\",8)) {","#ifdef LIBRAW_LIBRARY_BUILD","    strcpy(model, head+0x1c);","    memcpy(model2, head+0x3c, 4);"],"label":0}
{"cve":"CVE-2023-23557","code_chunks":["","ComputedPropertyDescriptor desc;","CallResult<bool> crb =","JSProxy::getOwnProperty(from, runtime, nextKeyHandle, desc, nullptr);","if (LLVM_UNLIKELY(crb == ExecutionStatus::EXCEPTION))","return ExecutionStatus::EXCEPTION;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["}","const int input_dims = NumDimensions(input_tensor);","","TfLiteTensor* output_tensor = GetOutput(context, node, 0);","if (IsDynamicTensor(output_tensor)) {","auto output_size = GetPaddedOutputShape(input_tensor, padding_matrix);","if (output_size == nullptr) {"],"label":1}
{"cve":"PYSEC-2021-309","code_chunks":["if (positions->type == kTfLiteInt64) {","switch (input->type) {","return Gather<float, int64_t>(*params, input, positions, output);","return Gather<uint8_t, int64_t>(*params, input, positions, output);","return Gather<int8_t, int64_t>(*params, input, positions, output);","return Gather<int16_t, int64_t>(*params, input, positions, output);"],"label":1}
{"cve":"CVE-2021-32785","code_chunks":["reply = oidc_cache_redis_command(r, context,","apr_psprintf(r->pool, \"DEL %s\",","oidc_cache_redis_get_key(r->pool, section, key)));",""],"label":1}
{"cve":"CVE-2023-22742","code_chunks":["\tGIT_UNUSED(payload);","","\tGIT_ASSERT_ARG(out);","\t*out = NULL;","","\tgit_error_set(GIT_ERROR_INVALID, \"cannot create SSH transport. Library was built without SSH support\");","\treturn -1;"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["    auto db_path = is_client","            ? barrier::DataDirectories::trusted_servers_ssl_fingerprints_path()","            : barrier::DataDirectories::trusted_clients_ssl_fingerprints_path();","","    auto db_dir = db_path.parent_path();","    if (!barrier::fs::exists(db_dir)) {","        barrier::fs::create_directories(db_dir);"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["","static struct PyModuleDef _astmodule = {","  PyModuleDef_HEAD_INIT, \"_ast\"","};","PyMODINIT_FUNC","PyInit__ast(void)","{"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["certificate_revocation_list_path_(","Config::DataSource::getPath(config.crl())",".value_or(certificate_revocation_list_.empty() ? EMPTY_STRING : INLINE_STRING)),","subject_alt_name_matchers_(config.match_subject_alt_names().begin(),"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["*\/","UINT8 pduType;","if (!type)","return FALSE;","if (Stream_GetRemainingLength(s) < 6)","return FALSE;"],"label":0}
{"cve":"CVE-2018-15859","code_chunks":["xkb_atom_text(ctx, expr->field_ref.field));","return false;","","ok = ExprResolveBoolean(ctx, expr->unary.child, set_rtrn);","if (ok)","*set_rtrn = !*set_rtrn;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp48_write_bin(uint8_t *bin, size_t len, const fp48_t a, int pack) {","fp48_t t;","","fp48_null(t);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":[],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["mod_ty res;","PyObject *req_type[3];","char *req_name[] = {\"Module\", \"Expression\", \"Interactive\"};","int isinstance;","","req_type[0] = (PyObject*)Module_type;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), data->values_count);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input0;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input0));","const int dimension_size = NumDimensions(input0) + 1;","if (data->axis < 0) {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["{","_Py_IDENTIFIER(__dict__);","PyObject *dict;","if (lookup_attr_id(self, &PyId___dict__, &dict) < 0) {","return NULL;","}"],"label":0}
{"cve":"CVE-2018-18838","code_chunks":["if(unlikely(*s == '%')) {","if(likely(s[1] && s[2])) {","char t = from_hex(s[1]) << 4 | from_hex(s[2]);","*d++ = (char)((isprint(t))? t : ' ');","s += 2;","}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","node->temporaries->data[kInputZeroPoints] =","op_data->scratch_tensor_index + kInputZeroPoints;","TfLiteTensor* input_zp = GetTemporary(context, node, kInputZeroPoints);","input_zp->type = kTfLiteFloat32;","input_zp->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(input_zp->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"CVE-2017-18190","code_chunks":["!_cups_strcasecmp(con->clientname, \"localhost.\") ||","#ifdef __linux","!_cups_strcasecmp(con->clientname, \"localhost.localdomain\") ||","#endif \/* __linux *\/","!strcmp(con->clientname, \"127.0.0.1\") ||","!strcmp(con->clientname, \"[::1]\"));"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["}","","if (piv.size() < iv_required_len) {","raise_warning(\"IV passed is only %d bytes long, cipher \"","\"expects an IV of precisely %d bytes, padding with \\\\0\",","piv.size(), iv_required_len);","memcpy(iv_new, piv.data(), piv.size());"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (isdigit(c)) {","return syntaxerror(tok,","\"invalid digit '%c' in octal literal\", c);","}","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["Subgraph& active_branch_subgraph =","*(*subgraphs)[active_branch_subgraph_index];","for (int i = 0; i < active_branch_subgraph.inputs().size(); ++i) {","const TfLiteTensor* input = GetInput(context, node, i + 1);","TfLiteTensor* subgraph_input =","active_branch_subgraph.tensor(active_branch_subgraph.inputs()[i]);","TF_LITE_ENSURE_EQ(context, input->bytes, subgraph_input->bytes);"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["    break;","","","    { backup_type = actual_type;","                           actual_type = YANG_VERSION_KEYWORD;","                         }",""],"label":0}
{"cve":"CVE-2017-12932","code_chunks":[],"label":1}
{"cve":"CVE-2018-16642","code_chunks":["case 1:  \/* Convert bitmap scanline. *\/","{","q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);","if (q == (Quantum *) NULL)","break;","for (x=0; x < ((ssize_t) image->columns-7); x+=8)"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), data->values_count);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input0 = GetInput(context, node, 0);","const int dimension_size = NumDimensions(input0) + 1;","if (data->axis < 0) {","data->axis += dimension_size;"],"label":1}
{"cve":"CVE-2020-15945","code_chunks":["ptrdiff_t oldtop = savestack(L, L->top);  \/* hook may change top *\/","int delta = 0;","if (isLuacode(ci)) {","Proto *p = clLvalue(s2v(ci->func))->p;","if (p->is_vararg)","delta = ci->u.l.nextraargs + p->numparams + 1;","if (L->top < ci->top)"],"label":1}
{"cve":"CVE-2017-5225","code_chunks":["uint32 w, l, tw, tl;","int bychunk;","","(void) TIFFGetFieldDefaulted(in, TIFFTAG_PLANARCONFIG, &shortv);","if (shortv != config && bitspersample != 8 && samplesperpixel > 1) {","fprintf(stderr,","\"%s: Cannot handle different planar configuration w\/ bits\/sample != 8\\n\","],"label":0}
{"cve":"CVE-2023-30188","code_chunks":["return _value->toStringA();","return \"{}\";","}","","std::wstring CV8RealTimeWorker::GetJSVariable(std::wstring sParam)","{"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["size_t rawNameLen;","char *rawNameBuf = tag->buf + nameLen;","\/* Stop if already stored.  Since m_tagStack is a stack, we can stop","at the first entry that has already been copied; everything","below it in the stack is already been accounted for in a","previous call to this function."],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["break;","}","if (group_matched != UNSPEC) {","if (matching_group != NULL && m->type != ALIAS)","*matching_group = m;","break;"],"label":1}
{"cve":"CVE-2021-29523","code_chunks":["","TensorShape output_shape;","OP_REQUIRES_OK(context, TensorShapeUtils::MakeShape(","input_shape_t.data() + 1,","input_shape->NumElements() - 1, &output_shape));","","std::unordered_set<int64> visited;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const float soft_nms_sigma = *GetTensorData<float>(input_sigma);","if (soft_nms_sigma < 0) {","context->ReportError(context, \"Invalid sigma value for soft NMS: %f\","],"label":1}
{"cve":"CVE-2019-6978","code_chunks":["* for the decompressor.  Late addition:  construct the table according to","* file size for noticeable speed improvement on small files.  Please direct","* questions about this implementation to ames!jaw.","*\/","","static void output(code_int code, GifCtx *ctx);"],"label":1}
{"cve":"CVE-2018-14362","code_chunks":["static int nntp_hcache_namer(const char *path, char *dest, size_t destlen)","{","return snprintf(dest, destlen, \"%s.hcache\", path);","}","","\/**"],"label":1}
{"cve":"CVE-2016-6912","code_chunks":["","\tIf _quality_ is -1, a reasonable quality value (which should yield a","\tgood general quality \/ size tradeoff for most situations) is used. Otherwise","\t_quality_ should be a value in the range 0-100, higher quality values","\tusually implying both higher quality and larger image sizes.","",""],"label":0}
{"cve":"CVE-2021-32137","code_chunks":["if (!entry) return GF_ISOM_INVALID_FILE;","if (entry->flags == 1) return GF_OK;","","if (entry->type == GF_ISOM_BOX_TYPE_URN) return GF_NOT_SUPPORTED;","if (mdia->mediaTrack->moov->mov->openMode == GF_ISOM_OPEN_WRITE) {","e = gf_isom_datamap_new(entry->location, NULL, GF_ISOM_DATA_MAP_READ, &map);","} else {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["                                 &fw_input_to_forget_weights));","  const TfLiteTensor* fw_input_to_cell_weights;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kFwInputToCellWeightsTensor,","                                 &fw_input_to_cell_weights));","  const TfLiteTensor* fw_input_to_output_weights;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2022-29228","code_chunks":["FilterConfigSharedPtr getConfig() {","envoy::extensions::filters::http::oauth2::v3::OAuth2Config p;","auto* endpoint = p.mutable_token_endpoint();","endpoint->set_cluster(\"auth.example.com\");"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["switch (tag) {","#ifdef LIBRAW_LIBRARY_BUILD","imgdata.lens.FocalLengthIn35mmFormat = get2();","break;","stmread(imgdata.shootinginfo.BodySerial, len, ifp);","break;"],"label":1}
{"cve":"CVE-2023-26485","code_chunks":["","cmark_renderer renderer = {mem,   &buf, &pref, 0,           width,","0,     0,    true,  true,        false,","false, outc, S_cr,  S_blankline, S_out,","0};"],"label":1}
{"cve":"CVE-2019-15139","code_chunks":["      break;","      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");","  }","  switch (header.byte_order)","  {","      break;","      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"],"label":0}
{"cve":"CVE-2022-36017","code_chunks":["       -368.677, -1049.6,  -486.608, 1745.67,  95.4821, 396.261,  -254.368,","       -404.388, 786.57,   -1.94961, 198.63,   -1024.0, 785.183,  235.33,","       -43.0953, 241.605,  -245.314, 470.627,  186.144, 186.319,  -219.522,","       1304.84,  385.977,  -358.874, -755.635, 360.122, -865.936, 54.8904,","       -509.235});","","  AddInputFromArray<quint8>(input_quantized.shape(),"],"label":0}
{"cve":"CVE-2019-19060","code_chunks":["return -ENOMEM;","","rx = adis->buffer;","tx = rx + scan_count;","","spi_message_init(&adis->msg);"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["","{","int l = atoi(fmt + 1);","ND_TCHECK_LEN(buf, l);","buf += l;","fmt++;"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["bool AuthNoneAuthorizeHandler::verify_authorizer(CephContext *cct, KeyStore *keys,","bufferlist& authorizer_data, bufferlist& authorizer_reply,","EntityName& entity_name, uint64_t& global_id, AuthCapsInfo& caps_info, CryptoKey& session_key,","uint64_t *auid)","{","bufferlist::iterator iter = authorizer_data.begin();",""],"label":1}
{"cve":"CVE-2020-15202","code_chunks":["auto do_work = [samples_per_batch, num_elements, &ctx, &means, &stddevs,","&minvals, &maxvals, &gen, &output,","kStdDevsInsideBoundsToUseRandnSampler](int start_batch,","int limit_batch) {","random::PhiloxRandom gen_copy = gen;","gen_copy.Skip(start_batch * 2 * kMaxIterations * (samples_per_batch + 3) \/"],"label":1}
{"cve":"CVE-2017-1000251","code_chunks":["\t\t\t\tl2cap_send_cmd(conn, l2cap_get_ident(conn),","\t\t\t\t\tL2CAP_DISCONN_REQ, sizeof(req), &req);","\t\t\t\tgoto done;","\t\t\t}","","\t\t\tl2cap_send_cmd(conn, l2cap_get_ident(conn),","\t\t\t\t\t\tL2CAP_CONF_REQ, len, req);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp18_read_bin(fp18_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"CVE-2018-12559","code_chunks":["MpdCantataMounterInterface * mounter();"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["} else","parser->m_characterDataHandler(","parser->m_handlerArg, (const XML_Char *)s,","(int)((const XML_Char *)end - (const XML_Char *)s));","} else if (parser->m_defaultHandler)","reportDefault(parser, enc, s, end);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* t = GetInput(context, node, i);","TF_LITE_ENSURE_EQ(context, t->dims->size, t0->dims->size);","TF_LITE_ENSURE_EQ(context, t->type, input_type);","for (int d = 0; d < t0->dims->size; ++d) {"],"label":1}
{"cve":"CVE-2021-29523","code_chunks":["    }","","    OP_REQUIRES(","        context, !overflow_ocurred,","        errors::Internal(\"Encountered overflow from large input shape.\"));","","    TensorShape tensor_input_shape(input_shape_vec);"],"label":0}
{"cve":"CVE-2022-21725","code_chunks":["static ConvolutionDimensions OpDimensionsFromInputs("],"label":1}
{"cve":"CVE-2020-26247","code_chunks":["{","VALUE content;","VALUE parse_options;","xmlRelaxNGParserCtxtPtr ctx;","xmlRelaxNGPtr schema;","VALUE errors;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["    case kTfLiteUInt8: {","      UnpackImpl<uint8_t>(context, node, input, data->num, data->axis);","      break;","    }","    case kTfLiteInt8: {","      UnpackImpl<int8_t>(context, node, input, data->num, data->axis);","      break;"],"label":0}
{"cve":"CVE-2018-14360","code_chunks":["{","struct NntpServer *nserv = data;","struct NntpData *nntp_data = NULL;","char group[LONG_STRING] = \"\";","char desc[HUGE_STRING] = \"\";","char mod;","anum_t first, last;"],"label":0}
{"cve":"CVE-2018-7253","code_chunks":["","                            if (debug_logging_mode)","                                error_line (\"%d channels, mask = 0x%08x\", numChannels, chanMask);","                        }","                        else if (!strncmp (dff_chunk_header.ckID, \"CMPR\", 4) && dff_chunk_header.ckDataSize >= 4) {","                            if (strncmp (cptr, \"DSD \", 4)) {","                                error_line (\"DSDIFF files must be uncompressed, not \\\"%c%c%c%c\\\"!\","],"label":0}
{"cve":"CVE-2019-9917","code_chunks":["void CIRCNetwork::SetEncoding(const CString& s) {","m_sEncoding = s;","if (GetIRCSock()) {","GetIRCSock()->SetEncoding(s);","}","}"],"label":1}
{"cve":"CVE-2022-0518","code_chunks":["\t\t}","\t\ticattr->name = r_bin_java_get_item_name_from_bin_cp_list (R_BIN_JAVA_GLOBAL_BIN, obj);","\t\tif (!icattr->name) {","\t\t\tobj = r_bin_java_get_item_from_bin_cp_list (R_BIN_JAVA_GLOBAL_BIN, icattr->inner_class_info_idx);","\t\t\tif (!obj) {","\t\t\t\teprintf (\"BINCPLIST IS NULL %d\\n\", icattr->inner_class_info_idx);","\t\t\t}"],"label":0}
{"cve":"CVE-2022-4202","code_chunks":["\t\t\t\treturn GF_FALSE;","\t\t\t}","\t\t}","","\t\txlink->type = XMLRI_ELEMENTID;","\t\txlink->target = anim_parent;","\t\tgf_node_register_iri(lsr->sg, xlink);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep2_map(ep2_t p, const uint8_t *msg, int len) {","ep2_map_dst(p, msg, len, (const uint8_t *)\"RELIC\", 5);","}"],"label":1}
{"cve":"CVE-2021-3770","code_chunks":["if (buf->b_p_vsts_array)","vim_free(buf->b_p_vsts_array);","if (buf->b_p_vsts && buf->b_p_vsts != empty_option)","tabstop_set(buf->b_p_vsts, &buf->b_p_vsts_array);","else","buf->b_p_vsts_array = 0;","#endif"],"label":1}
{"cve":"CVE-2018-8798","code_chunks":["x = CVAL(in);","if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["                 MIDI Meta Events","                 *\/","                uint32_t tmp_length = 0;","                if ((event_data[0] == 0x00) && (event_data[1] == 0x02)) {","                    \/*","                     Sequence Number","                     We only setting this up here for WM_Event2Midi function"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  static const int kOutputUniqueTensor = 0;","  static const int kOutputIndexTensor = 1;","","  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));"],"label":0}
{"cve":"CVE-2021-21375","code_chunks":["\/* Generating the new offer, in the case media lines doesn't match the","* active SDP (e.g. current\/active SDP's have m=audio and m=video lines,","* and the new offer only has m=audio line), the negotiator will fix","* the new offer by reordering and adding the missing media line with","* port number set to zero.","*\/"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["    TF_LITE_ASSERT_EQ(aux_input->dims->data[2],","                      fw_aux_input_weights->dims->data[1]);","    TF_LITE_ASSERT_EQ(aux_input->dims->data[2],","                      bw_aux_input_weights->dims->data[1]);","  }","","  if (IsHybridOp(input, fw_input_weights)) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (input1->type) {","case kTfLiteInt32: {"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":[" * @param s stream"," * @param settings rdp settings"," *\/","","BOOL gcc_read_client_multitransport_channel_data(wStream* s, rdpMcs* mcs, UINT16 blockLength)","{","\tUINT32 flags;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","output->type = input->type;","return context->ResizeTensor(context, output,"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["REQ(n, comp_for);","","if (NCH(n) == 2) {","is_async = 1;","REQ(CHILD(n, 0), NAME);","assert(strcmp(STR(CHILD(n, 0)), \"async\") == 0);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","node->temporaries->data[kBwScratchBuffer] =","op_data->scratch_tensor_index + kBwScratchBuffer;","TfLiteTensor* bw_scratch_buffer =","GetTemporary(context, node, kBwScratchBuffer);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["return d;","}","assert(0);","\/* NOTREACHED *\/","#endif","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteNode* node) {","std::map<T, int> unique_values;","TfLiteTensor* output_indexes;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &output_indexes));","std::vector<T> output_values;","I* indexes = GetTensorData<I>(output_indexes);"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["while (eap != NULL && eap->getline != NULL","&& (*p == NUL || (VIM_ISWHITE(*whitep) && *p == '#')))","{","char_u *theline = get_function_line(eap, line_to_free, 0,","GETLINE_CONCAT_CONT);","","if (theline == NULL)"],"label":1}
{"cve":"CVE-2022-29228","code_chunks":["      Http::ResponseHeaderMapPtr response_headers{","          Http::createHeaderMap<Http::ResponseHeaderMapImpl>(","              {{Http::Headers::get().Status, std::to_string(enumToInt(Http::Code::Found))},","               {Http::Headers::get().Location, state}})};","      decoder_callbacks_->encodeHeaders(std::move(response_headers), true, REDIRECT_RACE);","    }",""],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["","scanner->curptr += N;","","if (PJ_SCAN_IS_PROBABLY_SPACE(*scanner->curptr) && scanner->skip_ws) {","pj_scan_skip_whitespace(scanner);","}","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\tbn_rec_frb(_k, 8, k[i], q, x, ep_curve_is_pairf() == EP_BN);","\t\t\t\tfor (j = 0; j < 8; j++) {","\t\t\t\t\t_l[8*i + j] = len;","\t\t\t\t\tbn_rec_naf(&naf[(8*i + j)*len], &_l[8*i + j], _k[j], w);","\t\t\t\t\tl = RLC_MAX(l, _l[8*i + j]);","\t\t\t\t}","\t\t\t}"],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["unsigned kodak, entries, tag, type, len, save, c;","double expo,ape;","","kodak = !strncmp(make,\"EASTMAN\",7) && tiff_nifds < 3;","entries = get2();","if(!strncmp(make,\"Hasselblad\",10) && (tiff_nifds > 3) && (entries > 512)) return;"],"label":0}
{"cve":"CVE-2018-14363","code_chunks":["    if (ret == -2)","    {","      mutt_error(\"%s\", pop_data->err_msg);","      return -1;","    }","","    if (ret == -3)"],"label":0}
{"cve":"CVE-2023-24833","code_chunks":["JSObject::getComputedPrimitiveDescriptor(","obj_, runtime_, bHandle_, bDescObjHandle_, bTmpNameStorage_, bDesc);","","if (aDescObjHandle_) {","if (LLVM_LIKELY(!aDesc.flags.proxyObject)) {","auto res = JSObject::getComputedPropertyValue_RJS("],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["static BOOL rdp_print_bitmap_cache_capability_set(wStream* s, UINT16 length)","{","UINT32 pad1, pad2, pad3;","UINT32 pad4, pad5, pad6;"],"label":1}
{"cve":"PYSEC-2021-245","code_chunks":["for (INDEX_TYPE i = 0; i < row_split_size - 1; ++i) {","INDEX_TYPE row_length = row_split(i + 1) - row_split(i);","INDEX_TYPE real_length = std::min(output_size, row_length);","INDEX_TYPE parent_output_index_current = parent_output_index[i];","","if (parent_output_index_current == -1) {"],"label":1}
{"cve":"CVE-2018-5806","code_chunks":["void CLASS identify()","{","static const short pana[][6] = {","{ 3130, 1743,  4,  0, -6,  0 },","{ 3130, 2055,  4,  0, -6,  0 },"],"label":0}
{"cve":"CVE-2018-8794","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":[],"label":1}
{"cve":"CVE-2022-29369","code_chunks":["ret = njs_value_to_key(vm, value2, value2);","if (njs_slow_path(ret != NJS_OK)) {","return NJS_ERROR;","}","","njs_key_string_get(vm, value2, &string);"],"label":1}
{"cve":"CVE-2022-0685","code_chunks":["else if (path_end >= path + wildoff","&& (vim_strchr((char_u *)\"*?[{~$\", *path_end) != NULL","|| (!p_fic && (flags & EW_ICASE)","&& isalpha(PTR2CHAR(path_end)))))","e = p;","if (has_mbyte)","{"],"label":1}
{"cve":"CVE-2016-6875","code_chunks":["const Variant& varVariant,","bool hasVarTag,","SeenContainers& seen) {","bool isArray = varVariant.isArray();","bool isObject = varVariant.isObject();",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (input1->type) {","case kTfLiteInt32: {"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2020-317","code_chunks":["","auto do_work = [num_batches, samples_per_batch, &ctx, &bcast, &means,","&stddevs, &minvals, &maxvals, &gen, &output,","kStdDevsInsideBoundsToUseRandnSampler](int start_output,","int limit_output) {","random::PhiloxRandom gen_copy = gen;"],"label":1}
{"cve":"CVE-2020-24369","code_chunks":["static int changedline (const Proto *p, int oldpc, int newpc) {","  if (p->lineinfo == NULL)  \/* no debug information? *\/","    return 0;","  while (oldpc++ < newpc) {","    if (p->lineinfo[oldpc] != 0)","      return (luaG_getfuncline(p, oldpc - 1) != luaG_getfuncline(p, newpc));","  }"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["RETURN_IF_ERROR(CheckInputsOutputs(context, tflite_node,","\/*runtime_inputs=*\/1, \/*outputs=*\/1));","RETURN_IF_ERROR(CheckTensorIsAvailable(context, tflite_node, 1));","auto pad_tensor = tflite::GetInput(context, tflite_node, 1);","if (pad_tensor->dims->size != 2) {","return absl::InvalidArgumentError(absl::StrCat(","\"Invalid paddings tensor dimension: expected 2 dim, got \","],"label":1}
{"cve":"CVE-2023-28095","code_chunks":["address_str=get_adv_host(send_sock);","","if (hp && hp->port && hp->port->len)","port_str=hp->port;","else","port_str=get_adv_port(send_sock);"],"label":1}
{"cve":"PYSEC-2020-273","code_chunks":["int ndim = tensor->dims();","dlm_tensor->dl_tensor.ndim = ndim;","dlm_tensor->dl_tensor.data = TFE_TensorHandleDevicePointer(h, status);","dlm_tensor->dl_tensor.dtype = GetDlDataType(data_type, status);","","std::vector<int64_t>* shape_arr = &tf_dlm_tensor_ctx->shape;"],"label":1}
{"cve":"CVE-2021-32439","code_chunks":["if (!stbl->SampleSize->sizes || (stbl->SampleSize->sampleCount+nb_pack > stbl->SampleSize->alloc_size)) {","Bool init_table = (stbl->SampleSize->sizes==NULL) ? 1 : 0;","ALLOC_INC(stbl->SampleSize->alloc_size);","if (stbl->SampleSize->sampleCount+nb_pack > stbl->SampleSize->alloc_size)","stbl->SampleSize->alloc_size = stbl->SampleSize->sampleCount+nb_pack;","","stbl->SampleSize->sizes = (u32 *)gf_realloc(stbl->SampleSize->sizes, sizeof(u32)*stbl->SampleSize->alloc_size);"],"label":1}
{"cve":"CVE-2020-13396","code_chunks":["\tPayloadBufferOffset = Stream_GetPosition(s);","","\tstatus = SEC_E_INTERNAL_ERROR;","\tif (ntlm_read_message_fields_buffer(s, &(message->DomainName)) < 0) \/* DomainName *\/","\t\tgoto fail;","","\tif (ntlm_read_message_fields_buffer(s, &(message->UserName)) < 0) \/* UserName *\/"],"label":0}
{"cve":"CVE-2019-13306","code_chunks":[],"label":1}
{"cve":"CVE-2023-24824","code_chunks":["cmark_node_type cmark_syntax_extension_add_node(int is_inline) {","cmark_node_type *ref = !is_inline ? &CMARK_NODE_LAST_BLOCK : &CMARK_NODE_LAST_INLINE;","","if ((*ref & CMARK_NODE_VALUE_MASK) == CMARK_NODE_VALUE_MASK) {","assert(false);","return (cmark_node_type) 0;","}"],"label":1}
{"cve":"PYSEC-2021-625","code_chunks":["","for (int32_t i = 0; i < rank; ++i) {","int64_t in_idx = data[i];","if (in_idx >= rank) {","return errors::InvalidArgument(\"perm dim \", in_idx,","\" is out of range of input rank \", rank);","}"],"label":1}
{"cve":"CVE-2023-26485","code_chunks":["LIT(\"\\\\[bu] 2\");","} else {","list_number = cmark_node_get_list_start(node->parent);","tmp = node;","while (tmp->prev) {","tmp = tmp->prev;"],"label":1}
{"cve":"PYSEC-2021-305","code_chunks":["    TF_LITE_CHECK_DIV_NON_ZERO(uint8_t);","    TF_LITE_ENSURE_OK(","        context, EvalQuantized<kernel_type>(context, node, params, data, input1,","                                            input2, output));","  } else {","    context->ReportError(","        context,"],"label":0}
{"cve":"CVE-2018-16393","code_chunks":["file->path = *in_path;","","for(i=2; i+1<apdu.resplen && i+1+apdu.resp[i+1]<apdu.resplen; i+=2+apdu.resp[i+1]){","int j, len=apdu.resp[i+1];","unsigned char type=apdu.resp[i], *d=apdu.resp+i+2;","","switch (type) {"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["case T('b'): {","const XML_Char *valueText = NULL;","XMLWF_SHIFT_ARG_INTO(valueText, argc, argv, i, j);","","errno = 0;","XML_Char *afterValueText = (XML_Char *)valueText;"],"label":1}
{"cve":"CVE-2020-15209","code_chunks":["TEST(BasicFlatBufferModel, TestHandleMalformedModel) {","const auto model_paths = {","\"tensorflow\/lite\/testdata\/add_shared_tensors.bin\",","};","","for (const auto& model_path : model_paths) {"],"label":1}
{"cve":"CVE-2016-8654","code_chunks":["","\/* Allocate memory for the join buffer from the heap. *\/","if (bufsize > QMFB_JOINBUFSIZE) {","if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE, sizeof(jpc_fix_t)))) {","\/* We have no choice but to commit suicide. *\/","abort();","}"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["\t\tov = map_sysmem(ovload, ovlen);","","\t\tbase = map_sysmem(load, len + ovlen);","\t\terr = fdt_open_into(base, base, len + ovlen);","\t\tif (err < 0) {","\t\t\tprintf(\"failed on fdt_open_into\\n\");","\t\t\tfdt_noffset = err;"],"label":0}
{"cve":"PYSEC-2020-318","code_chunks":["\"Cannot select both scientific and shortest notation\"));","format_ = \"%\";","if (width > -1) {","strings::Appendf(&format_, \"%s%d\", fill_string.c_str(), width);","}","if (precision > -1) {","strings::Appendf(&format_, \".%d\", precision);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["return Call(left_expr, NULL, NULL, LINENO(n),","n->n_col_offset, c->c_arena);","else","return ast_for_call(c, CHILD(n, 1), left_expr);","}","else if (TYPE(CHILD(n, 0)) == DOT) {","PyObject *attr_id = NEW_IDENTIFIER(CHILD(n, 1));"],"label":1}
{"cve":"PYSEC-2019-209","code_chunks":["    for (int i = segment_ids.dims(); i < data.dims(); i++) {","      output_shape.AddDim(data.dim_size(i));","    }","    Tensor* output = nullptr;","    OP_REQUIRES_OK(context, context->allocate_output(0, output_shape, &output));","    auto output_flat = output->flat_outer_dims<T>();","    auto data_flat = data.flat_inner_outer_dims<T, 2>(segment_ids.dims() - 1);"],"label":0}
{"cve":"CVE-2021-32628","code_chunks":["} else if (rdbtype == RDB_TYPE_ZSET_2 || rdbtype == RDB_TYPE_ZSET) {","\/* Read list\/set value. *\/","uint64_t zsetlen;","size_t maxelelen = 0;","zset *zs;","","if ((zsetlen = rdbLoadLen(rdb,NULL)) == RDB_LENERR) return NULL;"],"label":1}
{"cve":"CVE-2018-20458","code_chunks":["struct r_bin_dyldcache_obj_t *bin = R_NEW0 (struct r_bin_dyldcache_obj_t);","if (!bin) {","return NULL;","}","if (!buf) {","return r_bin_dyldcache_free (bin);"],"label":0}
{"cve":"CVE-2021-25940","code_chunks":["generateError(rest::ResponseCode::BAD, TRI_ERROR_HTTP_BAD_PARAMETER,","\"invalid JSON\");","return RestStatus::DONE;","}"],"label":1}
{"cve":"PYSEC-2020-271","code_chunks":["dlm_tensor->dl_tensor.data = TFE_TensorHandleDevicePointer(h, status);","dlm_tensor->dl_tensor.dtype = GetDlDataType(data_type, status);","","std::vector<int64_t>* shape_arr = &tf_dlm_tensor_ctx->shape;","std::vector<int64_t>* stride_arr = &tf_dlm_tensor_ctx->strides;"],"label":1}
{"cve":"CVE-2018-8799","code_chunks":["static RD_BOOL","bitmap_decompress4(uint8 * output, int width, int height, uint8 * input, int size)","{","\tint code;","\tint bytes_pro;","\tint total_pro;",""],"label":0}
{"cve":"CVE-2021-3658","code_chunks":["}","","if (adapter->discovery_discoverable)","set_discovery_discoverable(adapter, false);","","\/*"],"label":1}
{"cve":"CVE-2020-15214","code_chunks":["","  return ResizeOutputTensor(context, data, segment_ids, output);","}","","TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","  const TfLiteTensor* data = GetInput(context, node, kInputDataTensor);","  const TfLiteTensor* segment_ids ="],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["#if defined(CONFIG_FIT)","puts(\"   FIT image found\\n\");","","if (!fit_check_format(hdr)) {","puts(\"Bad FIT image format!\\n\");","unmap_sysmem(hdr);","return 1;"],"label":1}
{"cve":"PYSEC-2021-400","code_chunks":["const int32_t logits_dim = logits_dim_;","const int32_t hessian_dim =","stats_summaries_list[0].dim_size(3) - logits_dim;","DCHECK_GT(hessian_dim, 0);","DCHECK_LE(hessian_dim, logits_dim * logits_dim);"],"label":1}
{"cve":"CVE-2018-18314","code_chunks":["TRUE \/* Force \/x *\/ );","","switch (*RExC_parse) {","if (RExC_parse[1] == '[') nest_depth++, RExC_parse++;","\/* FALLTHROUGH *\/","break;","\/* Skip past this, so the next character gets skipped, after"],"label":1}
{"cve":"PYSEC-2021-160","code_chunks":["    const Tensor* input_indices;","    const Tensor* input_values;","    const Tensor* input_shape;","    SparseTensorsMap* map;","","    OP_REQUIRES_OK(context, context->input(\"sparse_indices\", &input_indices));","    OP_REQUIRES_OK(context, context->input(\"sparse_values\", &input_values));"],"label":0}
{"cve":"PYSEC-2021-613","code_chunks":["for (const SavedSliceMeta& ssm : sts.meta().tensor()) {","TensorShape ssm_shape(ssm.shape());","for (const TensorSliceProto& tsp : ssm.slice()) {","TensorSlice ss_slice(tsp);","status_ = RegisterTensorSlice(ssm.name(), ssm_shape, ssm.type(), fname,","ss_slice, &tensors_);","if (!status_.ok()) return;"],"label":1}
{"cve":"CVE-2016-4563","code_chunks":["GetNextToken(q,&q,extent,token);","weight=ParseCommandOption(MagickWeightOptions,MagickFalse,token);","if (weight == -1)","weight=StringToUnsignedLong(token);","graphic_context[n]->weight=(size_t) weight;","break;","}"],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["uint64_t byte_size = 0;","for (const HeaderEntryImpl& header : headers_) {","byte_size += header.key().size();","byte_size += header.value().size();","}",""],"label":1}
{"cve":"CVE-2022-2304","code_chunks":["\tslang = lp->lp_slang;","\tif (slang->sl_fbyts == NULL)\t    \t    continue;","","\tif (pat == NULL)","\t{","\t    vim_snprintf((char *)IObuff, IOSIZE, \"# file: %s\", slang->sl_fname);","\t    ml_append(lnum++, IObuff, (colnr_T)0, FALSE);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["scaling_factors_size));","}","node->temporaries->data[3] = op_data->scratch_tensor_index + 3;","TfLiteTensor* accum_scratch = GetTemporary(context, node, \/*index=*\/3);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {num_units, batch_size};"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void ep4_map_dst(ep4_t p, const uint8_t *msg, int len, const uint8_t *dst, int dst_len);"],"label":1}
{"cve":"PYSEC-2022-143","code_chunks":["if (!IsIdentity(node) && !IsIdentityN(node)) {","return true;","}","","if (nodes_to_preserve_.find(node.name()) != nodes_to_preserve_.end()) {","return false;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\tStream_Read_UINT16(s, desktopSaveYGranularity); \/* desktopSaveYGranularity (2 bytes) *\/","\tStream_Read_UINT16(s, pad2OctetsA);             \/* pad2OctetsA (2 bytes) *\/","\tStream_Read_UINT16(s, maximumOrderLevel);       \/* maximumOrderLevel (2 bytes) *\/","\tStream_Read_UINT16(s, numberFonts);             \/* numberFonts (2 bytes) *\/","\tStream_Read_UINT16(s, orderFlags);              \/* orderFlags (2 bytes) *\/","\tStream_Read(s, orderSupport, 32);               \/* orderSupport (32 bytes) *\/","\tStream_Read_UINT16(s, textFlags);               \/* textFlags (2 bytes) *\/"],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["void pcre_dump_cache(const std::string& filename) {","s_pcreCache.dump(filename);","}"],"label":1}
{"cve":"CVE-2021-3574","code_chunks":["        (TIFFGetFieldDefaulted(tiff,TIFFTAG_PLANARCONFIG,&interlace,sans) != 1) ||","        (TIFFGetFieldDefaulted(tiff,TIFFTAG_SAMPLESPERPIXEL,&samples_per_pixel,sans) != 1) ||","        (TIFFGetFieldDefaulted(tiff,TIFFTAG_BITSPERSAMPLE,&bits_per_sample,sans) != 1) ||","        (TIFFGetFieldDefaulted(tiff,TIFFTAG_SAMPLEFORMAT,&sample_format,sans) != 1) ||","        (TIFFGetFieldDefaulted(tiff,TIFFTAG_MINSAMPLEVALUE,&min_sample_value,sans) != 1) ||","        (TIFFGetFieldDefaulted(tiff,TIFFTAG_MAXSAMPLEVALUE,&max_sample_value,sans) != 1))","      {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* axis = GetInput(context, node, kAxis);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_STATUS(ResizeOutput(context, input, axis, output));","}"],"label":1}
{"cve":"CVE-2022-24793","code_chunks":["offset ^= pj_htons((pj_uint16_t)(0xc0 << 8));","offset = pj_ntohs(offset);","","\/* Check that offset is valid *\/","if (offset >= max - pkt)","return PJLIB_UTIL_EDNSINNAMEPTR;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor1, &input1));","  const TfLiteTensor* input2;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensor2, &input2));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2016-5357","code_chunks":["\t\t}","\t}","\tif (num_items_scanned == 0)","\t\treturn -1;","","\treturn num_items_scanned;","}"],"label":0}
{"cve":"CVE-2022-24949","code_chunks":["  ::listen(fd, 5);","#ifndef WIN32","  FATAL_FAIL(::chmod(local.sun_path, S_IRUSR | S_IWUSR | S_IXUSR));","#endif","","  pipeServerSockets[pipePath] = set<int>({fd});","  return pipeServerSockets[pipePath];"],"label":0}
{"cve":"CVE-2022-0695","code_chunks":["bool sw = false;","ut8 b[1024] = {0};","size_t n = 0;","if (!pe || !pe->b) {","return 0LL;","}"],"label":0}
{"cve":"CVE-2016-5157","code_chunks":["FILE *fbase=NULL, *ftest=NULL;","int same = 0;","char lbase[256];","char strbase[256];","char ltest[256];","char strtest[256];"],"label":1}
{"cve":"CVE-2020-36315","code_chunks":["static int pad_pkcs1(bn_t m, int *p_len, int m_len, int k_len, int operation) {","uint8_t *id, pad = 0;","int len, result = RLC_ERR;","bn_t t;","","bn_null(t);"],"label":0}
{"cve":"CVE-2019-13221","code_chunks":["ady -= abs(base) * adx;","if (x1 > n) x1 = n;","if (x < x1) {","LINE_OP(output[x], inverse_db_table[y]);","for (++x; x < x1; ++x) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["                             output);","    }","    default: {","      context->ReportError(context, \"Type '%s' is not supported by floor_mod.\",","                           TfLiteTypeGetName(input1->type));","      return kTfLiteError;","    }"],"label":0}
{"cve":"CVE-2022-29369","code_chunks":["","        vmcode = (njs_vmcode_generic_t *) pc;","","        \/*","         * The first operand is passed as is in value2 to","         *   NJS_VMCODE_JUMP,","         *   NJS_VMCODE_IF_TRUE_JUMP,"],"label":0}
{"cve":"CVE-2022-2526","code_chunks":["static int on_stream_io(sd_event_source *es, int fd, uint32_t revents, void *userdata) {","DnsStream *s = userdata;","int r;","","assert(s);"],"label":1}
{"cve":"PYSEC-2021-231","code_chunks":["CalculateActivationRange(params->activation, &output_activation_min,","&output_activation_max);","","const int input_size = NumElements(input) \/ SizeOfDimension(input, 0);","const int batch_size = SizeOfDimension(input, 0);","","const float* input_ptr = GetTensorData<float>(input);"],"label":1}
{"cve":"CVE-2021-30014","code_chunks":["\t\tsi->intra_slice_allowed_flag = gf_bs_read_int_log(bs, 1, \"intra_slice_allowed_flag\");","","\tpps_id = gf_bs_read_ue_log(bs, \"pps_id\");","\tif ((pps_id<0) || (pps_id >= 64))","\t\treturn -1;","\tsi->pps = &vvc->pps[pps_id];","\tsi->sps = &vvc->sps[si->pps->sps_id];"],"label":0}
{"cve":"CVE-2023-40589","code_chunks":["}","","Literal = (HuffTableLEC[MaskedBits] & 0xFF);","*HistoryPtr++ = Literal;","}",""],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            Py_ssize_t i;","            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"ImportFrom field \\\"names\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            names = _Ta3_asdl_seq_new(len, arena);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["      input->type != kTfLiteUInt8 && input->type != kTfLiteInt16 &&","      input->type != kTfLiteInt64 && input->type != kTfLiteBool) {","    context->ReportError(context, \"Type '%s' is not supported by reverse.\",","                         TfLiteTypeGetName(input->type));","    return kTfLiteError;","  }",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\tfor (i = 0; i < (1 << (ED_WIDTH - 2)); i++) {","\t\t\ted_null(t[i]);","\t\t\ted_new(t[i]);","\t\t}","\t\t\/* Compute the precomputation table. *\/","\t\ted_tab(t, p, ED_WIDTH);",""],"label":0}
{"cve":"CVE-2019-13222","code_chunks":["len <<= 1;","if (len == f->blocksize_0) return f->window[0];","if (len == f->blocksize_1) return f->window[1];","assert(0);","return NULL;","}",""],"label":1}
{"cve":"CVE-2022-35937","code_chunks":["GetTensorShape(params), GetTensorData<ParamsT>(params),","GetTensorShape(indices), GetTensorData<IndicesT>(indices),","GetTensorShape(output), GetTensorData<ParamsT>(output));","return kTfLiteOk;","}",""],"label":1}
{"cve":"PYSEC-2021-550","code_chunks":["    char* position = uncompressed.mdata();","  int non_memcpy_component_index = 0;","  for (auto& component : element) {","    CompressedComponentMetadata* metadata =","        out->mutable_component_metadata()->Add();","    metadata->set_dtype(component.dtype());","    component.shape().AsProto(metadata->mutable_tensor_shape());"],"label":0}
{"cve":"CVE-2019-17541","code_chunks":["image->filename);","return(FALSE);","}","\/* The IPTC profile is actually an 8bim *\/","iptc_profile=(StringInfo *) GetImageProfile(image,\"8bim\");","if (iptc_profile != (StringInfo *) NULL)","{"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  TF_LITE_ENSURE_EQ(context, candidate_bias->dims->data[0], n_output);","","    TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, kOutput, &output));","  TfLiteIntArray* output_size = TfLiteIntArrayCreate(3);","  output_size->data[0] = n_time;","  output_size->data[1] = n_batch;"],"label":0}
{"cve":"PYSEC-2021-155","code_chunks":["const Tensor& handle = ctx->input(0);","const string& name = handle.scalar<tstring>()();","Tensor val;","auto session_state = ctx->session_state();","OP_REQUIRES(ctx, session_state != nullptr,","errors::FailedPrecondition(","\"GetSessionTensor called on null session state\"));"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* in_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &in_tensor));","TfLiteTensor* out_tensor;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2018-20179","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"CVE-2022-24792","code_chunks":["\t    fport->next_ts.u64 += (frame->size *","\t\t\t\t   fport->base.info.fmt.det.aud.clock_rate \/","\t\t\t\t   (fport->base.info.fmt.det.aud.avg_bps \/ 8));","\t}","    } else {","\tif (fport->usec_per_frame) {","\t    fport->next_ts.u64 += (fport->usec_per_frame * VIDEO_CLOCK_RATE \/"],"label":0}
{"cve":"CVE-2022-2286","code_chunks":["char_u\t*ptr;","int\t\twant_cindent;","","if (compl_curr_match != NULL || compl_leader != NULL || c == Ctrl_E)","{","if (compl_curr_match != NULL && compl_used_match && c != Ctrl_E)"],"label":0}
{"cve":"CVE-2017-3733","code_chunks":["","const EVP_MD *tls12_get_hash(unsigned char hash_alg)","{","    const tls12_hash_info *inf;","    if (hash_alg == TLSEXT_hash_md5 && FIPS_mode())","        return NULL;","    inf = tls12_get_hash_info(hash_alg);"],"label":0}
{"cve":"CVE-2018-14679","code_chunks":["unsigned char *buf;","","\/* check arguments - most are already checked by chmd_fast_find *\/","if (chunk_num > chm->num_chunks) return NULL;","","\/* ensure chunk cache is available *\/","if (!chm->chunk_cache) {"],"label":1}
{"cve":"CVE-2016-7514","code_chunks":["MagickBooleanType","status;","","size_t","count,","row_size;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  if (output->type != kTfLiteComplex64) {","    context->ReportError(context,","                         \"Type '%s' for output is not supported by rfft2d.\",","                         TfLiteTypeGetName(output->type));","    return kTfLiteError;","  }",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["};","reg.invoke = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* a0 = GetInput(context, node, 0);","TfLiteTensor* a1 = GetOutput(context, node, 0);","int num = a0->dims->data[0];","for (int i = 0; i < num; i++) {"],"label":1}
{"cve":"PYSEC-2021-542","code_chunks":["char* out_data_bytes = reinterpret_cast<char*>(out_data);","const char* p_in = in_data_bytes;","char* p_out = out_data_bytes;","for (; p_in < in_data_bytes + fixed_length;","p_in += sizeof(T), p_out += sizeof(T)) {","std::reverse_copy(p_in, p_in + sizeof(T), p_out);"],"label":1}
{"cve":"CVE-2021-38383","code_chunks":["  if (intval > INT32_MAX)","    {","      DPRINTF(E_DBG, L_MISC, \"Integer value too large (%s)\\n\", str);","","      return -1;","    }",""],"label":0}
{"cve":"CVE-2020-36177","code_chunks":["byte msg[RSA_MAX_SIZE\/8 + RSA_PSS_PAD_SZ];","#else","byte* msg = NULL;","#endif","#if defined(WOLFSSL_PSS_LONG_SALT) || defined(WOLFSSL_PSS_SALT_LEN_DISCOVER)","byte* salt;","#else"],"label":0}
{"cve":"CVE-2019-12904","code_chunks":["const volatile byte *vtab = tab;","size_t i;","","for (i = 0; i < len; i += 8 * 32)","{","(void)vtab[i + 0 * 32];","(void)vtab[i + 1 * 32];"],"label":1}
{"cve":"CVE-2023-52076","code_chunks":["","while ( TRUE )","{","if ( extract_one_file(epub_document,&err) == FALSE )","{","if (err) {","g_propagate_error (error, err);"],"label":1}
{"cve":"PYSEC-2020-136","code_chunks":["const int segment_id_size = segment_ids->dims->data[0];","if (segment_id_size > 0) {","max_index = segment_ids->data.i32[segment_id_size - 1];","}","const int data_rank = NumDimensions(data);","TfLiteIntArray* output_shape = TfLiteIntArrayCreate(NumDimensions(data));"],"label":1}
{"cve":"CVE-2016-3156","code_chunks":["\t\treturn;","","\t\/* Register for device down reports *\/","\tregister_netdevice_notifier(&masq_dev_notifier);","\t\/* Register IP address change reports *\/","\tregister_inetaddr_notifier(&masq_inet_notifier);","}"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["    for (const auto san_type : san_types) {","      subject_alt_name_matchers.emplace_back();","      subject_alt_name_matchers.back().set_san_type(san_type);","      *subject_alt_name_matchers.back().mutable_matcher() = matcher;","    }","  }","  return subject_alt_name_matchers;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["            return buf;","        }","    }","    else {","        Py_FatalError(\"invalid label\");","        return NULL;","    }"],"label":0}
{"cve":"CVE-2016-10129","code_chunks":["for (;;) {","if (buf->offset > 0)","error = git_pkt_parse_line(&pkt, buf->data,","&line_end, buf->offset);","else","error = GIT_EBUFS;"],"label":1}
{"cve":"CVE-2022-35970","code_chunks":["      if (normed_max() - normed_min() < min_separation_) {","        normed_max() = normed_min() + min_separation_;","      }","","      FloatToQuantizedStruct<quint8> output_f2q(normed_min(), normed_max());","      auto instance_normed_quantized =","          QUANTIZE_WITH_EIGEN(instance_normed, output_f2q, quint8);"],"label":0}
{"cve":"CVE-2021-3928","code_chunks":["{","p = fword + sp->ts_fidx;","MB_PTR_BACK(fword, p);","if (!spell_iswordp(p, curwin))","{","p = preword + STRLEN(preword);","MB_PTR_BACK(preword, p);"],"label":1}
{"cve":"CVE-2023-27596","code_chunks":["\/* when trimming the very last payload, avoid trailing ws *\/","if (cur == lmp->u.value + lmp->len) {","tmp = found.s;","while (*(--tmp) == ' ') {","found.s--;","found.len++;","}"],"label":1}
{"cve":"CVE-2021-3743","code_chunks":["goto err;","}","","if (len != ALIGN(size, 4) + hdrlen)","goto err;","","if (cb->dst_port != QRTR_PORT_CTRL && cb->type != QRTR_TYPE_DATA &&"],"label":1}
{"cve":"CVE-2018-8797","code_chunks":["\t{","\t\tlogger(Protocol, Error, \"mcs_recv_connect_response(), result=%d\", result);","\t\treturn False;","\t}","","\tber_parse_header(s, BER_TAG_INTEGER, &length);","\tin_uint8s(s, length);\t\/* connect id *\/"],"label":0}
{"cve":"CVE-2020-24370","code_chunks":["if (clLvalue(s2v(ci->func))->p->is_vararg) {","int nextra = ci->u.l.nextraargs;","if (n >= -nextra) {  \/* 'n' is negative *\/","*pos = ci->func - nextra - (n + 1);","return \"(vararg)\";  \/* generic name for any vararg *\/","}"],"label":0}
{"cve":"CVE-2017-13146","code_chunks":["case  8: z2=z=1; break;      \/* 2D matrix*\/","case 12: z2=z = ReadBlobXXXLong(image2);  \/* 3D matrix RGB*\/","(void) ReadBlobXXXLong(image2);","if(z!=3) ThrowReaderException(CoderError, \"MultidimensionalMatricesAreNotSupported\");","break;","case 16: z2=z = ReadBlobXXXLong(image2);  \/* 4D matrix animation *\/"],"label":1}
{"cve":"CVE-2023-50247","code_chunks":["{","struct st_quicly_pending_path_challenge_t *pending;","","if ((pending = malloc(sizeof(struct st_quicly_pending_path_challenge_t))) == NULL)","return PTLS_ERROR_NO_MEMORY;",""],"label":1}
{"cve":"CVE-2019-17546","code_chunks":["gtStripSeparate(TIFFRGBAImage* img, uint32* raster, uint32 w, uint32 h)","{","TIFF* tif = img->tif;","tileSeparateRoutine put = img->put.separate;","unsigned char *buf = NULL;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, bw_input_to_output_weights->type,","fw_input_to_output_weights->type);","","const TfLiteTensor* fw_recurrent_to_output_weights ="],"label":1}
{"cve":"CVE-2023-40589","code_chunks":["\t\t{","\t\t\tint rc;","","\t\t\tMatchOffset = 0;","\t\t\trc = ncrush_find_best_match(ncrush, HistoryOffset, &MatchOffset);","","\t\t\tif (rc < 0)"],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["private_srcw[0] = PRIVATE_DATA(cc);","private_srcw[1] = PRIVATE_DATA(cc) + sizeof(sljit_sw);","}","cc += 2;","#ifdef SUPPORT_UNICODE","if (common->utf && HAS_EXTRALEN(cc[-1])) cc += GET_EXTRALEN(cc[-1]);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["if (IsDynamicTensor(output)) {","const TfLiteTensor* dims = GetInput(context, node, kDimsTensor);","TF_LITE_ENSURE_OK(context, ResizeOutput(context, dims, output));","}","#define TF_LITE_FILL(data_type)                                               \\"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","    reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","                        TfLiteTensor* output0;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output0));","      TF_LITE_ENSURE(context, IsDynamicTensor(output0));","            const TfLiteTensor* input;","      TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));"],"label":0}
{"cve":"CVE-2022-36019","code_chunks":["AddInputFromArray<qint32>(TensorShape({value_count}),","{-(1 << 23), 0, (1 << 23)});","AddInputFromArray<float>(TensorShape({}), {-256.0f});","AddInputFromArray<float>(TensorShape({}), {256.0f});","AddInputFromArray<float>(TensorShape({}), {-1.0f});","AddInputFromArray<float>(TensorShape({}), {1.0f});"],"label":0}
{"cve":"CVE-2021-32495","code_chunks":["static pyc_object *get_none_object(void) {","pyc_object *ret;","","ret = R_NEW0 (pyc_object);","if (!ret) {","return NULL;","}"],"label":1}
{"cve":"CVE-2020-7041","code_chunks":["subj = X509_get_subject_name(cert);","","#ifdef HAVE_X509_CHECK_HOST","if (X509_check_host(cert, common_name, FIELD_SIZE, 0, NULL))","cert_valid = 1;","#else","if (subj"],"label":1}
{"cve":"CVE-2021-32436","code_chunks":["p_voice3 = &voice_tb[voice3];","strcpy(p_voice3->id, p_voice2->id);","p_voice3->second = 1;","parsys->voice[voice3].second = 1;","p_voice3->scale = voice_tb[p_voice->clone].scale;","parsys->voice[voice3].range = range + 2;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  const TfLiteTensor* updates;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kUpdates, &updates));","  const TfLiteTensor* shape;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kShape, &shape));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));"],"label":0}
{"cve":"CVE-2018-8792","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"CVE-2016-4562","code_chunks":[],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","for (int scratch_index = 0; scratch_index < 8; ++scratch_index) {","node->temporaries->data[scratch_index] =","op_data->scratch_tensor_index + scratch_index;","TfLiteTensor* scratch_tensor =","GetTemporary(context, node, scratch_index);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["            Py_ssize_t len;","            Py_ssize_t i;","            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"ExtSlice field \\\"dims\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_gen_prime_safep(bn_t a, size_t bits) {","while (1) {","do {","bn_rand(a, RLC_POS, bits);"],"label":0}
{"cve":"CVE-2016-10156","code_chunks":["fd = open(path, O_WRONLY|O_CREAT|O_CLOEXEC|O_NOCTTY, mode > 0 ? mode : 0644);","if (fd < 0)","return -errno;",""],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["","        \/* Check accelerator *\/","        if (s->s_lower <= ilabel && ilabel < s->s_upper) {","            int x = s->s_accel[ilabel - s->s_lower];","            if (x != -1) {","                if (x & (1<<7)) {","                    \/* Push non-terminal *\/"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE(context, input_dims_size >= 1);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","TfLiteIntArray* output_shape = TfLiteIntArrayCreate(input_dims_size + 1);","for (int i = 0; i < input_dims_size; i++) {","output_shape->data[i] = input_dims->data[i];"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, data->num, input_shape->data[axis]);","for (int i = 0; i < data->num; ++i) {","TfLiteIntArray* copied_output_shape = TfLiteIntArrayCopy(output_shape);","TfLiteTensor* output = GetOutput(context, node, i);","TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);","TF_LITE_ENSURE_EQ(context, input->params.zero_point,","output->params.zero_point);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const std::vector<float>& scores, std::vector<int>* selected,","int max_detections) {","const TfLiteTensor* input_box_encodings;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorBoxEncodings,","&input_box_encodings));"],"label":0}
{"cve":"CVE-2021-32438","code_chunks":["\t}","\tif (args) gf_free(args);","\targs = NULL;","","\t\tif (dumper->flags & GF_EXPORT_RAW_SAMPLES) {","\t\te = gf_dynstrcat(&args, \"writegen:frame\", NULL);","\t\tif (dumper->sample_num) {"],"label":0}
{"cve":"CVE-2019-11502","code_chunks":["","sc_do_mount(tmpdir, \"\/tmp\", NULL, MS_BIND, NULL);","sc_do_mount(\"none\", \"\/tmp\", NULL, MS_PRIVATE, NULL);","if (chown(\"\/tmp\/\", uid, gid) < 0) {","die(\"cannot change ownership of \/tmp\");","}","if (chdir(pwd) != 0)"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["                             void *user_data)","{","    dtls_srtp *ds = (dtls_srtp*)user_data;","    pj_assert(ds);","","    PJ_UNUSED_ARG(tp);",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["","\t\t\/* t0 = g4^2. *\/","\t\tfp9_sqr(t0, a[2][0]);","\t\t\/* t1 = 3 * g4^2 - 2 * g3. *\/","\t\tfp9_sub(t1, t0, a[1][1]);","\t\tfp9_dbl(t1, t1);","\t\tfp9_add(t1, t1, t0);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  swapped_shape.SetDim(dims - 1, shape.Dims(dims - 2));","  return swapped_shape;","}","","template <KernelType kernel_type>","TfLiteStatus EvalHybrid(TfLiteContext* context, TfLiteNode* node, OpData* data,","                        const RuntimeShape& input_shape,"],"label":0}
{"cve":"CVE-2018-16230","code_chunks":["                           alen));","","                    if (aflags) {","                        ND_PRINT((ndo, \", Flags [%s%s%s%s\",","                               aflags & 0x80 ? \"O\" : \"\",","                               aflags & 0x40 ? \"T\" : \"\",","                               aflags & 0x20 ? \"P\" : \"\","],"label":0}
{"cve":"CVE-2020-12279","code_chunks":["void test_checkout_nasty__git_tilde1(void)","{","#ifdef GIT_WIN32","test_checkout_fails(\"refs\/heads\/git_tilde1\", \".git\/foobar\");","#endif","}"],"label":1}
{"cve":"CVE-2017-7500","code_chunks":["static int fsmVerify(const char *path, rpmfi fi)","{","int rc;","int saveerrno = errno;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["int ahead_tok_kind;","","memcpy(&ahead_tok, tok, sizeof(ahead_tok));","ahead_tok_kind = tok_get(&ahead_tok, &ahead_tok_start,","&ahead_tok_end);",""],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        }","        else {","            int res;","            res = obj2ast_identifier(tmp, &name, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }"],"label":0}
{"cve":"CVE-2019-11411","code_chunks":["\t\tif (isinf(number)) { js_pushstring(J, sign ? \"-Infinity\" : \"Infinity\"); return; }","","\t\tif (sign)","\t\t\tnumber = -number;","","\t\t\/* fit as many digits as we want in an int *\/","\t\texp = 0;"],"label":0}
{"cve":"CVE-2023-25670","code_chunks":["{7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18});","AddInputFromArray<float>(TensorShape({4}),","{100.0f, -200.0f, 300.0f, -400.0f});","AddInputFromArray<float>(TensorShape({1}), {0});"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["          output);","    }","    case kTfLiteInt8: {","      OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","      TfLiteTensor* row_sums;","      TF_LITE_ENSURE_OK(context,","                        GetTemporarySafe(context, node, kRowSums, &row_sums));"],"label":0}
{"cve":"CVE-2022-0519","code_chunks":["ut64 offset = 0;","if (sz < 8) {","return NULL;","}","RBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);","offset += 6;"],"label":0}
{"cve":"CVE-2017-12664","code_chunks":["static MagickBooleanType SetGrayscaleImage(Image *image,","ExceptionInfo *exception)","{","CacheView","*image_view;",""],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["        Py_CLEAR(tmp);","        end_lineno = 0;","    }","    else {","        int res;","        res = obj2ast_int(tmp, &end_lineno, arena);","        if (res != 0) goto failed;"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["} else if (match == DENY)","SET(validated, VALIDATE_FAILURE);","if (pwcheck == always && def_authenticate)","SET(validated, FLAG_CHECK_USER);","else if (nopass == true)","def_authenticate = false;"],"label":1}
{"cve":"CVE-2022-0521","code_chunks":["R_API RBinJavaAttrInfo *r_bin_java_rtv_annotations_attr_new(RBinJavaObj *bin, ut8 *buffer, ut64 sz, ut64 buf_offset) {","ut32 i = 0;","ut64 offset = 0;","if (sz < 8) {","return NULL;","}","RBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["void strbuf_utf8_align(struct strbuf *buf, align_type position, unsigned int width,","const char *s)","{","int slen = strlen(s);","int display_len = utf8_strnwidth(s, slen, 0);","int utf8_compensation = slen - display_len;",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);","  TF_LITE_ENSURE_EQ(context, NumDimensions(input_resource_id_tensor), 1);","  TF_LITE_ENSURE_EQ(context, SizeOfDimension(input_resource_id_tensor, 0), 1);","","  const TfLiteTensor* default_value_tensor;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDefaultValueTensor,","                                          &default_value_tensor));"],"label":0}
{"cve":"CVE-2018-16393","code_chunks":["break;","file->id = (d[0]<<8) | d[1];","break;","memcpy(file->name, d, len);","file->namelen = len;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","const auto* params =","reinterpret_cast<const TfLiteGatherParams*>(node->builtin_data);","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* positions = GetInput(context, node, kInputPositions);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInput);","TfLiteTensor* output = GetOutput(context, node, 0);","const TfLiteTensor* axis = GetInput(context, node, kAxis);","if (IsDynamicTensor(output)) {","int axis_value;","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2021-38199","code_chunks":["{","char buf[INET6_ADDRSTRLEN + 1];","const char *ip_addr = cl_init->ip_addr;","struct nfs_client *clp = nfs_alloc_client(cl_init);","int err;",""],"label":0}
{"cve":"CVE-2020-6019","code_chunks":["return;","}","if ( pIn + cbStatsMsgIn > pPktEnd )","{","ReportBadUDPPacketFromConnectionPeer( \"DataPacket\", \"stats message size doesn't make sense.  Stats message size %d, packet size %d\", cbStatsMsgIn, cbPkt );","return;"],"label":1}
{"cve":"CVE-2020-1916","code_chunks":["void pcre_dump_cache(folly::File& file) {","s_pcreCache.dump(file);","}"],"label":0}
{"cve":"PYSEC-2021-575","code_chunks":["        output_right_node_contribs_t->matrix<float>();","","        Tensor* output_split_types_t;","    OP_REQUIRES_OK(","        context, context->allocate_output(\"split_with_default_directions\",","                                          {num_nodes}, &output_split_types_t));","    auto output_split_types_vec = output_split_types_t->vec<tstring>();"],"label":0}
{"cve":"CVE-2019-17547","code_chunks":["quantum=(size_t) alpha;","}","}","quantum=MagickMin(quantum\/number_coordinates,BezierQuantum);","primitive_info=(*mvg_info->primitive_info)+mvg_info->offset;","coefficients=(double *) AcquireQuantumMemory(number_coordinates,","sizeof(*coefficients));"],"label":1}
{"cve":"CVE-2018-20179","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2023-4754","code_chunks":["count = swf_get_16(read);","ft->nbGlyphs = count \/ 2;","offset_table = (u32*)gf_malloc(sizeof(u32) * ft->nbGlyphs);","offset_table[0] = 0;","for (i=1; i<ft->nbGlyphs; i++) offset_table[i] = swf_get_16(read);","","for (i=0; i<ft->nbGlyphs; i++) {"],"label":1}
{"cve":"CVE-2022-24754","code_chunks":["*\/","PJ_LOG(4, (THIS_FILE, \"Authorization failed for %.*s@%.*s: \"","\"server rejected with stale=false\",","sent_auth->credential.digest.username.slen,","sent_auth->credential.digest.username.ptr,","sent_auth->credential.digest.realm.slen,"],"label":1}
{"cve":"CVE-2021-32628","code_chunks":["","\/* Append using the low level function and return the ID. *\/","if (streamAppendItem(s,c->argv+field_pos,(c->argc-field_pos)\/2,","&id, id_given ? &id : NULL)","== C_ERR)","{"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"CVE-2018-8800","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"CVE-2022-4254","code_chunks":["    }","","    \/* str is 'longer' than format *\/","    if (*end != '\\0') {","        DEBUG(SSSDBG_TRACE_INTERNAL,","              \"String [%s] is longer than format [%s].\\n\", str, format);","        return EINVAL;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);"],"label":1}
{"cve":"CVE-2018-20182","code_chunks":["\t}","","\tif (g_redirect_flags & LB_PASSWORD_IS_PK_ENCRYPTED)","\t{","\t\tlogger(Protocol, Warning,","\t\t       \"process_redirect_pdu(), unhandled LB_PASSWORD_IS_PK_ENCRYPTED \");","\t}"],"label":0}
{"cve":"CVE-2016-10129","code_chunks":["if (buf->offset > 0)","error = git_pkt_parse_line(&pkt, buf->data,","&line_end, buf->offset);","else","error = GIT_EBUFS;",""],"label":1}
{"cve":"CVE-2022-28068","code_chunks":["\t\t\tconst ut8 *buffer = &block.data[++i];","\t\t\tconst ut8 *buf_end = &block.data[block.length];","\t\t\tbuffer = r_uleb128 (buffer, buf_end - buffer, &reg_num, NULL);","\t\t\tif (buffer == buf_end) {","\t\t\t\treturn NULL;","\t\t\t}","\t\t\toffset = r_sleb128 (&buffer, buf_end);"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["\t\t    info, &c->digests))","\t\tmatched = m->negated ? DENY : ALLOW;","\t    break;","\t    a = alias_get(parse_tree, m->name, CMNDALIAS);","\t    if (a != NULL) {","\t\trc = cmndlist_matches(parse_tree, &a->members, runchroot, info);","\t\tif (SPECIFIED(rc)) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (params->type) {","break;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  TfLiteTensor* cell_state =","      GetVariableInput(context, node, lstm::full::kCellStateTensor);","  TF_LITE_ENSURE(context, cell_state != nullptr);","","        TF_LITE_ENSURE_EQ(context, NumElements(output_state), n_batch * n_output);","  TF_LITE_ENSURE_EQ(context, NumElements(cell_state), n_batch * n_cell);",""],"label":0}
{"cve":"CVE-2019-13305","code_chunks":["                      for (x=0; x < (ssize_t) image->columns; x++)","                      {","                        pixel=ScaleQuantumToAny(GetPixelRed(image,p),max_value);","                        q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);","                        pixel=ScaleQuantumToAny(GetPixelGreen(image,p),","                          max_value);","                        q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["cond_handle_(cond_handle),","body_handle_(body_handle),","done_(std::move(done)),","lib_(CHECK_NOTNULL(ctx_->function_library())),","opts_(ctx->step_id()) {","SetRunOptions(ctx_, &opts_, false \/* always_collect_stats *\/);","GetArgsFromContext(ctx, &args_, &loop_var_types_);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* cond_tensor =","GetInput(context, node, kInputConditionTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2023-46728","code_chunks":["FindGoodListeningPortAddressInPort(const AnyP::PortCfgPointer &port, const Filter isGood)","{","return (port && isGood(port->s)) ? &port->s : nullptr;","}","","template <typename Filter>"],"label":1}
{"cve":"CVE-2018-8796","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;"],"label":1}
{"cve":"PYSEC-2021-805","code_chunks":["errors::InvalidArgument(\"Paddings must be non-negative: \",","before_d, \" \", after_d));","const int64_t size_d = in0.dim_size(d);","output_shape.AddDim(before_d + size_d + after_d);","}","","if (output_shape.num_elements() == in0.NumElements()) {"],"label":1}
{"cve":"CVE-2022-29226","code_chunks":["return std::string(StringUtil::ltrim(value.substr(start)));","}","}","","const auto path = headers.Path()->value().getStringView();","const auto params = Http::Utility::parseQueryString(path);"],"label":1}
{"cve":"CVE-2022-0476","code_chunks":["\"SizeOfHeader SizeOfEntry NumberOfEntries\", 0);","","offset = entry->location.rva + sizeof (unloaded_module_list);","for (i = 0; i < unloaded_module_list.number_of_entries; i++) {","struct minidump_unloaded_module *module = R_NEW (struct minidump_unloaded_module);","if (!module) {","break;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  TfLiteTensor* cell_state =","      GetVariableInput(context, node, lstm::full::kCellStateTensor);","  TFLITE_DCHECK(cell_state != nullptr);","","  const TfLiteTensor* input_layer_norm_coefficients =","      is_layer_norm_lstm","          ? GetOptionalInputTensor("],"label":0}
{"cve":"CVE-2020-28896","code_chunks":[" *\/","int imap_sync_message_for_copy(struct Mailbox *m, struct Email *e,","                               struct Buffer *cmd, enum QuadOption *err_continue)","{","  struct ImapAccountData *adata = imap_adata_get(m);","  if (!adata || (adata->mailbox != m))","    return -1;"],"label":0}
{"cve":"CVE-2021-30022","code_chunks":["if (vui_flag_pos) *vui_flag_pos = 0;","","sps_id = gf_bs_read_int_log(bs, 4, \"sps_id\");","if (sps_id >= 16) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["context, recurrent_to_input_weights_ledger);","if (status != kTfLiteOk) return status;","}","{","node->temporaries","->data[offset + kRecurrentToForgetWeightsLedgerOffset] ="],"label":1}
{"cve":"CVE-2018-20177","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* axis_tensor = GetInput(context, node, kAxisTensor);","int axis = GetTensorData<int32_t>(axis_tensor)[0];","const int rank = NumDimensions(input);","if (axis < 0) {"],"label":1}
{"cve":"CVE-2023-28099","code_chunks":["char *pattern = NULL;","","if (!(ip = str2ip(_ip)) && !(ip = str2ip6(_ip))) {","LM_ERR(\"IP val is not IP <%.*s>\\n\",val.rs.len,val.rs.s);","return -1;","}",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    bw_output_size_array->data[0] = batch_size;","    bw_output_size_array->data[1] = max_time;","    bw_output_size_array->data[2] = bw_num_units;","    TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, bw_output,","                                                     bw_output_size_array));","  }",""],"label":0}
{"cve":"CVE-2021-45936","code_chunks":["    #endif","        if (rc != len) {","            return rc;","        }","","        mc_connect->stat = MQTT_MSG_WAIT;","    }"],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["if (fdt_check_header(fit)) {","debug(\"Wrong FIT format: not a flattened device tree\\n\");","return 0;","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));","TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);","TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);","","const TfLiteTensor* value;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &value));"],"label":0}
{"cve":"CVE-2018-8793","code_chunks":["\treturn size == total_pro;","}","","\/* main decompress function *\/","RD_BOOL","bitmap_decompress(uint8 * output, int width, int height, uint8 * input, int size, int Bpp)","{"],"label":0}
{"cve":"PYSEC-2022-141","code_chunks":["const auto& init_op_sig_it =","meta_graph_def.signature_def().find(kSavedModelInitOpSignatureKey);","if (init_op_sig_it != sig_def_map.end()) {","*init_op_name = init_op_sig_it->second.outputs()",".find(kSavedModelInitOpSignatureKey)"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp_exp_slide(fp_t c, const fp_t a, const bn_t b) {","fp_t t[1 << (FP_WIDTH - 1)], r;","int i, j, l;","uint8_t win[RLC_FP_BITS + 1];","","fp_null(r);"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[] = {0, 0};","if(width > 2064) return 0.f;","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":0}
{"cve":"CVE-2023-27596","code_chunks":["\t\t\t\t\tmemcpy(&buff[buff_len],\" \",1);","\t\t\t\t\tbuff_len++;","","\t\t\t\t\tmemcpy(&buff[buff_len],payload->rtp_payload.s,","\t\t\t\t\t\tpayload->rtp_payload.len);","","\t\t\t\t\tbuff_len += payload->rtp_payload.len;"],"label":0}
{"cve":"CVE-2018-20761","code_chunks":["else if (!gui_mode && url_arg) {","char *ext;","","strcpy(the_url, url_arg);","ext = strrchr(the_url, '.');","if (ext && (!stricmp(ext, \".m3u\") || !stricmp(ext, \".pls\"))) {","GF_Err e = GF_OK;"],"label":1}
{"cve":"CVE-2022-43286","code_chunks":["njs_value_t *holder, njs_value_t *name, njs_int_t depth,","njs_value_t *retval)","{","int64_t       k, length;","njs_int_t     ret;","njs_value_t   val, new_elem, index;"],"label":0}
{"cve":"CVE-2018-20175","code_chunks":["","\ts = iso_init(5);","","\tout_uint8(s, (MCS_CJRQ << 2));","\tout_uint16_be(s, g_mcs_userid);","\tout_uint16_be(s, chanid);",""],"label":0}
{"cve":"PYSEC-2021-847","code_chunks":["","void ComputeAsync(OpKernelContext* context, DoneCallback done) final {","const Tensor& input = context->input(0);","const Tensor& rhs = context->input(1);","const int ndims = input.dims();","const int64 n = input.dim_size(ndims - 1);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2023-0302","code_chunks":["}","","if (hdr->file_names) {","hdr->file_names[count].name = r_str_newf(\"%s\/%s\", r_str_get (include_dir), filename);","hdr->file_names[count].id_idx = id_idx;","hdr->file_names[count].mod_time = mod_time;","hdr->file_names[count].file_len = file_len;"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["<< \", their proto \" << connect.protocol_version << dendl;","if (connect.protocol_version != reply.protocol_version) {","return _reply_accept(CEPH_MSGR_TAG_BADPROTOVER, connect, reply, authorizer_reply);","}","if (connect.authorizer_protocol == CEPH_AUTH_CEPHX) {","if (peer_type == CEPH_ENTITY_TYPE_OSD ||","peer_type == CEPH_ENTITY_TYPE_MDS ||"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","  const int32 sample_rate = *GetTensorData<int>(input_rate);","","  const int spectrogram_channels = input_wav->dims->data[2];","  const int spectrogram_samples = input_wav->dims->data[1];","  const int audio_channels = input_wav->dims->data[0];",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["    TfLiteRegistration reg = {nullptr, nullptr, nullptr, nullptr};","","    reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","            TfLiteTensor* output0;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output0));","      SetTensorToDynamic(output0);","            const TfLiteTensor* input;"],"label":0}
{"cve":"CVE-2019-3556","code_chunks":["","char hex[] = \"0123456789abcdef\";","","String result(3 * value.size(), ReserveString);","char *rdata = result.get()->mutableData(), *r = rdata;","","for (int i = 0; i < value.size(); i++) {"],"label":1}
{"cve":"CVE-2018-20174","code_chunks":["\t\t\t\t\treplen = revcode;","\t\t\t\t\tcollen = 0;","\t\t\t\t}","\t\t\t\twhile (indexw < width && collen > 0)","\t\t\t\t{","\t\t\t\t\tx = CVAL(in);","\t\t\t\t\tif (x & 1)"],"label":0}
{"cve":"CVE-2020-15203","code_chunks":["\"Cannot select both scientific and shortest notation\"));","format_ = \"%\";","if (width > -1) {","strings::Appendf(&format_, \"%s%d\", fill_string.c_str(), width);","}","if (precision > -1) {","strings::Appendf(&format_, \".%d\", precision);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from Assign\");","            return 1;","        }","        else {"],"label":0}
{"cve":"CVE-2016-10172","code_chunks":["if (bytecnt) {","wpc->channel_layout += nchans = *byteptr++;","bytecnt--;","","","if (bytecnt) {"],"label":1}
{"cve":"CVE-2020-24369","code_chunks":["if (p->lineinfo[oldpc] != 0)","return (luaG_getfuncline(p, oldpc - 1) != luaG_getfuncline(p, newpc));","}","return 0;  \/* no line changes in the way *\/","}"],"label":1}
{"cve":"CVE-2017-9520","code_chunks":["if (node->value == value) {","goto beach;","}","free (node->value);","node->value = strdup (value);","if (IS_DIGIT (*value)) {"],"label":1}
{"cve":"CVE-2020-35535","code_chunks":["srf_buf = (uchar *)malloc(len);","fread(srf_buf, len, 1, ifp);","","offset += srf_buf[offset] << 2;"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["","void pretty_print_commit(struct pretty_print_context *pp,","\t\t\t const struct commit *commit,","\t\t\t struct strbuf *sb)","{","\tunsigned long beginning_of_body;","\tint indent = 4;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","TF_LITE_ENSURE(context, node->inputs->size > 0);","","const TfLiteTensor* cond = GetInput(context, node, 0);","TF_LITE_ENSURE_EQ(context, cond->type, kTfLiteBool);","TF_LITE_ENSURE_EQ(context, NumElements(cond), 1);",""],"label":1}
{"cve":"PYSEC-2022-104","code_chunks":["ConvolutionDimensions dims = OpDimensionsFromInputs(","op_info.inputs(0).shape(), op_info, &found_unknown_shapes);","int per_output_ops = dims.kx * dims.ky == 1 ? 1 : dims.kx * dims.ky - 1;","int64_t ops = dims.batch * dims.ox * dims.oy * dims.oz * per_output_ops;","node_costs->num_compute_ops = ops;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["    const int number_channel = affine_quantization->scale->size;","    data->per_channel_output_multiplier.resize(number_channel);","    data->per_channel_output_shift.resize(number_channel);","    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(","        context, input, weights, bias, output, kTfLiteActNone,","        &data->output_multiplier, &data->output_shift,","        &data->output_activation_min, &data->output_activation_max,"],"label":0}
{"cve":"CVE-2023-26485","code_chunks":["","} else if (escape == LITERAL) {","if (c == 10) {","cmark_strbuf_putc(renderer->buffer, '\\n');","renderer->column = 0;","renderer->begin_line = true;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["CheckInputTensorDimensions(context, node, n_input, n_output,","n_cell, is_layer_norm_lstm));","","TfLiteTensor* output = GetOutput(context, node, lstm::full::kOutputTensor);","","TfLiteTensor* output_state ="],"label":1}
{"cve":"CVE-2023-0302","code_chunks":["item->str = str ? strdup (str) : NULL;","if (str && !item->str) {","if (!node) { \t\t\tfree (item);","}","return false;","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2022-1621","code_chunks":["convert_setup(&vimconv, NULL, NULL);","}","","#if defined(FEAT_GUI_GTK) || defined(PROTO)","\/*","* Return TRUE if string \"s\" is a valid utf-8 string.","* When \"end\" is NULL stop at the first NUL."],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\/* treating capabilities that are supposed to be send only from the server *\/","switch (type)","{","if (!rdp_read_bitmap_cache_host_support_capability_set(s, length, settings))","return FALSE;","","break;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    bw_row_sums->allocation_type = kTfLiteArenaRwPersistent;","    int bw_row_sums_dims[2] = {num_row_sums, bw_num_units};","    if (!TfLiteIntArrayEqualsArray(bw_row_sums->dims, 2, bw_row_sums_dims)) {","      TfLiteIntArray* bw_row_sums_size = TfLiteIntArrayCreate(2);","      bw_row_sums_size->data[0] = bw_row_sums_dims[0];","      bw_row_sums_size->data[1] = bw_row_sums_dims[1];","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, bw_row_sums,"],"label":0}
{"cve":"CVE-2022-1809","code_chunks":["static bool vtable_is_value_in_text_section(RVTableContext *context, ut64 curAddress, ut64 *value) {","ut64 curAddressValue;","if (!context->read_addr (context->anal, curAddress, &curAddressValue)) {","return false;","}"],"label":1}
{"cve":"CVE-2021-40568","code_chunks":["if (!gf_bs_available(bs)) {","GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[Core] exp-golomb read failed, not enough bits in bitstream !\\n\"));","} else {","GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[Core] corrupted exp-golomb code, %d leading zeros, max 31 allowed !\\n\", nb_lead));","}"],"label":1}
{"cve":"CVE-2015-8629","code_chunks":[" * to prevent compiler warnings about type clashes between u_int"," * and krb5_ui_2."," *\/","bool_t","xdr_krb5_ui_2(XDR *xdrs, krb5_ui_2 *objp)","{","    unsigned int tmp;"],"label":0}
{"cve":"CVE-2019-20392","code_chunks":[],"label":1}
{"cve":"CVE-2022-0156","code_chunks":["\t\t\t\t\tif (mch_fstat(fileno(fp_in), &st_old) < 0","\t\t|| S_ISDIR(st_old.st_mode)","#ifdef UNIX","\t\t\t\t\t\t\t\t|| (getuid() != ROOT_UID","\t\t    && !(st_old.st_uid == getuid()","\t\t\t    ? (st_old.st_mode & 0200)","\t\t\t    : (st_old.st_gid == getgid()"],"label":0}
{"cve":"CVE-2022-0481","code_chunks":["","while (tree) {","if (nint(tree->car->car->car) == NODE_KW_REST_ARGS) {","if (len > 0) {","pop_n(len*2);","if (!update) {","genop_2(s, OP_HASH, cursp(), len);"],"label":1}
{"cve":"CVE-2018-5809","code_chunks":["#endif","  if (fuji_width)","  {","    fuji_width = width >> !fuji_layout;","    filters = fuji_width & 1 ? 0x94949494 : 0x49494949;","    width = (height >> fuji_layout) + fuji_width;","    height = width - 1;"],"label":0}
{"cve":"CVE-2018-20177","code_chunks":["\t\t\t\t\tcolor = CVAL(in);","\t\t\t\t\t*out = color;","\t\t\t\t\tout += 4;","\t\t\t\t\tindexw++;","\t\t\t\t\tcollen--;","\t\t\t\t}","\t\t\t\twhile (indexw < width && replen > 0)"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["tok->level--;","break;","}","","\/* Punctuation character *\/","*p_start = tok->start;"],"label":1}
{"cve":"PYSEC-2019-227","code_chunks":["    auto data_flat = data.flat_inner_outer_dims<T, 2>(segment_ids.dims() - 1);","    reduction_functor_(context, segment_ids.shape(), segment_flat, data_flat,","                       output_flat);","  }","","  DeviceReductionFunctor reduction_functor_;","};"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2022-0128","code_chunks":["cmd = ea.cmd;","if ((*cmd != '$' || starts_with_colon)","&& (starts_with_colon || !(*cmd == '\\''","|| (cmd[0] == cmd[1] && (*cmd == '+' || *cmd == '-')))))","{","ea.cmd = skip_range(ea.cmd, TRUE, NULL);","if (ea.cmd > cmd)"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["l = RLC_FP_BITS + 1;","bn_rec_slw(win, &l, k, EP_WIDTH);","for (i = 0; i < l; i++) {","if (win[i] == 0) {","ep2_dbl(q, q);","} else {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  const bool use_projection = (projection_weights != nullptr);","","    int8_t* input_to_input_weight_ptr = nullptr;","  int8_t* recurrent_to_input_weight_ptr = nullptr;","  int8_t* cell_to_input_weight_ptr = nullptr;","  int8_t* input_to_forget_weight_ptr = nullptr;","  int8_t* recurrent_to_forget_weight_ptr = nullptr;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["operator_ty op;","expr_ty right;","","if (_PyObject_HasAttrId(obj, &PyId_left)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_left);"],"label":1}
{"cve":"CVE-2018-8797","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2020-4030","code_chunks":["TRIO_PUBLIC_STRING size_t trio_length TRIO_ARGS1((string), TRIO_CONST char* string)","{","return trio_length_max(string, INT_MAX);","}","","#endif"],"label":0}
{"cve":"CVE-2022-21725","code_chunks":["ConvolutionDimensions dims = OpDimensionsFromInputs(","op_info.inputs(0).shape(), op_info, &found_unknown_shapes);","int per_output_ops = dims.kx * dims.ky == 1 ? 1 : dims.kx * dims.ky - 1;","int64_t ops = dims.batch * dims.ox * dims.oy * dims.oz * per_output_ops;","node_costs->num_compute_ops = ops;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteNode* node) {","std::map<T, int> unique_values;","TfLiteTensor* output_indexes;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &output_indexes));","std::vector<T> output_values;","I* indexes = GetTensorData<I>(output_indexes);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["expr_ty o = (expr_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        *out = FormattedValue(value, conversion, format_spec, lineno,","                              col_offset, end_lineno, end_col_offset, arena);","        if (*out == NULL) goto failed;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)JoinedStr_type);","    if (isinstance == -1) {"],"label":0}
{"cve":"CVE-2018-20174","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;"],"label":1}
{"cve":"CVE-2020-13790","code_chunks":["\/* On 16-bit-int machines we have to be careful of maxval = 65535 *\/","source->rescale = (JSAMPLE *)","(*cinfo->mem->alloc_small) ((j_common_ptr)cinfo, JPOOL_IMAGE,","(size_t)(((long)maxval + 1L) *","sizeof(JSAMPLE)));","half_maxval = maxval \/ 2;","for (val = 0; val <= (long)maxval; val++) {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["PyErr_SetString(PyExc_TypeError, \"required field \\\"op\\\" missing from BoolOp\");","return 1;","}","if (_PyObject_HasAttrId(obj, &PyId_values)) {","int res;","Py_ssize_t len;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["    mod = Ta3AST_FromNode(mod_n, &cf, \"<fstring>\", c->c_feature_version, c->c_arena);","    PyMem_RawFree(str);","    Ta3Node_Free(mod_n);","    if (!mod)","        return NULL;","    return mod->v.Expression.body;","}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ed_map_dst(ed_t p, const uint8_t *msg, int len, const uint8_t *dst, int dst_len);"],"label":1}
{"cve":"CVE-2018-14363","code_chunks":["int count = snprintf(dest, destlen, \"%s.hcache\", path);","","\/* Strip out any directories in the path *\/","char *first = strchr(dest, '\/');","char *last = strrchr(dest, '\/');","if (first && last && (last > first))"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["}","","authorizer_reply.append(state_buffer, connect_reply.authorizer_len);","bufferlist::iterator iter = authorizer_reply.begin();","if (authorizer && !authorizer->verify_reply(iter)) {","ldout(async_msgr->cct, 0) << __func__ << \" failed verifying authorize reply\" << dendl;","goto fail;"],"label":1}
{"cve":"CVE-2022-39244","code_chunks":["{","char *s;","","if (pj_scan_is_eof(scanner)) {","return;","}"],"label":0}
{"cve":"CVE-2022-36026","code_chunks":["ctx,","(round_mode_string == \"HALF_UP\" || round_mode_string == \"HALF_TO_EVEN\"),","errors::InvalidArgument(\"Round mode string must be \"","\"'HALF_UP' or \"","\"'HALF_TO_EVEN', is '\" +","round_mode_string + \"'\"));"],"label":1}
{"cve":"CVE-2021-3962","code_chunks":["              info.bytes_per_pixel=1;","              if (datum > 8)","                info.bytes_per_pixel=2;","              info.depth=info.bits_allocated;","              if ((info.depth == 0) || (info.depth > 32))","                ThrowDCMException(CorruptImageError,\"ImproperImageHeader\")","              info.max_value=(1UL << info.bits_allocated)-1;"],"label":0}
{"cve":"CVE-2021-41864","code_chunks":["static int prealloc_elems_and_freelist(struct bpf_stack_map *smap)","{","u32 elem_size = sizeof(struct stack_map_bucket) + smap->map.value_size;","int err;","","smap->elems = bpf_map_area_alloc(elem_size * smap->map.max_entries,"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["            TF_LITE_ENSURE_OK(context, PopulatePrecomputedZPTimesWeightsWithBias(","                                     context, op_data, node));","    } else {","                  PopulateQuantizedLstmParams8x8_8(context, node,","                                       &op_data->integer_lstm_param);","","                              for (int scratch_index = 0; scratch_index < 8; ++scratch_index) {"],"label":0}
{"cve":"CVE-2017-16818","code_chunks":["","","} else if (w->kind == TokenKind::princ_type) {","ceph_assert(pp->s.size() > 1);","auto& pri = pp->s[pp->s.size() - 2].w->id == TokenID::Principal ?","t->princ : t->noprinc;",""],"label":1}
{"cve":"PYSEC-2022-90","code_chunks":["const NodeDef& node, const GraphProperties& properties) const {","if (!IsReshape(node)) {","return errors::Internal(\"Node \", node.name(), \" is not a Reshape node\");","}","CHECK_LE(2, node.input_size());","const NodeDef* new_shape = node_map_->GetNode(node.input(1));"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["","if (reserve_space_size_in_bytes > 0) {","TF_ASSIGN_OR_RETURN(reserve_space, reserve_space_allocator->AllocateBytes(","reserve_space_size_in_bytes));","}","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["input->type == kTfLiteInt16) {","node->temporaries->data[data->scratch_tensor_index] =","data->scratch_tensor_id;","TfLiteTensor* scratch_buffer ="],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["        &context->tensors[node->temporaries->data[data->im2col_index]];","    im2col->type = input->type;","    if (is_hybrid) {","      im2col->type = filter->type;","    }","    im2col->allocation_type = kTfLiteArenaRw;","    auto im2col_status = context->ResizeTensor(context, im2col, im2col_size);"],"label":0}
{"cve":"CVE-2020-14400","code_chunks":["","len += 256 * 3 * 2;","","if (rfbWriteExact(cl, buf, len) < 0) {","rfbLogPerror(\"rfbSetClientColourMapBGR233: write\");","rfbCloseClient(cl);","return FALSE;"],"label":1}
{"cve":"PYSEC-2021-261","code_chunks":["const int64_t size = file_pattern_t.NumElements();","OP_REQUIRES(","context, size == 1,","errors::InvalidArgument(","\"Input 0 (file_pattern) must be a string scalar; got a tensor of \",","size, \" elements\"));"],"label":0}
{"cve":"CVE-2023-46853","code_chunks":["const char *cm = command;","size_t cl = 0;","if (cmdlen < 4) {","return -1;","}",""],"label":0}
{"cve":"PYSEC-2021-155","code_chunks":["","  void Compute(OpKernelContext* ctx) override {","    const Tensor& handle = ctx->input(0);","    const string& name = handle.scalar<tstring>()();","    Tensor val;","    auto session_state = ctx->session_state();","    OP_REQUIRES(ctx, session_state != nullptr,"],"label":0}
{"cve":"PYSEC-2020-137","code_chunks":["                                const TfLiteTensor* data,","                                const TfLiteTensor* segment_ids,","                                TfLiteTensor* output) {","      const int segment_id_size = segment_ids->dims->data[0];","  TF_LITE_ENSURE_EQ(context, segment_id_size, data->dims->data[0]);","  int previous_segment_id = -1;","  for (int i = 0; i < segment_id_size; i++) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* fft_length = GetInput(context, node, kFftLengthTensor);","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (output->type != kTfLiteComplex64) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void bn_gen_prime_safep(bn_t a, int bits) {","while (1) {","do {","bn_rand(a, RLC_POS, bits);"],"label":1}
{"cve":"CVE-2021-3770","code_chunks":["tabstop_set(char_u *var, int **array)","{","int valcount = 1;","int t;","char_u *cp;"],"label":1}
{"cve":"CVE-2017-9229","code_chunks":["*low_prev = onigenc_get_prev_char_head(reg->enc,","(pprev ? pprev : str), p);","}","}"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","TF_LITE_ENSURE(context, node->inputs->size > 0);","","const TfLiteTensor* cond = GetInput(context, node, 0);","TF_LITE_ENSURE_EQ(context, cond->type, kTfLiteBool);","TF_LITE_ENSURE_EQ(context, NumElements(cond), 1);",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp_exp_basic(fp_t c, const fp_t a, const bn_t b) {","int i, l;","fp_t r;","","fp_null(r);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tsize_t bits, digits;","","\trand_bytes((uint8_t *)a, RLC_FB_DIGS * sizeof(dig_t));","","\tRLC_RIP(bits, digits, RLC_FB_BITS);","\tif (bits > 0) {","\t\tdig_t mask = RLC_MASK(bits);"],"label":0}
{"cve":"CVE-2017-12664","code_chunks":["tptr = tmpbuf;","for (bit=0, byte=0; bit < (unsigned char) MagickMin(8,(ssize_t) bytes_per_row-x); bit++)","{","if ((y == 0) || (lastrow[x + bit] != one_row[x + bit]))","{","byte |= (1 << (7 - bit));","*tptr++ = (char) one_row[x + bit];"],"label":1}
{"cve":"CVE-2018-20467","code_chunks":["bmp_info.x_pixels=ReadBlobLSBLong(image);","bmp_info.y_pixels=ReadBlobLSBLong(image);","bmp_info.number_colors=ReadBlobLSBLong(image);","if (bmp_info.number_colors > GetBlobSize(image))","ThrowReaderException(CorruptImageError,\"InsufficientImageDataInFile\");","bmp_info.colors_important=ReadBlobLSBLong(image);","if (image->debug != MagickFalse)"],"label":1}
{"cve":"CVE-2022-0519","code_chunks":["R_API RBinJavaAttrInfo *r_bin_java_rtv_annotations_attr_new(RBinJavaObj *bin, ut8 *buffer, ut64 sz, ut64 buf_offset) {","ut32 i = 0;","ut64 offset = 0;","if (buf_offset + 8 > sz) {","return NULL;","}","RBinJavaAttrInfo *attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["      \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_cert.pem\"));","  envoy::type::matcher::v3::StringMatcher matcher;","  std::vector<SanMatcherPtr> subject_alt_name_matchers;","  subject_alt_name_matchers.push_back(","      SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_URI, matcher)});","  EXPECT_TRUE(DefaultCertValidator::matchSubjectAltName(cert.get(), subject_alt_name_matchers));","}"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const bool is_soft_nms = NumInputs(node) == 6;","","const TfLiteTensor* input_boxes;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kInputTensorBoxes, &input_boxes));","const int num_boxes = SizeOfDimension(input_boxes, 0);","const TfLiteTensor* input_scores;"],"label":0}
{"cve":"CVE-2019-19480","code_chunks":["\tstruct sc_asn1_entry asn1_dsakey_value_attr[C_ASN1_DSAKEY_VALUE_ATTR_SIZE];","\tstruct sc_asn1_entry asn1_dsakey_i_p_attr[C_ASN1_DSAKEY_I_P_ATTR_SIZE];","\tstruct sc_asn1_entry asn1_gostr3410key_attr[C_ASN1_GOSTR3410KEY_ATTR_SIZE];","\tstruct sc_asn1_entry asn1_prk_gostr3410_attr[C_ASN1_PRK_GOSTR3410_ATTR_SIZE];","\tstruct sc_asn1_entry asn1_ecckey_attr[C_ASN1_ECCKEY_ATTR];","\tstruct sc_asn1_entry asn1_prk_ecc_attr[C_ASN1_PRK_ECC_ATTR];","\tstruct sc_asn1_entry asn1_prkey[C_ASN1_PRKEY_SIZE];"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  const TfLiteType type = GetInput(context, node, 0)->type;","  switch (type) {","      return EvalImpl<float>(context, node, std::abs<float>, type);","    case kTfLiteInt8: {","      const auto* op_data = static_cast<const OpData*>(node->user_data);","      const int kMinInt8 = std::numeric_limits<int8_t>::min();","      const int kMaxInt8 = std::numeric_limits<int8_t>::max();"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["ConnectionSecurityLevel security_level) const","{","IListenSocket* socket = NULL;","if (security_level != ConnectionSecurityLevel::PLAINTEXT) {","socket = new SecureListenSocket(m_events, m_socketMultiplexer, family, security_level);","}"],"label":0}
{"cve":"CVE-2019-13219","code_chunks":["      FASTDEF(temp);","      int v = FAST_SCALED_FLOAT_TO_INT(temp, src[i],15);","      if ((unsigned int) (v + 32768) > 65535)","         v = v < 0 ? -32768 : 32767;","      dest[i] = v;","   }","}"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["{","dtls_srtp *ds;","pj_pool_t *pool;","pj_status_t status;","","pool = pj_pool_create(srtp->pool->factory, \"dtls%p\",","2000, 256, NULL);"],"label":0}
{"cve":"CVE-2021-38199","code_chunks":["struct nfs_client *nfs4_alloc_client(const struct nfs_client_initdata *cl_init)","{","int err;","struct nfs_client *clp = nfs_alloc_client(cl_init);","if (IS_ERR(clp))","return clp;"],"label":1}
{"cve":"CVE-2022-29339","code_chunks":["is_eos = gf_feof(bs->stream);","","\/*we are in FILE mode, test for end of file*\/","if (!is_eos || bs->cache_read) {","u8 res;","Bool loc_eos=GF_FALSE;","assert(bs->position<=bs->size);"],"label":1}
{"cve":"CVE-2022-2872","code_chunks":["","# ~~ GCODE file handling","","_file_cache = {}","_file_cache_mutex = threading.RLock()",""],"label":1}
{"cve":"PYSEC-2021-171","code_chunks":["errors::InvalidArgument(","\"Rank of input SparseTensor should be > 1, but saw rank: \", rank));","","TensorShape tensor_input_shape(input_shape->vec<int64>());","gtl::InlinedVector<int64, 8> std_order(rank);","std::iota(std_order.begin(), std_order.end(), 0);","SparseTensor input_st;"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["  \/* Set a safe default value in case 'next' does not get set *\/","  next = textStart;","","#ifdef XML_DTD","  if (entity->is_param) {","    int tok","        = XmlPrologTok(parser->m_internalEncoding, textStart, textEnd, &next);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  const bool use_cifg = (input_to_input_weights == nullptr);","  TfLiteIntArray* scratch_buffer_size = TfLiteIntArrayCreate(2);","  scratch_buffer_size->data[0] = n_batch;","  if (use_cifg) {","        scratch_buffer_size->data[1] = n_cell * 3;","  } else {","        scratch_buffer_size->data[1] = n_cell * 4;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2022-0849","code_chunks":["if (fcn && fcn->reg_save_area) {","r_reg_setv (core->anal->reg, ctx.spname, ctx.initial_sp - fcn->reg_save_area);","}","pcname = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const std::vector<float>& scores, std::vector<int>* selected,","int max_detections) {","const TfLiteTensor* input_box_encodings;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorBoxEncodings,","&input_box_encodings));"],"label":0}
{"cve":"CVE-2023-32233","code_chunks":["{","struct nft_dynset *priv = nft_expr_priv(expr);","","nf_tables_activate_set(ctx, priv->set);","}","","static void nft_dynset_destroy(const struct nft_ctx *ctx,"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["\t\telem->prev = *attr_stack_p;","\t\t*attr_stack_p = elem;","\t}","}","","static void bootstrap_attr_stack(struct index_state *istate,","\t\t\t\t struct attr_stack **stack)"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &value));","  TF_LITE_ENSURE(context, NumDimensions(value) >= 2);","","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","  TfLiteIntArray* outputSize = TfLiteIntArrayCreate(NumDimensions(value));",""],"label":0}
{"cve":"CVE-2022-21722","code_chunks":["unsigned len;","","len = (pj_ntohs((pj_uint16_t)common->length)+1) * 4;","if (p + len > p_end)","break;",""],"label":1}
{"cve":"CVE-2016-6870","code_chunks":["\/* copy the value string for work *\/","if (value[0]=='\"' && value[value_length-1]=='\"' && value_length>2) {","tmpstr = (char *)strndup(value+1, value_length-2);","value_length -= 2;","}","else"],"label":1}
{"cve":"CVE-2018-16643","code_chunks":["%                                                                             %","%                                                                             %","%                                                                             %","%   U n r e g i s t e r P W P I m a g e                                       %","%                                                                             %","%                                                                             %","%                                                                             %"],"label":0}
{"cve":"CVE-2021-40573","code_chunks":["extent_count = gf_bs_read_u16(bs);","location_entry->extent_entries = gf_list_new();","for (j = 0; j < extent_count; j++) {","GF_ItemExtentEntry *extent_entry = (GF_ItemExtentEntry *)gf_malloc(sizeof(GF_ItemExtentEntry));","if (!extent_entry) return GF_OUT_OF_MEM;","","gf_list_add(location_entry->extent_entries, extent_entry);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["                      GetTensorShape(output),                                 \\","                      GetTensorData<data_type>(output))","  switch (output->type) {","      TF_LITE_FILL(int32_t);","      break;","      TF_LITE_FILL(int64_t);","      break;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus lstm_logging_kernel(TfLiteContext* context, TfLiteNode* node,","                                 Logger* logger,","                                 ErrorReporter* error_reporter) {","  return lstm_eval(context, node, logger, error_reporter);","}","","}"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["auto* params =","reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);","","int32_t* out_buf = GetOutput(context, node, 0)->data.i32;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["GetTensorData<int>(fft_integer_working_area);","","TfLiteTensor* fft_double_working_area =","GetTemporary(context, node, kFftDoubleWorkingAreaTensor);","double* fft_double_working_area_data = reinterpret_cast<double*>(","GetTensorData<int64_t>(fft_double_working_area));"],"label":1}
{"cve":"CVE-2019-20503","code_chunks":["\t\t\tif (stcb->asoc.scope.ipv4_addr_legal) {","\t\t\t\tstruct sctp_ipv4addr_param *p4, p4_buf;","","\t\t\t\t\/* ok get the v4 address and check\/add *\/","\t\t\t\tphdr = sctp_get_next_param(m, offset,","\t\t\t\t\t\t\t   (struct sctp_paramhdr *)&p4_buf,","\t\t\t\t\t\t\t   sizeof(p4_buf));"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\t\treturn FALSE;","\tStream_Write_UINT16(","\t    s, (UINT16)lengthCombinedCapabilities);         \/* lengthCombinedCapabilities (2 bytes) *\/","\tStream_SetPosition(s, bm);                          \/* go back to numberCapabilities *\/","\tStream_Write_UINT16(s, numberCapabilities);         \/* numberCapabilities (2 bytes) *\/","#ifdef WITH_DEBUG_CAPABILITIES","\tStream_Seek_UINT16(s);"],"label":0}
{"cve":"CVE-2020-1898","code_chunks":["V::setAppend(ret, unserializeThing());"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["const char * const *p;","for (p = FORBIDDEN; *p; p++) {","if (PyUnicode_CompareWithASCIIString(name, *p) == 0) {","ast_error(c, n, \"assignment to keyword\");","return 1;","}"],"label":1}
{"cve":"CVE-2022-0559","code_chunks":["\t\tdir = cmp (data, q->data, user) >= 0;","","\t\tif (g) {","\t\t\tparent = g;","\t\t}","","\t\tg = p;"],"label":0}
{"cve":"CVE-2020-11939","code_chunks":["static u_int16_t concat_hash_string(struct ndpi_packet_struct *packet,","char *buf, u_int8_t client_hash) {","u_int32_t offset = 22, buf_out_len = 0;","if(offset+sizeof(u_int32_t) >= packet->payload_packet_len)","goto invalid_payload;","u_int32_t len = ntohl(*(u_int32_t*)&packet->payload[offset]);"],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["    }","  }","","if (len == 0) return FALSE;  \/* Should never occur, but stops analyzers complaining. *\/","","i = 0;","j = 0;"],"label":0}
{"cve":"CVE-2021-29463","code_chunks":["        }","","        if (xmpData_.count() > 0 && !writeXmpFromPacket()) {","            XmpParser::encode(xmpPacket_, xmpData_,","                              XmpParser::useCompactFormat |","                              XmpParser::omitAllFormatting);","        }"],"label":0}
{"cve":"CVE-2018-11380","code_chunks":["\tswitch (wordsize) {","\t\tCASE(8);","\t\tCASE(16);","\t\tCASE(32);","\t\tCASE(64);","\t\tdefault: return false;","\t}"],"label":0}
{"cve":"PYSEC-2019-234","code_chunks":["const Index input_total_size = data_size;","const Index input_outer_dim_size = segment_ids.dimension(0);","const Index input_inner_dim_size = input_total_size \/ input_outer_dim_size;","","const int OuterDimTileSize = 8;",""],"label":1}
{"cve":"CVE-2016-8654","code_chunks":["void jpc_qmfb_split_colgrp(jpc_fix_t *a, int numrows, int stride,","int parity)","{","","int bufsize = JPC_CEILDIVPOW2(numrows, 1);","jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE];"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  }","  output_indexes_shape->data[num_dimensions - 1] = k;","  output_values_shape->data[num_dimensions - 1] = k;","  TfLiteTensor* output_indexes;","  TF_LITE_ENSURE_OK(","      context, GetOutputSafe(context, node, kOutputIndexes, &output_indexes));","  TfLiteTensor* output_values;"],"label":0}
{"cve":"CVE-2020-5210","code_chunks":["            case 'd': \/* game start, YYYYMMDDhhmmss *\/","                if (fullsubs)","                    Sprintf(tmpbuf, \"%08ld%06ld\",","                            yyyymmdd(ubirthday), hhmmss(ubirthday));","                else","                    Strcpy(tmpbuf, \"{game start date+time}\");","                break;"],"label":0}
{"cve":"CVE-2022-1714","code_chunks":["break;","op->type = R_ANAL_OP_TYPE_CALL;","op->fail = addr + op->size;","op->jump = r_read_at_le16 (buf, 2);","break;","op->type = R_ANAL_OP_TYPE_RET;","break;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","BYTE g[16];","if (Stream_GetRemainingLength(s) < 16)","return FALSE;","Stream_Read(s, g, 16);","guid->Data1 = (g[3] << 24) | (g[2] << 16) | (g[1] << 8) | g[0];"],"label":0}
{"cve":"CVE-2018-20762","code_chunks":["AVFormatContext *ctx;","AVOutputFormat *fmt_out;","Bool ret = GF_FALSE;","char *ext, szName[1000], szExt[20];","const char *szExtList;","FFDemux *ffd;","if (!plug || !url)"],"label":1}
{"cve":"CVE-2018-25020","code_chunks":["sizeof(*patch) * insn_rest);","memcpy(prog_adj->insnsi + off, patch, sizeof(*patch) * len);","","bpf_adj_branches(prog_adj, off, insn_delta);","","return prog_adj;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["}","","RLC_TRY {","for (i = 0; i < (1 << (EP_WIDTH - 1)); i ++) {","ed_null(t[i]);","ed_new(t[i]);","}"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {","        asdl_seq* elts;","        expr_context_ty ctx;",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["","j = 0;","fp24_copy(t, a);","for (i = 1; i < bn_bits(b); i++) {","fp24_sqr_pck(t, t);","if (bn_get_bit(b, i)) {","fp24_copy(u[j++], t);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;","","switch (output_type) {        EvalUnquantized<float>(context, node);","break;"],"label":1}
{"cve":"CVE-2018-12436","code_chunks":["DECLARE_CURVE_SPECS(1)","","if (in == NULL || r == NULL || s == NULL || key == NULL || rng == NULL)","return ECC_BAD_ARG_E;","","\/* is this a private key? *\/"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["      }","    };","","    populate(node->outputs->data[0]);","    populate(node->temporaries->data[0]);","    populate(node->temporaries->data[1]);","    return kTfLiteOk;"],"label":0}
{"cve":"CVE-2022-24792","code_chunks":["for (index=file_count-1; index>=0; index--) {","","pjmedia_wave_hdr wavehdr;","pj_ssize_t size_to_read, size_read;","","\/* we end with the last one so we are good to go if still in function*\/","pj_memcpy(filename, file_list[index].ptr, file_list[index].slen);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["return 1;","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus EvalImpl(TfLiteContext* context, const TfLiteTensor* input,","TfLiteNode* node) {","std::map<T, int> unique_values;","TfLiteTensor* output_indexes = GetOutput(context, node, 1);","std::vector<T> output_values;","I* indexes = GetTensorData<I>(output_indexes);","const T* data = GetTensorData<T>(input);"],"label":1}
{"cve":"CVE-2016-4997","code_chunks":["int xt_compat_check_entry_offsets(const void *base,","unsigned int target_offset,","unsigned int next_offset)","{"],"label":1}
{"cve":"CVE-2020-15472","code_chunks":["","\/* H323  *\/","if(packet->payload_packet_len >= 4","&& (packet->payload[0] == 0x03)","&& (packet->payload[1] == 0x00)) {","struct tpkt *t = (struct tpkt*)packet->payload;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["context, context->ResizeTensor(context, activation, activation_size));","","node->temporaries->data[kConcat] = (*scratch_tensor_index) + kConcat;","TfLiteTensor* concat = GetTemporary(context, node, kConcat);","concat->type = input->type;","concat->allocation_type = kTfLiteArenaRw;","TfLiteIntArray* concat_size = TfLiteIntArrayCreate(2);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","const TfLiteTensor* multipliers = GetInput(context, node, kInputMultipliers);","if (multipliers->type != kTfLiteInt32 && multipliers->type != kTfLiteInt64) {","context->ReportError(context,","\"Multipliers of type '%s' are not supported by tile.\","],"label":1}
{"cve":"CVE-2016-5355","code_chunks":["\t\t}","\t}","","\tpos = START_POS;","\tfor (i = 0; i < 8; i++) {","\t\trec[pos+4] = '\\0';",""],"label":0}
{"cve":"CVE-2018-8795","code_chunks":["uint32 length;","struct stream packet = *s;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","","if (!s_check_rem(s, length))"],"label":0}
{"cve":"CVE-2020-28097","code_chunks":["\t.con_startup = vgacon_startup,","\t.con_init = vgacon_init,","\t.con_deinit = vgacon_deinit,","\t.con_clear = vgacon_clear,","\t.con_putc = vgacon_putc,","\t.con_putcs = vgacon_putcs,","\t.con_cursor = vgacon_cursor,"],"label":0}
{"cve":"CVE-2016-9391","code_chunks":["\t\treturn -1;","\t}","","\tif (bitstream->flags_ & JPC_BITSTREAM_EOF) {","\t\tbitstream->buf_ = 0x7f;","\t\tbitstream->cnt_ = 7;","\t\treturn 1;"],"label":0}
{"cve":"CVE-2019-17546","code_chunks":["gtStripContig(TIFFRGBAImage* img, uint32* raster, uint32 w, uint32 h)","{","TIFF* tif = img->tif;","tileContigRoutine put = img->put.contig;","uint32 row, y, nrow, nrowsub, rowstoread;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","WLog_WARN(TAG, \"not handling capability type %\" PRIu16 \" yet\", type);","}","","em = bm + length;",""],"label":1}
{"cve":"CVE-2017-18184","code_chunks":["compute_O_rc4_key(user_password, owner_password, data, key);","unsigned char O_data[key_bytes];","memcpy(O_data, QUtil::unsigned_char_pointer(data.getO()), key_bytes);","iterate_rc4(O_data, key_bytes, key, data.getLengthBytes(),","(data.getR() >= 3) ? 20 : 1, true);","std::string new_user_password =","std::string(reinterpret_cast<char*>(O_data), key_bytes);"],"label":1}
{"cve":"CVE-2018-5809","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[] = {0, 0};","if(width > 2064) return 0.f;","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["      break;","      context->ReportError(context, \"Unknown index output data type: %d\",","                           params->output_type);","      return kTfLiteError;","  }","","    switch (input->type) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["                                          &default_value_tensor));","  TfLiteTensor* output_tensor;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output_tensor));","","  Subgraph* subgraph = reinterpret_cast<Subgraph*>(context->impl_);","  auto& resources = subgraph->resources();","  auto* lookup = resource::GetHashtableResource(&resources, resource_id);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (TYPE(CHILD(n, 0)) == ASYNC) {","is_async = 1;","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* size;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSizeTensor, &size));"],"label":0}
{"cve":"CVE-2019-1010208","code_chunks":["\tpoint->SymbolicLinkNameOffset = sizeof (MOUNTMGR_CREATE_POINT_INPUT);","\tpoint->SymbolicLinkNameLength = (USHORT) wcslen ((PWSTR) &point[1]) * 2;","","\tpoint->DeviceNameOffset = point->SymbolicLinkNameOffset + point->SymbolicLinkNameLength;","\tTCGetNTNameFromNumber ((PWSTR) (buf + point->DeviceNameOffset), sizeof(buf) - point->DeviceNameOffset,mount->nDosDriveNo);","\tpoint->DeviceNameLength = (USHORT) wcslen ((PWSTR) (buf + point->DeviceNameOffset)) * 2;",""],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["int res;","tmp = _PyObject_GetAttrId(obj, &PyId_lineno);","if (tmp == NULL) goto failed;","res = obj2ast_int(tmp, &lineno, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["for (i = stack->num_matches - 1; i >= 0; i--) {","const struct match_attr *ma = stack->attrs[i];","if (ma->is_macro) {","int n = ma->u.attr->attr_nr;","if (!all_attrs[n].macro) {","all_attrs[n].macro = ma;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["      TF_LITE_ENSURE_OK(context,","                        GetTemporarySafe(context, node, 0, &input_quantized));","      TfLiteTensor* hidden_state_quantized;","      TF_LITE_ENSURE_OK(","          context, GetTemporarySafe(context, node, 1, &hidden_state_quantized));","      TfLiteTensor* scaling_factors;","      TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"name\\\" missing from alias\");","return 1;","}"],"label":0}
{"cve":"PYSEC-2019-209","code_chunks":["return;","}","const auto segment_flat = segment_ids.flat<Index>();","const Index output_rows = internal::SubtleMustCopy(static_cast<Index>(","num_segments.dtype() == DT_INT32 ? num_segments.scalar<int32>()()",": num_segments.scalar<int64>()()));","OP_REQUIRES(context, output_rows >= 0,"],"label":1}
{"cve":"CVE-2021-41202","code_chunks":[": std::ceil(std::abs((limit - start) \/ delta)));","Tensor* out = nullptr;","OP_REQUIRES_OK(context,","context->allocate_output(0, TensorShape({size}), &out));","auto flat = out->flat<T>();","T val = start;"],"label":1}
{"cve":"CVE-2018-20175","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["CHECK_HANDLE(handle, f);","int64_t ret = f->write(data, length);","if (ret < 0) {","raise_notice(\"fwrite(): send of %d bytes failed with errno=%d %s\",","data.size(), errno, folly::errnoStr(errno).c_str());","ret = 0;","}"],"label":1}
{"cve":"CVE-2020-11087","code_chunks":["context->AuthenticateMessage.cbBuffer);","winpr_HexDump(TAG, WLOG_DEBUG, context->AuthenticateMessage.pvBuffer,","context->AuthenticateMessage.cbBuffer);","","if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)","ntlm_print_version_info(&(message->Version));"],"label":1}
{"cve":"CVE-2021-41099","code_chunks":["    if (newlen < SDS_MAX_PREALLOC)","        newlen *= 2;","    else","        newlen += SDS_MAX_PREALLOC;","","    type = sdsReqType(newlen);",""],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["}","else","{","ga_init2(&values, sizeof(bval_T), 20);","bartype = getdigits(&p);","switch (bartype)"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","const auto* params =","reinterpret_cast<const TfLiteGatherParams*>(node->builtin_data);","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* positions = GetInput(context, node, kInputPositions);"],"label":1}
{"cve":"CVE-2016-8649","code_chunks":["status = 1;","ret = lxc_write_nointr(ipc_socket, &status, sizeof(status));","if (ret != sizeof(status)) {","ERROR(\"error using IPC to notify initial process for initialization (1)\");","shutdown(ipc_socket, SHUT_RDWR);","rexit(-1);","}"],"label":1}
{"cve":"CVE-2019-13219","code_chunks":["c->value_bits = get_bits(f, 4)+1;","c->sequence_p = get_bits(f,1);","if (c->lookup_type == 1) {","c->lookup_values = lookup1_values(c->entries, c->dimensions);","} else {","c->lookup_values = c->entries * c->dimensions;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","{","node->temporaries->data[0] = op_data->scratch_tensor_index;","TfLiteTensor* scratch_buffer = GetTemporary(context, node, \/*index=*\/0);","TfLiteIntArray* scratch_buffer_size = TfLiteIntArrayCreate(lhs_rank);","for (int i = 0; i < lhs_rank - 2; ++i) {","scratch_buffer_size->data[i] = lhs->dims->data[i];"],"label":1}
{"cve":"CVE-2018-11381","code_chunks":["return -1;","}","ut8 *buf = calloc (to - from, 1);","if (!buf || !min) {","return -1;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void rand_seed(uint8_t *buf, int size) {","ctx_t *ctx = core_get();","int len = (RLC_RAND_SIZE - 1) \/ 2;","","if (size <= 0) {","RLC_THROW(ERR_NO_VALID);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","","\t\t\t\/* Convert r to affine coordinates. *\/","\t\t\tep2_norm(r, r);"],"label":0}
{"cve":"CVE-2018-5730","code_chunks":["char                        **subtreelist = NULL;","char                        *user=NULL, *subtree=NULL, *principal_dn=NULL;","char                        **values=NULL, *strval[10]={NULL}, errbuf[1024];","char                        *filtuser=NULL;","struct berval               **bersecretkey=NULL;","LDAPMod                     **mods=NULL;"],"label":1}
{"cve":"CVE-2019-13217","code_chunks":["      e2 -= 8;","","      A += k1;","   }","}","","static void imdct_step3_inner_s_loop(int n, float *e, int i_off, int k_off, float *A, int a_off, int k0)"],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["assertx(isStringType(type(file_name)));","strncpy(frame->file_name,","val(file_name).pstr->data(),","std::min(val(file_name).pstr->size(), strobelight::kFileNameMax));","frame->file_name[strobelight::kFileNameMax - 1] = '\\0';","}",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    }","","        node->temporaries->data[kAccumScratchBuffer] =","        op_data->scratch_tensor_index + kAccumScratchBuffer;","    TfLiteTensor* accum_scratch;","    TF_LITE_ENSURE_OK(","        context,"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2017-7524","code_chunks":["        }","","        tmpResult.t.size = size;","","        bool res = string_bytes_concat_buffer(resultKey, &(tmpResult.b));","        if (!res) {","            rval = TSS2_SYS_RC_BAD_VALUE;"],"label":0}
{"cve":"CVE-2024-0964","code_chunks":[")","assert examples.processed_examples == [[\"hello\"]]","","examples = gr.Examples([\"test\/test_files\/bus.png\"], gr.Image())","assert ("],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","node->temporaries->data[kAccumScratch] =","scratch_tensor_index + kAccumScratch;","TfLiteTensor* accum_scratch = GetTemporary(context, node, kAccumScratch);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {n_cell, n_batch};"],"label":1}
{"cve":"CVE-2017-9228","code_chunks":["        if (ONIGENC_CODE_TO_MBCLEN(env->enc, NEWLINE_CODE) == 1)","          BITSET_SET_BIT(cc->bs, NEWLINE_CODE);","        else","          add_code_range(&(cc->mbuf), env, NEWLINE_CODE, NEWLINE_CODE);","      }","    }","  }"],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["\t\treturn FIT_KERNEL_PROP;","\t\treturn FIT_RAMDISK_PROP;","\t\treturn FIT_SETUP_PROP;","\t\treturn FIT_LOADABLE_PROP;","\t\treturn FIT_FPGA_PROP;","\t\treturn FIT_STANDALONE_PROP;","\t}"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  } else if (output->type == kTfLiteUInt8) {","    TF_LITE_ENSURE_OK(","        context, EvalQuantized<kernel_type>(context, node, params, data, input1,","                                            input2, output));","  } else {","    context->ReportError(","        context,"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["GetOptionalInputTensor(context, node, kFwInputToInputWeightsTensor);","const TfLiteTensor* fw_input_to_forget_weights;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFwInputToForgetWeightsTensor,","&fw_input_to_forget_weights));","const TfLiteTensor* fw_input_to_cell_weights;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input_boxes = GetInput(context, node, kInputTensorBoxes);","const int num_boxes = SizeOfDimension(input_boxes, 0);","const TfLiteTensor* input_scores =","GetInput(context, node, kInputTensorScores);","const TfLiteTensor* input_max_output_size ="],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["std::string key = \"big\";","uint32_t head_room = 77;","uint32_t long_string_length =","codec_limit_kb * 1024 - request_headers.byteSize() - key.length() - head_room;","std::string long_string = std::string(long_string_length, 'q');","request_headers.addCopy(key, long_string);"],"label":1}
{"cve":"PYSEC-2021-412","code_chunks":["    merge_op_ = BuildOpKernel(c, reduction, &sub_node);","    final_op_ = BuildOpKernel(c, \"Id\", &sub_node);","    name_ = strings::StrCat(c->def().name(), \": ReduceV3(\", reduction, \")\");","    VLOG(2) << \"CollectiveReduceV3 \" << this << \" name \" << name_;","  }","","  void ComputeAsync(OpKernelContext* c, DoneCallback done) override {"],"label":0}
{"cve":"CVE-2017-12595","code_chunks":["","warn(context,","QPDFExc(qpdf_e_damaged_pdf, input->getName(),","object_description,","input->getLastOffset(),","\"treating unknown token type as null while \""],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["return ret;","}","","if (!fit_check_format(imgdata)) {","free(imgdata);","return 0;","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* begin;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kBeginTensor, &begin));","const TfLiteTensor* size;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSizeTensor, &size));","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2023-26485","code_chunks":["CR();","LIT(\".nr ww \\\\w'\\\\\\\\$1'\");","CR();","LIT(\"\\\\Z@\\\\v'-.25m'\\\\l'\\\\\\\\n[ww]u'@\\\\\\\\$1\");","CR();","LIT(\"..\");"],"label":1}
{"cve":"CVE-2022-23558","code_chunks":["TfLiteIntArray* TfLiteIntArrayCreate(int size) {","  size_t alloc_size = TfLiteIntArrayGetSizeInBytes(size);","  if (alloc_size <= 0) return NULL;","  TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);","  if (!ret) return ret;","  ret->size = size;","  return ret;"],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["char *string_crypt(const char *key, const char *salt) {","assert(key);","assert(salt);","","char random_salt[12];","if (!*salt) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static int rand_inc(uint8_t *data, size_t size, int digit) {","\tint carry = digit;","\tfor (int i = size - 1; i >= 0; i--) {","\t\tint16_t s;","\t\ts = (data[i] + carry);","\t\tdata[i] = s & 0xFF;","\t\tcarry = s >> 8;"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["compile_nested_function(exarg_T *eap, cctx_T *cctx, garray_T *lines_to_free)","{","int\t\tis_global = *eap->arg == 'g' && eap->arg[1] == ':';","char_u\t*name_start = eap->arg;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["","if (length < 8)","return FALSE;","","Stream_Read_UINT16(s, soundFlags);  \/* soundFlags (2 bytes) *\/"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            int res;","            res = obj2ast_string(tmp, &type_comment, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }","        *out = With(items, body, type_comment, lineno, col_offset, arena);","        if (*out == NULL) goto failed;"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["}","","void git_all_attrs(struct index_state *istate,","\t\t   const char *path, struct attr_check *check)","{","\tint i;",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static void ep_mul_reg_glv(ep_t r, const ep_t p, const bn_t k) {","int i, j, l, n0, n1, s0, s1, b0, b1;","int8_t _s0, _s1, reg0[RLC_FP_BITS + 1], reg1[RLC_FP_BITS + 1];","bn_t n, _k, k0, k1, v1[3], v2[3];","ep_t q, t[1 << (EP_WIDTH - 2)], u, v, w;"],"label":1}
{"cve":"CVE-2022-34835","code_chunks":["\t\t}","#endif","\t} else {","\t\tint i;","","\t\t\/* show specific bus *\/","\t\ti = dectoul(argv[1], NULL);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["goto failed;","}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {"],"label":1}
{"cve":"CVE-2017-9990","code_chunks":["","avctx->pix_fmt = AV_PIX_FMT_BGRA;","","end = avpkt->data + avpkt->size;","while (memcmp(ptr, \"\/* XPM *\/\", 9) && ptr < end - 9)","ptr++;"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["}","","static enum XML_Error PTRCALL","errorProcessor(XML_Parser parser, const char *s, const char *end,","               const char **nextPtr) {","  UNUSED_P(s);","  UNUSED_P(end);"],"label":0}
{"cve":"PYSEC-2021-740","code_chunks":["for (int64 i = 0; i < flat_in.size(); ++i) {","const char* in_data_bytes =","reinterpret_cast<const char*>(flat_in(i).data());","char* out_data_bytes = reinterpret_cast<char*>(out_data);","const char* p_in = in_data_bytes;","char* p_out = out_data_bytes;"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["} else {","uint32_t setup_ret = 0;","","if ((setup_ret = _WM_SetupMidiEvent(hmp_mdi, hmp_chunk[i], 0)) == 0) {","goto _hmp_end;","}",""],"label":1}
{"cve":"CVE-2022-0519","code_chunks":["return NULL;","}","ut64 offset = 0;","RBinJavaVerificationObj *se = R_NEW0 (RBinJavaVerificationObj);","if (!se) {","return NULL;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["return 1;","}"],"label":1}
{"cve":"CVE-2022-0476","code_chunks":["\t\t\tbreak;","\t\t}","","\t\tsdb_num_set (obj->kv, \"mdmp_handle_data_stream.offset\",","\t\t\t\tentry->location.rva, 0);","\t\tsdb_set (obj->kv, \"mdmp_handle_data_stream.format\", \"dddd \"","\t\t\t\t\"SizeOfHeader SizeOfDescriptor \""],"label":0}
{"cve":"PYSEC-2020-127","code_chunks":["      handle->scalar<ResourceHandle>()() = resource_handle;","    } else {","            handle->flat<tstring>().setConstant(tk.GetHandle(name()));","    }","  }","","  TF_DISALLOW_COPY_AND_ASSIGN(GetSessionHandleOp);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2021-33910","code_chunks":["assert(f);","assert(ret);","","p = strdupa(f);","if (!p)","return -ENOMEM;"],"label":1}
{"cve":"CVE-2021-40574","code_chunks":["\t\t\tGF_TextSample * firstsamp = gf_isom_new_text_sample();","\t\t\ttxtin_process_send_text_sample(ctx, firstsamp, 0, 0, GF_TRUE);","\t\t\tgf_isom_delete_text_sample(firstsamp);","\t\t}","\t\tctx->first_samp = GF_FALSE;","","\t\ttxtin_process_send_text_sample(ctx, samp, ts, 0, GF_TRUE);"],"label":0}
{"cve":"CVE-2018-9336","code_chunks":["GetStartupData(HANDLE pipe, STARTUP_DATA *sud)","{","size_t size, len;","BOOL ret = FALSE;","WCHAR *data = NULL;","DWORD bytes, read;",""],"label":1}
{"cve":"CVE-2020-13396","code_chunks":["","ntlm_print_message_fields(&(message->TargetName), \"TargetName\");","ntlm_print_message_fields(&(message->TargetInfo), \"TargetInfo\");","#endif","context->state = NTLM_STATE_AUTHENTICATE;","Stream_Free(s, FALSE);"],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["char des_pass[9], *epass;","char *pw_epasswd = auth->data;","size_t pw_len;","int matched = 0;","debug_decl(sudo_passwd_verify, SUDOERS_DEBUG_AUTH);","","\/* An empty plain-text password must match an empty encrypted password. *\/"],"label":1}
{"cve":"CVE-2022-29777","code_chunks":["        oTopDict.Write( \"\\xf8\\x1b\\x00\", 3 );         oTopDict.Write( \"\\xf8\\x1c\\x01\", 3 );         oTopDict.Write( \"\\xf8\\x1d\\x02\", 3 );         oTopDict.Write( \"\\xf8\\x1e\\x03\", 3 );         oTopDict.Write( \"\\xf8\\x1f\\x04\", 3 );         oTopDict.Write( \"\\x1c\\x00\\x00\\x10\", 4 ); ","                CFFEncodeNumber( CharBufferWrite, &oTopDict, m_oTopDict.arrdFontBBox[0] );","        CFFEncodeNumber( CharBufferWrite, &oTopDict, m_oTopDict.arrdFontBBox[1] );","        CFFEncodeNumber( CharBufferWrite, &oTopDict, m_oTopDict.arrdFontBBox[2] );","        CFFEncodeNumber( CharBufferWrite, &oTopDict, m_oTopDict.arrdFontBBox[3] );","        oTopDict.Write( \"\\x05\", 1 );",""],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["    ASSERT_EQ(interpreter.SetTensorParametersReadWrite(1, kTfLiteString, \"\", {1},","                                                     quantized),","            kTfLiteOk);","  ASSERT_EQ(interpreter.SetTensorParametersReadWrite(2, kTfLiteInt32, \"\", {1},","                                                     quantized),","            kTfLiteOk);","  ASSERT_EQ(interpreter.SetTensorParametersReadWrite(3, kTfLiteString, \"\", {1},"],"label":0}
{"cve":"CVE-2020-11085","code_chunks":["\t\t\tszFormatName = (char*)Stream_Pointer(&sub1);","\t\t\twszFormatName = (WCHAR*)Stream_Pointer(&sub1);","\t\t\tif (!Stream_SafeSeek(&sub1, 32))","\t\t\t\tgoto error_out;","\t\t\tif (asciiNames)","\t\t\t{","\t\t\t\tif (szFormatName[0])"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void md_map_sh224(uint8_t *hash, const uint8_t *msg, int len) {","SHA224Context ctx;","","if (SHA224Reset(&ctx) != shaSuccess) {"],"label":1}
{"cve":"CVE-2022-45909","code_chunks":["        }","","                url->url_host = szHost ;","        url->url_port = szPort ;","","                int nChars = sip_name_addr_e(obuf, MAX_SIP_URI_LEN, 0, display, 1, url, params, comment) ;",""],"label":0}
{"cve":"CVE-2021-4110","code_chunks":["      if (!mrb_immediate_p(stack[i])) {","        mrb_field_write_barrier(mrb, (struct RBasic*)env, (struct RBasic*)mrb_obj_ptr(stack[i]));","      }","    }","  }","  else {","    for (int i = num; i > 0; i--, destst++) {"],"label":0}
{"cve":"CVE-2016-5356","code_chunks":["gint64 *data_offset)","{","gint64\toffset;","int\tpkt_len;","char\tline[COSINE_LINE_LENGTH];","","\/* Find the next packet *\/"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (cond_tensor->type != kTfLiteBool) {","context->ReportError(context,"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["}","for (c=0; c < 16; c+=2) {","i = len[((c & 1) << 1) | (c >> 3)];","RAW(row,col+c) = ((signed) ph1_bits(i) << (32-i) >> (32-i)) +","(dir ? RAW(row+(~c | -2),col+c) : col ? RAW(row,col+(c | -2)) : 128);","if (c == 14) c = -1;"],"label":1}
{"cve":"CVE-2019-17546","code_chunks":["\tbreak;","\t\/*","\t * Convert 16-bit colormap to 8-bit (unless it looks","\t * like an old-style 8-bit colormap).","\t *\/","\tif (checkcmap(img) == 16)","\t    cvtcmap(img);"],"label":0}
{"cve":"CVE-2022-29788","code_chunks":["for (size_t j = 0; j < e.tags_count; j++) {","MOBIIndexTag t = e.tags[j];","if (t.tagid == INDX_TAGARR_INFL_PARTS_V1) {","for (size_t k = 0; k + 1 < t.tagvalues_count; k += 2) {","uint32_t len = t.tagvalues[k];","uint32_t offset = t.tagvalues[k + 1];","char *base = mobi_get_cncx_string_flat(indx->cncx_record, offset, len);"],"label":0}
{"cve":"CVE-2019-20395","code_chunks":["                        return -1;","                    }","                }","            }","        }","        if (!rc || rc == -1) {","            \/* cleanup on success or fatal error *\/"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["GetTemporary(context, node, \/*index=*\/kZeroPoints);","zero_points->type = kTfLiteInt32;","zero_points->allocation_type = kTfLiteArenaRw;","int zero_points_dims[1] = {batch_size};"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* fft_integer_working_area =","GetTemporary(context, node, kFftIntegerWorkingAreaTensor);","TfLiteTensor* fft_double_working_area =","GetTemporary(context, node, kFftDoubleWorkingAreaTensor);","SetTensorToDynamic(fft_integer_working_area);","SetTensorToDynamic(fft_double_working_area);"],"label":1}
{"cve":"CVE-2021-3772","code_chunks":["if (!new_asoc) {","\/* FIXME: Several errors are possible.  A bad cookie should","* be silently discarded, but think about logging it too.","*\/","switch (error) {","goto nomem;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params = reinterpret_cast<TfLiteSkipGramParams*>(node->builtin_data);","","std::vector<StringRef> words;","tflite::StringRef strref = tflite::GetString(GetInput(context, node, 0), 0);","int prev_idx = 0;","for (int i = 1; i < strref.len; i++) {","if (isspace(*(strref.str + i))) {"],"label":1}
{"cve":"PYSEC-2021-245","code_chunks":["output_index_multiplier, output_size, result);","return tensorflow::Status::OK();","if (row_partition_tensor.size() - 1 > parent_output_index.size()) {","return errors::InvalidArgument(","\"Row partition size is greater than output size: \",","row_partition_tensor.size() - 1, \" > \","],"label":1}
{"cve":"CVE-2018-8794","code_chunks":["\t\t\t\t\t\tcolor = x;","\t\t\t\t\t}","\t\t\t\t\tx = last_line[indexw * 4] + color;","\t\t\t\t\t*out = x;","\t\t\t\t\tout += 4;","\t\t\t\t\tindexw++;","\t\t\t\t\tcollen--;"],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["return -EINVAL;","}","","if (!fit_check_format(fit_hdr)) {","printf(\"fsl-mc: ERR: Bad firmware image (bad FIT header)\\n\");","return -EINVAL;","}"],"label":1}
{"cve":"CVE-2018-10888","code_chunks":["if (cmd & 0x20) len |= *delta++ << 8UL;","if (cmd & 0x40) len |= *delta++ << 16UL;","if (!len)       len = 0x10000;","","if (base_len < off + len || res_sz < len)"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["type_ignore_ty o = (type_ignore_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_RETURN_NONE;","}","","switch (o->kind) {"],"label":0}
{"cve":"CVE-2020-5215","code_chunks":["RETURN_STRING_AS_STATUS(NumpyHalfConverter::Convert(obj, &state, ret));","","if (Int64Converter::Convert(obj, &state, ret) == nullptr)","return Status::OK();","break;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const auto* params =","reinterpret_cast<const TfLiteGatherParams*>(node->builtin_data);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* positions;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2019-3556","code_chunks":["transport->getParam(\"bare\").empty());","transport->sendString(translated);","break;","}","if (strncmp(cmd.c_str(), \"check\", 5) == 0 &&","handleCheckRequest(cmd, transport)) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp12_exp_cyc(fp12_t c, const fp12_t a, const bn_t b) {","int i, j, k, l, w = bn_ham(b);","","if (bn_is_zero(b)) {","return fp12_set_dig(c, 1);"],"label":1}
{"cve":"CVE-2022-0519","code_chunks":["return NULL;","}","se->file_offset = buf_offset;","se->tag = buffer[offset];","offset += 1;","if (se->tag == R_BIN_JAVA_STACKMAP_OBJECT) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","","return context->ResizeTensor(context, output,"],"label":1}
{"cve":"CVE-2021-43860","code_chunks":["if (commit_data == NULL)","return FALSE;","","resolve_op_from_commit (self, op, checksum, NULL, commit_data);","}","else","{"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["      TfLiteTensor* out_tensor;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));","      TfLiteIntArray* new_size = TfLiteIntArrayCopy(in_tensor->dims);","      return context->ResizeTensor(context, out_tensor, new_size);","    };","","    reg.invoke = [](TfLiteContext* context, TfLiteNode* node) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input1;","const TfLiteTensor* input2;","if (node->inputs->size == 2) {","input1 = GetInput(context, node, 0);","input2 = GetInput(context, node, 1);","} else {"],"label":1}
{"cve":"PYSEC-2021-216","code_chunks":["    const int64 shard_cost = params.out_width * params.out_height *","                             params.depth * params.window_rows *","                             params.window_cols;","    Shard(worker_threads.num_threads, worker_threads.workers,","          params.tensor_in_batch, shard_cost, shard);","  }",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus PopulatePrecomputedZPTimesWeightsWithBias(TfLiteContext* context,","OpData* op_data,","TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* output_state =","GetVariableInput(context, node, kOutputStateTensor);","TF_LITE_ENSURE(context, output_state != nullptr);"],"label":1}
{"cve":"CVE-2019-13218","code_chunks":["len <<= 1;","if (len == f->blocksize_0) return f->window[0];","if (len == f->blocksize_1) return f->window[1];","assert(0);","return NULL;","}",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* axis_tensor = GetInput(context, node, kAxisTensor);","int axis = GetTensorData<int32_t>(axis_tensor)[0];","const int rank = NumDimensions(input);","if (axis < 0) {"],"label":1}
{"cve":"CVE-2018-20176","code_chunks":["{","color = CVAL(in);","*out = color;","out += 4;","indexw++;","collen--;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["    case kTfLiteString: {","            TF_LITE_ENSURE_EQ(context, NumDimensions(input), 1);","    } break;","      context->ReportError(context, \"Type '%s' is not supported by gather.\",","                           TfLiteTypeGetName(input->type));","      return kTfLiteError;","  }"],"label":0}
{"cve":"CVE-2020-28196","code_chunks":["const uint8_t *rem;","size_t rlen;","if (!tag->implicit) {","ret = get_tag(asn1, len, &inner_tag, &asn1, &len, &rem, &rlen);","if (ret)","return ret;","\/* Note: we don't check rlen (it should be 0). *\/"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteIntArrayFree(node->temporaries);","node->temporaries = TfLiteIntArrayCreate(6);","node->temporaries->data[0] = op_data->scratch_tensor_index;","TfLiteTensor* input_quantized = GetTemporary(context, node, \/*index=*\/0);","input_quantized->type = input_weights->type;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty value;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["FstringParser_Init(FstringParser *state)","{","    state->last_str = NULL;","    state->fmode = 0;","    ExprList_Init(&state->expr_list);","    FstringParser_check_invariants(state);","}"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["            len = PyList_GET_SIZE(tmp);","            values = _Py_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;"],"label":0}
{"cve":"CVE-2023-28081","code_chunks":["            k = len + relativeIndex;","  }","","    if (k < 0 || k >= len) {","    return HermesValue::encodeUndefinedValue();","  }",""],"label":0}
{"cve":"CVE-2016-5350","code_chunks":["\toffset = dissect_nt_policy_hnd(","\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,","\t\tFALSE, FALSE);","","\toffset = dissect_ndr_uint32(","\t\ttvb, offset, pinfo, tree, di, drep, hf_rrpcn_changelow, &changeid);",""],"label":0}
{"cve":"CVE-2020-13396","code_chunks":["\t\tmessage->DomainName.Len = (UINT16)credentials->identity.DomainLength * 2;","\t\tmessage->DomainName.Buffer = (BYTE*)credentials->identity.Domain;","\t}","","\tmessage->UserName.Len = (UINT16)credentials->identity.UserLength * 2;","\tmessage->UserName.Buffer = (BYTE*)credentials->identity.User;","\tmessage->LmChallengeResponse.Len = (UINT16)context->LmChallengeResponse.cbBuffer;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (type == kGenericOptimized) {","optimized_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    isinstance = PyObject_IsInstance(obj, (PyObject *)Or_type);","    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {","        *out = Or;","        return 0;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteIntArray* row_sums_size = TfLiteIntArrayCreate(1);","row_sums_size->data[0] = row_sums_dims[0];","TF_LITE_ENSURE_OK(","context, context->ResizeTensor(context, row_sums, row_sums_size));","}","}"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["{","dtls_srtp_channel *ds_ch = (dtls_srtp_channel*)user_data;","dtls_srtp *ds = ds_ch->dtls_srtp;","unsigned idx = ds_ch->channel;","","PJ_UNUSED_ARG(ts);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["const bn_t m) {","ed_t t[5];","int i, u_i, offset;","int8_t jsf[2 * (RLC_FP_BITS + 1)];","size_t l;",""],"label":0}
{"cve":"CVE-2021-24025","code_chunks":["    try {","      sdata = vs.serialize(ret, true);","    } catch (...) {","      fprintf(stderr, \"Serialization failure: %s\\n\", symbol);","      return;","    }","    if (sdata.length() < 3) return;"],"label":0}
{"cve":"CVE-2023-24808","code_chunks":["","#ifdef DEBUG","PDFIO_DEBUG(\"_pdfioDictSetValue(%p): %lu pairs\\n\", (void *)dict, (unsigned long)dict->num_pairs);","PDFIO_DEBUG(\"_pdfioDictSetValue(%p): \", (void *)dict);","PDFIO_DEBUG_DICT(dict);"],"label":1}
{"cve":"CVE-2019-20392","code_chunks":["}","","rc = lys_getnext_data(lys_node_module((struct lys_node *)list), (struct lys_node *)list, keys_str, len, LYS_LEAF,","(const struct lys_node **)&list->keys[i]);","if (rc) {","LOGVAL(ctx, LYE_INRESOLV, LY_VLOG_LYS, list, \"list key\", keys_str);","return EXIT_FAILURE;"],"label":1}
{"cve":"CVE-2022-30503","code_chunks":["            for (i = 0; i < length; i++) {","                ret = njs_value_to_number(vm, &array->start[i], &num);","                if (ret == NJS_OK) {","                    njs_typed_array_prop_set(vm, self, offset + i, num);","                }","            }",""],"label":0}
{"cve":"CVE-2019-20628","code_chunks":["}","","static void gf_m2ts_process_cat(GF_M2TS_Demuxer *ts, GF_M2TS_SECTION_ES *ses, GF_List *sections, u8 table_id, u16 ex_table_id, u8 version_number, u8 last_section_number, u32 status)","{","u32 evt_type;","\/*"],"label":1}
{"cve":"CVE-2019-17541","code_chunks":["              Convert DirectClass packets to contiguous CMYK scanlines.","            *\/","            *q++=(JSAMPLE) (ScaleQuantumToShort(QuantumRange-GetPixelRed(","              image,p))\/scale);","            *q++=(JSAMPLE) (ScaleQuantumToShort(QuantumRange-GetPixelGreen(","              image,p))\/scale);","            *q++=(JSAMPLE) (ScaleQuantumToShort(QuantumRange-GetPixelBlue("],"label":0}
{"cve":"CVE-2019-13308","code_chunks":["          }","#if defined(MAGICKCORE_OPENMP_SUPPORT)","          #pragma omp section","#endif","          {","            MagickBooleanType","              thread_status;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["    node->temporaries = TfLiteIntArrayCreate(2);","    for (int i = 0; i < 2; ++i) {","      node->temporaries->data[i] = *(first_new_tensor) + i;","    }","","    auto setup_temporary = [&](int id) {","      TfLiteTensor* tmp = &context->tensors[id];"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","  const TfLiteTensor* input_to_input_weights =","      GetOptionalInputTensor(context, node, kInputToInputWeightsTensor);","  const TfLiteTensor* input_to_forget_weights;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputToForgetWeightsTensor,","                                 &input_to_forget_weights));"],"label":0}
{"cve":"CVE-2022-41861","code_chunks":["int count;","","i = snprintf(p, outlen, \" %u \", (unsigned int) ntohs(filter->u.generic.offset));","p += i;","","\/* show the mask *\/"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["    isinstance = PyObject_IsInstance(obj, (PyObject*)AugAssign_type);","    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {","        expr_ty target;","        operator_ty op;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (TYPE(ch) == argument) {","if (NCH(ch) == 1)","nargs++;","else if (TYPE(CHILD(ch, 1)) == comp_for)"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  const TfLiteTensor* top_k;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTopK, &top_k));","    TF_LITE_ENSURE_TYPES_EQ(context, top_k->type, kTfLiteInt32);","    TF_LITE_ENSURE_EQ(context, NumElements(top_k), 1);","  const int32 k = *GetTensorData<int32_t>(top_k);","","  const TfLiteTensor* input;"],"label":0}
{"cve":"CVE-2021-23177","code_chunks":["ret = set_acl(a, fd, name, abstract_acl,","ARCHIVE_ENTRY_ACL_TYPE_DEFAULT, \"default\");","","\/* Simultaneous POSIX.1e and NFSv4 is not supported *\/","return (ret);","}"],"label":1}
{"cve":"CVE-2018-8791","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["RLC_BN_BITS), 1);","","BENCH_RUN(\"cp_bdpe_enc\") {","out_len = RLC_BN_BITS \/ 8 + 1;","rand_bytes(out, 1);","in = out[0] % bn_get_prime(47);"],"label":1}
{"cve":"CVE-2022-21722","code_chunks":["pjmedia_rtcp_common *hdr = (pjmedia_rtcp_common*) buf;","","PJ_ASSERT_RETURN(buf, PJ_EINVAL);","PJ_ASSERT_RETURN(length >= 12, PJ_ETOOSMALL);","","\/* PLI uses pt==RTCP_PSFB and FMT==1 *\/","if (hdr->pt != RTCP_PSFB || hdr->count != 1)"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["for (i = 0; i < w; i++) {","fp24_null(u[i]);","fp24_new(u[i]);","}"],"label":1}
{"cve":"CVE-2021-3770","code_chunks":["(*array)[0] = valcount;","","t = 1;","for (cp = var; *cp != NUL;)","{","(*array)[t++] = atoi((char *)cp);"],"label":1}
{"cve":"PYSEC-2021-612","code_chunks":["errors::InvalidArgument(","\"Requires start >= limit when delta < 0: \", start, \"\/\", limit));","}","int64_t size = (std::is_integral<T>::value","? ((std::abs(limit - start) + std::abs(delta) - 1) \/","std::abs(delta))"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TF_LITE_ENSURE(context, NumDimensions(input) >= 2);","  if (input->type != kTfLiteFloat32) {","    context->ReportError(context,","                         \"Type '%s' for input is not supported by rfft2d.\",","                         TfLiteTypeGetName(input->type));"],"label":0}
{"cve":"CVE-2019-19481","code_chunks":["\tpriv->cache_buf = NULL;","\tpriv->cache_buf_len = 0;","","\tr = cac_cac1_get_certificate(card, &val, &val_len);","\tif (r < 0)","\t\tgoto done;","\tif (val_len < 1) {"],"label":0}
{"cve":"CVE-2022-1795","code_chunks":["codec->scenegraph->global_qp = node;","","\/*register TWICE: once for the command, and for the scenegraph globalQP*\/","node->sgprivate->num_instances = 2;","","com = gf_sg_command_new(codec->current_graph, GF_SG_GLOBAL_QUANTIZER);","inf = gf_sg_command_field_new(com);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["lstm::full::kOutputLayerNormCoefficientsTensor)",": nullptr;","","TfLiteTensor* output = GetOutput(context, node, lstm::full::kOutputTensor);","","TfLiteLSTMParams lstm_params;","lstm_params.activation = params->activation;"],"label":1}
{"cve":"CVE-2016-4563","code_chunks":["","weight=ParseCommandOption(MagickWeightOptions,MagickFalse,option);","if (weight == -1)","weight=StringToUnsignedLong(option);","draw_info->weight=(size_t) weight;","}","exception=DestroyExceptionInfo(exception);"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["todo[i]   = isix++;","todo[i+1] = buffer >> (14-i)*5;","}","for (i=0; i < 16; i+=2)"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        }","        else {","            int res;","            res = obj2ast_expr(tmp, &elt, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }"],"label":0}
{"cve":"CVE-2022-21725","code_chunks":["bool found_unknown_shapes = false;","const auto& op_info = op_context.op_info;","TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,","OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,","&found_unknown_shapes));",""],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["","CALLOC_ARRAY(res, 1);","while (fgets(buf, sizeof(buf), fp)) {","char *bufp = buf;","if (!lineno)","skip_utf8_bom(&bufp, strlen(bufp));"],"label":1}
{"cve":"CVE-2018-20761","code_chunks":["fprintf(stderr, \"Hit 'h' for help\\n\\n\");","str = gf_cfg_get_key(cfg_file, \"General\", \"StartupFile\");","if (str) {","strcpy(the_url, \"MP4Client \"GPAC_FULL_VERSION);","gf_term_connect(term, str);","startup_file = 1;","is_connected = 1;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    return kTfLiteError;","  }","","      output->type = kTfLiteInt64;","","      if (!IsConstantTensor(cond_tensor)) {","    SetTensorToDynamic(output);"],"label":0}
{"cve":"CVE-2023-34475","code_chunks":["    bytes_per_line;","","  ssize_t","    count,","    y;","","  unsigned char"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","bool requires_broadcast = !HaveSameShapes(input1, input2);","switch (input1->type) {","Comparison<bool, reference_ops::EqualFn>(input1, input2, output,"],"label":1}
{"cve":"CVE-2022-24786","code_chunks":["pj_uint8_t *p;","pj_uint8_t padlen;","pj_size_t rpsi_len;","","PJ_ASSERT_RETURN(buf && rpsi, PJ_EINVAL);","PJ_ASSERT_RETURN(length >= sizeof(pjmedia_rtcp_fb_common), PJ_ETOOSMALL);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["int res;","res = obj2ast_expr(tmp, &optional_vars, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}"],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["\tload_raw = &CLASS pentax_load_raw;\t\t\tbreak;","\tswitch (tiff_ifd[raw].phint) {","\t  case 2: load_raw = &CLASS kodak_rgb_load_raw;   filters = 0;  break;","\t  case 6: load_raw = &CLASS kodak_ycbcr_load_raw; filters = 0;  break;","\t  case 32803: load_raw = &CLASS kodak_65000_load_raw;","\t}","      case 32867: case 34892: break;"],"label":0}
{"cve":"CVE-2021-42782","code_chunks":["\t} else {","\t\tif (sc_select_file(card, &pin_info.path, &f) != SC_SUCCESS","\t\t\t   \t|| !f->prop_attr || f->prop_attr_len < 4){","\t\t\tsc_log(ctx, \"Select(%s) failed\\n\", path);","\t\t\tsc_file_free(f);","\t\t\treturn 1;","\t\t}"],"label":0}
{"cve":"CVE-2021-32440","code_chunks":["","j=0;","while ((ref = (GF_ES_ID_Ref*)gf_list_enum(isom_od->ES_ID_RefDescriptors, &j))) {","if (!mpod->trackIDs || gf_isom_get_track_from_id(mdia->mediaTrack->moov, mpod->trackIDs[ref->trackRef - 1]) == NULL) continue;","e = GetESDForTime(mdia->mediaTrack->moov, mpod->trackIDs[ref->trackRef - 1], sample->DTS, &esd);","if (!e) e = gf_odf_desc_add_desc((GF_Descriptor *) od, (GF_Descriptor *) esd);","if (e) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, SizeOfDimension(indices, 0),","SizeOfDimension(weights, 0));","","const TfLiteTensor* value = GetInput(context, node, 4);"],"label":1}
{"cve":"CVE-2019-14857","code_chunks":["apr_uri_unparse(r->pool, &uri, 0), c_host);","oidc_error(r, \"%s: %s\", *err_str, *err_desc);","return FALSE;","} else if (strstr(url, \"\/\") != url) {","*err_str = apr_pstrdup(r->pool, \"Malformed URL\");","*err_desc =","apr_psprintf(r->pool,"],"label":1}
{"cve":"CVE-2016-2324","code_chunks":["{","struct bitmap *base = data;","int bitmap_pos;","","bitmap_pos = bitmap_position(object->oid.hash);",""],"label":0}
{"cve":"CVE-2023-25667","code_chunks":["    return nullptr;","  }","  if (gif_file->ImageCount <= 0) {","    *error_string = \"gif file does not contain any image\";","    return nullptr;","  }",""],"label":0}
{"cve":"CVE-2021-41136","code_chunks":["goto st20;","if ( ++p == pe )","goto _test_eof20;","#line 488 \"ext\/puma_http11\/http11_parser.c\"","switch( (*p) ) {","case 32: goto tr31;","case 60: goto st0;"],"label":1}
{"cve":"CVE-2018-15473","code_chunks":["authctxt->server_caused_failure = 1;","return (0);","}","","if (GSS_ERROR(PRIVSEP(ssh_gssapi_server_ctx(&ctxt, &goid)))) {","if (ctxt != NULL)"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\tstart = Stream_GetPosition(s);","\twhile (numberCapabilities > 0 && Stream_GetRemainingLength(s) >= 4)","\t{","\t\tsize_t rest;","\t\tUINT16 type;","\t\tUINT16 length;","\t\twStream sub;"],"label":0}
{"cve":"CVE-2021-3889","code_chunks":["\/* read 32 mincode-maxcode pairs from data2 big-endian *\/","huffcdic->mincode_table[0] = 0;","huffcdic->maxcode_table[0] = 0xFFFFFFFF;","for (int i = 1; i < 33; i++) {","const uint32_t mincode = mobi_buffer_get32(buf);","const uint32_t maxcode = mobi_buffer_get32(buf);","huffcdic->mincode_table[i] =  mincode << (32 - i);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\treturn;","\t}","","\tRLC_TRY {","\t\tfor (int i = 0; i < (1 << (EP_WIDTH - 1)); i ++) {","\t\t\tep2_null(t[i]);","\t\t\tep2_new(t[i]);"],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["return err;","}","","if (s->chunksize >= 0) {","if (!s->chunksize) {","char line[32];",""],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["        ifs = _Ta3_asdl_seq_new(len, arena);","        if (ifs == NULL) goto failed;","        for (i = 0; i < len; i++) {","            expr_ty val;","            res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","            if (res != 0) goto failed;","            if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["          op_params, scaling_factors_ptr, GetTensorShape(input),","          quantized_input_ptr_batch, GetTensorShape(filter),","          GetTensorData<int8_t>(filter), GetTensorShape(bias),","          GetTensorData<float>(bias), GetTensorShape(accum_scratch),","          GetTensorData<int32_t>(accum_scratch), GetTensorShape(output),","          GetTensorData<float>(output), GetTensorShape(im2col),","          GetTensorData<int8_t>(im2col),"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep2_read_bin(ep2_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"CVE-2018-12249","code_chunks":["mrb_class_real(struct RClass* cl)","{","if (cl == 0)","return NULL;","while ((cl->tt == MRB_TT_SCLASS) || (cl->tt == MRB_TT_ICLASS)) {","cl = cl->super;","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");"],"label":1}
{"cve":"CVE-2022-0393","code_chunks":["delete_buff_tail(buffheader_T *buf, int slen)","{","int len = (int)STRLEN(buf->bh_curr->b_str);","","if (len >= slen)","{"],"label":1}
{"cve":"CVE-2022-36019","code_chunks":["void Compute(OpKernelContext* context) override {","const Tensor& input = context->input(0);","const Tensor& bias = context->input(1);","const float input_min = context->input(2).flat<float>()(0);","const float input_max = context->input(3).flat<float>()(0);","const float bias_min = context->input(4).flat<float>()(0);"],"label":1}
{"cve":"CVE-2023-28428","code_chunks":["if (st->filter == PDFIO_FILTER_NONE)","{","if (bytes > st->remaining)","rbytes = _pdfioFileRead(st->pdf, buffer, st->remaining);","else","rbytes = _pdfioFileRead(st->pdf, buffer, bytes);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["GetOptionalInputTensor(context, node, kFwInputToInputWeightsTensor);","const TfLiteTensor* fw_input_to_forget_weights;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFwInputToForgetWeightsTensor,","&fw_input_to_forget_weights));","const TfLiteTensor* fw_input_to_cell_weights;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["} else {","PyObject* buf = tok->decoding_buffer;","if (buf == NULL) {","buf = _PyObject_CallNoArg(tok->decoding_readline);","if (buf == NULL) {","error_ret(tok);","return 1;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["goto error;","asdl_seq_SET(kwonlyargs, j++, arg);","i += 1; \/* the name *\/","if (i < NCH(n) && TYPE(CHILD(n, i)) == COMMA)","i += 1; \/* the comma, if present *\/","break;","\/* arg will be equal to the last argument processed *\/"],"label":1}
{"cve":"CVE-2019-13301","code_chunks":["  if (GetUTFCode(p) == 0)","    p=draw_info->text;","  else","    {","      utf8=ConvertLatin1ToUTF8((unsigned char *) draw_info->text);","      if (utf8 != (unsigned char *) NULL)","        p=(char *) utf8;"],"label":0}
{"cve":"CVE-2022-35993","code_chunks":["    const auto output_index = std::inner_product(","        group_key.begin(), group_key.end(), output_strides.begin(), 0LL);","    out(output_index) = group_set.size();","  }","}","","#define _SET_SIZE_REGISTER_KERNEL_BUILDER(T)                     \\"],"label":0}
{"cve":"CVE-2016-5357","code_chunks":["\/* If there was more hex-data than was announced in the len=x","* header, then then there must be an error in the file","*\/","if(offset > pkt_len) {","*err = WTAP_ERR_BAD_FILE;","*err_info = g_strdup(\"netscreen: too much hex-data\");","return FALSE;"],"label":1}
{"cve":"CVE-2021-3997","code_chunks":["","(void) fd_get_path(fd, &path);","return log_error_errno(SYNTHETIC_ERRNO(EPERM),","\"Attempted to remove disk file system under \\\"%s\\\", and we can't allow that.\",","strna(path));","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp9_read_bin(fp9_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"CVE-2022-1115","code_chunks":["number_pixels=(MagickSizeType) columns*rows;","if (HeapOverflowSanityCheck(rows,sizeof(*tile_pixels)) != MagickFalse)","ThrowTIFFException(ResourceLimitError,\"MemoryAllocationFailed\");","extent=MagickMax(rows*TIFFTileRowSize(tiff),TIFFTileSize(tiff));","#if defined(TIFF_VERSION_BIG)","extent+=image->columns*sizeof(uint64);","#else"],"label":1}
{"cve":"CVE-2021-29523","code_chunks":["&input_st));","","auto input_shape_t = input_shape->vec<int64>();","const int64 N = input_shape_t(0);","","Tensor sparse_handles(DT_INT64, TensorShape({N}));"],"label":1}
{"cve":"CVE-2022-1714","code_chunks":["const size_t rsize = bin->ehdr.e_phoff + i * sizeof (Elf_(Phdr));","int len = r_buf_read_at (bin->b, rsize, phdr, sizeof (Elf_(Phdr)));","if (len < 1) {","R_LOG_ERROR (\"read (phdr)\");","R_FREE (bin->phdr);","return false;","}"],"label":1}
{"cve":"CVE-2023-23946","code_chunks":["junk_git_dir_flags |= REMOVE_DIR_KEEP_TOPLEVEL;","junk_git_dir = git_dir;","}","if (safe_create_leading_directories_const(git_dir) < 0)","die(_(\"could not create leading directories of '%s'\"), git_dir);",""],"label":1}
{"cve":"CVE-2022-23606","code_chunks":["sotwOrDelta() == Grpc::SotwOrDelta::Sotw ||","sotwOrDelta() == Grpc::SotwOrDelta::UnifiedSotw","? \"GRPC\"",": \"DELTA_GRPC\")) {","if (sotwOrDelta() == Grpc::SotwOrDelta::UnifiedSotw ||","sotwOrDelta() == Grpc::SotwOrDelta::UnifiedDelta) {","config_helper_.addRuntimeOverride(\"envoy.reloadable_features.unified_mux\", \"true\");"],"label":1}
{"cve":"PYSEC-2022-67","code_chunks":["  size_t alloc_size = TfLiteIntArrayGetSizeInBytes(size);","  if (alloc_size <= 0) return NULL;","  TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);","  if (!ret) return ret;","  ret->size = size;","  return ret;","}"],"label":0}
{"cve":"CVE-2019-13225","code_chunks":["int len;","int tlen;","","if (node->type == BAG_OPTION)","return compile_length_option_node(node, reg);",""],"label":0}
{"cve":"CVE-2023-46853","code_chunks":["pr->t.meta.flags = 0;         return 0;","}","const char *cur = pr->request + pr->tokens[token];","const char *end = pr->request + pr->reqlen - 2;","","int state = 0;","while (cur != end) {"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["\t *\/","\twhile ((*stack)->origin) {","\t\tint namelen = (*stack)->originlen;","\t\tstruct attr_stack *elem;","","\t\telem = *stack;","\t\tif (namelen <= dirlen &&"],"label":0}
{"cve":"CVE-2023-1801","code_chunks":["\t\t\t\tUINTOUT();","\t\t\t\tND_PRINT(\" type\");","\t\t\t\tUINTOUT();","\t\t\t\tND_PRINT(\" parentid\");","\t\t\t\tUINTOUT();","\t\t\t\tND_PRINT(\" clone\");","\t\t\t\tUINTOUT();"],"label":0}
{"cve":"CVE-2018-8798","code_chunks":["","\tmcs_parse_domain_params(s);","","\tber_parse_header(s, BER_TAG_OCTET_STRING, &length);","","\tsec_process_mcs_data(s);","\t\/*"],"label":0}
{"cve":"CVE-2019-13220","code_chunks":["static void decode_residue(vorb *f, float *residue_buffers[], int ch, int n, int rn, uint8 *do_not_decode)","{","   int i,j,pass;","   Residue *r = f->residue_config + rn;","   int rtype = f->residue_types[rn];","   int c = r->classbook;","   int classwords = f->codebooks[c].dimensions;"],"label":0}
{"cve":"PYSEC-2021-396","code_chunks":["  VLOG(1) << \"Reading meta data from file \" << fname << \"...\";","  Table* table;","  Status s = open_function_(fname, &table);","  if (!s.ok()) {","    status_ = errors::DataLoss(\"Unable to open table file \", fname, \": \",","                               s.ToString());","    return;"],"label":0}
{"cve":"CVE-2019-19333","code_chunks":["goto error;","}","","make_canonical(ctx, LY_TYPE_UINT32, value_, &unum, NULL);","","if (store) {","\/* store the result *\/"],"label":1}
{"cve":"CVE-2021-30014","code_chunks":["","if (!pps->status) pps->status = 1;","pps->sps_id = gf_bs_read_ue_log(bs, \"sps_id\");","if (pps->sps_id >= 32) {","pps->sps_id = 0;","return -1;","}"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["\/* Push non-terminal *\/","int nt = (x >> 8) + NT_OFFSET;","int arrow = x & ((1<<7)-1);","dfa *d1 = PyGrammar_FindDFA(","ps->p_grammar, nt);","if ((err = push(&ps->p_stack, nt, d1,","arrow, lineno, col_offset,"],"label":1}
{"cve":"CVE-2022-24754","code_chunks":["PJ_DEF(void) pjsip_auth_create_digest( pj_str_t *result,","const pj_str_t *nonce,","const pj_str_t *nc,","const pj_str_t *cnonce,","const pj_str_t *qop,"],"label":1}
{"cve":"CVE-2018-20847","code_chunks":["","\/* 4 borders of the tile rescale on the image if necessary *\/","l_tile->x0 = opj_int_max((OPJ_INT32)(l_cp->tx0 + p * l_cp->tdx), (OPJ_INT32)l_image->x0);","l_tile->y0 = opj_int_max((OPJ_INT32)(l_cp->ty0 + q * l_cp->tdy), (OPJ_INT32)l_image->y0);","l_tile->x1 = opj_int_min((OPJ_INT32)(l_cp->tx0 + (p + 1) * l_cp->tdx), (OPJ_INT32)l_image->x1);","l_tile->y1 = opj_int_min((OPJ_INT32)(l_cp->ty0 + (q + 1) * l_cp->tdy), (OPJ_INT32)l_image->y1);"],"label":1}
{"cve":"CVE-2021-21323","code_chunks":["scoped_refptr<base::SequencedTaskRunner> task_runner =","g_brave_browser_process->ad_block_service()->GetTaskRunner();","","new AdblockCnameResolveHostClient(std::move(next_callback), task_runner, ctx);","}","","int OnBeforeURLRequest_AdBlockTPPreWork(const ResponseCallback& next_callback,"],"label":1}
{"cve":"PYSEC-2021-748","code_chunks":["int64 total_size = 0;","for (auto& component : element) {","if (DataTypeCanUseMemcpy(component.dtype())) {","total_size += DMAHelper::buffer(&component)->size();","} else {","non_memcpy_components.emplace_back();","component.AsProtoTensorContent(&non_memcpy_components.back());"],"label":1}
{"cve":"CVE-2016-6906","code_chunks":["size = read_test_file(&buffer, basename);","im = gdImageCreateFromTgaPtr(size, (void *) buffer);","gdTestAssert(im == NULL);","free(buffer);","}"],"label":0}
{"cve":"CVE-2019-13296","code_chunks":["          (void) CLIListOperatorImages(cli_wand,\"-evaluate-sequence\",\"Mean\",","            NULL);","          break;","        }","      CLIWandExceptionBreak(OptionError,\"UnrecognizedOption\",option);","    }","    {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  const TfLiteTensor* size;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSizeTensor, &size));","","  if (IsDynamicTensor(output)) {","    TF_LITE_ENSURE_OK(context,","                      ResizeOutputTensor(context, input, size, output));","  }"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;"],"label":0}
{"cve":"CVE-2020-1918","code_chunks":["}","","if (piv.size() < iv_required_len) {","raise_warning(\"IV passed is only %d bytes long, cipher \"","\"expects an IV of precisely %d bytes, padding with \\\\0\",","piv.size(), iv_required_len);","memcpy(iv_new, piv.data(), piv.size());"],"label":1}
{"cve":"CVE-2021-32686","code_chunks":["    \t\t\t\t     &ssock->param);","}","","","\/**"," * Same as #pj_ssl_sock_start_accept(), but application provides parameter"," * for new accepted secure sockets."],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["}","","\/*"," * Prompts the user for a password using the conversation function."," * Returns the plaintext password or NULL."," * The user is responsible for freeing the returned value."," *\/"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");"],"label":1}
{"cve":"CVE-2023-6915","code_chunks":["\t\treturn;","","\txas_lock_irqsave(&xas, flags);","\tbitmap = xas_load(&xas);","","\tif (xa_is_value(bitmap)) {","\t\tunsigned long v = xa_to_value(bitmap);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* shape = GetInput(context, node, kShape);","","switch (updates->type) {","break;"],"label":1}
{"cve":"CVE-2023-23946","code_chunks":["strbuf_init(&iter->base.path, PATH_MAX);","strbuf_addstr(&iter->base.path, path);","","ALLOC_GROW(iter->levels, 10, iter->levels_alloc);","iter->levels_nr = 0;","iter->flags = flags;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2020-9432","code_chunks":["{","X509 * cert = CHECK_OBJECT(1, X509, \"openssl.x509\");","size_t sz;","const char *ip = luaL_checklstring(L, 2, &sz);","int flags = luaL_optint(L, 3, 0);","int ret = X509_check_ip(cert, (const unsigned char*)ip, sz, flags);"],"label":0}
{"cve":"CVE-2016-3134","code_chunks":["{","static const struct arpt_arp uncond;","","return memcmp(arp, &uncond, sizeof(uncond)) == 0;","}",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params =","reinterpret_cast<TfLiteAudioSpectrogramParams*>(node->user_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2023-23145","code_chunks":["\t\t\t*type=SVG_PATHCOMMAND_M;","\t\t\tbreak;","\t\t\t*type=SVG_PATHCOMMAND_Q;","\t\t\tbreak;","\t\t\t*type=SVG_PATHCOMMAND_C;","\t\t\tbreak;","\t\t\t*type=SVG_PATHCOMMAND_S;"],"label":0}
{"cve":"CVE-2021-21375","code_chunks":["","\/* If the preanswer define zero port, this media is being rejected,","* just clone the preanswer.","*\/","if (preanswer->desc.port == 0) {","answer = pjmedia_sdp_media_clone(pool, preanswer);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","BYTE cacheVersion;","BYTE pad1;","UINT16 pad2;","WLog_INFO(TAG, \"BitmapCacheHostSupportCapabilitySet (length %\" PRIuz \"):\",","Stream_GetRemainingLength(s));"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["","if (!__test_bit(CONFIG_TEST_BIT, &debug)) {","\/* Write the value to the file *\/","if ((tf = fopen(tfile->file_path, \"w\"))) {","fprintf(tf, \"%d\\n\", track_file_init_value);","fclose(tf);","}"],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["#endif","#if defined(CONFIG_FIT)","fit_hdr = buf;","if (!fit_check_format (fit_hdr)) {","puts (\"Bad FIT image format\\n\");","return 1;","}"],"label":1}
{"cve":"CVE-2019-13133","code_chunks":["image->colors=2;","else","if (viff_info.data_storage_type == VFF_MAPTYP_1_BYTE)","image->colors=256UL;","else","image->colors=image->depth <= 8 ? 256UL : 65536UL;"],"label":1}
{"cve":"CVE-2018-5809","code_chunks":["if(len<1) return;   string[len-1]=0;","if(len<3) return;   len = strnlen(string,len-1);","for(int i=len-1; i>=0; i--)","{","if(isspace(string[i]))","string[i]=0;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["mod_ty o = (mod_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"CVE-2019-10672","code_chunks":["x = i % elements + start[0];","if (x < sx) {","j = x * size + b;","((char*)data->data)[j] = output[i];","}","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params = reinterpret_cast<TfLiteMfccParams*>(node->user_data);","","const TfLiteTensor* input_wav;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorWav, &input_wav));","const TfLiteTensor* input_rate;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fb_rand(fb_t a) {","int bits, digits;","","rand_bytes((uint8_t *)a, RLC_FB_DIGS * sizeof(dig_t));",""],"label":1}
{"cve":"CVE-2020-7042","code_chunks":["\tif (!tunnel->config->insecure_ssl) {","\t\tlong sslctxopt = SSL_OP_NO_SSLv3 | SSL_OP_NO_COMPRESSION;","\t\tlong checkopt;","","\t\tcheckopt = SSL_CTX_set_options(tunnel->ssl_context, sslctxopt);","\t\tif ((checkopt & sslctxopt) != sslctxopt) {","\t\t\tlog_error(\"SSL_CTX_set_options didn't set opt: %s\\n\","],"label":0}
{"cve":"CVE-2019-15903","code_chunks":["  if (result)","    return result;","  if (! isCdata && poolLength(pool) && poolLastChar(pool) == 0x20)","    poolChop(pool);","  if (! poolAppendChar(pool, XML_T('\\0')))","    return XML_ERROR_NO_MEMORY;","  return XML_ERROR_NONE;"],"label":0}
{"cve":"CVE-2020-11087","code_chunks":["return SEC_E_INVALID_TOKEN;","}","","if (message->MessageType != MESSAGE_TYPE_AUTHENTICATE)","{","Stream_Free(s, FALSE);"],"label":1}
{"cve":"CVE-2018-12559","code_chunks":["void RemoteDevicePropertiesWidget::update(const RemoteFsDevice::Details &d, bool create, bool isConnected)","{","int t=d.isLocalFile() ? Type_File : Type_SshFs;","setEnabled(d.isLocalFile() || !isConnected);","infoLabel->setVisible(create);","orig=d;"],"label":0}
{"cve":"CVE-2018-14464","code_chunks":["EXTRACT_8BITS(obj_tptr))));","ND_PRINT((ndo, \"\\n\\t    Local Interface ID: %s (0x%08x)\"","\"\\n\\t    Remote Interface ID: %s (0x%08x)\",","ip6addr_string(ndo, obj_tptr+4),","EXTRACT_32BITS(obj_tptr+4),","ip6addr_string(ndo, obj_tptr+20),"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);"],"label":1}
{"cve":"CVE-2018-16229","code_chunks":["} else","optlen = 1;","","if (hlen < optlen) {","if (*option >= 128)","ND_PRINT((ndo, \"CCID option %u optlen goes past header length\","],"label":0}
{"cve":"CVE-2020-11096","code_chunks":["if (fieldFlags & ORDER_FIELD_01)","{","if (Stream_GetRemainingLength(s) < 1)","return FALSE;","","Stream_Read_UINT8(s, brush->x);","}"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);","if (*out == NULL) goto failed;","return 0;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["}","","const TfLiteTensor* input_to_forget_weights;","TF_LITE_ENSURE_OK(","context,","GetInputSafe(context, node, lstm::full::kInputToForgetWeightsTensor,","&input_to_forget_weights));"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty value;"],"label":1}
{"cve":"CVE-2023-1289","code_chunks":["","          Quantum","            *q;","","          q=GetCacheViewAuthenticPixels(image_view,x,y,1,1,exception);","          if (q == (Quantum *) NULL)","            break;"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["int barrierType() const { return m_pGroupClient->isChecked() ? barrierClient : barrierServer; }"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["        padding->name);","    return false;","  }","","  if (!(padding_data[6] == 0 && padding_data[7] == 0)) {","    TF_LITE_KERNEL_LOG(","        context, \"%s: Padding for channel dimension is not supported in PAD.\","],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static void ed_mul_reg_imp(ed_t r, const ed_t p, const bn_t k) {","bn_t _k;","int i, j, l, n;","int8_t s, reg[RLC_CEIL(RLC_FP_BITS + 1, ED_WIDTH - 1)];","ed_t t[1 << (ED_WIDTH - 2)], u, v;",""],"label":1}
{"cve":"CVE-2021-3744","code_chunks":["ret = ccp_copy_from_sb(cmd_q, &ctx, op.jobid, op.sb_ctx,","CCP_PASSTHRU_BYTESWAP_256BIT);","if (ret) {","cmd->engine_error = cmd_q->cmd_error;","goto e_dst;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","    TF_LITE_ENSURE_EQ(context, NumDimensions(input), 1);","  TfLiteIntArray* output_index_shape = TfLiteIntArrayCopy(input->dims);","      SetTensorToDynamic(output_unique_tensor);","  return context->ResizeTensor(context, output_index_tensor,","                               output_index_shape);","}"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* lookup;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));","const TfLiteTensor* value;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &value));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));"],"label":0}
{"cve":"CVE-2020-1921","code_chunks":["if (mme.second.m_return_value != fr) all_same = false;","count += mme.second.m_count;","auto ser_len = mme.second.m_return_value.length();","min_ser_len = std::min(min_ser_len, ser_len);","max_ser_len = std::max(max_ser_len, ser_len);","if (mme.second.m_count > 1) any_multiple = true;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT16 soundFlags;","","if (Stream_GetRemainingLength(s) < 4)","return FALSE;",""],"label":0}
{"cve":"CVE-2019-12904","code_chunks":["  ctr[0] += add;","  if (ctr[0] >= add)","    return;","  ++ctr[1];","}","",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["return kTfLiteError;","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","output->type = updates->type;","","if (IsConstantTensor(shape)) {"],"label":1}
{"cve":"CVE-2018-14017","code_chunks":["offset += 4;","attr->info.code_attr.code_offset = buf_offset + offset;","attr->info.code_attr.code = (ut8 *) malloc (attr->info.code_attr.code_length);","if (attr->info.code_attr.code == NULL) {","eprintf (\"Handling Code Attributes: Unable to allocate memory \"","\"(%u bytes) for a code.\\n\", attr->info.code_attr.code_length);","return attr;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["      return kTfLiteError;","  }","","        SetTensorToPersistentRo(output);","","      TfLiteIntArray* output_size = TfLiteIntArrayCreate(1);","  output_size->data[0] = NumDimensions(input);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["          [](TfLiteContext* context, TfLiteNode* node) {","            TfLiteTensor* output;","            TF_LITE_ENSURE_OK(context,","                              tflite::GetOutputSafe(context, node, 0, &output));","            std::fill(output->data.f,","                      output->data.f + tflite::NumElements(output), 7.0f);","            return kTfLiteOk;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {","        asdl_seq* names;","","        if (lookup_attr_id(obj, &PyId_names, &tmp) < 0) {"],"label":0}
{"cve":"PYSEC-2022-122","code_chunks":["size_t TfLiteIntArrayGetSizeInBytes(int size) {","static TfLiteIntArray dummy;","","size_t computed_size = sizeof(dummy) + sizeof(dummy.data[0]) * size;","#if defined(_MSC_VER)","computed_size -= sizeof(dummy.data[0]);","#endif"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* hits = GetOutput(context, node, 1);","TF_LITE_ENSURE_EQ(context, hits->type, kTfLiteUInt8);","TfLiteIntArray* hitSize = TfLiteIntArrayCreate(1);","hitSize->data[0] = SizeOfDimension(lookup, 0);","","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["        translated.data(), folly::errnoStr(errno).c_str()","      );","      return false;","    }","    fclose(f);","  }",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);"],"label":0}
{"cve":"CVE-2021-29536","code_chunks":["                    \"input_max must be a scalar or a vector of 1 element\"));","    const float input_max_float = input_max_float_tensor.flat<float>()(0);","","    Tensor* output_min = nullptr;","    OP_REQUIRES_OK(ctx, ctx->allocate_output(1, TensorShape({}), &output_min));","    output_min->flat<float>()(0) = input_min_float;",""],"label":0}
{"cve":"CVE-2021-42781","code_chunks":["","\/* Flags *\/","offs = 2;","if (offs > info_len) {","free(info_blob);","LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, \"Failed to add public key: no 'tag'\");","}"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["int i;","","for (i = a->num_attr - 1; rem > 0 && i >= 0; i--) {","const struct git_attr *attr = a->state[i].attr;","const char **n = &(all_attrs[attr->attr_nr].value);","const char *v = a->state[i].setto;"],"label":1}
{"cve":"CVE-2019-12904","code_chunks":["  int KC;","#if defined(USE_AESNI) || defined(USE_PADLOCK) || defined(USE_SSSE3) \\","    || defined(USE_ARM_CE)","  unsigned int hwfeatures;","#endif","","  (void)hd;"],"label":0}
{"cve":"CVE-2024-0727","code_chunks":["const PKCS7_CTX *ctx = ossl_pkcs7_get0_ctx(p7);","","if (ctype_nid == NID_pkcs7_signed) {","if (p7->d.sign == NULL)","return 0;","mdalgs = p7->d.sign->md_algs;"],"label":0}
{"cve":"CVE-2018-16435","code_chunks":["                            }","","                    }","","","        }",""],"label":0}
{"cve":"CVE-2019-1010208","code_chunks":["{","LONG tmp = VERSION_NUM;","memcpy (Irp->AssociatedIrp.SystemBuffer, &tmp, 4);","Irp->IoStatus.Information = sizeof (LONG);","Irp->IoStatus.Status = STATUS_SUCCESS;","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2018-20179","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":[],"label":1}
{"cve":"CVE-2019-10131","code_chunks":["return -1;","}","\/* make a buffer to hold the data and snag it from the input stream *\/","str=(unsigned char *) AcquireQuantumMemory((size_t) count,sizeof(*str));","if (str == (unsigned char *) NULL)","{","PString=(unsigned char *) RelinquishMagickMemory(PString);"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["  } else if (!strcmp(model,\"C603\") || !strcmp(model,\"C330\")","\t|| !strcmp(model,\"12MP\")) {","    order = 0x4949;","    if (filters && data_offset) {","      fseek (ifp, data_offset < 4096 ? 168 : 5252, SEEK_SET);","      read_shorts (curve, 256);","    } else gamma_curve (0, 3.875, 1, 255);"],"label":0}
{"cve":"PYSEC-2019-137","code_chunks":["return inst, sock, map","","def test_ctor(self):","inst, _, map = self._makeOneWithMap()","self.assertEqual(inst.addr, \"127.0.0.1\")","self.assertEqual(inst.sendbuf_len, 2048)"],"label":1}
{"cve":"CVE-2018-8792","code_chunks":["\tif (g_redirect_flags & LB_TARGET_FQDN)","\t{","\t\tin_uint32_le(s, len);","","\t\t\/* Let target FQDN replace target IP address *\/","\t\tif (g_redirect_server)","\t\t{"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["AuthCapsInfo& caps_info, CryptoKey& session_key, uint64_t *auid = NULL) override;"],"label":1}
{"cve":"CVE-2020-26570","code_chunks":["rv = sc_read_binary(card, 0, *out, sz, 0);","}","else\t{","int rec;"],"label":1}
{"cve":"CVE-2018-14017","code_chunks":["st64 nsz;","RBinJavaAttrMetas *type_info = NULL;","","if (!buffer || ((int) sz) < 4 || buf_offset < 0) {","eprintf (\"r_bin_Java_read_next_attr_from_buffer: invalid buffer size %d\\n\", (int) sz);"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["  assertx(m_cursor >= 0);","  int64_t remaining = m_len - m_cursor;","  if (remaining < length) length = remaining;","  if (length > 0) {","    memcpy(buffer, (const void *)(m_data + m_cursor), length);","    m_cursor += length;","    return length;"],"label":0}
{"cve":"CVE-2019-11413","code_chunks":["\te = text + strlen(text);","","\t\/* splitting the empty string *\/","\tif (e == text) {","\t\tif (js_doregexec(J, re->prog, text, &m, 0)) {","\t\t\tif (len == limit) return;","\t\t\tjs_pushliteral(J, \"\");"],"label":0}
{"cve":"CVE-2017-9144","code_chunks":["if (number_colormaps == 1)","for (i=0; i < (ssize_t) number_pixels; i++)","{","ValidateColormapValue(image,*p & mask,&index,exception);","*p=colormap[(ssize_t) index];","p++;","}"],"label":1}
{"cve":"CVE-2020-15121","code_chunks":["\t\tpath = host;","\t} else {","\t\t*port++ = 0;","\t\tpath = port;","\t}","\tpath = strchr (path, '\/');","\tif (!path) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["    TfLiteTensor* input_sf;","    TF_LITE_ENSURE_OK(","        context,","        GetTemporarySafe(context, node, kInputScalingFactors, &input_sf));","    input_sf->type = kTfLiteFloat32;","    input_sf->allocation_type = kTfLiteArenaRw;","    int scaling_dims[1] = {n_batch};"],"label":0}
{"cve":"CVE-2021-45932","code_chunks":["{","int rc, len;","","\/* Validate required arguments *\/","if (client == NULL || unsubscribe == NULL) {","return MQTT_CODE_ERROR_BAD_ARG;"],"label":1}
{"cve":"CVE-2018-1000127","code_chunks":["return;","}","","it = item_get(key, nkey, c, DO_UPDATE);","if (settings.detail_enabled) {","stats_prefix_record_get(key, nkey, NULL != it);","}"],"label":1}
{"cve":"CVE-2022-1714","code_chunks":["j = 0;","len = r_buf_read_at (bin->b, bin->ehdr.e_shoff + i * sizeof (Elf_(Shdr)), shdr, sizeof (Elf_(Shdr)));","if (len < 1) {","R_LOG_ERROR (\"read (shdr) at 0x%\" PFMT64x, (ut64) bin->ehdr.e_shoff);","R_FREE (bin->shdr);","return false;","}"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["For(expr_ty target, expr_ty iter, asdl_seq * body, asdl_seq * orelse, int","lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)","{","stmt_ty p;","if (!target) {"],"label":1}
{"cve":"CVE-2018-20406","code_chunks":["Unpickler_set_memo(UnpicklerObject *self, PyObject *obj)","{","PyObject **new_memo;","size_t new_memo_size = 0;","","if (obj == NULL) {","PyErr_SetString(PyExc_TypeError,"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["context, affine_quantization->scale->size,","filter->dims->data[affine_quantization->quantized_dimension]);","node->temporaries->data[data->input_offset_index] = data->input_offset_id;","TfLiteTensor* input_offsets ="],"label":1}
{"cve":"CVE-2017-12664","code_chunks":["    (void) WriteBlobMSBShort(image,(unsigned short) nextDepthOffset);","    currentOffset=(MagickOffsetType) GetBlobSize(image);","    offset=SeekBlob(image,currentOffset,SEEK_SET);","    image=SyncNextImageInList(image);","    status=SetImageProgress(image,SaveImagesTag,scene++,","      GetImageListLength(image));","    if (status == MagickFalse)"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["","if (max_batches_per_split == 0) {","return tsl::Status(","port::error::INTERNAL,","absl::StrCat(","\"Tensor has too many elements for int32 indexing: batches=\",","num_batches, \" elements_per_batch=\", elements_per_batch_input,"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["\t\t\te->setto = (*cp == '-') ? ATTR__FALSE : ATTR__UNSET;","\t\t\tcp++;","\t\t\tlen--;","\t\t}","\t\telse if (!equals)","\t\t\te->setto = ATTR__TRUE;","\t\telse {"],"label":0}
{"cve":"CVE-2019-3556","code_chunks":["(salt[5] >= '0') && (salt[5] <= '9') &&","(salt[6] == '$')) {","char output[61];","if (php_crypt_blowfish_rn(key, salt, output, sizeof(output))) {","return strdup(output);","}",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp3_write_bin(uint8_t *bin, int len, const fp3_t a);"],"label":1}
{"cve":"CVE-2022-1199","code_chunks":["ax25->t3      = msecs_to_jiffies(AX25_DEF_T3);","ax25->n2      = AX25_DEF_N2;","ax25->paclen  = AX25_DEF_PACLEN;","ax25->idle    = msecs_to_jiffies(AX25_DEF_IDLE);","ax25->backoff = AX25_DEF_BACKOFF;",""],"label":1}
{"cve":"CVE-2017-3731","code_chunks":["* merge record sequence number as per","* draft-ietf-tls-chacha20-poly1305-03","*\/","actx->key.counter[1] = actx->nonce[0];","actx->key.counter[2] = actx->nonce[1] ^ CHACHA_U8TOU32(aad);"],"label":1}
{"cve":"CVE-2017-11368","code_chunks":["reply.enc_part.ciphertext.length);","free(reply.enc_part.ciphertext.data);","","assert(status != NULL);","if (reply_key)","krb5_free_keyblock(kdc_context, reply_key);","if (errcode)"],"label":1}
{"cve":"CVE-2016-10009","code_chunks":["OpenSSL_add_all_algorithms();","#endif","","while ((ch = getopt(ac, av, \"cDdksE:a:t:\")) != -1) {","switch (ch) {","fingerprint_hash = ssh_digest_alg_by_name(optarg);","if (fingerprint_hash == -1)"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["","memset(&from.head,0,sizeof(BITMAPINFOHEADER));","memset(&from.info,0,sizeof(CXIMAGEINFO));","from.pDib = from.pSelection = from.pAlpha = NULL;","from.ppLayers = NULL;","","if (bTransferFrames){"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["context->ReportError(context, \"Current does not support more than 1 axis.\");","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);","TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);",""],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["af = pj_AF_INET6();","}","}","if (af != pj_AF_UNSPEC()) {","pj_sockaddr_init(af, rem_rtp, &conn->addr,","m_rem->desc.port);"],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["    if (imgdata.lens.makernotes.Lens[0])","      imgdata.lens.makernotes.LensMount = LIBRAW_MOUNT_Contax_N;","#endif","  } else if (!strcmp (head, \"PXN\")) {","    strcpy (make, \"Logitech\");","    strcpy (model,\"Fotoman Pixtura\");","  } else if (!strcmp (head, \"qktk\")) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp9_write_bin(uint8_t *bin, int len, const fp9_t a) {","if (len != 9 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\tep2_dbl(s, s);","\t\t\t\tep2_add(s, s, t);","\t\t\t}","","\t\t\t\/* Convert r to affine coordinates. *\/","\t\t\tep2_norm(r, s);","\t\t} RLC_CATCH_ANY {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["fp12_t l;","ep_t *_p = RLC_ALLOCA(ep_t, m);","ep2_t *_q = RLC_ALLOCA(ep2_t, m);","int i, j, len = bn_bits(a) + 1;","int8_t s[RLC_FP_BITS + 1];","","if (m == 0) {"],"label":1}
{"cve":"CVE-2023-26485","code_chunks":["                   void (*outc)(cmark_renderer *, cmark_node *,","                                cmark_escaping, int32_t,","                                unsigned char),","                   int (*render_node)(cmark_renderer *renderer,","                                      cmark_node *node,","                                      cmark_event_type ev_type, int options)) {","  cmark_strbuf pref = CMARK_BUF_INIT(mem);"],"label":0}
{"cve":"CVE-2019-19922","code_chunks":["cfs_b->period_active = 1;","overrun = hrtimer_forward_now(&cfs_b->period_timer, cfs_b->period);","cfs_b->runtime_expires += (overrun + 1) * ktime_to_ns(cfs_b->period);","cfs_b->expires_seq++;","hrtimer_start_expires(&cfs_b->period_timer, HRTIMER_MODE_ABS_PINNED);","}"],"label":1}
{"cve":"CVE-2022-0413","code_chunks":["\treturn;","    }","    else if (check_regexp_delim(*cmd) == FAIL)","    {","\treturn;","    }","    else"],"label":0}
{"cve":"CVE-2019-15226","code_chunks":["    EXPECT_FALSE(response->complete());","","  } else {","    waitForNextUpstreamRequest();","    upstream_request_->encodeHeaders(default_response_headers_, true);","    response->waitForEndStream();","    EXPECT_TRUE(response->complete());"],"label":0}
{"cve":"CVE-2023-30187","code_chunks":["if(_value->isString())","return _value->toStringA();","return \"{}\";","}","","std::wstring CV8RealTimeWorker::GetJSVariable(std::wstring sParam)"],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["\t    if (ntries != 0)","\t\tSET(validated, FLAG_BAD_PASSWORD);","\t    log_auth_failure(ctx, validated, ntries);","\t    ret = false;","\t    break;","\t    SET(validated, FLAG_NO_USER_INPUT);","\t    FALLTHROUGH;"],"label":0}
{"cve":"CVE-2021-33365","code_chunks":["\t\t*outURN = urn->nameURN;","\t\t*outURL = urn->location;","\t} else {","\t\t*outURN = NULL;","\t\t*outURL = NULL;","\t}","\treturn GF_OK;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["      return EvalImpl<kernel_type, kTfLiteInt8>(context, node);","      return EvalImpl<kernel_type, kTfLiteInt16>(context, node);","      TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",","                         TfLiteTypeGetName(input->type));","      return kTfLiteError;","  }","}"],"label":0}
{"cve":"CVE-2021-39191","code_chunks":["target_link_uri = c->default_sso_url;","}","","\/* do open redirect prevention *\/","if (oidc_target_link_uri_matches_configuration(r, c, target_link_uri)","== FALSE) {","return oidc_util_html_send_error(r, c->error_template,"],"label":1}
{"cve":"PYSEC-2020-271","code_chunks":["if (!status->status.ok()) {","return nullptr;","}","","auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);","if (!status->status.ok()) {"],"label":0}
{"cve":"CVE-2019-13306","code_chunks":[],"label":1}
{"cve":"CVE-2022-23564","code_chunks":["if (!proto.ParseFromArray(d->Data(sizes[i]), sizes[i])) {","return false;","}","ps[i].FromProto(proto);","}","return true;","}"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        if (*out == NULL) goto failed;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)BinOp_type);","    if (isinstance == -1) {","        return 1;","    }"],"label":0}
{"cve":"CVE-2016-7520","code_chunks":["    {","      count=FormatLocaleString(header,MagickPathExtent,\"EXPOSURE=%g\\n\",","        strtod(property,(char **) NULL));","      (void) WriteBlob(image,(size_t) count,(unsigned char *) header);","    }","  if (image->gamma != 0.0)","    {"],"label":0}
{"cve":"CVE-2018-6334","code_chunks":["header_list header;","if (!multipart_buffer_headers(mbuff, header)) {","goto fileupload_done;","}","","if ((cd = php_mime_get_hdr_value(header, \"Content-Disposition\"))) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["                         GetTensorShape(output), GetTensorData<float>(output));","  } else {","    reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),","                         GetTensorShape(output), GetTensorData<float>(output));","  }","","  return kTfLiteOk;"],"label":0}
{"cve":"CVE-2016-2315","code_chunks":["static void finish_object(struct object *obj,","struct strbuf *path, const char *name,","void *cb_data)","{","struct rev_list_info *info = cb_data;","if (obj->type == OBJ_BLOB && !has_object_file(&obj->oid))"],"label":1}
{"cve":"CVE-2017-14175","code_chunks":["*\/","value=0;","do","{","if (value > (unsigned int) (INT_MAX\/10))","break;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_TYPES_EQ(context, op_context.axis->type, kTfLiteInt32);","TF_LITE_ENSURE_OK(context, InitializeTemporaries(context, node, &op_context));","","TfLiteTensor* resolved_axis = GetTemporary(context, node, \/*index=*\/1);","if (!IsConstantTensor(op_context.axis)) {","SetTensorToDynamic(op_context.output);","SetTensorToDynamic(resolved_axis);"],"label":1}
{"cve":"CVE-2020-15260","code_chunks":["","    \/* Add the message headers, if any *\/","    if (hdr_list) {","\tconst pjsip_hdr *hdr = hdr_list->next;","\twhile (hdr != hdr_list) {","\t    pjsip_msg_add_hdr(tdata->msg, ","\t    \t\t      (pjsip_hdr*) pjsip_hdr_clone(tdata->pool, hdr) );"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  switch (output->type) {        TF_LITE_CONCATENATION(float);","      break;","      TF_LITE_CONCATENATION(int32);","      break;","      TF_LITE_CONCATENATION_QUANTIZED();","      break;","      TF_LITE_CONCATENATION(int8_t);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int rand_check(uint8_t *buf, int size) {","int count = 0;","","for (int i = 1; i < size; i++) {"],"label":1}
{"cve":"CVE-2018-25032","code_chunks":["s->lit_bufsize = 1 << (memLevel + 6); \/* 16K elements by default *\/","","overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);","s->pending_buf = (uchf *) overlay;","s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);",""],"label":1}
{"cve":"CVE-2022-25885","code_chunks":["Local<Value> args[1];","args[0] = anArray;","","Local<Value> result = func->Call(GET_CURRENT_CONTEXT,  OBJECT_FROM_PERSISTENT(mObject), 1, args).ToLocalChecked();","if(result.IsEmpty())","{"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from Index\");","return 1;","}"],"label":1}
{"cve":"CVE-2016-3178","code_chunks":["break;","case MINISSDPD_SEARCH_TYPE:\t\/* request by type *\/","case MINISSDPD_SEARCH_USN:\t\/* request by USN (unique id) *\/","case MINISSDPD_SEARCH_ALL:\t\/* everything *\/","rp = rbuf+1;","while(d && (nrep < 255)) {"],"label":1}
{"cve":"CVE-2023-25667","code_chunks":["    OP_REQUIRES(context, buffer,","                errors::InvalidArgument(\"Invalid GIF data (size \", input.size(),","                                        \"), \", error_string));","","            if (data_type_ == DataType::DT_UINT8) {","      return;","    }"],"label":0}
{"cve":"CVE-2021-29534","code_chunks":["&input_st));","","auto input_shape_t = input_shape->vec<int64>();","const int64 N = input_shape_t(0);","","Tensor sparse_handles(DT_INT64, TensorShape({N}));"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 pad2Octets;","WLog_INFO(TAG, \"ColorCacheCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 8)","return FALSE;",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["output_state_quantized->type = input_to_output_weights->type;","output_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(output_state_quantized->dims,"],"label":1}
{"cve":"CVE-2022-24793","code_chunks":["pj_memcpy(&offset, p, 2);","offset ^= pj_htons((pj_uint16_t)(0xc0 << 8));","offset = pj_ntohs(offset);","","\/* Check that offset is valid *\/","if (offset >= max - pkt)"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* col2im = nullptr;","if (data->has_col2im) {","node->temporaries->data[data->col2im_index] = data->col2im_id;","col2im = GetTemporary(context, node, user_data->col2im_index);","}","","if (!IsConstantTensor(output_shape)) {"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["      s->info.inst.name = n;","      dout(10) << \" new session \" << s << \" for \" << s->info.inst << \" con \" << con << dendl;","      con->set_priv(s);","      s->connection = con;","    } else {","      dout(10) << \" existing session \" << s << \" for \" << s->info.inst << \" existing con \" << s->connection","\t       << \", new\/authorizing con \" << con << dendl;"],"label":0}
{"cve":"CVE-2022-29228","code_chunks":["  };","","    EXPECT_CALL(*validator_, setParams(_, _));","  EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));","","  EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,","            filter_->decodeHeaders(request_headers, false));"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["","if (length < 12)","return FALSE;","","Stream_Read_UINT32(s, offscreenSupportLevel); \/* offscreenSupportLevel (4 bytes) *\/"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2019-20016","code_chunks":["char buf[4], *name, *value;","int size, offset_size, length_size, err, len;","uint8_t typeandversion;","uint64_t unknown, heap_header_address, block_offset, block_size, offset,","length;","long store;"],"label":0}
{"cve":"CVE-2018-8792","code_chunks":["\t\t\t\t\tcollen = 0;","\t\t\t\t}","\t\t\t\twhile (indexw < width && collen > 0)","\t\t\t\t{","\t\t\t\t\tcolor = CVAL(in);","\t\t\t\t\t*out = color;","\t\t\t\t\tout += 4;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus MockCustom::Invoke(TfLiteContext* context, TfLiteNode* node) {","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","  const int32_t* input_data = input->data.i32;","  const TfLiteTensor* weight;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &weight));","  const uint8_t* weight_data = weight->data.uint8;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* axis = GetInput(context, node, kAxisTensor);","TF_LITE_ENSURE_EQ(context, NumDimensions(axis), 1);","TF_LITE_ENSURE(context, NumDimensions(input) >= NumElements(axis));",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["node->temporaries = TfLiteIntArrayCreate(2);    }","node->temporaries->data[kFwScratchBuffer] =","op_data->scratch_tensor_index + kFwScratchBuffer;","TfLiteTensor* fw_scratch_buffer ="],"label":1}
{"cve":"PYSEC-2022-74","code_chunks":["  return AreSerializedProtosEqual(o1_copy, o2_copy);","}","","uint64 OpDefHash(const OpDef& o) {","  uint64 h = RepeatedAttrDefHash(o.attr());","","    std::set<string> control_output(o.control_output().begin(),"],"label":0}
{"cve":"PYSEC-2022-122","code_chunks":["TfLiteIntArray* TfLiteIntArrayCreate(int size) {","size_t alloc_size = TfLiteIntArrayGetSizeInBytes(size);","if (alloc_size <= 0) return NULL;","TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);","if (!ret) return ret;"],"label":0}
{"cve":"CVE-2020-14403","code_chunks":["seg = data+(j*w);                                                 \\","if (seg[x] != cl) {break;}                                        \\","i = x;                                                            \\","while ((seg[i] == cl) && (i < w)) i += 1;                         \\","i -= 1;                                                           \\","if (j == y) vx = hx = i;                                          \\","if (i < vx) vx = i;                                               \\"],"label":1}
{"cve":"CVE-2020-15202","code_chunks":["","auto do_work = [num_batches, samples_per_batch, &ctx, &bcast, &means,","&stddevs, &minvals, &maxvals, &gen, &output,","kStdDevsInsideBoundsToUseRandnSampler](int start_output,","int limit_output) {","random::PhiloxRandom gen_copy = gen;"],"label":1}
{"cve":"CVE-2017-5209","code_chunks":["int tmpval[4];","int tmpcnt = 0;","","do {","while (ptr < buf+len && (*ptr == ' ' || *ptr == '\\t' || *ptr == '\\n' || *ptr == '\\r')) {","ptr++;"],"label":0}
{"cve":"CVE-2020-28896","code_chunks":["if (imap_exec(adata, \"CAPABILITY\", IMAP_CMD_NO_FLAGS))","goto bail;","}","}","}","}"],"label":1}
{"cve":"CVE-2020-7041","code_chunks":["#if OPENSSL_VERSION_NUMBER >= 0x10100000L","\t\tif (tunnel->config->min_tls <= 0)","\t\t\ttunnel->config->min_tls = TLS1_VERSION;","#endif","\t\tif (!tunnel->config->cipher_list && tunnel->config->seclevel_1) {","\t\t\tconst char *cipher_list = \"DEFAULT@SECLEVEL=1\";","\t\t\ttunnel->config->cipher_list = strdup(cipher_list);"],"label":0}
{"cve":"CVE-2022-40138","code_chunks":["void CodeBlock::lazyCompileImpl(Runtime &runtime) {","assert(isLazy() && \"Laziness has not been checked\");","PerfSection perf(\"Lazy function compilation\");","auto *provider = (hbc::BCProviderLazy *)runtimeModule_->getBytecode();"],"label":1}
{"cve":"CVE-2019-7397","code_chunks":["(void) WriteBlobString(image,\"endobj\\n\");","scene=0;","imageListLength=GetImageListLength(image);","do","{","MagickBooleanType"],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["","TAILQ_FOREACH_REVERSE(m, list, member_list, entries) {","matched = cmnd_matches(parse_tree, m, runchroot, info);","if (matched != UNSPEC)","break;","}","debug_return_int(matched);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  auto* op_data = reinterpret_cast<OpData*>(node->user_data);","  const auto* params = reinterpret_cast<TfLiteBidirectionalSequenceLSTMParams*>(","      node->builtin_data);","","    TF_LITE_ENSURE_EQ(context, node->inputs->size, 48);","  TF_LITE_ENSURE_EQ(context, node->outputs->size,","                    params->merge_outputs ? 1 : 2);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["auto* params = reinterpret_cast<TfLiteMfccParams*>(node->user_data);","","const TfLiteTensor* input_wav;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorWav, &input_wav));","const TfLiteTensor* input_rate;"],"label":0}
{"cve":"CVE-2019-11502","code_chunks":["\t\t\tconst char *altpath;","\t\t\tbool is_optional;","};","","struct sc_mount_config {","\tconst char *rootfs_dir;","\t\tconst struct sc_mount *mounts;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["tmp = ((keyword_ty)asdl_seq_GET(keywords, k))->arg;","if (tmp && !PyUnicode_Compare(tmp, key)) {","ast_error(c, chch,","\"keyword argument repeated\");","return NULL;","}","}"],"label":1}
{"cve":"PYSEC-2020-303","code_chunks":["static const char* ConvertScalar(PyObject* v, Eigen::half* out) {","Safe_PyObjectPtr as_float = make_safe(PyNumber_Float(v));","double v_double = PyFloat_AS_DOUBLE(as_float.get());","*out = Eigen::half(v_double);","","return nullptr;","}"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["comprehension_ty o = (comprehension_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_RETURN_NONE;","}","","result = PyType_GenericNew(comprehension_type, NULL, NULL);"],"label":0}
{"cve":"CVE-2020-15945","code_chunks":["ProtectNT(luaT_adjustvarargs(L, GETARG_A(i), ci, cl->p));","if (trap) {","luaD_hookcall(L, ci);","L->oldpc = pc + 1;  \/* next opcode will be seen as a \"new\" line *\/","}","updatebase(ci);  \/* function has new base after adjustment *\/","vmbreak;"],"label":1}
{"cve":"CVE-2019-19645","code_chunks":["    if( rc==SQLITE_OK ){","      int isLegacy = (db->flags & SQLITE_LegacyAlter);","      if( sParse.pNewTable ){","        Table *pTab = sParse.pNewTable;","","        if( pTab->pSelect ){","          if( isLegacy==0 ){"],"label":0}
{"cve":"CVE-2021-42782","code_chunks":["u8 sbuf[4096]; \/* needs work. for 3072 keys, needs 384+10 or so *\/","size_t sbuflen = sizeof(sbuf);","u8 rbuf[4096];","","SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);",""],"label":0}
{"cve":"CVE-2018-20179","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"CVE-2018-10539","code_chunks":["}","else {","int bytes_to_copy = (int)(((dff_chunk_header.ckDataSize) + 1) & ~(int64_t)1);","char *buff = malloc (bytes_to_copy);","","if (debug_logging_mode)","error_line (\"extra unknown chunk \\\"%c%c%c%c\\\" of %d bytes\","],"label":1}
{"cve":"CVE-2022-2286","code_chunks":["\tret = dict_add_number(retdict, \"pum_visible\", pum_visible());","","    if (ret == OK && (what_flag & CI_WHAT_ITEMS))","    {","\tlist_T\t    *li;","\tdict_T\t    *di;","\tcompl_T     *match;"],"label":0}
{"cve":"CVE-2020-11939","code_chunks":["","\/* ssh.kex_algorithms [C\/S] *\/","strncpy(buf, (const char *)&packet->payload[offset], buf_out_len = len);","buf[buf_out_len++] = ';';","offset += len;",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["GetInput(context, node, kInputConditionTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (cond_tensor->type != kTfLiteBool) {","context->ReportError(context,"],"label":1}
{"cve":"CVE-2018-19044","code_chunks":["}","","snprintf(log_name, log_name_len, \"\/tmp\/%s_mem.%d.log\", prog_name, getpid());","log_op = fopen(log_name, \"a\");","if (log_op == NULL) {","log_message(LOG_INFO, \"Unable to open %s for appending\", log_name);","log_op = stderr;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    if (isinstance) {","        identifier id;","        expr_context_ty ctx;","","        if (_PyObject_LookupAttrId(obj, &PyId_id, &tmp) < 0) {","            return 1;","        }"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_OK(","      context, GetInputSafe(context, node, kInputTensorScores, &input_scores));","  const TfLiteTensor* input_max_output_size;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kInputTensorMaxOutputSize,","                                 &input_max_output_size));","  const int max_output_size_value = *GetTensorData<int>(input_max_output_size);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* output =","GetOutput(context, node, ops::builtin::lstm::full::kOutputTensor);","","std::vector<int> intermediate_tensor_indexes(node->intermediates->size);","for (int i = 0; i < node->intermediates->size; ++i) {"],"label":1}
{"cve":"CVE-2019-19333","code_chunks":["            r = i;","        }","    }","","    if (r) {","        \/* the newest revision is not on position 0, switch them *\/","        memcpy(&rev, &module->rev[0], sizeof rev);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE(context, bw_cell_state != nullptr);","TfLiteTensor* bw_output = params->merge_outputs","? nullptr",": GetOutput(context, node, kBwOutputTensor);","","TfLiteTensor* fw_scratch_buffer ="],"label":1}
{"cve":"CVE-2022-0476","code_chunks":["\t\t\/* TODO: Not yet fully parsed or utilised *\/","\t\tobj->streams.function_table = R_NEW (struct minidump_function_table_stream);","\t\tif (!obj->streams.function_table) {","\t\t\tbreak;","\t\t}","\t\tr = r_buf_read_at (obj->b, entry->location.rva, (ut8 *)obj->streams.function_table, sizeof (*obj->streams.function_table));","\t\tif (r != sizeof (*obj->streams.function_table)) {"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["expr_ty target;","expr_ty value;","","if (_PyObject_LookupAttrId(obj, &PyId_target, &tmp) < 0) {","return 1;"],"label":1}
{"cve":"CVE-2019-6976","code_chunks":[" * g_strdup() a string. When @object is freed, the string will be freed for"," * you.  If @object is %NULL, you need to "," * free the memory yourself with g_free()."," *"," * This function cannot fail. "," *"," * See also: vips_malloc()."],"label":0}
{"cve":"CVE-2016-9391","code_chunks":["assert(n >= 0 && n < 32);","","\/* Get the number of bits requested from the specified bit stream. *\/","v = 0;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"args\\\" missing from arguments\");","return 1;","}"],"label":1}
{"cve":"CVE-2018-10887","code_chunks":["if (cmd & 0x40) len |= *delta++ << 16UL;","if (!len)\t\tlen = 0x10000;","","if (base_len < off + len || res_sz < len)","goto fail;","memcpy(res_dp, base + off, len);","res_dp += len;"],"label":1}
{"cve":"CVE-2019-19333","code_chunks":["","        }","","        \/* remove the item *\/","        lyp_ext_instance_rm(ctx, &target->ext, &target->ext_size, n);","        --n;","    }"],"label":0}
{"cve":"CVE-2018-8795","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"CVE-2016-10167","code_chunks":["    gdImageColorAllocate(src, 255, 255, 255);","","    gdImageSetInterpolationMethod(src, GD_BILINEAR_FIXED);","    dst = gdImageScale(src, 200, 200);","","    color = gdImageGetPixel(dst, 99, 99);","    gdTestAssertMsg(color == 0xffffff,"],"label":0}
{"cve":"CVE-2020-1918","code_chunks":["assertx(isStringType(type(class_name)));","strncpy(frame->class_name,","val(class_name).pstr->data(),","std::min(val(class_name).pstr->size(), strobelight::kClassNameMax));","frame->class_name[strobelight::kClassNameMax - 1] = '\\0';","}",""],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["const struct match_attr *a, int rem)","{","size_t i;","","for (i = a->num_attr; rem > 0 && i > 0; i--) {","const struct git_attr *attr = a->state[i - 1].attr;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["bn_rec_naf(naf[i], &_l[i], _b[i], 2);","l = RLC_MAX(l, _l[i]);","if (i > 0) {","fp24_frb(t[i], t[i - 1], 1);","}","}"],"label":1}
{"cve":"CVE-2020-15888","code_chunks":["      }","      vmcase(OP_SETFIELD) {","        const TValue *slot;","        TValue *rb = KB(i);","        TValue *rc = RKC(i);","        TString *key = tsvalue(rb);  \/* key must be a string *\/","        if (luaV_fastget(L, s2v(ra), key, slot, luaH_getshortstr)) {"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["","","static struct PyModuleDef _astmodule = {","  PyModuleDef_HEAD_INIT, \"_ast\"","};","PyMODINIT_FUNC","PyInit__ast(void)"],"label":0}
{"cve":"CVE-2016-4563","code_chunks":["status=MagickTrue;","maximum_length=0.0;","total_length=0.0;","for (i=1; (i < number_vertices) && (length >= 0.0); i++)","{","dx=primitive_info[i].point.x-primitive_info[i-1].point.x;","dy=primitive_info[i].point.y-primitive_info[i-1].point.y;"],"label":1}
{"cve":"CVE-2020-1898","code_chunks":["return unserializer.unserializeThing();"],"label":1}
{"cve":"CVE-2020-5209","code_chunks":["raw_printf(\"Unknown option: %s\", *argv);","}","break;",""],"label":1}
{"cve":"CVE-2018-17205","code_chunks":["const struct rule_actions *actions = rule_get_actions(rule);","","\/* A rule may not be reinserted. *\/","ovs_assert(rule->state == RULE_INITIALIZED);","","if (rule->hard_timeout || rule->idle_timeout) {","ovs_list_insert(&ofproto->expirable, &rule->expirable);"],"label":1}
{"cve":"CVE-2016-3134","code_chunks":["newinfo->hook_entry[h] = hook_entries[h];","if ((unsigned char *)e - base == underflows[h]) {","if (!check_underflow(e)) {","pr_err(\"Underflows must be unconditional and \"","\"use the STANDARD target with \""],"label":1}
{"cve":"CVE-2022-0570","code_chunks":["while (t) {","int is_splat = nint(t->car->car) == NODE_SPLAT;","","if (is_splat || n > limit || cursp() >= slimit) { \/* flush stack *\/","pop_n(n);","if (first) {","if (n == 0) {"],"label":1}
{"cve":"CVE-2020-1898","code_chunks":["","Variant ret;","int p = 0;","int err = fb_compact_unserialize_from_buffer(ret, str, len, p);","if (err) {","success = false;","errcode = err;"],"label":1}
{"cve":"CVE-2022-29225","code_chunks":[": Envoy::Compression::Compressor::State::Flush);","decompressor.decompress(buffer, full_output);","}","RELEASE_ASSERT(full_input.toString() == full_output.toString(), \"\");","RELEASE_ASSERT(compressor.checksum() == decompressor.checksum(), \"\");","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* invoke_count = GetOutput(context, node, kInvokeCount);","int32_t* invoke_count_data = GetTensorData<int32_t>(invoke_count);","","median_data[0] = sorting_buffer[size \/ 2];"],"label":1}
{"cve":"CVE-2021-29519","code_chunks":["const OpInputList& values_list_in,","const OpInputList& shapes_list_in,","const OpInputList& dense_list_in,","const DataType& internal_type) {","const auto size = indices_list_in.size();","bool check_type = internal_type != DT_INVALID;"],"label":0}
{"cve":"CVE-2023-38408","code_chunks":["\t\t\/* Create private directory for agent socket *\/","\t\tmktemp_proto(socket_dir, sizeof(socket_dir));","\t\tif (mkdtemp(socket_dir) == NULL) {","\t\t\tperror(\"mkdtemp: private socket dir\");","\t\t\texit(1);","\t\t}","\t\tsnprintf(socket_name, sizeof socket_name, \"%s\/agent.%ld\", socket_dir,"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  TfLiteTensor* output_tensor;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output_tensor));","","  TF_LITE_ENSURE_EQ(context, NumDimensions(padding_matrix), 2);","  TF_LITE_ENSURE_EQ(context, SizeOfDimension(padding_matrix, 0),","                    NumDimensions(input_tensor));",""],"label":0}
{"cve":"CVE-2023-25933","code_chunks":["  Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))","      ? Type::createBigInt()","      : Type::createNoType();","","      BOI->setType(Type::unionTy(Type::createInt32(), mayBeBigInt));","  return true;","}"],"label":0}
{"cve":"CVE-2022-0496","code_chunks":["if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[1]][0], this->points[lines[k].idx[1]][1])) {","current_line = k;","current_point = 1;","goto found_next_line_in_open_path;","}","}"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["Stream_Read_UINT8(s, pduType); \/* pduTypeFlow *\/","*type = pduType;","Stream_Seek_UINT8(s);  \/* pad8bits *\/","Stream_Seek_UINT8(s);  \/* flowIdentifier *\/","Stream_Seek_UINT8(s);  \/* flowNumber *\/","Stream_Seek_UINT16(s); \/* pduSource *\/"],"label":1}
{"cve":"CVE-2020-13904","code_chunks":["seg->key_type = key_type;","if (has_iv) {","memcpy(seg->iv, iv, sizeof(iv));","} else {"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["a->attr_nr = hashmap_get_size(&g_attr_hashmap.map);","","attr_hashmap_add(&g_attr_hashmap, a->name, namelen, a);","assert(a->attr_nr =="],"label":1}
{"cve":"CVE-2018-10537","code_chunks":["int ParseRiffHeaderConfig (FILE *infile, char *infilename, char *fourcc, WavpackContext *wpc, WavpackConfig *config)","{","int is_rf64 = !strncmp (fourcc, \"RF64\", 4), got_ds64 = 0, format_chunk = 0;","int64_t total_samples = 0, infilesize;","RiffChunkHeader riff_chunk_header;","ChunkHeader chunk_header;"],"label":0}
{"cve":"PYSEC-2020-292","code_chunks":["int previous_segment_id = -1;","for (int i = 0; i < segment_id_size; i++) {","const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];","if (i == 0) {","TF_LITE_ENSURE_EQ(context, current_segment_id, 0);","} else {"],"label":0}
{"cve":"CVE-2020-15121","code_chunks":["FD_ZERO (&rfds);","FD_SET (s->fd, &rfds);","tv.tv_sec = secs;","tv.tv_usec = usecs;","return select (s->fd + 1, &rfds, NULL, NULL, &tv);","#else"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE(context, node->user_data != nullptr);","  const auto* params =","      reinterpret_cast<const TfLiteHashtableParams*>(node->user_data);","","  TF_LITE_ENSURE(context, !params->table_name.empty());","  TF_LITE_ENSURE(context, (params->key_dtype == kTfLiteInt64 &&","                           params->value_dtype == kTfLiteString) ||"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["}","else {","int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","{","node->temporaries->data[0] = op_data->scratch_tensor_index;","TfLiteTensor* scratch_buffer = GetTemporary(context, node, \/*index=*\/0);","TfLiteIntArray* scratch_buffer_size = TfLiteIntArrayCreate(lhs_rank);","for (int i = 0; i < lhs_rank - 2; ++i) {","scratch_buffer_size->data[i] = lhs->dims->data[i];"],"label":1}
{"cve":"CVE-2022-1284","code_chunks":["int snv = (arch == R2_ARCH_THUMB)? op.val: (int)r_reg_getv (core->anal->reg, sn);","RSyscallItem *si = r_syscall_get (core->anal->syscall, snv, -1);","if (si) {","r_flag_set_next (core->flags, r_strf (\"syscall.%s\", si->name), cur, 1);","} else {","r_flag_set_next (core->flags, r_strf (\"syscall.%d\", snv), cur, 1);"],"label":1}
{"cve":"CVE-2019-19050","code_chunks":["","crypto_mod_put(alg);","","if (err)","return err;","","return nlmsg_unicast(net->crypto_nlsk, skb, NETLINK_CB(in_skb).portid);"],"label":1}
{"cve":"CVE-2022-35979","code_chunks":["","AddInputFromArray<quint8>(input_quantized.shape(),","input_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});","AddInputFromArray<float>(TensorShape({1}), {input_max});"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"target\\\" missing from NamedExpr\");","return 1;","}"],"label":1}
{"cve":"CVE-2020-15888","code_chunks":["  setobjs2s(L, L->top++, ci->func);","  \/* move fixed parameters to the top of the stack *\/","  for (i = 1; i <= nfixparams; i++) {","    setobjs2s(L, L->top++, ci->func + i);","    setnilvalue(s2v(ci->func + i));  \/* erase original parameter (for GC) *\/","  }","  ci->func += actual + 1;"],"label":0}
{"cve":"CVE-2018-5808","code_chunks":["{","uchar pixel[10];","unsigned iten = 0, isix, i, buffer = 0, todo[16];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width > 32767 || raw_height > 32767)","throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"CVE-2021-4216","code_chunks":["\t\treturn NULL;","\tinfo->current += size - oldsize;","\tif (size > oldsize)","\t\tinfo->total += size - oldsize;","\tif (info->current > info->peak)","\t\tinfo->peak = info->current;","\tp[0].size = size;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2021-30014","code_chunks":["\t}","\tgf_bs_read_int_log(bs, si->sps->ph_num_extra_bits, \"ph_extra_bits\");","","\tif (si->sps->poc_msb_cycle_flag) {","\t\tif ( (si->poc_msb_cycle_present_flag = gf_bs_read_int_log(bs, 1, \"poc_msb_cycle_present_flag\"))) {","\t\t\tsi->poc_msb_cycle = gf_bs_read_int_log(bs, si->sps->poc_msb_cycle_len, \"poc_msb_cycle\");","\t\t}"],"label":0}
{"cve":"CVE-2020-11087","code_chunks":["","\tmessage = &context->AUTHENTICATE_MESSAGE;","\tZeroMemory(message, sizeof(NTLM_AUTHENTICATE_MESSAGE));","\ts = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);","","\tif (!s)","\t\treturn SEC_E_INTERNAL_ERROR;"],"label":0}
{"cve":"CVE-2022-23575","code_chunks":["int64_t count = CalculateTensorElementCount(tensor, found_unknown_shapes);","int size = DataTypeSize(BaseType(tensor.dtype()));","VLOG(2) << \"Count: \" << count << \" DataTypeSize: \" << size;","return count * size;","}","","int64_t OpLevelCostEstimator::CalculateInputSize(const OpInfo& op_info,"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TF_LITE_ENSURE(context, NumDimensions(input) >= 2);","if (input->type != kTfLiteFloat32) {","context->ReportError(context,"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE(context, bw_activation_state != nullptr);","TfLiteTensor* bw_cell_state =","GetVariableInput(context, node, kBwInputCellStateTensor);","TF_LITE_ENSURE(context, bw_cell_state != nullptr);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["      TF_LITE_ENSURE_OK(context,","                        GetTemporarySafe(context, node, kAuxInputQuantized,","                                         &aux_input_quantized));","      aux_input_quantized->type = fw_input_to_output_weights->type;","      aux_input_quantized->allocation_type = kTfLiteArenaRw;","      if (!TfLiteIntArrayEqual(aux_input_quantized->dims, aux_input->dims)) {","        TfLiteIntArray* aux_input_quantized_size ="],"label":0}
{"cve":"PYSEC-2021-740","code_chunks":["","memset(out_data, 0, fixed_length * flat_in.size());","","if (!convert_data_endianness_ || sizeof(T) == 1) {","for (int64 i = 0; i < flat_in.size(); ++i) {","const T* in_data = reinterpret_cast<const T*>(flat_in(i).data());"],"label":1}
{"cve":"CVE-2021-42781","code_chunks":["free(info_blob);","LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, \"Invalid length of 'oid' received\");","}","if (oid_len)   {","oid = info_blob + offs + 2;","if (*oid != 0x06 || (*(oid + 1) != oid_len - 2)) {","free(info_blob);"],"label":1}
{"cve":"PYSEC-2021-390","code_chunks":["errors::InvalidArgument(\"Paddings must be non-negative: \",","before_d, \" \", after_d));","const int64_t size_d = in0.dim_size(d);","output_shape.AddDim(before_d + size_d + after_d);","}","","if (output_shape.num_elements() == in0.NumElements()) {"],"label":1}
{"cve":"CVE-2022-21655","code_chunks":["sendLocalReply(Http::Code::ServiceUnavailable,","testing::Eq(\"missing required header: :method\"), _, _,","\"filter_removed_required_request_headers{missing_required_header:_:method}\"))",".WillOnce(testing::InvokeWithoutArgs([] {}));","router_.decodeHeaders(headers, true);","router_.onDestroy();","}"],"label":1}
{"cve":"CVE-2022-39347","code_chunks":["file->CreateDisposition = CreateDisposition;","file->CreateOptions = CreateOptions;","file->SharedAccess = SharedAccess;","drive_file_set_fullpath(file, drive_file_combine_fullpath(base_path, path, PathLength));","","if (!drive_file_init(file))","{"],"label":1}
{"cve":"CVE-2018-20786","code_chunks":["","static VTermStateCallbacks state_cbs = {","  &putglyph, \/* putglyph *\/","  &movecursor, \/* movecursor *\/","  &scrollrect, \/* scrollrect *\/","  NULL, \/* moverect *\/","  &erase, \/* erase *\/"],"label":0}
{"cve":"CVE-2020-5210","code_chunks":["iflags.news = FALSE;","break;","#endif","if (argv[0][2]) {","(void) strncpy(plname, argv[0] + 2, sizeof plname - 1);","} else if (argc > 1) {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["            }","            else {","                break;","            }","            c = tok_nextc(tok);","            if (c == '\"' || c == '\\'') {","                goto letter_quote;"],"label":0}
{"cve":"PYSEC-2021-812","code_chunks":["return unique_constant_id.fetch_add(1);","}","","void AddNodeToConstantGraph(","Node* n, std::unordered_map<Node*, std::vector<Node*>>* node_map,","Graph* constant_graph) {"],"label":1}
{"cve":"CVE-2022-4415","code_chunks":["assert(uid_is_valid(uid));","","if (uid_is_system(uid) || uid_is_dynamic(uid) || uid == UID_NOBODY)","return 0;"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["ND_PRINT(\" %\" PRIu64, _i); \\","}","","#define DATEOUT() { time_t _t; struct tm *tm; char str[256]; \\"],"label":1}
{"cve":"CVE-2018-14362","code_chunks":["unsigned short bcache = 1;","","\/* see if we already have the message in body cache *\/","msg->fp = mutt_bcache_get(pop_data->bcache, h->data);","if (msg->fp)","return 0;",""],"label":1}
{"cve":"CVE-2019-9917","code_chunks":["void CUser::SetClientEncoding(const CString& s) {","m_sClientEncoding = CZNC::Get().FixupEncoding(s);","for (CClient* pClient : GetAllClients()) {","pClient->SetEncoding(m_sClientEncoding);","}","}"],"label":0}
{"cve":"CVE-2020-11939","code_chunks":["      goto invalid_payload;","","    strncpy(&buf[buf_out_len], (const char *)&packet->payload[offset], len);","    buf_out_len += len;","    buf[buf_out_len++] = ';';","  }","  if (len > UINT32_MAX - offset)"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_OK(context, ResizeOutput(context, node));","}","const TfLiteTensor* top_k = GetInput(context, node, kInputTopK);","const int32 k = top_k->data.i32[0];","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const int32 row_size = input->dims->data[input->dims->size - 1];"],"label":1}
{"cve":"CVE-2023-26485","code_chunks":["if (node->extension && node->extension->latex_render_func) {","node->extension->latex_render_func(node->extension, renderer, node, ev_type, options);","return 1;","}","","switch (node->type) {","break;"],"label":0}
{"cve":"CVE-2021-3881","code_chunks":["\/* read 32 mincode-maxcode pairs from data2 big-endian *\/","huffcdic->mincode_table[0] = 0;","huffcdic->maxcode_table[0] = 0xFFFFFFFF;","for (int i = 1; i < 33; i++) {","const uint32_t mincode = mobi_buffer_get32(buf);","const uint32_t maxcode = mobi_buffer_get32(buf);","huffcdic->mincode_table[i] =  mincode << (32 - i);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (tok->encoding) {","encoding = (char *)PyMem_MALLOC(strlen(tok->encoding) + 1);","if (encoding)","strcpy(encoding, tok->encoding);","}","Ta3Tokenizer_Free(tok);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\tep_curve_get_gen(g);","\t\tep_curve_get_ord(n);","","\t\tbn_mod(_k, k, n);","\t\tbn_mod(_m, m, n);","","#if defined(EP_ENDOM)"],"label":0}
{"cve":"CVE-2021-21261","code_chunks":["  if (error)","    emit_progress_error (monitor, error);","","  g_mutex_lock (&m->lock);","  m->installing = FALSE;","  g_mutex_unlock (&m->lock);","}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["bn_t k, m, n;","g1_t t;","uint8_t mac[RLC_MD_LEN];","int len, dlen = strlen(data), result = RLC_OK;","uint8_t *buf = RLC_ALLOCA(uint8_t, 1 + 8 * RLC_PC_BYTES + dlen);","","bn_null(k);"],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["{","if (len < 1)","return;   string[len - 1] = 0;","if (len < 3)","return;   len = strnlen(string, len - 1);","for (int i = len - 1; i >= 0; i--)"],"label":0}
{"cve":"CVE-2021-29608","code_chunks":["output_index_multiplier, output_size, result);","return tensorflow::Status::OK();","if (row_partition_tensor.size() - 1 > parent_output_index.size()) {","return errors::InvalidArgument(","\"Row partition size is greater than output size: \",","row_partition_tensor.size() - 1, \" > \","],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["{","uchar pixel[10];","unsigned iten = 0, isix, i, buffer = 0, todo[16];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width > 32767 || raw_height > 32767)","throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[]={0,0};","","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","const TfLiteTensor* input_boxes;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kInputTensorBoxes, &input_boxes));","const int num_boxes = SizeOfDimension(input_boxes, 0);","const TfLiteTensor* input_scores;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputVariableId,","&input_resource_id_tensor));","int resource_id = input_resource_id_tensor->data.i32[0];","auto& resources = subgraph->resources();","auto* variable = resource::GetResourceVariable(&resources, resource_id);","TF_LITE_ENSURE(context, variable != nullptr);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input_gate_bias =","GetOptionalInputTensor(context, node, lstm::full::kInputGateBiasTensor);","const TfLiteTensor* forget_gate_bias =","GetInput(context, node, lstm::full::kForgetGateBiasTensor);","const TfLiteTensor* cell_gate_bias =","GetInput(context, node, lstm::full::kCellGateBiasTensor);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["      const int batch_size = input->dims->data[0];","  const int num_units = input_weights->dims->data[0];","  TF_LITE_ENSURE_EQ(context, input->dims->data[1],","                    input_weights->dims->data[1]);","  TF_LITE_ENSURE_EQ(context, input_weights->dims->data[0], bias->dims->data[0]);","  TF_LITE_ENSURE_EQ(context, recurrent_weights->dims->data[0],","                    bias->dims->data[0]);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &shape));","  TF_LITE_ENSURE_EQ(context, NumDimensions(shape), 1);","  TF_LITE_ENSURE_EQ(context, shape->type, kTfLiteInt32);","","  const TfLiteTensor* weights;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 3, &weights));","  TF_LITE_ENSURE_EQ(context, NumDimensions(weights), 1);"],"label":0}
{"cve":"PYSEC-2021-734","code_chunks":["INDEX_TYPE output_index_multiplier, INDEX_TYPE output_size,","vector<INDEX_TYPE>* result) {","const INDEX_TYPE index_size = value_rowids.size();","result->reserve(index_size);","if (index_size == 0) {","return;"],"label":1}
{"cve":"CVE-2018-8794","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"CVE-2016-5688","code_chunks":["    case 2:  \/* WPG level 2 *\/","      (void) memset(CTM,0,sizeof(CTM));","      StartWPG.PosSizePrecision = 0;","      while(!EOFBlob(image)) \/* object parser loop *\/","        {","          (void) SeekBlob(image,Header.DataOffset,SEEK_SET);","          if(EOFBlob(image))"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  if (activation == kTfLiteActSignBit) {","    return false;","  }","  return true;","}","","}"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["\tif (!e)","\t\tCALLOC_ARRAY(e, 1);","\tpush_stack(stack, e, NULL, 0);","}","","static void prepare_attr_stack(struct index_state *istate,","\t\t\t       const char *path, int dirlen,"],"label":0}
{"cve":"CVE-2021-23158","code_chunks":["","for (i = web_files, wc = web_cache; i > 0; i --, wc ++)","if (!strcmp(wc->name, filename))","return (wc->url);","","return (filename);","}"],"label":1}
{"cve":"CVE-2021-29518","code_chunks":["const Tensor& handle = ctx->input(0);","const string& name = handle.scalar<tstring>()();","Tensor val;","auto session_state = ctx->session_state();","OP_REQUIRES(ctx, session_state != nullptr,","errors::FailedPrecondition(","\"GetSessionTensor called on null session state\"));"],"label":0}
{"cve":"CVE-2021-32785","code_chunks":["break;","","\/* execute the actual command *\/","reply = redisCommand(context->ctx, command);","","\/* check for errors, need to return error replies for cache miss case REDIS_REPLY_NIL *\/","if ((reply != NULL) && (reply->type != REDIS_REPLY_ERROR))"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["&prev_activation));","const TfLiteTensor* weights;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputWeights, &weights));","const TfLiteTensor* bias;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputBiases, &bias));"],"label":0}
{"cve":"CVE-2020-9433","code_chunks":["{","const char *hostname = lua_tostring(L, 2);","lua_pushboolean(L, X509_check_host(cert, hostname, strlen(hostname), 0, NULL));","}","else","{"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* inputs = GetInput(context, node, kInputsTensor);","const TfLiteTensor* sequence_length =","GetInput(context, node, kSequenceLengthTensor);","const CTCBeamSearchDecoderParams* option =","reinterpret_cast<CTCBeamSearchDecoderParams*>(node->user_data);",""],"label":1}
{"cve":"CVE-2022-2549","code_chunks":["\t\tscene_dump_vrml_id(sdump, com->node);","\t\tgf_fprintf(sdump->trace, \".%s\", field.name);","\t\tif (inf->pos!=-1) gf_fprintf(sdump->trace, \"[%d]\", inf->pos);","\t\tgf_fprintf(sdump->trace, \" BY \");","\t}","","\tif (field.fieldType == GF_SG_VRML_MFNODE) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["","\t\tn = *t;","\t\tif (n > 0) {","\t\t\tep4_add(r, r, table[n \/ 2]);","\t\t}","\t\tif (n < 0) {","\t\t\tep4_sub(r, r, table[-n \/ 2]);"],"label":0}
{"cve":"CVE-2019-15162","code_chunks":["#endif","","crypt_password = crypt(password, user_password);","if (crypt_password == NULL)","{","pcap_snprintf(errbuf, PCAP_ERRBUF_SIZE, \"Authentication failed\");"],"label":1}
{"cve":"CVE-2016-1000004","code_chunks":["const String& class_name) {","if (!node->instanceof(s_DOMNode)) {","raise_warning(\"Invalid Nodetype to import\");","return init_null();","}","auto domnode = Native::data<DOMNode>(node);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE(context, IsDynamicTensor(output0));","const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output1 = GetOutput(context, node, 1);","TF_LITE_ENSURE(context, input->dims->size == output1->dims->size);","TF_LITE_ENSURE(context, input->dims->data[0] == output1->dims->data[0]);","return kTfLiteOk;"],"label":1}
{"cve":"PYSEC-2021-799","code_chunks":["} else {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int len = RLC_CEIL(RLC_BN_BITS, 8);","bn_rand(a, RLC_POS, RLC_BN_BITS);","for (int j = 2; j <= 64; j++) {","bits = bn_size_str(a, j);"],"label":1}
{"cve":"CVE-2023-28366","code_chunks":["#ifdef WITH_BRIDGE","if(context->bridge == NULL)","\/* Outgoing bridge connection never expire *\/","#endif","{","if(context->session_expiry_interval == 0){"],"label":1}
{"cve":"CVE-2021-3770","code_chunks":["\t\tptr[i] = NUL;","\t\twhile (--i >= 0)","\t\t    ptr[i] = ' ';","\t\tins_str(ptr);","\t\tvim_free(ptr);","\t    }","\t}"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["        break;","    }","","    \/* Punctuation character *\/","    *p_start = tok->start;","    *p_end = tok->cur;","    return Ta3Token_OneChar(c);"],"label":0}
{"cve":"CVE-2021-41193","code_chunks":["call_type = (call_type == WCALL_CALL_TYPE_FORCED_AUDIO) ?","WCALL_CALL_TYPE_NORMAL : call_type;","","info(APITAG \"wcall(%p): answer calltype=%s\\n\","],"label":1}
{"cve":"PYSEC-2020-125","code_chunks":["              z[i] = rand[i] * diff + normMin;","            }","            for (int i = 0; i < size; i++) {","              g[i] = (plusFactor - z[i] * z[i]) \/ T(2.0);","            }","","            const auto u = dist(&gen_copy);"],"label":0}
{"cve":"CVE-2016-10167","code_chunks":["black = gdImageColorAllocate(im, 0, 0, 0);","","gdImageFilledPolygon(im, points, 5, black);","","path = gdTestFilePath2(\"gdimagefilledpolygon\", \"self_intersecting_exp.png\");","gdAssertImageEqualsToFile(path, im);"],"label":1}
{"cve":"CVE-2023-26157","code_chunks":["LOG_ERROR (\"Invalid num_pages %zu, skip\",","(size_t)section->num_pages);","continue;","}","","section->pages = (r2007_section_page **)calloc ("],"label":1}
{"cve":"CVE-2017-15385","code_chunks":["sdb_num_set (sdb, \"link\", shdr->sh_link, 0);","sdb_set (sdb, \"link_section_name\", link_section_name, 0);","","for (cnt = 0, i = 0; cnt < shdr->sh_info && ((char *)defs + i < end); ++cnt) {","Sdb *sdb_verdef = sdb_new0 ();","char *vstart = ((char*)defs) + i;","char key[32] = {0};"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["(NumInputs(node) == 4)","? GetOptionalInputTensor(context, node, kBiasTensor)",": nullptr;","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","TfLiteTensor* col2im = data->has_col2im"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output = GetOutput(context, node, 0);","if (output->type == kTfLiteInt16) {","TF_LITE_ENSURE(context, input->type == kTfLiteInt8 ||","input->type == kTfLiteUInt8 ||"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  TF_LITE_ENSURE_EQ(context, NumInputs(node), data->values_count);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","  const TfLiteTensor* input0;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input0));","  const int dimension_size = NumDimensions(input0) + 1;","  if (data->axis < 0) {"],"label":0}
{"cve":"CVE-2022-29369","code_chunks":["","    function = njs_function(constructor);","","    if (function->bound != NULL) {","        function = function->u.bound_target;","        njs_set_function(&bound, function);","        constructor = &bound;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","const auto* params =","reinterpret_cast<const TfLiteGatherParams*>(node->builtin_data);","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const TfLiteTensor* positions = GetInput(context, node, kInputPositions);"],"label":1}
{"cve":"CVE-2020-6016","code_chunks":["char m_buf[ k_cbSteamNetworkingSocketsMaxPlaintextPayloadRecv ];"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* weights = GetInput(context, node, 3);","const TfLiteTensor* value = GetInput(context, node, 4);","","const int lookup_rank = SizeOfDimension(indices, 1);","const int embedding_rank = NumDimensions(value);"],"label":1}
{"cve":"CVE-2017-9144","code_chunks":["break;","}","{","operand=ReadBlobByte(image);","if (opcode & 0x40)","operand=ReadBlobLSBSignedShort(image);"],"label":1}
{"cve":"CVE-2021-20298","code_chunks":["(void)_maxScanLineSize;","","_tmpBuffer = new unsigned short","[checkArraySize (uiMult (maxScanLineSize, numScanLines),","sizeof (unsigned short))];","","const ChannelList &channels = header().channels();"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE(context, bw_cell_state != nullptr);","","if (!params->merge_outputs) {","TfLiteTensor* bw_output = GetOutput(context, node, kBwOutputTensor);","TfLiteIntArray* bw_output_size = TfLiteIntArrayCreate(3);","bw_output_size->data[0] = time_major ? max_time : n_batch;","bw_output_size->data[1] = time_major ? n_batch : max_time;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}"],"label":1}
{"cve":"PYSEC-2021-400","code_chunks":["OP_REQUIRES_OK(context, context->input_list(\"stats_summary_list\",","&stats_summary_list));","const int64_t num_buckets = stats_summary_list[0].dim_size(1);","DCHECK_EQ(stats_summary_list[0].dim_size(2), 2);","std::vector<TTypes<float, 3>::ConstTensor> stats_summary;","stats_summary.reserve(stats_summary_list.size());","for (const auto& tensor : stats_summary_list) {"],"label":1}
{"cve":"CVE-2019-13218","code_chunks":["ady -= abs(base) * adx;","if (x1 > n) x1 = n;","if (x < x1) {","LINE_OP(output[x], inverse_db_table[y]);","for (++x; x < x1; ++x) {"],"label":1}
{"cve":"CVE-2018-5808","code_chunks":["    { 0x137, \"ILCE-7R\" },","    { 0x138, \"ILCE-6000\" },","    { 0x139, \"ILCE-5000\" },","    { 0x13d, \"DSC-RX100M3\" },","    { 0x13e, \"ILCE-7S\" },","    { 0x13f, \"ILCA-77M2\" },","    { 0x153, \"ILCE-5100\" },"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[] = {0, 0};","if(width > 2064) return 0.f;","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["    for (col=2; col < width; col+=4) {","      FORC3 total[c] += (short) image[row*width+col][c];","      total[3]++;","    }","  for (row=0; row < height; row++)","    FORC3 black[row][c] += fsum[c]\/2 + total[c]\/(total[3]*100.0);",""],"label":0}
{"cve":"CVE-2016-9393","code_chunks":["","\/******************************************************************************\\","* Operations for COM marker segment.","\\******************************************************************************\/","","static void jpc_com_destroyparms(jpc_ms_t *ms)","{"],"label":0}
{"cve":"CVE-2016-2324","code_chunks":["struct strbuf *path, const char *last,","void *data)","{","char *name = path_name(path, last);","","add_preferred_base_object(name);"],"label":1}
{"cve":"CVE-2022-35977","code_chunks":["if (checkStringLength(c,offset+sdslen(value)) != C_OK)","return;","","o = createObject(OBJ_STRING,sdsnewlen(NULL, offset+sdslen(value)));"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["return kTfLiteError;","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);","TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);",""],"label":1}
{"cve":"CVE-2021-29518","code_chunks":["const Tensor& handle = ctx->input(0);","const string& name = handle.scalar<tstring>()();","Tensor val;","OP_REQUIRES_OK(ctx, ctx->session_state()->GetTensor(name, &val));","ctx->set_output(0, val);","}",""],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from TypeIgnore\");","            return 1;","        }"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["struct attr_state *e)","{","const char *ep, *equals;","int len;","","ep = cp + strcspn(cp, blank);","equals = strchr(cp, '=');"],"label":1}
{"cve":"CVE-2017-12664","code_chunks":["color16=(unsigned short) ((((31*(size_t) GetPixelRed(image,p))\/","(size_t) QuantumRange) << 11) | (((63*(size_t)","GetPixelGreen(image,p))\/(size_t) QuantumRange) << 5) |","((31*(size_t) GetPixelBlue(image,p))\/(size_t) QuantumRange));","if (GetPixelAlpha(image,p) == (Quantum) TransparentAlpha)","{"],"label":1}
{"cve":"CVE-2022-24792","code_chunks":["return status;","","\/* Read the file header plus fmt header only. *\/","size_read = size_to_read = sizeof(wave_hdr) - 8;","status = pj_file_read( fport->fd, &wave_hdr, &size_read);","if (status != PJ_SUCCESS) {","pj_file_close(fport->fd);"],"label":1}
{"cve":"CVE-2018-14498","code_chunks":["JMESSAGE(JERR_PPM_TOOLARGE, \"Integer value too large in PPM file\")"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["if (perf_results[r].status == CUDNN_STATUS_SUCCESS &&","perf_results[r].algo != CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD_NONFUSED &&","perf_results[r].memory <= mem_limit) {","return perf_results[r].algo;","}","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","OpContext op_context(context, node);","OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","const TfLiteTensor* lhs = GetInput(context, node, kInputLHSTensor);","const TfLiteTensor* rhs = GetInput(context, node, kInputRHSTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["if (p->tiff_bps == 8 && p->tiff_samples == 4) p->is_raw = 0;","for (i=0; i < (int)p->tiff_nifds; i++)","if (i != raw && p->tiff_ifd[i].samples == max_samp &&","p->tiff_ifd[i].width * p->tiff_ifd[i].height \/ SQR(p->tiff_ifd[i].bps+1) >","(int)(p->thumb_width *       p->thumb_height \/ SQR(p->thumb_misc+1))) {"],"label":1}
{"cve":"CVE-2020-36177","code_chunks":["\/* done with use of tmp buffer *\/","XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);","","\/* advance idx to index of PS and msg separator, account for PS size of 0*\/","idx = hLen + 1 + hLen;","while (idx < pkcsBlockLen && pkcsBlock[idx] == 0) {idx++;}"],"label":1}
{"cve":"CVE-2020-11097","code_chunks":["\t\tAvPairsValueLength += avLen;","\t}","","\tif (AvNbComputerName)","\t{","\t\tsize_t avLen;","\t\tif (!ntlm_av_pair_get_len(AvNbComputerName, cbAvNbComputerName, &avLen))"],"label":0}
{"cve":"CVE-2019-15226","code_chunks":["  addDummyHeaders(headers, state.range(0));","  uint64_t size = 0;","  for (auto _ : state) {","    size += headers.byteSize().value();","  }","  benchmark::DoNotOptimize(size);","}"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["    asdl_seq* kw_defaults;","    arg_ty kwarg;","    asdl_seq* defaults;","","    if (lookup_attr_id(obj, &PyId_args, &tmp) < 0) {","        return 1;","    }"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","","return context->ResizeTensor(context, output,"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["","","    { LOGDBG(LY_LDGYANG, \"finished parsing augment statement \\\"%s\\\"\", data_node->name);","                    actual_type = (yyvsp[-4].backup_token).token;","                    actual = (yyvsp[-4].backup_token).actual;","                    data_node = (yyvsp[-4].backup_token).actual;","                  }"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteIntArray* row_sums_size = TfLiteIntArrayCreate(1);","row_sums_size->data[0] = row_sums_dims[0];","TF_LITE_ENSURE_OK(","context, context->ResizeTensor(context, row_sums, row_sums_size));","}","}"],"label":1}
{"cve":"CVE-2017-9990","code_chunks":["","size = 1;","for (i = 0; i < cpp; i++)","size *= 94;","","if (ncolors <= 0 || ncolors > size) {","av_log(avctx, AV_LOG_ERROR, \"invalid number of colors: %d\\n\", ncolors);"],"label":1}
{"cve":"CVE-2017-6448","code_chunks":["\t\t\tvA = (int) (buf[1] & 0xf0) >> 4;","\t\t\tvB = (buf[3] << 8) | buf[2];","\t\t\tswitch (vA) {","\t\t\t\tsnprintf (str, sizeof (str), \" {v%i}\", buf[4] & 0x0f);","\t\t\t\tbreak;","\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);","\t\t\t\tbreak;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["size_t j, k, l, w = bn_ham(b);","","if (bn_is_zero(b)) {","return fp12_set_dig(c, 1);","}",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* top_k;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTopK, &top_k));","TF_LITE_ENSURE_TYPES_EQ(context, top_k->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, NumElements(top_k), 1);","const int32 k = *GetTensorData<int32_t>(top_k);",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["GetTemporary(context, node, kInputQuantized);","input_quantized->type = input_to_output_weights->type;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2022-37434","code_chunks":["    head->done = 0;","    return Z_OK;","}","","\/*","   Search buf[0..len-1] for the pattern: 0, 0, 0xff, 0xff.  Return when found","   or when out of input.  When called, *have is the number of pattern bytes"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["context, affine_quantization->scale->size,","filter->dims->data[affine_quantization->quantized_dimension]);","node->temporaries->data[data->input_offset_index] = data->input_offset_id;","TfLiteTensor* input_offsets ="],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["GetOutput(context, node, kResourceHandleTensor);","TF_LITE_ENSURE(context, resource_handle_tensor != nullptr);","TF_LITE_ENSURE_EQ(context, resource_handle_tensor->type, kTfLiteInt32);","TfLiteIntArray* outputSize = TfLiteIntArrayCreate(1);","outputSize->data[0] = 1;"],"label":1}
{"cve":"CVE-2020-1898","code_chunks":["    if (!tport ||","        tport->getParam(\"enable_code_coverage\").compare(\"true\") != 0) {","      SystemLib::throwRuntimeExceptionObject(","        \"Calling fb_enable_code_coverage without adding \"","        \"'enable_code_coverage' in request params\");","    }","  }"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (full_checks) {","const char * const *p;","for (p = FORBIDDEN; *p; p++) {","if (_PyUnicode_EqualToASCIIString(name, *p)) {","ast_error(c, n, \"assignment to keyword\");","return 1;","}"],"label":0}
{"cve":"CVE-2018-20836","code_chunks":["{","del_timer(&task->slow_task->timer);","complete(&task->slow_task->completion);","}","","\/* Give it some long enough timeout. In seconds. *\/"],"label":0}
{"cve":"CVE-2018-20406","code_chunks":["* This may help applications with severe memory constraints.","*\/","if (!(self->mt_used * 3 >= (self->mt_mask + 1) * 2))","return 0;","return _PyMemoTable_ResizeTable(self,","(self->mt_used > 50000 ? 2 : 4) * self->mt_used);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));","TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);","TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);","","const TfLiteTensor* value;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &value));"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t} else {","\t\t\tif (bn_is_zero(t)) {","\t\t\t\tfp_zero(a);","\t\t\t} else {","\t\t\t\tif (t->used == 1) {","\t\t\t\t\tfp_prime_conv_dig(a, t->dp[0]);","\t\t\t\t} else {"],"label":0}
{"cve":"CVE-2019-20503","code_chunks":["if (offset + plen > limit) {","break;","}","if (plen == 0) {","break;","}","#ifdef INET"],"label":1}
{"cve":"CVE-2022-0392","code_chunks":["","    static void","ins_s_right()","{","    int end_change = dont_sync_undo == FALSE; #ifdef FEAT_FOLDING","    if ((fdo_flags & FDO_HOR) && KeyTyped)","\tfoldOpenCursor();"],"label":0}
{"cve":"CVE-2021-29463","code_chunks":["#ifdef EXIV2_DEBUG_MESSAGES","std::cout << \"Writing metadata\" << std::endl;","#endif","","byte    data   [WEBP_TAG_SIZE*3];","DataBuf chunkId(WEBP_TAG_SIZE+1);"],"label":0}
{"cve":"CVE-2018-8794","code_chunks":["\tbytes_pro = process_plane(input, width, height, output + 3, size - total_pro);","\ttotal_pro += bytes_pro;","\tinput += bytes_pro;","\tbytes_pro = process_plane(input, width, height, output + 2, size - total_pro);","\ttotal_pro += bytes_pro;","\tinput += bytes_pro;","\tbytes_pro = process_plane(input, width, height, output + 1, size - total_pro);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* resolved_axis = GetTemporary(context, node, \/*index=*\/1);","if (IsDynamicTensor(op_context->output)) {","TF_LITE_ENSURE_OK(context,","ResizeTempAxis(context, op_context, resolved_axis));"],"label":1}
{"cve":"CVE-2022-29201","code_chunks":["image_quantized.flat<quint8>());","AddInputFromArray<quint8>(filter_quantized.shape(),","filter_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {image_min});"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["\tconst char *fit_uname_config = NULL;","\tchar *fit_uname_config_copy = NULL;","\tchar *next_config = NULL;","\tulong load, len;","#ifdef CONFIG_OF_LIBFDT_OVERLAY","\tulong image_start, image_end;","\tulong ovload, ovlen;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["fw_activation_state_quantized->type = fw_input_to_output_weights->type;","fw_activation_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(fw_activation_state_quantized->dims,"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp8_write_bin(uint8_t *bin, int len, const fp8_t a) {","if (len != 8 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["}","","const int kShapeTensor = 1;","const auto* shape = GetInput(context, node, kShapeTensor);","if (shape->allocation_type != kTfLiteMmapRo) {","TF_LITE_KERNEL_LOG(context, \"Reshape has non-const shape.\");","return false;"],"label":1}
{"cve":"CVE-2021-32686","code_chunks":["SSL *ossl_ssl = NULL;","int err;","","\/* Get SSL instance *\/","ossl_ssl = X509_STORE_CTX_get_ex_data(x509_ctx,","SSL_get_ex_data_X509_STORE_CTX_idx());"],"label":0}
{"cve":"CVE-2023-0433","code_chunks":[" * 'a' flag format from the current line until the end of the paragraph."," * Keep the cursor at the same position relative to the text."," * The caller must have saved the cursor line for undo, following ones will be"," * saved here."," *\/","    void","auto_format("],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["return kTfLiteOk;","};","reg.invoke = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* a0 = GetInput(context, node, 0);","","auto populate = [&](int id) {","TfLiteTensor* t = &context->tensors[id];"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["hidden_state_quantized->type = input_weights->type;","hidden_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(hidden_state_quantized->dims,"],"label":1}
{"cve":"CVE-2020-1917","code_chunks":["lazyClassToStringHelper(value.toLazyClassVal());","auto const size = str->size();","if (size >= RuntimeOption::MaxSerializedStringSize) {","throw Exception(\"Size of serialized string (%d) exceeds max\", size);","}","StringBuffer sb;","sb.append(\"s:\");"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","        SetTensorToPersistentRo(output);","","      TfLiteIntArray* output_size = TfLiteIntArrayCreate(1);","  output_size->data[0] = NumDimensions(input);","  TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_size));",""],"label":0}
{"cve":"CVE-2019-12109","code_chunks":["rem_port = GetValueFromNameValueList(&data, \"RemotePort\");","protocol = GetValueFromNameValueList(&data, \"Protocol\");","","if (!int_port || !ext_port || !protocol)","{","ClearNameValueList(&data);","SoapError(h, 402, \"Invalid Args\");"],"label":1}
{"cve":"CVE-2021-42782","code_chunks":["sc_apdu_t apdu;","u8        rbuf[SC_MAX_APDU_BUFFER_SIZE];","int       r;","const u8  *p = rbuf, *q;","size_t    len, tlen = 0, ilen = 0;","","sc_format_apdu(card, &apdu, SC_APDU_CASE_2_SHORT, 0xca, 0x01, 0x88);"],"label":1}
{"cve":"CVE-2023-44488","code_chunks":["vpx_free(cm->above_seg_context);","cm->above_seg_context = (PARTITION_CONTEXT *)vpx_calloc(","mi_cols_aligned_to_sb(cm->mi_cols), sizeof(*cm->above_seg_context));","if (!cm->above_seg_context) goto fail;","cm->above_context_alloc_cols = cm->mi_cols;","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["zero_points_size));","}","node->temporaries->data[5] = op_data->scratch_tensor_index + 5;","TfLiteTensor* row_sums = GetTemporary(context, node, \/*index=*\/5);","row_sums->type = kTfLiteInt32;","row_sums->allocation_type = kTfLiteArenaRwPersistent;","int row_sums_dims[2] = {2, num_units};"],"label":1}
{"cve":"PYSEC-2021-649","code_chunks":["errors::InvalidArgument(","\"Rank of input SparseTensor should be > 1, but saw rank: \", rank));","","TensorShape tensor_input_shape(input_shape->vec<int64>());","gtl::InlinedVector<int64, 8> std_order(rank);","std::iota(std_order.begin(), std_order.end(), 0);","SparseTensor input_st;"],"label":1}
{"cve":"CVE-2022-41858","code_chunks":["spin_lock(&sl->lock);","","if (netif_queue_stopped(dev)) {","if (!netif_running(dev))","goto out;","","\/* May be we must check transmitter timeout here ?"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  const int batch_size = SizeOfDimension(inputs, 1);","  const int num_classes = SizeOfDimension(inputs, 2);","","  const int beam_width = option->beam_width;","  const int top_paths = option->top_paths;","  const bool merge_repeated = option->merge_repeated;",""],"label":0}
{"cve":"CVE-2017-12664","code_chunks":["    if (bits_per_pixel > 16)","      bits_per_pixel=16;","    else","      if (bits_per_pixel < 16)","        (void) TransformImageColorspace(image,image->colorspace,exception);","    if (bits_per_pixel < 8)","      {"],"label":0}
{"cve":"CVE-2018-5812","code_chunks":["{","if(!image)","throw LIBRAW_EXCEPTION_IO_CORRUPT;","","int bypp = tiff_bps <= 8 ? 1 : 2;","int bufsize = width * 3 * bypp;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","  TfLiteIntArray* output_shape = TfLiteIntArrayCreate(input_dims_size);","  for (int i = 0; i < input_dims_size; i++) {","    output_shape->data[i] = input_dims->data[i];","  }","","    output->type = input->type;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["                  int *expected_ret)","{","    int ilabel;","    int err;","","    D(printf(\"Token %s\/'%s' ... \", _PyParser_TokenNames[type], str));",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["            node->temporaries->data[1] = scratch_tensor_index + 1;","    TfLiteTensor* input_quantized;","    TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, \/*index=*\/1,","                                                &input_quantized));","    input_quantized->type = weights_feature->type;","    input_quantized->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":0}
{"cve":"PYSEC-2022-143","code_chunks":["}","","const NodeDef* input = node_map_->GetNode(NodeName(node.input(0)));","CHECK(input != nullptr) << \"node = \" << node.name()","<< \" input = \" << node.input(0);","if (IsVariable(*input) || IsRecv(*input)) {"],"label":1}
{"cve":"CVE-2023-28428","code_chunks":["if (st->flate.avail_out > 0)","return (-1);","for (; bufptr < bufsecond; remaining --, sptr ++)","*bufptr++ = *sptr;","for (; remaining > 0; remaining --, sptr ++, bufptr ++)","*bufptr = *sptr + bufptr[-(int)pbpixel];"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["","int key_size;","if (key.size() > max_key_size) {","raise_warning(\"Key size too large; supplied length: %d, max: %d\",","key.size(), max_key_size);","key_size = max_key_size;","} else {"],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["for (auth = auth_switch; auth->name; auth++) {","if (auth->end_session && !IS_DISABLED(auth)) {","status = (auth->end_session)(auth);","if (status == AUTH_ERROR) {"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* input_weights;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","const TfLiteTensor* recurrent_weights;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2017-18922","code_chunks":["{","int result = -1;","ws_ctx_t *wsctx = (ws_ctx_t *)cl->wsctx;","\/* int fin; *\/ \/* not used atm *\/","","\/* rfbLog(\" <== %s[%d]: %d cl: %p, wsctx: %p-%p (%d)\\n\", __func__, gettid(), len, cl, wsctx, (char *)wsctx + sizeof(ws_ctx_t), sizeof(ws_ctx_t)); *\/"],"label":0}
{"cve":"CVE-2016-10012","code_chunks":["goto out;","}","if ((r = sshbuf_put_u32(b, comp->type)) != 0 ||","(r = sshbuf_put_u32(b, comp->enabled)) != 0 ||","(r = sshbuf_put_cstring(b, comp->name)) != 0)","goto out;","r = sshbuf_put_stringb(m, b);"],"label":1}
{"cve":"CVE-2023-30207","code_chunks":["","  switch(fmt)","  {","      return false;","      return true;","  }","}"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["else {","int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}"],"label":1}
{"cve":"CVE-2016-3134","code_chunks":["{","static const struct ipt_ip uncond;","","return e->target_offset == sizeof(struct ipt_entry) &&","memcmp(&e->ip, &uncond, sizeof(uncond)) == 0;","#undef FWINV"],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["PJ_DEF(void) pj_scan_advance_n( pj_scanner *scanner,","unsigned N, pj_bool_t skip_ws)","{","if (scanner->curptr + N > scanner->end) {","pj_scan_syntax_err(scanner);","return;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (isinstance == -1) {","return 1;","}","if (isinstance) {","expr_ty left;","operator_ty op;"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["}","p = s;","do {","if (*s == 0xD) {","*p++ = 0xA;","if (*++s == 0xA)"],"label":1}
{"cve":"CVE-2020-9433","code_chunks":["    {","      PUSH_ASN1_INTEGER(L, serial);","    }","    else","    {","      BIGNUM *bn = ASN1_INTEGER_to_BN(serial, NULL);","      PUSH_OBJECT(bn, \"openssl.bn\");"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["    if (obj2ast_mod(ast, &res, arena) != 0)","        return NULL;","    else","        return res;","}","","int PyAST_Check(PyObject* obj)"],"label":0}
{"cve":"CVE-2016-6912","code_chunks":["}","","\/*","Function: gdImageWebpPtr","","See <gdImageWebpEx>."],"label":1}
{"cve":"CVE-2018-11384","code_chunks":["ut8 op_MSB,op_LSB;","int ret;","if (!data || len < 2) {","return 0;","}","memset (op, '\\0', sizeof (RAnalOp));"],"label":0}
{"cve":"PYSEC-2021-805","code_chunks":["  }","","  void OperateWithVariableRank(OpKernelContext* context, int fixed_dims,","                               const Tensor& input,","                               typename TTypes<Tpadding>::ConstMatrix paddings,","                               T pad_value, Tensor* output) {","        switch (fixed_dims) {"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["\t\t * empty_cell has initial_width chars, if real column","\t\t * is narrower, increase len a bit so we fill less","\t\t * space.","\t\t *\/","\t\tlen += initial_width - data->len[data->width[x]];","\t\tlen -= data->opts.padding;","\t}"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2019-15226","code_chunks":["request_properties->set_original_path(","std::string(request_headers.EnvoyOriginalPath()->value().getStringView()));","}","request_properties->set_request_headers_bytes(request_headers.byteSize());","request_properties->set_request_body_bytes(stream_info.bytesReceived());","if (request_headers.Method() != nullptr) {","envoy::api::v2::core::RequestMethod method ="],"label":1}
{"cve":"CVE-2022-32546","code_chunks":["Set PCL render geometry.","*\/","width=(size_t) floor(bounds.x2-bounds.x1+0.5);","height=(size_t) floor(bounds.y2-bounds.y1+0.5);","if (width > page.width)","page.width=width;"],"label":1}
{"cve":"CVE-2020-36316","code_chunks":["\tint result = RLC_ERR;","\tbn_t t;","","\tbn_null(t);","","\tRLC_TRY {","\t\tbn_new(t);"],"label":0}
{"cve":"CVE-2021-41195","code_chunks":["output_shape.set_dim(0, output_rows);"],"label":1}
{"cve":"CVE-2022-1286","code_chunks":["MRB_CLASS_ORIGIN(c);","h = c->mt;","","if (h && mt_del(mrb, h, mid)) return;","mrb_name_error(mrb, mid, \"method '%n' not defined in %C\", mid, c);","}",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["    hidden_state_quantized->type = input_weights->type;","    hidden_state_quantized->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqual(hidden_state_quantized->dims,","                             hidden_state->dims)) {","      TfLiteIntArray* hidden_state_quantized_size =","          TfLiteIntArrayCopy(hidden_state->dims);","      TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2021-31261","code_chunks":["else if (gf_isom_has_sync_shadows(file, TrackNum) || gf_isom_has_sample_dependency(file, TrackNum)) {","flags |= GP_RTP_PCK_SYSTEMS_CAROUSEL;","}","gf_odf_desc_del((GF_Descriptor*)esd);","}","break;","hintType = GF_RTP_PAYT_H263;"],"label":1}
{"cve":"CVE-2018-20176","code_chunks":["\t\t\t\t{","\t\t\t\t\treplen = revcode;","\t\t\t\t\tcollen = 0;","\t\t\t\t}","\t\t\t\twhile (indexw < width && collen > 0)","\t\t\t\t{","\t\t\t\t\tcolor = CVAL(in);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["\/* static *\/ tsl::StatusOr<int64_t> GpuDriver::GetMaxRegistersPerBlock(","    CUdevice device) {","  return GetSimpleAttribute<int64_t>(","      device, CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK);","}","","\/* static *\/ tsl::StatusOr<int64_t> GpuDriver::GetThreadsPerWarp("],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","","  if (output->type != kTfLiteComplex64) {","    context->ReportError(context,","                         \"Type '%s' for output is not supported by rfft2d.\",","                         TfLiteTypeGetName(output->type));"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["status.SetPayload(kTpuEmbeddingErrorUrl, error_payload.SerializeAsString());"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tbn_t _k;","\tint i, j, n;","\tint8_t s, reg[1 + RLC_CEIL(RLC_FP_BITS + 1, EP_WIDTH - 1)];","\tep_t t[1 << (EP_WIDTH - 2)], u, v;","\tsize_t l;","","\tif (bn_is_zero(k)) {"],"label":0}
{"cve":"CVE-2022-3299","code_chunks":["if (request->http.content == NULL) {","request->http.content_length = len;","request->http.content =","(char*)ogs_malloc(request->http.content_length + 1);","ogs_assert(request->http.content);","} else {"],"label":1}
{"cve":"CVE-2022-23558","code_chunks":["TfLiteIntArray* TfLiteIntArrayCreate(int size) {","int alloc_size = TfLiteIntArrayGetSizeInBytes(size);","if (alloc_size <= 0) return NULL;","TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);","if (!ret) return ret;"],"label":1}
{"cve":"CVE-2020-15209","code_chunks":["const auto model_path =","\"tensorflow\/lite\/testdata\/segment_sum_invalid_buffer.bin\";","","std::unique_ptr<tflite::FlatBufferModel> model =","FlatBufferModel::BuildFromFile(model_path);","ASSERT_NE(model, nullptr);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["status.SetPayload(payload.first, payload.second);"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["break;","break;","}","if (magic != NO_MAGIC)","placeholder++;","","orig_len = sb->len;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        return 0;","    }","    if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","        return 1;","    }","    if (tmp == NULL) {","        PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\t\t\tnumberCapabilities++;","","\t\t\tif (!rdp_write_bitmap_cache_v3_codec_id_capability_set(s, settings))","\t\t\t\treturn FALSE;","\t\t}","\t}",""],"label":0}
{"cve":"CVE-2023-44398","code_chunks":["} else if (result == BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT) {","uncompressedLen *= 2;","if (uncompressedLen > 131072) {","if (++dos > 1)","break;","uncompressedLen = 131072;","}"],"label":1}
{"cve":"PYSEC-2021-613","code_chunks":["        ParseProtoUnlimited(&sts, value))) {","    status_ = errors::Internal(","        \"Failed to find the saved tensor slices at the beginning of the \"","        \"checkpoint file: \",","        fname);","    return;","  }"],"label":0}
{"cve":"CVE-2022-40138","code_chunks":["if ((start.line < request.line && request.line < end.line) ||","((start.line == request.line || request.line == end.line) &&","(start.col <= request.column && request.column <= end.col))) {","codeBlock->lazyCompile(runtime_);","","toVisit.clear();",""],"label":1}
{"cve":"CVE-2022-23586","code_chunks":["                \" != \", DataTypeString(item->dtypes[k]), \", the type of \",","                input_name, \"[\", k, \"]\");","          }","          if (item->is_func_arg) {","            AddInput(gnode_idx, item->nid + k, 0);","          } else {","            AddInput(gnode_idx, item->nid, item->idx + k);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(context,","context->ResizeTensor(context, output, output_size));","","TfLiteTensor* output_state = GetOutput(context, node, kOutputState);","TF_LITE_ENSURE_OK(","context, context->ResizeTensor(context, output_state,","TfLiteIntArrayCopy(input_state->dims)));"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);"],"label":1}
{"cve":"PYSEC-2020-256","code_chunks":["const absl::Span<const int>& seq_lengths, bool time_major,","cudnnDataType_t data_type) {","if (max_seq_length <= 0) {","return port::Status(port::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");","}","int dims[] = {batch_size, data_size, 1};"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["((tt) != UNSPEC && (tt) != IMPLIED)"],"label":1}
{"cve":"CVE-2022-1714","code_chunks":["return UT64_MAX;","}","if (r_buf_read_at (bin->b, entry + 16, buf, sizeof (buf)) < 1) {","R_LOG_ERROR (\"read (init_offset)\");","return 0;","}","if (buf[0] == 0x68) { \t\tut64 addr;"],"label":1}
{"cve":"CVE-2018-12436","code_chunks":["    if ((*qxLen < numLen) || (*qyLen < numLen)) {","        *qxLen = numLen;","        *qyLen = numLen;","        return BUFFER_E;","    }","","    *qxLen = numLen;"],"label":0}
{"cve":"PYSEC-2019-209","code_chunks":["for (int input_index : GpuGridRangeX(input_total_size)) {","const Index input_segment_index = input_index \/ inner_dim_size;","const Index segment_offset = input_index % inner_dim_size;","const Index output_segment_index = segment_ids[input_segment_index];","if (output_segment_index < 0 || output_segment_index >= output_total_size) {","continue;"],"label":1}
{"cve":"CVE-2016-10094","code_chunks":["return(0);","}","if(TIFFGetField(input, TIFFTAG_JPEGTABLES, &count, &jpt) != 0) {","if (count >= 4) {","int retTIFFReadRawTile;","\/* Ignore EOI marker of JpegTables *\/","_TIFFmemcpy(buffer, jpt, count - 2);"],"label":1}
{"cve":"CVE-2022-33099","code_chunks":["  const char *msg;","  va_list argp;","  luaC_checkGC(L);  \/* error message uses memory *\/","  va_start(argp, fmt);","  msg = luaO_pushvfstring(L, fmt, argp);  \/* format message *\/","  va_end(argp);","  if (isLua(ci)) {  \/* if Lua function, add source:line information *\/"],"label":0}
{"cve":"PYSEC-2020-328","code_chunks":["TfLiteTensor* output) {","int max_index = -1;","const int segment_id_size = segment_ids->dims->data[0];","if (segment_id_size > 0) {","max_index = segment_ids->data.i32[segment_id_size - 1];","}"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2019-17178","code_chunks":["tmp = (LPSTR)realloc(tmp, ds * sizeof(CHAR));","","if (NULL == tmp)","{"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp48_read_bin(fp48_t a, const uint8_t *bin, int len) {","if (len != 32 * RLC_FP_BYTES && len != 48 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["Py_DECREF(id);","return NULL;","}","PyTuple_SET_ITEM(c->c_normalize_args, 1, id);"],"label":1}
{"cve":"CVE-2017-12932","code_chunks":["\t\t}","","\t\tvar_push_dtor(var_hash, data);","\t\tzval_dtor(&key);","","\t\tif (elements && *(*p-1) != ';' && *(*p-1) != '}') {","\t\t\t(*p)--;"],"label":0}
{"cve":"CVE-2023-40589","code_chunks":["\t\t}","\t}","\telse","\t{","\t\t*pFlags = 0;","\t}",""],"label":0}
{"cve":"CVE-2020-1919","code_chunks":["bool MemFile::seek(int64_t offset, int whence \/* = SEEK_SET *\/) {","assertx(m_len != -1);","if (whence == SEEK_CUR) {","if (offset > 0 && offset < bufferedLen()) {","setReadPosition(getReadPosition() + offset);","setPosition(getPosition() + offset);","return true;"],"label":1}
{"cve":"CVE-2019-18792","code_chunks":[],"label":1}
{"cve":"CVE-2020-14404","code_chunks":["            bytesToCopy = cl->afterEncBufLen - i;","        }","","        memcpy(&cl->updateBuf[cl->ublen], &cl->afterEncBuf[i], bytesToCopy);","","        cl->ublen += bytesToCopy;","        i += bytesToCopy;"],"label":0}
{"cve":"CVE-2023-4681","code_chunks":["","header_offset = gf_ftell(AVI->fdes);","","if( avi_read(AVI->fdes,(char *)hdrl_data, (u32) n) != n ) ERR_EXIT(AVI_ERR_READ)","}","else if(strnicmp(data,\"movi\",4) == 0)","{"],"label":1}
{"cve":"CVE-2020-15121","code_chunks":["\tif (p) {","\t\tptr = p + 3;","\t}","#endif","\twhile ((ptr = strchr (ptr, slash))) {","\t\t*ptr = 0;","\t\tif (!r_sys_mkdir (path) && r_sys_mkdir_failed ()) {"],"label":0}
{"cve":"CVE-2018-5810","code_chunks":["\thomogeneity = 0;","        for (i=0; i < 4; i++) {","          if (ldiff[direction][i] <= leps && abdiff[direction][i] <= abeps) {","\t    homogeneity++;","\t  }","\t}","\thomogeneity_map_p[0][direction] = homogeneity;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    TfLiteTensor* zero_points;","    TF_LITE_ENSURE_OK(","        context, GetTemporarySafe(context, node, \/*index=*\/4, &zero_points));","    zero_points->type = kTfLiteInt32;","    zero_points->allocation_type = kTfLiteArenaRw;","    int zero_points_dims[1] = {batch_size};","    if (!TfLiteIntArrayEqualsArray(zero_points->dims, 1, zero_points_dims)) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);","","TfLiteTensor* out_tensor;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));","int32_t* out_buf = out_tensor->data.i32;","const TfLiteTensor* hash;"],"label":0}
{"cve":"CVE-2019-13225","code_chunks":["then_len = 0;","","jump_len = cond_len + then_len + SIZE_OP_ATOMIC_END;","if (IS_NOT_NULL(Else)) jump_len += SIZE_OP_JUMP;","","r = add_op(reg, OP_PUSH);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\t\tbn_rsh(t0, u, bn_bits(u) - RLC_DIG);","\t\t\t\t\tbn_rsh(t1, v, bn_bits(u) - RLC_DIG);","\t\t\t\t} else {","\t\t\t\t\tbn_copy(t0, u);","\t\t\t\t\tbn_copy(t1, v);","\t\t\t\t}","\t\t\t\t_x = t0->dp[0];"],"label":0}
{"cve":"CVE-2020-11089","code_chunks":["","Stream_Read_UINT32(irp->input, Length); \/* Length (4 bytes) *\/","Stream_Read_UINT64(irp->input, Offset); \/* Offset (8 bytes) *\/","Stream_Seek(irp->input, 20);            \/* Padding (20 bytes) *\/","\/* MS-RDPESP 3.2.5.1.5: The Offset field is ignored","* assert(Offset == 0);","*"],"label":1}
{"cve":"CVE-2022-1383","code_chunks":["\t\t\tcursor += R_CS_EL_SIZE_LSYM;","\t\t\tmeta_add_fileline (bf, r_coresym_cache_element_pa2va (result, lsym->sym.paddr), lsym->sym.size, &lsym->flc);","\t\t}","\t}","\tif (hdr->n_line_info) {","\t\tresult->line_info = R_NEWS0 (RCoreSymCacheElementLineInfo, hdr->n_line_info);","\t\tif (!result->line_info) {"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["DTLS_LOCK(ds);","","if (!ds->ossl_rbio[idx]) {","DTLS_UNLOCK(ds);","return PJ_EGONE;","}",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2019-13223","code_chunks":["ady -= abs(base) * adx;","if (x1 > n) x1 = n;","if (x < x1) {","LINE_OP(output[x], inverse_db_table[y]);","for (++x; x < x1; ++x) {"],"label":1}
{"cve":"PYSEC-2022-115","code_chunks":["indices->shape().DebugString()));","OP_REQUIRES(ctx, TensorShapeUtils::IsVector(values->shape()),","errors::InvalidArgument(\"Input values must be a vector. Got: \",","values->shape().DebugString()));","OP_REQUIRES(ctx, TensorShapeUtils::IsVector(dense_shape->shape()),","errors::InvalidArgument(\"Input shape must be a vector. Got: \","],"label":0}
{"cve":"CVE-2021-40569","code_chunks":["}","","for (i = 0; i < item_count; i++) {","GF_ItemLocationEntry *location_entry = (GF_ItemLocationEntry *)gf_malloc(sizeof(GF_ItemLocationEntry));","if (!location_entry) return GF_OUT_OF_MEM;","","gf_list_add(ptr->location_entries, location_entry);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["*out = Gt;","return 0;","}"],"label":0}
{"cve":"CVE-2020-15472","code_chunks":["NDPI_LOG_DBG2(ndpi_struct, \"calculated dport over tcp\\n\");","","\/* H323  *\/","if(packet->payload_packet_len >= 4","&& (packet->payload[0] == 0x03)","&& (packet->payload[1] == 0x00)) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));","TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);","TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);","","const TfLiteTensor* key;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &key));"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {","    RuntimeShape inputs_shape[kMaxInputNum];","  const RuntimeShape* inputs_shape_ptr[kMaxInputNum];","  const data_type* inputs_data[kMaxInputNum];","  GetAllInputTensorShapes(context, node, inputs_shape);","  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);","  GetAllInputTensorData(context, node, inputs_data);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);","if (*out == NULL) goto failed;"],"label":1}
{"cve":"CVE-2021-40564","code_chunks":["\t\tif(overscan_info_present_flag) {","\t\t\toverscan_info = gf_bs_read_int(orig, 1);","\t\t}","","\t\t\/* read all video signal related flags first *\/","\t\tvideo_signal_type_present_flag = gf_bs_read_int(orig, 1);","\t\tif(video_signal_type_present_flag) {"],"label":0}
{"cve":"CVE-2020-1921","code_chunks":["  req::ptr<Directory> defaultDirectory;","};","","namespace {","","IMPLEMENT_STATIC_REQUEST_LOCAL(DirectoryData, s_directory_data);",""],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["\t * if media already has direction attribute.","\t *\/","\tfor (i = 0; i < sdp->media_count; ++i) {","\t    pjmedia_sdp_media *m;","\t    unsigned j;","","\t    \/* Find direction attribute in this media *\/"],"label":0}
{"cve":"CVE-2017-12476","code_chunks":["    inspector.AddField(\"Profile Compatibility\", m_ProfileCompatibility, AP4_AtomInspector::HINT_HEX);","    inspector.AddField(\"Level\", m_Level);","    inspector.AddField(\"NALU Length Size\", m_NaluLengthSize);","    for (unsigned int i=0; i<m_SequenceParameters.ItemCount(); i++) {","        inspector.AddField(\"Sequence Parameter\", m_SequenceParameters[i].GetData(), m_SequenceParameters[i].GetDataSize());","    }","    for (unsigned int i=0; i<m_PictureParameters.ItemCount(); i++) {"],"label":0}
{"cve":"CVE-2017-9732","code_chunks":["*\/","if (len > GSTD_MAXPACKETCONTENTS + 512) {","LOG(LOG_ERR, (\"ridiculous length, %ld\", len));","return -1;","}",""],"label":1}
{"cve":"CVE-2018-10191","code_chunks":["        }","        if (mlen) {","          value_move(&regs[len-m2+1], &argv[argc-mlen], mlen);","        }","        if (mlen < m2) {","          stack_clear(&regs[len-m2+mlen+1], m2-mlen);","        }"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["res = obj2ast_identifier(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"Global field \\\"names\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["if (index == data->axis) {","output_shape->data[index] = data->values_count;","} else {","output_shape->data[index] = input_shape->data[i++];","}","}"],"label":1}
{"cve":"CVE-2019-17539","code_chunks":["                av_log(avctx, AV_LOG_WARNING, \"Channel layout not specified\\n\");","            } else {","                for (i = 0; avctx->codec->channel_layouts[i] != 0; i++)","                    if (avctx->channel_layout == avctx->codec->channel_layouts[i])","                        break;","                if (avctx->codec->channel_layouts[i] == 0) {","                    char buf[512];"],"label":0}
{"cve":"CVE-2016-6874","code_chunks":["Array subarr1 = v.toArray();","const ArrNR& arr_value = value.toArrNR();","php_array_replace_recursive(seen, v.isReferenced(), subarr1,","arr_value);","v = subarr1;","} else {"],"label":1}
{"cve":"CVE-2016-10171","code_chunks":["                                ","        if (wphdr.block_samples) {","            if (final_index)","                *final_index = GET_BLOCK_INDEX (wphdr) + wphdr.block_samples;","","            audio_blocks++;","        }"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["    TfLiteTensor* fft_integer_working_area;","  TF_LITE_ENSURE_OK(","      context, GetTemporarySafe(context, node, kFftIntegerWorkingAreaTensor,","                                &fft_integer_working_area));","  int* fft_integer_working_area_data =","      GetTensorData<int>(fft_integer_working_area);",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["}","","end = Stream_GetPosition(s);","diff = end - start;","if (diff != pduLength)","{"],"label":1}
{"cve":"CVE-2021-32440","code_chunks":["\t\t\t\tbreak;","\t\t\t\tcontinue;","\t\t\t}","\t\t\tj=0;","\t\t\twhile ((esd = (GF_ESD*)gf_list_enum( esd_list, &j))) {","\t\t\t\tif (esd->ESID==track_id) {","\t\t\t\t\tthe_od_id = ((GF_IsomObjectDescriptor*)desc)->objectDescriptorID;"],"label":0}
{"cve":"PYSEC-2021-811","code_chunks":["\"checkpoint\");","if (!status_.ok()) return;","for (const SavedSliceMeta& ssm : sts.meta().tensor()) {","TensorShape ssm_shape(ssm.shape());","for (const TensorSliceProto& tsp : ssm.slice()) {","TensorSlice ss_slice(tsp);","status_ = RegisterTensorSlice(ssm.name(), ssm_shape, ssm.type(), fname,"],"label":1}
{"cve":"CVE-2016-4997","code_chunks":["\tstruct xt_entry_match *ematch;","","\t\/* Cleanup all matches *\/","\txt_ematch_foreach(ematch, e)","\t\tcleanup_match(ematch, net);","\tt = ipt_get_target(e);",""],"label":0}
{"cve":"CVE-2021-4110","code_chunks":["p = mrb_proc_ptr(blk);","if (!MRB_PROC_STRICT_P(p)) {","struct RProc *p2 = MRB_OBJ_ALLOC(mrb, MRB_TT_PROC, p->c);","mrb_proc_copy(p2, p);","p2->flags |= MRB_PROC_STRICT;","return mrb_obj_value(p2);","}"],"label":1}
{"cve":"CVE-2016-6873","code_chunks":["  }","  if (container.isObject()) {","    ObjectData* obj = container.getObjectData();","    if (obj->isCollection()) {","      auto type = obj->collectionType();","      if (type == CollectionType::Map || type == CollectionType::Set) {","        HashCollection* hc = static_cast<HashCollection*>(obj);"],"label":0}
{"cve":"CVE-2023-4682","code_chunks":["\t\t}","\t\tbytes -= todo;","\t\tnr    += todo;","\t}","","\treturn nr;","}"],"label":0}
{"cve":"CVE-2021-32134","code_chunks":["\tu64 offset, new_size;","\tu32 sdesc_idx;","\tGF_SampleEntryBox *entry;","\tGF_StscEntry *stsc_entry;","","\tif (!mdia || !mdia->information->sampleTable) return GF_BAD_PARAM;","\tif (!mdia->information->sampleTable->SampleSize)"],"label":0}
{"cve":"PYSEC-2021-834","code_chunks":["Status CreateTempFile(Env* env, float value, uint64 size, string* filename) {","const string dir = testing::TmpDir();","*filename = io::JoinPath(dir, strings::StrCat(\"file_\", value));","std::unique_ptr<WritableFile> file;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (!vararg)","return NULL;","","i += 2; \/* the star and the name *\/"],"label":1}
{"cve":"CVE-2021-23521","code_chunks":["","if (targetFile.exists())","{","if (! shouldOverwriteFiles)","return Result::ok();","","if (! targetFile.deleteFile())"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["}","","\/* NOTE: free'd when events are cleared during closure of mdi *\/","text = malloc(tmp_length + 1);","memcpy(text, event_data, tmp_length);","text[tmp_length] = '\\0';"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);","if (*out == NULL) goto failed;","return 0;"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["}","","if (attackMaximumAmplification != -1.0f) {","#ifdef XML_DTD","XML_SetBillionLaughsAttackProtectionMaximumAmplification("],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","TfLiteTensor* hits;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &hits));","const TfLiteTensor* lookup;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\tfor (size_t i = 0; i < l; i++) {","\t\t\tif (win[i] == 0) {","\t\t\t\ted_dbl(q, q);","\t\t\t} else {","\t\t\t\tfor (size_t j = 0; j < util_bits_dig(win[i]); j++) {","\t\t\t\t\ted_dbl(q, q);","\t\t\t\t}"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["reinterpret_cast<TfLiteResizeBilinearParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TF_LITE_ENSURE_EQ(context, input_channels,","                    output_channels * block_size * block_size);","","  TfLiteIntArray* output_size = TfLiteIntArrayCreate(4);","  output_size->data[0] = input->dims->data[0];","  output_size->data[1] = output_height;","  output_size->data[2] = output_width;"],"label":0}
{"cve":"PYSEC-2020-306","code_chunks":["int ndim = tensor->dims();","dlm_tensor->dl_tensor.ndim = ndim;","dlm_tensor->dl_tensor.data = TFE_TensorHandleDevicePointer(h, status);","dlm_tensor->dl_tensor.dtype = GetDlDataType(data_type, status);","","std::vector<int64_t>* shape_arr = &tf_dlm_tensor_ctx->shape;"],"label":1}
{"cve":"CVE-2017-6887","code_chunks":["    case 50727: \/* AnalogBalance *\/","      FORCC","      {","#ifdef LIBRAW_LIBRARY_BUILD","        tiff_ifd[ifd].dng_levels.analogbalance[c] =","#endif","            ab[c] = getreal(type);"],"label":0}
{"cve":"CVE-2016-10250","code_chunks":["}","","\/******************************************************************************\\","* Box output.","\\******************************************************************************\/","","int jp2_box_put(jp2_box_t *box, jas_stream_t *out)"],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["#endif","switch (tag) {","#ifdef LIBRAW_LIBRARY_BUILD","imgdata.lens.FocalLengthIn35mmFormat = get2();","break;","stmread(imgdata.shootinginfo.BodySerial, len, ifp);"],"label":1}
{"cve":"CVE-2016-5842","code_chunks":["value=(unsigned int) ((buffer[3] << 24) | (buffer[2] << 16) |","(buffer[1] << 8 ) | (buffer[0]));","quantum.unsigned_value=(value & 0xffffffff);","return(quantum.signed_value);"],"label":1}
{"cve":"CVE-2018-13006","code_chunks":["\tgf_isom_box_dump_done(\"EntityToGroupTypeBox\", a, trace);","\treturn GF_OK;","}","","GF_Err stvi_dump(GF_Box *a, FILE * trace)","{","\tGF_StereoVideoBox *ptr = (GF_StereoVideoBox *) a;"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["emsg(_(e_missing_rcurly));","break;","}","if (ga_add_string(&ga, line) == FAIL)","break;","if (*skipwhite(line) == '}')","break;"],"label":1}
{"cve":"CVE-2018-6334","code_chunks":["","        while (*tmp) {","          if (*tmp == '[') {","            c++;","          } else if (*tmp == ']') {","            c--;","            if (tmp[1] && tmp[1] != '[') {"],"label":0}
{"cve":"CVE-2018-20762","code_chunks":["fprintf(stderr, \"Hit 'h' for help\\n\\n\");","str = gf_cfg_get_key(cfg_file, \"General\", \"StartupFile\");","if (str) {","strcpy(the_url, \"MP4Client \"GPAC_FULL_VERSION);","gf_term_connect(term, str);","startup_file = 1;","is_connected = 1;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output1 = GetOutput(context, node, 1);","TF_LITE_ENSURE_STATUS(context->ResizeTensor(","context, output1, TfLiteIntArrayCopy(input->dims)));","return kTfLiteOk;"],"label":1}
{"cve":"PYSEC-2021-776","code_chunks":["const Tensor& input_min_vec = ctx->input(kInputMinVecIndex);","float* input_min_vec_data = (float*)const_cast<void*>(","static_cast<const void*>(input_min_vec.flat<float>().data()));","const Tensor& input_max_vec = ctx->input(kInputMaxVecIndex);","float* input_max_vec_data = (float*)const_cast<void*>("],"label":1}
{"cve":"CVE-2019-20503","code_chunks":["ptype = ntohs(phdr->param_type);","plen = ntohs(phdr->param_length);","","if ((plen == 0) || (offset + plen > length))","break;","","if (ptype == SCTP_RANDOM) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\tif (pc_map_is_type1()) {","\t\t\tg2_map(q, (uint8_t *)id2, len2);","\t\t\tpc_map(e, k->s1, q);","\t\t} else {","\t\t\tif (first == 1) {","\t\t\t\tg2_map(q, (uint8_t *)id2, len2);","\t\t\t\tpc_map(e, k->s1, q);"],"label":0}
{"cve":"CVE-2020-11097","code_chunks":["if (!ntlm_av_pair_check(pAvPair, cbAvPair))","return FALSE;","","return ntlm_av_pair_add(pAvPairList, cbAvPairList, ntlm_av_pair_get_id(pAvPair),"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp_read_bin(fp_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","","switch (input->type) {","return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);"],"label":0}
{"cve":"CVE-2018-8796","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["int resource_id = input_resource_id_tensor->data.i32[0];","auto& resources = subgraph->resources();","auto* variable = resource::GetResourceVariable(&resources, resource_id);","TF_LITE_ENSURE(context, variable != nullptr);","","TfLiteTensor* variable_tensor = variable->GetTensor();"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  if (type != kTfLiteInt32 && type != kTfLiteFloat32) {","    TF_LITE_KERNEL_LOG(context, \"Unsupported data type %s.\",","                       TfLiteTypeGetName(type));","    return kTfLiteError;","  }","  output->type = type;",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2017-12595","code_chunks":["\t{","\t    items.push_back(getArrayItem(i));","\t    items.back().makeDirectInternal(visited);","\t}","\tnew_obj = new QPDF_Array(items);","    }","    else if (isDictionary())"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));","TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);","TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);","","const TfLiteTensor* key;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &key));"],"label":0}
{"cve":"CVE-2019-6978","code_chunks":["row = (JSAMPROW)gdCalloc(1, cinfo.image_width * cinfo.input_components * sizeof(JSAMPLE));","if(row == 0) {","gd_error(\"gd-jpeg: error: unable to allocate JPEG row structure: gdCalloc returns NULL\\n\");","jpeg_destroy_compress(&cinfo);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\trdp->settings = context->settings;","","\tif (context->instance)","\t{","\t\trdp->settings->instance = context->instance;","\t\tcontext->instance->settings = rdp->settings;","\t}"],"label":0}
{"cve":"CVE-2020-13398","code_chunks":["BYTE* modulus_reverse;","BYTE* exponent_reverse;","BIGNUM *mod, *exp, *x, *y;","input_reverse = (BYTE*)malloc(2 * key_length + exponent_size);","","if (!input_reverse)"],"label":1}
{"cve":"CVE-2018-20748","code_chunks":["uint32_t subAuthScheme;","rfbClientInitMsg ci;","","\/* if the connection is immediately closed, don't report anything, so","that pmw's monitor can make test connections *\/",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params =","reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["}","","const TfLiteIntArray* input_shape = input0->dims;","TfLiteIntArray* output_shape = TfLiteIntArrayCreate(dimension_size);","int i = 0;","for (int index = 0; index < dimension_size; ++index) {"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["tmp = _PyObject_GetAttrId(obj, &PyId_lower);","if (tmp == NULL) goto failed;","res = obj2ast_expr(tmp, &lower, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2021-41208","code_chunks":["const int64_t stats_dims = logits_dims + hessians_dims;","const int64_t num_sparse_entries = feature_indices_t->dim_size(0);","const int32_t feature_dims = feature_shape(1);","DCHECK_LE(num_sparse_entries, batch_size * feature_dims);","","StatsPartitionMap stats_map;",""],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["}","asdl_seq_SET(body, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"body\\\" missing from For\");"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;"],"label":1}
{"cve":"CVE-2022-28068","code_chunks":["","\t\tbool is_string = (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string);","\t\tbool is_valid_string_form = is_string && attribute->string.content;","\t\t\t\t\t\t\t\tif (attribute->attr_name == DW_AT_comp_dir && is_valid_string_form) {","\t\t\tconst char *name = attribute->string.content;","\t\t\tsdb_set (sdb, \"DW_AT_comp_dir\", name, 0);","\t\t}"],"label":0}
{"cve":"CVE-2019-16346","code_chunks":["}","#endif \/* NGIFLIB_INDEXED_ONLY *\/","} else {","int j;","#ifndef NGIFLIB_INDEXED_ONLY","if(p->mode & NGIFLIB_MODE_INDEXED) {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (_PyObject_HasAttrId(obj, &PyId_lineno)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_lineno);","if (tmp == NULL) goto failed;","res = obj2ast_int(tmp, &lineno, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"Nonlocal field \\\"names\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(names, i, val);","            }","            Py_CLEAR(tmp);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep2_mul_sim_lot(ep2_t r, const ep2_t p[], const bn_t k[], int n) {","const int len = RLC_FP_BITS + 1;","int i, j, m, l, _l[4];","bn_t _k[4], q, x;","int8_t ptr, *naf = RLC_ALLOCA(int8_t, 4 * n * len);",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["fp48_t l;","ep_t _p;","fp8_t rx, ry, rz, qn;","int i, len = bn_bits(a) + 1;","int8_t s[RLC_FP_BITS + 1];","","fp48_null(l);"],"label":1}
{"cve":"CVE-2022-31624","code_chunks":["  {6, \"RENAME\", 0, SQLCOM_DDL},","  {8, \"TRUNCATE\", 0, SQLCOM_DDL},","  {0, NULL, 0, SQLCOM_DDL}","};","","","struct sa_keyword dml_keywords[]="],"label":0}
{"cve":"CVE-2017-12664","code_chunks":["(void) WriteBlobByte(image, byte);","(void) WriteBlob(image,tptr-tmpbuf,(unsigned char *) tmpbuf);","}","(void) CopyMagickMemory(lastrow,one_row,bytes_per_row);","}","else","(void) WriteBlob(image,bytes_per_row,one_row);"],"label":1}
{"cve":"CVE-2023-30188","code_chunks":["","LOGGER_SPEED_LAP(\"compile_command\")","","JSSmart<CJSValue> retNativeVal = m_context->runScript(commandA, try_catch);","if(try_catch->Check())","return false;",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["","j = 0;","fp12_copy(t, a);","for (i = 1; i < bn_bits(b); i++) {","fp12_sqr_pck(t, t);","if (bn_get_bit(b, i)) {","fp12_copy(u[j++], t);"],"label":1}
{"cve":"CVE-2023-36327","code_chunks":["result = 0;","if (!bn_is_prime_basic(a)) {","goto end;","}","","if (!bn_is_prime_rabin(a)) {"],"label":1}
{"cve":"CVE-2018-1068","code_chunks":["if (match_kern)","match_kern->match_size = ret;","","WARN_ON(type == EBT_COMPAT_TARGET && size_left);","match32 = (struct compat_ebt_entry_mwt *) buf;","}",""],"label":1}
{"cve":"CVE-2017-12595","code_chunks":["std::string const& object_description,","QPDFTokenizer& tokenizer, bool& empty,","StringDecrypter* decrypter, QPDF* context,","bool in_array, bool in_dictionary,","bool content_stream)","{",""],"label":1}
{"cve":"CVE-2020-26270","code_chunks":["        \/*paddingFill*\/ (void*)&padding_fill));","    return CudnnRnnSequenceTensorDescriptor(","        parent, max_seq_length, batch_size, data_size, data_type,","        std::move(data_desc), std::move(tensor_desc));","  }","","  const cudnnTensorDescriptor_t* handles() const { return handles_.data(); }"],"label":0}
{"cve":"CVE-2022-36017","code_chunks":["        ctx, TensorShapeUtils::IsScalar(input_max.shape()),","        errors::InvalidArgument(\"`input_max` must be rank 0 but is rank \",","                                input_max.dims()));","    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(requested_output_min.shape()),","                errors::InvalidArgument(","                    \"`requested_output_min` must be rank 0 but is rank \",","                    requested_output_min.dims()));"],"label":0}
{"cve":"CVE-2022-35972","code_chunks":["void Compute(OpKernelContext* ctx) override {","const Tensor& input = ctx->input(0);","","const Tensor& input_min = ctx->input(1);","const Tensor& input_max = ctx->input(2);","const Tensor& requested_output_min = ctx->input(3);"],"label":0}
{"cve":"PYSEC-2022-104","code_chunks":["bool found_unknown_shapes = false;","const auto& op_info = op_context.op_info;","TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,","OpDimensionsFromInputs(op_info.inputs(1).shape(), op_info,","&found_unknown_shapes));",""],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[]={0,0};","","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":1}
{"cve":"CVE-2023-27772","code_chunks":["                printf(\"failed to operate simpleIOGenericIO\/GGIO1.SPCSO3\\n\");","            }","","            MmsValue_delete(ctlVal);","","            \/* Wait for command termination message *\/","            Thread_sleep(1000);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["Subgraph* subgraph = reinterpret_cast<Subgraph*>(context->impl_);","","const TfLiteTensor* input_resource_id_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputVariableId,","&input_resource_id_tensor));","const TfLiteTensor* input_value_tensor;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["    isinstance = PyObject_IsInstance(obj, (PyObject*)Return_type);","    if (isinstance == -1) {","        return 1;","    }","    if (isinstance) {","        expr_ty value;",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["return FALSE;","","if (blockLen != 8)","return FALSE;","","if (numCapsets != 1)"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","auto* first_new_tensor = static_cast<int*>(node->user_data);","","const TfLiteTensor* tensor0 = GetInput(context, node, 0);","TfLiteTensor* tensor1 = GetOutput(context, node, 0);"],"label":1}
{"cve":"CVE-2023-5595","code_chunks":["","\ttxt = (GF_Tx3gSampleEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TX3G);","\tif (!txt) return GF_OUT_OF_MEM;","\ttxt->dataReferenceIndex = dataRefIndex;","\tgf_list_add(trak->Media->information->sampleTable->SampleDescription->child_boxes, txt);","\tif (outDescriptionIndex) *outDescriptionIndex = gf_list_count(trak->Media->information->sampleTable->SampleDescription->child_boxes);",""],"label":0}
{"cve":"CVE-2017-6350","code_chunks":["uep->ue_size = undo_read_4c(bi);","if (uep->ue_size > 0)","{","array = (char_u **)U_ALLOC_LINE(sizeof(char_u *) * uep->ue_size);","if (array == NULL)","{","*error = TRUE;"],"label":1}
{"cve":"PYSEC-2021-566","code_chunks":["const Tensor& params) {","int64_t batch_size = 1;      for (int idx = 0; idx < batch_dims_; ++idx) {","batch_size *= params.dim_size(idx);","}","OP_REQUIRES(","ctx, batch_size != 0,"],"label":0}
{"cve":"CVE-2022-35974","code_chunks":["TEST_F(QuantizeDownAndShrinkRangeTest, HandCrafted) {","  TF_ASSERT_OK(NodeDefBuilder(\"quantize_down_and_shrink_range_op\",","                              \"QuantizeDownAndShrinkRange\")","                   .Input(FakeInput(DT_QINT32))","                   .Input(FakeInput(DT_FLOAT))","                   .Input(FakeInput(DT_FLOAT))","                   .Attr(\"Tinput\", DataTypeToEnum<qint32>::v())"],"label":0}
{"cve":"CVE-2020-11097","code_chunks":["size_t cbAvPair = cbAvPairList;","NTLM_AV_PAIR* pAvPair = pAvPairList;","","if (!ntlm_av_pair_check(pAvPair, cbAvPair))","pAvPair = NULL;",""],"label":1}
{"cve":"CVE-2017-12595","code_chunks":["while (static_cast<size_t>(input->tell()) < length)","{","QPDFObjectHandle obj =","parseInternal(input, \"content\", tokenizer, empty,"],"label":1}
{"cve":"CVE-2016-10129","code_chunks":["\tgit_vector_foreach(&push->remote->refs, i, head) {","\t\tgit_oid_fmt(hex, &head->oid);","\t\tfprintf(stderr, \"%s (%s)\\n\", hex, head->name);","\t}","","\tgit_vector_foreach(&push->specs, i, spec) {","\t\tgit_oid_fmt(hex, &spec->roid);"],"label":0}
{"cve":"CVE-2020-13396","code_chunks":["\tStream_Free(s, FALSE);","\treturn status;","}","","SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)","{","\twStream* s;"],"label":0}
{"cve":"PYSEC-2022-67","code_chunks":["TfLiteIntArray* TfLiteIntArrayCreate(int size) {","size_t alloc_size = TfLiteIntArrayGetSizeInBytes(size);","if (alloc_size <= 0) return NULL;","TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);","if (!ret) return ret;"],"label":0}
{"cve":"CVE-2021-46463","code_chunks":["rejected->args_count = 1;","rejected->u.native = njs_await_rejected;","","njs_set_object(&val, &promise->object);","njs_set_function(&on_fulfilled, fulfilled);","njs_set_function(&on_rejected, rejected);",""],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["int j;","for (j = 0; j < a->num_attr; j++) {","const char *setto = a->state[j].setto;","if (setto == ATTR__TRUE ||"],"label":1}
{"cve":"CVE-2019-13309","code_chunks":["","          swap_index=(-1);","          flags=ParseGeometry(arg1,&geometry_info);","          if ((flags & RhoValue) == 0)","            CLIWandExceptArgBreak(OptionError,\"InvalidArgument\",option,arg1);","          index=(ssize_t) geometry_info.rho;","          if ((flags & SigmaValue) != 0)"],"label":0}
{"cve":"CVE-2021-41208","code_chunks":["                                                     &output_thresholds_t));","      auto output_thresholds_vec = output_thresholds_t->vec<int32>();","            Tensor* output_left_node_contribs_t;","      OP_REQUIRES_OK(context, output_left_node_contribs_list.allocate(","                                  feature_idx, {num_nodes, 1},","                                  &output_left_node_contribs_t));","      auto output_left_node_contribs_matrix ="],"label":0}
{"cve":"PYSEC-2020-117","code_chunks":["","    Tensor* d_values_t;","    OP_REQUIRES_OK(context, context->allocate_output(","                                \"d_values\", TensorShape({N}), &d_values_t));","    auto d_values = d_values_t->vec<T>();","    Tensor* d_default_value_t;","    OP_REQUIRES_OK(context,"],"label":0}
{"cve":"CVE-2019-25049","code_chunks":["#define PTHREAD_MUTEX_INITIALIZER\t{ 0, 0, 0, 0, 0, 0 }"],"label":1}
{"cve":"CVE-2017-12664","code_chunks":["}","}","else","{","bit=8-bits_per_pixel;","for (x=0; x < (ssize_t) image->columns; x++)"],"label":1}
{"cve":"CVE-2020-36316","code_chunks":["md_mgf(mask, k_len - RLC_MD_LEN - 1, h1, RLC_MD_LEN);","bn_read_bin(t, mask, k_len - RLC_MD_LEN - 1);","for (int i = 0; i < t->used; i++) {","m->dp[i] ^= t->dp[i];","}","bn_write_bin(mask, k_len - RLC_MD_LEN - 1, m);"],"label":1}
{"cve":"CVE-2020-27795","code_chunks":["static bool anal_fcn_data (RCore *core, const char *input) {","RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);","ut32 fcn_size = r_anal_function_size_from_entry (fcn);","if (fcn) {","int i;","bool gap = false;"],"label":1}
{"cve":"CVE-2017-1000494","code_chunks":["    for(nv = pdata.l_head;","        nv != NULL;","        nv = nv->l_next)","    {","        printf(\"%s = %s\\n\", nv->name, nv->value);","    }","    ClearNameValueList(&pdata);"],"label":0}
{"cve":"CVE-2023-28101","code_chunks":["p = res->str;","","len = (res->str + strlen (res->str)) - p;","if (len + strlen ((char *) items->pdata[i]) + 2 >= cols)","g_string_append_printf (res, \",\\n        %s\", (char *) items->pdata[i]);"],"label":1}
{"cve":"CVE-2018-1128","code_chunks":["        if (is_promote)","          op->set_promote();","        op->add_class(cname, is_read, is_write, cls->whitelisted);","\tbreak;","      }","","                        op->set_read();"],"label":0}
{"cve":"CVE-2023-27114","code_chunks":["op->txt = r_str_newf (\"%s %d\", opdef->txt, op->val);","}","op->len += n;","}","break;","{"],"label":1}
{"cve":"PYSEC-2021-251","code_chunks":["            \") must be a multiple of the size of out_type (\", sizeof(T), \")\"));","","    OP_REQUIRES(context, fixed_length > 0,","                errors::InvalidArgument(\"fixed_length (\", fixed_length,","                                        \") must be greater than zero.\"));","","    int width = fixed_length \/ sizeof(T);"],"label":0}
{"cve":"PYSEC-2022-69","code_chunks":["      int orig_dim = traversal_order_[i];","      orig_idx[orig_dim] = indices[i];","    }","","    for (; i < indices.size(); i++) {","      const int block_idx = traversal_order_[i] - orig_rank;","      const int orig_dim = block_map_[block_idx];"],"label":0}
{"cve":"CVE-2019-13308","code_chunks":["              {","                MagickBooleanType","                  thread_status;","","                if (is_gray != MagickFalse)","                  thread_status=ForwardFourierTransformChannel(image,","                    GrayChannels,modulus,fourier_image,exception);"],"label":0}
{"cve":"CVE-2017-3731","code_chunks":["const unsigned char *in, size_t len)","{","EVP_AES_XTS_CTX *xctx = EVP_C_DATA(EVP_AES_XTS_CTX,ctx);","if (!xctx->xts.key1 || !xctx->xts.key2)","return 0;","if (!out || !in || len < AES_BLOCK_SIZE)"],"label":1}
{"cve":"CVE-2018-25032","code_chunks":["    }","    s->insert = 0;","    if (flush == Z_FINISH) {","        FLUSH_BLOCK(s, 1);","        return finish_done;","    }","    if (s->sym_next)"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    if (ShouldStepInRecursion(params, stack, stack_idx, num_words)) {","                        stack[stack_idx]++;","      stack_idx++;","      if (stack_idx < params->ngram_size) {","        stack[stack_idx] = stack[stack_idx - 1];","      }","    } else {"],"label":0}
{"cve":"CVE-2022-0695","code_chunks":["\tif (var->wType != 0 && var->wType != 1) {","\t\tpe_printf (\"Warning: check (Var wType)\\n\");","\t\tfree_Var (var);","\t\treturn NULL;","\t}","","\tvar->szKey = (ut16*) malloc (UT16_ALIGN (TRANSLATION_UTF_16_LEN));  \tif (!var->szKey) {"],"label":0}
{"cve":"CVE-2016-8654","code_chunks":["abort();","}","}","","if (numrows >= 2) {","hstartcol = (numrows + 1 - parity) >> 1;"],"label":1}
{"cve":"CVE-2018-20176","code_chunks":["\t\t\t\t\treplen = revcode;","\t\t\t\t\tcollen = 0;","\t\t\t\t}","\t\t\t\twhile (indexw < width && collen > 0)","\t\t\t\t{","\t\t\t\t\tcolor = CVAL(in);","\t\t\t\t\t*out = color;"],"label":0}
{"cve":"CVE-2019-8906","code_chunks":["\t\t\t\treturn -1;","\t\t\t}","\t\t} else","\t\t\tlen = 0;","","\t\t\/* Things we can determine when we seek *\/","\t\tswitch (xph_type) {"],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["  openEntity->startTagLevel = parser->m_tagLevel;","  openEntity->betweenDecl = betweenDecl;","  openEntity->internalEventPtr = NULL;","  openEntity->internalEventEndPtr = NULL;","  textStart = (const char *)entity->textPtr;","  textEnd = (const char *)(entity->textPtr + entity->textLen);","  \/* Set a safe default value in case 'next' does not get set *\/"],"label":0}
{"cve":"CVE-2018-18311","code_chunks":["dVAR;","char *envstr;","const Size_t nlen = strlen(nam);","Size_t vlen;","","if (!val) {"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["            len = PyList_GET_SIZE(tmp);","            items = _Ta3_asdl_seq_new(len, arena);","            if (items == NULL) goto failed;","            for (i = 0; i < len; i++) {","                withitem_ty val;","                res = obj2ast_withitem(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\tep_new(q);","","\t\tep_copy(t[0], p);","\t\tep_dbl(q, p);","","#if defined(EP_MIXED)","\t\tep_norm(q, q);"],"label":0}
{"cve":"CVE-2020-35538","code_chunks":["#define WRITE_TWO_PIXELS_LE(addr, pixels) { \\","  ((INT16 *)(addr))[0] = (INT16)(pixels); \\","  ((INT16 *)(addr))[1] = (INT16)((pixels) >> 16); \\","}","#define WRITE_TWO_PIXELS_BE(addr, pixels) { \\","  ((INT16 *)(addr))[1] = (INT16)(pixels); \\","  ((INT16 *)(addr))[0] = (INT16)((pixels) >> 16); \\"],"label":0}
{"cve":"CVE-2022-4399","code_chunks":["return 1;","}else{","if (asprintf(&sql, \"UPDATE nodau set text=?, encrypted='false' WHERE name=?\") < 0)","return 1;","}",""],"label":0}
{"cve":"CVE-2023-41337","code_chunks":["if (delta < 0)","delta = -delta;","if (tls->ctx->max_early_data_size != 0 && delta <= PTLS_EARLY_DATA_MAX_DELAY)","*accept_early_data = 1;","}","\/* check server-name *\/"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\tep2_dbl(r, r);","","\t\t\tn = naf[i];","\t\t\tif (n > 0) {","\t\t\t\tep2_add(r, r, t[n \/ 2]);","\t\t\t}","\t\t\tif (n < 0) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* axis_tensor;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kAxisTensor, &axis_tensor));","int axis = GetTensorData<int32_t>(axis_tensor)[0];"],"label":0}
{"cve":"CVE-2022-36019","code_chunks":["","AddInputFromArray<qint32>(TensorShape({value_count}),","{-(1 << 23), 0, (1 << 23)});","AddInputFromArray<float>(TensorShape({1}), {-256.0f});","AddInputFromArray<float>(TensorShape({1}), {256.0f});"],"label":1}
{"cve":"CVE-2022-31621","code_chunks":["\t\tstream_ctxt->dest_file = ds_open(dest_ctxt, path, mystat);","\t}","\tpthread_mutex_unlock(&stream_ctxt->mutex);","\tif (stream_ctxt->dest_file == NULL) {","\t\treturn NULL;","\t}",""],"label":0}
{"cve":"CVE-2022-0695","code_chunks":["\tut64 slide = 0;","\tif (cache->n_hdr > 1) {","\t\treturn slide;","\t}","\tut64 *classlist = malloc (64);","\tif (!classlist) {","\t\tgoto beach;"],"label":0}
{"cve":"CVE-2023-29007","code_chunks":["strbuf_reset(&copystr);","}","","offset = section_name_match(&buf[i], old_name);","if (offset > 0) {","ret++;","if (new_name == NULL) {"],"label":1}
{"cve":"CVE-2018-20178","code_chunks":["ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);","xfree(bmpdata);","continue;","}","",""],"label":1}
{"cve":"CVE-2021-36978","code_chunks":["}","}","}","getNext()->write(this->outbuf, bytes);","this->offset = 0;","}"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["        assertx(isIntType(type(line)));","        frame->line = val(line).num;","      }","","      auto const file_name = bt_frame->get(s_file.get());","      if (file_name.is_init()) {","        assertx(isStringType(type(file_name)));"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["GetInput(context, node, kRecurrentWeightsTensor);","const TfLiteTensor* bias = GetInput(context, node, kBiasTensor);","TfLiteTensor* hidden_state =","&context->tensors[node->inputs->data[kHiddenStateTensor]];","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);",""],"label":1}
{"cve":"CVE-2018-5811","code_chunks":["void CLASS nikon_coolscan_load_raw()","{","int bufsize = width*3*tiff_bps\/8;","if(tiff_bps <= 8)","gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,255);","else"],"label":1}
{"cve":"CVE-2016-10093","code_chunks":["tstrip_t strip = 0;","","(void) imagewidth; (void) spp;","(void) TIFFGetFieldDefaulted(out, TIFFTAG_ROWSPERSTRIP, &rowsperstrip);","for (row = 0; row < imagelength; row += rowsperstrip) {","uint32 nrows = (row+rowsperstrip > imagelength) ?"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {","return 1;"],"label":1}
{"cve":"CVE-2016-6912","code_chunks":["gdImageWebpCtx(im, out, -1);","rv = gdDPExtractData(out, size);","out->gd_free(out);",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["bool IsPadOpSupported(const TfLiteRegistration* registration,","const TfLiteNode* node, TfLiteContext* context) {","const TfLiteTensor* padding;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &padding));","if (!IsConstantTensor(padding)) {","TF_LITE_KERNEL_LOG(context,","\"%s: Only constant padding is supported for PAD.\","],"label":0}
{"cve":"CVE-2023-25675","code_chunks":["","    xla::Shape output_shape = xla::ShapeUtil::MakeShape(dtype, {output_size});","    xla::ScatterDimensionNumbers scatter_dnums;","    scatter_dnums.set_index_vector_dim(1);","    scatter_dnums.add_inserted_window_dims(0);","    scatter_dnums.add_scatter_dims_to_operand_dims(0);",""],"label":0}
{"cve":"CVE-2021-32786","code_chunks":["char **err_desc) {","apr_uri_t uri;","const char *c_host = NULL;","apr_hash_index_t *hi = NULL;","size_t i = 0;","char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);"],"label":0}
{"cve":"CVE-2019-17178","code_chunks":["while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; \/*trim zeroes*\/","tree->maxbitlen = maxbitlen;","tree->numcodes = (unsigned)numcodes; \/*number of symbols*\/","tree->lengths = (unsigned*)realloc(tree->lengths, numcodes * sizeof(unsigned));","if(!tree->lengths) return 83; \/*alloc fail*\/","\/*initialize all lengths to 0*\/","memset(tree->lengths, 0, numcodes * sizeof(unsigned));"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\tbn_new(n);","\t\tif (buf == NULL) {","\t\t\tRLC_THROW(ERR_NO_MEMORY);","\t\t}","","\t\tfor (int i = 0; i < slen; i++) {","\t\t\tlen = g2_size_bin(z[i], 0);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);"],"label":1}
{"cve":"CVE-2022-24786","code_chunks":["void *buf,","pj_size_t *length)","{","pjmedia_rtcp_fb_common *hdr;","unsigned len;","","PJ_ASSERT_RETURN(session && buf && length, PJ_EINVAL);"],"label":0}
{"cve":"CVE-2021-42782","code_chunks":["","static int","iasecc_get_challenge(struct sc_card *card, u8 * rnd, size_t len)","{","\t\/* As IAS\/ECC cannot handle other data length than 0x08 *\/","\tu8 rbuf[8];","\tsize_t out_len;"],"label":0}
{"cve":"CVE-2024-0727","code_chunks":["bags = PKCS12_unpack_p7data(p7);","} else if (bagnid == NID_pkcs7_encrypted) {","bags = PKCS12_unpack_p7encdata(p7, oldpass, -1);","if (!alg_get(p7->d.encrypted->enc_data->algorithm,","&pbe_nid, &pbe_iter, &pbe_saltlen, &cipherid))","goto err;"],"label":1}
{"cve":"CVE-2016-10161","code_chunks":["\tchar *str;","","\tlen = parse_uiv(start + 2);","\tmaxlen = max - YYCURSOR;","\tif (maxlen < len) {","\t\t*p = start + 2;","\t\treturn 0;"],"label":0}
{"cve":"CVE-2022-0413","code_chunks":["&& regmatch.endpos[0].lnum == 0","&& matchcol == regmatch.endpos[0].col)","{","if (sub_firstline[matchcol] == NUL)","skip_match = TRUE;","else"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* input_weights;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","const TfLiteTensor* recurrent_weights;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["}","else {","int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["    const char *literal_start = s;","    int result = 0;","","    assert(*literal == NULL);","    while (s < end) {","        char ch = *s++;","        if (!raw && ch == '\\\\' && s < end) {"],"label":0}
{"cve":"CVE-2022-36019","code_chunks":["const Tensor& input = context->input(0);","","float input_min = context->input(1).flat<float>()(0);","float input_max = context->input(2).flat<float>()(0);","float input_scale = (input_max - input_min) \/ 255.0f;",""],"label":1}
{"cve":"CVE-2022-35971","code_chunks":["input_quantized.flat<quint8>());","AddInputFromArray<quint8>(bias_quantized.shape(),","bias_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});","AddInputFromArray<float>(TensorShape({1}), {input_max});"],"label":1}
{"cve":"PYSEC-2021-447","code_chunks":["Status ValidateInput(const OpInputList& indices_list_in,","const OpInputList& values_list_in,","const OpInputList& shapes_list_in,","const OpInputList& dense_list_in) {","const auto size = indices_list_in.size();","for (int i = 0; i < size; i++) {","if (!TensorShapeUtils::IsMatrix(indices_list_in[i].shape())) {"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    }","    if (isinstance) {","        expr_ty key;","        expr_ty value;","        asdl_seq* generators;","","        if (_PyObject_LookupAttrId(obj, &PyId_key, &tmp) < 0) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["fw_hidden_state_quantized->type = fw_input_weights->type;","fw_hidden_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(fw_hidden_state_quantized->dims,"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["        reinterpret_cast<TfLiteAffineQuantization*>(state->quantization.params);","    auto* weight_time_params = reinterpret_cast<TfLiteAffineQuantization*>(","        weights_time->quantization.params);","    auto* output_params = reinterpret_cast<TfLiteAffineQuantization*>(","        output->quantization.params);","    const double effective_scale_1 = input_params->scale->data[0] *","                                     weights_feature_params->scale->data[0] \/"],"label":0}
{"cve":"CVE-2021-31566","code_chunks":["fchmod(fd, p->mode);","else","#endif","chmod(p->name, p->mode);","}","if (p->fixup & TODO_ACLS)","archive_write_disk_set_acls(&a->archive, fd,"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["inline void StringData::setSize(int len) {"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["","    size_t size_in_bytes;","  if (algorithm_desc.workspace_size()) {","    size_in_bytes = *algorithm_desc.workspace_size();","  } else {","    RETURN_IF_CUDNN_ERROR(cudnnGetConvolutionBackwardFilterWorkspaceSize(","        cudnn.handle(),"],"label":0}
{"cve":"CVE-2022-2526","code_chunks":["static int on_stream_io(sd_event_source *es, int fd, uint32_t revents, void *userdata) {","_cleanup_(dns_stream_unrefp) DnsStream *s = dns_stream_ref(userdata); \/* Protect stream while we process it *\/","int r;","","assert(s);"],"label":0}
{"cve":"CVE-2018-17204","code_chunks":["if (strcmp(\"hash\", prop->selection_method)","&& strcmp(\"dp_hash\", prop->selection_method)) {","OFPPROP_LOG(&bad_ofmsg_rl, false,","\"ntr selection method '%s' is not supported\",","prop->selection_method);","return OFPERR_OFPBPC_BAD_VALUE;"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["auto init_status = executor->Init(config.device_options);","if (!init_status.ok()) {","return tsl::Status(","port::error::INTERNAL,","absl::StrFormat(","\"failed initializing StreamExecutor for CUDA device ordinal %d: %s\",","config.ordinal, init_status.ToString()));"],"label":1}
{"cve":"CVE-2022-28796","code_chunks":["\t * past that stage (here we use the fact that BH_Shadow is set under","\t * bh_state lock together with refiling to BJ_Shadow list and at this","\t * point we know the buffer doesn't have BH_Shadow set).","\t *","\t * Subtle point, though: if this is a get_undo_access, then we will be","\t * relying on the frozen_data to contain the new value of the","\t * committed_data record after the transaction, so we HAVE to force the"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["struct all_attrs_item *all_attrs, int rem)","{","for (; rem > 0 && stack; stack = stack->prev) {","unsigned i;","const char *base = stack->origin ? stack->origin : \"\";","","for (i = stack->num_matches; 0 < rem && 0 < i; i--) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["    TfLiteTensor* output_state_zp;","    TF_LITE_ENSURE_OK(context,","                      GetTemporarySafe(context, node, kOutputStateZeroPoints,","                                       &output_state_zp));","    output_state_zp->type = kTfLiteFloat32;","    output_state_zp->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqualsArray(output_state_zp->dims, 1, scaling_dims)) {"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["auto it = name_map_.find(absl::AsciiStrToLower(target));","if (it == name_map_.end()) {","return tsl::Status(","port::error::NOT_FOUND,","absl::StrCat(\"Could not find registered platform with name: \\\"\", target,","\"\\\". Available platform names are: \",","absl::StrJoin(InitializedPlatformNamesWithFilter(), \" \")));"],"label":1}
{"cve":"CVE-2022-36019","code_chunks":["                            bias_quantized.flat<quint8>());","  AddInputFromArray<float>(TensorShape({}), {input_min});","  AddInputFromArray<float>(TensorShape({}), {input_max});","  AddInputFromArray<float>(TensorShape({}), {bias_min});","  AddInputFromArray<float>(TensorShape({}), {bias_max});","  TF_ASSERT_OK(RunOpKernel());","  const Tensor& output_quantized = *GetOutput(0);"],"label":0}
{"cve":"PYSEC-2021-447","code_chunks":["const OpInputList& values_list_in,","const OpInputList& shapes_list_in,","const OpInputList& dense_list_in,","const DataType& internal_type) {","const auto size = indices_list_in.size();","bool check_type = internal_type != DT_INVALID;"],"label":0}
{"cve":"CVE-2021-32791","code_chunks":["","\t\/* see if encryption is turned on *\/","\tif (encrypted == 0) {","\t\t*value = apr_pstrdup(r->pool, cache_value);","\t\tgoto out;","\t}",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  const TfLiteType type = input1->type;","  if (type != kTfLiteInt32 && type != kTfLiteFloat32 && type != kTfLiteInt64) {","    context->ReportError(context, \"Type '%s' is not supported by floor_mod.\",","                         TfLiteTypeGetName(type));","    return kTfLiteError;","  }","  output->type = type;"],"label":0}
{"cve":"CVE-2018-14882","code_chunks":["}","return;","","ND_PRINT((ndo, \"[|icmp6]\"));","}","","static void"],"label":1}
{"cve":"CVE-2022-28072","code_chunks":["\tif (len < 4) {","\t\treturn 0;","\t}","\tdata = r_read_le32 (buf);","\tint size = hexagon_disasm_instruction (data, &hi, (ut32) addr);","\top->size = size;","\tif (size <= 0) {"],"label":0}
{"cve":"CVE-2019-19947","code_chunks":["\tcmd->id = CMD_SET_CTRL_MODE;","\tcmd->len = CMD_HEADER_LEN + sizeof(struct kvaser_cmd_ctrl_mode);","\tcmd->u.ctrl_mode.tid = 0xff;","\tcmd->u.ctrl_mode.channel = priv->channel;","","\tif (priv->can.ctrlmode & CAN_CTRLMODE_LISTENONLY)","\t\tcmd->u.ctrl_mode.ctrl_mode = KVASER_CTRL_MODE_SILENT;"],"label":0}
{"cve":"CVE-2020-1898","code_chunks":["int err = fb_compact_unserialize_from_buffer(value, buf, n, p);","if (err) {","return err;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int n0, n1;","int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], *_k, *_m;","fp2_t r, t0[1 << (EP_WIDTH - 2)];","fp2_t s, t1[1 << (EP_WIDTH - 2)];","size_t l, l0, l1;",""],"label":0}
{"cve":"CVE-2022-0173","code_chunks":["}","while (entry && r_io_submap_to (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {","RRBNode *next = r_rbnode_next (entry);","r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);","entry = next;","}","if (entry && r_io_submap_from (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["\"san_names should have at least one name after SPIFFE cert validation\");","","for (const GENERAL_NAME* general_name : san_names.get()) {","for (const auto& config_san_matcher : subject_alt_name_matchers_) {","if (config_san_matcher->match(general_name)) {","return true;","}"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["prod_scaling_factors->type = kTfLiteFloat32;","prod_scaling_factors->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(prod_scaling_factors->dims, 1,"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["Suite_kind=4};"],"label":1}
{"cve":"CVE-2020-11097","code_chunks":["static BOOL ntlm_av_pair_check(NTLM_AV_PAIR* pAvPair, size_t cbAvPair)","{","if (!pAvPair || cbAvPair < sizeof(NTLM_AV_PAIR))","return FALSE;","return cbAvPair >= ntlm_av_pair_get_next_offset(pAvPair);","}"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["\t * We did not find double-LF that separates the header","\t * and the body.  Not having a body is not a crime but","\t * we do want to see the terminating LF for the last header","\t * line.","\t *\/","\tif (size && buffer[size - 1] == '\\n')","\t\treturn 0;"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_cert.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_key.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/ca_cert.pem\"","- exact: localhost"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInput, &input));","const TfLiteTensor* axis;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));"],"label":0}
{"cve":"CVE-2023-52076","code_chunks":["{","g_set_error_literal (error,","EV_DOCUMENT_ERROR,","EV_DOCUMENT_ERROR_INVALID,","_(\"could not retrieve container file\"));","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","","  output->type = input->type;"],"label":0}
{"cve":"CVE-2021-23520","code_chunks":["","if (targetFile.exists())","{","if (! shouldOverwriteFiles)","return Result::ok();","","if (! targetFile.deleteFile())"],"label":1}
{"cve":"CVE-2016-5357","code_chunks":["\t\tfor (p = &line[0]; g_ascii_isspace(*p); p++)","\t\t\t;","\t\t\/* packets are delimited with empty lines *\/","\t\tif (*p == '\\0') {","\t\t\tbreak;","\t\t}",""],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["Create(icon_list[page].bWidth,icon_list[page].bHeight, c, CXIMAGE_FORMAT_ICO);","RGBQUAD pal[256];","if (bih.biClrUsed)","hFile->Read(pal,bih.biClrUsed*sizeof(RGBQUAD), 1);","else","hFile->Read(pal,head.biClrUsed*sizeof(RGBQUAD), 1);"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["            \tCanon_WBpresets(2,2);","            \tfseek (ifp, save1+(0x4b<<1), SEEK_SET);","              \tCanon_WBCTpresets (1);\t            }","            break;","            imgdata.makernotes.canon.CanonColorDataVer = 2;\t            {","            \tfseek (ifp, save1+(0x27<<1), SEEK_SET);","            \tCanon_WBpresets(2,12);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["            res = obj2ast_identifier(tmp, &id, arena);","            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }","        if (lookup_attr_id(obj, &PyId_ctx, &tmp) < 0) {","            return 1;","        }"],"label":0}
{"cve":"PYSEC-2021-811","code_chunks":["slice = tss->Slices().begin()->second.slice;","}","","std::unique_ptr<tensorflow::Tensor> t(new tensorflow::Tensor(type, shape));","bool success = false;","","#define READER_COPY(dt)                                                  \\"],"label":1}
{"cve":"CVE-2021-3995","code_chunks":["\t *\/","\tif (buf) {","\t\tint syserr = mnt_context_get_syscall_errno(cxt);","","\t\tswitch (syserr) {","\t\t\tsnprintf(buf, bufsz, _(\"invalid block device\"));\t\/* ??? *\/","\t\t\tbreak;"],"label":0}
{"cve":"CVE-2022-28796","code_chunks":["","write_lock(&journal->j_state_lock);","++journal->j_barrier_count;",""],"label":1}
{"cve":"CVE-2019-15162","code_chunks":["#ifdef _WIN32","\/*","* Warning: the user which launches the process must have the","* SE_TCB_NAME right.","* This corresponds to have the \"Act as part of the Operating System\"","* turned on (administrative tools, local security settings, local"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["                                          n_fw_cell));","","    const TfLiteTensor* aux_input =","      GetOptionalInputTensor(context, node, kAuxInputTensor);","  const TfLiteTensor* fw_aux_input_to_input_weights =","      GetOptionalInputTensor(context, node, kFwAuxInputToInputWeightsTensor);","  const TfLiteTensor* fw_aux_input_to_forget_weights ="],"label":0}
{"cve":"CVE-2022-29776","code_chunks":["unsigned i, size, end;","char tag[4], date[64], month[64];","static const char mon[12][4] =","{ \"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\" };","struct tm t;",""],"label":0}
{"cve":"CVE-2016-6871","code_chunks":["static Variant HHVM_FUNCTION(bcpowmod, const String& left, const String& right,","const String& modulus, int64_t scale \/* = -1 *\/) {","if (scale < 0) scale = BCG(bc_precision);","bc_num first, second, mod, result;","bc_init_num(&first);","bc_init_num(&second);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["      for (int i = 0; i < size; i++) {","    sorting_buffer[i] = input_data[i];","  }","","    for (int i = 1; i < size; i++) {","    for (int j = i; j > 0 && sorting_buffer[j] < sorting_buffer[j - 1]; j--) {","      std::swap(sorting_buffer[j], sorting_buffer[j - 1]);"],"label":0}
{"cve":"CVE-2023-25136","code_chunks":["\t\tif ((p = match_filter_denylist(p,","\t\t    \"diffie-hellman-group-exchange-sha256,\"","\t\t    \"diffie-hellman-group-exchange-sha1\")) == NULL)","\t\t\tfatal(\"match_filter_denylist failed\");","\t\tfree(cp);","\t}","\tdebug2_f(\"compat KEX proposal: %s\", p);"],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["char line[MAX_URL_SIZE];","int err = 0;","","s->chunksize = -1;","","for (;;) {","if ((err = http_get_line(s, line, sizeof(line))) < 0)"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* params;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kParams, &params));","const TfLiteTensor* indices;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kIndices, &indices));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["    }","","    ufunc->uf_def_status = UF_COMPILING;","","    CLEAR_FIELD(cctx);","","    cctx.ctx_compile_type = compile_type;"],"label":0}
{"cve":"CVE-2022-1809","code_chunks":["static bool vtable_is_value_in_text_section(RVTableContext *context, ut64 curAddress, ut64 *value) {","ut64 curAddressValue = UT64_MAX;","if (!context->read_addr (context->anal, curAddress, &curAddressValue)) {","return false;","}"],"label":0}
{"cve":"CVE-2021-29536","code_chunks":["void Compute(OpKernelContext* ctx) override {","ReshapeOp::Compute(ctx);","","const float input_min_float = ctx->input(2).flat<float>()(0);","const float input_max_float = ctx->input(3).flat<float>()(0);","Tensor* output_min = nullptr;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["","\t\t\t\t\t\tif (!rdp_read_brush_capability_set(&sub, settings))","\t\t\t\t\t\t\treturn FALSE;","","\t\t\t\t\t\tbreak;","","\t\t\t\t\t\tif (!rdp_read_glyph_cache_capability_set(&sub, settings))"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["context, input, filter, bias, output, activation, multiplier, shift,","output_activation_min, output_activation_max, per_channel_multiplier,","per_channel_shift, affine_quantization->scale->size);","}"],"label":1}
{"cve":"CVE-2017-6439","code_chunks":["    uint64_t buff_len = 0;","","        if (!plist || !plist_bin || *plist_bin || !length)","        return;","","        objects = ptr_array_new(256);","        ref_table = hash_table_new(plist_data_hash, plist_data_compare, free);"],"label":0}
{"cve":"CVE-2021-29463","code_chunks":["io_->read(chunkId.pData_, WEBP_TAG_SIZE);","io_->read(size_buff, WEBP_TAG_SIZE);","long size = Exiv2::getULong(size_buff, littleEndian);","DataBuf payload(size);","io_->read(payload.pData_, payload.size_);","byte c;"],"label":1}
{"cve":"CVE-2019-10672","code_chunks":["","\tnode_type = (uint8_t)fgetc(reader->fhd);","\tnode_level = (uint8_t)fgetc(reader->fhd);","\tentries_used = (uint16_t)readValue(reader, 2);","\tif(entries_used>0x1000)","\t\treturn MYSOFA_UNSUPPORTED_FORMAT;","\taddress_of_left_sibling = readValue(reader,"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params =","reinterpret_cast<TfLiteLocalResponseNormParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2023-4322","code_chunks":["\t\t\t\t}","\t\t\t\tif (read_at && i == len - 1) {","#if 0","\t\t\t\t\t\t\t\t\t\tint new_buf_len = len + 1 + BUFSIZE_INC;","\t\t\t\t\tut8 *new_buf = calloc (new_buf_len, 1);","\t\t\t\t\tif (new_buf) {","\t\t\t\t\t\tfree (buf);"],"label":0}
{"cve":"CVE-2018-8793","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2022-0173","code_chunks":["RIOMapRef *mapref = _mapref_from_map (map);","if (!mapref) {","return false;","}","RIOSubMap *sm = r_io_submap_new (io, mapref);","if (!sm) {","free (mapref);"],"label":0}
{"cve":"CVE-2022-0523","code_chunks":["\tpyc_object *ret = NULL;","\tut32 i = 0;","","\tret = R_NEW0 (pyc_object);","\tif (!ret) {","\t\treturn NULL;","\t}"],"label":0}
{"cve":"CVE-2018-8791","code_chunks":["\t\t\t\t\t\tx = x >> 1;","\t\t\t\t\t\tcolor = x;","\t\t\t\t\t}","\t\t\t\t\tx = last_line[indexw * 4] + color;","\t\t\t\t\t*out = x;","\t\t\t\t\tout += 4;","\t\t\t\t\tindexw++;"],"label":0}
{"cve":"PYSEC-2022-79","code_chunks":["auto* arg = t->mutable_args(i);","if (arg->type_id() == TFT_VAR) {","const auto* attr = attrs.Find(arg->s());","DCHECK(attr != nullptr);","if (attr->value_case() == AttrValue::kList) {","const auto& attr_list = attr->list();","arg->set_type_id(TFT_PRODUCT);"],"label":1}
{"cve":"PYSEC-2020-318","code_chunks":["OP_REQUIRES_OK(ctx, ctx->GetAttr(\"width\", &width));","OP_REQUIRES_OK(ctx, ctx->GetAttr(\"fill\", &fill_string));","switch (dtype) {","break;","OP_REQUIRES(ctx, !(scientific || shortest),","errors::InvalidArgument(\"scientific and shortest format \"","\"not supported for datatype \","],"label":0}
{"cve":"PYSEC-2021-536","code_chunks":["      const RowPartitionTensor& value_rowids,","      const vector<INDEX_TYPE>& parent_output_index,","      INDEX_TYPE output_index_multiplier, INDEX_TYPE output_size,","      vector<INDEX_TYPE>* result) {","    const INDEX_TYPE index_size = value_rowids.size();","    result->reserve(index_size);","    if (index_size == 0) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["    return false;","  }","","  if (!(padding_data[6] == 0 && padding_data[7] == 0)) {","    TF_LITE_KERNEL_LOG(","        context, \"%s: Padding for channel dimension is not supported in PAD.\",","        padding->name);"],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["return NULL;","}","","return g_bytes_new_take (g_steal_pointer (&metadata_contents), metadata_contents_length + 1);","}","","static void"],"label":1}
{"cve":"CVE-2022-24754","code_chunks":["\taka_cred.data.slen = hmac64_len =","\t\tPJ_BASE256_TO_BASE64_LEN(PJ_ARRAY_SIZE(hmac_digest));","\tpj_assert(aka_cred.data.slen+1 <= PJ_ARRAY_SIZE(tmp_buf));","\taka_cred.data.ptr = tmp_buf;","\tpj_base64_encode(hmac_digest, PJ_ARRAY_SIZE(hmac_digest),","\t                 aka_cred.data.ptr, &len);","\taka_cred.data.slen = hmac64_len;"],"label":0}
{"cve":"CVE-2016-6874","code_chunks":["} else if (arr1.exists(key, true)) {","Variant &v = arr1.lvalAt(key, AccessFlags::Key);","auto subarr1 = v.toArray().copy();","php_array_merge_recursive(seen, v.isReferenced(), subarr1,","value.toArray());","v.unset();       v = subarr1;","} else {"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["else {","int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}"],"label":1}
{"cve":"PYSEC-2020-307","code_chunks":["","m.def(\"TFE_ToDlpackCapsule\", [](py::handle& o) {","PyObject* eager_tensor_pyobject_ptr = o.ptr();","TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);","tensorflow::Safe_TF_StatusPtr status =","tensorflow::make_safe(TF_NewStatus());","void* dlm_ptr = tensorflow::TFE_HandleToDLPack(thandle, status.get());"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t    s, (UINT16)lengthCombinedCapabilities);         \/* lengthCombinedCapabilities (2 bytes) *\/","\tStream_SetPosition(s, bm);                          \/* go back to numberCapabilities *\/","\tStream_Write_UINT16(s, numberCapabilities);         \/* numberCapabilities (2 bytes) *\/","#ifdef WITH_DEBUG_CAPABILITIES","\tStream_Seek_UINT16(s);","\trdp_print_capability_sets(s, numberCapabilities, FALSE);","\tStream_SetPosition(s, bm);"],"label":0}
{"cve":"CVE-2021-32686","code_chunks":["pj_bool_t is_shutdown;","pj_status_t status;","char addr_buf[PJ_INET6_ADDRSTRLEN+10];","","PJ_UNUSED_ARG(src_addr_len);","","listener = (struct tls_listener*) pj_ssl_sock_get_user_data(ssock);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2018-8792","code_chunks":["int i;","uint16 num_updates;","","in_uint16_le(s, num_updates);   \/* rectangles *\/","","for (i = 0; i < num_updates; i++)"],"label":0}
{"cve":"CVE-2021-36082","code_chunks":["rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, \",\");","if(rc > 0 && ja3_str_len + rc < JA3_STR_LEN) ja3_str_len += rc;","","\/* ********** *\/"],"label":1}
{"cve":"PYSEC-2021-843","code_chunks":["OP_REQUIRES_ASYNC(","context, input.dim_size(ndims - 2) == n,","errors::InvalidArgument(\"Input matrices must be squares, got\",","input.dim_size(ndims - 2), \" != \", n),","done);","OP_REQUIRES_ASYNC(context, rhs.dim_size(ndims - 2) == n,"],"label":1}
{"cve":"CVE-2022-1714","code_chunks":["\top->type = R_ANAL_OP_TYPE_UNK;","\top->family = R_ANAL_OP_FAMILY_CPU;","","\tint ret = op->size = msp430_decode_command (buf, len, &cmd);","\tif (mask & R_ANAL_OP_MASK_DISASM) {","\t\tif (ret < 1) {","\t\t\top->mnemonic = strdup (\"invalid\");"],"label":0}
{"cve":"PYSEC-2020-272","code_chunks":["(*stride_arr)[i] = (*shape_arr)[i + 1] * (*stride_arr)[i + 1];","}","","dlm_tensor->dl_tensor.shape = &(*shape_arr)[0];"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input_tensor = GetInput(context, node, 0);","const TfLiteTensor* padding_matrix = GetInput(context, node, 1);","TfLiteTensor* output_tensor = GetOutput(context, node, 0);","","TF_LITE_ENSURE_EQ(context, NumDimensions(padding_matrix), 2);","TF_LITE_ENSURE_EQ(context, SizeOfDimension(padding_matrix, 0),"],"label":1}
{"cve":"PYSEC-2022-68","code_chunks":["int embedding_size = 1;","int lookup_size = 1;","for (int i = 0; i < lookup_rank - 1; i++, k++) {","const int dim = dense_shape->data.i32[i];","lookup_size *= dim;","output_shape->data[k] = dim;"],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["if (!fit)","return -EINVAL;","","if (!fit_check_format((void *)fit)) {","printf(\"Bad FIT format of the update file, aborting auto-update\\n\");","return -EINVAL;","}"],"label":1}
{"cve":"CVE-2018-18311","code_chunks":["","    assert(len >= 0);","","    if (count < 0)","\tcroak_memory_wrap();","","    if (len == 1)"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["","m = sudoers_lookup_check(nss, ctx, &validated, &info, now, callback,","cb_data, &cs, &defs);","if (m != UNSPEC) {","match = m;","parse_tree = nss->parse_tree;","}"],"label":1}
{"cve":"CVE-2021-37665","code_chunks":["const Tensor& input_min_vec = ctx->input(kInputMinVecIndex);","float* input_min_vec_data = (float*)const_cast<void*>(","static_cast<const void*>(input_min_vec.flat<float>().data()));","const Tensor& input_max_vec = ctx->input(kInputMaxVecIndex);","float* input_max_vec_data = (float*)const_cast<void*>("],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","node->temporaries->data[kInputQuantized] =","op_data->scratch_tensor_index + kInputQuantized;","TfLiteTensor* input_quantized =","GetTemporary(context, node, kInputQuantized);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["reinterpret_cast<TfLitePackParams*>(node->builtin_data);","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","switch (output->type) {"],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["{","uchar pixel[10];","unsigned iten = 0, isix, i, buffer = 0, todo[16];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width > 32767 || raw_height > 32767)","throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"CVE-2021-32672","code_chunks":["    *argcp = atoi(plen);","    if (*argcp <= 0 || *argcp > 1024) goto protoerr;","","    \/* Parse each argument. *\/","    argv = zmalloc(sizeof(sds)*(*argcp));","    argc = 0;","    while(argc < *argcp) {"],"label":0}
{"cve":"CVE-2016-2315","code_chunks":["\t\t} else {","\t\t\te = active_branches;","\t\t\tactive_branches = e->active_next_branch;","\t\t}","\t\te->active = 0;","\t\te->active_next_branch = NULL;","\t\tif (e->branch_tree.tree) {"],"label":0}
{"cve":"CVE-2022-29694","code_chunks":["         * of gap, but keep going so that we might find a smaller","         * gap to fill so avoiding fragmentation.","         *\/","        if (next - candidate >= size && next - candidate < mingap) {","            offset = candidate;","            mingap = next - candidate;","        }"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["arguments_type = make_type(\"arguments\", &AST_type, arguments_fields, 6);","if (!arguments_type) return 0;","if (!add_attributes(arguments_type, NULL, 0)) return 0;","arg_type = make_type(\"arg\", &AST_type, arg_fields, 2);","if (!arg_type) return 0;","if (!add_attributes(arg_type, arg_attributes, 4)) return 0;","keyword_type = make_type(\"keyword\", &AST_type, keyword_fields, 2);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tRLC_CATCH_ANY {","\t\tRLC_THROW(ERR_CAUGHT);","\t}","\tRLC_FINALLY {","\t\tfor (size_t i = 0; i < (1 << (FB_WIDTH - 1)); i++) {","\t\t\tfb_free(t[i]);","\t\t}"],"label":0}
{"cve":"CVE-2020-15473","code_chunks":["printf(\"[packet_id: %u][opcode: %u][Packet ID: %d][%u <-> %u][len: %u]\\n\",","flow->num_processed_pkts,","opcode, check_pkid_and_detect_hmac_size(ovpn_payload),","htons(packet->udp->source), htons(packet->udp->dest), packet->payload_packet_len);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["        return 1;","    }","    if (isinstance) {","        asdl_seq* keys;","        asdl_seq* values;","","        if (lookup_attr_id(obj, &PyId_keys, &tmp) < 0) {"],"label":0}
{"cve":"CVE-2021-40564","code_chunks":["if (si->slice_type > 9) return -1;","","pps_id = gf_bs_read_ue_log(bs, \"pps_id\");","if (pps_id > 255) return -1;","si->pps = &avc->pps[pps_id];","if (!si->pps->slice_group_count) return -2;","si->sps = &avc->sps[si->pps->sps_id];"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["stmt_ty val;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"AsyncFunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;"],"label":1}
{"cve":"CVE-2018-20174","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["if (san_names == nullptr) {","return false;","}","for (const GENERAL_NAME* general_name : san_names.get()) {","const std::string san = Utility::generalNameAsString(general_name);","for (auto& config_san_matcher : subject_alt_name_matchers) {"],"label":1}
{"cve":"CVE-2021-29608","code_chunks":["INDEX_TYPE output_index_multiplier, INDEX_TYPE output_size,","vector<INDEX_TYPE>* result) {","const INDEX_TYPE index_size = value_rowids.size();","result->reserve(index_size);","if (index_size == 0) {","return;"],"label":1}
{"cve":"CVE-2022-35979","code_chunks":["void Compute(OpKernelContext* context) override {","const Tensor& input = context->input(0);","const Tensor& min_input_tensor = context->input(1);","const Tensor& max_input_tensor = context->input(2);","","OP_REQUIRES("],"label":0}
{"cve":"PYSEC-2022-81","code_chunks":["const OpDef& op_def, const std::vector<const Tensor*>& input_tensors,","const std::vector<ShapeHandle>& input_tensors_as_shapes) {","const auto ret = full_type::SpecializeType(attrs_, op_def);","DCHECK(ret.status().ok()) << \"while instantiating types: \" << ret.status();","ret_types_ = ret.ValueOrDie();","","input_tensors_ = input_tensors;"],"label":1}
{"cve":"CVE-2018-14015","code_chunks":["&cu->hdr, debug_str, debug_str_len);","if (cu->dies[cu->length].attr_values[i].name == DW_AT_comp_dir) {","const char *name = cu->dies[cu->length].attr_values[i].encoding.str_struct.string;","sdb_set (s, \"DW_AT_comp_dir\", name, 0);","}","cu->dies[cu->length].length++;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TF_LITE_ENSURE(context, NumDimensions(input) >= 2);","if (input->type != kTfLiteFloat32) {","context->ReportError(context,"],"label":1}
{"cve":"CVE-2018-20406","code_chunks":["{","PyMemoEntry *oldtable = NULL;","PyMemoEntry *oldentry, *newentry;","size_t new_size = MT_MINSIZE;","size_t to_process;",""],"label":0}
{"cve":"CVE-2015-8631","code_chunks":["{","static getprivs_ret            ret;","gss_buffer_desc                client_name = GSS_C_EMPTY_BUFFER;","gss_buffer_desc                service_name = GSS_C_EMPTY_BUFFER;","OM_uint32                      minor_stat;","kadm5_server_handle_t          handle;"],"label":0}
{"cve":"CVE-2021-30022","code_chunks":["","\t *\/","","\tif (si->inter_slice_allowed_flag )","\t\tsi->slice_type = gf_bs_read_int_log(bs, 2, \"slice_type\");","","\treturn 0;"],"label":0}
{"cve":"PYSEC-2021-536","code_chunks":["}","for (INDEX_TYPE i = 0; i < row_split_size - 1; ++i) {","INDEX_TYPE row_length = row_split(i + 1) - row_split(i);","INDEX_TYPE real_length = std::min(output_size, row_length);","INDEX_TYPE parent_output_index_current = parent_output_index[i];",""],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"args\\\" missing from arguments\");","return 1;","}","else {"],"label":1}
{"cve":"CVE-2021-29518","code_chunks":["                errors::FailedPrecondition(","                    \"GetSessionTensor called on null session state\"));","    OP_REQUIRES_OK(ctx, session_state->GetTensor(name, &val));","    ctx->set_output(0, val);","  }","","  TF_DISALLOW_COPY_AND_ASSIGN(GetSessionTensorOp);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["    if (isinstance) {","        identifier name;","        arguments_ty args;","        asdl_seq* body;","        asdl_seq* decorator_list;","        expr_ty returns;","        string type_comment;"],"label":0}
{"cve":"CVE-2022-3352","code_chunks":["}","}","if (!can_unload)","semsg(_(e_attempt_to_delete_buffer_that_is_in_use_str), buf->b_fname);","return can_unload;","}",""],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","            reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","      const TfLiteTensor* in_tensor;","      TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &in_tensor));","      TfLiteTensor* out_tensor;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));","      TfLiteIntArray* new_size = TfLiteIntArrayCopy(in_tensor->dims);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["","\t\t\/* calculate R part of the signature *\/","\t\tec_copy(r, pk);","\t}","\tRLC_CATCH_ANY {","\t\tresult = RLC_ERR;","\t}"],"label":0}
{"cve":"CVE-2023-25933","code_chunks":["    if (LeftTy.isNumberType() && RightTy.isNumberType()) {","    BOI->setType(numberType);","    return true;","  }","","    if (LeftTy.isBigIntType() && RightTy.isBigIntType()) {","    BOI->setType(Type::createBigInt());"],"label":0}
{"cve":"PYSEC-2021-815","code_chunks":["const int32_t num_buckets = stats_summary_t->dim_size(2) - 1;","const int32_t logits_dim = logits_dim_;","const int32_t hessian_dim = stats_summary_t->dim_size(3) - logits_dim;","DCHECK_GT(hessian_dim, 0);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["OpData* op_data,","TfLiteNode* node) {","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* output_state =","GetVariableInput(context, node, kOutputStateTensor);"],"label":0}
{"cve":"CVE-2023-23759","code_chunks":["                    state.context()->getSupportedSigSchemes(),","                    state.context()->getClientCertVerifier().get(),","                    *handshakeContext);","              }","","              \/*","               * Set the cert and signature scheme we are using."],"label":0}
{"cve":"CVE-2022-36019","code_chunks":["input_quantized.flat<quint8>());","AddInputFromArray<quint8>(bias_quantized.shape(),","bias_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});","AddInputFromArray<float>(TensorShape({1}), {input_max});"],"label":1}
{"cve":"CVE-2019-3563","code_chunks":["    } else if (","        terminatorType_ != TerminatorType::NEWLINE && b == '\\r' &&","        !c.isAtEnd() && *c.peekBytes().data() == '\\n') {","      return i;","    }","  }",""],"label":0}
{"cve":"CVE-2017-14608","code_chunks":["len = MIN (256, width-col);","ret = kodak_65000_decode (buf, len);","for (i=0; i < len; i++)","(pred[i & 1] += buf[i])]) >> 12) derror();","}","}","}"],"label":1}
{"cve":"CVE-2019-11930","code_chunks":["  if (!suppressed_hdrs.cnt_trans_enc) {","    mbfl_memory_device_strncat(&device, PHP_MBSTR_MAIL_MIME_HEADER4,","                               sizeof(PHP_MBSTR_MAIL_MIME_HEADER4) - 1);","    const char *p = (char *)mbfl_no2preferred_mime_name(body_enc);","    if (p == nullptr) {","      p = \"7bit\";","    }"],"label":0}
{"cve":"CVE-2020-19481","code_chunks":["}","","GF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[MPEG-2 TS] PID %d: Adaptation Field found: Discontinuity %d - RAP %d - PCR: \"LLD\"\\n\", pid, paf->discontinuity_indicator, paf->random_access_indicator, paf->PCR_flag ? paf->PCR_base * 300 + paf->PCR_ext : 0));","}","","static GF_Err gf_m2ts_process_packet(GF_M2TS_Demuxer *ts, unsigned char *data)"],"label":1}
{"cve":"CVE-2017-9144","code_chunks":["#define SkipLinesOp  0x01","#define SetColorOp  0x02","#define SkipPixelsOp  0x03","#define ByteDataOp  0x05","#define RunDataOp  0x06","#define EOFOp  0x07"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"op\\\" missing from BoolOp\");","return 1;","}","else {","int res;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","node->temporaries->data[kInputZeroPoints] =","op_data->scratch_tensor_index + kInputZeroPoints;","TfLiteTensor* input_zp = GetTemporary(context, node, kInputZeroPoints);","input_zp->type = kTfLiteFloat32;","input_zp->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(input_zp->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE(context, bw_cell_state != nullptr);","","if (!params->merge_outputs) {","TfLiteTensor* bw_output = GetOutput(context, node, kBwOutputTensor);","TfLiteIntArray* bw_output_size = TfLiteIntArrayCreate(3);","bw_output_size->data[0] = time_major ? max_time : n_batch;","bw_output_size->data[1] = time_major ? n_batch : max_time;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t}","","\tif (!Stream_SafeSeek(s, 4)) \/* SessionId *\/","\t\treturn FALSE;","","\trdp->update->secondary->glyph_v2 = (rdp->settings->GlyphSupportLevel > GLYPH_SUPPORT_FULL);","\treturn tpkt_ensure_stream_consumed(s, length);"],"label":0}
{"cve":"CVE-2018-5810","code_chunks":["{","uchar pixel[10];","unsigned iten = 0, isix, i, buffer = 0, todo[16];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width > 32767 || raw_height > 32767)","throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"CVE-2016-10161","code_chunks":["","return object_common2(UNSERIALIZE_PASSTHRU, elements);","}","#line 785 \"ext\/standard\/var_unserializer.c\"","yych = *++YYCURSOR;","if (yych <= ',') {","if (yych != '+') goto yy18;"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["if (cert_validation_config != nullptr) {","if (!cert_validation_config->subjectAltNameMatchers().empty()) {","cert_validation_config->subjectAltNameMatchers()) {","subject_alt_name_matchers_.push_back(Matchers::StringMatcherImpl(matcher));","}","verify_mode = verify_mode_validation_context;","}"],"label":1}
{"cve":"CVE-2020-15888","code_chunks":["n = (*f)(L);  \/* do the actual call *\/","lua_lock(L);","api_checknelems(L, n);","luaD_poscall(L, ci, n);","break;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["l = RLC_MAX(l, _l[i]);","if (i > 0) {","fp24_frb(t[i], t[i - 1], 1);","}","}",""],"label":1}
{"cve":"CVE-2018-25020","code_chunks":["do {\t\t\t\t\t\t\t\t\\","if (target >= len || target < 0)\t\t\t\\","goto err;\t\t\t\t\t\\","insn->off = addrs ? addrs[target] - addrs[i] - 1 : 0;\t\\","\/* Adjust pc relative offset for 2nd or 3rd insn. *\/\t\\"],"label":1}
{"cve":"CVE-2022-41908","code_chunks":["PyList_SetItem(lst, i, arg);","}","*tuple = Py_BuildValue(\"(ssN)\", call->token.c_str(), device_name, lst);","CHECK(*tuple);","return OkStatus();","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["GetInput(context, node, kInputTensorBoxEncodings);","const TfLiteTensor* decoded_boxes =","&context->tensors[op_data->decoded_boxes_index];","const int num_boxes = input_box_encodings->dims->data[1];"],"label":1}
{"cve":"CVE-2019-20805","code_chunks":["Elf64_Phdr const *phdr = phdri;","int j = e_phnum;","for (; --j>=0; ++phdr) if (PT_LOAD64 == get_te32(&phdr->p_type)) {","upx_uint64_t const t = addr - get_te64(&phdr->p_vaddr);","if (t < get_te64(&phdr->p_filesz)) {","upx_uint64_t const p_offset = get_te64(&phdr->p_offset);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["PyObject *ast3_parse(PyObject *self, PyObject *args);","static PyMethodDef ast3_methods[] = {","    {\"_parse\",  ast3_parse, METH_VARARGS, \"Parse string into typed AST.\"},","    {NULL, NULL, 0, NULL}","};","static struct PyModuleDef _astmodule = {","    PyModuleDef_HEAD_INIT, \"_ast3\", NULL, 0, ast3_methods"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["        context, \"Output type is %s, requires float, uint8, int8 or int16.\",","        TfLiteTypeGetName(output->type));","    return kTfLiteError;","  }","","  return kTfLiteOk;","}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["for (i = 0; i < 4; i++) {","if (bn_sign(_b[i]) == RLC_NEG) {","fp12_inv_cyc(t[i], t[i]);","}","_l[i] = RLC_FP_BITS + 1;","bn_rec_naf(naf[i], &_l[i], _b[i], 2);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","WLog_ERR(TAG,","\"incorrect offset, type:0x%04\" PRIX16 \" actual:%\" PRIuz \" expected:%\" PRIuz \"\",","type, Stream_Pointer(s) - bm, em - bm);","Stream_SetPointer(s, em);","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2018-5809","code_chunks":["}","for (c=0; c < 16; c+=2) {","i = len[((c & 1) << 1) | (c >> 3)];","RAW(row,col+c) = ((signed) ph1_bits(i) << (32-i) >> (32-i)) +","(dir ? RAW(row+(~c | -2),col+c) : col ? RAW(row,col+(c | -2)) : 128);","if (c == 14) c = -1;"],"label":1}
{"cve":"CVE-2023-27597","code_chunks":["\t\t\t\t\t\turi->host.len=uri->user.len;","\t\t\t\t\t\turi->user.s=0;","\t\t\t\t\t\turi->user.len=0;","\t\t\t\t\t\tstate=URI_HEADERS;","\t\t\t\t\t\tfound_user=1; \/*  there is no user part *\/","\t\t\t\t\t\ts=p+1;","\t\t\t\t\t\tbreak;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\treturn 0;","\t}","","\tRLC_RIP(bit, d, bit);","","\tif (d >= a->used) {","\t\treturn 0;"],"label":0}
{"cve":"CVE-2016-10249","code_chunks":["}","return 0;","}","","void jas_matrix_divpow2(jas_matrix_t *matrix, int n)","{"],"label":1}
{"cve":"PYSEC-2021-578","code_chunks":["","      output_min->flat<float>()(0) = input_requested_min_float;","      output_max->flat<float>()(0) = input_requested_max_float;","    } catch (mkldnn::error& e) {","      string error_msg = \"Status: \" + std::to_string(e.status) +","                         \", message: \" + std::string(e.message) + \", in file \" +","                         std::string(__FILE__) + \":\" + std::to_string(__LINE__);"],"label":0}
{"cve":"CVE-2023-38408","code_chunks":[],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["GetOptionalInputTensor(context, node, kFwInputToInputWeightsTensor);","const TfLiteTensor* fw_input_to_forget_weights;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFwInputToForgetWeightsTensor,","&fw_input_to_forget_weights));","const TfLiteTensor* fw_input_to_cell_weights;"],"label":0}
{"cve":"CVE-2022-35970","code_chunks":["int num_bits;","OP_REQUIRES_OK(context, context->GetAttr(\"num_bits\", &num_bits));","OP_REQUIRES(","context, IsNumBitsValid(num_bits),","InvalidArgument(\"num_bits must be between 2 and 16, inclusive\"));","bool narrow_range;"],"label":0}
{"cve":"CVE-2023-46862","code_chunks":["\t\tcq_shift = 1;","\tif (ctx->flags & IORING_SETUP_SQE128)","\t\tsq_shift = 1;","","\t\/*","\t * we may get imprecise sqe and cqe info if uring is actively running","\t * since we get cached_sq_head and cached_cq_tail without uring_lock"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["    }","    if (kernel_type == kGenericOptimized) {","      TF_LITE_LOCAL_RESPONSE_NORM(optimized_ops);","    }","#undef TF_LITE_LOCAL_RESPONSE_NORM","  } else {","    context->ReportError(context, \"Output type is %d, requires float.\","],"label":0}
{"cve":"CVE-2017-3733","code_chunks":["","    good = constant_time_ge(rec->length, overhead + padding_length);","    \/*","     * The padding consists of a length byte at the end of the record and","     * then that many bytes of padding, all with the same value as the length","     * byte. Thus, with the length byte included, there are i+1 bytes of","     * padding. We can't check just |padding_length+1| bytes because that"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["PyObject *dict;","if (_PyObject_LookupAttrId(self, &PyId___dict__, &dict) < 0) {","return NULL;","}","if (dict) {"],"label":1}
{"cve":"CVE-2019-11411","code_chunks":["static void numtostr(js_State *J, const char *fmt, int w, double n)","{","char buf[32], *e;","sprintf(buf, fmt, w, n);","e = strchr(buf, 'e');","if (e) {"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["}","","int cmp_len = s1_len - offset;","if (cmp_len < s2_len) cmp_len = s2_len;","if (cmp_len > length) cmp_len = length;",""],"label":1}
{"cve":"PYSEC-2020-286","code_chunks":["}","","if (graph_def.has_library()) {","const FunctionDefLibrary& library = graph_def.library();","for (const auto& function : library.function()) {","for (const auto& node : function.node_def()) {"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["then_handle_(then_handle),","else_handle_(else_handle),","done_(std::move(done)),","lib_(CHECK_NOTNULL(ctx_->function_library())) {","SetRunOptions(ctx_, &opts_, true \/* always_collect_stats *\/);","for (int i = 1; i < ctx_->num_inputs(); ++i) {","args_.push_back(ctx_->input(i));"],"label":1}
{"cve":"CVE-2023-28486","code_chunks":["int i;","debug_decl(new_logline, SUDO_DEBUG_UTIL);","","sudo_lbuf_init(&lbuf, NULL, 0, NULL, 0);","","if (ISSET(flags, EVLOG_RAW) || evlog == NULL) {"],"label":0}
{"cve":"CVE-2022-0696","code_chunks":["\t*argt |= EX_REGSTR;","    else if (STRNICMP(attr, \"keepscript\", len) == 0)","\t*argt |= EX_KEEPSCRIPT;","    else if (STRNICMP(attr, \"bar\", len) == 0)","\t*argt |= EX_TRLBAR;","    else","    {"],"label":0}
{"cve":"CVE-2024-23325","code_chunks":["        v6 = reinterpret_cast<const pp_ipv6_addr*>(&buf[PROXY_PROTO_V2_HEADER_LEN]);","        sockaddr_in6 ra6, la6;","        memset(&ra6, 0, sizeof(ra6));","        memset(&la6, 0, sizeof(la6));","        ra6.sin6_family = AF_INET6;","        ra6.sin6_port = v6->src_port;","        safeMemcpy(&(ra6.sin6_addr.s6_addr), &(v6->src_addr));"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2016-9841","code_chunks":["    len = bits >> 3;","    in -= len;","    bits -= len << 3;","    hold &= (1U << bits) - 1;","","    \/* update state and return *\/","    strm->next_in = in;"],"label":0}
{"cve":"CVE-2022-1533","code_chunks":["return MOBI_DATA_CORRUPT;","}","memmove(d, s, (size_t) l);","decoded[pos] = c;","(*decoded_size)++;","if (dir == '>') { pos++; }"],"label":1}
{"cve":"CVE-2020-26247","code_chunks":["VALUE rb_schema;","","Data_Get_Struct(document, xmlDoc, doc);","","\/* In case someone passes us a node. ugh. *\/"],"label":1}
{"cve":"CVE-2022-1284","code_chunks":["\t\t\tbreak;","\t\t}","\t\tcur = start + i;","\t\tif (!r_io_is_valid_offset (core->io, cur, 0)) {","\t\t\tbreak;","\t\t}","#if 0"],"label":0}
{"cve":"CVE-2022-1899","code_chunks":["bool addr_aligned = !(needle % 4);","","if (type == R_STRING_TYPE_DETECT) {","char *w = (char *)buf + needle + rc - from;","if (((to - needle) > 8 + rc)) {","bool is_wide32le = (needle + rc + 2 < to) && (!w[0] && !w[1] && !w[2] && w[3] && !w[4]);","if (is_wide32le) {"],"label":1}
{"cve":"PYSEC-2021-734","code_chunks":["        return errors::InvalidArgument(","            \"Cannot handle VALUE_ROWIDS in first dimension.\");","        *result = first_partition_tensor.shape().dim_size(0) - 1;","        return Status::OK();","        return errors::InvalidArgument(","            \"Cannot handle type \",","            RowPartitionTypeToString(first_partition_type));"],"label":0}
{"cve":"PYSEC-2020-117","code_chunks":["","const CPUDevice& d = context->eigen_device<CPUDevice>();","","OP_REQUIRES(","context, TensorShapeUtils::IsVector(reverse_index_map_t->shape()),","errors::InvalidArgument(\"reverse_index_map must be a vector, saw: \",","reverse_index_map_t->shape().DebugString()));"],"label":0}
{"cve":"CVE-2022-37032","code_chunks":["{","bgp_notify_send (peer,","BGP_NOTIFY_OPEN_ERR,","BGP_NOTIFY_OPEN_AUTH_FAILURE);","return -1;","}"],"label":0}
{"cve":"CVE-2022-39347","code_chunks":["if (file->find_handle != INVALID_HANDLE_VALUE)","FindClose(file->find_handle);","","ent_path = drive_file_combine_fullpath(file->basepath, path, PathLength);","\/* open new search handle and retrieve the first entry *\/","file->find_handle = FindFirstFileW(ent_path, &file->find_data);","free(ent_path);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["","\/* XXX Why not comp_for here? *\/","testlist_ast = ast_for_testlist(&c, CHILD(n, 0));","if (!testlist_ast)","goto out;","res = Expression(testlist_ast, arena);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["GetTensorData<int>(fft_integer_working_area);","","TfLiteTensor* fft_double_working_area =","GetTemporary(context, node, kFftDoubleWorkingAreaTensor);","double* fft_double_working_area_data = reinterpret_cast<double*>(","GetTensorData<int64_t>(fft_double_working_area));"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["RLC_THROW(ERR_CAUGHT);","}","RLC_FINALLY {","for (i = 0; i < (1 << (EP_WIDTH - 1)); i++) {","ep4_free(t[i]);","}","ep4_free(q);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","const int32 sample_rate = *GetTensorData<int>(input_rate);",""],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["    }","}","","static stmt_ty","ast_for_decorated(struct compiling *c, const node *n)","{","    \/* decorated: decorators (classdef | funcdef | async_funcdef) *\/"],"label":0}
{"cve":"CVE-2016-10012","code_chunks":["compat_cipher_proposal(options.ciphers);","myproposal[PROPOSAL_COMP_ALGS_CTOS] =","myproposal[PROPOSAL_COMP_ALGS_STOC] = options.compression ?","\"zlib@openssh.com,zlib,none\" : \"none,zlib@openssh.com,zlib\";","myproposal[PROPOSAL_MAC_ALGS_CTOS] =","myproposal[PROPOSAL_MAC_ALGS_STOC] = options.macs;","if (options.hostkeyalgorithms != NULL) {"],"label":1}
{"cve":"CVE-2017-12664","code_chunks":["if ((image_info->compression == RLECompression) ||","(image_info->compression == FaxCompression))","flags|=PALM_IS_COMPRESSED_FLAG;","(void) WriteBlobMSBShort(image, flags);","(void) WriteBlobByte(image,(unsigned char) bits_per_pixel);","if (bits_per_pixel > 1)"],"label":1}
{"cve":"CVE-2017-9763","code_chunks":[],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {"],"label":1}
{"cve":"CVE-2019-15945","code_chunks":["size_t octets_left = inlen - 1;","int i, count = 0;","","memset(outbuf, 0, outlen);","in++;","if (outlen < octets_left)"],"label":1}
{"cve":"CVE-2021-41220","code_chunks":["    auto col_params = new CollectiveParams();","    auto done_with_cleanup = [col_params, done = std::move(done)]() {","      done();","      col_params->Unref();","    };","    OP_REQUIRES_OK_ASYNC(c,","                         FillCollectiveParams(col_params, REDUCTION_COLLECTIVE,"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","    reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","            const TfLiteTensor* tensor0;","      TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &tensor0));","      TfLiteTensor* tensor1;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &tensor1));","      TfLiteIntArray* newSize = TfLiteIntArrayCopy(tensor0->dims);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["    return false;","  }","","  if (node->inputs->size > 2) {","    const TfLiteTensor* bias;","    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kBias, &bias));","    if (!IsFloatType(bias->type) || !IsConstantTensor(bias)) {"],"label":0}
{"cve":"CVE-2023-4681","code_chunks":["continue;","}","get_info_from_frame(sptr, buffer, buflen);","if (sptr->first_pes_has_dts == 0) {","u32 frames_from_beg = 0;","Bool have_frame;","do {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* seq_lengths;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"PYSEC-2021-748","code_chunks":["if (DataTypeCanUseMemcpy(component.dtype())) {","const TensorBuffer* buffer = DMAHelper::buffer(&component);","memcpy(position, buffer->data(), buffer->size());","metadata->set_tensor_size_bytes(buffer->size());","} else {","TensorProto& proto = non_memcpy_components[non_memcpy_component_index++];"],"label":1}
{"cve":"PYSEC-2020-301","code_chunks":["    RNNDataDescriptor data_desc = CreateRNNDataDescriptor();","    float padding_fill = 0.0f;","    cudnnRNNDataLayout_t layout;","    if (time_major) {","      layout = CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_UNPACKED;","    } else {","      layout = CUDNN_RNN_DATA_LAYOUT_BATCH_MAJOR_UNPACKED;"],"label":0}
{"cve":"CVE-2022-36015","code_chunks":["","auto size = (std::is_integral<T>::value","? ((Eigen::numext::abs(limit - start) +","Eigen::numext::abs(delta) - T(1)) \/"],"label":1}
{"cve":"CVE-2017-9763","code_chunks":["struct grub_fshelp_find_file_closure *c)","{","#ifndef _MSC_VER","char fpath[grub_strlen (currpath) + 1];","#else","char *fpath = grub_malloc (grub_strlen (currpath) + 1);"],"label":1}
{"cve":"CVE-2022-3976","code_chunks":["    if (tag != 0x19) {","      mmsMsg_createMmsRejectPdu(&invokeId, MMS_ERROR_REJECT_INVALID_PDU, response);","      return false;","    }","","    int length;",""],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["#if DTLS_DEBUG","PJ_LOG(2,(ds->base.name, \"dtls_destroy()\"));","#endif","","ds->is_destroying = PJ_TRUE;",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["ep2_t t;","bn_t _k;","int8_t u, naf[RLC_DIG + 1];","int l;","","ep2_null(t);","bn_null(_k);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["const int len = RLC_FP_BITS + 1;","int i, j, m, sk;","bn_t _k[2], q, v1[3], v2[3];","int8_t ptr, *naf = RLC_ALLOCA(int8_t, 2 * n * len);","size_t l, _l[2];",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["                        node->temporaries->data[kInputScalingFactors] =","        op_data->scratch_tensor_index + kInputScalingFactors;","    TfLiteTensor* input_sf;","    TF_LITE_ENSURE_OK(","        context,","        GetTemporarySafe(context, node, kInputScalingFactors, &input_sf));","    input_sf->type = kTfLiteFloat32;"],"label":0}
{"cve":"CVE-2018-16642","code_chunks":["%                                                                             %","%                                                                             %","%   R e a d C U T I m a g e                                                   %","%                                                                             %","%                                                                             %","%                                                                             %","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"],"label":0}
{"cve":"PYSEC-2021-272","code_chunks":["&iter_ctx, \/*parent=*\/nullptr, \"ToTFRecordOpIterator\", &iterator));","","std::vector<Tensor> components;","components.reserve(finalized_dataset->output_dtypes().size());","bool end_of_sequence;","do {","TF_RETURN_IF_ERROR("],"label":1}
{"cve":"CVE-2018-8800","code_chunks":["\t\t       g_redirect_cookie_len);","\t}","","\tif (g_redirect_flags & LB_DONTSTOREUSERNAME)","\t{","\t\tlogger(Protocol, Warning,","\t\t       \"process_redirect_pdu(), unhandled LB_DONTSTOREUSERNAME set\");"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* in_tensor;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &in_tensor));","TfLiteTensor* out_tensor;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));"],"label":0}
{"cve":"CVE-2019-13311","code_chunks":["new_images=RemoveFirstImageFromList(&_images);","source_image=RemoveFirstImageFromList(&_images);","if (source_image == (Image *) NULL)","break; \/* FUTURE - produce Exception, rather than silent fail *\/","","\/* FUTURE - this should not be here! - should be part of -geometry *\/","if (source_image->geometry != (char *) NULL)"],"label":1}
{"cve":"CVE-2016-2324","code_chunks":["static void finish_object(struct object *obj, const char *name, void *cb_data)","{","struct rev_list_info *info = cb_data;","if (obj->type == OBJ_BLOB && !has_object_file(&obj->oid))"],"label":0}
{"cve":"CVE-2022-41890","code_chunks":["int output_dim = -1;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2016-10012","code_chunks":["mac->key_len = maclen;","}","if ((r = sshbuf_get_u32(b, &comp->type)) != 0 ||","(r = sshbuf_get_u32(b, (u_int *)&comp->enabled)) != 0 ||","(r = sshbuf_get_cstring(b, &comp->name, NULL)) != 0)","goto out;","if (enc->name == NULL ||"],"label":1}
{"cve":"CVE-2021-32139","code_chunks":["\tgf_bs_write_u32(bs, GF_ISOM_BOX_TYPE_TX3G);","\tgf_bs_write_data(bs, _a->reserved, 6);","\tgf_bs_write_u16(bs, _a->dataReferenceIndex);","\tgf_bs_write_u32(bs, _a->displayFlags);","\tif (qt) {","\t\tGF_StyleRecord sr;","\t\tmemset(&sr, 0, sizeof(GF_StyleRecord));"],"label":0}
{"cve":"CVE-2017-9763","code_chunks":["if (input[0]==' ')","input++;","ptr = strchr (input, ' ');","if (ptr) {","*ptr = 0;","ptr++;"],"label":1}
{"cve":"CVE-2023-39354","code_chunks":["}","else if (planeSize < originalSize)","{","if (!nsc_rle_decode(rle, context->priv->PlaneBuffers[i],","context->priv->PlaneBuffersLength, originalSize))","return FALSE;","}"],"label":1}
{"cve":"CVE-2022-39244","code_chunks":["    state->line = scanner->line;","    state->start_line = scanner->start_line;","}","","","PJ_DEF(void) pj_scan_restore_state( pj_scanner *scanner, ","\t\t\t\t    pj_scan_state *state)"],"label":0}
{"cve":"CVE-2023-28366","code_chunks":["\t\t\t}","\t\t\tnext = context->for_free_next;","\t\t\tcontext->for_free_next = NULL;","\t\t\tlast = context;","\t\t\tcontext = next;","\t\t}else","#endif"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static void eb_mul_rtnaf_imp(eb_t r, const eb_t p, const bn_t k) {","int i, l, n;","int8_t tnaf[RLC_FB_BITS + 8], u;","eb_t t[1 << (EB_WIDTH - 2)];",""],"label":1}
{"cve":"CVE-2021-42778","code_chunks":["free(*tname);","LOG_FUNC_RETURN(card->ctx, r);","}","","if ((*tname)[r-1] != '\\0') {"],"label":1}
{"cve":"CVE-2021-40569","code_chunks":["{","\tGF_ItemInfoBox *ptr = (GF_ItemInfoBox *)s;","\tif (ptr == NULL) return;","\tgf_list_del(ptr->item_infos);","\tgf_free(ptr);","}",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2023-22742","code_chunks":["\t\t}","","\t\tif (!git__prefixcmp(ptr, SSH_AUTH_KEYBOARD_INTERACTIVE)) {","\t\t\t*out |= GIT_CREDENTIAL_SSH_INTERACTIVE;","\t\t\tptr += strlen(SSH_AUTH_KEYBOARD_INTERACTIVE);","\t\t\tcontinue;","\t\t}"],"label":0}
{"cve":"CVE-2019-19053","code_chunks":[],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {"],"label":1}
{"cve":"CVE-2023-0770","code_chunks":["","gf_node_get_field(r->ToNode, r->ToField.fieldIndex, &inf);","\/*IS to another proto*\/","if (r->ToNode->sgprivate->tag == TAG_ProtoNode) return gf_sg_proto_field_is_sftime_offset(r->ToNode, &inf);","\/*IS to a startTime\/stopTime field*\/","if (!stricmp(inf.name, \"startTime\") || !stricmp(inf.name, \"stopTime\")) return 1;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int bn_get_bit(const bn_t a, int bit);"],"label":1}
{"cve":"CVE-2016-10012","code_chunks":["{","\treturn sshbuf_get_u64(ssh->state->incoming_packet, valp);","}","","int","sshpkt_get_string(struct ssh *ssh, u_char **valp, size_t *lenp)","{"],"label":0}
{"cve":"CVE-2020-5238","code_chunks":["goto yy42;","if (yych <= 0xF4)","goto yy43;","}","}","yy29 : { return (bufsize_t)(p - start); }"],"label":1}
{"cve":"CVE-2016-2315","code_chunks":["len += p->elem_len + 1;","}"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["WCHAR* pUnicodeString = new WCHAR[lCount + 1];","WCHAR* pStart = pUnicodeString;","","LONG lIndex = 0;","while (lIndex < lCount)","{"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_rec_glv(bn_t k0, bn_t k1, const bn_t k, const bn_t n, const bn_t *v1,","const bn_t *v2) {","bn_t t, b1, b2;","int r1, r2, bits;","","bn_null(b1);","bn_null(b2);"],"label":1}
{"cve":"CVE-2021-42780","code_chunks":["\"Searching for PIN-Ref %02X\\n\", pin_reference);","while ((r = sc_read_record(card, ++rec_no, buf, sizeof(buf), SC_RECORD_BY_REC_NR)) > 0) {","int found = 0, fbz = -1;","if (buf[0] != 0xA0)","continue;"],"label":1}
{"cve":"CVE-2022-4202","code_chunks":["GF_LSR_READ_INT(lsr, len, lsr->info->cfg.extensionIDBits, \"reserved\");","len = lsr_read_vluimsbf5(lsr, \"len\");","while (len && !gf_bs_is_align(lsr->bs)) {","gf_bs_read_int(lsr->bs, len);","len--;","}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["    TF_LITE_ENSURE_OK(","        context, GetInputSafe(context, node, kInputTensorSigma, &input_sigma));","    const float soft_nms_sigma = *GetTensorData<float>(input_sigma);","    if (soft_nms_sigma < 0) {","      context->ReportError(context, \"Invalid sigma value for soft NMS: %f\",","                           soft_nms_sigma);","      return kTfLiteError;"],"label":0}
{"cve":"CVE-2020-15213","code_chunks":["    }","    previous_segment_id = current_segment_id;","  }","","  const int max_index = previous_segment_id;","","  const int data_rank = NumDimensions(data);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["l = RLC_FP_BITS + 1;","bn_rec_slw(win, &l, _k, EP_WIDTH);","for (i = 0; i < l; i++) {","if (win[i] == 0) {","ep_dbl(q, q);","} else {"],"label":1}
{"cve":"CVE-2023-28487","code_chunks":["printf(\"%s : %s : \", timestr ? timestr : \"invalid date\", evlog->submituser);","if (evlog->submithost != NULL)","printf(\"HOST=%s ; \", evlog->submithost);","if (evlog->ttyname != NULL)"],"label":1}
{"cve":"CVE-2019-19221","code_chunks":["\t * Create an iconv object.","\t *\/","\tif (((flag & (SCONV_TO_UTF8 | SCONV_TO_UTF16)) &&","\t    (flag & (SCONV_FROM_UTF8 | SCONV_FROM_UTF16))) ||","\t    (flag & SCONV_WIN_CP)) {","\t\t\/* This case we won't use iconv. *\/","\t\tsc->cd = (iconv_t)-1;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["excepthandler_ty o = (excepthandler_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["      return context->ResizeTensor(context, tensor1, newSize);","    };","","    reg.invoke = [](TfLiteContext* context, TfLiteNode* node) {","      CallReporting* call_reporting =","          static_cast<CallReporting*>(node->builtin_data);","            const TfLiteTensor* a0;"],"label":0}
{"cve":"CVE-2023-44488","code_chunks":["cfg_.rc_min_quantizer = cfg_.rc_max_quantizer = 48;","","cfg_.g_lag_in_frames = 0;","ASSERT_NO_FATAL_FAILURE(RunLoop(&video));","","for (std::vector<FrameInfo>::const_iterator info = frame_info_list_.begin();"],"label":1}
{"cve":"CVE-2023-0818","code_chunks":["","static void txtin_probe_duration(GF_TXTIn *ctx)","{","GF_Fraction64 dur;","dur.num = 0;",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["    TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, \/*index=*\/0,","                                                &input_quantized));","    input_quantized->type = input_weights->type;","    input_quantized->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {","      TfLiteIntArray* input_quantized_size = TfLiteIntArrayCopy(input->dims);","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_quantized,"],"label":0}
{"cve":"CVE-2022-1237","code_chunks":["\t}","\tRList *segments = r_list_newf (free);","\tfor (i = 0; i < bin->ne_header->SegCount; i++) {","\t\tRBinSection *bs = R_NEW0 (RBinSection);","\t\tif (!bs) {","\t\t\treturn segments;","\t\t}"],"label":0}
{"cve":"CVE-2016-10161","code_chunks":["yych = *++YYCURSOR;","if (yych != '\"') goto yy18;","++YYCURSOR;","#line 643 \"ext\/standard\/var_unserializer.re\"","{","size_t len, maxlen;","char *str;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);"],"label":0}
{"cve":"CVE-2017-14059","code_chunks":["","\/* parse image offsets *\/","avio_seek(pb, offImageOffsets, SEEK_SET);","for (i = 0; i < st->duration; i++)","av_add_index_entry(st, avio_rl64(pb), i, 0, 0, AVINDEX_KEYFRAME);","","return 0;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["int8_t u, naf[RLC_FP_BITS + 2];","ep_t t[1 << (EP_WIDTH - 2)];","bn_t _k, n;","size_t l;","","bn_null(n);","bn_null(_k);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","node->temporaries->data[kAccumScratch] =","scratch_tensor_index + kAccumScratch;","TfLiteTensor* accum_scratch = GetTemporary(context, node, kAccumScratch);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {n_cell, n_batch};"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["             }","","    break;","","","    { (yyval.backup_token).token = actual_type;","                                      (yyval.backup_token).actual = actual;"],"label":0}
{"cve":"CVE-2020-1911","code_chunks":["} else if (desc.flags.hostObject) {","SymbolID id{};","LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, id);","auto propRes = vmcast<HostObject>(selfHandle.get())->get(id);","if (propRes == ExecutionStatus::EXCEPTION)","return ExecutionStatus::EXCEPTION;","return createPseudoHandle(*propRes);"],"label":1}
{"cve":"PYSEC-2021-412","code_chunks":["done);","","Tensor group_assignment = c->input(2);","","OP_REQUIRES_OK_ASYNC(","c,"],"label":1}
{"cve":"CVE-2021-3753","code_chunks":["\t\tconsole_lock();","\t\tret = vt_reldisp(vc, arg);","\t\tconsole_unlock();","","\t\treturn ret;","",""],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["#ifdef CONFIG_CHAIN_OF_TRUST","\tuintptr_t pfe_esbc_hdr = 0;","\tuintptr_t pfe_img_addr = 0;","#endif","\tint ret = 0;","\tint fw_count;",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["input_offsets_size->data[0] = num_batches * batch_size;","TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_offsets,","input_offsets_size));","}","node->temporaries->data[6] = op_data->scratch_tensor_index + 6;","TfLiteTensor* row_sums = GetTemporary(context, node, \/*index=*\/6);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from arg\");","return 1;","}"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        if (_PyObject_LookupAttrId(obj, &PyId_body, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"body\\\" missing from ExceptHandler\");","            return 1;","        }"],"label":0}
{"cve":"CVE-2022-34835","code_chunks":["char *const argv[])","{","uint\tchip;","int alen;","uint\taddr;","uint\tlength;","u_char\tbytes[16];"],"label":1}
{"cve":"CVE-2023-30549","code_chunks":["entry = IFIRST(header);","","\/* Compute min_offs. *\/","for (; !IS_LAST_ENTRY(entry); entry = EXT4_XATTR_NEXT(entry)) {","if (!entry->e_value_inum && entry->e_value_size) {","size_t offs = le16_to_cpu(entry->e_value_offs);","if (offs < min_offs)"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["bool (*func)(bool, bool)) {","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"PYSEC-2021-649","code_chunks":["void Compute(OpKernelContext* context) override {","const Tensor* input_indices;","const Tensor* input_values;","const Tensor* input_shape;","SparseTensorsMap* map;",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["if (index >= 0 && index < node->inputs->size) {","const int tensor_index = node->inputs->data[index];","if (tensor_index != kTfLiteOptionalTensor) {","if (context->tensors != nullptr) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["    prod_scaling_factors->type = kTfLiteFloat32;","    prod_scaling_factors->allocation_type = kTfLiteArenaRw;","    if (!TfLiteIntArrayEqualsArray(prod_scaling_factors->dims, 1,","                                   scaling_dims)) {","      TfLiteIntArray* prod_scaling_factors_size = TfLiteIntArrayCreate(1);","      prod_scaling_factors_size->data[0] = n_batch;","      TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2021-29463","code_chunks":["                    std::cout << Internal::binaryToHex(payload.pData_, payload.size_);","#endif","                }","            } else {","                io_->seek(size, BasicIo::cur);","            }",""],"label":0}
{"cve":"CVE-2018-5810","code_chunks":["unsigned kodak, entries, tag, type, len, save, c;","double expo,ape;","","kodak = !strncmp(make,\"EASTMAN\",7) && tiff_nifds < 3;","entries = get2();","if(!strncmp(make,\"Hasselblad\",10) && (tiff_nifds > 3) && (entries > 512)) return;"],"label":0}
{"cve":"CVE-2021-40812","code_chunks":["\t\tgdFree(info);","\t\treturn NULL;","\t}","","\tswitch (info->depth) {","\t\tBMP_DEBUG(printf(\"1-bit image\\n\"));","\t\terror = bmp_read_1bit(im, infile, info, hdr);"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["        return 1;","    }","    else {","        int res;","        res = obj2ast_identifier(tmp, &arg, arena);","        if (res != 0) goto failed;","        Py_CLEAR(tmp);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 3 * top_paths + 1);","","const TfLiteTensor* inputs;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputsTensor, &inputs));","TF_LITE_ENSURE_EQ(context, NumDimensions(inputs), 3);","TF_LITE_ENSURE_EQ(context, inputs->type, kTfLiteFloat32);"],"label":0}
{"cve":"PYSEC-2021-412","code_chunks":["    sub_node.add_input(c->def().input(0));","    sub_node.set_device(c->def().device());","    SetAttrValue(data_type_, &(*sub_node.mutable_attr())[\"T\"]);","    merge_op_ = BuildOpKernel(c, merge_op_name, &sub_node);","    final_op_ = BuildOpKernel(c, final_op_name, &sub_node);","    name_ = strings::StrCat(c->def().name(), \": ReduceV2(\", merge_op_name, \",\",","                            final_op_name, \")\");"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","","const TfLiteTensor* multipliers = GetInput(context, node, kInputMultipliers);","if (multipliers->type != kTfLiteInt32 && multipliers->type != kTfLiteInt64) {","context->ReportError(context,","\"Multipliers of type '%s' are not supported by tile.\","],"label":1}
{"cve":"CVE-2016-10167","code_chunks":["path = gdTestFilePath2(\"gdimagegrayscale\", \"basic_exp.png\");","    gdAssertImageEqualsToFile(path, im);","    gdFree(path);","","    gdImageDestroy(im);","","    return gdNumFailures();"],"label":0}
{"cve":"CVE-2016-8649","code_chunks":["static int attach_child_main(void* data)","{","\tstruct attach_clone_payload* payload = (struct attach_clone_payload*)data;","\tint ipc_socket = payload->ipc_socket;","\tlxc_attach_options_t* options = payload->options;","\tstruct lxc_proc_context_info* init_ctx = payload->init_ctx;","#if HAVE_SYS_PERSONALITY_H"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["prod_scaling_factors->type = kTfLiteFloat32;","prod_scaling_factors->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(prod_scaling_factors->dims, 1,"],"label":1}
{"cve":"CVE-2018-11379","code_chunks":["static void get_nb10(ut8* dbg_data, SCV_NB10_HEADER* res) {","const int nb10sz = 16;","memcpy (res, dbg_data, nb10sz);","res->file_name = (ut8*) strdup ((const char*) dbg_data + nb10sz);","}"],"label":1}
{"cve":"CVE-2018-16393","code_chunks":["size_t bufsize, keysize;","","r = select_app_df();","if (r)","return 1;","sc_format_path(\"I0012\", &path);"],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["      if (class_name.is_init()) {","        assertx(isStringType(type(class_name)));","        strncpy(frame->class_name,","                val(class_name).pstr->data(),","                std::min<int64_t>(","                  val(class_name).pstr->size(),","                  strobelight::kClassNameMax"],"label":0}
{"cve":"CVE-2020-11089","code_chunks":["serial->device.name);","","\/* FIXME: CommWriteFile to be replaced by WriteFile *\/","if (CommWriteFile(serial->hComm, Stream_Pointer(irp->input), Length, &nbWritten, NULL))","{","irp->IoStatus = STATUS_SUCCESS;","}"],"label":1}
{"cve":"CVE-2017-1000249","code_chunks":["if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&","type == NT_GNU_BUILD_ID && (descsz == 16 || descsz == 20)) {","uint8_t desc[20];","uint32_t i;","*flags |= FLAGS_DID_BUILD_ID;","\"sha1\") == -1)"],"label":1}
{"cve":"CVE-2021-44109","code_chunks":["data = multipart_parser_get_data(parser);","ogs_assert(data);","","if (at && length) {","SWITCH(data->part[data->num_of_part].content_type)","CASE(OGS_SBI_CONTENT_JSON_TYPE)","CASE(OGS_SBI_CONTENT_5GNAS_TYPE)"],"label":1}
{"cve":"CVE-2021-41136","code_chunks":["goto st25;","if ( ++p == pe )","goto _test_eof25;","#line 598 \"ext\/puma_http11\/http11_parser.c\"","switch( (*p) ) {","case 32: goto tr41;","case 34: goto st0;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["node->temporaries = TfLiteIntArrayCreate(2);    }","node->temporaries->data[kFwScratchBuffer] =","op_data->scratch_tensor_index + kFwScratchBuffer;","TfLiteTensor* fw_scratch_buffer ="],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus PrepareAny(TfLiteContext* context, TfLiteNode* node) {","TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","const TfLiteTensor* input = GetInput(context, node, 0);","TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteBool);","return PrepareSimple(context, node);","}"],"label":1}
{"cve":"PYSEC-2021-462","code_chunks":["","      Tensor output_indices = Tensor(DT_INT64, {num_entries, rank - 1});","      Tensor output_values = Tensor(DataTypeToEnum<T>::value, {num_entries});","","      auto output_indices_t = output_indices.matrix<int64>();","      auto output_values_t = output_values.vec<T>();",""],"label":0}
{"cve":"CVE-2018-6334","code_chunks":["","      if (!skip_upload) {","        \/* Handle file *\/","        char path[PATH_MAX];","","                snprintf(path, sizeof(path), \"%s\/XXXXXX\",","                 RuntimeOption::UploadTmpDir.c_str());"],"label":0}
{"cve":"CVE-2016-10060","code_chunks":["ThrowFileException(exception,ResourceLimitError,\"MemoryAllocationFailed\",","GetExceptionMessage(errno));","","output=fopen_utf8(argv[argc-1],\"wb\");","if (output == (FILE *) NULL) {","ThrowFileException(exception,FileOpenError,\"UnableToOpenFile\",argv[argc-1]);"],"label":1}
{"cve":"CVE-2022-1240","code_chunks":["\t\treloc->pc_relative = a_info.r_pcrel;","\t\treloc->size = a_info.r_length;","\t\tr_str_ncpy (reloc->name, sym_name, sizeof (reloc->name) - 1);","\t\tr_skiplist_insert (relocs, reloc);","\t\tfree (sym_name);","\t}","\tfree (info);"],"label":0}
{"cve":"CVE-2021-3770","code_chunks":["int\t    valcount = 1;","int\t    t;","char_u  *cp;","","if (var[0] == NUL || (var[0] == '0' && var[1] == NUL))","{"],"label":0}
{"cve":"CVE-2018-20181","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["return ast_for_for_stmt(c, CHILD(n, 1),","1 \/* is_async *\/);","","PyErr_Format(PyExc_SystemError,","\"invalid async stament: %s\","],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2018-8793","code_chunks":["x = CVAL(in);","if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;"],"label":1}
{"cve":"CVE-2022-37032","code_chunks":["if (action != CAPABILITY_ACTION_SET","&& action != CAPABILITY_ACTION_UNSET)","{","zlog_info (\"%s Capability Action Value error %d\",","peer->host, action);","bgp_notify_send (peer, BGP_NOTIFY_CEASE, 0);"],"label":1}
{"cve":"CVE-2021-45934","code_chunks":["#ifdef WOLFMQTT_NONBLOCK","if (rc == MQTT_CODE_CONTINUE)","return rc;","#endif","","#ifdef WOLFMQTT_MULTITHREAD"],"label":1}
{"cve":"CVE-2016-10010","code_chunks":["","\/* XXX fine grained permissions *\/","if ((options.allow_streamlocal_forwarding & FORWARD_LOCAL) != 0 &&","!no_port_forwarding_flag && !options.disable_forwarding) {","c = channel_connect_to_path(target,","\"direct-streamlocal@openssh.com\", \"direct-streamlocal\");","} else {"],"label":1}
{"cve":"CVE-2021-23177","code_chunks":["\t\t    & ARCHIVE_ENTRY_ACL_TYPE_ACCESS) != 0) {","\t\t\tret = set_acl(a, fd, name, abstract_acl, mode,","\t\t\t    ARCHIVE_ENTRY_ACL_TYPE_ACCESS, \"access\");","\t\t\tif (ret != ARCHIVE_OK)","\t\t\t\treturn (ret);","\t\t}","\t\tif ((archive_acl_types(abstract_acl)"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2018-14466","code_chunks":["\t\t\tstrncpy(a, (const char *) bp, i);","\t\t\ta[i] = '\\0';","\t\t\tacl_print(ndo, (u_char *) a, sizeof(a), (u_char *) a + i);","\t\t\tbreak;","\t\t}","\t\tcase 137:\t\/* Create file *\/","\t\tcase 141:\t\/* MakeDir *\/"],"label":0}
{"cve":"CVE-2016-3134","code_chunks":["{","static const struct ipt_ip uncond;","","return memcmp(ip, &uncond, sizeof(uncond)) == 0;","#undef FWINV","}"],"label":1}
{"cve":"CVE-2022-28073","code_chunks":["r_return_val_if_fail (reg && item, false);","","ut8 bytes[12];","ut8 *src = bytes;","","if (r_reg_is_readonly (reg, item)) {"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["","        status = create_srtp_ctx(ds->srtp, &ds->srtp->srtp_rtcp,","                                 &setting, &ds->srtp->srtp_rtcp.tx_policy_neg,","                                 &ds->srtp->srtp_rtcp.rx_policy_neg);","        if (status != PJ_SUCCESS)","            pj_perror(4, ds->base.name, status, \"Failed creating SRTP RTCP\");","    }"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["{","tok->done = E_TABSPACE;","tok->cur = tok->inp;","return ERRORTOKEN;","}",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  op_params.quantized_activation_min = data->activation_min;","  op_params.quantized_activation_max = data->activation_max;","","  if (input->type == kTfLiteUInt8) {","    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),","                               tflite::micro::GetTensorData<uint8_t>(input),","                               tflite::micro::GetTensorShape(output),"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* axis_tensor;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kAxisTensor, &axis_tensor));","int axis = GetTensorData<int32_t>(axis_tensor)[0];","const int rank = NumDimensions(input);"],"label":0}
{"cve":"CVE-2021-36080","code_chunks":["{                                                                       \\","START_OBJECT_HANDLE_STREAM                                            \\","}                                                                       \\","if (hdl_dat->byte > dat->byte)                                            \\","{                                                                       \\","dat->byte = hdl_dat->byte;                                            \\"],"label":1}
{"cve":"CVE-2016-10167","code_chunks":["path = gdTestFilePath2(\"gdimagegrayscale\", \"basic_exp.png\");","    gdAssertImageEqualsToFile(path, im);","    gdFree(path);","","    gdImageDestroy(im);","","    return gdNumFailures();"],"label":0}
{"cve":"CVE-2018-20176","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2023-51042","code_chunks":["struct drm_amdgpu_fence *fences_user;","struct drm_amdgpu_fence *fences;","int r;","","\/* Get the fences from userspace *\/","fences = kmalloc_array(fence_count, sizeof(struct drm_amdgpu_fence),"],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["          width = 8956;","          height = 6708;","          memset(cblack,0,sizeof(cblack));","          adobe_coeff(\"Hasselblad\",\"H4D-60\");","          strcpy(model,\"H4D-60\");","          black = 512;","        }"],"label":0}
{"cve":"CVE-2016-4564","code_chunks":["    arc.x=0.5*offset.x;","  if (arc.y > (0.5*offset.y))","    arc.y=0.5*offset.y;","  point.x=start.x+offset.x-arc.x;","  point.y=start.y+arc.y;","  degrees.x=270.0;","  degrees.y=360.0;"],"label":0}
{"cve":"CVE-2020-1921","code_chunks":["assertx(isStringType(type(class_name)));","strncpy(frame->class_name,","val(class_name).pstr->data(),","std::min(val(class_name).pstr->size(), strobelight::kClassNameMax));","frame->class_name[strobelight::kClassNameMax - 1] = '\\0';","}",""],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["Py_DECREF(id);","return NULL;","}","PyTuple_SET_ITEM(c->c_normalize_args, 1, id);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(","context, context->ResizeTensor(context, fw_output, fw_output_size_array));","if (!params->merge_outputs) {","TfLiteTensor* bw_output = GetOutput(context, node, kBwOutputTensor);","TfLiteIntArray* bw_output_size_array = TfLiteIntArrayCreate(3);","bw_output_size_array->data[0] = batch_size;","bw_output_size_array->data[1] = max_time;"],"label":1}
{"cve":"CVE-2023-40589","code_chunks":["}","","Literal = (HuffTableLEC[MaskedBits] & 0xFF);","*HistoryPtr++ = Literal;","}",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["    if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {","      TfLiteIntArray* scaling_factors_size = TfLiteIntArrayCreate(1);","      scaling_factors_size->data[0] = batch_size;","      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, scaling_factors,","                                                       scaling_factors_size));","    }","    node->temporaries->data[3] = op_data->scratch_tensor_index + 3;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 3 * top_paths + 1);","","const TfLiteTensor* inputs;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputsTensor, &inputs));","TF_LITE_ENSURE_EQ(context, NumDimensions(inputs), 3);","TF_LITE_ENSURE_EQ(context, inputs->type, kTfLiteFloat32);"],"label":0}
{"cve":"CVE-2023-26123","code_chunks":["{","#if defined(PLATFORM_DESKTOP)","char *cmd = (char *)RL_CALLOC(strlen(url) + 32, sizeof(char));","#if defined(_WIN32)"],"label":1}
{"cve":"CVE-2021-32686","code_chunks":["","\/* Update certificates info on successful handshake *\/","if (status == PJ_SUCCESS)","ssl_update_certs_info(ssock);","","\/* Accepting *\/"],"label":0}
{"cve":"CVE-2016-4303","code_chunks":["    cJSON* o;","    va_list argp;","    const char *cp;","    char name[100];","    char* np;","    cJSON* j;",""],"label":0}
{"cve":"CVE-2021-32138","code_chunks":["esd = gf_isom_get_esd(file, trackNum, 1);","if (!esd || !esd->decoderConfig) {","M4_LOG(GF_LOG_WARNING, (\"WARNING: Broken MPEG-4 Track\\n\"));","if (esd) gf_odf_desc_del((GF_Descriptor *)esd);","} else {","const char *st = gf_stream_type_name(esd->decoderConfig->streamType);"],"label":1}
{"cve":"CVE-2019-13223","code_chunks":["    0.992 - fixes for MinGW warning","    0.991 - turn fast-float-conversion on by default","    0.990 - fix push-mode seek recovery if you seek into the headers","    0.98b - fix to bad release of 0.98","    0.98 - fix push-mode seek recovery; robustify float-to-int and support non-fast mode","    0.97 - builds under c++ (typecasting, don't use 'class' keyword)","    0.96 - somehow MY 0.95 was right, but the web one was wrong, so here's my 0.95 rereleased as 0.96, fixes a typo in the clamping code"],"label":0}
{"cve":"CVE-2016-1245","code_chunks":["\/* Register myself. *\/","rtadv_event (zvrf, RTADV_READ, sock);","","len = rtadv_recv_packet (sock, buf, BUFSIZ, &from, &ifindex, &hoplimit);","","if (len < 0)","{"],"label":1}
{"cve":"CVE-2016-8339","code_chunks":["                }","                fclose(logfp);","            }","        } else if (!strcasecmp(argv[0],\"syslog-enabled\") && argc == 2) {","            if ((server.syslog_enabled = yesnotoi(argv[1])) == -1) {","                err = \"argument must be 'yes' or 'no'\"; goto loaderr;","            }"],"label":0}
{"cve":"CVE-2019-13221","code_chunks":["ady -= abs(base) * adx;","if (x1 > n) x1 = n;","if (x < x1) {","LINE_OP(output[x], inverse_db_table[y]);","for (++x; x < x1; ++x) {"],"label":1}
{"cve":"CVE-2020-7042","code_chunks":["subj = X509_get_subject_name(cert);","","#ifdef HAVE_X509_CHECK_HOST","if (X509_check_host(cert, common_name, FIELD_SIZE, 0, NULL) == 1)","cert_valid = 1;","#else","if (subj"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["}","else {","int res;","res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2020-1898","code_chunks":["                                       const String& new_func_name) {","  if (orig_func_name.empty() || new_func_name.empty() ||","      orig_func_name.get()->isame(new_func_name.get())) {","    raise_invalid_argument_warning(\"unable to rename %s\", orig_func_name.data());","    return false;","  }",""],"label":0}
{"cve":"CVE-2019-15226","code_chunks":["if (entry != nullptr) {","char buf[32];","StringUtil::itoa(buf, sizeof(buf), value);","appendToHeader(entry->value(), buf);","return;","}","HeaderString new_key;"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["openEntity->betweenDecl = betweenDecl;","openEntity->internalEventPtr = NULL;","openEntity->internalEventEndPtr = NULL;","textStart = (const char *)entity->textPtr;","textEnd = (const char *)(entity->textPtr + entity->textLen);","\/* Set a safe default value in case 'next' does not get set *\/"],"label":1}
{"cve":"CVE-2021-41131","code_chunks":["# The only other module the client interacts with is 'tuf.settings'.  The","# client accesses this module solely to set the repository directory.","# This directory will hold the files downloaded from a remote repository.","from tuf import settings","settings.repositories_directory = 'local-repository'"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["","    const TfLiteTensor* gate_bias;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kGateBias, &gate_bias));","  TF_LITE_ENSURE_EQ(context, gate_bias->dims->size, 1);","  TF_LITE_ENSURE_EQ(context, gate_bias->dims->data[0], 2 * n_output);",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["const bn_t m) {","ep_t t0[1 << (EP_WIDTH \/ 2)], t1[1 << (EP_WIDTH \/ 2)], t[1 << EP_WIDTH];","bn_t n, _k, _m;","int l0, l1, w = EP_WIDTH \/ 2;","uint8_t w0[RLC_FP_BITS + 1], w1[RLC_FP_BITS + 1];","","if (bn_is_zero(k) || ep_is_infty(p)) {"],"label":1}
{"cve":"CVE-2022-45474","code_chunks":["* the socket may have been closed and\/or fdp may have been changed","* in curl_multi_socket_action(), so check them both *\/","if(!error && socket_map.find(s) != socket_map.end() &&","(*fdp == action || *fdp == CURL_POLL_INOUT)) {","boost::asio::ip::tcp::socket *tcp_socket = socket_map.find(s)->second;","","if(action == CURL_POLL_IN) {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["","PyObject *tmp = NULL;","int lineno;","int col_offset;","","if (obj == Py_None) {"],"label":1}
{"cve":"CVE-2018-14553","code_chunks":[],"label":1}
{"cve":"CVE-2022-0496","code_chunks":["if (!stream.good()) {","LOG(message_group::Warning,Location::NONE,\"\",\"Can't open DXF file '%1$s'.\",filename);","return;","}","","Grid2d<std::vector<int>> grid(GRID_COARSE);","std::vector<Line> lines;                       \tstd::unordered_map<std::string, std::vector<Line>> blockdata;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["int lineno = 0;","struct stat st;","","if (flags & READ_ATTR_NOFOLLOW)","fd = open_nofollow(path, O_RDONLY);","else"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["      GetOptionalInputTensor(context, node, kBwAuxInputToCellWeightsTensor);","  const TfLiteTensor* bw_aux_input_to_output_weights =","      GetOptionalInputTensor(context, node, kBwAuxInputToOutputWeightsTensor);","","  const bool aux_inputs_weights_all_or_none =","      ((fw_aux_input_to_cell_weights != nullptr) &&","       (fw_aux_input_to_forget_weights != nullptr) &&"],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["pj_scan_get_until_ch(scanner, ' ', &med->desc.media);","pj_scan_get_char(scanner);","","\/* port *\/","pj_scan_get(scanner, &cs_token, &str);","med->desc.port = (unsigned short)pj_strtoul(&str);"],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[] = {0, 0};","if(width > 2064) return 0.f;","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;"],"label":1}
{"cve":"CVE-2018-8794","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2020-12465","code_chunks":["\tif (more)","\t\treturn;","","\tq->rx_head = NULL;","\tdev->drv->rx_skb(dev, q - dev->q_rx, skb);","}",""],"label":0}
{"cve":"CVE-2018-6560","code_chunks":["                      buffer->size = auth_end;","                      extra_data = buffer->pos - buffer->size;","","                      \/* We may have gotten some extra data which is not part of","                         the auth handshake, keep it for the next iteration. *\/","                      if (extra_data > 0)","                        side->extra_input_data = g_bytes_new (buffer->data + buffer->size, extra_data);"],"label":0}
{"cve":"CVE-2022-35977","code_chunks":["        return;","    }","","    o = lookupKeyWrite(c->db,c->argv[1]);","    if (o == NULL) {","        \/* Return 0 when setting nothing on a non-existing string *\/","        if (sdslen(value) == 0) {"],"label":0}
{"cve":"CVE-2019-1010315","code_chunks":["                error_line (\"%s\", WavpackGetErrorMessage (wpc));","                return WAVPACK_SOFT_ERROR;","        }","","        WavpackBigEndianToNative (&dff_chunk_header, DFFChunkHeaderFormat);","","        if (debug_logging_mode)"],"label":0}
{"cve":"CVE-2023-51698","code_chunks":["file = g_file_new_for_uri (uri);","comics_document->archive_path = g_file_get_path (file);","g_object_unref (file);","","if (!comics_document->archive_path) {","g_set_error_literal (error,","EV_DOCUMENT_ERROR,"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["    TfLiteRegistration reg = {nullptr, nullptr, nullptr, nullptr};","","            reg.prepare = [](TfLiteContext* context, TfLiteNode* node) {","      const TfLiteTensor* in_tensor;","      TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &in_tensor));","      TfLiteTensor* out_tensor;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));"],"label":0}
{"cve":"CVE-2022-48620","code_chunks":["continue;","ctx->workaround = 0;","","while ((nfds = epoll_wait(ctx->fd, ee, ctx->maxevents, timeout)) < 0) {","if (!ctx->running)","break;",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteNode* node, OpData* op_data) {","const TfLiteTensor* input_box_encodings;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorBoxEncodings,","&input_box_encodings));","const TfLiteTensor* input_class_predictions;"],"label":0}
{"cve":"CVE-2019-10131","code_chunks":["","      profile=GetImageProfile(image,\"iptc\");","      if (profile == (StringInfo *) NULL)","        profile=GetImageProfile(image,\"8bim\");","      if (profile == (StringInfo *) NULL)","        ThrowWriterException(CoderError,\"No8BIMDataIsAvailable\");","      assert(exception != (ExceptionInfo *) NULL);"],"label":0}
{"cve":"CVE-2022-0711","code_chunks":["\t\t\tconst char *err;","","\t\t\th += strlen(STAT_SCOPE_INPUT_NAME) + 1;","\t\t\th2 = h;","\t\t\tappctx->ctx.stats.scope_str = h2 - HTX_SL_REQ_UPTR(sl);","\t\t\twhile (h < end) {","\t\t\t\tif (*h == ';' || *h == '&' || *h == ' ')"],"label":0}
{"cve":"CVE-2020-28097","code_chunks":["vga_w(state->vgabase, VGA_PEL_D, 0);","}","}","","static int vgacon_blank(struct vc_data *c, int blank, int mode_switch)","{"],"label":1}
{"cve":"CVE-2018-14680","code_chunks":["D((\"first pmgl chunk is after last pmgl chunk\"))","return MSPACK_ERR_DATAFORMAT;","}","if (chm->index_root != 0xFFFFFFFF && chm->index_root > chm->num_chunks) {","D((\"index_root outside valid range\"))","return MSPACK_ERR_DATAFORMAT;","}"],"label":1}
{"cve":"CVE-2020-15191","code_chunks":["","m.def(\"TFE_ToDlpackCapsule\", [](py::handle& o) {","PyObject* eager_tensor_pyobject_ptr = o.ptr();","TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);","tensorflow::Safe_TF_StatusPtr status =","tensorflow::make_safe(TF_NewStatus());","void* dlm_ptr = tensorflow::TFE_HandleToDLPack(thandle, status.get());"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* value;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kValueTensor, &value));","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));"],"label":0}
{"cve":"CVE-2018-20763","code_chunks":["\t\tu32 duration, descIndex, nb_styles, nb_marks;","\t\tBool isRAP, same_style, same_box;","","\t\tif (node->type) continue;","\t\tif (strcmp(node->name, \"sample\")) continue;","","\t\tisRAP = GF_FALSE;"],"label":0}
{"cve":"CVE-2022-1276","code_chunks":["    \/* should not happen *\/","    break;","","    if (!tree) {","      int idx = lv_idx(s, MRB_OPSYM_2(s->mrb, and));","","      if (idx == 0) {"],"label":0}
{"cve":"CVE-2018-12562","code_chunks":["MpdCantataMounterInterface * mounter();"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT16 compDeskSupportLevel;","WLog_INFO(TAG,","\"DesktopCompositionCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));","","if (Stream_GetRemainingLength(s) < 2)"],"label":0}
{"cve":"CVE-2017-11664","code_chunks":["uint8_t channel;","} *note;","","UNUSED(hmi_size);","","if (memcmp(hmi_data, \"HMI-MIDISONG061595\", 18)) {","_WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0);"],"label":1}
{"cve":"CVE-2018-18313","code_chunks":["                    temp_end++;","                }","","                \/* Here, temp_end points to one beyond the first printable if","                 * found, or to one beyond 'max' if not.  If none found, make","                 * sure that we use the entire range *\/","                if (temp_end > MAX_PRINT_A) {"],"label":0}
{"cve":"CVE-2018-15473","code_chunks":["\t\tkeyopts = NULL;","\t\tgoto success;","\t}","","\t\/*","\t * Additional authorisation for certificates.","\t *\/"],"label":0}
{"cve":"CVE-2023-36054","code_chunks":["bool_t","xdr_getpkeys_arg(XDR *xdrs, getpkeys_arg *objp)","{","\tif (!xdr_ui_4(xdrs, &objp->api_version)) {","\t\treturn FALSE;","\t}","\tif (!xdr_krb5_principal(xdrs, &objp->princ)) {"],"label":0}
{"cve":"CVE-2016-0740","code_chunks":["char *filename = \"tempfile.tif\";","char *mode = \"r\";","TIFF *tiff;","int size;","","","\/* buffer is the encoded file, bytes is the length of the encoded file *\/"],"label":1}
{"cve":"CVE-2022-28073","code_chunks":["ht_pp_free (etracedb->ht);","etracedb->ht = ht_pp_new_size (fcn->ninstr * 0xf, opt.dupvalue, opt.freefn, opt.calcsizeV);","etracedb->ht->opt = opt;","RDebugTrace *dtrace = core->dbg->trace;","opt = dtrace->ht->opt;","ht_pp_free (dtrace->ht);"],"label":1}
{"cve":"CVE-2022-23579","code_chunks":["}","","const NodeDef* input = node_map_->GetNode(NodeName(node.input(0)));","CHECK(input != nullptr) << \"node = \" << node.name()","<< \" input = \" << node.input(0);"],"label":1}
{"cve":"CVE-2022-26530","code_chunks":["\t\t\tif (state) {","\t\t\t\tstate->args.override_indicator_x_position = true;","\t\t\t\tstate->args.indicator_x_position = atoi(optarg);","\t\t\t}","\t\t\tbreak;","\t\t\tif (state) {","\t\t\t\tstate->args.override_indicator_y_position = true;"],"label":0}
{"cve":"CVE-2021-3521","code_chunks":["\tfree(digps);","    }","","    return rc;","}","","int pgpPrtPkts(const uint8_t * pkts, size_t pktlen, pgpDig dig, int printing)"],"label":0}
{"cve":"PYSEC-2021-662","code_chunks":["void Compute(OpKernelContext* ctx) override {","ReshapeOp::Compute(ctx);","","const float input_min_float = ctx->input(2).flat<float>()(0);","const float input_max_float = ctx->input(3).flat<float>()(0);","Tensor* output_min = nullptr;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"Delete field \\\"targets\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(targets, i, val);","            }"],"label":0}
{"cve":"CVE-2022-29226","code_chunks":["  response_headers->addReferenceKey(","      Http::Headers::get().SetCookie,","      absl::StrCat(cookie_names.oauth_expires_, \"=\", new_expires_, cookie_tail_http_only));","","      if (config_->forwardBearerToken()) {","    response_headers->addReferenceKey(","        Http::Headers::get().SetCookie,"],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["                                                    cancellable, &local_error);","","      if (blob_fd == -1 && delta_layer == NULL &&","          flatpak_oci_registry_is_local (registry) &&","          g_error_matches (local_error, G_IO_ERROR, G_IO_ERROR_NOT_FOUND))","        {","          \/* Pulling regular layer from local repo and its not there, try the uncompressed version."],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["","#if !CONFIG_IS_ENABLED(GENERATE_ACPI_TABLE)","","\/**"," * copy_fdt() - Copy the device tree to a new location available to EFI"," *"," * The FDT is copied to a suitable location within the EFI memory map."],"label":0}
{"cve":"CVE-2021-40524","code_chunks":["(overflow > 0 || quota.files >= user_quota_files ||","quota.size > user_quota_size ||","(max_filesize >= (off_t) 0 &&","(max_filesize = user_quota_size - quota.size) < (off_t) 0))) {","overflow = 1;","(void) close(f);"],"label":1}
{"cve":"CVE-2022-24754","code_chunks":["","    pjsip_endpt_release_pool(endpt, auth->pool);","    auth->pool = auth_pool;","}","","\/* Process authorization challenge *\/","static pj_status_t process_auth( pj_pool_t *req_pool,"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const int batch_size = SizeOfDimension(input, 0);","","const float* input_ptr = GetTensorData<float>(input);","int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>("],"label":1}
{"cve":"CVE-2020-5238","code_chunks":["table_row *row = NULL;","bufsize_t cell_matched = 1, pipe_matched = 1, offset;","int expect_more_cells = 1;","int row_end_offset = 0;","","row = (table_row *)parser->mem->calloc(1, sizeof(table_row));"],"label":0}
{"cve":"CVE-2021-33815","code_chunks":["                        gb->buffer = ch_gb.buffer + 1;","            continue;","        } else if ((var_size = check_header_variable(s, \"dataWindow\", \"box2i\",","                                                     31)) >= 0) {","            int xmin, ymin, xmax, ymax;","            if (!var_size) {","                ret = AVERROR_INVALIDDATA;"],"label":0}
{"cve":"CVE-2022-24792","code_chunks":["\tsize_to_read = (pj_off_t)wave_hdr.fmt_hdr.len - 16;","\tstatus = pj_file_setpos(fport->fd, size_to_read, PJ_SEEK_CUR);","\tif (status != PJ_SUCCESS) {","\t    pj_file_close(fport->fd);","\t    return status;","\t}","    }"],"label":0}
{"cve":"CVE-2023-23946","code_chunks":["* inexistent paths.","*\/","if (stat(iter->base.path.buf, &iter->base.st) < 0) {","saved_errno = errno;","goto error_out;","}"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"Tuple field \\\"elts\\\" changed size during iteration\");"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["    return false;","}","","void MainWindow::on_m_pActionAbout_triggered()","{","    AboutDialog(this, appPath(appConfig().barriercName())).exec();","}"],"label":0}
{"cve":"CVE-2023-23946","code_chunks":["\t}","","\tif (!S_ISDIR(iter->base.st.st_mode)) {","\t\tsaved_errno = ENOTDIR;","\t\tgoto error_out;","\t}",""],"label":0}
{"cve":"CVE-2021-32439","code_chunks":["{","GF_TimeToSampleBox *stts = stbl->TimeToSample;","","CHECK_PACK(GF_ISOM_INVALID_FILE)","","if (stts->nb_entries) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* tensor0 = GetInput(context, node, 0);","TfLiteTensor* tensor1 = GetOutput(context, node, 0);","TfLiteIntArray* newSize = TfLiteIntArrayCopy(tensor0->dims);","return context->ResizeTensor(context, tensor1, newSize);","};"],"label":1}
{"cve":"CVE-2016-6871","code_chunks":["static Variant HHVM_FUNCTION(bcsqrt, const String& operand,","                             int64_t scale \/* = -1 *\/) {","  scale = adjust_scale(scale);","  bc_num result;","  bc_init_num(&result);","  SCOPE_EXIT {","    bc_free_num(&result);"],"label":0}
{"cve":"CVE-2017-5209","code_chunks":["}","l = strcspn(ptr, \"\\r\\n\\t \");","if (l > 3 && ptr+l <= buf+len) {","p+=base64decode_block(outbuf+p, ptr, l);","ptr += l;"],"label":1}
{"cve":"CVE-2016-5157","code_chunks":["","while (fgets(lbase, sizeof(lbase), fbase) && fgets(ltest,sizeof(ltest),ftest))","{","int nbase = sscanf(lbase, \"%255[^\\r\\n]\", strbase);","int ntest = sscanf(ltest, \"%255[^\\r\\n]\", strtest);","assert( nbase != 255 && ntest != 255 );"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["ch = CHILD(n, i);","if (TYPE(ch) == stmt)","l += num_stmts(ch);","}","return l;","return num_stmts(CHILD(n, 0));","return 1;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["            PyErr_SetString(PyExc_TypeError, \"required field \\\"body\\\" missing from AsyncWith\");","            return 1;","        }","        else {","            int res;","            Py_ssize_t len;","            Py_ssize_t i;"],"label":0}
{"cve":"CVE-2017-16910","code_chunks":["}","break;","if ((min = ~(max = 0)) && (col += 2) < width - 3 && row > 2)","row--;","}","}",""],"label":1}
{"cve":"CVE-2022-29203","code_chunks":["} else if (first_value == kUnknownDim || second_value == kUnknownDim) {","*out = UnknownDim();","} else {","const int64_t product = first_value * second_value;","if (product < 0) {","return errors::InvalidArgument(","\"Negative dimension size caused by overflow when multiplying \","],"label":1}
{"cve":"CVE-2019-13305","code_chunks":["(void) strncpy((char *) q,buffer,extent);","q+=extent;","if ((q-pixels+extent+2) >= sizeof(pixels))","{","*q++='\\n';"],"label":1}
{"cve":"PYSEC-2020-294","code_chunks":["  return context->ResizeTensor(context, output, output_shape);","}","","TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","  const TfLiteTensor* data = GetInput(context, node, kInputDataTensor);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["                           \"initialized properly.\"));","      return;","    }","    tensorflow::Status s(static_cast<tensorflow::error::Code>(error_code),","                         error_message);","    s.SetPayload(tsl::CoordinationErrorPayloadKey(),","                 absl::Cord(\"testing error payload\"));"],"label":0}
{"cve":"CVE-2018-14363","code_chunks":["*        - if we don't have a body: new","*\/","const bool bcached =","(mutt_bcache_exists(pop_data->bcache, ctx->hdrs[i]->data) == 0);","ctx->hdrs[i]->old = false;","ctx->hdrs[i]->read = false;","if (hcached)"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["*literal = decode_unicode_with_escapes(c, n, literal_start,","literal_end-literal_start);","if (!*literal)","return -1;","}"],"label":1}
{"cve":"CVE-2017-7272","code_chunks":["if (*(str) == '[' && str_len > 1) {","\/* IPV6 notation to specify raw address with port (i.e. [fe80::1]:80) *\/","p = memchr(str + 1, ']', str_len - 2);","if (!p || *(p + 1) != ':') {","if (get_err) {","*err = strpprintf(0, \"Failed to parse IPv6 address \\\"%s\\\"\", str);"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["\t\t&CLASS kodak_ycbcr_load_raw : &CLASS kodak_rgb_load_raw;","    }","  }","}","","void CLASS parse_minolta (int base)","{"],"label":0}
{"cve":"CVE-2018-5810","code_chunks":["{","if (len < 1)","return;   string[len - 1] = 0;","if (len < 3)","return;   len = strnlen(string, len - 1);","for (int i = len - 1; i >= 0; i--)"],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["","    memset(&paddedSalt[1], '$', maxSaltLength - 1);","    memcpy(paddedSalt, salt, std::min(maxSaltLength, saltLen));","    paddedSalt[saltLen] = '\\0';","","    if (php_crypt_blowfish_rn(key, paddedSalt, output, sizeof(output))) {","      return strdup(output);"],"label":0}
{"cve":"CVE-2020-7043","code_chunks":["#ifdef HAVE_X509_CHECK_HOST","if (X509_check_host(cert, tunnel->config->gateway_host,","0, 0, NULL) == 1)","cert_valid = 1;","#else"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["accum_scratch_size));","}","node->temporaries->data[4] = op_data->scratch_tensor_index + 4;","TfLiteTensor* zero_points = GetTemporary(context, node, \/*index=*\/4);","zero_points->type = kTfLiteInt32;","zero_points->allocation_type = kTfLiteArenaRw;","int zero_points_dims[1] = {batch_size};"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["\treturn count;","}","bool CxMemFile::Seek(int32_t offset, int32_t origin)","{","\tm_bEOF = false;","\tif (m_pBuffer==NULL) return false;","\tint32_t lNewPos = m_Position;"],"label":0}
{"cve":"CVE-2022-39209","code_chunks":["bracket *b = parser->last_bracket;","if (!b) {","return 0;","}","if (image != 0) {","return b->in_bracket_image1;"],"label":0}
{"cve":"CVE-2021-32628","code_chunks":["unsigned char *ziplistResize(unsigned char *zl, unsigned int len) {","zl = zrealloc(zl,len);","ZIPLIST_BYTES(zl) = intrev32ifbe(len);","zl[len-1] = ZIP_END;"],"label":1}
{"cve":"CVE-2020-15121","code_chunks":["ioctlsocket (s->fd, FIONBIO, (u_long FAR*)&block);","#endif","if (sec > 0 || usec > 0) {","struct timeval tv = {0};"],"label":1}
{"cve":"CVE-2019-20176","code_chunks":["","    if (depth >= max_ls_depth || matches >= max_ls_files) {","        return;","    }","    if ((dir = sreaddir(&names)) == NULL) {","        addreply(226, MSG_CANT_READ_FILE, name);","        return;"],"label":0}
{"cve":"CVE-2022-21732","code_chunks":["REGISTER_KERNEL_BUILDER(Name(\"ThreadPoolDataset\").Device(DEVICE_CPU),","                        ThreadPoolDatasetOp);","REGISTER_KERNEL_BUILDER(","    Name(\"ExperimentalThreadPoolDataset\").Device(DEVICE_CPU),","    ThreadPoolDatasetOp);","","}  }"],"label":0}
{"cve":"CVE-2021-31255","code_chunks":["for (i=0; i<ptr->quality_entry_count; i++) {","int j=0;","tmp_strsize=(u32)ptr->size;","while (tmp_strsize) {","ISOM_DECREASE_SIZE(ptr, 1)","tmp_str[j] = gf_bs_read_u8(bs);"],"label":1}
{"cve":"CVE-2017-12664","code_chunks":["    one;","","  unsigned char","    bit,","    byte,","    color,","    *last_row,"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["      Tile<bool>(*(input->dims), input, multipliers, output);","      break;","      context->ReportError(context, \"Type '%s' is not supported by tile.\",","                           TfLiteTypeGetName(output->type));","      return kTfLiteError;","  }","  return kTfLiteOk;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"PYSEC-2021-160","code_chunks":["","TensorShape output_shape;","OP_REQUIRES_OK(context, TensorShapeUtils::MakeShape(","input_shape_t.data() + 1,","input_shape->NumElements() - 1, &output_shape));","","std::unordered_set<int64> visited;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  std::vector<int> output_dims_num_elements(input_dims, 1);","  std::vector<int> input_dims_num_elements(input_dims, 1);","  for (int i = input_dims - 2; i >= 0; i--) {","    output_dims_num_elements[i] =","        output_dims_num_elements[i + 1] * output_tensor->dims->data[i + 1];","    input_dims_num_elements[i] =","        input_dims_num_elements[i + 1] * input_tensor->dims->data[i + 1];"],"label":0}
{"cve":"CVE-2019-15903","code_chunks":["doProlog(XML_Parser parser, const ENCODING *enc, const char *s, const char *end,","int tok, const char *next, const char **nextPtr, XML_Bool haveMore) {","#ifdef XML_DTD","static const XML_Char externalSubsetName[] = {ASCII_HASH, '\\0'};","#endif \/* XML_DTD *\/"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["}","while (y->used > 1) {","bn_rsh(u, x, bn_bits(x) - RLC_DIG);","_x = u->dp[0];","bn_rsh(v, y, bn_bits(x) - RLC_DIG);","_y = v->dp[0];"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteNode* node, OpData* op_data) {","const TfLiteTensor* input_box_encodings;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorBoxEncodings,","&input_box_encodings));","const TfLiteTensor* input_class_predictions;"],"label":0}
{"cve":"CVE-2017-12664","code_chunks":["{","offset=SeekBlob(image,currentOffset+20,SEEK_SET);","(void) WriteBlobByte(image,0);  \/* reserved by Palm *\/","(void) WriteBlobByte(image,(unsigned char) ((31*transpix.red)\/QuantumRange));","(void) WriteBlobByte(image,(unsigned char) ((63*transpix.green)\/QuantumRange));"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t}","\t\t\tif (n0 < 0) {","\t\t\t\tfp2_inv_cyc(s, t0[-n0 \/ 2]);","\t\t\t\tfp2_mul(r, r, s);","\t\t\t}","\t\t\tif (n1 > 0) {","\t\t\t\tfp2_mul(r, r, t1[n1 \/ 2]);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2018-12559","code_chunks":["}","case Type_File: {","QString path=fileFolder->text().trimmed();","if (path.isEmpty()) {","path=\"\/\";","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","*data->invoke_count += 1;","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const uint8_t* input_data = GetTensorData<uint8_t>(input);","int size = NumElements(input->dims);",""],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["fp_set_dig(r, 1);","l = RLC_FP_BITS + 1;","bn_rec_slw(win, &l, b, FP_WIDTH);","for (i = 0; i < l; i++) {","if (win[i] == 0) {","fp_sqr(r, r);"],"label":1}
{"cve":"CVE-2021-21323","code_chunks":["","g_brave_browser_process->ad_block_service()->ShouldStartRequest(","ctx->request_url, ctx->resource_type, source_host, &did_match_rule,","&did_match_exception, &did_match_important, &ctx->mock_data_url);","if (did_match_important) {","ctx->blocked_by = kAdBlocked;"],"label":0}
{"cve":"CVE-2023-1428","code_chunks":["void Encode(Key, const Value& value) {","AddToSummary(Key::key(), Key::Encode(value).size());","}"],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["                                                          {\":path\", \"\/dynamo\/url\"},","                                                          {\":scheme\", \"http\"},","                                                          {\":authority\", \"host\"},","                                                          {\"expect\", \"100-continue\"}});","  request_encoder_ = &encoder_decoder.first;","  auto response = std::move(encoder_decoder.second);",""],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["","  cudnnHandle_t cudnn_handle = nullptr;","  const auto status = cudnnCreate(&cudnn_handle);","  if (status == CUDNN_STATUS_SUCCESS) {","    CudnnVersion source_version(CUDNN_MAJOR, CUDNN_MINOR, CUDNN_PATCHLEVEL);","","    CudnnVersion loaded_version;"],"label":0}
{"cve":"CVE-2020-11085","code_chunks":["formatList->numFormats = 0;","}","else if (!useLongFormatNames)","{","formatList->numFormats = (dataLen \/ 36);",""],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                }","                asdl_seq_SET(orelse, i, val);","            }","            Py_CLEAR(tmp);","        }","        if (lookup_attr_id(obj, &PyId_type_comment, &tmp) < 0) {","            return 1;"],"label":0}
{"cve":"CVE-2020-27787","code_chunks":["return shdr;","}","}","return 0;","}",""],"label":1}
{"cve":"CVE-2022-35971","code_chunks":["AddInputFromArray<qint32>(TensorShape({value_count}),","{-(1 << 23), 0, (1 << 23)});","AddInputFromArray<float>(TensorShape({}), {-256.0f});","AddInputFromArray<float>(TensorShape({}), {256.0f});","AddInputFromArray<float>(TensorShape({}), {-1.0f});","AddInputFromArray<float>(TensorShape({}), {1.0f});"],"label":0}
{"cve":"CVE-2020-26272","code_chunks":["","Dictionary dict(isolate, event);","dict.Set(\"sender\", sender);","if (frame)","dict.Set(\"frameId\", frame->GetRoutingID());","return event;","}"],"label":1}
{"cve":"CVE-2023-25671","code_chunks":["if (colon_sep != StringRef::npos) {","unsigned long long value;","if (!llvm::getAsUnsignedInteger(output_name.drop_front(colon_sep + 1),","10, value))","output_num = value;","output_name = output_name.take_front(colon_sep);"],"label":1}
{"cve":"CVE-2022-39244","code_chunks":["\t\/* Plain UDP *\/","\tif (rest.slen == 0)","\t    return PJMEDIA_TP_PROTO_UDP;","","\t\/* DTLS-SRTP *\/","\tif (pj_stricmp2(&rest, \"TLS\/RTP\/SAVP\") == 0)","\t    return PJMEDIA_TP_PROTO_DTLS_SRTP;"],"label":0}
{"cve":"CVE-2021-44108","code_chunks":["}","break;","","ogs_error(\"Not implemented ngap_ie_type[%d]\",","n2InfoContent->ngap_ie_type);","ogs_assert_if_reached();"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            Py_CLEAR(tmp);","        }","        if (lookup_attr_id(obj, &PyId_msg, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL || tmp == Py_None) {","            Py_CLEAR(tmp);"],"label":0}
{"cve":"CVE-2018-14055","code_chunks":["","for (const auto& it : m_ConfigEntries) {","for (const CString& sValue : it.second) {","File.Write(sIndentation + it.first + \" = \" + sValue + \"\\n\");","}","}",""],"label":1}
{"cve":"CVE-2020-1916","code_chunks":["}","for (auto& key: keys) {","out << key.c_str() << \"\\n\";","}","}","break;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp12_read_bin(fp12_t a, const uint8_t *bin, size_t len) {","if (len != 8 * RLC_FP_BYTES && len != 12 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["\/* Fraction *\/","if (isdigit(c)) {","c = tok_decimal_tail(tok);","if (c == 0) {","return ERRORTOKEN;","}"],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["    if (offset < 0) return false;","    m_cursor = offset;","  } else if (whence == SEEK_END) {","    if (m_len + offset < 0) return false;","    m_cursor = m_len + offset;","  } else {","    return false;"],"label":0}
{"cve":"CVE-2016-10060","code_chunks":["  cli_wand->location=\"Cleanup\";","  cli_wand->filename=argv[0];","  if (cli_wand->wand.debug != MagickFalse)","    (void) CLILogEvent(cli_wand,CommandEvent,GetMagickModule(),","         \"\\\"%s\\\"\",argv[0]);","","  \/* recover original image_info and clean up stacks"],"label":0}
{"cve":"CVE-2019-15165","code_chunks":["\t\t\t\treturn (-1);","\t\t\t}","","\t\t\t\/*","\t\t\t * Try to add this interface.","\t\t\t *\/","\t\t\tif (!add_interface(p, &cursor, p->errbuf))"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["reinterpret_cast<TfLiteConcatenationParams*>(node->builtin_data);","","const TfLiteTensor* input_tensor = GetInput(context, node, 0);","TF_LITE_ENSURE(context, input_tensor != nullptr);","TfLiteType input_type = input_tensor->type;","const TfLiteTensor* output_tensor = GetOutput(context, node, kOutputTensor);"],"label":0}
{"cve":"CVE-2018-20750","code_chunks":["        }","        ","        msg.tc.pad2   = Swap16IfLE(msg.tc.pad2);","        msg.tc.length = Swap32IfLE(msg.tc.length);","","        switch (msg.tc.length) {","            \/* commands do not have text following *\/"],"label":0}
{"cve":"CVE-2018-20762","code_chunks":["\t\t\treturn -1;","\t\t}","\t}","\tres = mp4client_main(argc, argv);","\tfor (i = 0; i < argc; i++) {","\t\tfree(argv[i]);","\t}"],"label":0}
{"cve":"CVE-2018-12562","code_chunks":["return;","}","if (constPromptPassword==det.url.password()) {","bool ok=false;","QString passwd=InputDialog::getPassword(QString(), &ok, QApplication::activeWindow());","if (!ok) {"],"label":1}
{"cve":"CVE-2015-8631","code_chunks":["\/* okay to cast lengths to int because trunc_name limits max value *\/","krb5_klog_syslog(LOG_NOTICE,","_(\"Unauthorized request: kadm5_rename_principal, \"","\"%.*s%s to %.*s%s, \"","\"client=%.*s%s, service=%.*s%s, addr=%s\"),","(int)tlen1, prime_arg1, tdots1,"],"label":1}
{"cve":"CVE-2022-2980","code_chunks":["#if defined(FEAT_FOLDING)","save_cursor = curwin->w_cursor;","#endif","","if (do_always)","do_always = FALSE;"],"label":0}
{"cve":"PYSEC-2021-446","code_chunks":["const Tensor& handle = ctx->input(0);","const string& name = handle.scalar<tstring>()();","Tensor val;","auto session_state = ctx->session_state();","OP_REQUIRES(ctx, session_state != nullptr,","errors::FailedPrecondition(","\"GetSessionTensor called on null session state\"));"],"label":0}
{"cve":"CVE-2023-44488","code_chunks":["","if (last_w != cpi->oxcf.width || last_h != cpi->oxcf.height) {","memset(cpi->consec_zero_mv, 0,","cm->mi_rows * cm->mi_cols * sizeof(*cpi->consec_zero_mv));","if (cpi->oxcf.aq_mode == CYCLIC_REFRESH_AQ)","vp9_cyclic_refresh_reset_resize(cpi);"],"label":1}
{"cve":"CVE-2022-0417","code_chunks":["emsg(_(e_argument_must_be_positive));","return;","}","if (new_ts < 0 || new_ts > 9999)","{","semsg(_(e_invalid_argument_str), eap->arg);","return;"],"label":1}
{"cve":"CVE-2019-15165","code_chunks":["int status;","struct block_cursor cursor;","struct interface_description_block *idbp;","","\/*","* Assume no read errors.","*\/"],"label":0}
{"cve":"CVE-2018-10887","code_chunks":["\t\t\tdelta += cmd;","\t\t\tres_dp += cmd;","\t\t\tres_sz -= cmd;","","\t\t} else {","\t\t\t\/* cmd == 0 is reserved for future encodings. *\/","\t\t\tgoto fail;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_STATUS(","      context->ResizeTensor(context, unique_output, shape.release()));","    T* output_unique_values = GetTensorData<T>(unique_output);","  for (int i = 0; i < output_values.size(); ++i) {","    output_unique_values[i] = output_values[i];","  }","  return kTfLiteOk;"],"label":0}
{"cve":"CVE-2023-45145","code_chunks":["static int _anetTcpServer(char *err, int port, char *bindaddr, int af, int backlog)","{","    int s = -1, rv;","    char _port[6];  \/* strlen(\"65535\") *\/","    struct addrinfo hints, *servinfo, *p;","","    snprintf(_port,6,\"%d\",port);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\tuint8_t out[64];","\tsize_t len = sizeof(out) \/ 2, code = RLC_ERR;","","\tTEST_ONCE(\"rdrand hardware generator is non-trivial\") {","\t\tmemset(out, 0, 2 * len);","\t\trand_bytes(out, len);","\t\t\/* This fails with negligible probability. *\/"],"label":0}
{"cve":"CVE-2019-5892","code_chunks":["\t\tstream_putw(s, 0);","\t\tstream_putw_at(s, aspath_sizep, aspath_put(s, aspath, 1));","\t}","","\tif (aspath != attr->aspath)","\t\taspath_free(aspath);",""],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["for (auth = auth_switch; auth->name; auth++) {","if (auth->begin_session && !IS_DISABLED(auth)) {","int status = (auth->begin_session)(ctx, pw, user_env, auth);","if (status != AUTH_SUCCESS) {"],"label":1}
{"cve":"CVE-2017-14175","code_chunks":["for (x=0; x < (ssize_t) image->columns; x++)","{","if (bit == 0)","byte=(size_t) (*p++);","SetPixelIndex(image,(Quantum) ((byte & 0x01) != 0 ? 0x01 : 0x00),q);","bit++;","byte>>=1;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp_prime_set_pairf(const bn_t x, int pairf) {","bn_t p, t0, t1;","ctx_t *ctx = core_get();","size_t len = bn_bits(x) + 1;","int8_t s[RLC_FP_BITS + 1];","","bn_null(p);"],"label":0}
{"cve":"CVE-2019-13305","code_chunks":["ScaleQuantumToChar(GetPixelBlue(p)));","else","if (image->depth <= 16)","count=(ssize_t) FormatLocaleString(buffer,MaxTextExtent,","\"%u %u %u \",ScaleQuantumToShort(GetPixelRed(p)),","ScaleQuantumToShort(GetPixelGreen(p)),"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["}","if (_PyObject_HasAttrId(obj, &PyId_col_offset)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_col_offset);","if (tmp == NULL) goto failed;","res = obj2ast_int(tmp, &col_offset, arena);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp48_write_bin(uint8_t *bin, int len, const fp48_t a, int pack) {","fp48_t t;","","fp48_null(t);"],"label":1}
{"cve":"CVE-2022-29211","code_chunks":["const auto nbins = nbins_tensor.scalar<int32>()();","","OP_REQUIRES(","ctx, (value_range(0) < value_range(1)),"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2021-30014","code_chunks":["pps->state = 1;","}","pps->sps_id = gf_bs_read_int_log(bs, 4, \"sps_id\");","if (pps->sps_id >= 16) {","GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] wrong SPS ID %d in PPS\\n\", pps->sps_id));","pps->sps_id=0;","return -1;"],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["return ret;","}","","if (!fit_check_format(pfe_fit_addr)) {","printf(\"PFE Firmware: Bad firmware image (bad FIT header)\\n\");","ret = -1;","return ret;"],"label":1}
{"cve":"CVE-2016-5418","code_chunks":["\tcritical_flags |= SF_IMMUTABLE;","#endif","#ifdef UF_IMMUTABLE","\tcritical_flags |= UF_IMMUTABLE;","#endif","#ifdef SF_APPEND","\tcritical_flags |= SF_APPEND;"],"label":0}
{"cve":"CVE-2023-5595","code_chunks":["\t\tnot since this may be a sample carried over RTP*\/","\t\ts->text = (char *) gf_malloc(sizeof(char)*(s->len+2) );","\t\tif (!s->text) return NULL;","\t\ts->text[s->len] = 0;","\t\ts->text[s->len+1] = 0;","\t\tgf_bs_read_data(bs, s->text, s->len);","\t}"],"label":0}
{"cve":"CVE-2019-20393","code_chunks":["break;","","","{ if (yang_read_extcomplex_str(trg, ext_instance, \"presence\", ext_name, s,","0, LY_STMT_PRESENCE)) {","YYABORT;","}"],"label":1}
{"cve":"CVE-2021-30014","code_chunks":["GF_BitStream *orig, *mod;","HEVCState hevc;","u32 i, bit_offset, flag;","s32 idx;","GF_NALUFFParamArray *spss;","GF_NALUFFParam *slc;"],"label":1}
{"cve":"CVE-2021-40568","code_chunks":["s32 gf_mpegh_get_mhas_pl(u8 *ptr, u32 size, u64 *ch_layout)","{","\ts32 PL = -1;","\tGF_BitStream *bs;","\tu32 i;","\ts32 sync_pos=-1;",""],"label":0}
{"cve":"CVE-2016-9388","code_chunks":["nz += hdr->depth;","while (nz >= 8) {","c = (z >> (nz - 8)) & 0xff;","if (jas_stream_putc(out, c) == EOF) {","return -1;","}"],"label":1}
{"cve":"CVE-2022-29228","code_chunks":["    MessageUtil::validate(p, ProtobufMessage::getStrictValidationVisitor());","","        auto secret_reader = std::make_shared<MockSecretReader>();","    FilterConfigSharedPtr c = std::make_shared<FilterConfig>(p, factory_context_.cluster_manager_,","                                                             secret_reader, scope_, \"test.\");","","    return c;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["node *n = Ta3Parser_ParseStringObject(s, filename,","&_Ta3Parser_Grammar, start, &err,","&iflags);","if (flags == NULL) {","localflags.cf_flags = 0;","flags = &localflags;"],"label":1}
{"cve":"CVE-2021-28662","code_chunks":["HeaderLookupTable_t::lookup (const char *buf, const std::size_t len) const {","const HeaderTableRecord *r = HttpHeaderHashTable::lookup(buf, len);","if (!r)","return BadHdr;","return *r;","}"],"label":1}
{"cve":"CVE-2021-42782","code_chunks":[],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","      std::vector<int> stack(params->ngram_size, 0);","    int stack_idx = 1;","  int num_words = words.size();","","  while (stack_idx >= 0) {","    if (ShouldStepInRecursion(params, stack, stack_idx, num_words)) {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const float* input_data = GetTensorData<float>(input);","const TfLiteTensor* fft_length;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFftLengthTensor, &fft_length));","const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2021-33910","code_chunks":["assert(f);","assert(ret);","","p = strdupa(f);","if (!p)","return -ENOMEM;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["                    GetOutputSafe(context, node, kOutputTensor, &output));","","  auto* params = reinterpret_cast<TfLiteArgMaxParams*>(node->builtin_data);","  switch (params->output_type) {","      output->type = kTfLiteInt32;","      break;","      output->type = kTfLiteInt64;"],"label":0}
{"cve":"CVE-2023-27114","code_chunks":["\t\t\t\tif (!(n > 0 && n < buf_len && count < 0xffff)) {","\t\t\t\t\tgoto err;","\t\t\t\t}","\t\t\t\tif (!(table = calloc (count, sizeof (ut32)))) {","\t\t\t\t\tgoto err;","\t\t\t\t}","\t\t\t\tint i = 0;"],"label":0}
{"cve":"CVE-2023-26485","code_chunks":["","    OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);","    break;","","    LIT(\".PD 0\\n.P\\n.PD\");","    CR();","    break;"],"label":0}
{"cve":"CVE-2018-20179","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2018-5809","code_chunks":["{","if (len < 1)","return;   string[len - 1] = 0;","if (len < 3)","return;   len = strnlen(string, len - 1);","for (int i = len - 1; i >= 0; i--)"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["                PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["#endif","if (static_cast<int64_t>(params_size_in_bytes) !=","rnn_desc.ParamsSizeInBytes()) {","return tsl::Status(port::error::INVALID_ARGUMENT,","\"Mismatching RNN parameter size\");","}","return ::tsl::OkStatus();"],"label":1}
{"cve":"CVE-2022-35971","code_chunks":["void Compute(OpKernelContext* ctx) override {","const Tensor& input = ctx->input(0);","","const Tensor& input_min = ctx->input(1);","const Tensor& input_max = ctx->input(2);","const Tensor& requested_output_min = ctx->input(3);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["else {","int res;","Py_ssize_t len;","Py_ssize_t i;","if (!PyList_Check(tmp)) {","PyErr_Format(PyExc_TypeError, \"Module field \\\"body\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"],"label":0}
{"cve":"CVE-2018-20176","code_chunks":["\t\t\t\t\t\tx = x + 1;","\t\t\t\t\t\tcolor = -x;","\t\t\t\t\t}","\t\t\t\t\telse","\t\t\t\t\t{","\t\t\t\t\t\tx = x >> 1;","\t\t\t\t\t\tcolor = x;"],"label":0}
{"cve":"CVE-2020-5238","code_chunks":["yych = *(marker = p);","if (yych <= 0xDF) {","if (yych <= '{') {","if (yych != '\\n')"],"label":1}
{"cve":"CVE-2019-13311","code_chunks":["WandPrivate MagickBooleanType CLIListOperatorImages(MagickCLI *cli_wand,","const char *option,const char *arg1n,const char *arg2n)","{","const char    \/* percent escaped versions of the args *\/","*arg1,","*arg2;"],"label":0}
{"cve":"CVE-2022-37032","code_chunks":["struct capability_header *hdr;","","pnt = peer->notify.data;","end = pnt + peer->notify.length;","","while (pnt < end)"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["    if (isinstance) {","        asdl_seq* names;","","        if (_PyObject_LookupAttrId(obj, &PyId_names, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {"],"label":0}
{"cve":"CVE-2021-37491","code_chunks":["txNew.vin.push_back(CTxIn(coin.outpoint,CScript(),","nSequence));","","nBytes = CalculateMaximumSignedTxSize(txNew, this);","if (nBytes < 0) {","strFailReason = _(\"Signing transaction failed\");"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp54_read_bin(fp54_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","  const TfLiteTensor* input_resource_id_tensor;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputVariableId,","                                          &input_resource_id_tensor));","  const TfLiteTensor* input_value_tensor;","  TF_LITE_ENSURE_OK(","      context, GetInputSafe(context, node, kInputValue, &input_value_tensor));"],"label":0}
{"cve":"CVE-2021-4110","code_chunks":["","  irep->lv = (mrb_sym*)mrb_realloc(mrb, (mrb_sym*)irep->lv, sizeof(mrb_sym) * (irep->nlocals + num));","  env->stack = (mrb_value*)mrb_realloc(mrb, env->stack, sizeof(mrb_value) * (irep->nlocals + 1 \/* self *\/ + num));","","  mrb_sym *destlv = (mrb_sym*)irep->lv + irep->nlocals - 1 \/* self *\/;","  mrb_value *destst = env->stack + irep->nlocals;","  memmove(destlv, lv, sizeof(mrb_sym) * num);"],"label":0}
{"cve":"CVE-2020-11098","code_chunks":["return FALSE;","}","","if (index > glyphCache->glyphCache[id].number)","{","WLog_ERR(TAG, \"invalid glyph cache index: %\" PRIu32 \" in cache id: %\" PRIu32 \"\", index, id);","return FALSE;"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["int fit_check_format(const void *fit);"],"label":1}
{"cve":"CVE-2018-14015","code_chunks":["\t\t\t\tut64 addr;","\t\t\t\tRBinDwarfRow *row;","\t\t\t\tint line;","\t\t\t\tchar *file = strdup (kv->value);","\t\t\t\tif (!file) {","\t\t\t\t\tfree (buf);","\t\t\t\t\tls_free (ls);"],"label":0}
{"cve":"CVE-2021-45942","code_chunks":["{","streamData->is->seekg(data->lineOffsets[lineBlockId]);","","if (isMultiPart(data->version))","{","int partNumber;"],"label":0}
{"cve":"CVE-2022-1809","code_chunks":["\t\tut64 curAddressValue = UT64_MAX;","\tif (!context->read_addr (context->anal, curAddress, &curAddressValue)) {","\t\treturn false;","\t}","\t\tbool ret = vtable_addr_in_text_section (context, curAddressValue);","\tif (value) {","\t\t*value = curAddressValue;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["            TF_LITE_ASSERT_EQ(fw_aux_input_weights->dims->data[0], fw_num_units);","    TF_LITE_ASSERT_EQ(bw_aux_input_weights->dims->data[0], bw_num_units);","    TF_LITE_ASSERT_EQ(aux_input->dims->data[2],","                      fw_aux_input_weights->dims->data[1]);","    TF_LITE_ASSERT_EQ(aux_input->dims->data[2],","                      bw_aux_input_weights->dims->data[1]);","  }"],"label":0}
{"cve":"PYSEC-2021-419","code_chunks":["auto root = Scope::NewRootScope().ExitOnError();","","string two_file, three_file;","TF_ASSERT_OK(CreateTempFile(env, 2.0f, 1000, &two_file));","TF_ASSERT_OK(CreateTempFile(env, 3.0f, 1000, &three_file));","auto node1 = ops::ImmutableConst(root, DT_FLOAT, kFileTensorShape, two_file);"],"label":1}
{"cve":"CVE-2023-40589","code_chunks":["\t\tNewMatch = ncrush->MatchTable[HistoryOffset + j + 1] - HistoryOffset;","\t\tncrush->MatchTable[j + 1] = (NewMatch <= 0) ? 0 : NewMatch;","\t\tNewMatch = ncrush->MatchTable[HistoryOffset + j + 2] - HistoryOffset;","\t\tncrush->MatchTable[j + 2] = (NewMatch <= 0) ? 0 : NewMatch;","\t\tNewMatch = ncrush->MatchTable[HistoryOffset + j + 3] - HistoryOffset;","\t\tncrush->MatchTable[j + 3] = (NewMatch <= 0) ? 0 : NewMatch;","\t}"],"label":0}
{"cve":"CVE-2022-0443","code_chunks":["\t\t    && curbuf->b_term == NULL","#endif","\t\t    )","\t    {","\t\t\t\toff = (int)STRLEN(buf);","\t\tbuf[off++] = ' ';","\t\tbuf[off++] = '(';"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["}","case kTfLiteInt8: {","OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","TfLiteTensor* row_sums = GetTemporary(context, node, kRowSums);","const int row_sums_size = row_sums->dims->data[0];","return lstm_eval::EvalHybrid(","input, input_to_input_weights,"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[]={0,0};","","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":1}
{"cve":"CVE-2020-15121","code_chunks":["\tr_sys_signal (SIGPIPE, SIG_IGN);","#endif","\tif (proto == R_SOCKET_PROTO_UNIX) {","#if __UNIX__","\t\tif (!__connect_unix (s, host)) {","\t\t\treturn false;","\t\t}"],"label":0}
{"cve":"CVE-2017-16909","code_chunks":["}","else if ((nonz[i & 1] = pana_bits(8)) || i > 11)","pred[i & 1] = nonz[i & 1] << 4 | pana_bits(4);","if ((RAW(row, col) = pred[col & 1]) > 4098 && col < width)","derror();","}","}"],"label":1}
{"cve":"CVE-2015-8629","code_chunks":["return (xdr_opaque(xdrs, *objp, size));","return TRUE;","","if (*objp != NULL)"],"label":1}
{"cve":"CVE-2018-15858","code_chunks":[],"label":1}
{"cve":"CVE-2020-6017","code_chunks":["\t{","\t\tif ( inFlightPkt->second.m_usecWhenSent > usecWhenExpiry )","\t\t\tbreak;","","\t\t\t\tAssert( inFlightPkt->second.m_bNack );","\t\tAssert( inFlightPkt != m_senderState.m_itNextInFlightPacketToTimeout );",""],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (_PyObject_HasAttrId(obj, &PyId_lineno)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_lineno);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"CVE-2018-20748","code_chunks":["","\/* To guard against integer wrap-around, si.nameLength is cast to 64 bit *\/","client->desktopName = malloc((uint64_t)client->si.nameLength + 1);","if (!client->desktopName) {","rfbClientLog(\"Error allocating memory for desktop name, %lu bytes\\n\",","(unsigned long)client->si.nameLength);"],"label":1}
{"cve":"PYSEC-2020-307","code_chunks":["return nullptr;","}","","auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);","if (!status->status.ok()) {","return nullptr;"],"label":0}
{"cve":"CVE-2016-6874","code_chunks":["}","","Array HHVM_FUNCTION(HH_dict, const Array& arr) {","  return arr.toDict();","}","","Array HHVM_FUNCTION(HH_vec, const Array& arr) {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","switch (input1->type) {","case kTfLiteInt32: {"],"label":1}
{"cve":"CVE-2020-15142","code_chunks":["est","","import openapi_python_client.s"],"label":1}
{"cve":"CVE-2016-10167","code_chunks":["","\tin->gd_free (in);","","\treturn im;","}","","\/*"],"label":0}
{"cve":"CVE-2023-25669","code_chunks":["      auto status = ctx->ConstantInputAsIntVector(2, &stride);","      if (!status.ok()) {","        return status;","      }","    }","    TF_RETURN_IF_ERROR(ValidateStrides(stride));","    return stride;"],"label":0}
{"cve":"CVE-2022-28068","code_chunks":["static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev,","RBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb) {","size_t i;","for (i = 0; i < abbrev->count - 1; i++) {","memset (&die->attr_values[i], 0, sizeof (die->attr_values[i]));"],"label":1}
{"cve":"CVE-2019-13222","code_chunks":["      #else","      classify_mem = f->channels * (sizeof(void*) + max_part_read * sizeof(int *));","      #endif","","      ","      f->temp_memory_required = classify_mem;","      if (imdct_mem > f->temp_memory_required)"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp8_exp_cyc(fp8_t c, const fp8_t a, const bn_t b) {","fp8_t r, s, t[1 << (FP_WIDTH - 2)];","int i, l;","int8_t naf[RLC_FP_BITS + 1], *k;","","if (bn_is_zero(b)) {"],"label":1}
{"cve":"CVE-2022-0623","code_chunks":["mrb_assert(mrb_hash_p(hash));","for (i=a+1; i<lim; i+=2) {","mrb_hash_set(mrb, hash, regs[i], regs[i+1]);","}","mrb_gc_arena_restore(mrb, ai);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["    node->temporaries->data[kOutputStateScalingFactors] =","        op_data->scratch_tensor_index + kOutputStateScalingFactors;","    TfLiteTensor* output_state_sf;","    TF_LITE_ENSURE_OK(","        context, GetTemporarySafe(context, node, kOutputStateScalingFactors,","                                  &output_state_sf));","    output_state_sf->type = kTfLiteFloat32;"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["int err;","","DTLS_LOCK(ds);","","\/* Init DTLS (if not yet) *\/","status = ssl_create(ds, idx);"],"label":0}
{"cve":"CVE-2018-8794","code_chunks":["\trdp_send_client_info_pdu(flags, domain, g_username, password, command, directory);","","\t\/* run RDP loop until first licence demand active PDU *\/","\twhile (!g_rdp_shareid)","\t{","\t\tif (g_network_error)","\t\t\treturn False;"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["Py_ssize_t i;","            if (!PyList_Check(tmp)) {","                PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);"],"label":0}
{"cve":"CVE-2016-10190","code_chunks":["    }","#if CONFIG_ZLIB","    if (s->compressed)","        return http_buf_read_compressed(h, buf, size);","#endif \/* CONFIG_ZLIB *\/","    read_ret = http_buf_read(h, buf, size);","    if (   (read_ret  < 0 && s->reconnect        && (!h->is_streamed || s->reconnect_streamed) && s->filesize > 0 && s->off < s->filesize)"],"label":0}
{"cve":"CVE-2020-36316","code_chunks":["\t\t\t\t\t\t\tr |= pad ^ id[len - i - 1];","\t\t\t\t\t\t\tbn_rsh(t, t, 8);","\t\t\t\t\t\t}","\t\t\t\t\t\t*p_len = k_len - m_len;","\t\t\t\t\t\tbn_mod_2b(m, m, m_len * 8);","\t\t\t\t\t\tif (r && m_len > 0 && counter >= 8) {","\t\t\t\t\t\t\tresult = RLC_OK;"],"label":0}
{"cve":"CVE-2018-8793","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"args\\\" missing from arguments\");","return 1;","}","else {"],"label":0}
{"cve":"CVE-2023-5377","code_chunks":["}","}","} else {","gf_bs_write_u64(bs, ptr->layout.omittedChannelsMap);","}","}"],"label":1}
{"cve":"CVE-2021-3770","code_chunks":["buf->b_p_vsts = vim_strsave(p_vsts);","COPY_OPT_SCTX(buf, BV_VSTS);","if (p_vsts && p_vsts != empty_option)","tabstop_set(p_vsts, &buf->b_p_vsts_array);","else","buf->b_p_vsts_array = 0;","buf->b_p_vsts_nopaste = p_vsts_nopaste"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["RGBQUAD *pRgb = GetPalette();","if (pRgb){","if (bIsOldBmp){","hFile->Read((void*)pRgb,DibNumColors(&bmpHeader) * sizeof(RGBTRIPLE),1);","for (int32_t i=DibNumColors(&head)-1; i>=0; i--){","pRgb[i].rgbRed      = ((RGBTRIPLE *)pRgb)[i].rgbtRed;","pRgb[i].rgbBlue     = ((RGBTRIPLE *)pRgb)[i].rgbtBlue;"],"label":1}
{"cve":"CVE-2022-24793","code_chunks":["return PJ_SUCCESS;","} else {","unsigned label_len = *p;","","\/* Check that label length is valid *\/"],"label":1}
{"cve":"CVE-2018-1000050","code_chunks":["int rtype = f->residue_types[rn];","int c = r->classbook;","int classwords = f->codebooks[c].dimensions;","unsigned int actual_size = rtype == 2 ? n*2 : n;","unsigned int limit_r_begin = (r->begin < actual_size ? r->begin : actual_size);","unsigned int limit_r_end   = (r->end   < actual_size ? r->end   : actual_size);","int n_read = limit_r_end - limit_r_begin;"],"label":0}
{"cve":"CVE-2019-19324","code_chunks":["        int alg;","","        alg = cjwt_alg_str_to_enum( j_alg->valuestring );","        if( -1 == alg ) {","            cJSON_Delete( j_header );","            return ENOTSUP;","        }"],"label":0}
{"cve":"CVE-2024-0964","code_chunks":["], gr.Textbox())","assert examples.processed_examples == [[\"hello\"]]","","examples = gr.Examples([\"test\/test_files\/bus.png\"], gr.Image())","assert (","utils.encode_file_to_base"],"label":0}
{"cve":"CVE-2023-27114","code_chunks":["}","op->len += n;","if (txt) {","RStrBuf *sb = r_strbuf_new (\"\");","if (sb) {","r_strbuf_setf (sb, \"%s %d \", opdef->txt, count);"],"label":1}
{"cve":"CVE-2022-0685","code_chunks":["    int\t\tstarstar = FALSE;","    static int\tstardepth = 0;\t    ","    DIR\t\t*dirp;","    struct dirent *dp;","","        if (stardepth > 0)","    {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","    int8_t* input_to_input_weight_ptr = nullptr;","  int8_t* recurrent_to_input_weight_ptr = nullptr;","  int8_t* cell_to_input_weight_ptr = nullptr;","  int8_t* input_to_forget_weight_ptr = nullptr;","  int8_t* recurrent_to_forget_weight_ptr = nullptr;","  int8_t* cell_to_forget_weight_ptr = nullptr;"],"label":0}
{"cve":"CVE-2022-23547","code_chunks":["static void* clone_errcode_attr(pj_pool_t *pool, const void *src)","{","    const pj_stun_errcode_attr *asrc = (const pj_stun_errcode_attr*)src;","    pj_stun_errcode_attr *dst = PJ_POOL_ALLOC_T(pool, pj_stun_errcode_attr);","","    pj_memcpy(dst, src, sizeof(pj_stun_errcode_attr));","    pj_strdup(pool, &dst->reason, &asrc->reason);"],"label":0}
{"cve":"CVE-2021-33815","code_chunks":["static int dwa_uncompress(EXRContext *s, const uint8_t *src, int compressed_size,","int uncompressed_size, EXRThreadData *td)","{","int64_t version, lo_usize, lo_size;","int64_t ac_size, dc_size, rle_usize, rle_csize, rle_raw_size;","int64_t ac_count, dc_count, ac_compression;"],"label":0}
{"cve":"CVE-2022-37032","code_chunks":["size_t end = stream_get_getp (s) + length;","","ret = 0;","error = error_data;","","if (BGP_DEBUG (normal, NORMAL))"],"label":0}
{"cve":"CVE-2023-51042","code_chunks":["unsigned int i;","long r = 1;","","for (i = 0; i < fence_count; i++) {","struct dma_fence *fence;","unsigned long timeout = amdgpu_gem_timeout(wait->in.timeout_ns);"],"label":0}
{"cve":"CVE-2023-45898","code_chunks":["}","}","","\/*","* Determine the block range that should be searched for","* pending reservations, if any.  Clusters on the ends of the"],"label":1}
{"cve":"CVE-2021-20271","code_chunks":["\t\tgoto exit;","\t    if (hdrblobImport(blob, 0, &h, &msg))","\t\tgoto exit;","","\t    \/* Append (and remap) signature tags to the metadata. *\/","\t    if (headerMergeLegacySigs(h, sigh, &msg))","\t\tgoto exit;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["}","","const TfLiteTensor* fft_length;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kFftLengthTensor, &fft_length));","const RuntimeShape fft_length_shape = GetTensorShape(fft_length);",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["port::error::INTERNAL,","absl::StrFormat(\"failed to synchronously memcpy device-to-host: device \"","\"%p to host %p size %d: %s\",","device_src.opaque(), host_dst, size,","result.ToString()));"],"label":1}
{"cve":"CVE-2022-36026","code_chunks":["OP_REQUIRES_OK(ctx, ctx->GetAttr(\"num_bits\", &num_bits_));","OP_REQUIRES(ctx, num_bits_ > 0 && num_bits_ < (signed_input_ ? 62 : 63),","errors::InvalidArgument(\"num_bits is out of range: \", num_bits_,","\" with signed_input_ \", signed_input_));","OP_REQUIRES_OK(ctx, ctx->GetAttr(\"range_given\", &range_given_));","OP_REQUIRES_OK(ctx, ctx->GetAttr(\"input_min\", &input_min_));"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["AsyncFor(expr_ty target, expr_ty iter, asdl_seq * body, asdl_seq * orelse, int","lineno, int col_offset, int end_lineno, int end_col_offset, PyArena","*arena)","{","stmt_ty p;","if (!target) {"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["QRegExp fingerprintRegex(\".*peer fingerprint \\\\(SHA1\\\\): ([A-F0-9:]+) \\\\(SHA256\\\\): ([A-F0-9:]+)\");","if (!fingerprintRegex.exactMatch(line)) {","return;","}","","barrier::FingerprintData fingerprint_sha1 = {","barrier::fingerprint_type_to_string(barrier::FingerprintType::SHA1),"],"label":0}
{"cve":"CVE-2016-6875","code_chunks":["    for (ArrayIter iter(tv->m_data.parr); iter; ++iter) {","      find_var_recursive(iter.secondRef().asTypedValue(), wddxPacket);","    }","  }","}","","static TypedValue* add_vars_helper(ActRec* ar) {"],"label":0}
{"cve":"CVE-2022-29339","code_chunks":["GF_EXPORT","void gf_bs_write_u32(GF_BitStream *bs, u32 value)","{","\tassert(!bs->nbBits);","\tif (bs->cache_write && (bs->buffer_written+4 < bs->cache_write_size) ) {","\t\tbs->cache_write[bs->buffer_written] = (u8) ((value>>24)&0xff);","\t\tbs->cache_write[bs->buffer_written+1] = (u8) ((value>>16)&0xff);"],"label":0}
{"cve":"CVE-2017-6448","code_chunks":["sprintf (str, \" {v%i}\", buf[4] & 0x0f);","break;","sprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);","break;"],"label":1}
{"cve":"PYSEC-2022-126","code_chunks":["                          : Eigen::numext::ceil(","                                Eigen::numext::abs((limit - start) \/ delta)));","    OP_REQUIRES(","        context, size_auto <= std::numeric_limits<int64_t>::max(),","        errors::InvalidArgument(\"Requires ((limit - start) \/ delta) <= \",","                                std::numeric_limits<int64_t>::max()));",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["node->temporaries = TfLiteIntArrayCreate(kTemporaryNum);","","node->temporaries->data[kActivation] = *scratch_tensor_index;","TfLiteTensor* activation = GetTemporary(context, node, kActivation);","activation->type = input->type;","activation->allocation_type = kTfLiteArenaRw;","TfLiteIntArray* activation_size = TfLiteIntArrayCreate(2);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["    if (obj == Py_None) {","        *out = NULL;","        return 0;","    }","    isinstance = PyObject_IsInstance(obj, (PyObject*)Slice_type);","    if (isinstance == -1) {","        return 1;"],"label":0}
{"cve":"CVE-2016-3134","code_chunks":["const struct xt_entry_target *t;","unsigned int verdict;","","if (!unconditional(&e->arp))","return false;","t = arpt_get_target_c(e);","if (strcmp(t->u.user.name, XT_STANDARD_TARGET) != 0)"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["                                   GetTensorShape(output),","                                   GetTensorData<float>(output),","                                   CpuBackendContext::GetFromContext(context));","      } else {","        reference_ops::BatchMatMul(rhs_shape, GetTensorData<float>(rhs_tensor),","                                   lhs_shape, GetTensorData<float>(lhs_tensor),","                                   GetTensorShape(output),"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["\/* Reuse len to be the length of the utf-8 input string. *\/","len = expr_end - expr_start;","\/* Allocate 3 extra bytes: open paren, close paren, null byte. *\/","str = PyMem_RawMalloc(len + 3);","if (str == NULL)","return NULL;"],"label":1}
{"cve":"CVE-2022-3299","code_chunks":["","\/* Clean up the sockinfo_t structure *\/","static void sock_free(sockinfo_t *sockinfo, ogs_sbi_client_t *client)","{","    ogs_assert(sockinfo);","    ogs_assert(sockinfo->poll);",""],"label":0}
{"cve":"PYSEC-2022-143","code_chunks":["","  if (nodes_to_preserve_.find(node.name()) != nodes_to_preserve_.end()) {","    return false;","  }","  if (!fetch_nodes_known_) {","        return false;","  }"],"label":0}
{"cve":"CVE-2022-29227","code_chunks":["void ServerConnectionImpl::onResetStream(StreamResetReason reason) {","active_request_->response_encoder_.runResetCallbacks(reason);","connection_.dispatcher().deferredDelete(std::move(active_request_));","}"],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["\t\t\t\tunsigned char lane = buf[1 + simdop_size];","\t\t\t\t++op->len;","\t\t\t\tif (txt && opdef->txt) {","\t\t\t\t\top->txt = r_str_newf (\"%s %d\", opdef->txt, lane);","\t\t\t\t}","\t\t\t}","\t\t\tbreak;"],"label":0}
{"cve":"CVE-2019-15140","code_chunks":["    (void) SetImageBackgroundColor(image,exception);","    quantum_info=AcquireQuantumInfo(clone_info,image);","    if (quantum_info == (QuantumInfo *) NULL)","      {","        if (clone_info != (ImageInfo *) NULL)","          clone_info=DestroyImageInfo(clone_info);","        if ((image != image2) && (image2 != (Image *) NULL))"],"label":0}
{"cve":"CVE-2018-20182","code_chunks":["\t\t\t\t\t\tx = x >> 1;","\t\t\t\t\t\tx = x + 1;","\t\t\t\t\t\tcolor = -x;","\t\t\t\t\t}","\t\t\t\t\telse","\t\t\t\t\t{","\t\t\t\t\t\tx = x >> 1;"],"label":0}
{"cve":"CVE-2020-9432","code_chunks":["const char* hostname = luaL_checklstring(L, 2, &sz);","int flags = luaL_optint(L, 3, 0);","char *peer = NULL;","","int ret = X509_check_host(cert, hostname, sz, flags, &peer);","ret = openssl_push_check_result(L, ret, peer);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, \/*index=*\/0, &input1));","const TfLiteTensor* input2;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, \/*index=*\/1, &input2));","","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\tep2_t q[4];","","\tbn_null(n);","\tbn_null(u);","","\tRLC_TRY {","\t\tbn_new(n);"],"label":0}
{"cve":"PYSEC-2020-332","code_chunks":["QUInt8() {}"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["","\t\tif (starts_with(line, \"parent \")) {","\t\t\tif (linelen != the_hash_algo->hexsz + 8)","\t\t\t\tdie(\"bad parent line in commit\");","\t\t\tcontinue;","\t\t}",""],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["           the async function was defined *\/","        && tok->async_def_indent >= tok->indent)","    {","        tok->async_def = 0;","        tok->async_def_indent = 0;","        tok->async_def_nl = 0;","    }"],"label":0}
{"cve":"CVE-2021-3609","code_chunks":["\t.sendmsg       = bcm_sendmsg,","\t.recvmsg       = bcm_recvmsg,","\t.mmap          = sock_no_mmap,","\t.sendpage      = sock_no_sendpage,","};","","static struct proto bcm_proto __read_mostly = {"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\tBOOL status;","","\tif (!s)","\t\treturn FALSE;","","\tstatus = rdp_write_confirm_active(s, rdp->settings) &&","\t         rdp_send_pdu(rdp, s, PDU_TYPE_CONFIRM_ACTIVE, rdp->mcs->userId);"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["dst += n;","}","","if (src >= end)","break;",""],"label":1}
{"cve":"CVE-2018-5816","code_chunks":["#endif","switch (tiff_bps = i*8 \/ (width * height)) {","case  8: load_raw = &CLASS eight_bit_load_raw;  break;","case 10: load_raw = &CLASS nokia_load_raw;","}","raw_height = height + (top_margin = i \/ (width * tiff_bps\/8) - height);","mask[0][3] = 1;"],"label":1}
{"cve":"CVE-2017-9608","code_chunks":["if (dctx->remaining <= 0)","return dctx->remaining;","}","if (buf_size - i >= dctx->remaining && (!dctx->interlaced || dctx->cur_field)) {","int remaining = dctx->remaining;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* input_resource_id_tensor =","GetInput(context, node, kInputResourceIdTensor);","TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, NumDimensions(input_resource_id_tensor), 1);","TF_LITE_ENSURE_EQ(context, SizeOfDimension(input_resource_id_tensor, 0), 1);"],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["op->txt = r_str_newf (\"%s %d\", opdef->txt, op->val);","}","op->len += n;","}","break;","{"],"label":1}
{"cve":"CVE-2021-46225","code_chunks":["res = fscanf(msh->hdl, \"%s\", str);","}while( (res != EOF) && strcmp(str, \"MeshVersionFormatted\") );","","if(res == EOF)"],"label":1}
{"cve":"CVE-2018-14463","code_chunks":["","vec[0].ptr = bp;","vec[0].len = len;","if (in_cksum(vec, 1))","ND_PRINT((ndo, \", (bad vrrp cksum %x)\",","EXTRACT_16BITS(&bp[6])));","}"],"label":1}
{"cve":"CVE-2019-3556","code_chunks":["        !memcmp(ai, yi, sizeof(ai));","  }","","  __set_errno(save_errno);","  if (ok)","    return retval;",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\t\t\t\/* server does not support fastpath input *\/","\t\t\tsettings->FastPathInput = FALSE;","\t\t}","","\t\tif (inputFlags & TS_INPUT_FLAG_MOUSE_HWHEEL)","\t\t\tsettings->HasHorizontalWheel = TRUE;",""],"label":0}
{"cve":"CVE-2021-40573","code_chunks":["\telse {","\t\tgf_bs_write_u16(bs, ptr->item_ID);","\t}","\tgf_bs_write_u16(bs, ptr->item_protection_index);","\tif (ptr->version >= 2) {","\t\tgf_bs_write_u32(bs, ptr->item_type);","\t}"],"label":0}
{"cve":"PYSEC-2020-217","code_chunks":["","\t\/* The tree cache didn't help us; we'll have to write","\t * out a tree. If the index is ignore_case, we must","\t * make it case-sensitive for the duration of the tree-write","\t * operation. *\/","","\tif (index->ignore_case) {"],"label":0}
{"cve":"CVE-2016-3672","code_chunks":["unsigned long random_factor = 0UL;","","if (current->flags & PF_RANDOMIZE)","random_factor = arch_mmap_rnd();","","mm->mmap_legacy_base = mmap_legacy_base(random_factor);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"CVE-2019-19333","code_chunks":["lyp_get_yang_data_template_name(const struct lyd_node *node)","{","    struct lys_node *snode;","","    snode = lys_parent(node->schema);","    while (snode && snode->nodetype & (LYS_USES | LYS_CASE | LYS_CHOICE)) {","        snode = lys_parent(snode);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","const TfLiteTensor* input_gate_bias =","GetOptionalInputTensor(context, node, kInputGateBiasTensor);","const TfLiteTensor* forget_gate_bias =","GetInput(context, node, kForgetGateBiasTensor);"],"label":1}
{"cve":"CVE-2022-1286","code_chunks":[" *"," *     A.method_defined? :method1    #=> true"," *     C.method_defined? \"method1\"   #=> true"," *     C.method_defined? \"method2\"   #=> true"," *     C.method_defined? \"method3\"   #=> true"," *     C.method_defined? \"method4\"   #=> false"," *\/"],"label":0}
{"cve":"CVE-2018-20182","code_chunks":["int i;","uint16 num_updates;","","in_uint16_le(s, num_updates);   \/* rectangles *\/","","for (i = 0; i < num_updates; i++)"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* in_tensor = GetInput(context, node, 0);","TfLiteTensor* out_tensor = GetOutput(context, node, 0);","TfLiteIntArray* new_size = TfLiteIntArrayCopy(in_tensor->dims);","return context->ResizeTensor(context, out_tensor, new_size);","};"],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["size_t\t\tsize;","int\t\tnoffset = 0;","char\t\t*err_msg = \"\";","","\/* Get image data and data length *\/","if (fit_image_get_data_and_size(fit, image_noffset, &data, &size)) {"],"label":1}
{"cve":"CVE-2021-3903","code_chunks":["{","validate_virtcol();","validate_cheight();","wrow += curwin->w_cline_height - 1 -","curwin->w_virtcol \/ curwin->w_width;","}"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["PlatformKind platform_kind, PluginId plugin_id) {                       \\","auto iter = platform_id_by_kind_.find(platform_kind);                     \\","if (iter == platform_id_by_kind_.end()) {                                 \\","return tsl::Status(port::error::FAILED_PRECONDITION,                    \\","absl::StrFormat(\"Platform kind %d not registered.\",  \\","static_cast<int>(platform_kind)));   \\","}                                                                         \\"],"label":1}
{"cve":"CVE-2022-29205","code_chunks":["PySequence_ITEM(py_value, i));","if (inner_py_value.get() == Py_None) {","dims[i] = -1;","} else if (!ParseDimensionValue(key, inner_py_value.get(), status,","&dims[i])) {","return false;","}"],"label":1}
{"cve":"CVE-2022-1441","code_chunks":["str[0]=0;","while (1) {","str[i] = gf_bs_read_u8(bs);","if (!str[i]) break;","i++;","}"],"label":1}
{"cve":"CVE-2023-52426","code_chunks":["const char *next","= ptr; \/* XmlAttributeValueTok doesn't always set the last arg *\/","int tok = XmlAttributeValueTok(enc, ptr, end, &next);","#if defined(XML_DTD) || XML_GE == 1","if (! accountingDiffTolerated(parser, tok, ptr, next, __LINE__, account)) {","accountingOnAbort(parser);","return XML_ERROR_AMPLIFICATION_LIMIT_BREACH;"],"label":0}
{"cve":"CVE-2018-20181","code_chunks":["\telse","\t\t*length = len;","","\treturn s_check(s);","}","","void"],"label":0}
{"cve":"CVE-2016-2052","code_chunks":["    const OT::_hea *_hea = OT::Sanitizer<OT::_hea>::lock_instance (_hea_blob);","    this->num_advances = _hea->numberOfLongMetrics;","    hb_blob_destroy (_hea_blob);","","    this->blob = OT::Sanitizer<OT::_mtx>::sanitize (face->reference_table (_mtx_tag));","    if (unlikely (!this->num_advances ||","\t\t  2 * (this->num_advances + this->num_metrics) > hb_blob_get_length (this->blob)))"],"label":0}
{"cve":"CVE-2022-0393","code_chunks":["{","int len;","","if (buf->bh_curr == NULL || buf->bh_curr->b_str == NULL)","return;      len = (int)STRLEN(buf->bh_curr->b_str);","if (len >= slen)"],"label":0}
{"cve":"CVE-2022-36012","code_chunks":["for (const std::string& output : signature.control_output())","control_outputs.push_back(builder.getStringAttr(output));","attrs.append(\"control_output\", builder.getArrayAttr(control_outputs));","}","{","NamedAttrList attr_defs;","for (const OpDef_AttrDef& attr : signature.attr()) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["ep_t t;","bn_t _k;","int8_t u, naf[RLC_DIG + 1];","int l;","","ep_null(t);","bn_null(_k);"],"label":1}
{"cve":"PYSEC-2021-284","code_chunks":["std::vector<int32> output_thresholds;","std::vector<Eigen::VectorXf> output_left_node_contribs;","std::vector<Eigen::VectorXf> output_right_node_contribs;","std::vector<string> output_split_types;","","for (int32_t node_id = node_id_first; node_id < node_id_last; ++node_id) {","float best_gain = std::numeric_limits<float>::lowest();"],"label":1}
{"cve":"CVE-2022-48437","code_chunks":["size_t depth;","X509 *last = x509_verify_chain_last(chain);","X509 *leaf = x509_verify_chain_leaf(chain);","","depth = sk_X509_num(chain->certs);","if (depth > 0)","depth--;"],"label":0}
{"cve":"CVE-2016-3120","code_chunks":["}","","\/* Return KRB5KDC_ERR_POLICY if indicators does not contain the required auth"," * indicators for server, ENOMEM on allocation error, 0 otherwise. *\/","krb5_error_code","check_indicators(krb5_context context, krb5_db_entry *server,","                 krb5_data *const *indicators)"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["            else if (c == 'b' || c == 'B') {","                \/* Binary *\/","                c = tok_nextc(tok);","                do {","                    if (c == '_') {","                        c = tok_nextc(tok);","                    }"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");"],"label":1}
{"cve":"CVE-2019-13308","code_chunks":["    }","#if defined(MAGICKCORE_OPENMP_SUPPORT)","  #pragma omp critical (MagickCore_InverseFourierTransform)","#endif","  fftw_c2r_plan=fftw_plan_dft_c2r_2d(fourier_info->width,fourier_info->height,","    fourier_pixels,source_pixels,FFTW_ESTIMATE);","  fftw_execute_dft_c2r(fftw_c2r_plan,fourier_pixels,source_pixels);"],"label":0}
{"cve":"CVE-2023-28486","code_chunks":["const char *iolog_file;","const char *tty, *tsid = NULL;","char exit_str[(((sizeof(int) * 8) + 2) \/ 3) + 2];","char sessid[7], offsetstr[64] = \"\";","size_t len = 0;","int i;"],"label":1}
{"cve":"CVE-2017-6448","code_chunks":["\t\t\tvA = (int) buf[1];","\t\t\tvB = (buf[3] << 8) | buf[2];","\t\t\tif (buf[0] == 0x1a) {","\t\t\t\toffset = R_ASM_GET_OFFSET (a, 's', vB);","\t\t\t\tif (offset == -1) {","\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, string+%i\", vA, vB);","\t\t\t\t} else {"],"label":0}
{"cve":"CVE-2020-15121","code_chunks":["if (code) {","*code = 0;","}","if (rlen) {","*rlen = 0;","}"],"label":0}
{"cve":"CVE-2020-23931","code_chunks":["tmp_strsize=(u32)ptr->size-8;","while (tmp_strsize) {","tmp_str[j] = gf_bs_read_u8(bs);","tmp_strsize--;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* axis = GetInput(context, node, kAxisTensor);","TF_LITE_ENSURE_EQ(context, NumDimensions(axis), 1);","TF_LITE_ENSURE(context, NumDimensions(input) >= NumElements(axis));",""],"label":1}
{"cve":"CVE-2021-30014","code_chunks":["","\t\tgf_bs_del(mod);","\t\tgf_free(no_emulation_buf);","\t}","\treturn GF_OK;","}",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_write_raw(dig_t *raw, int len, const bn_t a) {","int i, size;","","size = a->used;"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["const char *ch = placeholder;","enum flush_type flush_type;","int to_column = 0;","","switch (*ch++) {","flush_type = flush_right;","break;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2021-27138","code_chunks":["*\/","#if CONFIG_IS_ENABLED(FIT)","\/* check FDT blob vs FIT blob *\/","if (fit_check_format(buf)) {","ulong load, len;","","fdt_noffset = boot_get_fdt_fit(images,"],"label":1}
{"cve":"CVE-2021-4216","code_chunks":["w = render->ibounds.x1 - render->ibounds.x0;","min_band_mem = (size_t)bpp * w * min_band_height;","reps = (int)(max_band_memory \/ min_band_mem);","if (reps < 1)","reps = 1;",""],"label":1}
{"cve":"PYSEC-2021-748","code_chunks":["for (auto& component : element) {","if (DataTypeCanUseMemcpy(component.dtype())) {","const TensorBuffer* buffer = DMAHelper::buffer(&component);","if (buffer) {","total_size += buffer->size();","}","} else {"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["return NULL;","}","","for_ch = CHILD(n, 1 + is_async);","t = ast_for_exprlist(c, for_ch, Store);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","","              "],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["#if defined(EP_MIXED)","\t\tep4_norm(q, q);","#endif","","\t\t\/* Create table. *\/","\t\tfor (size_t i = 1; i < (1 << (EP_WIDTH - 1)); i++) {","\t\t\tep4_add(t[i], t[i - 1], q);"],"label":0}
{"cve":"CVE-2018-20761","code_chunks":["\t\/*first locate config file if specified*\/","\tfor (i=1; i<(u32) argc; i++) {","\t\tchar *arg = argv[i];","\t\tif (!strcmp(arg, \"-c\") || !strcmp(arg, \"-cfg\")) {","\t\t\tthe_cfg = argv[i+1];","\t\t\ti++;","\t\t}"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["l = RLC_MAX(l0, l1);","if (bn_sign(b) == RLC_NEG) {","for (i = 0; i < l0; i++) {","naf0[i] = -naf0[i];","}","}"],"label":1}
{"cve":"CVE-2023-1127","code_chunks":["    room += curwin->w_filler_rows;","#endif","    if (flag)","    {","\t\/*","\t * scroll the text up","\t *\/"],"label":0}
{"cve":"CVE-2022-36017","code_chunks":["input_quantized.flat<quint8>());","AddInputFromArray<quint8>(bias_quantized.shape(),","bias_quantized.flat<quint8>());","AddInputFromArray<float>(TensorShape({1}), {input_min});","AddInputFromArray<float>(TensorShape({1}), {input_max});"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["         * (see also #2097).","         *\/","        udp_member_transport_media_start(ds);","","#if DTLS_DEBUG","        {","            char addr[PJ_INET6_ADDRSTRLEN];"],"label":0}
{"cve":"CVE-2022-28927","code_chunks":["        else","        {","            if(filtered_nodelist.empty())","                filtered_nodelist.emplace_back(\"DIRECT\");","        }","        if(!filtered_nodelist.empty())","            singlegroup[\"proxies\"] = filtered_nodelist;"],"label":0}
{"cve":"CVE-2018-8798","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["}","else {","int res;","Py_ssize_t len;","Py_ssize_t i;","if (!PyList_Check(tmp)) {"],"label":1}
{"cve":"CVE-2016-10272","code_chunks":["(unsigned long) strip, (unsigned long)rows);","return 0;","}","bufp += bytes_read;","}","","return 1;"],"label":1}
{"cve":"CVE-2021-31255","code_chunks":["tmp_str[i] = gf_bs_read_u8(bs);","tmp_strsize--;","if (!tmp_str[i]) {","zfound = GF_TRUE;","break;","}"],"label":0}
{"cve":"PYSEC-2021-731","code_chunks":["  int alloc_size = TfLiteIntArrayGetSizeInBytes(size);","  if (alloc_size <= 0) return NULL;","  TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);","  if (!ret) return ret;","  ret->size = size;","  return ret;","}"],"label":0}
{"cve":"CVE-2022-23565","code_chunks":["const protobuf::RepeatedPtrField<OpDef::AttrDef>& a2) {","std::unordered_map<string, const OpDef::AttrDef*> a1_set;","for (const OpDef::AttrDef& def : a1) {","DCHECK(a1_set.find(def.name()) == a1_set.end())","<< \"AttrDef names must be unique, but '\" << def.name()","<< \"' appears more than once\";"],"label":1}
{"cve":"CVE-2021-36082","code_chunks":["#ifdef DEBUG_TLS","    printf(\"TLS [len: %u][handshake_type: %02X]\\n\", packet->payload_packet_len, handshake_type);","#endif","","    tls_version = ntohs(*((u_int16_t*)&packet->payload[version_offset]));","","    if(handshake_type == 0x02 \/* Server Hello *\/) {"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["PyErr_NoMemory();","return NULL;","}","","str[0] = '(';","memcpy(str+1, expr_start, len);"],"label":0}
{"cve":"CVE-2016-8649","code_chunks":["\t}","","\tif ((init_ctx->container && init_ctx->container->lxc_conf &&","\t     init_ctx->container->lxc_conf->no_new_privs) ||","\t    (options->attach_flags & LXC_ATTACH_NO_NEW_PRIVS)) {","\t\tif (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) < 0) {","\t\t\tSYSERROR(\"PR_SET_NO_NEW_PRIVS could not be set. \""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (output->type != kTfLiteComplex64) {","context->ReportError(context,"],"label":1}
{"cve":"CVE-2019-13225","code_chunks":["r = get_char_len_node1(NODE_BODY(node), reg, &tlen, level);","if (r == 0)","*len = distance_multiply(tlen, qn->lower);","}","}","else"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteUnpackParams* data =","reinterpret_cast<TfLiteUnpackParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","switch (input->type) {","case kTfLiteFloat32: {","UnpackImpl<float>(context, node, input, data->num, data->axis);"],"label":1}
{"cve":"PYSEC-2020-282","code_chunks":["  if (uniform_remaining == 0) {                       \\","    uniform_remaining = Uniform::kResultElementCount; \\","    uniform_result = uniform(&gen);                   \\","  }                                                   \\","  uniform_remaining--;                                \\","  double X = uniform_result[uniform_remaining]",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* size;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kSizeTensor, &size));"],"label":0}
{"cve":"CVE-2020-11085","code_chunks":["}","CopyMemory(formats[index].formatName, szFormatName, 32);","formats[index].formatName[32] = '\\0';","}","}","else"],"label":1}
{"cve":"CVE-2022-0519","code_chunks":["ut64 offset = 0, curpos;","attr = r_bin_java_default_attr_new (bin, buffer, sz, buf_offset);","offset += 6;","if (buf_offset + offset + 8 > sz) {","eprintf (\"Invalid amount of inner classes\\n\");","return NULL;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_OK(","context, CheckDimensionsMatch(context, indices, output_shape, values));","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","output->type = values->type;","TF_LITE_ENSURE_EQ(context, NumDimensions(output_shape), 1);",""],"label":1}
{"cve":"CVE-2022-35974","code_chunks":["const int value_count = 3;","AddInputFromArray<qint32>(TensorShape({value_count}),","{-(1 << 23), 0, (1 << 23)});","AddInputFromArray<float>(TensorShape({1}), {-256.0f});","AddInputFromArray<float>(TensorShape({1}), {256.0f});"],"label":1}
{"cve":"CVE-2018-8792","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"CVE-2021-41136","code_chunks":["case 13: goto tr26;","case 32: goto tr27;","}","goto tr25;","#line 46 \"ext\/puma_http11\/http11_parser.rl\"","{ MARK(mark, p); }","goto st19;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["ep_t _p;","fp9_t rx, ry, rz, sx, sy, sz, qn;","size_t len = bn_bits(a) + 1;","int i;","int8_t s[RLC_FP_BITS + 1];",""],"label":0}
{"cve":"CVE-2017-6890","code_chunks":["{","unsigned type, wide, high, i, j, row, col, diff;","ushort huff[1024], vpred[2][2] = {{512,512},{512,512}}, hpred[2];","","fseek (ifp, meta_offset, SEEK_SET);","type = get4();  get4();  get4();"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["        return 0;","    }","    if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","        return 1;","    }","    if (tmp == NULL) {","        PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from excepthandler\");"],"label":0}
{"cve":"CVE-2021-24045","code_chunks":["","            if (leftStr && rightStr) {","        return builder.getLiteralBool(","            leftStr->getValue() == rightStr->getValue());","      }","","      break;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fp6_write_bin(uint8_t *bin, size_t len, const fp6_t a) {","if (len != 6 * RLC_FP_BYTES) {","RLC_THROW(ERR_NO_BUFFER);","return;"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 colorPointerCacheSize;","UINT16 pointerCacheSize;","","if (length < 8)","return FALSE;",""],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["{","UINT16 colorPointerFlag;","UINT16 colorPointerCacheSize;","UINT16 pointerCacheSize;","","if (Stream_GetRemainingLength(s) < 6)"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty val;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["{","PyObject *u;","char *buf;","char *p;","const char *end;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE(context, bw_activation_state != nullptr);","TfLiteTensor* bw_cell_state =","GetVariableInput(context, node, kBwInputCellStateTensor);","TF_LITE_ENSURE(context, bw_cell_state != nullptr);"],"label":1}
{"cve":"CVE-2018-25032","code_chunks":["#else","    } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {","#endif","        send_bits(s, (STATIC_TREES<<1)+last, 3);","        compress_block(s, (const ct_data *)static_ltree,","                       (const ct_data *)static_dtree);","#ifdef ZLIB_DEBUG"],"label":0}
{"cve":"CVE-2016-10161","code_chunks":["\t\t\tif (yych <= 'H') goto yy18;","\t\t\tgoto yy56;","\t\t} else {","\t\t\tif (yych != 'N') goto yy18;","\t\t}","\t}","\tyych = *++YYCURSOR;"],"label":0}
{"cve":"CVE-2021-29518","code_chunks":["void Compute(OpKernelContext* ctx) override {","const Tensor& handle = ctx->input(0);","const string& name = handle.scalar<tstring>()();","OP_REQUIRES_OK(ctx, ctx->session_state()->DeleteTensor(name));","}","","TF_DISALLOW_COPY_AND_ASSIGN(DeleteSessionTensorOp);"],"label":1}
{"cve":"CVE-2019-13272","code_chunks":["static void ptrace_link(struct task_struct *child, struct task_struct *new_parent)","{","rcu_read_lock();","__ptrace_link(child, new_parent, __task_cred(new_parent));","rcu_read_unlock();","}"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["        expr_ty value;","        int simple;","","        if (_PyObject_LookupAttrId(obj, &PyId_target, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {"],"label":0}
{"cve":"CVE-2018-7648","code_chunks":["                return 1;","            }","        }","","        outfile = fopen(outfilename, \"wb\");","        if (!outfile) {","            fprintf(stderr, \"failed to open %s for writing\\n\", outfilename);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* value;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kValueTensor, &value));","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["}","len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["output_state_quantized->type = input_to_output_weights->type;","output_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(output_state_quantized->dims,"],"label":1}
{"cve":"CVE-2023-27601","code_chunks":["if( delete_sdp_line( msg, payload->rtp_enc.s) < 0 )","{","LM_ERR(\"Unable to add delete lump for a=\\n\");","ret = -1;","goto end;","}"],"label":1}
{"cve":"CVE-2022-28068","code_chunks":["\/* Loclist offset is usually CONSTANT or REFERENCE at older DWARF versions, new one has LocListPtr for that *\/","if (loc->kind != DW_AT_KIND_BLOCK && loc->kind != DW_AT_KIND_LOCLISTPTR && loc->kind != DW_AT_KIND_REFERENCE && loc->kind != DW_AT_KIND_CONSTANT) {","return NULL;","}","RBinDwarfBlock block;","if (loc->kind == DW_AT_KIND_LOCLISTPTR || loc->kind == DW_AT_KIND_REFERENCE || loc->kind == DW_AT_KIND_CONSTANT) {"],"label":0}
{"cve":"CVE-2019-11413","code_chunks":["if (flags & REG_ICASE) {","if (strncmpcanon(sp, out->sub[pc->n].sp, i))","return 0;","} else {","if (strncmp(sp, out->sub[pc->n].sp, i))","return 0;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["reinterpret_cast<TfLiteResizeNearestNeighborParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2023-25669","code_chunks":["}","if (stride_shape.num_elements() != num_dims()) {","return errors::InvalidArgument(","\"Sliding window stride field must \"","\"specify \",","num_dims(), \" dimensions\");"],"label":1}
{"cve":"CVE-2021-3772","code_chunks":["const union sctp_subtype type,","void *arg,","struct sctp_cmd_seq *commands)","{","struct sctp_chunk *chunk = arg;",""],"label":1}
{"cve":"CVE-2020-27560","code_chunks":["if ( disposals[i] == DelDispose ) {","size_t time = 0;","while ( disposals[i] == DelDispose ) {","time += curr->delay*1000\/curr->ticks_per_second;","curr=GetNextImageInList(curr);","i++;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["static void rand_hash(uint8_t *out, size_t out_len, uint8_t *in,","size_t in_len) {","uint32_t j = util_conv_big(8 * out_len);","size_t len = RLC_CEIL(out_len, RLC_MD_LEN);","uint8_t* buf = RLC_ALLOCA(uint8_t, 1 + sizeof(uint32_t) + in_len);","uint8_t hash[RLC_MD_LEN];",""],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["    Py_DECREF(tmp);","    if (value) {","        PyErr_SetObject(PyExc_SyntaxError, value);","        Py_DECREF(value);","    }","    return 0;","}"],"label":0}
{"cve":"CVE-2022-25885","code_chunks":["        return 0;","    }","}","","IOBasicTypes::LongFilePositionType ObjectByteWriterWithPosition::GetCurrentPosition()","{","\tCREATE_ISOLATE_CONTEXT;"],"label":0}
{"cve":"CVE-2020-15195","code_chunks":["visited(reverse_index_map(i)) = true;","}","for (int j = 0; j < N_full; ++j) {","if (!visited(j)) {"],"label":1}
{"cve":"CVE-2022-0496","code_chunks":["if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[1]][0], this->points[lines[k].idx[1]][1])) {","current_line = k;","current_point = 1;","goto found_next_line_in_open_path;","}","}"],"label":1}
{"cve":"CVE-2018-8799","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* a0 = GetInput(context, node, 0);","TfLiteTensor* a1 = GetOutput(context, node, 0);","int num = a0->dims->data[0];","for (int i = 0; i < num; i++) {","a1->data.f[i] = a0->data.f[i];"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["                PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {"],"label":0}
{"cve":"CVE-2023-50247","code_chunks":["uint8_t data[QUICLY_PATH_CHALLENGE_DATA_LEN];","};"],"label":1}
{"cve":"CVE-2018-20748","code_chunks":["return FALSE;","}","","buffer = malloc((uint64_t)msg.sct.length+1);","","if (!ReadFromRFBServer(client, buffer, msg.sct.length)) {","free(buffer);"],"label":1}
{"cve":"CVE-2022-1714","code_chunks":["int res = r_buf_read_at (bin->b, bin->shstrtab_section->sh_offset, (ut8*)bin->shstrtab,","bin->shstrtab_section->sh_size);","if (res < 1) {","R_LOG_ERROR (\"read (shstrtab) at 0x%\" PFMT64x, (ut64) bin->shstrtab_section->sh_offset);","R_FREE (bin->shstrtab);","return false;","}"],"label":1}
{"cve":"CVE-2016-4997","code_chunks":["unsigned int target_offset,","unsigned int next_offset)","{","long size_of_base_struct = elems - (const char *)base;","const struct compat_xt_entry_target *t;","const char *e = base;"],"label":0}
{"cve":"PYSEC-2021-617","code_chunks":["                             best_bucket, best_f_dim, best_split_type,","                             best_contrib_for_left, best_contrib_for_right);","      }","    }","  }","","  void MaybeUpdateBestSplit(const Eigen::VectorXf& grad_for_left,"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["    TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node,","                                           lstm::full::kOutputTensor, &output));","","  TfLiteTensor* output_state =","      GetVariableInput(context, node, lstm::full::kOutputStateTensor);","  TF_LITE_ENSURE(context, output_state != nullptr);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_mxp_slide(bn_t c, const bn_t a, const bn_t b, const bn_t m) {","bn_t tab[RLC_TABLE_SIZE], t, u, r;","int i, j, l, w = 1;","uint8_t *win = RLC_ALLOCA(uint8_t, bn_bits(b));","","if (win == NULL) {"],"label":1}
{"cve":"CVE-2022-45909","code_chunks":["                s = strncpy( buf, uri.c_str(), 255 ) ;","","                rc = sip_name_addr_d(home, &s, &display, url, &params, &comment) ;","        if( rc < 0 ) {  ","                        return false ;","        }",""],"label":0}
{"cve":"CVE-2019-13311","code_chunks":["\/* now set\/delete the global option as needed *\/","\/* FUTURE: make escapes in a global 'option:' delayed *\/","arg2=(char *) NULL;","if (IfNormalOp)","{","arg2=InterpretImageProperties(_image_info,_images,arg2n,_exception);"],"label":1}
{"cve":"CVE-2022-1934","code_chunks":["} \\","else if (nk > 0) {  \/* pack keyword arguments *\/ \\","mrb_int kidx = (arg_base)+(n==CALL_MAXARGS?1:n)+1; \\","mrb_value kdict = hash_new_from_values(mrb, nk, regs+kidx); \\","regs[kidx] = kdict; \\","nk = CALL_MAXARGS; \\","*(arg_info) = n | (nk<<4); \\"],"label":1}
{"cve":"CVE-2021-32439","code_chunks":["","if (nb_extra)","nb_extra = stts->entries[stts->nb_entries-1].sampleDelta;","","ent = &stts->entries[stts->nb_entries];","stts->nb_entries++;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["scaling_factors->type = kTfLiteFloat32;","scaling_factors->allocation_type = kTfLiteArenaRw;","const int height = NumElements(input) \/ channels_in;"],"label":1}
{"cve":"CVE-2023-52266","code_chunks":["LOG_INFO(\"TOO BIG REQUEST WE WILL REFUSE IT! MAX_REQ_SIZE:%d\", MAX_REQ_SIZE);","return -1;","}","LOG_DEBUG(\"read from client: size:%d, content:%.4096s\", read_size, read_buffer);","ssize_t nparsed = http_parser_execute(&_parser, &_settings, read_buffer, read_size);","if (nparsed != read_size) {","std::string err_msg = \"unkonw\";"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["{","eap->nextcmd = nextcmd;","if (*line_to_free != NULL","&& *eap->cmdlinep != *line_to_free)","{","vim_free(*eap->cmdlinep);"],"label":1}
{"cve":"CVE-2021-21323","code_chunks":["GURL::Replacements replacements = GURL::Replacements();","replacements.SetHost(","canonical_name->c_str(),","url::Component(0, static_cast<int>(canonical_name->length())));","const GURL canonical_url = ctx->request_url.ReplaceComponents(replacements);",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, hidden_state->dims->data[0], batch_size);","TF_LITE_ENSURE_EQ(context, hidden_state->dims->data[1], num_units);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","TfLiteIntArray* output_size_array = TfLiteIntArrayCreate(3);","output_size_array->data[0] = (time_major) ? max_time : batch_size;"],"label":1}
{"cve":"CVE-2022-47933","code_chunks":["if (!ctx->browser_context || !brave::IsRegularProfile(ctx->browser_context))","return net::OK;","auto* prefs = user_prefs::UserPrefs::Get(ctx->browser_context);","if (IsIpfsResolveMethodDisabled(prefs)) {","return net::OK;","}"],"label":1}
{"cve":"CVE-2023-30847","code_chunks":["        do_send_from_pipe(self);","    } else {","        do_send(self);","        if (!(self->res_done || self->had_body_error))","            self->client->update_window(self->client);","    }","}"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["goto nextline;","}","*p_start = tok->start;","*p_end = tok->cur - 1; \/* Leave '\\n' out of the string *\/","tok->cont_line = 0;","return NEWLINE;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE(context, node->inputs->size == kInputNum);","TF_LITE_ENSURE(context, node->outputs->size == kOutputNum);","","const TfLiteTensor* input = GetInput(context, node, kInputData);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["node->temporaries = TfLiteIntArrayCreate(5);","node->temporaries->data[0] = data->scratch_tensor_index;","","TfLiteTensor* input_quantized = GetTemporary(context, node, \/*index=*\/0);","input_quantized->type = filter->type;","input_quantized->allocation_type = kTfLiteArenaRw;",""],"label":1}
{"cve":"CVE-2021-40574","code_chunks":["\t\t\tDouble end = (Double) interval->end;","\t\t\tend \/= ctx->timescale;","\t\t\tif (end<ctx->start_range) skip_pck = GF_TRUE;","\t\t\telse ctx->seek_state = 0;","\t\t}","","\t\tif (!skip_pck) {"],"label":0}
{"cve":"PYSEC-2020-338","code_chunks":["if (TF_PREDICT_FALSE(sizeof(T) < sizeof(double) && std::isinf(*out) &&","std::isfinite(as_double))) {","return ErrorOutOfRangeDouble;","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["        }","      } else {","        EvalFloat<kernel_type>(context, node, params, data, input, filter, bias,","                               im2col, hwcn_weights, output);","      }","      break;","      EvalQuantized<kernel_type>(context, node, params, data, input, filter,"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","  TFLITE_DCHECK(node->user_data != nullptr);","  TFLITE_DCHECK(node->builtin_data != nullptr);","","  auto* params = reinterpret_cast<TfLiteL2NormParams*>(node->builtin_data);","  L2NormalizationParams* data =","      static_cast<L2NormalizationParams*>(node->user_data);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["hidden_state_quantized->type = input_weights->type;","hidden_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(hidden_state_quantized->dims,"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["return kTfLiteError;","}","","const TfLiteTensor* fft_length = GetInput(context, node, kFftLengthTensor);","const RuntimeShape fft_length_shape = GetTensorShape(fft_length);","","TF_LITE_ENSURE_EQ(context, NumDimensions(fft_length), 1);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["","  TfLiteIntArray* output_shape = TfLiteIntArrayCreate(input_dims_size);","  for (int i = 0; i < input_dims_size; i++) {","    output_shape->data[i] = input_dims->data[i];","  }","","    output->type = input->type;"],"label":0}
{"cve":"CVE-2023-24833","code_chunks":["        } else {","          aDescObjHandle_ = nullptr;","        }","      }","    }","","    ComputedPropertyDescriptor bDesc;"],"label":0}
{"cve":"CVE-2018-12562","code_chunks":["det.url.setPath(smbShare->text().trimmed());","det.url.setPort(smbPort->value());","det.url.setScheme(RemoteFsDevice::constSambaProtocol);","det.url.setPassword(smbPassword->text().trimmed());","if (!smbDomain->text().trimmed().isEmpty()) {","QUrlQuery q;"],"label":1}
{"cve":"CVE-2018-8791","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2022-45474","code_chunks":["}","","\/* make sure the event matches what are wanted *\/","if(*fdp == action || *fdp == CURL_POLL_INOUT) {","CURLMcode rc;","if(error)","action = CURL_CSELECT_ERR;"],"label":1}
{"cve":"CVE-2021-32672","code_chunks":["    char *p = copy;","","    \/* This Redis protocol parser is a joke... just the simplest thing that","     * works in this context. It is also very forgiving regarding broken","     * protocol. *\/","","    \/* Seek and parse *<count>\\r\\n. *\/"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,","const TfLiteTensor* input,","const TfLiteTensor* filter,","const TfLiteTensor* bias,","TfLiteTensor* output,"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["          fw_cell_to_input_weights, fw_cell_to_forget_weights,","          fw_cell_to_output_weights,","          \/*input_layer_norm_coefficients=*\/nullptr,","          \/*forget_layer_norm_coefficients=*\/nullptr,","          \/*cell_layer_norm_coefficients=*\/nullptr,","          \/*output_layer_norm_coefficients=*\/nullptr, real_aux_input,","          fw_aux_input_to_input_weights, fw_aux_input_to_forget_weights,"],"label":0}
{"cve":"PYSEC-2022-42990","code_chunks":["","from c"],"label":1}
{"cve":"CVE-2019-1010317","code_chunks":["}","else if (!strncmp (caf_chunk_header.mChunkType, \"data\", 4)) {                 uint32_t mEditCount;","","if (!DoReadFile (infile, &mEditCount, sizeof (mEditCount), &bcount) ||","bcount != sizeof (mEditCount)) {","error_line (\"%s is not a valid .CAF file!\", infilename);","return WAVPACK_SOFT_ERROR;"],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["while (noffset >= 0 && ndepth > 0) {","if (ndepth != 1)","goto next_node;","","fit_image_name = (char *)fit_get_name(fit, noffset, NULL);","printf(\"Processing update '%s' :\", fit_image_name);"],"label":1}
{"cve":"CVE-2017-6448","code_chunks":["sprintf (str, \" {v%i}\", buf[4] & 0x0f);","break;","sprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);","break;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_EQ(context, NumDimensions(key), 1);","  TF_LITE_ENSURE_EQ(context, key->type, kTfLiteInt32);","","  const TfLiteTensor* value;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &value));","  TF_LITE_ENSURE(context, NumDimensions(value) >= 1);","  TF_LITE_ENSURE_EQ(context, SizeOfDimension(key, 0),"],"label":0}
{"cve":"CVE-2021-35939","code_chunks":["rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);","","if (!rc)","rc = fsmMkdir(dn, mode);","","if (!rc) {","rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn,"],"label":1}
{"cve":"CVE-2018-20182","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2019-13304","code_chunks":["{","*q++=(unsigned char) (GetPixelLuma(image,p) >= (QuantumRange\/2.0) ?","'0' : '1');","*q++=' ';","if ((q-pixels+1) >= (ssize_t) sizeof(pixels))","{","*q++='\\n';"],"label":1}
{"cve":"CVE-2022-23562","code_chunks":["explicit RangeOp(OpKernelConstruction* context) : OpKernel(context) {}","","  void Compute(OpKernelContext* context) override {","    const Tensor& start_in = context->input(0);","    const Tensor& limit_in = context->input(1);","    const Tensor& delta_in = context->input(2);","        OP_REQUIRES(context,"],"label":0}
{"cve":"CVE-2021-32628","code_chunks":["            break;","        }","    }","    int field_pos = i+1;","","    \/* Check arity. *\/","    if ((c->argc - field_pos) < 2 || ((c->argc-field_pos) % 2) == 1) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\tRLC_TRY {","\t\tbn_new(n);","\t\tbn_new(_k);","\t\tfor (size_t i = 0; i < (1 << (EP_WIDTH - 1)); i ++) {","\t\t\tep_null(t[i]);","\t\t\tep_new(t[i]);","\t\t}"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["          cell_to_input_weights, cell_to_forget_weights, cell_to_output_weights,","          input_layer_norm_coefficients, forget_layer_norm_coefficients,","          cell_layer_norm_coefficients, output_layer_norm_coefficients,","          \/*aux_input=*\/nullptr,","          \/*aux_input_to_input_weights=*\/nullptr,","          \/*aux_input_to_forget_weights=*\/nullptr,","          \/*aux_input_to_cell_weights=*\/nullptr,"],"label":0}
{"cve":"CVE-2018-8793","code_chunks":["","\/* 4 byte bitmap decompress *\/","static RD_BOOL","bitmap_decompress4(uint8 * output, int width, int height, uint8 * input, int size)","{","\tint code;","\tint bytes_pro;"],"label":0}
{"cve":"CVE-2018-14352","code_chunks":["    imap_keepalive();","    alarm(ImapKeepalive);","  }","","  alarm(0); \/* cancel a possibly pending alarm *\/","","  sigaction(SIGALRM, &oldalrm, NULL);"],"label":0}
{"cve":"CVE-2017-9144","code_chunks":["j;","","\/*","Set background color.","*\/","p=pixels;"],"label":1}
{"cve":"CVE-2018-8099","code_chunks":["\t\t\tgoto done;","\t}","","\tmemset(&extension, 0x0, sizeof(struct index_extension));","\tmemcpy(&extension.signature, INDEX_EXT_UNMERGED_SIG, 4);","\textension.extension_size = (uint32_t)reuc_buf.size;",""],"label":0}
{"cve":"CVE-2022-2526","code_chunks":["                if (r == DNSTLS_STREAM_CLOSED)","                        return 0;","                if (r == -EAGAIN)","                        return dns_stream_update_io(s);","                if (r < 0)","                        return dns_stream_complete(s, -r);",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["GetInput(context, node, kDefaultValueTensor);","TfLiteTensor* output_tensor = GetOutput(context, node, 0);","","Subgraph* subgraph = reinterpret_cast<Subgraph*>(context->impl_);","auto& resources = subgraph->resources();"],"label":1}
{"cve":"CVE-2017-12595","code_chunks":["olist.pop_back();","olist.pop_back();","}","else if ((value == \"endobj\") &&"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["assertx(m_len != -1);","assertx(length > 0);","assertx(m_cursor >= 0);","int64_t remaining = m_len - m_cursor;","if (remaining < length) length = remaining;","if (length > 0) {"],"label":0}
{"cve":"CVE-2022-23579","code_chunks":["        return false;","  }","","  if (node.input_size() < 1) {","        return false;","  }",""],"label":0}
{"cve":"CVE-2023-30187","code_chunks":["","\t\t\twhile (_currentPos < _commandsLen && (commands[_currentPos] != 0x0d && commands[_currentPos] != 0x0a))","\t\t\t\t++_currentPos;","","\t\t\tif (_currentPos > _start)","\t\t\t{","\t\t\t\tsize_t _start2 = _start;"],"label":0}
{"cve":"CVE-2021-41136","code_chunks":["goto st23;","if ( ++p == pe )","goto _test_eof23;","#line 555 \"ext\/puma_http11\/http11_parser.c\"","switch( (*p) ) {","case 32: goto tr8;","case 34: goto st0;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        0) return NULL;","    if (PyDict_SetItemString(d, \"Suite\", (PyObject*)Suite_type) < 0) return","        NULL;","    if (PyDict_SetItemString(d, \"stmt\", (PyObject*)stmt_type) < 0) return NULL;","    if (PyDict_SetItemString(d, \"FunctionDef\", (PyObject*)FunctionDef_type) <","        0) return NULL;","    if (PyDict_SetItemString(d, \"AsyncFunctionDef\","],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["                                              cell_state_quantized_size));","    }","","                        node->temporaries->data[kInputScalingFactors] =","        op_data->scratch_tensor_index + kInputScalingFactors;","    TfLiteTensor* input_sf;","    TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2021-45936","code_chunks":["PRINTF(\"MqttClient_Publish: Invalid state %d!\",","publish->stat);","#endif","rc = MQTT_CODE_ERROR_STAT;","break;","} \/* switch (publish->stat) *\/"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);","  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);","","  return context->ResizeTensor(context, output, output_shape);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteIntArray* input_dims = input->dims;","  int input_dims_size = input_dims->size;"],"label":0}
{"cve":"CVE-2021-30020","code_chunks":["\t\tu32 entries, dim;","\t\toggpack_read(&opb, 24);","\t\tdim = oggpack_read(&opb, 16);","\t\tentries = oggpack_read(&opb, 24);","\t\tif ((s32)entries < 0) entries = 0;","\t\tif (oggpack_read(&opb, 1) == 0) {","\t\t\tif (oggpack_read(&opb, 1)) {"],"label":0}
{"cve":"PYSEC-2016-5","code_chunks":["char *filename = \"tempfile.tif\";","char *mode = \"r\";","TIFF *tiff;","tsize_t size;","","","\/* buffer is the encoded file, bytes is the length of the encoded file *\/"],"label":0}
{"cve":"CVE-2019-13391","code_chunks":["","if (status == MagickFalse)","continue;","Ar=GetCacheViewVirtualPixels(Ar_view,0,y,Ar_image->columns,1,exception);","Ai=GetCacheViewVirtualPixels(Ai_view,0,y,Ai_image->columns,1,exception);","Br=GetCacheViewVirtualPixels(Br_view,0,y,Br_image->columns,1,exception);"],"label":1}
{"cve":"CVE-2020-36177","code_chunks":["}","}","#else","s = m = pkcsBlock;","XMEMSET(m, 0, RSA_PSS_PAD_SZ);","m += RSA_PSS_PAD_SZ;","XMEMCPY(m, input, inputLen);"],"label":1}
{"cve":"CVE-2018-1000118","code_chunks":["","if (prefix_length > 0) {","a += prefix_length;","std::string switch_name(a, strcspn(a, \"=\"));","auto* iter = std::lower_bound(std::begin(kBlacklist), std::end(kBlacklist),","switch_name);","if (iter != std::end(kBlacklist) && switch_name == *iter) {"],"label":1}
{"cve":"CVE-2020-4031","code_chunks":["\tfree(server->PrivateKeyFile);","\tserver->PrivateKeyFile = NULL;","\tfree(server->ConfigPath);","\tserver->ConfigPath = NULL;","\tDeleteCriticalSection(&(server->lock));","\tCloseHandle(server->StopEvent);","\tserver->StopEvent = NULL;"],"label":0}
{"cve":"CVE-2018-20181","code_chunks":["width * Bpp);","}","ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);","xfree(bmpdata);","continue;","}"],"label":1}
{"cve":"CVE-2018-25032","code_chunks":["s->wrap = wrap;","s->gzhead = Z_NULL;","s->w_bits = (uInt)windowBits;","s->w_size = 1 << s->w_bits;","s->w_mask = s->w_size - 1;",""],"label":1}
{"cve":"CVE-2020-35964","code_chunks":["avio_seek(pb, q, SEEK_CUR);         avio_r8(pb);","if (avio_tell(pb) < off) {","int num_data;","int xd_size = 0;","int data_len[256];","int offset = 1;","uint8_t *p;"],"label":1}
{"cve":"CVE-2018-14359","code_chunks":["mutt_b64_encode(buf1, send_token.value, send_token.length, sizeof(buf1) - 2);","gss_release_buffer(&min_stat, &send_token);","mutt_str_strcat(buf1, sizeof(buf1), \"\\r\\n\");","mutt_socket_send(idata->conn, buf1);","}",""],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["","memset(&paddedSalt[1], '$', maxSaltLength - 1);","memcpy(paddedSalt, salt, std::min(maxSaltLength, saltLen));","paddedSalt[saltLen] = '\\0';","","if (php_crypt_blowfish_rn(key, paddedSalt, output, sizeof(output))) {","return strdup(output);"],"label":1}
{"cve":"CVE-2022-0695","code_chunks":["r_list_append (sections, ptr);","} else if (lrec.rec_type == LMF_FIXUP_REC) {","RBinReloc *ptr = R_NEW0 (RBinReloc);","if (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {","goto beach;","}"],"label":1}
{"cve":"CVE-2018-14357","code_chunks":["    return -1;","  }","","  \/* This function is only called when the calling code expects the context","   * to be changed. *\/","  imap_allow_reopen(ctx);",""],"label":0}
{"cve":"CVE-2016-5358","code_chunks":["struct eth_phdr eth;","void *phdr;","","ti = proto_tree_add_item (parent_tree, hf_packet, tvb, offset, 20, ENC_NA);","tree = proto_item_add_subtree (ti, ett_packet);",""],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["asdl_seq* defaults;","","if (lookup_attr_id(obj, &PyId_args, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {"],"label":0}
{"cve":"CVE-2022-0156","code_chunks":["compile_nested_function(exarg_T *eap, cctx_T *cctx, char_u **line_to_free)","{","int\t\tis_global = *eap->arg == 'g' && eap->arg[1] == ':';","char_u\t*name_start = eap->arg;"],"label":1}
{"cve":"CVE-2017-9990","code_chunks":["if (ptr + cpp > end)","return AVERROR_INVALIDDATA;","index = ptr;","ptr += cpp;"],"label":1}
{"cve":"CVE-2022-40138","code_chunks":["CAPTURE_IP(calleeBlock->lazyCompile(runtime));","curCodeBlock = calleeBlock;","CAPTURE_IP_SET();","goto tailCall;"],"label":1}
{"cve":"CVE-2018-16393","code_chunks":["\tif (r != SC_SUCCESS) {","\t\treturn r;","\t}","\tswitch (val->cardApplicationType) {","\t\t\/* we don't want to overflow the cac_label array. This test could","\t\t * go way if we create a label function that will create a unique label","\t\t * from a cert index."],"label":0}
{"cve":"CVE-2022-4254","code_chunks":["return EINVAL;","}","","ret = get_filter(ctx, ctx->default_mapping_rule, cert_content, &filter);","goto done;","}",""],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["void CLASS foveon_huff (ushort *huff)","{","  int i, j, clen, code;","","  huff[0] = 8;","  for (i=0; i < 13; i++) {","    clen = getc(ifp);"],"label":0}
{"cve":"CVE-2018-8798","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"CVE-2021-32139","code_chunks":["(*out_desc)->fonts = (GF_FontRecord *) gf_malloc(sizeof(GF_FontRecord));","(*out_desc)->fonts[0].fontName = gf_strdup(qt_txt->textName);","}","} else {","(*out_desc)->font_count = txt->font_table->entry_count;","(*out_desc)->fonts = (GF_FontRecord *) gf_malloc(sizeof(GF_FontRecord) * txt->font_table->entry_count);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const float soft_nms_sigma = *GetTensorData<float>(input_sigma);","if (soft_nms_sigma < 0) {","context->ReportError(context, \"Invalid sigma value for soft NMS: %f\","],"label":1}
{"cve":"CVE-2016-5688","code_chunks":["ThrowImageException(ResourceLimitError,\"MemoryAllocationFailed\");","(void) ResetMagickMemory(clone_image,0,sizeof(*clone_image));","clone_image->signature=MagickCoreSignature;","clone_image->storage_class=image->storage_class;","clone_image->number_channels=image->number_channels;"],"label":1}
{"cve":"CVE-2022-0695","code_chunks":["default: return -1;","}","","int k;","for (k = 0; k < m; k++) {","ut8 tmp[sizeof (ut64)];"],"label":1}
{"cve":"CVE-2023-4683","code_chunks":["","\t\/*parse all top-level items*\/","\twhile (!parser->last_error) {","\t\tstr = gf_bt_get_next(parser, 0);","\t\tif (parser->done) break;","","\t\tif (!strcmp(str, \"\")) {"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["\t\t\tstatus = rdp_client_connect_demand_active(rdp, s);","","\t\t\tif (status < 0)","\t\t\t\tWLog_DBG(TAG,","\t\t\t\t         \"%s: %s - \"","\t\t\t\t         \"rdp_client_connect_demand_active() - %i\",","\t\t\t\t         __FUNCTION__, rdp_server_connection_state_string(rdp->state), status);"],"label":0}
{"cve":"CVE-2021-3770","code_chunks":["\t\t++col;","\t}","\tif (new_line == NULL)\t\t    \t    break;","\tline_breakcheck();","    }","    if (got_int)","\temsg(_(e_interr));"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(values, i, val);","            }","            Py_CLEAR(tmp);","        }"],"label":0}
{"cve":"CVE-2019-16346","code_chunks":["\t\t}","#endif \/* NGIFLIB_INDEXED_ONLY *\/","\t} else {","#ifndef NGIFLIB_INDEXED_ONLY","\t\tif(p->mode & NGIFLIB_MODE_INDEXED) {","#endif \/* NGIFLIB_INDEXED_ONLY *\/","\t\t\tcontext->frbuff_p.p8++;"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;"],"label":1}
{"cve":"CVE-2016-6870","code_chunks":["info.num_from_encodings     = MBSTRG(http_input_list_size);","info.from_language          = MBSTRG(current_language);","","char *encstr = strndup(encoded_string.data(), encoded_string.size());","Array resultArr = Array::Create();","mbfl_encoding *detected ="],"label":1}
{"cve":"CVE-2019-6978","code_chunks":["gd_error(\"Could not create WBMP\");","return;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","TF_LITE_ENSURE(context, scale_diff \/ output_scale <= 0.02);","}","return GetQuantizedConvolutionMultipler(context, input, filter, output,","multiplier);","}"],"label":1}
{"cve":"CVE-2017-9763","code_chunks":["*ptr2 = 0;","off = r_num_math (core->num, ptr2+1);","}","if (!r_fs_mount (core->fs, ptr, input, off))"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["static int item_length(const char *s)","{","return utf8_strnwidth(s, strlen(s), 1);","}","","\/*"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params = reinterpret_cast<TfLiteSoftmaxParams*>(node->builtin_data);","SoftmaxOpData* data = reinterpret_cast<SoftmaxOpData*>(node->user_data);","","const TfLiteTensor* input = GetInput(context, node, 0);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["auto* params = reinterpret_cast<TfLiteSkipGramParams*>(node->builtin_data);","","std::vector<StringRef> words;","tflite::StringRef strref = tflite::GetString(GetInput(context, node, 0), 0);","int prev_idx = 0;","for (int i = 1; i < strref.len; i++) {","if (isspace(*(strref.str + i))) {"],"label":1}
{"cve":"CVE-2022-24792","code_chunks":["}","","status = pj_file_setpos(fport->fd, ch.len,","PJ_SEEK_CUR);","continue;","}"],"label":1}
{"cve":"CVE-2018-5809","code_chunks":["void CLASS rollei_load_raw()","{","uchar pixel[10];","unsigned iten=0, isix, i, buffer=0, todo[16];","","isix = raw_width * raw_height * 5 \/ 8;","while (fread (pixel, 1, 10, ifp) == 10) {"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["\t\tunsigned int n = check->items[i].attr->attr_nr;","\t\tconst char *value = check->all_attrs[n].value;","\t\tif (value == ATTR__UNKNOWN)","\t\t\tvalue = ATTR__UNSET;","\t\tcheck->items[i].value = value;","\t}","}"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* col2im = nullptr;","if (data->has_col2im) {","node->temporaries->data[data->col2im_index] = data->col2im_id;","col2im = GetTemporary(context, node, user_data->col2im_index);","}","","if (!IsConstantTensor(output_shape)) {"],"label":1}
{"cve":"CVE-2019-19481","code_chunks":["int r = 0;","u8 *val = NULL;","u8 *cert_ptr;","size_t val_len = 0;","size_t len, cert_len;","u8 cert_type;",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["    const TfLiteTensor* input_sigma;","    TF_LITE_ENSURE_OK(","        context, GetInputSafe(context, node, kInputTensorSigma, &input_sigma));","    TF_LITE_ENSURE_EQ(context, input_sigma->type, kTfLiteFloat32);","    TF_LITE_ENSURE_EQ(context, NumDimensions(input_sigma), 0);","","    TF_LITE_ENSURE_EQ(context, NumOutputs(node), 3);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["const TfLiteTensor* input_gate_bias =","GetOptionalInputTensor(context, node, lstm::full::kInputGateBiasTensor);","const TfLiteTensor* forget_gate_bias =","GetInput(context, node, lstm::full::kForgetGateBiasTensor);","const TfLiteTensor* cell_gate_bias =","GetInput(context, node, lstm::full::kCellGateBiasTensor);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    return kTfLiteError;","  }","","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  output->type = updates->type;"],"label":0}
{"cve":"CVE-2016-2324","code_chunks":["\t\tread_object_list_from_stdin();","\telse {","\t\tget_object_list(rp.argc, rp.argv);","\t\targv_array_clear(&rp);","\t}","\tcleanup_preferred_base();","\tif (include_tag && nr_result)"],"label":0}
{"cve":"CVE-2021-32439","code_chunks":["","*sampleNumber = 0;","if (!nb_packed_samples)","nb_packed_samples=1;","","if (!stts->nb_entries) {"],"label":1}
{"cve":"CVE-2019-20636","code_chunks":["","\/* We need to fit into seq->private pointer *\/","BUILD_BUG_ON(sizeof(union input_seq_state) != sizeof(seq->private));","","error = mutex_lock_interruptible(&input_mutex);","if (error) {"],"label":1}
{"cve":"CVE-2023-5377","code_chunks":["\t\t} else {","\t\t\tif (ptr->version==0) {","\t\t\t\tISOM_DECREASE_SIZE(s, 8)","\t\t\t\tptr->layout.omittedChannelsMap = gf_bs_read_u64(bs);","\t\t\t\tptr->layout.omitted_channels_present = 1;","\t\t\t\tptr->layout.channel_order_definition = 0;","\t\t\t} else {"],"label":0}
{"cve":"CVE-2022-45909","code_chunks":["        msg_param_t const *params = NULL;","        char const *comment = NULL;","        int rc ;","","                s = strncpy( buf, uri.c_str(), MAX_SIP_URI_LEN ) ;","","                rc = sip_name_addr_d(home, &s, &display, url, &params, &comment) ;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["                      ResizeOutputTensor(context, cond_tensor, output));","  }","","  TfLiteIntArray* dims = cond_tensor->dims;","  if (dims->size == 0) {","        TF_LITE_KERNEL_LOG(context, \"Where op requires condition w\/ rank > 0\");","    return kTfLiteError;"],"label":0}
{"cve":"CVE-2016-2324","code_chunks":["","\t\tif (!strcmp(arg, \"--header\")) {","\t\t\trevs.verbose_header = 1;","\t\t\tcontinue;","\t\t}","\t\tif (!strcmp(arg, \"--timestamp\")) {","\t\t\tinfo.show_timestamp = 1;"],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["","    if (auth->data != NULL) {","\t\/* Zero out encrypted password before freeing. *\/","\tsize_t len = strlen((char *)auth->data);","\tfreezero(auth->data, len);","\tauth->data = NULL;","    }"],"label":0}
{"cve":"CVE-2020-14399","code_chunks":["#include \"zrle.c\"","#undef BPP","","","\/*"," * PrintPixelFormat."," *\/"],"label":0}
{"cve":"CVE-2022-0392","code_chunks":["put_on_cmdline(buf, idx, TRUE);","break;","","if (gap != NULL && ga_grow(gap, idx) == OK)","{","mch_memmove((char *)gap->ga_data + gap->ga_len,","buf, (size_t)idx);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* axis;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxisTensor, &axis));"],"label":0}
{"cve":"CVE-2020-1918","code_chunks":["","int key_size;","if (key.size() > max_key_size) {","raise_warning(\"Key size too large; supplied length: %d, max: %d\",","key.size(), max_key_size);","key_size = max_key_size;","} else {"],"label":1}
{"cve":"CVE-2017-10966","code_chunks":["","list = g_hash_table_lookup(channel->nicks, nick->nick);","if (list == NULL)","return;","","if (list == nick) {"],"label":0}
{"cve":"PYSEC-2021-629","code_chunks":["    final_op_ = BuildOpKernel(c, final_op_name, &sub_node);","    name_ = strings::StrCat(c->def().name(), \": ReduceV2(\", merge_op_name, \",\",","                            final_op_name, \")\");","    VLOG(2) << \"CollectiveReduceV2 \" << this << \" name \" << name_","            << \" communication_hint \" << communication_hint_;","  }",""],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_cert.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/san_uri_key.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/ca_cert.pem\"","- exact: localhost"],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["tiff_ifd[tiff_nifds-1].t_shutter =","shutter = libraw_powf64(2.0, expo);","break;","if ((fabs(ape = getreal(type))<256.0) && (!aperture))","aperture = libraw_powf64(2.0, ape\/2);","break;"],"label":1}
{"cve":"CVE-2021-33910","code_chunks":["                \/* Truncate trailing slashes and skip leading slashes *\/","                delete_trailing_chars(p, \"\/\");","                s = unit_name_escape(skip_leading_chars(p, \"\/\"));","        }","        if (!s)","                return -ENOMEM;",""],"label":0}
{"cve":"CVE-2020-1712","code_chunks":["        sd_bus_message_unref(q->request);","        sd_bus_message_unref(q->reply);","","        free(q->action);","        strv_free(q->details);","","        sd_event_source_disable_unref(q->defer_event_source);"],"label":0}
{"cve":"CVE-2017-12932","code_chunks":["\tid = parse_iv(start + 2) - 1;","\tif (id == -1 || (rval_ref = var_access(var_hash, id)) == NULL) {","\t\treturn 0;","\t}","","\tif (rval_ref == rval) {","\t\treturn 0;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["                       PyCompilerFlags *flags, int feature_version)","{","    mod_ty mod;","    PyObject *result;","    PyArena *arena = PyArena_New();","    if (arena == NULL)","        return NULL;"],"label":0}
{"cve":"CVE-2021-27097","code_chunks":["\"at %08lx ...\\n\", uname, addr);","","fit_hdr = (const void *)addr;","if (!fit_check_format(fit_hdr)) {","puts(\"Bad FIT image format\\n\");","return 1;","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["output_values.push_back(data[i]);","}","}","TfLiteTensor* unique_output = GetOutput(context, node, 0);","std::unique_ptr<TfLiteIntArray, void (*)(TfLiteIntArray*)> shape(","TfLiteIntArrayCreate(NumDimensions(input)), TfLiteIntArrayFree);","shape->data[0] = unique_values.size();"],"label":1}
{"cve":"PYSEC-2021-550","code_chunks":["for (auto& component : element) {","if (DataTypeCanUseMemcpy(component.dtype())) {","const TensorBuffer* buffer = DMAHelper::buffer(&component);","if (buffer) {","total_size += buffer->size();","}"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"CVE-2018-20406","code_chunks":["PyMemoTable_Copy(PyMemoTable *self)","{","Py_ssize_t i;","PyMemoTable *new = PyMemoTable_New();","if (new == NULL)","return NULL;"],"label":1}
{"cve":"CVE-2017-12932","code_chunks":[],"label":1}
{"cve":"CVE-2020-15202","code_chunks":["return Status::OK();","}","","auto SortIndices = [&](int start_batch, int limit_batch) {","for (int32 b = start_batch; b < limit_batch; ++b) {","const T* input_data = &input(b, 0);","const auto stable_comp = [input_data](const int32 a, const int32 b) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["if (index >= 0 && index < node->inputs->size) {","const int tensor_index = node->inputs->data[index];","if (tensor_index != kTfLiteOptionalTensor) {","if (context->tensors != nullptr) {"],"label":1}
{"cve":"CVE-2021-33815","code_chunks":["","if (dc_size > 0) {","unsigned long dest_len = dc_count * 2LL;","GetByteContext agb = gb;","","if (dc_count > (6LL * td->xsize * td->ysize + 63) \/ 64)"],"label":1}
{"cve":"CVE-2021-30020","code_chunks":["gf_bs_read_int_log(bs, 5, \"nal_unit_type\");","}","pps_id = gf_bs_read_ue_log(bs, \"pps_id\");","if (pps_id >= 255) {","return -1;","}","pps = &avc->pps[pps_id];"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* indices = GetInput(context, node, kIndicesTensor);","const TfLiteTensor* values = GetInput(context, node, kValueInputTensor);","","switch (values->type) {","return EvalForIndexType<float>(context, node, indices);"],"label":1}
{"cve":"CVE-2021-41227","code_chunks":["auto root = Scope::NewRootScope().ExitOnError();","","string two_file, three_file;","TF_ASSERT_OK(CreateTempFile(env, 2.0f, 1000, &two_file));","TF_ASSERT_OK(CreateTempFile(env, 3.0f, 1000, &three_file));","auto node1 = ops::ImmutableConst(root, DT_FLOAT, kFileTensorShape, two_file);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["fp54_t l;","ep_t _p;","fp9_t rx, ry, rz, sx, sy, sz, qn;","int i, len = bn_bits(a) + 1;","int8_t s[RLC_FP_BITS + 1];","","fp54_null(l);"],"label":1}
{"cve":"CVE-2019-1010317","code_chunks":["int ParseCaffHeaderConfig (FILE *infile, char *infilename, char *fourcc, WavpackContext *wpc, WavpackConfig *config)","{","uint32_t chan_chunk = 0, channel_layout = 0, bcount;","unsigned char *channel_identities = NULL;","unsigned char *channel_reorder = NULL;","int64_t total_samples = 0, infilesize;"],"label":1}
{"cve":"CVE-2022-29226","code_chunks":["};","","EXPECT_CALL(*validator_, setParams(_, _));","EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));","","EXPECT_EQ(Http::FilterHeadersStatus::Continue,"],"label":1}
{"cve":"CVE-2023-30186","code_chunks":["void CNativeControlEmbed::CreateObjectBuilderInContext(const std::string& name, JSSmart<CJSContext> context)","{","v8::Isolate* current = CV8Worker::GetCurrent();","context->m_internal->m_global->Set(current, name.c_str(), v8::FunctionTemplate::New(current, NSNativeControl::CreateNativeObjectBuilder));","}"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/unittest_cert.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/unittest_key.pem\"","filename: \"{{ test_rundir }}\/test\/extensions\/transport_sockets\/tls\/test_data\/ca_cert.pem\"","exact: \"example.com\"",")EOF\";","","TestUtilOptions test_options(client_ctx_yaml, server_ctx_yaml, false, GetParam());"],"label":1}
{"cve":"CVE-2021-40812","code_chunks":["\treturn NULL;","}","","BGD_DECLARE(gdImagePtr) gdImageCreateFromWebpPtr (int size, void *data)","{","\tARG_NOT_USED(size);","\tARG_NOT_USED(data);"],"label":0}
{"cve":"PYSEC-2021-251","code_chunks":["","auto out = output_tensor->flat_inner_dims<T>();","T* out_data = out.data();","","memset(out_data, 0, fixed_length * flat_in.size());",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kFwOutputTensor, &fw_output));","  TfLiteTensor* fw_activation_state =","      GetVariableInput(context, node, kFwInputActivationStateTensor);","  TF_LITE_ENSURE(context, fw_activation_state != nullptr);","  TfLiteTensor* fw_cell_state =","      GetVariableInput(context, node, kFwInputCellStateTensor);"],"label":0}
{"cve":"CVE-2023-23082","code_chunks":["void CExifParse::ProcessGpsInfo(","                    const unsigned char* const DirStart,","                    int ByteCountUnused,","                    const unsigned char* const OffsetBase,","                    unsigned ExifLength)","{","  int NumDirEntries = Get16(DirStart, m_MotorolaOrder);"],"label":0}
{"cve":"CVE-2020-1918","code_chunks":["assertx(m_len != -1);","assertx(length > 0);","assertx(m_cursor >= 0);","int64_t remaining = m_len - m_cursor;","if (remaining < length) length = remaining;","if (length > 0) {"],"label":0}
{"cve":"CVE-2019-13134","code_chunks":["          \/*","            Dump colormap to file.","          *\/","          viff_colormap=(unsigned char *) AcquireQuantumMemory(image->colors,","            3*sizeof(*viff_colormap));","          if (viff_colormap == (unsigned char *) NULL)","            ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"],"label":0}
{"cve":"CVE-2022-41903","code_chunks":["}","","res = xcalloc(1,","sizeof(*res) +","sizeof(struct attr_state) * num_attr +","(is_macro ? 0 : namelen + 1));"],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["if (!(n > 0 && n < buf_len && count < 0xffff)) {","goto err;","}","if (!(table = calloc (count, sizeof (ut32)))) {","goto err;","}"],"label":1}
{"cve":"CVE-2022-0713","code_chunks":["\tif (!hdr) {","\t\treturn NULL;","\t}","\tif (hdr->version != 1) {","\t\teprintf (\"Unsupported CoreSymbolication cache version (%d)\\n\", hdr->version);","\t\tgoto beach;","\t}"],"label":0}
{"cve":"CVE-2021-40573","code_chunks":["}","","for (i = 0; i < item_count; i++) {","GF_ItemLocationEntry *location_entry = (GF_ItemLocationEntry *)gf_malloc(sizeof(GF_ItemLocationEntry));","if (!location_entry) return GF_OUT_OF_MEM;","","gf_list_add(ptr->location_entries, location_entry);"],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["return ret;","}","","if (!fit_check_format(imgdata)) {","free(imgdata);","return 0;","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["PyErr_SetString(PyExc_RuntimeError, \"FunctionDef field \\\"body\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(body, i, value);","}","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2021-42782","code_chunks":["\t\t\t}","\t\t\tif (r < 0) {","\t\t\t\tgoto fail;","\t\t\t}","\t\t\tkey = coolkey_get_public_key(p15card, &coolkey_obj, key_type);","\t\t\tif (key == NULL) {","\t\t\t\tgoto fail;"],"label":0}
{"cve":"CVE-2022-1451","code_chunks":["R_API RBinJavaAttrInfo *r_bin_java_rti_annotations_attr_new(RBinJavaObj *bin, ut8 *buffer, ut64 sz, ut64 buf_offset) {","ut32 i = 0;","RBinJavaAttrInfo *attr = NULL;","ut64 offset = 0;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    else {","        int res;","        res = obj2ast_identifier(tmp, &arg, arena);","        if (res != 0) goto failed;","        Py_CLEAR(tmp);","    }","    if (_PyObject_LookupAttrId(obj, &PyId_annotation, &tmp) < 0) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["      ExtractShape(input, GetTensorData<int64_t>(output));","      break;","      return kTfLiteError;","  }","","  return kTfLiteOk;","}"],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["#endif","parser->m_hash_secret_salt = 0;","","#ifdef XML_DTD","memset(&parser->m_accounting, 0, sizeof(ACCOUNTING));","parser->m_accounting.debugLevel = getDebugLevel(\"EXPAT_ACCOUNTING_DEBUG\", 0u);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["if (length < 8)","return FALSE;","","Stream_Read_UINT32(s, railSupportLevel); \/* railSupportLevel (4 bytes) *\/"],"label":1}
{"cve":"CVE-2018-11380","code_chunks":["if (idx < 0 || idx >= bin->nsymtab) {","return 0;","}","if ((bin->symtab[idx].n_desc & REFERENCE_TYPE) == REFERENCE_FLAG_UNDEFINED_LAZY) {","stype = S_LAZY_SYMBOL_POINTERS;","} else {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);",""],"label":1}
{"cve":"CVE-2018-14359","code_chunks":["mutt_b64_encode(buf1, send_token.value, send_token.length, sizeof(buf1) - 2);","gss_release_buffer(&min_stat, &send_token);","mutt_str_strcat(buf1, sizeof(buf1), \"\\r\\n\");","mutt_socket_send(idata->conn, buf1);","}",""],"label":1}
{"cve":"CVE-2019-15945","code_chunks":["\t\tr = sc_asn1_encode_object_id(&buf, &buflen, (struct sc_object_id *) parm);","\t\tbreak;","\t\tr = asn1_encode_path(ctx, (const sc_path_t *) parm, &buf, &buflen, depth, entry->flags);","\t\tbreak;","\t\t{","\t\t\tconst struct sc_pkcs15_id *id = (const struct sc_pkcs15_id *) parm;",""],"label":0}
{"cve":"CVE-2022-45909","code_chunks":["}","}","","normalizeSipUri( requestUri, 0 ) ;","if( isLocalSipUri( requestUri ) ) {","throw std::runtime_error(\"can not send request to myself\") ;","}"],"label":1}
{"cve":"CVE-2022-0476","code_chunks":["0);","","offset = entry->location.rva + sizeof (thread_ex_list);","for (i = 0; i < thread_ex_list.number_of_threads; i++) {","struct minidump_thread_ex *thread = R_NEW (struct minidump_thread_ex);","if (!thread) {","break;"],"label":1}
{"cve":"CVE-2022-0156","code_chunks":["\t\t    goto err_ret;","\t\t}","\t\tp = skipwhite(p);","\t    }","\t    if (*p == ',')","\t    {","\t\t++p;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  switch (indices->type) {","      return EvalGatherNd<int32_t>(context, params, indices, output);","      return EvalGatherNd<int64_t>(context, params, indices, output);","      context->ReportError(","          context, \"Indices of type '%s' are not supported by gather_nd.\",","          TfLiteTypeGetName(indices->type));","      return kTfLiteError;"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["          << \"\\nConv: \" << conv_desc.describe() << \"\\nOp: \" << op.describe()","          << \"\\nOpGraph: \" << opGraph.describe();","","  return std::unique_ptr<cudnn_frontend::OperationGraph>(","      new cudnn_frontend::OperationGraph(std::move(opGraph)));","}",""],"label":0}
{"cve":"CVE-2021-40576","code_chunks":["u32 GetHintFormat(GF_TrackBox *trak)","{","GF_HintMediaHeaderBox *hmhd = (GF_HintMediaHeaderBox *)trak->Media->information->InfoHeader;","if (hmhd->type != GF_ISOM_BOX_TYPE_HMHD)","return 0;","","if (!hmhd || !hmhd->subType) {"],"label":1}
{"cve":"CVE-2018-5810","code_chunks":["UINT64 bitbuf=0;","int vbits, col, i, c;","ushort img[2][2064];","double sum[] = {0, 0};","if(width > 2064) return 0.f;","FORC(2) {","fseek (ifp, c ? off1:off0, SEEK_SET);"],"label":0}
{"cve":"CVE-2023-26123","code_chunks":["glfwSetClipboardString(CORE.Window.handle, text);","#endif","#if defined(PLATFORM_WEB)","emscripten_run_script(TextFormat(\"navigator.clipboard.writeText('%s')\", text));","#endif","}",""],"label":1}
{"cve":"CVE-2022-0695","code_chunks":["\tif (!qo) {","\t\treturn false;","\t}","\tlmf_record lrec;","\tlmf_resource lres;","\tlmf_data ldata;","\tut64 offset = QNX_RECORD_SIZE;"],"label":0}
{"cve":"CVE-2019-12904","code_chunks":["const volatile byte *vtab = tab;","size_t i;","","for (i = 0; len - i >= 8 * 32; i += 8 * 32)","{","(void)vtab[i + 0 * 32];","(void)vtab[i + 1 * 32];"],"label":0}
{"cve":"CVE-2016-2315","code_chunks":["struct strbuf *path, const char *last,","void *data)","{","char *name = path_name(path, last);","","add_preferred_base_object(name);"],"label":1}
{"cve":"CVE-2018-14357","code_chunks":["","mutt_message(_(\"Logging in...\"));","","imap_quote_string(q_user, sizeof(q_user), idata->conn->account.user);","imap_quote_string(q_pass, sizeof(q_pass), idata->conn->account.pass);",""],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["  EVP_MD_CTX *md_ctx = EVP_MD_CTX_new();","  SCOPE_EXIT {","    EVP_MD_CTX_free(md_ctx);","  };","","  EVP_DigestInit(md_ctx, mdtype);",""],"label":0}
{"cve":"CVE-2024-22862","code_chunks":["","    *poutbuf      = buf;","    *poutbuf_size = buf_size;","","    ctx->codestream_length = 0;","    ctx->collected_size = 0;","    ctx->container = 0;"],"label":0}
{"cve":"CVE-2022-29379","code_chunks":["length = info->name.length;","","if (dir != NULL) {","length = dir->length;","","if (length == 0) {","return NJS_DECLINED;"],"label":1}
{"cve":"CVE-2018-12562","code_chunks":[", currentMountStatus(false)",", details(d)",", proc(0)",", mounterIface(0)",", messageSent(false)","{","setup();"],"label":1}
{"cve":"CVE-2023-25675","code_chunks":["output = xla::Scatter(output, idx, updates, assn_computation, scatter_dnums,","false, false);","ctx->SetOutput(0, output);"],"label":1}
{"cve":"CVE-2019-13220","code_chunks":["c->value_bits = get_bits(f, 4)+1;","c->sequence_p = get_bits(f,1);","if (c->lookup_type == 1) {","c->lookup_values = lookup1_values(c->entries, c->dimensions);","} else {","c->lookup_values = c->entries * c->dimensions;","}"],"label":1}
{"cve":"CVE-2018-8897","code_chunks":["\t\t\t\t\t\t\tSIGTRAP) == NOTIFY_STOP)","\t\tgoto exit;","","\t\/*","\t * Let others (NMI) know that the debug stack is in use","\t * as we may switch to the interrupt stack.","\t *\/"],"label":0}
{"cve":"PYSEC-2021-625","code_chunks":["    c->set_output(0, c->UnknownShape());","    return Status::OK();","  }","","    int64_t rank;","  if (c->RankKnown(input)) {","    rank = c->Rank(input);"],"label":0}
{"cve":"PYSEC-2022-132","code_chunks":["\" dimensions, indices shape: \",","input_indices->shape().DebugString()));","","int rank = input_shape->NumElements();","","OP_REQUIRES("],"label":1}
{"cve":"CVE-2020-6017","code_chunks":["constexpr int k_cbMaxUnreliableMsgSize = 15*1100;"],"label":1}
{"cve":"CVE-2016-2315","code_chunks":["void show_object_with_name(FILE *out, struct object *obj, const char *name)","{","const char *p;","","fprintf(out, \"%s \", oid_to_hex(&obj->oid));","for (p = name; *p && *p != '\\n'; p++)"],"label":0}
{"cve":"CVE-2017-7500","code_chunks":["free(rmpath);","return (rc ? rc : RPMERR_ENOENT);\t\/* XXX HACK *\/","} else if (S_ISDIR(mode)) {","if (S_ISDIR(dsb.st_mode)) return 0;","if (S_ISLNK(dsb.st_mode)) {"],"label":1}
{"cve":"CVE-2023-26485","code_chunks":["}","","char *cmark_render_commonmark(cmark_node *root, int options, int width) {","  return cmark_render_commonmark_with_mem(root, options, width, cmark_node_mem(root));","}","","char *cmark_render_commonmark_with_mem(cmark_node *root, int options, int width, cmark_mem *mem) {"],"label":0}
{"cve":"PYSEC-2021-174","code_chunks":["        if (st.output->NumElements() == 0) return;","","    typename TTypes<T, 4>::ConstTensor image_data(","        context->input(0).tensor<T, 4>());","    typename TTypes<T, 4>::Tensor output_data(st.output->tensor<T, 4>());","","    ResizeBilinear<T>(image_data, st.height_scale, st.width_scale, in_min,"],"label":0}
{"cve":"CVE-2018-8797","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"CVE-2018-12561","code_chunks":["int t=create","? Type_Samba",": d.isLocalFile()","? Type_File"],"label":1}
{"cve":"CVE-2022-23606","code_chunks":["}","","void ConnPoolImplBase::purgePendingStreams(","const Upstream::HostDescriptionConstSharedPtr& host_description,","absl::string_view failure_reason, ConnectionPool::PoolFailureReason reason) {","state_.decrPendingStreams(pending_streams_.size());"],"label":1}
{"cve":"CVE-2018-5808","code_chunks":["{","if(!image)","throw LIBRAW_EXCEPTION_IO_CORRUPT;","","int bypp = tiff_bps <= 8 ? 1 : 2;","int bufsize = width * 3 * bypp;"],"label":0}
{"cve":"CVE-2020-5238","code_chunks":["while (cell->start_offset > 0 && string[cell->start_offset - 1] != '|') {","--cell->start_offset;","++cell->internal_offset;","}","","row->n_columns += 1;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["OpData* op_data) {","const TfLiteTensor* input_box_encodings;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorBoxEncodings,","&input_box_encodings));","TF_LITE_ENSURE_EQ(context, input_box_encodings->dims->data[0], kBatchSize);"],"label":0}
{"cve":"CVE-2018-20176","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2024-22862","code_chunks":["if (!size)","return AVERROR_INVALIDDATA;","\/* invalid ISOBMFF size *\/","if (size <= head_size + 4)","return AVERROR_INVALIDDATA;","","ctx->skip += size;"],"label":1}
{"cve":"CVE-2018-5808","code_chunks":["{","if (len < 1)","return;   string[len - 1] = 0;","if (len < 3)","return;   len = strnlen(string, len - 1);","for (int i = len - 1; i >= 0; i--)"],"label":0}
{"cve":"CVE-2023-28095","code_chunks":["","\/*computes the length of the new response buffer*\/","len = 0;","","\/* check if rport needs to be updated *\/","if ( (msg->msg_flags&FL_FORCE_RPORT)||"],"label":0}
{"cve":"CVE-2022-36012","code_chunks":["if (position == output_name_to_position.end())","return InvalidArgument(","\"Can't import function, returned value references unknown output \"","\"argument \","],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_HasAttrId(obj, &PyId_lineno)) {","int res;","tmp = _PyObject_GetAttrId(obj, &PyId_lineno);","if (tmp == NULL) goto failed;"],"label":1}
{"cve":"CVE-2019-13219","code_chunks":["","      getn(f, header, 27);","   if (header[0] != 'O' || header[1] != 'g' || header[2] != 'g' || header[3] != 'S')","      return 0;","   getn(f, lacing, header[26]);","","      len = 0;"],"label":0}
{"cve":"CVE-2022-0476","code_chunks":["","obj->streams.memories64.base_rva = memory64_list.base_rva;","offset = entry->location.rva + sizeof (memory64_list);","for (i = 0; i < memory64_list.number_of_memory_ranges; i++) {","struct minidump_memory_descriptor64 *desc = R_NEW (struct minidump_memory_descriptor64);","if (!desc) {","break;"],"label":1}
{"cve":"CVE-2023-23946","code_chunks":["","\tif (!option_bare) {","\t\tif (safe_create_leading_directories_const(work_tree) < 0)","\t\t\tdie_errno(_(\"could not create leading directories of '%s'\"),","\t\t\t\t  work_tree);","\t\tif (dest_exists)","\t\t\tjunk_work_tree_flags |= REMOVE_DIR_KEEP_TOPLEVEL;"],"label":0}
{"cve":"CVE-2022-24786","code_chunks":["const void *buf,","pj_size_t length)","{","pjmedia_rtcp_fb_common *hdr = (pjmedia_rtcp_fb_common*) buf;","","PJ_ASSERT_RETURN(buf, PJ_EINVAL);",""],"label":0}
{"cve":"CVE-2022-24786","code_chunks":["if (hdr->pt != RTCP_PSFB || hdr->count != 2)","return PJ_ENOTFOUND;","","cnt = pj_ntohs((pj_uint16_t)hdr->length) - 2;"],"label":1}
{"cve":"CVE-2021-43845","code_chunks":["\/* Just skip any block with length == 0 (no report content) *\/","if (rb_len) {","switch (rb_hdr->bt) {","rb_rr_time = (pjmedia_rtcp_xr_rb_rr_time*) rb_hdr;","break;","rb_dlrr = (pjmedia_rtcp_xr_rb_dlrr*) rb_hdr;"],"label":1}
{"cve":"CVE-2021-43860","code_chunks":["&download_size, &installed_size, &metadata, NULL))","return FALSE;","","metadata_bytes = g_bytes_new (metadata, strlen (metadata) + 1);","","if (flatpak_remote_state_lookup_ref (state, flatpak_decomposed_get_ref (op->ref),","NULL, NULL, &info, NULL, NULL))"],"label":1}
{"cve":"CVE-2017-16909","code_chunks":["int row, col, i, j, sh = 0, pred[2], nonz[2];","","pana_bits(0);","for (row = 0; row < raw_height; row++)","{","#ifdef LIBRAW_LIBRARY_BUILD","checkCancel();"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2022-0523","code_chunks":["","n = get_ut32 (buffer, &error);","if (n > ST32_MAX) {","eprintf (\"bad marshal data (tuple size out of range)\\n\");","return NULL;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"type_ignores\\\" missing from Module\");","            return 1;","        }","        else {","            int res;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["bn_t n, _k, _m;","ep_t t[5];","int i, u_i, offset;","int8_t jsf[2 * (RLC_FP_BITS + 1)];","size_t l;",""],"label":0}
{"cve":"CVE-2021-30020","code_chunks":["\t\tif (n_state.nal_unit_type == GF_AVC_NALU_IDR_SLICE) {","\t\t\tif (avc->s_info.nal_unit_type != GF_AVC_NALU_IDR_SLICE) { \/*IdrPicFlag differs in value*\/","\t\t\t\tret = 1;","\t\t\t\tbreak;","\t\t\t}","\t\t\telse if (avc->s_info.idr_pic_id != n_state.idr_pic_id) { \/*both IDR and idr_pic_id differs*\/","\t\t\t\tret = 1;"],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["return true;","}","","raise_warning(\"IV passed is %d bytes long which is longer than the %d \"","\"expected by selected cipher, truncating\", piv.size(),","iv_required_len);","memcpy(iv_new, piv.data(), iv_required_len);"],"label":1}
{"cve":"CVE-2019-19922","code_chunks":["\t\tif (!idle_cpu(cpu))","\t\t\tcontinue;","","\t\tbalance_cpu = cpu;","\t\tbreak;","\t}",""],"label":0}
{"cve":"CVE-2015-8631","code_chunks":["                     (int)clen, (char *)client_name.value, cdots,","                     errmsg ? errmsg : _(\"success\"),","                     (int)clen, (char *)client_name.value, cdots,","                     (int)slen, (char *)service_name.value, sdots,","                     client_addr(rqstp->rq_xprt),","                     ret.api_version & ~(KADM5_API_VERSION_MASK),","                     rqstp->rq_cred.oa_flavor);"],"label":0}
{"cve":"CVE-2019-18218","code_chunks":["}","DPRINTF((\"nelements = %\" SIZE_T_FORMAT \"u\\n\",","nelements));","for (j = 0; j < nelements && i < sh.sh_properties;","j++, i++)","{"],"label":1}
{"cve":"CVE-2021-23180","code_chunks":[" * 'file_referer()' - Set the HTTP referer for remote accesses."," *\/","","void","file_referer(const char *referer)\t\/* I - Referer URL *\/","{","  if (referer)"],"label":0}
{"cve":"CVE-2021-40812","code_chunks":["if (buffer_size == 0) {","break;","}","gdPutBuf(copy_buffer , buffer_size, out_original);","}","gdFree(copy_buffer);",""],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","const TfLiteTensor* input_boxes;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kInputTensorBoxes, &input_boxes));","const int num_boxes = SizeOfDimension(input_boxes, 0);","const TfLiteTensor* input_scores;"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["pidfile_write(const char *pid_file, int pid)","{","FILE *pidfile = NULL;","int pidfd = creat(pid_file, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);","","if (pidfd != -1) pidfile = fdopen(pidfd, \"w\");",""],"label":1}
{"cve":"CVE-2021-31262","code_chunks":["static GF_AV1Config* AV1_DuplicateConfig(GF_AV1Config const * const cfg) {","u32 i = 0;","GF_AV1Config *out = gf_malloc(sizeof(GF_AV1Config));",""],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["}","node->temporaries->data[kAccumScratch] =","op_data->scratch_tensor_index + kAccumScratch;","TfLiteTensor* accum_scratch = GetTemporary(context, node, kAccumScratch);","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;","int accum_scratch_dims[2] = {std::max(fw_num_units, bw_num_units),"],"label":1}
{"cve":"CVE-2022-1934","code_chunks":["{","mrb_value hash = mrb_hash_new_capa(mrb, argc);","while (argc--) {","mrb_hash_set(mrb, hash, regs[idx+0], regs[idx+1]);","idx += 2;","}"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TfLiteTensor* invoke_count = GetOutput(context, node, kInvokeCount);","int32_t* invoke_count_data = GetTensorData<int32_t>(invoke_count);","","median_data[0] = sorting_buffer[size \/ 2];"],"label":1}
{"cve":"CVE-2018-16393","code_chunks":["e = sc_file_get_acl_entry(file, SC_AC_OP_READ);","if (e == NULL || e->method == SC_AC_NEVER)","return 10;","bufsize = file->size;","sc_file_free(file);","r = sc_read_binary(card, 0, buf, bufsize, 0);","if (r < 0) {"],"label":1}
{"cve":"CVE-2018-16300","code_chunks":["goto trunc;","if (length < alen)","goto trunc;","if (!bgp_attr_print(ndo, atype, p, alen))","goto trunc;","p += alen;","len -= alen;"],"label":1}
{"cve":"CVE-2023-30187","code_chunks":["void CNativeControlEmbed::CreateObjectBuilderInContext(const std::string& name, JSSmart<CJSContext> context)","{","v8::Isolate* current = CV8Worker::GetCurrent();","context->m_internal->m_global->Set(current, name.c_str(), v8::FunctionTemplate::New(current, NSNativeControl::CreateNativeObjectBuilder));","}"],"label":0}
{"cve":"CVE-2022-0525","code_chunks":["      codegen(s, tree, NOVAL);","      genjmp(s, OP_JMPUW, s->loop->pc0);","    }","    else {","      if (tree) {","        codegen(s, tree, VAL);","        pop();"],"label":0}
{"cve":"CVE-2018-20181","code_chunks":["STREAM s;","int length;","int tagval;","struct stream packet;","","s = tcp_recv(NULL, 4);"],"label":0}
{"cve":"CVE-2018-20839","code_chunks":["if (r < 0)","return log_warning_errno(errno, \"Failed to %s UTF-8 kbdmode on %s: %m\", enable_disable(utf8), name);","","r = loop_write(fd, utf8 ? \"\\033%G\" : \"\\033%@\", 3, false);","if (r < 0)","return log_warning_errno(r, \"Failed to %s UTF-8 term processing on %s: %m\", enable_disable(utf8), name);"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["                std::min<int64_t>(","                  val(class_name).pstr->size(),","                  strobelight::kClassNameMax","                ));","        frame->class_name[strobelight::kClassNameMax - 1] = '\\0';","      }",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["GetTemporary(context, node, kFwCellStateQuantized);","fw_cell_state_quantized->type = fw_input_to_output_weights->type;","fw_cell_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(fw_cell_state_quantized->dims,"],"label":1}
{"cve":"CVE-2021-32139","code_chunks":["\ttxt->font_table->entry_count = desc->font_count;","","\ttxt->font_table->fonts = (GF_FontRecord *) gf_malloc(sizeof(GF_FontRecord) * desc->font_count);","\tif (!txt->font_table->fonts) return GF_OUT_OF_MEM;","\tfor (i=0; i<desc->font_count; i++) {","\t\ttxt->font_table->fonts[i].fontID = desc->fonts[i].fontID;","\t\tif (desc->fonts[i].fontName) txt->font_table->fonts[i].fontName = gf_strdup(desc->fonts[i].fontName);"],"label":0}
{"cve":"CVE-2019-15226","code_chunks":["    ASSERT_TRUE(fake_upstream_connection_->close());","    ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());","  }","","  codec_client_->close();","","  EXPECT_TRUE(upstream_request_->complete());"],"label":0}
{"cve":"CVE-2016-4562","code_chunks":["status=MagickTrue;","maximum_length=0.0;","total_length=0.0;","for (i=1; (i < number_vertices) && (length >= 0.0); i++)","{","dx=primitive_info[i].point.x-primitive_info[i-1].point.x;","dy=primitive_info[i].point.y-primitive_info[i-1].point.y;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);","","const TfLiteTensor* multipliers = GetInput(context, node, kInputMultipliers);","if (multipliers->type != kTfLiteInt32 && multipliers->type != kTfLiteInt64) {","context->ReportError(context,","\"Multipliers of type '%s' are not supported by tile.\","],"label":1}
{"cve":"CVE-2017-7524","code_chunks":["TPM2B *key, char *label, TPM2B *contextU, TPM2B *contextV, UINT16 bits,","TPM2B_MAX_BUFFER  *resultKey )","{","TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2;","UINT8 *tpm2bBitsPtr = &tpm2bBits.t.buffer[0];","UINT8 *tpm2b_i_2Ptr = &tpm2b_i_2.t.buffer[0];"],"label":0}
{"cve":"CVE-2016-10167","code_chunks":["{","gdImagePtr im;","int white, black;","char *path;","","im = gdImageCreateTrueColor(6, 6);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["if (index == data->axis) {","output_shape->data[index] = data->values_count;","} else {","output_shape->data[index] = input_shape->data[i++];","}","}"],"label":1}
{"cve":"CVE-2021-27138","code_chunks":["#if defined(CONFIG_FIT)","\/* This cannot be done earlier, we need complete FIT image in RAM first *\/","if (genimg_get_format ((void *)addr) == IMAGE_FORMAT_FIT) {","if (!fit_check_format (fit_hdr)) {","bootstage_error(BOOTSTAGE_ID_NAND_FIT_READ);","puts (\"** Bad FIT image format\\n\");","return 1;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["type_ignore_ty o = (type_ignore_ty)_o;","PyObject *result = NULL, *value = NULL;","if (!o) {","Py_INCREF(Py_None);","return Py_None;"],"label":1}
{"cve":"CVE-2021-42073","code_chunks":["m_server(NULL),","m_events(events),","security_level_{security_level}","{","assert(m_socketFactory != NULL);",""],"label":0}
{"cve":"CVE-2016-10009","code_chunks":["if (lifetime && !death)","death = monotime() + lifetime;","","count = pkcs11_add_provider(provider, pin, &keys);","for (i = 0; i < count; i++) {","k = keys[i];","version = k->type == KEY_RSA1 ? 1 : 2;"],"label":1}
{"cve":"CVE-2020-1712","code_chunks":["q->slot = sd_bus_slot_unref(q->slot);","q->reply = sd_bus_message_ref(reply);","","r = sd_bus_message_rewind(q->request, true);","if (r < 0) {","r = sd_bus_reply_method_errno(q->request, r, NULL);"],"label":1}
{"cve":"CVE-2022-26530","code_chunks":["surface->ext_session_lock_surface_v1 = ext_session_lock_v1_get_lock_surface(","state->ext_session_lock_v1, surface->surface, surface->output);","ext_session_lock_surface_v1_add_listener(surface->ext_session_lock_surface_v1,","&ext_session_lock_surface_v1_listener, surface);","} else {","surface->layer_surface = zwlr_layer_shell_v1_get_layer_surface("],"label":0}
{"cve":"CVE-2019-19480","code_chunks":["assert(info.params.len == 0);","info.params.len = sizeof(struct sc_pkcs15_keyinfo_gostparams);","info.params.data = malloc(info.params.len);","if (info.params.data == NULL)","LOG_FUNC_RETURN(ctx, SC_ERROR_OUT_OF_MEMORY);","assert(sizeof(*keyinfo_gostparams) == info.params.len);"],"label":1}
{"cve":"CVE-2020-36315","code_chunks":["uint8_t pad, h1[RLC_MD_LEN], h2[RLC_MD_LEN];","\/* MSVC does not allow dynamic stack arrays *\/","uint8_t *mask = RLC_ALLOCA(uint8_t, k_len);","int result = RLC_OK;","bn_t t;","","bn_null(t);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["*literal = decode_unicode_with_escapes(c, n, literal_start,","literal_end-literal_start);","if (!*literal)","return -1;","}"],"label":1}
{"cve":"CVE-2020-5238","code_chunks":["    if (yych <= 0x7F)","      goto yy26;","    if (yych <= 0xBF)","      goto yy22;","    goto yy26;","    yyaccept = 1;","    yych = *(marker = ++p);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"CVE-2023-23457","code_chunks":["}","if (file_size <= dt_offsets[n_off]) {","char msg[60]; snprintf(msg, sizeof(msg), \"bad DT_{%#x} = %#x (beyond EOF)\",","dt_names[k], dt_offsets[n_off]);","throwCantPack(msg);","}","n_off += !!dt_offsets[n_off];"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* tensor0 = GetInput(context, node, 0);","TfLiteTensor* tensor1 = GetOutput(context, node, 0);","TfLiteIntArray* newSize = TfLiteIntArrayCopy(tensor0->dims);","return context->ResizeTensor(context, tensor1, newSize);","};"],"label":1}
{"cve":"CVE-2021-32439","code_chunks":["\tu32 i, chunkNumber, sampleDescIndex;","\tu64 dataOffset;","\tGF_StscEntry *ent;","\tGF_ChunkOffsetBox *stco_tmp;","\tGF_ChunkLargeOffsetBox *co64_tmp;","\tGF_SampleToChunkBox *stsc_tmp;",""],"label":0}
{"cve":"CVE-2018-8800","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;"],"label":1}
{"cve":"CVE-2021-32495","code_chunks":["\t\tret = get_ascii_interned_object (buffer);","\t\tbreak;","\t\tret = get_short_ascii_object (buffer);","\t\tbreak;","\t\tret = get_ascii_object (buffer);","\t\tbreak;","\t\tret = get_short_ascii_interned_object (buffer);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","  TFLITE_DCHECK(node->user_data != nullptr);","  const OpData* data = static_cast<const OpData*>(node->user_data);","","  reference_ops::Concatenation(data->params, inputs_shape_ptr, inputs_data,","                               tflite::micro::GetTensorShape(output),","                               tflite::micro::GetTensorData<data_type>(output));"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["    return tsl::Status(","        tsl::error::INTERNAL,","        absl::StrFormat(","            \"failed initializing StreamExecutor for CUDA device ordinal %d: %s\",","            config.ordinal, init_status.ToString()));","  }",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["}","const int input_dims = NumDimensions(input_tensor);","","TfLiteTensor* output_tensor = GetOutput(context, node, 0);","if (IsDynamicTensor(output_tensor)) {","auto output_size = GetPaddedOutputShape(input_tensor, padding_matrix);","if (output_size == nullptr) {"],"label":1}
{"cve":"CVE-2023-25658","code_chunks":["iter = generic_factories.find(plugin_id);","if (iter == generic_factories.end()) {","return tsl::Status(","port::error::NOT_FOUND,","absl::StrFormat(\"Plugin ID %p not registered.\", plugin_id));","}","}"],"label":1}
{"cve":"CVE-2020-1917","code_chunks":["    if (m_len + offset < 0) return false;","    m_cursor = m_len + offset;","  } else {","    return false;","  }","  setPosition(m_cursor);","  return true;"],"label":0}
{"cve":"CVE-2016-10012","code_chunks":["POKE_U32(buf, len);","if ((r = sshbuf_put(state->output, buf, 4)) != 0)","goto out;","if ((r = sshbuf_reserve(state->output,","sshbuf_len(state->outgoing_packet), &cp)) != 0)","goto out;"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["","bool bASCII = false;","","if ( isxdigit( sCur[0] ) && isxdigit( sCur[1] ) && isxdigit( sCur[2] ) && isxdigit( sCur[3] ) )","bASCII = true;","","if ( bASCII )"],"label":1}
{"cve":"CVE-2016-6912","code_chunks":["","if (im == NULL) {","return 1;","}","","if (!gdImageTrueColor(im)) {"],"label":0}
{"cve":"CVE-2020-11085","code_chunks":["\t\t\tformats[index].formatName = NULL;","","\t\t\t\/* According to MS-RDPECLIP 2.2.3.1.1.1 formatName is \"a 32-byte block containing","\t\t\t * the *null-terminated* name assigned to the Clipboard Format: (32 ASCII 8 characters","\t\t\t * or 16 Unicode characters)\"","\t\t\t * However, both Windows RDSH and mstsc violate this specs as seen in the following","\t\t\t * example of a transferred short format name string: [R.i.c.h. .T.e.x.t. .F.o.r.m.a.t.]"],"label":0}
{"cve":"CVE-2019-13296","code_chunks":["WandPrivate MagickBooleanType CLIListOperatorImages(MagickCLI *cli_wand,","const char *option,const char *arg1n,const char *arg2n)","{","const char    \/* percent escaped versions of the args *\/","*arg1,","*arg2;"],"label":0}
{"cve":"CVE-2021-32687","code_chunks":["if (success) {","\/* Convert to regular set when the intset contains","* too many entries. *\/","if (intsetLen(subject->ptr) > server.set_max_intset_entries)","setTypeConvert(subject,OBJ_ENCODING_HT);","return 1;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["RLC_TRY {","bn_new(t);","","switch (operation) {","\/* EB = 00 | 02 | PS | 00 | D. *\/","bn_zero(m);","bn_lsh(m, m, 8);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* cond;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &cond));","bool cond_value = cond->data.b[0];",""],"label":0}
{"cve":"CVE-2019-16346","code_chunks":["\t\t\tcase 3:\t\/* 3rd pass : every fourth row starting from 2 *\/","\t\t\t\tcontext->curY += 4;","\t\t\t\tbreak;","\t\t\tcase 4:\t\/* 4th pass : every odd row *\/","\t\t\t\tcontext->curY += 2;","\t\t\t\tbreak;","\t\t\t}"],"label":0}
{"cve":"CVE-2021-46463","code_chunks":["static njs_jump_off_t","njs_vmcode_try_continue(njs_vm_t *vm, njs_value_t *exit_value,","    njs_value_t *offset)","{","    njs_number(exit_value) = -1;","","    return (njs_jump_off_t) offset;"],"label":0}
{"cve":"CVE-2018-6767","code_chunks":["    fmthdr.ckSize = wavhdrsize;","","    if (write_junk) {","        CLEAR (junkchunk);","        strncpy (junkchunk.ckID, \"junk\", sizeof (junkchunk.ckID));","        junkchunk.ckSize = sizeof (junkchunk) - 8;","        WavpackNativeToLittleEndian (&junkchunk, ChunkHeaderFormat);"],"label":0}
{"cve":"CVE-2016-10129","code_chunks":["\tadded->head.name = git__strdup(push_spec->refspec.dst);","","\tif (!added->head.name ||","\t\tgit_vector_insert(refs, added) < 0) {","\t\tgit_pkt_free((git_pkt *)added);","\t\treturn -1;","\t}"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const TfLitePackParams* data =","reinterpret_cast<TfLitePackParams*>(node->builtin_data);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","switch (output->type) {","case kTfLiteFloat32: {","return PackImpl<float>(context, node, output, data->values_count,"],"label":1}
{"cve":"CVE-2021-27097","code_chunks":["","\/**","* fit_conf_find_compat","* @fit: pointer to the FIT format image header","* @fdt: pointer to the device tree to compare against","*"],"label":0}
{"cve":"CVE-2022-36026","code_chunks":["    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"input_min\", &input_min_));","    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"input_max\", &input_max_));","    if (range_given_) {","      OP_REQUIRES(ctx, input_min_ <= input_max_,","                  InvalidArgument(\"Invalid range: input_min \", input_min_,","                                  \" > input_max \", input_max_));","    }"],"label":0}
{"cve":"CVE-2021-23521","code_chunks":["{","const std::map<String, bool> testCases = { { \"a\",                    true  },","#if JUCE_WINDOWS","{ \"C:\/b\",                 false },","#else","{ \"\/b\",                   false },"],"label":0}
{"cve":"CVE-2021-4173","code_chunks":["if (get_function_args(&p, ')', &newargs,","eap->cmdidx == CMD_def ? &argtypes : NULL, FALSE,","NULL, &varargs, &default_args, eap->skip,","eap, &line_to_free) == FAIL)","goto errret_2;","whitep = p;",""],"label":1}
{"cve":"CVE-2016-2324","code_chunks":["finish_object(obj, path, component, cb_data);","if (info->flags & REV_LIST_QUIET)","return;","show_object_with_name(stdout, obj, path, component);","}",""],"label":1}
{"cve":"CVE-2021-45943","code_chunks":["{","if (loaded_) {","return;","}","if( data_size - 1024 > static_cast<uint64_t>(std::numeric_limits<int>::max()) )","{"],"label":0}
{"cve":"CVE-2022-0695","code_chunks":["free_Var (var);","return NULL;","}","if (r_buf_read_at (pe->b, *curAddr, (ut8*) var->szKey, TRANSLATION_UTF_16_LEN) < 1) {","pe_printf (\"Warning: read (Var szKey)\\n\");","free_Var (var);","return NULL;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["}","","TfLiteTensor* log_probability_output =","GetOutput(context, node, top_paths * 3);","TfLiteIntArray* log_probability_output_shape_array = TfLiteIntArrayCreate(2);","log_probability_output_shape_array->data[0] = batch_size;"],"label":1}
{"cve":"PYSEC-2021-617","code_chunks":["const int64_t stats_dims = logits_dims + hessians_dims;","const int64_t num_sparse_entries = feature_indices_t->dim_size(0);","const int32_t feature_dims = feature_shape(1);","DCHECK_LE(num_sparse_entries, batch_size * feature_dims);","","StatsPartitionMap stats_map;",""],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (!ti)","goto out;","asdl_seq_SET(type_ignores, i, ti);","}"],"label":1}
{"cve":"CVE-2021-39212","code_chunks":["p=GetCoderInfo(module,exception);","if (p != (CoderInfo *) NULL)","(void) CopyMagickString(module_name,p->name,MagickPathExtent);","rights=AllPolicyRights;","if (IsRightsAuthorized(ModulePolicyDomain,rights,module_name) == MagickFalse)","{","errno=EPERM;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["Subgraph& active_branch_subgraph =","*(*subgraphs)[active_branch_subgraph_index];","for (int i = 0; i < active_branch_subgraph.inputs().size(); ++i) {","const TfLiteTensor* input = GetInput(context, node, i + 1);","TfLiteTensor* subgraph_input =","active_branch_subgraph.tensor(active_branch_subgraph.inputs()[i]);","TF_LITE_ENSURE_EQ(context, input->bytes, subgraph_input->bytes);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["      Comparison<int64_t, reference_ops::LessFn>(input1, input2, output,","                                                 requires_broadcast);","      break;","      ComparisonQuantized<uint8_t, reference_ops::LessFn>(","          input1, input2, output, requires_broadcast);","      break;","      ComparisonQuantized<int8_t, reference_ops::LessFn>(input1, input2, output,"],"label":0}
{"cve":"CVE-2023-27772","code_chunks":["MmsValue_delete(ctlVal);","","\/* Wait for command termination message *\/","Thread_sleep(1000);","","ControlObjectClient_destroy(control);"],"label":1}
{"cve":"CVE-2022-1587","code_chunks":["common->quit_label = common->abort_label = LABEL();","if (common->quit != NULL)","  set_jumps(common->quit, common->quit_label);","if (common->abort != NULL)","  set_jumps(common->abort, common->abort_label);","if (minlength_check_failed != NULL)","  SET_LABEL(minlength_check_failed, common->abort_label);"],"label":0}
{"cve":"CVE-2023-27114","code_chunks":["\t\tif (simdop_size > buf_len) {","\t\t\tgoto err;","\t\t}","\t\top->len = 1 + simdop_size;","\t\top->op.simd = simdop;","\t\tid = simdop; \t\t\t\tWasmOpDef *opdef = &opcodes_simd[id];","\t\tswitch (id) {"],"label":0}
{"cve":"CVE-2022-1237","code_chunks":["bin->ne_header = R_NEW0 (NE_image_header);","if (!bin->ne_header) {","return;","}","bin->buf = buf;","r_buf_read_at (buf, bin->header_offset, (ut8 *)bin->ne_header, sizeof (NE_image_header));"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void ep_map(ep_t p, const uint8_t *msg, int len) {","ep_map_dst(p, msg, len, (const uint8_t *)\"RELIC\", 5);","}"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 length;","UINT16 channelId;","","if (!rdp_read_share_control_header(s, &length, &type, &channelId))","return -1;","","if (type == PDU_TYPE_DATA)"],"label":1}
{"cve":"PYSEC-2021-748","code_chunks":["      }","    } else {","                  out->emplace_back();","      tensor_proto_strs.emplace_back();","      tstring& tensor_proto_str = tensor_proto_strs.back();","      tensor_proto_str.resize_uninitialized(metadata.tensor_size_bytes());","      iov[i].iov_base = tensor_proto_str.mdata();"],"label":0}
{"cve":"CVE-2017-11462","code_chunks":["(void) memset(d_u_cred, 0, sizeof (gss_union_cred_desc));","","d_u_cred->count = 1;","","status = generic_gss_copy_oid(&temp_minor_status,","selected_mech,"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    int lineno;","    int col_offset;","    int end_lineno;","    int end_col_offset;","","    if (obj == Py_None) {","        *out = NULL;"],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["                  strobelight::kClassNameMax","                ));","        frame->class_name[strobelight::kClassNameMax - 1] = '\\0';","      }","","      auto const function_name = bt_frame->get(s_function.get());","      if (function_name.is_init()) {"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["int total_consumed = 0, len, padding = c->padding;","if (padding < 0) {","const char *start = strrchr(sb->buf, '\\n');","int occupied;","if (!start)","start = sb->buf;"],"label":1}
{"cve":"CVE-2018-16229","code_chunks":["\t\t *  +--------+--------+------- ... -------+------- ... -------+","\t\t *  |00101010|00001010|  Timestamp Echo   |    Elapsed Time   |","\t\t *  +--------+--------+------- ... -------+------- ... -------+","\t\t *   Type=42   Len=10       (4 bytes)           (4 bytes)","\t\t *\/","\t\t\tswitch (optlen) {","\t\t\t\tND_PRINT((ndo, \" %u\", EXTRACT_32BITS(option + 2)));"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["  TF_ASSIGN_OR_RETURN(","      auto tensor_bias,","      CreateCudnnTensor(output_dims, output_strides, 'B', activation_type,","                        vector_size, vector_dim, \/*is_virtual=*\/true));","","    auto mode = convolution_descriptor.convolution_not_crosscorr()","                  ? CUDNN_CONVOLUTION"],"label":0}
{"cve":"CVE-2022-24786","code_chunks":["pjmedia_rtcp_common *hdr = (pjmedia_rtcp_common*) buf;","pj_uint8_t *p;","pj_uint8_t padlen;","pj_size_t rpsi_len;"],"label":1}
{"cve":"CVE-2022-4202","code_chunks":["\t\t\tGF_LSR_READ_INT(lsr, *(SVG_FontStyle*)info.far_ptr, 3, \"fontStyle\");","\t\t\tbreak;","\t\t\tGF_LSR_READ_INT(lsr, *(SVG_FontWeight*)info.far_ptr, 4, \"fontWeight\");","\t\t\tbreak;","\t\t\tlsr_read_byte_align_string(lsr, info.far_ptr, \"xlink:title\");","\t\t\tbreak;","\t\t\t\/*TODO FIXME*\/"],"label":0}
{"cve":"CVE-2022-0476","code_chunks":["\"SizeOfHeader SizeOfEntry NumberOfEntries Reserved\", 0);","","offset = entry->location.rva + sizeof (handle_operation_list);","for (i = 0; i < handle_operation_list.number_of_entries; i++) {","struct avrf_handle_operation *op = R_NEW (struct avrf_handle_operation);","if (!op) {","break;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input_to_forget_weights =","GetInput(context, node, lstm::full::kInputToForgetWeightsTensor);","TF_LITE_ENSURE_EQ(context, input_to_forget_weights->dims->size, 2);","TF_LITE_ENSURE_EQ(context, input_to_forget_weights->dims->data[0], n_cell);","TF_LITE_ENSURE_EQ(context, input_to_forget_weights->dims->data[1], n_input);",""],"label":1}
{"cve":"CVE-2022-29226","code_chunks":["  };","","    EXPECT_CALL(*validator_, setParams(_, _));","  EXPECT_CALL(*validator_, isValid()).WillOnce(Return(false));","","  EXPECT_EQ(Http::FilterHeadersStatus::StopIteration,","            filter_->decodeHeaders(request_headers, false));"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["  ScopedActivateContext activation(context);","  CUresult res = cuMemcpyDtoHAsync(host_dst, gpu_src, size, stream);","  if (res != CUDA_SUCCESS) {","    LOG(ERROR) << absl::StrFormat(","        \"failed to enqueue async memcpy from device to host: %s; host dst: %p; \"","        \"GPU src: %p; size: %u=0x%x\",","        ToString(res), host_dst, absl::bit_cast<void*>(gpu_src), size, size);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["GetTemporary(context, node, \/*index=*\/kFwRowSums);","fw_row_sums->type = kTfLiteInt32;","fw_row_sums->allocation_type = kTfLiteArenaRwPersistent;","int fw_row_sums_dims[2] = {num_row_sums, fw_num_units};"],"label":1}
{"cve":"PYSEC-2020-140","code_chunks":["\"src_format = \",","src_format)));","OP_REQUIRES(","context, dst_format.size() == 4 || dst_format.size() == 5,","errors::InvalidArgument(strings::StrCat(","\"Destination format must of length 4 or 5, received dst_format = \","],"label":1}
{"cve":"PYSEC-2021-578","code_chunks":["const Tensor& input_min_vec = ctx->input(kInputMinVecIndex);","float* input_min_vec_data = (float*)const_cast<void*>(","static_cast<const void*>(input_min_vec.flat<float>().data()));","const Tensor& input_max_vec = ctx->input(kInputMaxVecIndex);","float* input_max_vec_data = (float*)const_cast<void*>("],"label":1}
{"cve":"CVE-2019-19959","code_chunks":["zFree = sqlite3_mprintf(\"%s\/\", zPath);","if( zFree==0 ){ rc = SQLITE_NOMEM; }","zPath = (const char*)zFree;","nPath++;","}","}",""],"label":1}
{"cve":"CVE-2018-12559","code_chunks":["return;","}","if (constPromptPassword==det.url.password()) {","bool ok=false;","QString passwd=InputDialog::getPassword(QString(), &ok, QApplication::activeWindow());","if (!ok) {"],"label":1}
{"cve":"CVE-2023-27114","code_chunks":["op->len += n;","}","break;","{","ut32 count = 0, *table = NULL, def = 0;","size_t n = read_u32_leb128 (buf + 1, buf + buf_len, &count);"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["node->temporaries = TfLiteIntArrayCreate(kTemporaryNum);","","node->temporaries->data[kActivation] = *scratch_tensor_index;","TfLiteTensor* activation = GetTemporary(context, node, kActivation);","activation->type = input->type;","activation->allocation_type = kTfLiteArenaRw;","TfLiteIntArray* activation_size = TfLiteIntArrayCreate(2);"],"label":1}
{"cve":"CVE-2023-43887","code_chunks":["}","","if (success) {","pps[ (int)new_pps->pic_parameter_set_id ] = new_pps;","}",""],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fb_write_bin(uint8_t *bin, size_t len, const fb_t a) {","bn_t t;","","bn_null(t);"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (positions->type == kTfLiteInt32) {","switch (input->type) {"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["            if (res != 0) goto failed;","            Py_CLEAR(tmp);","        }","        if (_PyObject_LookupAttrId(obj, &PyId_body, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["int64_t size_in_bytes_int64_t = size_in_bytes;","","if (ABSL_PREDICT_FALSE(size_in_bytes_int64_t < 0)) {","return tsl::Status(","port::error::INTERNAL,","\"cudnnGetConvolutionBackwardFilterWorkspaceSize() returned \""],"label":1}
{"cve":"CVE-2023-0817","code_chunks":["\t\tctx->is_file = GF_FALSE;","\t\tctx->file_loaded = GF_TRUE;","\t\treturn;","\t}","\tctx->is_file = GF_TRUE;","","\tstream = gf_fopen_ex(p->value.string, NULL, \"rb\", GF_TRUE);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["bn_rec_naf(naf, &l, _k, EP_WIDTH);","","ep_set_infty(r);","for (i = l - 1; i >= 0; i--) {","ep_dbl(r, r);","","u = naf[i];"],"label":1}
{"cve":"CVE-2021-23177","code_chunks":["else if (acl_set_link_np(name, acl_type, acl) != 0)","#else","\/* FreeBSD older than 8.0 *\/","else if (acl_set_file(name, acl_type, acl) != 0)","#endif","{","if (errno == EOPNOTSUPP) {"],"label":1}
{"cve":"CVE-2023-45145","code_chunks":["memset(&sa,0,sizeof(sa));","sa.sun_family = AF_LOCAL;","redis_strlcpy(sa.sun_path,path,sizeof(sa.sun_path));","if (anetListen(err,s,(struct sockaddr*)&sa,sizeof(sa),backlog) == ANET_ERR)","return ANET_ERR;","if (perm)"],"label":1}
{"cve":"CVE-2018-5812","code_chunks":["      if(! (imgdata.params.raw_processing_options & LIBRAW_PROCESSING_SONYARW2_ALLFLAGS)          || (imgdata.params.raw_processing_options & LIBRAW_PROCESSING_SONYARW2_DELTATOVALUE)","         )","        {","          for (bit=30, i=0; i < 16; i++)","            if      (i == imax) pix[i] = max;","            else if (i == imin) pix[i] = min;","            else {"],"label":0}
{"cve":"CVE-2020-5209","code_chunks":["get_unix_pw()","{","    char *user;","    unsigned uid;","    static struct passwd *pw = (struct passwd *) 0;","","    if (pw)"],"label":0}
{"cve":"CVE-2019-17178","code_chunks":["\t\t\t{","\t\t\t\t\/* Check if the existing newExtents is empty. If it is empty, use","\t\t\t\t * new common directly. We do not need to check common rectangle","\t\t\t\t * because the rectangles_intersection() ensures that it is not empty.","\t\t\t\t *\/","\t\t\t\tnewExtents = common;","\t\t\t}"],"label":0}
{"cve":"CVE-2020-1919","code_chunks":["if (length > 0) {","memcpy(buffer, (const void *)(m_data + m_cursor), length);","}","m_cursor += length;","return length;","}"],"label":1}
{"cve":"CVE-2020-9433","code_chunks":["{","X509 * cert = CHECK_OBJECT(1, X509, \"openssl.x509\");","size_t sz;","const char *email = luaL_checklstring(L, 2, &sz);","int flags = luaL_optint(L, 3, 0);","int ret = X509_check_email(cert, email, sz, flags);"],"label":0}
{"cve":"PYSEC-2021-644","code_chunks":["const Tensor& handle = ctx->input(0);","const string& name = handle.scalar<tstring>()();","Tensor val;","auto session_state = ctx->session_state();","OP_REQUIRES(ctx, session_state != nullptr,","errors::FailedPrecondition(","\"GetSessionTensor called on null session state\"));"],"label":0}
{"cve":"CVE-2018-14359","code_chunks":["int    mutt_b64_decode(char *out, const char *in);"],"label":1}
{"cve":"CVE-2016-5842","code_chunks":["}","if ((*name == '#') && (sub_number != 1))","{","\/*","No numbered match, scroll forward and try next.","*\/"],"label":1}
{"cve":"CVE-2023-27597","code_chunks":["\t\t\t\t} \\","\t\t\t\tbreak","#define param_xswitch1(old_state, c1, new_state) \\","\t\t\tcase old_state: \\","\t\t\t\tswitch(*p){ \\","\t\t\t\t\tcase c1: \\","\t\t\t\t\t\tstate=(new_state); \\"],"label":0}
{"cve":"CVE-2023-34474","code_chunks":["SetStringInfoLength(profile,new_length);","datum=(char *) GetStringInfoDatum(profile);","memmove(datum+start+value_length,datum+end,length-end);","memcpy(datum+start,value,value_length);","if (new_length < length)","{"],"label":1}
{"cve":"CVE-2023-46927","code_chunks":["}","","if (stsz->type == GF_ISOM_BOX_TYPE_STZ2) return GF_OK;","if (stsz->sampleSize) {","if (stsz->sizes) gf_free(stsz->sizes);","stsz->sizes = (u32*) gf_malloc(sizeof(u32)*stsz->sampleCount);","if (!stsz->sizes) return GF_OUT_OF_MEM;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tdig_t _x, _y, q, _q, t, _t;","\tdis_t _a, _b, _c, _d;","","\tif (bn_is_zero(a)) {","\t\tbn_abs(c, b);","\t\treturn;","\t}"],"label":0}
{"cve":"CVE-2022-39347","code_chunks":["}","","CopyMemory(path_slash, path, base_path_length);","path_slash[base_path_length \/ 2] = L'\/';","path_slash[base_path_length \/ 2 + 1] = L'*';","DEBUG_WSTR(\"Search in %s\", path_slash);"],"label":1}
{"cve":"CVE-2019-15162","code_chunks":["\t\t\terrmsgbuf)) == NULL)","\t\tgoto error;","","#if 0","\t\tfp->rmt_samp.method = samp_param->method;","\tfp->rmt_samp.value = samp_param->value;","#endif"],"label":0}
{"cve":"CVE-2021-32686","code_chunks":["asock_cfg.async_cnt = ssock->param.async_cnt;","asock_cfg.concurrency = ssock->param.concurrency;","asock_cfg.whole_data = PJ_TRUE;","","pj_bzero(&asock_cb, sizeof(asock_cb));","asock_cb.on_data_read = asock_on_data_read;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["(recurrent_to_input_weights != nullptr)) ||","((input_to_input_weights == nullptr) &&","(recurrent_to_input_weights == nullptr));","TF_LITE_ENSURE(context, cifg_weights_all_or_none == true);","","const TfLiteTensor* cell_to_input_weights = GetOptionalInputTensor("],"label":1}
{"cve":"PYSEC-2020-328","code_chunks":["int previous_segment_id = -1;","for (int i = 0; i < segment_id_size; i++) {","const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];","if (i == 0) {","TF_LITE_ENSURE_EQ(context, current_segment_id, 0);","} else {"],"label":0}
{"cve":"CVE-2020-11008","code_chunks":["* check for malicious characters.","*\/","char *decoded = url_decode(url);","int has_nl = !!strchr(decoded, '\\n');","free(decoded);","if (has_nl)"],"label":1}
{"cve":"CVE-2019-13045","code_chunks":["if (ircnet->sasl_username != NULL && *ircnet->sasl_username &&","ircnet->sasl_password != NULL && *ircnet->sasl_password) {","conn->sasl_username = ircnet->sasl_username;","conn->sasl_password = ircnet->sasl_password;","} else","g_warning(\"The fields sasl_username and sasl_password are either missing or empty\");"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["    TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);","  output->type = kTfLiteBool;","","  bool requires_broadcast = !HaveSameShapes(input1, input2);","","  TfLiteIntArray* output_size = nullptr;","  if (requires_broadcast) {"],"label":0}
{"cve":"CVE-2021-3772","code_chunks":[" * Outputs"," * (asoc, reply_msg, msg_up, timers, counters)"," *"," * The return value is the disposition of the chunk."," *\/","enum sctp_disposition sctp_sf_do_ecne(struct net *net,","\t\t\t\t      const struct sctp_endpoint *ep,"],"label":0}
{"cve":"CVE-2021-33365","code_chunks":["","switch (movie->moov->iods->descriptor->tag) {","od = (GF_ObjectDescriptor*)gf_malloc(sizeof(GF_ObjectDescriptor));","if (!od) return NULL;","","memset(od, 0, sizeof(GF_ObjectDescriptor));"],"label":1}
{"cve":"CVE-2023-51384","code_chunks":["usage(void)","{","\tfprintf(stderr,","\t    \"usage: ssh-agent [-c | -s] [-Dd] [-a bind_address] [-E fingerprint_hash]\\n\"","\t    \"                 [-O option] [-P allowed_providers] [-t life]\\n\"","\t    \"       ssh-agent [-a bind_address] [-E fingerprint_hash] [-O option]\\n\"","\t    \"                 [-P allowed_providers] [-t life] command [arg ...]\\n\""],"label":0}
{"cve":"CVE-2022-39347","code_chunks":["","\t\t\tif (file->is_dir && !PathIsDirectoryEmptyW(file->fullpath))","\t\t\t\tbreak; \/* TODO: SetLastError ??? *\/","","\t\t\tif (Length)","\t\t\t{","\t\t\t\tif (Stream_GetRemainingLength(input) < 1)"],"label":0}
{"cve":"CVE-2020-12465","code_chunks":["int offset = data - page_address(page);","struct sk_buff *skb = q->rx_head;","","offset += q->buf_offset;"],"label":1}
{"cve":"CVE-2016-4563","code_chunks":["    degrees,","    offset,","    point;","","  register PrimitiveInfo","    *p;",""],"label":0}
{"cve":"CVE-2018-8797","code_chunks":["if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;","}"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","const TfLiteTensor* input2;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* cond_tensor =","GetInput(context, node, kInputConditionTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"CVE-2022-39244","code_chunks":["\tpj_scan_syntax_err(scanner);","\treturn;","    }","","    \/* We have checked scanner->curptr validity above *\/","    if (*scanner->curptr == '\\r') {","\t++scanner->curptr;"],"label":0}
{"cve":"CVE-2022-40299","code_chunks":["{","const char *editor=getenv(\"EDITOR\");","if (editor==NULL)","editor=getenv(\"VISUAL\");","if (editor==NULL)","editor=\"vi\";"],"label":1}
{"cve":"CVE-2019-3554","code_chunks":["auto socket = std::dynamic_pointer_cast<folly::AsyncSocket>("],"label":1}
{"cve":"CVE-2020-15195","code_chunks":["","const CPUDevice& d = context->eigen_device<CPUDevice>();","","OP_REQUIRES(","context, TensorShapeUtils::IsVector(reverse_index_map_t->shape()),","errors::InvalidArgument(\"reverse_index_map must be a vector, saw: \",","reverse_index_map_t->shape().DebugString()));"],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["","if (from_sp || type == recurse_swap_global)","delayed_mem_copy_move(&status, SLJIT_SP, private_srcw[i], base_reg, stackptr);","","stackptr += sizeof(sljit_sw);","}"],"label":1}
{"cve":"CVE-2018-8795","code_chunks":["x = CVAL(in);","if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;"],"label":1}
{"cve":"CVE-2017-9990","code_chunks":["    size *= 4;","","    av_fast_padded_malloc(&x->pixels, &x->pixels_size, size);","    if (!x->pixels)","        return AVERROR(ENOMEM);","","    ptr += mod_strcspn(ptr, \",\") + 1;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"Dict field \\\"values\\\" changed size during iteration\");","goto failed;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["fp12_copy(c, u[0]);","}","","for (i = j; i < k; i++) {","fp12_mul(c, c, u[i]);","}",""],"label":1}
{"cve":"CVE-2019-16778","code_chunks":["  config = GetGpuLaunchConfig(total_stripe_count, d);","  TF_CHECK_OK(GpuLaunchKernel(","      SortedSegmentSumCustomKernel<T, Index, OuterDimTileSize>,","      config.block_count, config.thread_per_block, 0, d.stream(),","      input_outer_dim_size, input_inner_dim_size, output_rows,","      segment_ids.data(), data, output.data(), total_stripe_count));","}"],"label":0}
{"cve":"CVE-2022-24949","code_chunks":["#else","      FATAL_FAIL(::close(sockFd));","#endif","      sockFd = -1;","    }","  } else {","    auto localErrno = GetErrno();"],"label":0}
{"cve":"CVE-2016-9388","code_chunks":["\t\t\tif (jas_image_writecmpt(image, i, 0, y, hdr->width, 1,","\t\t\t  data[i])) {","\t\t\t\tgoto error;","\t\t\t}","\t\t}","\t}",""],"label":0}
{"cve":"CVE-2022-1283","code_chunks":["}","RList *entries = r_bin_ne_get_entrypoints (bin);","bool resident = true, first = true;","while (true) {","ut8 sz = r_buf_read8_at (bin->buf, off);","if (!sz) {","first = true;"],"label":1}
{"cve":"CVE-2020-1919","code_chunks":["CHECK_HANDLE(handle, f);","int64_t ret = f->write(data, length);","if (ret < 0) {","raise_notice(\"fwrite(): send of %ld bytes failed with errno=%d %s\",","data.size(), errno, folly::errnoStr(errno).c_str());","ret = 0;","}"],"label":0}
{"cve":"CVE-2019-9162","code_chunks":["{","struct snmp_ctx *ctx = (struct snmp_ctx *)context;","__be32 *pdata;","","if (datalen != 4)","return -EINVAL;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void eb_mul_sim_trick(eb_t r, const eb_t p, const bn_t k, const eb_t q,","const bn_t m) {","eb_t t0[1 << (EB_WIDTH \/ 2)], t1[1 << (EB_WIDTH \/ 2)], t[1 << EB_WIDTH];","size_t l0, l1, w = EB_WIDTH \/ 2;","uint8_t w0[RLC_FB_BITS], w1[RLC_FB_BITS];","bn_t n;",""],"label":0}
{"cve":"CVE-2018-8099","code_chunks":["const char *path_end;","","path_end = memchr(path_ptr, '\\0', buffer_size);","if (path_end == NULL)","return 0;",""],"label":1}
{"cve":"CVE-2019-11924","code_chunks":["}","}","case ContentType::handshake: {","unparsedHandshakeData_.append(std::move(message->fragment));","auto param = decodeHandshakeMessage(unparsedHandshakeData_);","if (param) {","VLOG(8) << \"Received handshake message \""],"label":1}
{"cve":"CVE-2022-24754","code_chunks":["\t\t}","#endif","","\t\t\/* Callback must be specified *\/","\t\tPJ_ASSERT_RETURN(c[i].ext.aka.cb != NULL, PJ_EINVAL);","","\t\t\/* Verify K len *\/"],"label":0}
{"cve":"CVE-2019-13221","code_chunks":["c->value_bits = get_bits(f, 4)+1;","c->sequence_p = get_bits(f,1);","if (c->lookup_type == 1) {","c->lookup_values = lookup1_values(c->entries, c->dimensions);","} else {","c->lookup_values = c->entries * c->dimensions;","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp12_read_bin(fp12_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"CVE-2017-12662","code_chunks":["static MagickBooleanType WritePDFImage(const ImageInfo *image_info,Image *image,","ExceptionInfo *exception)","{","#define CFormat  \"\/Filter [ \/%s ]\\n\"","#define ObjectsPerImage  14",""],"label":0}
{"cve":"CVE-2016-8654","code_chunks":["\t\t\t}","\t\t}","","\t\t\/* Apply the second lifting step. *\/","\t\tlptr = &a[0];","\t\thptr = &a[llen * stride];","\t\tif (!parity) {"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["\"connections, click Yes. To reject this fingerprint and \"","\"disconnect from the server, click No.\")",".arg(QString::fromStdString(barrier::format_ssl_fingerprint(fingerprint_sha256.data)))",".arg(QString::fromStdString(","barrier::create_fingerprint_randomart(fingerprint_sha256.data)))",".arg(QString::fromStdString(barrier::format_ssl_fingerprint(fingerprint_sha1.data))),"],"label":1}
{"cve":"CVE-2020-11087","code_chunks":["0) \/* NtChallengeResponse *\/","{","Stream_Free(s, FALSE);","return SEC_E_INTERNAL_ERROR;","}",""],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["{","time_t t;","char buf[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss UTC\")];","","if (len != 4)","goto invalid;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["const bool is_soft_nms = NumInputs(node) == 6;","","const TfLiteTensor* input_boxes;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kInputTensorBoxes, &input_boxes));","const int num_boxes = SizeOfDimension(input_boxes, 0);","const TfLiteTensor* input_scores;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* axis;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2022-35939","code_chunks":["TFLITE_DCHECK(0 <= idx && idx < output_shape.Dims(j));"],"label":1}
{"cve":"CVE-2018-6334","code_chunks":["","          event_file_data.post_bytes_processed = mbuff->read_post_bytes;","          event_file_data.offset = offset;","          event_file_data.data = buff;","          event_file_data.length = blen;","          event_file_data.newlength = &blen;","          if (php_rfc1867_callback(&s_rfc1867_data->rfc1867ApcData,"],"label":0}
{"cve":"CVE-2018-14470","code_chunks":["                int parsed_len = 10;","                ND_PRINT((ndo, \"\\n\\tSS-Update\"));","                if(len < 10) goto invalid;","                ae = message[2];","                src_plen = message[3];","                plen = message[4];","                omitted = message[5];"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["","\t\/* clientName (32 bytes, null-terminated unicode, truncated to 15 characters) *\/","","\tif (clientNameLength >= 16)","\t{","\t\tclientNameLength = 16;","\t\tclientName[clientNameLength - 1] = 0;"],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["","if (PJ_SCAN_IS_PROBABLY_SPACE(*s) && scanner->skip_ws) {","pj_scan_skip_whitespace(scanner);","}","}",""],"label":1}
{"cve":"CVE-2019-7397","code_chunks":["do","{","MagickBooleanType","has_icc_profile;","","profile=GetImageProfile(image,\"icc\");"],"label":1}
{"cve":"CVE-2020-1898","code_chunks":["return V::fromMap(unserializeMap());"],"label":1}
{"cve":"CVE-2023-46853","code_chunks":["size_t _process_request_next_key(mcp_parser_t *pr) {","const char *cur = pr->request + pr->parsed;","int remain = pr->endlen - pr->parsed;","","while (remain) {","if (*cur == ' ') {"],"label":0}
{"cve":"CVE-2018-14464","code_chunks":["\t\t\t\t(EXTRACT_32BITS(obj_tptr+offset+4)>>31) ?","\t\t\t\t\t\t\"Allocated\" : \"Non-allocated\",","\t\t\t\t(EXTRACT_32BITS(obj_tptr+offset+4)>>31)));","","\t\t\tND_PRINT((ndo, \"\\n\\t\\t    Direction: %s (%u)\",","\t\t\t\t(EXTRACT_32BITS(obj_tptr+offset+4)>>30)&0x1 ?","\t\t\t\t\t\t\"Transmit\" : \"Receive\","],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["  i = 0;","  do","    {","      g_clear_pointer (&new_remote, g_free);","","      if (i == 0)","        new_remote = g_strdup (basename);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty val;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"CVE-2017-9520","code_chunks":["if (info) {","int va = info->has_va;","char * arch = strdup(info->arch);","char * cpu = info->cpu? strdup(info->cpu): NULL;","ut16 bits = info->bits;","ut64 baseaddr = r_bin_get_baddr (r->bin);"],"label":0}
{"cve":"CVE-2021-43860","code_chunks":["          deploy_data = flatpak_dir_get_deploy_data (priv->dir, op->ref, 4, NULL, NULL);","","          if (deploy_data)","            {","              const char *eol =  flatpak_deploy_data_get_eol (deploy_data);","              const char *eol_rebase = flatpak_deploy_data_get_eol_rebase (deploy_data);",""],"label":0}
{"cve":"CVE-2016-5418","code_chunks":["\t\t\t\t    \"Can't set permissions to 0%o\", (int)mode);","\t\t\t\tr = ARCHIVE_WARN;","\t\t\t}","\t\t} else","#endif","\t\t\t\/* If this platform lacks fchmod(), then","\t\t\t * we'll just use chmod(). *\/"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["        context->ResizeTensor(context, hwcn_weights, hwcn_weights_size);","    if (hwcn_weights_status != kTfLiteOk) return hwcn_weights_status;","","            data->have_weights_been_transposed = false;","  }","","  if (is_hybrid) {"],"label":0}
{"cve":"CVE-2017-12641","code_chunks":["","    if (memcmp(type,mng_gAMA,4) == 0)","      {","        if (length == 4)","          image->gamma=((float) mng_get_long(p))*0.00001;","","        chunk=(unsigned char *) RelinquishMagickMemory(chunk);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["              \/*sizeInBytes=*\/&reserve_space_size_in_bytes));","      TF_ASSIGN_OR_RETURN(reserve_space, reserve_space_allocator->AllocateBytes(","                                             reserve_space_size_in_bytes));","    }","  }","#endif",""],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["BYTE numIconCaches;","UINT16 numIconCacheEntries;","WLog_INFO(TAG, \"WindowListCapabilitySet (length %\" PRIu16 \"):\", length);","","if (length < 11)","return FALSE;"],"label":1}
{"cve":"CVE-2016-10012","code_chunks":["debug(\"%s: child log fd closed\", __func__);","close(pmonitor->m_log_recvfd);","pmonitor->m_log_recvfd = -1;","return -1;","}","fatal(\"%s: log fd read: %s\", __func__, strerror(errno));"],"label":1}
{"cve":"CVE-2019-13219","code_chunks":["ady -= abs(base) * adx;","if (x1 > n) x1 = n;","if (x < x1) {","LINE_OP(output[x], inverse_db_table[y]);","for (++x; x < x1; ++x) {"],"label":1}
{"cve":"PYSEC-2022-71","code_chunks":["explicit RangeOp(OpKernelConstruction* context) : OpKernel(context) {}","","void Compute(OpKernelContext* context) override {","const Tensor& start_in = context->input(0);","const Tensor& limit_in = context->input(1);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["auto* params =","reinterpret_cast<TfLiteResizeBilinearParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["const TfLiteTensor* hash = GetInput(context, node, 0);","TF_LITE_ENSURE_EQ(context, NumDimensions(hash), 2);","TF_LITE_ENSURE(context, SizeOfDimension(hash, 1) <= 32);","","const TfLiteTensor* input = GetInput(context, node, 1);","TF_LITE_ENSURE(context, NumDimensions(input) >= 1);"],"label":1}
{"cve":"CVE-2020-35535","code_chunks":["","  \/* skip SRF0 *\/","  srf_offset = 0;","  CHECKBUFFER_SGET2(srf_offset);","  entries = sget2(srf_buf + srf_offset);","  if (entries > 1000)","    goto restore_after_parseSonySRF;"],"label":0}
{"cve":"CVE-2018-8793","code_chunks":["{","color = CVAL(in);","*out = color;","out += 4;","indexw++;","collen--;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["        string type_comment;","","        if (lookup_attr_id(obj, &PyId_name, &tmp) < 0) {","            return 1;","        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"name\\\" missing from FunctionDef\");"],"label":0}
{"cve":"CVE-2017-6448","code_chunks":["sprintf (str, \" v%i, string+%i\", vA, vB);","} else {","sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  auto* data =","      reinterpret_cast<TfLiteAudioMicrofrontendParams*>(node->user_data);","  FrontendReset(data->state);","","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2023-45898","code_chunks":["\t\tfirst = EXT4_LBLK_CMASK(sbi, lblk);","\t\tif (first != lblk)","\t\t\tf_del = __es_scan_range(inode, &ext4_es_is_delonly,","\t\t\t\t\t\tfirst, lblk - 1);","\t\tif (f_del) {","\t\t\t__insert_pending(inode, first);","\t\t} else {"],"label":0}
{"cve":"CVE-2017-14608","code_chunks":["      \tFORC4 sraw_mul[c ^ (c >> 1)] = get2();","      \tif (sraw_mul[1] == 1170) break;","      }","    }","    if(!strncasecmp(make,\"Samsung\",7))","      {","        if (tag == 0xa020)             for (i=0; i<11; i++) SamsungKey[i] = get4();"],"label":0}
{"cve":"CVE-2019-17177","code_chunks":["","if (format)","\/* coverity[buffer_size] *\/","strncpy(&tmp[cs], \"<replaceable>\", len);","else","\/* coverity[buffer_size] *\/"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2023-51698","code_chunks":["quoted_archive = g_shell_quote (comics_document->archive);","quoted_filename =","comics_regex_quote (comics_document->page_names->pdata[page]);","} else {","quoted_archive = g_shell_quote (comics_document->archive);","quoted_filename = g_shell_quote (comics_document->page_names->pdata[page]);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* transposed_weights =","GetTemporary(context, node, user_data->transposed_weights_index);","if (!IsConstantTensor(weights)) {","SetTensorToDynamic(transposed_weights);","} else {"],"label":1}
{"cve":"CVE-2016-4564","code_chunks":["return(MagickFalse);","(void) QueryColorCompliance(\"#0000\",AllCompliance,","&clip_mask->background_color,exception);","clip_mask->background_color.alpha=(Quantum) TransparentAlpha;","(void) SetImageBackgroundColor(clip_mask,exception);","if (image->debug != MagickFalse)","(void) LogMagickEvent(DrawEvent,GetMagickModule(),\"\\nbegin clip-path %s\","],"label":1}
{"cve":"CVE-2020-9274","code_chunks":["(tail->dir = strdup(dir)) == NULL) {","die_mem();","}","tail->next = NULL;","} else {","DirAlias *curr;",""],"label":1}
{"cve":"CVE-2021-46822","code_chunks":["cinfo->in_color_space = JCS_EXT_RGB;","TRACEMS2(cinfo, 1, JTRC_PPM, w, h);","if (maxval > 255) {","source->pub.get_pixel_rows = get_word_rgb_row;","} else if (maxval == MAXJSAMPLE && sizeof(JSAMPLE) == sizeof(U_CHAR) &&","#if RGB_RED == 0 && RGB_GREEN == 1 && RGB_BLUE == 2 && RGB_PIXELSIZE == 3","(cinfo->in_color_space == JCS_EXT_RGB ||"],"label":1}
{"cve":"CVE-2020-9434","code_chunks":["{","const char *email = lua_tostring(L, 2);","lua_pushboolean(L, X509_check_email(cert, email, strlen(email), 0));","}","else","{"],"label":1}
{"cve":"CVE-2016-0740","code_chunks":["char *filename = \"tempfile.tif\";","char *mode = \"r\";","TIFF *tiff;","tsize_t size;","","","\/* buffer is the encoded file, bytes is the length of the encoded file *\/"],"label":0}
{"cve":"CVE-2020-11089","code_chunks":[],"label":1}
{"cve":"CVE-2019-15162","code_chunks":["HANDLE Token;","if (LogonUser(username, \".\", password, LOGON32_LOGON_NETWORK, LOGON32_PROVIDER_DEFAULT, &Token) == 0)","{","pcap_fmt_errmsg_for_win32_err(errbuf, PCAP_ERRBUF_SIZE,","GetLastError(), \"LogonUser() failed\");"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["","    \/* Number *\/","    if (isdigit(c)) {","        if (c == '0') {","            \/* Hex, octal or binary -- maybe. *\/","            c = tok_nextc(tok);","            if (c == 'x' || c == 'X') {"],"label":0}
{"cve":"CVE-2021-32439","code_chunks":["\t\t\tif (stss->sampleNumbers[i] >= sampleNumber) {","\t\t\t\tnewNumbers[i + k] = sampleNumber;","\t\t\t\tk = 1;","\t\t\t}","\t\t\tnewNumbers[i + k] = stss->sampleNumbers[i] + k;","\t\t}","\t\tgf_free(stss->sampleNumbers);"],"label":0}
{"cve":"CVE-2018-12559","code_chunks":["                if (!oldMount.isEmpty() && QDir(oldMount).exists()) {","                    ::rmdir(QFile::encodeName(oldMount).constData());","                }","            }","            setData(details.name);","            renamed(oldDetails.name, details.name);","            deviceId=createUdi(details.name);"],"label":0}
{"cve":"CVE-2023-1801","code_chunks":["}","","if (time_flag == LOCAL_TIME)","tm = localtime(&Time);","else","tm = gmtime(&Time);"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["{","int ret = 0;","","ret |= fsck_blobs(&options->gitmodules_found, &options->gitmodules_done,","FSCK_MSG_GITMODULES_MISSING, FSCK_MSG_GITMODULES_BLOB,","options, \".gitmodules\");"],"label":0}
{"cve":"CVE-2018-5807","code_chunks":["}","for (c=0; c < 16; c+=2) {","i = len[((c & 1) << 1) | (c >> 3)];","RAW(row,col+c) = ((signed) ph1_bits(i) << (32-i) >> (32-i)) +","(dir ? RAW(row+(~c | -2),col+c) : col ? RAW(row,col+(c | -2)) : 128);","if (c == 14) c = -1;"],"label":1}
{"cve":"CVE-2019-19333","code_chunks":["             * it is ok *\/","            imp->module = module->imp[i].module;","            return 0;","        }","    }","","    \/* circular import check *\/"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteIntArray* input_dims = input->dims;","int input_dims_size = input_dims->size;"],"label":0}
{"cve":"CVE-2017-9144","code_chunks":["#define SkipLinesOp  0x01","#define SetColorOp  0x02","#define SkipPixelsOp  0x03","#define ByteDataOp  0x05","#define RunDataOp  0x06","#define EOFOp  0x07"],"label":0}
{"cve":"CVE-2021-32132","code_chunks":["","i=0;","if (ptr->size<8) return GF_ISOM_INVALID_FILE;","tmp_strsize =(u32)ptr->size;","tmp_str = gf_malloc(sizeof(char)*tmp_strsize);","if (!tmp_str) return GF_OUT_OF_MEM;"],"label":1}
{"cve":"CVE-2018-16393","code_chunks":["\t\tsc_debug(ctx, SC_LOG_DEBUG_NORMAL,","\t\t\t \"got %\"SC_FORMAT_LEN_SIZE_T\"u %s-FileIDs\\n\",","\t\t\t apdu.resplen \/ 2, p1 == 1 ? \"DF\" : \"EF\");","","\t\tmemcpy(buf, apdu.resp, apdu.resplen);","\t\tbuf += apdu.resplen;","\t\tbuflen -= apdu.resplen;"],"label":0}
{"cve":"CVE-2019-1010208","code_chunks":["PIO_STACK_LOCATION irpSp = IoGetCurrentIrpStackLocation (Irp);","NTSTATUS ntStatus;","","switch (irpSp->Parameters.DeviceIoControl.IoControlCode)","{","if (ValidateIOBufferSize (Irp, sizeof (LONG), ValidateOutput))"],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["char *string_crypt(const char *key, const char *salt) {","  assertx(key);","  assertx(salt);","","  char random_salt[12];","  if (!*salt) {","    memcpy(random_salt,\"$1$\",3);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["        \/*seqLengthArray=*\/seq_lengths_array,","        \/*paddingFill*\/ (void*)&padding_fill));","    return CudnnRnnSequenceTensorDescriptor(","        parent, max_seq_length, batch_size, data_size, data_type,","        std::move(data_desc), std::move(tensor_desc));","  }",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input0->type);","","      for (int i = 0; i < data->values_count; i++) {","    const TfLiteTensor* input;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const TfLitePackParams* data =","reinterpret_cast<TfLitePackParams*>(node->builtin_data);","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","switch (output->type) {","case kTfLiteFloat32: {","return PackImpl<float>(context, node, output, data->values_count,"],"label":1}
{"cve":"CVE-2019-11596","code_chunks":["        }","    } else if (strcmp(tokens[1].value, \"mode\") == 0 && ntokens >= 4 &&","               settings.lru_maintainer_thread) {","        if (strcmp(tokens[2].value, \"flat\") == 0) {","            settings.lru_segmented = false;","            out_string(c, \"OK\");","        } else if (strcmp(tokens[2].value, \"segmented\") == 0) {"],"label":0}
{"cve":"CVE-2018-16643","code_chunks":["if ((unique_file == -1) || (file == (FILE *) NULL))","ThrowImageException(FileOpenError,\"UnableToCreateTemporaryFile\");","while ((c=ReadBlobByte(image)) != EOF)","(void) fputc(c,file);","(void) fclose(file);","(void) CloseBlob(image);","image=DestroyImage(image);"],"label":1}
{"cve":"CVE-2023-4322","code_chunks":["RIOReadAt read_at = NULL;","RBin *bin = R_UNWRAP2 (a, binb.bin);","if (bin && bin->iob.read_at) {","RIOReadAt read_at = bin->iob.read_at;","buf = malloc (0xff);","read_at (bin->iob.io, op->addr, buf, 0xff);"],"label":1}
{"cve":"CVE-2021-24025","code_chunks":["assertx(m_len != -1);","assertx(length > 0);","assertx(m_cursor >= 0);","int64_t remaining = m_len - m_cursor;","if (remaining < length) length = remaining;","if (length > 0) {"],"label":0}
{"cve":"CVE-2016-9391","code_chunks":["","\tnumfill = 7;","\tm = 0;","\tv = 0;","\tif (bitstream->cnt_ > 0) {","\t\tn = bitstream->cnt_;","\t} else if (!bitstream->cnt_) {"],"label":0}
{"cve":"CVE-2021-32628","code_chunks":["{","lp = NULL;","} else if (server.stream_node_max_entries) {","int64_t count = lpGetInteger(lpFirst(lp));"],"label":1}
{"cve":"CVE-2021-37655","code_chunks":["\"updates.shape \", updates.shape().DebugString(),","\", indices.shape \", indices.shape().DebugString(),","\", params.shape \", params->shape().DebugString()));","","const int64_t N_big = indices.NumElements();","OP_REQUIRES("],"label":1}
{"cve":"CVE-2022-29201","code_chunks":["errors::InvalidArgument(","\"Current implementation only supports equal length \"","\"strides in the row and column dimensions.\"));","OP_REQUIRES(","context, (strides_[0] == 1 && strides_[3] == 1),","errors::InvalidArgument(\"Current implementation does not yet support \"","\"strides in the batch and depth dimensions.\"));"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["Py_XSETREF(tok->decoding_readline, readline);","","if (pos > 0) {","PyObject *bufobj = PyObject_CallObject(readline, NULL);","if (bufobj == NULL)","return 0;","Py_DECREF(bufobj);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"CVE-2018-8799","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;"],"label":1}
{"cve":"CVE-2021-42782","code_chunks":["\t\treturn r;","\t\/* set ACs  *\/","\tlen = 9;","\tr = cardos_acl_to_bytes(card, file, buf, &len);","\tif (r != SC_SUCCESS)","\t\treturn r;","\tr = sc_asn1_put_tag(0x86, buf, len, p, 18, &p);"],"label":0}
{"cve":"PYSEC-2021-734","code_chunks":["output_index_multiplier, output_size, result);","return tensorflow::Status::OK();","if (row_partition_tensor.size() - 1 > parent_output_index.size()) {","return errors::InvalidArgument(","\"Row partition size is greater than output size: \",","row_partition_tensor.size() - 1, \" > \","],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["input_quantized->type = fw_input_to_output_weights->type;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2016-10012","code_chunks":["usage();","break;","}","}","if (rexeced_flag || inetd_flag)","rexec_flag = 0;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","TfLiteTensor* scratch_buffer = GetTemporary(context, node, kScratchBuffer);","scratch_buffer->type = input->type;","scratch_buffer->allocation_type = kTfLiteArenaRw;","","const TfLiteTensor* input_to_input_weights = GetOptionalInputTensor("],"label":1}
{"cve":"CVE-2021-37639","code_chunks":["            << restored_full_shape.num_elements();","    return Status::OK();","  }","","  OpKernelContext* context;","  size_t idx;","  string tensor_name;"],"label":0}
{"cve":"CVE-2022-0717","code_chunks":["if (n < 14) {","n++;","}","else {"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["","if (!ds->ossl_wbio[idx]) {","pj_lock_release(ds->ossl_lock);","return PJ_EGONE;","}",""],"label":1}
{"cve":"CVE-2018-20175","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["}","","BOOL rdp_send_confirm_active(rdpRdp* rdp)","{","\twStream* s = rdp_send_stream_pdu_init(rdp);","\tBOOL status;",""],"label":0}
{"cve":"CVE-2023-25933","code_chunks":["Type LeftTy = BOI->getLeftHandSide()->getType();","Type RightTy = BOI->getRightHandSide()->getType();","","Type mayBeBigInt = LeftTy.canBeBigInt() && RightTy.canBeBigInt()","? Type::createBigInt()",": Type::createNoType();",""],"label":1}
{"cve":"CVE-2021-41227","code_chunks":["","string two_file, three_file;","TF_ASSERT_OK(CreateTempFileFloat(env, 2.0f, 1000, &two_file));","TF_ASSERT_OK(CreateTempFileFloat(env, 3.0f, 1000, &three_file));","auto node1 = ops::ImmutableConst(root, DT_FLOAT, kFileTensorShape, two_file);","auto node2 ="],"label":0}
{"cve":"CVE-2022-31624","code_chunks":["#endif","flogger_mutex_init(key_LOCK_operations, &lock_operations, MY_MUTEX_INIT_FAST);","flogger_mutex_init(key_LOCK_operations, &lock_atomic, MY_MUTEX_INIT_FAST);","flogger_mutex_init(key_LOCK_operations, &lock_bigbuffer, MY_MUTEX_INIT_FAST);","","coll_init(&incl_user_coll);","coll_init(&excl_user_coll);"],"label":1}
{"cve":"CVE-2016-9393","code_chunks":["siz->comps = 0;","","\/* Eliminate compiler warning about unused variables. *\/","cstate = 0;","","if (jpc_getuint16(in, &siz->caps) ||"],"label":0}
{"cve":"CVE-2016-1000004","code_chunks":["static Variant HHVM_FUNCTION(simplexml_import_dom,","const Object& node,","const String& class_name \/* = \"SimpleXMLElement\" *\/) {","auto domnode = Native::data<DOMNode>(node);","xmlNodePtr nodep = domnode->nodep();",""],"label":1}
{"cve":"CVE-2022-23608","code_chunks":["PJ_ASSERT_RETURN(dlg->dlg_set, PJ_EINVALIDOP);","","\/* Lock user agent. *\/","pj_mutex_lock(mod_ua.mutex);","","\/* Find this dialog from the dialog set. *\/"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["cell_state_quantized->type = input_to_output_weights->type;","cell_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(cell_state_quantized->dims, cell_state->dims)) {"],"label":1}
{"cve":"CVE-2020-27764","code_chunks":["break;","}","{","result=(MagickRealType) ((size_t) pixel | (size_t) (value+0.5));","break;","}","{"],"label":1}
{"cve":"CVE-2018-11380","code_chunks":["#endif","\t\t}","\t\tif (from == to) {","\t\t\tcontinue;","\t\t}","#define OLD 1","#if OLD"],"label":0}
{"cve":"CVE-2019-13300","code_chunks":["{","if (p->number_channels > q->number_channels)","q=p;","if (p->columns > columns)","columns=p->columns;","if (p->rows > rows)"],"label":1}
{"cve":"CVE-2021-3331","code_chunks":["ClearAliases = Storage->ReadBool(L\"ClearAliases\", ClearAliases);","UnsetNationalVars = Storage->ReadBool(L\"UnsetNationalVars\", UnsetNationalVars);","ListingCommand = Storage->ReadString(L\"ListingCommand\",","Storage->ReadBool(L\"AliasGroupList\", false) ? UnicodeString(L\"ls -gla\") : ListingCommand);","IgnoreLsWarnings = Storage->ReadBool(L\"IgnoreLsWarnings\", IgnoreLsWarnings);","SCPLsFullTime = TAutoSwitch(Storage->ReadInteger(L\"SCPLsFullTime\", SCPLsFullTime));"],"label":1}
{"cve":"CVE-2016-10167","code_chunks":["}","} else {","int ch;","if (!gdGetByte (&ch, in)) {","\/*printf(\"EOF while reading\\n\"); *\/","\/*gdImageDestroy(im); *\/"],"label":1}
{"cve":"CVE-2023-24808","code_chunks":["","*bufptr = '\\0';","","PDFIO_DEBUG(\"_pdfioTokenRead: Read '%s'.\\n\", buffer);","","return (bufptr > buffer);","}"],"label":1}
{"cve":"CVE-2019-20840","code_chunks":["        errno = ECONNRESET;","        *sockRet = -1;","        return WS_HYBI_STATE_FRAME_COMPLETE;","      } else {","        ws_dbg(\"got close cmd; waiting for %d more bytes to arrive\\n\", hybiRemaining(wsctx));","        *sockRet = -1;","        errno = EAGAIN;"],"label":0}
{"cve":"CVE-2018-8798","code_chunks":["if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)","return False;","","token->end = token->p = token->data;","out_uint8p(token, s->p, length);","s_mark_end(token);","}"],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["  int uid;","  if (user.isString()) {","    String suser = user.toString();","    auto buf = PasswdBuffer{};","    struct passwd *pw;","    if (getpwnam_r(suser.data(), &buf.ent, buf.data.get(), buf.size, &pw)) {","            return false;"],"label":0}
{"cve":"CVE-2022-37032","code_chunks":["opt_type = 0;","opt_length = 0;","end = pnt + length;","error = error_data;","","if (BGP_DEBUG (normal, NORMAL))"],"label":1}
{"cve":"CVE-2023-26485","code_chunks":["}","LIT(\"{\");","} else {","LIT(\"}\");","BLANKLINE();","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (PyErr_WarnExplicitObject(PyExc_SyntaxWarning, msg,","c->c_filename, LINENO(n),","NULL, NULL) < 0)","{","if (PyErr_ExceptionMatches(PyExc_SyntaxWarning)) {","\/* Replace the SyntaxWarning exception with a SyntaxError"],"label":0}
{"cve":"CVE-2018-14358","code_chunks":["s += 11;","SKIPWS(s);","ptmp = tmp;","while (isdigit((unsigned char) *s))","*ptmp++ = *s++;","*ptmp = '\\0';","if (mutt_str_atol(tmp, &h->content_length) < 0)"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["reinterpret_cast<TfLiteResizeBilinearParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2023-6546","code_chunks":["{","int i;","struct gsm_dlci *dlci;","struct gsm_msg *txq, *ntxq;","","gsm->dead = true;"],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["\t}","\tFORC3 img[c] = CLIP((int) out[c]);","      }","      else if (document_mode)","\timg[0] = img[fcol(row,col)];","      FORCC histogram[c][img[c] >> 3]++;","    }"],"label":0}
{"cve":"CVE-2019-20807","code_chunks":["\tfor (i = 1; i < ga.ga_len; ++i)","\t{","\t    p1 = ((char_u **)ga.ga_data)[i - 1];","\t    p2 = ((char_u **)ga.ga_data)[i];","\t    while (*p1 == *p2)","\t    {","\t\tif (*p2 == '\\t')"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["}","","const int kShapeTensor = 1;","const auto* shape = GetInput(context, node, kShapeTensor);","if (shape->allocation_type != kTfLiteMmapRo) {","TF_LITE_KERNEL_LOG(context, \"Reshape has non-const shape.\");","return false;"],"label":1}
{"cve":"CVE-2022-37434","code_chunks":["state->head->extra != Z_NULL) {","len = state->head->extra_len - state->length;","zmemcpy(state->head->extra + len, next,","len + copy > state->head->extra_max ?","state->head->extra_max - len : copy);"],"label":1}
{"cve":"PYSEC-2019-209","code_chunks":["Tensor* output = nullptr;","OP_REQUIRES_OK(context, context->allocate_output(0, output_shape, &output));","auto output_flat = output->flat_outer_dims<T>();","auto data_ptr = data.template flat<T>().data();"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["input->type == kTfLiteInt8 || input->type == kTfLiteInt16);","    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);","    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);","    TF_LITE_ENSURE_EQ(","        context, num_channels,","        filter->dims->data[affine_quantization->quantized_dimension]);","  }"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["output_state_sf->type = kTfLiteFloat32;","output_state_sf->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(output_state_sf->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"CVE-2019-14857","code_chunks":["\t\t\t *\/","\t\t\treturn oidc_authenticate_user(r, c, provider,","\t\t\t\t\tapr_psprintf(r->pool, \"%s?session=iframe_rp\",","\t\t\t\t\t\t\toidc_get_redirect_uri_iss(r, c, provider)), NULL,","\t\t\t\t\t\t\tid_token_hint, \"none\",","\t\t\t\t\t\t\toidc_dir_cfg_path_auth_request_params(r),","\t\t\t\t\t\t\toidc_dir_cfg_path_scope(r));"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","const float* input_ptr = GetTensorData<float>(input);","TfLiteTensor* quantized_input_tensor;","TF_LITE_ENSURE_OK(context,","GetTemporarySafe(context, node, data->input_quantized_index,","&quantized_input_tensor));"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["\/*","* This callback is called by SRTP transport when incoming rtp is received.","* Originally this is send_rtp() op.","*\/","static pj_status_t dtls_on_recv_rtp( pjmedia_transport *tp,","const void *pkt,"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetTemporarySafe(context, node, kFftDoubleWorkingAreaTensor,","                                     &fft_double_working_area));","  TfLiteIntArray* fft_double_working_area_shape = TfLiteIntArrayCreate(1);","  fft_double_working_area_shape->data[0] =","      half_fft_working_length + fft_width \/ 4;","  TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, fft_double_working_area,"],"label":0}
{"cve":"CVE-2018-13006","code_chunks":["\tif (!a) return GF_BAD_PARAM;","\tgf_isom_box_dump_start(a, \"ItemPropertyAssociationBox\", trace);","\tfprintf(trace, \"entry_count=\\\"%d\\\">\\n\", entry_count);","\tfor (i = 0; i < entry_count; i++) {","\t\tGF_ItemPropertyAssociationEntry *entry = (GF_ItemPropertyAssociationEntry *)gf_list_get(ptr->entries, i);","\t\tu32 association_count = gf_list_count(entry->essential);","\t\tfprintf(trace, \"<AssociationEntry item_ID=\\\"%d\\\" association_count=\\\"%d\\\">\\n\", entry->item_id, association_count);"],"label":0}
{"cve":"PYSEC-2021-507","code_chunks":["","#define REGISTER_CPU_MAX_POOL_KERNELS(T) REGISTER_MAX_POOL_KERNELS(CPU, T);","TF_CALL_REAL_NUMBER_TYPES(REGISTER_CPU_MAX_POOL_KERNELS);","#undef REGISTER_CPU_KERNELS","","#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM",""],"label":0}
{"cve":"CVE-2018-5816","code_chunks":["#endif","switch (tiff_bps = i*8 \/ (width * height)) {","case  8: load_raw = &CLASS eight_bit_load_raw;  break;","case 10: load_raw = &CLASS nokia_load_raw;","}","raw_height = height + (top_margin = i \/ (width * tiff_bps\/8) - height);","mask[0][3] = 1;"],"label":1}
{"cve":"CVE-2020-24370","code_chunks":["int nextra = ci->u.l.nextraargs;","if (n <= nextra) {","*pos = ci->func - nextra + (n - 1);","return \"(vararg)\";  \/* generic name for any vararg *\/","}","}"],"label":1}
{"cve":"CVE-2018-15858","code_chunks":["    \/*","     * Do some sanity checking on the aliases. We can't do it before","     * because keys and their aliases may be added out-of-order.","     *\/","    num_key_aliases = 0;","    darray_foreach(alias, info->aliases) {","        \/* Check that ->real is a key. *\/"],"label":0}
{"cve":"CVE-2019-11413","code_chunks":["\t\tjs_call(J, 3);","\t\tr = js_tostring(J, -1);","\t\tjs_putm(J, &sb, source, s);","\t\tjs_puts(J, &sb, r);","\t\tjs_puts(J, &sb, s + n);","\t\tjs_putc(J, &sb, 0);","\t\tjs_pop(J, 1);"],"label":0}
{"cve":"CVE-2023-39976","code_chunks":["\tchunk += sizeof(uint32_t);","","\t\/* log message *\/","\tmsg_len = qb_vsnprintf_serialize(chunk, t->max_line_length, cs->format, ap);","\tif (msg_len >= t->max_line_length) {","\t    chunk = msg_len_pt + sizeof(uint32_t); \/* Reset *\/",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ASSERT_EQ(aux_input->dims->data[1], input->dims->data[1]);","}","","TfLiteTensor* fw_output = GetOutput(context, node, kFwOutputTensor);","TfLiteTensor* fw_activation_state =","GetVariableInput(context, node, kFwInputActivationStateTensor);","TF_LITE_ENSURE(context, fw_activation_state != nullptr);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["    case kTfLiteInt32: {","      UnpackImpl<int32_t>(context, node, input, data->num, data->axis);","      break;","    }","    case kTfLiteUInt8: {","      UnpackImpl<uint8_t>(context, node, input, data->num, data->axis);","      break;"],"label":0}
{"cve":"CVE-2020-26247","code_chunks":["VALUE rb_schema;","","Data_Get_Struct(document, xmlDoc, doc);","","\/* In case someone passes us a node. ugh. *\/"],"label":1}
{"cve":"CVE-2022-1587","code_chunks":["memset(common->private_data_ptrs, 0, total_length * sizeof(sljit_s32));","","private_data_size = common->cbra_ptr + (re->top_bracket + 1) * sizeof(sljit_sw);","","if ((re->overall_options & PCRE2_ANCHORED) == 0 && (re->overall_options & PCRE2_NO_START_OPTIMIZE) == 0 && !common->has_skip_in_assert_back)","  detect_early_fail(common, common->start, &private_data_size, 0, 0, TRUE);",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\tfor (i = 0; i < 3; i++) {","\t\t\t\tbn_free(v1[i]);","\t\t\t\tbn_free(v2[i]);","\t\t\t}","\t\t}","\t}","}"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["static void ssl_destroy(dtls_srtp *ds, unsigned idx)","{","DTLS_LOCK(ds);","","\/* Destroy SSL instance *\/","if (ds->ossl_ssl[idx]) {"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["body = _Ta3_asdl_seq_new(len, arena);","if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;"],"label":1}
{"cve":"CVE-2022-39347","code_chunks":["","path = (const WCHAR*)Stream_Pointer(irp->input);","FileId = irp->devman->id_sequence++;","file = drive_file_new(drive->path, path, PathLength, FileId, DesiredAccess, CreateDisposition,","CreateOptions, FileAttributes, SharedAccess);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void bn_read_raw(bn_t a, const dig_t *raw, int len);"],"label":1}
{"cve":"CVE-2022-1619","code_chunks":["    --allow_keys;","","        msg_didout = FALSE;","    msg_col = 0;","    if (msg_row < Rows - 1)","\t++msg_row;","    emsg_on_display = FALSE;\t\t"],"label":0}
{"cve":"CVE-2023-4322","code_chunks":["}","r_strbuf_set (&op->esil, \"1,pc,-,brk,=[4],4,brk,+=\");","#if 1","if (len > 1) {","const ut8 *p = buf + 1;","int lev = 0, i = 1;","len--;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["tmp = _PyObject_GetAttrId(obj, &PyId_names);","if (tmp == NULL) goto failed;","if (!PyList_Check(tmp)) {","PyErr_Format(PyExc_TypeError, \"Global field \\\"names\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","goto failed;"],"label":1}
{"cve":"CVE-2018-20177","code_chunks":["","RD_BOOL","cssp_connect(char *server, char *user, char *domain, char *password, STREAM s)","{","\tUNUSED(s);","\tOM_uint32 actual_time;","\tgss_cred_id_t cred;"],"label":0}
{"cve":"CVE-2023-23759","code_chunks":[": earlyDataType;","","SecretAvailable handshakeReadSecretAvailable(","std::move(handshakeReadSecret));","SecretAvailable handshakeWriteSecretAvailable(","std::move(handshakeWriteSecret));"],"label":1}
{"cve":"CVE-2023-42465","code_chunks":["matched = !strcmp(pw_epasswd, epass);","}","","explicit_bzero(des_pass, sizeof(des_pass));","","debug_return_int(matched ? AUTH_SUCCESS : AUTH_FAILURE);"],"label":1}
{"cve":"CVE-2019-20807","code_chunks":["{","if (restricted)","{","emsg(_(\"E145: Shell commands and some functionality not allowed in rvim\"));","return TRUE;","}","return FALSE;"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["}","","int is_utf8(const char *text)","{","while (*text) {","if (*text == '\\n' || *text == '\\t' || *text == '\\r') {"],"label":0}
{"cve":"CVE-2017-12663","code_chunks":["*q++=(unsigned char) (ScaleQuantumToShort(image->colormap[i].red) >> 8);","*q++=(unsigned char) (ScaleQuantumToShort(image->colormap[i].red) & 0xff);","*q++=(unsigned char) (ScaleQuantumToShort(image->colormap[i].green) >> 8);","*q++=(unsigned char) (ScaleQuantumToShort(image->colormap[i].green) & 0xff);;"],"label":1}
{"cve":"CVE-2020-23931","code_chunks":["tmp_strsize=(u32)ptr->size-8;","while (tmp_strsize) {","tmp_str[j] = gf_bs_read_u8(bs);","tmp_strsize--;"],"label":1}
{"cve":"CVE-2016-6873","code_chunks":["Array ret = Array::attach(PackedArray::MakeReserve(args.size() + 1));","VarEnv* v = g_context->getOrCreateVarEnv();","if (v) {","compact(v, ret, varname);"],"label":1}
{"cve":"CVE-2018-13301","code_chunks":["} else if (startcode == VOS_STARTCODE) {","mpeg4_decode_profile_level(s, gb);","if (s->avctx->profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO &&","(s->avctx->level > 0 && s->avctx->level < 9)) {","s->studio_profile = 1;","next_start_code_studio(gb);"],"label":1}
{"cve":"PYSEC-2021-451","code_chunks":["    SparseTensorsMap* map;","","    OP_REQUIRES_OK(context, context->input(\"sparse_indices\", &input_indices));","    OP_REQUIRES_OK(context, context->input(\"sparse_values\", &input_values));","    OP_REQUIRES_OK(context, context->input(\"sparse_shape\", &input_shape));","    OP_REQUIRES_OK(context, GetMap(context, true \/* is_writing *\/, &map));",""],"label":0}
{"cve":"CVE-2020-1917","code_chunks":["sa->sun_family = AF_UNIX;","if (addr.length() > sizeof(sa->sun_path)) {","raise_warning(","\"Unix socket path length (%d) is larger than system limit (%lu)\",","addr.length(),","sizeof(sa->sun_path)",");"],"label":1}
{"cve":"PYSEC-2021-613","code_chunks":["\"checkpoint\");","if (!status_.ok()) return;","for (const SavedSliceMeta& ssm : sts.meta().tensor()) {","TensorShape ssm_shape(ssm.shape());","for (const TensorSliceProto& tsp : ssm.slice()) {","TensorSlice ss_slice(tsp);","status_ = RegisterTensorSlice(ssm.name(), ssm_shape, ssm.type(), fname,"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","  if (!has_dynamic_output_tensors) {","    for (int i = 0; i < num_outputs; ++i) {","      TfLiteTensor* then_output =","          then_subgraph->tensor(then_subgraph->outputs()[i]);","      TfLiteTensor* else_output =","          else_subgraph->tensor(else_subgraph->outputs()[i]);"],"label":0}
{"cve":"CVE-2022-0849","code_chunks":["\t\t\t\tut64 dst = ESIL->cur;","\t\t\t\tif (!op.src[0] || !op.src[0]->reg || !op.src[0]->reg->name) {","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t\tif (!strcmp (op.src[0]->reg->name, \"sp\")) {","\t\t\t\t\tbreak;","\t\t\t\t}"],"label":0}
{"cve":"CVE-2018-16300","code_chunks":["                                       bgp_vpn_rd_print(ndo, tptr),","                                       isonsap_string(ndo, tptr+BGP_VPN_RD_LEN,tlen-BGP_VPN_RD_LEN)));","                                \/* rfc986 mapped IPv4 address ? *\/","                                if (tlen == BGP_VPN_RD_LEN + 4 + sizeof(struct in_addr)","                                    && EXTRACT_32BITS(tptr+BGP_VPN_RD_LEN) ==  0x47000601)","                                    ND_PRINT((ndo, \" = %s\", ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN+4)));","                                \/* rfc1888 mapped IPv6 address ? *\/"],"label":0}
{"cve":"CVE-2016-10010","code_chunks":["\trtype = packet_get_string(NULL);","\treply = packet_get_char();","","\tdebug(\"server_input_channel_req: channel %d request %s reply %d\",","\t    id, rtype, reply);","","\tif ((c = channel_lookup(id)) == NULL)"],"label":0}
{"cve":"CVE-2016-0775","code_chunks":["ImagingFliDecode(Imaging im, ImagingCodecState state, UINT8* buf, int bytes)","{","    UINT8* ptr;","    int framesize;","    int c, chunks;","    int l, lines;","    int i, j, x = 0, y, ymax;"],"label":0}
{"cve":"PYSEC-2022-139","code_chunks":["int size = DataTypeSize(BaseType(tensor.dtype()));","VLOG(2) << \"Count: \" << count << \" DataTypeSize: \" << size;","int64_t tensor_size = MultiplyWithoutOverflow(count, size);","if (tensor_size < 0) {","VLOG(1) << \"Overflow encountered when computing tensor size, multiplying \"","<< count << \" with \" << size;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["      break;","    }","  }","","  if (has_dynamic_output_tensors) {","    for (int i = 0; i < node->outputs->size; ++i) {","      TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2021-38199","code_chunks":["if (error < 0)","goto error;","error = rpc_ntop(sap, buf, sizeof(buf));","if (error < 0)","goto error;","ip_addr = (const char *)buf;"],"label":1}
{"cve":"PYSEC-2021-608","code_chunks":["    OP_REQUIRES(context, input.dims() == multiples.NumElements(),","                errors::InvalidArgument(","                    \"Expected multiples argument to be a vector of length \",","                    input.dims(), \" but got length \", multiples.dim_size(0)));","    const int input_dims = input.dims();","","        if (input_dims == 0) {"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  OpContext op_context(context, node);","","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), op_context.params->num_splits);","","  auto input_type = op_context.input->type;","  TF_LITE_ENSURE(context,","                 input_type == kTfLiteFloat32 || input_type == kTfLiteUInt8 ||"],"label":0}
{"cve":"CVE-2017-11368","code_chunks":["        return;","    if (client != NULL && (client->attributes & KRB5_KDB_DISALLOW_RENEWABLE))","        return;","    if (tgt != NULL && !(tgt->flags & TKT_FLG_RENEWABLE))","        return;","","    \/* Determine the requested renewable time. *\/"],"label":0}
{"cve":"CVE-2016-6871","code_chunks":["static String HHVM_FUNCTION(bcpow, const String& left, const String& right,","int64_t scale \/* = -1 *\/) {","if (scale < 0) scale = BCG(bc_precision);","bc_num first, second, result;","bc_init_num(&first);","bc_init_num(&second);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","","switch (input->type) {        return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);","return EvalImpl<kernel_type, kTfLiteUInt8>(context, node);"],"label":1}
{"cve":"CVE-2016-9388","code_chunks":["z |= v & RAS_ONES(hdr->depth);","nz += hdr->depth;","while (nz >= 8) {","c = (z >> (nz - 8)) & 0xff;","if (jas_stream_putc(out, c) == EOF) {","return -1;"],"label":1}
{"cve":"CVE-2022-35977","code_chunks":["static int checkStringLength(client *c, long long size) {","if (!mustObeyClient(c) && size > server.proto_max_bulk_len) {","addReplyError(c,\"string exceeds maximum allowed size (proto-max-bulk-len)\");","return C_ERR;","}"],"label":1}
{"cve":"CVE-2018-12247","code_chunks":["        method_entry_loop(mrb, klass, set);","        klass = klass->super;","      }","  }","","  ary = mrb_ary_new(mrb);","  for (i=0;i<kh_end(set);i++) {"],"label":0}
{"cve":"CVE-2018-12562","code_chunks":["void RemoteFsDevice::renamed(const QString &oldName, const QString &newName)","{","Configuration cfg;","QStringList names=cfg.get(constCfgKey, QStringList());","if (names.contains(oldName)) {","names.removeAll(oldName);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\t\tif (n > 0) {","\t\t\teb_copy(r, t[n \/ 2]);","\t\t}","","\t\tfor (i = l - 2; i >= 0; i--) {","\t\t\teb_dbl(r, r);",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","const TfLiteTensor* input_weights;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","const TfLiteTensor* recurrent_weights;","TF_LITE_ENSURE_OK("],"label":0}
{"cve":"CVE-2022-1237","code_chunks":["\tint index = -1;","\tr_list_foreach (segments, it, seg) {","\t\tindex++;","\t\tif (!(bin->segment_entries[index].flags & RELOCINFO)) {","\t\t\tcontinue;","\t\t}","\t\tut32 off, start = off = seg->paddr + seg->size;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["node->temporaries->data[2] = data->scratch_tensor_index + 2;","TfLiteTensor* accum_scratch;","TF_LITE_ENSURE_OK(","context, GetTemporarySafe(context, node, \/*index=*\/2, &accum_scratch));","accum_scratch->type = kTfLiteInt32;","accum_scratch->allocation_type = kTfLiteArenaRw;"],"label":0}
{"cve":"CVE-2022-1451","code_chunks":["int pending = len - offset;","const ut8 *a_buf = offset + buf;","attr_buf = (ut8 *) calloc (pending + 1, 1);","if (!attr_buf) {","eprintf (\"Unable to allocate enough bytes (0x%04\"PFMT64x","\") to read in the attribute.\\n\", sz);"],"label":1}
{"cve":"CVE-2020-1712","code_chunks":["sd_bus_error *error) {","","#if ENABLE_POLKIT","_cleanup_(sd_bus_message_unrefp) sd_bus_message *pk = NULL;","AsyncPolkitQuery *q;"],"label":1}
{"cve":"CVE-2021-23521","code_chunks":["                                                   { \"C:\/b\",                 false },","#else","                                                   { \"\/b\",                   false },","#endif","                                                   { \"c\/d\",                  true  },","                                                   { \"..\/e\/f\",               false },","                                                   { \"..\/..\/g\/h\",            false },"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","const TfLiteTensor* input_gate_bias =","GetOptionalInputTensor(context, node, lstm::full::kInputGateBiasTensor);","const TfLiteTensor* forget_gate_bias =","GetInput(context, node, lstm::full::kForgetGateBiasTensor);"],"label":1}
{"cve":"CVE-2022-1115","code_chunks":["number_pixels=(MagickSizeType) columns*rows;","if (HeapOverflowSanityCheck(rows,sizeof(*tile_pixels)) != MagickFalse)","ThrowTIFFException(ResourceLimitError,\"MemoryAllocationFailed\");","extent=MagickMax(rows*TIFFTileRowSize(tiff),TIFFTileSize(tiff));","#if defined(TIFF_VERSION_BIG)","extent+=image->columns*sizeof(uint64);","#else"],"label":1}
{"cve":"CVE-2020-11939","code_chunks":["  if (len > UINT32_MAX - offset)","    goto invalid_payload;","  offset += len;","","  \/* ssh.compression_algorithms_client_to_server [C] *\/","  if(offset+sizeof(u_int32_t) >= packet->payload_packet_len)","    goto invalid_payload;"],"label":0}
{"cve":"CVE-2021-29579","code_chunks":["for (int index = out_start; index < out_end; ++index) {","int input_backprop_index = out_arg_max_flat(index);","FastBoundsCheck(input_backprop_index - in_start, in_end - in_start);","input_backprop_flat(input_backprop_index) += out_backprop_flat(index);","}","}","};"],"label":1}
{"cve":"CVE-2022-24949","code_chunks":["FATAL_FAIL(sockFd);","initSocket(sockFd);","remote.sun_family = AF_UNIX;","strcpy(remote.sun_path, pipePath.c_str());","","VLOG(3) << \"Connecting to \" << endpoint << \" with fd \" << sockFd;","int result ="],"label":1}
{"cve":"CVE-2018-20406","code_chunks":["    0,                                  \/*tp_as_mapping*\/","    0,                                  \/*tp_hash*\/","    0,                                  \/*tp_call*\/","    0,                                  \/*tp_str*\/","    0,                                  \/*tp_getattro*\/","    0,                                  \/*tp_setattro*\/","    0,                                  \/*tp_as_buffer*\/"],"label":0}
{"cve":"CVE-2021-35939","code_chunks":["mode_t mode = fp->sb.st_mode;","mode &= ~07777;","mode |=  00700;","rc = fsmMkdir(fp->fpath, mode);","}","} else if (S_ISLNK(fp->sb.st_mode)) {","if (rc == RPMERR_ENOENT) {"],"label":1}
{"cve":"CVE-2017-1000494","code_chunks":["data->portListingLength = 0;","\/* init xmlparser object *\/","parser.xmlstart = buffer;","parser.xmlsize = bufsize;"],"label":1}
{"cve":"CVE-2020-1921","code_chunks":["  assertx(m_len != -1);","  assertx(length > 0);","  assertx(m_cursor >= 0);","  int64_t remaining = m_len - m_cursor;","  if (remaining < length) length = remaining;","  if (length > 0) {","    memcpy(buffer, (const void *)(m_data + m_cursor), length);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2022-1795","code_chunks":["codec->scenegraph->global_qp = NULL;","","if (gf_node_get_tag(node) != TAG_MPEG4_QuantizationParameter) {","gf_node_unregister(node, NULL);","return GF_NON_COMPLIANT_BITSTREAM;","}",""],"label":1}
{"cve":"CVE-2021-42780","code_chunks":["\tinsert_key(p15card, \"DF084E01\", 0x4B, 0x81, 2048, 1, \"IDKey7\");","\tinsert_key(p15card, \"DF084E02\", 0x4C, 0x82, 2048, 1, \"IDKey8\");","\tinsert_key(p15card, \"DF084E03\", 0x4D, 0x83, 2048, 1, \"IDKey9\");","","\tinsert_pin(p15card, \"5000\", 1, 2, 0x00, 6, \"PIN\",","\t\tSC_PKCS15_PIN_FLAG_CASE_SENSITIVE | SC_PKCS15_PIN_FLAG_INITIALIZED","\t);"],"label":0}
{"cve":"CVE-2022-40299","code_chunks":["      pi->data.s.body=(char *)omAlloc((int)len+1);","      myfread( pi->data.s.body, len, 1, fp);","      pi->data.s.body[len]='\\0';","      fclose(fp);","    }","  }","  si_unlink(filename);"],"label":0}
{"cve":"CVE-2017-7863","code_chunks":["}","} else if (s->color_type == PNG_COLOR_TYPE_GRAY || s->color_type == PNG_COLOR_TYPE_RGB) {","if ((s->color_type == PNG_COLOR_TYPE_GRAY && length != 2) ||","(s->color_type == PNG_COLOR_TYPE_RGB && length != 6))","return AVERROR_INVALIDDATA;","","for (i = 0; i < length \/ 2; i++) {"],"label":1}
{"cve":"CVE-2017-12595","code_chunks":["object = QPDFObjectHandle::newOperator(value);","}","else if ((value == \"R\") && (in_array || in_dictionary) &&","(olist.size() >= 2) &&","(! olist.at(olist.size() - 1).isIndirect()) &&","(olist.at(olist.size() - 1).isInteger()) &&"],"label":1}
{"cve":"CVE-2018-14882","code_chunks":["ND_TCHECK2(*daoack, ND_RPL_DAOACK_MIN_LEN);","if (length < ND_RPL_DAOACK_MIN_LEN)","goto tooshort;","","bp += ND_RPL_DAOACK_MIN_LEN;","length -= ND_RPL_DAOACK_MIN_LEN;"],"label":1}
{"cve":"CVE-2016-2315","code_chunks":["{","struct bitmap *base = data;","int bitmap_pos;","","bitmap_pos = bitmap_position(object->oid.hash);",""],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["  TF_LITE_ENSURE_OK(","      context,","      GetInputSafe(context, node, kRecurrentWeightsTensor, &recurrent_weights));","  const TfLiteTensor* bias;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kBiasTensor, &bias));","  const TfLiteTensor* hidden_state;","  TF_LITE_ENSURE_OK("],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_OK(","context, GetOutputSafe(context, node, kOutputValues, &output_values));","TfLiteTensor* output_indexes;","TF_LITE_ENSURE_OK(","context, GetOutputSafe(context, node, kOutputIndexes, &output_indexes));","if (IsDynamicTensor(output_values)) {"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["        }","        if (tmp == NULL || tmp == Py_None) {","            Py_CLEAR(tmp);","            upper = NULL;","        }","        else {","            int res;"],"label":0}
{"cve":"CVE-2018-20181","code_chunks":["\t   logger(Protocol, Error, \"mcs_recv_connect_response(), expected length=%d, got %d\",length, mcs_data->size);","\t   length = mcs_data->size;","\t   }","","\t   in_uint8a(s, mcs_data->data, length);","\t   mcs_data->p = mcs_data->data;","\t   mcs_data->end = mcs_data->data + length;"],"label":0}
{"cve":"CVE-2017-6448","code_chunks":["\t\t\t\t}","\t\t\t} else {","\t\t\t\tflag_str = R_ASM_GET_NAME (a, 'm', vB);","\t\t\t\tif (flag_str) {","\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);","\t\t\t\t}","\t\t\t\telse {"],"label":0}
{"cve":"PYSEC-2022-75","code_chunks":["GetUnknownOutputShape(node, output_port);","InferenceContext* ctx = GetContext(node);","if (ctx == nullptr) {","return errors::InvalidArgument(\"Missing context\");","}","ctx->set_output(output_port, shape);","return Status::OK();"],"label":1}
{"cve":"CVE-2022-24754","code_chunks":["* We respond with selecting \"qop=auth\" protection.","*\/","cred->qop = pjsip_AUTH_STR;","cred->nc.ptr = (char*) pj_pool_alloc(pool, 16);","cred->nc.slen = pj_ansi_snprintf(cred->nc.ptr, 16, \"%08u\", nc);",""],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","const TfLiteTensor* input_gate_bias =","GetOptionalInputTensor(context, node, kInputGateBiasTensor);","const TfLiteTensor* forget_gate_bias =","GetInput(context, node, kForgetGateBiasTensor);"],"label":1}
{"cve":"PYSEC-2020-217","code_chunks":["(*filename != '.' ||","(strcmp(filename, \".\") != 0 &&","strcmp(filename, \"..\") != 0 &&","strcmp(filename, DOT_GIT) != 0));","}","","static int entry_sort_cmp(const void *a, const void *b)"],"label":1}
{"cve":"CVE-2018-8792","code_chunks":["x = CVAL(in);","if (x & 1)","{","x = x >> 1;","x = x + 1;","color = -x;"],"label":1}
{"cve":"CVE-2017-11399","code_chunks":["        } else {","            if ((ret = init_get_bits8(&s->gb, s->ptr, s->data_end - s->ptr)) < 0)","                return ret;","            if (s->fileversion > 3800)","                skip_bits_long(&s->gb, offset * 8);","            else","                skip_bits_long(&s->gb, offset);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["#endif","\t\tbn_mod(a, a, b);","\t\tBENCH_ADD(bn_mxp(c, a, b, b));","\t}","\tBENCH_END;","","#if BN_MXP == BASIC || !defined(STRIP)"],"label":0}
{"cve":"CVE-2019-19324","code_chunks":["goto err_match;","}","","ret = CRYPTO_memcmp(","( unsigned char* )signed_out, ( unsigned char* )signed_dec, out_size );","free( signed_dec );"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,255);","else","gamma_curve(1.0\/imgdata.params.coolscan_nef_gamma,0.,1,65535);","fseek (ifp, data_offset, SEEK_SET);"],"label":1}
{"cve":"CVE-2023-1801","code_chunks":["\t\tND_TCHECK_8(buf);","\t\tt = interpret_long_date(ndo, buf);","\t\tbuf += 8;","\t\tbreak;","\t\tt = 0;","\t\tbreak;","\t    }"],"label":0}
{"cve":"CVE-2019-11413","code_chunks":["","\t\t\/* empty string at end of last match *\/","\t\tif (b == p) {","\t\t\t++a;","\t\t\tcontinue;","\t\t}",""],"label":0}
{"cve":"CVE-2023-30188","code_chunks":["CheckFileDir();"],"label":1}
{"cve":"CVE-2022-40299","code_chunks":["{","char * filename = omStrDup(\"\/tmp\/sdXXXXXX\");","int f=mkstemp(filename);","if (f==-1)","{","Print(\"cannot open %s\\n\",filename);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, 0);","const TfLiteTensor* alpha = GetInput(context, node, 1);","TfLiteTensor* output = GetOutput(context, node, 0);","const PreluOpData* data = reinterpret_cast<PreluOpData*>(node->user_data);","switch (input->type) {","case kTfLiteFloat32: {"],"label":1}
{"cve":"CVE-2019-13300","code_chunks":["  size_t","    columns,","    number_threads;","","  number_threads=(size_t) GetMagickResourceLimit(ThreadResource);","  pixels=(MagickPixelPacket **) AcquireQuantumMemory(number_threads,","    sizeof(*pixels));"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["#if CUDNN_VERSION < 8000","      if (algo_id_ == CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM &&","          ToCudnnDataType(input_type_) == CUDNN_DATA_INT8 &&","          ToCudnnDataType(output_type_) == CUDNN_DATA_FLOAT) {","        return tsl::Status(","            tsl::error::FAILED_PRECONDITION,","            \"This configuration potentially produces incorrect results.\");"],"label":0}
{"cve":"CVE-2019-6978","code_chunks":["gdIOCtx *out = gdNewDynamicCtx(2048, NULL);","if (out == NULL) return NULL;","if (!_gdImageJpegCtx(im, out, quality)) {","rv = gdDPExtractData(out, size);","} else {","rv = NULL;"],"label":0}
{"cve":"CVE-2022-1908","code_chunks":["                length -= attr_length - 1;","                continue;","            }","            \/* previous character should be white space or opening tag *\/","            if (offset > 0) {","                if (data[-1] != '<' && !isspace(data[-1])) {","                    data += attr_length;"],"label":0}
{"cve":"CVE-2017-9990","code_chunks":["int64_t size;","uint32_t *dst;","","avctx->pix_fmt = AV_PIX_FMT_BGRA;","","av_fast_padded_malloc(&x->buf, &x->buf_size, avpkt->size);"],"label":0}
{"cve":"CVE-2019-12904","code_chunks":["size_t i;","","for (i = 0; i < len; i += 8 * 32)","{","(void)tab[i + 0 * 32];","(void)tab[i + 1 * 32];"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["  if (has_dynamic_output_tensors) {","    for (int i = 0; i < node->outputs->size; ++i) {","      TfLiteTensor* output;","      TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &output));","      TfLiteTensor* subgraph_output =","          active_branch_subgraph.tensor(active_branch_subgraph.outputs()[i]);","      TfLiteIntArray* output_size = TfLiteIntArrayCopy(subgraph_output->dims);"],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["    (sizeof(cblack)\/sizeof(cblack[0])),","    (sizeof(imgdata.color.dng_levels.dng_cblack)\/sizeof(imgdata.color.dng_levels.dng_cblack[0])));","    for(int i=0; i < ll; i++)","      cblack[i] = imgdata.color.dng_levels.dng_cblack[i];","  }","#endif","  \/* Early reject for damaged images *\/"],"label":0}
{"cve":"CVE-2020-8904","code_chunks":["input_len)) {","asylo::primitives::TrustedPrimitives::BestEffortAbort(","\"ecall_restore: input found to not be in untrusted memory.\");","}","int result = 0;","size_t tmp_output_len;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["Py_CLEAR(tmp);","} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"op\\\" missing from BoolOp\");","return 1;","}","if (_PyObject_HasAttrId(obj, &PyId_values)) {"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["\tep4_norm(t[0], t[0]);","#endif","","#if EP_DEPTH > 2","\tep4_add(t[1], t[0], p);","\tfor (int i = 2; i < (1 << (EP_DEPTH - 2)); i++) {","\t\tep4_add(t[i], t[i - 1], t[0]);"],"label":0}
{"cve":"CVE-2022-0128","code_chunks":["    cmdmod.cmod_flags =\tsave_cmod_flags;","    if (do_estack_push)","\testack_pop();","","    vim_free(line_to_free);","    free_imported(&cctx);","    free_locals(&cctx);"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void md_mgf(uint8_t *key, int key_len, const uint8_t *in,","int in_len) {","uint32_t i, j, d;","uint8_t *buffer = RLC_ALLOCA(uint8_t, in_len + sizeof(uint32_t));","uint8_t *t = RLC_ALLOCA(uint8_t, key_len + RLC_MD_LEN);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["zero_points_size));","}","node->temporaries->data[5] = op_data->scratch_tensor_index + 5;","TfLiteTensor* row_sums = GetTemporary(context, node, \/*index=*\/5);","row_sums->type = kTfLiteInt32;","row_sums->allocation_type = kTfLiteArenaRwPersistent;","int row_sums_dims[2] = {2, num_units};"],"label":1}
{"cve":"CVE-2020-7043","code_chunks":["\t\tif (!privkey) {","\t\t\tlog_error(\"PKCS11 ENGINE_load_private_key: %s\\n\",","\t\t\t          ERR_error_string(ERR_peek_last_error(), NULL));","\t\t\treturn 1;","\t\t}","","\t\tif (!SSL_CTX_use_PrivateKey(tunnel->ssl_context, privkey)) {"],"label":0}
{"cve":"CVE-2021-25939","code_chunks":["_enableFoxxApi(true),","_enableFoxxStore(true),","_hardenedRestApi(false),","_foxxAllowInstallFromRemote(false) {","setOptional(false);","startsAfter<application_features::GreetingsFeaturePhase>();"],"label":0}
{"cve":"CVE-2018-25032","code_chunks":["ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));","ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));","ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));","overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);"],"label":1}
{"cve":"CVE-2021-3889","code_chunks":["    const size_t header_length = mobi_buffer_get32(buf);","    if (strncmp(huff_magic, HUFF_MAGIC, 4) != 0 || header_length < HUFF_HEADER_LEN) {","        debug_print(\"HUFF wrong magic: %s\\n\", huff_magic);","        mobi_buffer_free_null(buf);","        return MOBI_DATA_CORRUPT;","    }","    const size_t data1_offset = mobi_buffer_get32(buf);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["","if (IsDynamicTensor(output)) {","TF_LITE_ENSURE_OK(context,"],"label":1}
{"cve":"PYSEC-2022-140","code_chunks":["          op_context, \"BiasAdd\", output,","          {output, output}),        FusedChildContext(op_context, \"Relu\", output, {output})};","","    if (side_input.shape().dim_size() > 0) {","    component_ops.push_back(FusedChildContext(op_context, \"Mul\", side_input,","                                              {side_input, side_input_scale}));","    component_ops.push_back(FusedChildContext("],"label":0}
{"cve":"CVE-2018-8793","code_chunks":["int i;","uint16 num_updates;","","in_uint16_le(s, num_updates);   \/* rectangles *\/","","for (i = 0; i < num_updates; i++)"],"label":0}
{"cve":"CVE-2019-3560","code_chunks":["if (buf.chainLength() < (cursor - buf.front()) + length) {","return folly::none;","}","length +="],"label":1}
{"cve":"CVE-2018-8792","code_chunks":["\tint code;","\tint collen;","\tint replen;","\tint color;","\tint x;","\tint revcode;","\tuint8 * last_line;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\tfp24_null(t);","","\tRLC_TRY {","\t\tfp24_new(t);","","\t\tif (pack) {","\t\t\tif (len != 16 * RLC_FP_BYTES) {"],"label":0}
{"cve":"CVE-2022-35967","code_chunks":["TEST_F(QuantizedActivationsTest, TestRelu6) {","  TF_ASSERT_OK(NodeDefBuilder(\"quantized_relu6_op\", \"QuantizedRelu6\")","                   .Input(FakeInput(DT_QUINT8))","                   .Input(FakeInput(DT_FLOAT))","                   .Input(FakeInput(DT_FLOAT))","                   .Finalize(node_def()));","  TF_ASSERT_OK(InitOp());"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int fb_get_bit(const fb_t a, int bit);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["","    TfLiteTensor* scratch_buffer;","  TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, kScratchBuffer,","                                              &scratch_buffer));","  scratch_buffer->type = input->type;","  scratch_buffer->allocation_type = kTfLiteArenaRw;",""],"label":0}
{"cve":"CVE-2021-3772","code_chunks":[],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["      context, GetInputSafe(context, node, lstm::full::kOutputGateBiasTensor,","                            &output_gate_bias));","","  const TfLiteTensor* projection_weights = GetOptionalInputTensor(","      context, node, lstm::full::kProjectionWeightsTensor);","  const TfLiteTensor* projection_bias =","      GetOptionalInputTensor(context, node, lstm::full::kProjectionBiasTensor);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","std::vector<StringRef> words;","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));","tflite::StringRef strref = tflite::GetString(input, 0);","int prev_idx = 0;"],"label":0}
{"cve":"CVE-2018-18314","code_chunks":["}","","RExC_parse += UTF ? UTF8SKIP(RExC_parse) : 1;","}","","\/* We output the messages even if warnings are off, because we'll fail"],"label":1}
{"cve":"CVE-2022-37032","code_chunks":["\t  return -1;","\t}","","      \/* Fetch option type and length. *\/","      opt_type = stream_getc (s);","      opt_length = stream_getc (s);","      "],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["if (result != CUDA_SUCCESS &&","result != CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED) {","return tsl::Status(","port::error::INTERNAL,","absl::StrFormat(\"failed to enable peer access from %p to %p: %s\", from,","to, ToString(result)));","}"],"label":1}
{"cve":"CVE-2022-24754","code_chunks":["}","","\/* Decode nonce *\/","nonce_bin.slen = len = PJ_BASE64_TO_BASE256_LEN(chal->nonce.slen);","nonce_bin.ptr = pj_pool_alloc(pool, nonce_bin.slen + 1);","status = pj_base64_decode(&chal->nonce, (pj_uint8_t*)nonce_bin.ptr, &len);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {","return 1;"],"label":1}
{"cve":"CVE-2017-6194","code_chunks":["static int search_old_relocation(struct reloc_struct_t *reloc_table, ut32 addr_to_patch, int n_reloc) {","int i;","for (i = 0; i < n_reloc; i++) {","if (addr_to_patch == reloc_table[i].data_offset) {"],"label":1}
{"cve":"CVE-2018-8798","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);","                goto failed;","            }","            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {"],"label":0}
{"cve":"CVE-2018-19842","code_chunks":["static x86newTokenType getToken(const char *str, size_t *begin, size_t *end) {","while (begin && isspace ((ut8)str[*begin])) {","++(*begin);","}",""],"label":1}
{"cve":"CVE-2022-1908","code_chunks":["result->value[i++] = (char) *data++;","}","\/* self closing tag '\/>' *\/","if (*(data - 1) == '\/' && *data == '>') {","--data; --i;","}","result->end = data;"],"label":1}
{"cve":"CVE-2023-5595","code_chunks":["if (add_chap) {","gf_isom_add_chapter(ctx->file, 0, start_time, p2->value.string_list.vals[j]);","}","if (add_tk) {","GF_TextSample tx;","memset(&tx, 0, sizeof(tx));","tx.text = p2->value.string_list.vals[j];"],"label":1}
{"cve":"CVE-2023-51698","code_chunks":["ComicsDocument *comics_document = COMICS_DOCUMENT (object);","","if (comics_document->decompress_tmp) {","if (comics_remove_dir (comics_document->dir) == -1)","g_warning (_(\"There was an error deleting \u201c%s\u201d.\"),","comics_document->dir);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void fp3_read_bin(fp3_t a, const uint8_t *bin, size_t len) {","\tif (len != 3 * RLC_FP_BYTES) {","\t\tRLC_THROW(ERR_NO_BUFFER);","\t\treturn;","\t}","\tfp_read_bin(a[0], bin, RLC_FP_BYTES);","\tfp_read_bin(a[1], bin + RLC_FP_BYTES, RLC_FP_BYTES);"],"label":0}
{"cve":"CVE-2021-37653","code_chunks":["void AddBatchOffsets(Tensor* indices, const Tensor& params) {","int64_t batch_size = 1;      for (int idx = 0; idx < batch_dims_; ++idx) {","batch_size *= params.dim_size(idx);","}"],"label":1}
{"cve":"CVE-2020-1917","code_chunks":["if (mme.second.m_return_value != fr) all_same = false;","count += mme.second.m_count;","auto ser_len = mme.second.m_return_value.length();","min_ser_len = std::min(min_ser_len, ser_len);","max_ser_len = std::max(max_ser_len, ser_len);","if (mme.second.m_count > 1) any_multiple = true;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputDataTensor, &data));","const TfLiteTensor* segment_ids;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputSegmentIdsTensor,","&segment_ids));","TfLiteTensor* output;"],"label":0}
{"cve":"CVE-2023-29007","code_chunks":["static size_t section_name_match (const char *buf, const char *name)","{","size_t i = 0, j = 0;","int dot = 0;","if (buf[i] != '[')","return 0;","for (i = 1; buf[i] && buf[i] != ']'; i++) {"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["pj_status_t status = PJ_SUCCESS;","","DTLS_LOCK(ds);","","if (!ds->ossl_wbio[idx]) {","DTLS_UNLOCK(ds);"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["        res = obj2ast_expr(tmp, &optional_vars, arena);","        if (res != 0) goto failed;","        Py_CLEAR(tmp);","    }","    *out = withitem(context_expr, optional_vars, arena);","    return 0;","    Py_XDECREF(tmp);"],"label":0}
{"cve":"CVE-2017-11142","code_chunks":["return 0;","}","","vsep = memchr(var->ptr, '&', var->end - var->ptr);","if (!vsep) {","if (!eof) {","return 0;"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["","","{ if (is_ext_instance) {","if (yang_read_extcomplex_str(trg, ext_instance, \"prefix\", \"belongs-to\", s,","LY_STMT_BELONGSTO, LY_STMT_PREFIX)) {","YYABORT;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  const TfLiteTensor* input_weights;","  TF_LITE_ENSURE_OK(","      context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","  const TfLiteTensor* recurrent_weights;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fb_read_bin(fb_t a, const uint8_t *bin, size_t len) {","\tbn_t t;","","\tbn_null(t);","","\tif (len != RLC_FB_BYTES) {","\t\tRLC_THROW(ERR_NO_BUFFER);"],"label":0}
{"cve":"CVE-2022-1212","code_chunks":["ci = cipop(mrb);","mrb_gc_arena_restore(mrb, ai);","mrb->c->vmexec = FALSE;","mrb->exc = (struct RObject*)break_new(mrb, RBREAK_TAG_BREAK, proc, v);","mrb->jmp = prev_jmp;","MRB_THROW(prev_jmp);","}"],"label":1}
{"cve":"CVE-2016-2315","code_chunks":["\t\t}","\t});","","\tstop_progress(&progress);","","\tfree(reposition);","\tbitmap_free(rebuild);"],"label":0}
{"cve":"CVE-2018-20761","code_chunks":["\t\t\t\tif (e)","\t\t\t\t\tfprintf(stderr, \"Failed to open playlist %s: %s\\n\", the_url, gf_error_to_string(e) );","\t\t\t\tfprintf(stderr, \"Hit 'h' for help\\n\\n\");","\t\t\t}","\t\t} else {","\t\t\tfprintf(stderr, \"Opening URL %s\\n\", the_url);","\t\t\tif (pause_at_first) fprintf(stderr, \"[Status: Paused]\\n\");"],"label":0}
{"cve":"CVE-2018-13006","code_chunks":["fprintf(trace, \"\\\"  KID=\\\"\");","}","dump_data_hex(trace, (char *) ptr->KID, 16);","if (ptr->version)","fprintf(trace, \"\\\" crypt_byte_block=\\\"%d\\\" skip_byte_block=\\\"%d\", ptr->crypt_byte_block, ptr->skip_byte_block);","fprintf(trace, \"\\\">\\n\");","gf_isom_box_dump_done(\"TrackEncryptionBox\", a, trace);"],"label":1}
{"cve":"PYSEC-2020-282","code_chunks":["","","auto DoWork = [samples_per_alpha, num_alphas, &random, samples_flat,","alpha_flat](int start_output, int limit_output) {","","using Eigen::numext::exp;","using Eigen::numext::log;"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void md_kdf(uint8_t *key, int key_len, const uint8_t *in,","int in_len) {","uint32_t i, j, d;","uint8_t* buffer = RLC_ALLOCA(uint8_t, in_len + sizeof(uint32_t));","uint8_t* t = RLC_ALLOCA(uint8_t, key_len + RLC_MD_LEN);"],"label":1}
{"cve":"CVE-2019-20911","code_chunks":["char *unknown; \/* i.e. unhandled class as raw bits *\/"],"label":1}
{"cve":"CVE-2018-20177","code_chunks":["ber_parse_header(STREAM s, int tagval, int *length)","{","int tag, len;",""],"label":1}
{"cve":"CVE-2020-15888","code_chunks":["int nextra = ci->u.l.nextraargs;","if (wanted < 0) {","wanted = nextra;  \/* get all extra arguments available *\/","checkstackGCp(L, nextra, where);  \/* ensure stack space *\/","L->top = where + nextra;  \/* next instruction will need top *\/","}","for (i = 0; i < wanted && i < nextra; i++)"],"label":0}
{"cve":"CVE-2023-28099","code_chunks":["\t\t\t\t\t\tif ( (h % nodes_no) != node_idx)","\t\t\t\t\t\t\tcontinue;","\t\t\t\t\t}","","\t\t\t\t\tLM_DBG(\"probing set #%d, URI %.*s\\n\", list->id,","\t\t\t\t\t\t\tlist->dlist[j].uri.len, list->dlist[j].uri.s);",""],"label":0}
{"cve":"CVE-2018-5811","code_chunks":["#ifdef LIBRAW_LIBRARY_BUILD","  RUN_CALLBACK(LIBRAW_PROGRESS_CONVERT_RGB,1,2);","#endif","}","","void CLASS fuji_rotate()","{"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const OpData* op_data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* cond = GetInput(context, node, 0);","bool cond_value = cond->data.b[0];","","Subgraph* this_subgraph = reinterpret_cast<Subgraph*>(context->impl_);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["const size_t len = RLC_FP_BITS + 1;","int i, j, m;","bn_t _k[4], q, x;","int8_t ptr, *naf = RLC_ALLOCA(int8_t, 4 * n * len);","size_t l, _l[4];",""],"label":0}
{"cve":"CVE-2018-20174","code_chunks":["bitmap_decompress(uint8 * output, int width, int height, uint8 * input, int size, int Bpp)","{","\tRD_BOOL rv = False;","","\tswitch (Bpp)","\t{","\t\t\trv = bitmap_decompress1(output, width, height, input, size);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["}","","TfLiteTensor* log_probability_output =","GetOutput(context, node, top_paths * 3);","TfLiteIntArray* log_probability_output_shape_array = TfLiteIntArrayCreate(2);","log_probability_output_shape_array->data[0] = batch_size;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  ASSERT_NE(interpreter.tensor(0)->data.raw, nullptr);","  ASSERT_EQ(interpreter.tensor(1)->bytes, 15);","  ASSERT_NE(interpreter.tensor(1)->data.raw, nullptr);","  ASSERT_EQ(interpreter.tensor(3)->bytes, 15);","  ASSERT_NE(interpreter.tensor(4)->data.raw, nullptr);","  ASSERT_EQ(interpreter.tensor(2)->bytes, 4);","  ASSERT_EQ(interpreter.tensor(2)->data.i32[0], 15);"],"label":0}
{"cve":"CVE-2018-1999010","code_chunks":["chunksize = 50;         } else {","chunksize = AV_RL64(p + sizeof(ff_asf_guid));","}","if (!chunksize || chunksize > end - p) {","av_log(NULL, AV_LOG_ERROR,","\"Corrupt stream (header chunksize %\"PRId64\" is invalid)\\n\","],"label":1}
{"cve":"CVE-2018-10539","code_chunks":["    }","","    if (total_samples == -1)","        total_samples = 0x7ffff000 \/ (bytes_per_sample * num_channels);","","    total_data_bytes = total_samples * bytes_per_sample * num_channels;",""],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","goto failed;","}","asdl_seq_SET(values, i, value);","}","Py_CLEAR(tmp);"],"label":1}
{"cve":"CVE-2017-16909","code_chunks":["        write_thumb = &CLASS jpeg_thumb;","      }","      if (++img == 2 && !thumb_length)","      {","        thumb_offset = off + 24;","        thumb_width = wide;","        thumb_height = high;"],"label":0}
{"cve":"CVE-2018-20176","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"CVE-2018-20459","code_chunks":["\taop.off = off;","\tif (thumb < 0 || thumb > 1) {","\t\treturn -1;","\t}","\tif (!assemble[thumb] (&aop, off, buf)) {","\t\t\t\treturn -1;","\t}"],"label":0}
{"cve":"CVE-2015-8631","code_chunks":["        krb5_free_error_message(NULL, errmsg);","","    gss_release_buffer(&minor_stat, &client_name);","    gss_release_buffer(&minor_stat, &service_name);","    return(&ret);","}",""],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["With(asdl_seq * items, asdl_seq * body, string type_comment, int lineno, int","col_offset, int end_lineno, int end_col_offset, PyArena *arena)","{","stmt_ty p;","p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));"],"label":0}
{"cve":"CVE-2023-22490","code_chunks":["\telse","\t\terr = lstat(iter->base.path.buf, &iter->base.st);","","\tif (err < 0) {","\t\tsaved_errno = errno;","\t\tgoto error_out;","\t}"],"label":0}
{"cve":"CVE-2018-14461","code_chunks":["               (ndo->ndo_vflag < 1) ? \"\" : \"\\n\\t\",","               EXTRACT_16BITS(&ldp_com_header->version)));","\treturn 0;","    }","","    pdu_len = EXTRACT_16BITS(&ldp_com_header->pdu_length);","    if (pdu_len < sizeof(const struct ldp_common_header)-4) {"],"label":0}
{"cve":"CVE-2022-0496","code_chunks":["if (!stream.good()) {","LOG(message_group::Warning,Location::NONE,\"\",\"Can't open DXF file '%1$s'.\",filename);","return;","}","","Grid2d<std::vector<int>> grid(GRID_COARSE);","std::vector<Line> lines;                       \tstd::unordered_map<std::string, std::vector<Line>> blockdata;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void bn_read_raw(bn_t a, const dig_t *raw, int len) {","RLC_TRY {","bn_grow(a, len);","a->used = len;"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["len = PyList_GET_SIZE(tmp);","values = _Ta3_asdl_seq_new(len, arena);","if (values == NULL) goto failed;","for (i = 0; i < len; i++) {","expr_ty val;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"],"label":0}
{"cve":"CVE-2018-20182","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;","out += 4;","indexw++;"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["for (i = 0; i < len; i++) {","identifier value;","res = obj2ast_identifier(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"Global field \\\"names\\\" changed size during iteration\");"],"label":1}
{"cve":"CVE-2019-3556","code_chunks":["  }","  if (pw->pw_gid) {","    if (initgroups(pw->pw_name, pw->pw_gid)) {","      err = errno;","      log = new StructuredLogEntry();","      log->setStr(\"function\", \"initgroups\");","    }"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","auto* params = reinterpret_cast<TfLiteArgMaxParams*>(node->builtin_data);","switch (params->output_type) {"],"label":1}
{"cve":"CVE-2023-22742","code_chunks":["\t}","#endif","","\tkey = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA1);","\tif (key != NULL) {","\t\tcert.type |= GIT_CERT_SSH_SHA1;","\t\tmemcpy(&cert.hash_sha1, key, 20);"],"label":0}
{"cve":"CVE-2022-23608","code_chunks":["struct dlg_set *dlg_set;","pjsip_dialog *d;","","\/* Sanity-check arguments. *\/","PJ_ASSERT_RETURN(ua && dlg, PJ_EINVAL);",""],"label":0}
{"cve":"CVE-2020-1921","code_chunks":["inline void StringData::setSize(int len) {"],"label":1}
{"cve":"CVE-2018-20182","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["node->temporaries = TfLiteIntArrayCreate(1);","node->temporaries->data[0] = op_data->cache_tensor_id;","","TfLiteTensor* dequantized = GetTemporary(context, node, \/*index=*\/0);","dequantized->type = op_context.ref->type;","dequantized->allocation_type = kTfLiteDynamic;",""],"label":1}
{"cve":"CVE-2022-35977","code_chunks":["if (checkStringLength(c,offset+sdslen(value)) != C_OK)","return;","","o = createObject(OBJ_STRING,sdsnewlen(NULL, offset+sdslen(value)));"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["    node->temporaries->data[kRowSums] = scratch_tensor_index + kRowSums;","    TfLiteTensor* row_sums;","    TF_LITE_ENSURE_OK(context,","                      GetTemporarySafe(context, node, kRowSums, &row_sums));","    row_sums->type = kTfLiteInt32;","    row_sums->allocation_type = kTfLiteArenaRwPersistent;","    int row_sums_rows = use_cifg ? 6 : 8;"],"label":0}
{"cve":"CVE-2018-14498","code_chunks":["unsigned int maxval;","} ppm_source_struct;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static int pad_pkcs2(bn_t m, int *p_len, size_t m_len, size_t k_len, int op) {","uint8_t pad, h1[RLC_MD_LEN], h2[RLC_MD_LEN];","uint8_t *mask = RLC_ALLOCA(uint8_t, k_len);","int result = RLC_ERR;"],"label":0}
{"cve":"CVE-2020-1898","code_chunks":["inline typename V::VectorType FBUnserializer<V>::unserializeList() {"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["const bool time_major = params->time_major;","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, lstm::full::kInputTensor, &input));","","const TfLiteTensor* input_to_input_weights = GetOptionalInputTensor("],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["return PJ_EGONE;","}","","nwritten = BIO_write(ds->ossl_rbio[idx], data, (int)len);","if (nwritten < len) {","\/* Error? *\/"],"label":1}
{"cve":"CVE-2021-45938","code_chunks":["}","","int MqttClient_Subscribe(MqttClient *client, MqttSubscribe *subscribe)","{","int rc, len, i;","MqttTopic* topic;"],"label":1}
{"cve":"CVE-2023-25801","code_chunks":["}","","OP_REQUIRES(","context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,","errors::Unimplemented(\"Fractional max pooling is not yet \"","\"supported on the batch nor channel dimension.\"));",""],"label":1}
{"cve":"CVE-2018-20786","code_chunks":["    vim_snprintf(in_name, sizeof(in_name), \"\\\\\\\\.\\\\pipe\\\\vim-%d-in-%d\",","\t    GetCurrentProcessId(),","\t    curbuf->b_fnum);","    hPipeIn = CreateNamedPipe(in_name, PIPE_ACCESS_OUTBOUND,","\t    PIPE_TYPE_MESSAGE | PIPE_NOWAIT,","\t    PIPE_UNLIMITED_INSTANCES,","\t    0, 0, NMPWAIT_NOWAIT, NULL);"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["","  TfLiteTensor* resource_handle_tensor;","  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, kResourceHandleTensor,","                                           &resource_handle_tensor));","  TF_LITE_ENSURE_EQ(context, resource_handle_tensor->type, kTfLiteInt32);","  TfLiteIntArray* outputSize = TfLiteIntArrayCreate(1);","  outputSize->data[0] = 1;"],"label":0}
{"cve":"CVE-2022-1296","code_chunks":["\t\t\t\t\tname = __read_nonnull_str_at (bin->buf, offset);","\t\t\t\t}","\t\t\t\tif (rel.flags & IMPORTED_ORD) {","\t\t\t\t\timp->ordinal = rel.func_ord;","\t\t\t\t\tchar *fname = __func_name_from_ord (name, rel.func_ord);","\t\t\t\t\timp->name = r_str_newf (\"%s.%s\", name, fname);","\t\t\t\t\tfree (fname);"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["    }","    if (isinstance) {","        asdl_seq* targets;","        expr_ty value;","        string type_comment;","","        if (lookup_attr_id(obj, &PyId_targets, &tmp) < 0) {"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["fw_activation_state_quantized->type = fw_input_to_output_weights->type;","fw_activation_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(fw_activation_state_quantized->dims,"],"label":1}
{"cve":"CVE-2020-11048","code_chunks":["Stream_Read_UINT16(s, *length); \/* totalLength *\/","","\/* If length is 0x8000 then we actually got a flow control PDU that we should ignore","if (*length == 0x8000)","{","rdp_read_flow_control_pdu(s, type);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void ep2_write_bin(uint8_t *bin, int len, const ep2_t a, int pack);"],"label":1}
{"cve":"PYSEC-2020-272","code_chunks":["        tensorflow::Safe_TF_StatusPtr status =","            tensorflow::make_safe(TF_NewStatus());","        auto output =","            TFE_MonitoringNewIntGauge1(name, status.get(), description, label1);","        tensorflow::MaybeRaiseRegisteredFromTFStatus(status.get());","        return output;","      },"],"label":0}
{"cve":"CVE-2021-26926","code_chunks":["","\/* Is the compression type supported? *\/","if (dec->ihdr->data.ihdr.comptype != JP2_IHDR_COMPTYPE) {","jas_eprintf(\"error: unsupported compression type\\n\");","goto error;","}"],"label":1}
{"cve":"CVE-2016-10190","code_chunks":["err = http_read_header(h, &new_location);","if (err < 0)","return err;","}","","if (s->chunksize != UINT64_MAX) {","if (!s->chunksize) {"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["int i, n;","int8_t tnaf[RLC_FB_BITS + 8], u;","eb_t t[1 << (EB_WIDTH - 2)];","size_t l;","","if (eb_curve_opt_a() == RLC_ZERO) {"],"label":0}
{"cve":"CVE-2023-1289","code_chunks":["","if (primitive_info->text == (char *) NULL)","break;","clone_info=CloneImageInfo(draw_info->image_info);","composite_images=(Image *) NULL;","if (LocaleNCompare(primitive_info->text,\"data:\",5) == 0)","composite_images=ReadInlineImage(clone_info,primitive_info->text,"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TF_LITE_ENSURE(context, a1->data.f);","TfLiteTensor* out = GetOutput(context, node, 0);","TF_LITE_ENSURE(context, out);","TF_LITE_ENSURE(context, out->data.f);","int num = a0->dims->data[0];"],"label":1}
{"cve":"PYSEC-2021-584","code_chunks":["TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {","if (tuple[index].has_value()) {","return Status(errors::InvalidArgument(","\"The tensor for index '\", index, \"' for key '\", key.scalar<int64>()(),","\"' was already initialized '\", dtypes_.size(), \"'.\"));","}"],"label":1}
{"cve":"CVE-2018-8791","code_chunks":["\t\t\t\t\tindexw++;","\t\t\t\t\tcollen--;","\t\t\t\t}","\t\t\t\twhile (indexw < width && replen > 0)","\t\t\t\t{","\t\t\t\t\tx = last_line[indexw * 4] + color;","\t\t\t\t\t*out = x;"],"label":0}
{"cve":"PYSEC-2021-798","code_chunks":["if (positions->type == kTfLiteInt32) {","switch (input->type) {","return Gather<float, int32_t>(context, *params, input, positions,","output);","return Gather<uint8_t, int32_t>(context, *params, input, positions,","output);","return Gather<int8_t, int32_t>(context, *params, input, positions,"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["static void rand_gen(uint8_t *out, int out_len) {","int m = RLC_CEIL(out_len, RLC_MD_LEN);","uint8_t hash[RLC_MD_LEN], data[(RLC_RAND_SIZE - 1)\/2];","ctx_t *ctx = core_get();"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["\t\t{","\t\t\tif (!rdp_decrypt(rdp, s, length, securityFlags))","\t\t\t{","\t\t\t\tWLog_ERR(TAG, \"rdp_decrypt failed\");","\t\t\t\treturn FALSE;","\t\t\t}","\t\t}"],"label":0}
{"cve":"CVE-2019-17546","code_chunks":["if (_TIFFReadEncodedStripAndAllocBuffer(","tif, TIFFComputeStrip(tif, offset_row, 0),","(void**) &buf, bufsize,","((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1)","&& (buf == NULL || img->stoponerr))","{","ret = 0;"],"label":1}
{"cve":"CVE-2017-11664","code_chunks":["                    \/* Get Length *\/","                    event_data++;","                    ret_cnt++;","                    if (--siz && *event_data > 0x7f) {","                        do {","                            if (!siz) break;","                            tmp_length = (tmp_length << 7) + (*event_data & 0x7f);"],"label":0}
{"cve":"CVE-2018-14017","code_chunks":["\t}","\tname_idx = R_BIN_JAVA_USHORT (buffer, offset);","\toffset += 2;","\tnsz = R_BIN_JAVA_UINT (buffer, offset);","\toffset += 4;","","\tchar *name = r_bin_java_get_utf8_from_bin_cp_list (R_BIN_JAVA_GLOBAL_BIN, name_idx);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["                    \/* Fraction *\/","                    if (isdigit(c)) {","                        c = tok_decimal_tail(tok);","                        if (c == 0) {","                            return ERRORTOKEN;","                        }","                    }"],"label":0}
{"cve":"PYSEC-2021-220","code_chunks":["","if (activation_mode_ != FbnActivationMode::kIdentity) {","OP_REQUIRES(","context, !is_training_ || x.dim_size(3) % 4 == 0,","errors::InvalidArgument(\"FusedBatchNorm with activation requires \"","\"channel dimension to be a multiple of 4.\"));","}"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["OpData* op_data) {","const TfLiteTensor* input_box_encodings;","TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensorBoxEncodings,","&input_box_encodings));","TF_LITE_ENSURE_EQ(context, input_box_encodings->dims->data[0], kBatchSize);"],"label":0}
{"cve":"CVE-2017-9144","code_chunks":["  image=AcquireImage(image_info,exception);","  status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);","  if (status == MagickFalse)","    return(DestroyImageList(image));","  \/*","    Determine if this a RLE file.","  *\/"],"label":0}
{"cve":"CVE-2020-1898","code_chunks":["  }","  if (RuntimeOption::EvalEnableCodeCoverage == 1) {","    auto const tport = g_context->getTransport();","    if (!tport ||","        tport->getParam(\"enable_code_coverage\").compare(\"true\") != 0) {","      SystemLib::throwRuntimeExceptionObject(","        \"Calling fb_enable_code_coverage without adding \""],"label":0}
{"cve":"CVE-2018-8800","code_chunks":["#define s_check_rem(s,n)\t((s)->p + n <= (s)->end)"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["} else {","PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");","return 1;","}","*out = BoolOp(op, values, lineno, col_offset, arena);","if (*out == NULL) goto failed;"],"label":1}
{"cve":"CVE-2022-32546","code_chunks":["        (void) WriteBlobString(image,buffer);","        break;","      }","    }","    for (y=0; y < (ssize_t) image->rows; y++)","    {","      p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"],"label":0}
{"cve":"CVE-2021-37678","code_chunks":["","# Licensed under the Apache License, V"],"label":1}
{"cve":"CVE-2022-41903","code_chunks":["if (!a)","return;","ALLOC_GROW(res->attrs, res->num_matches + 1, res->alloc);","res->attrs[res->num_matches++] = a;","}",""],"label":1}
{"cve":"CVE-2018-16393","code_chunks":["\/* read the serial (document number) *\/","r = sc_read_record (card, SC_ESTEID_PD_DOCUMENT_NR, buff, sizeof(buff), SC_RECORD_BY_REC_NR);","SC_TEST_RET(card->ctx, SC_LOG_DEBUG_NORMAL, r, \"read document number failed\");","buff[r] = '\\0';","set_string (&p15card->tokeninfo->serial_number, (const char *) buff);","","p15card->tokeninfo->flags = SC_PKCS15_TOKEN_PRN_GENERATION"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["    if (!m)","        return 0;","    c->c_normalize = PyObject_GetAttrString(m, \"normalize\");","    Py_DECREF(m);","    if (!c->c_normalize)","        return 0;","    return 1;"],"label":0}
{"cve":"CVE-2022-24754","code_chunks":["const pj_str_t *nonce,","const pj_str_t *nc,","const pj_str_t *cnonce,","const pj_str_t *qop,","const pj_str_t *uri,","const pj_str_t *realm,"],"label":0}
{"cve":"CVE-2022-3299","code_chunks":["","ogs_debug(\"RECEIVED[%d]\", (int)response->http.content_length);","if (response->http.content_length && response->http.content)","ogs_debug(\"%s\", response->http.content);","","if (content_type)"],"label":1}
{"cve":"CVE-2020-4030","code_chunks":["{","\tsize_t count;","\tsize_t size;","\tchar* result = NULL;","","\tassert(string);","\tassert(substring);"],"label":0}
{"cve":"CVE-2018-1128","code_chunks":["bool AuthUnknownAuthorizeHandler::verify_authorizer(CephContext *cct, KeyStore *keys,","bufferlist& authorizer_data, bufferlist& authorizer_reply,","EntityName& entity_name, uint64_t& global_id, AuthCapsInfo& caps_info, CryptoKey& session_key,","uint64_t *auid)","{","","return true;"],"label":1}
{"cve":"CVE-2019-13311","code_chunks":["      Parenthesis and Brace operations","    *\/","    if (LocaleCompare(\"(\",option) == 0) {","      \/* stack 'push' images *\/","      Stack","        *node;",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_TYPES_EQ(context, top_k->type, kTfLiteInt32);","TF_LITE_ENSURE_EQ(context, NumElements(top_k), 1);","const int32 k = *GetTensorData<int32_t>(top_k);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","const int num_dimensions = NumDimensions(input);"],"label":1}
{"cve":"CVE-2018-12561","code_chunks":["det.url.setPath(smbShare->text().trimmed());","det.url.setPort(smbPort->value());","det.url.setScheme(RemoteFsDevice::constSambaProtocol);","det.url.setPassword(smbPassword->text().trimmed());","if (!smbDomain->text().trimmed().isEmpty()) {","QUrlQuery q;"],"label":1}
{"cve":"CVE-2023-40589","code_chunks":["","if (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))","return -1;","","if (IndexLEC >= 256)","break;"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {","const TfLiteTensor* input = GetInput(context, node, kInputTensor);","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","const int num_elements = NumElements(input);","switch (input->type) {","memset(GetTensorData<int64_t>(output), 0, num_elements * sizeof(int64_t));"],"label":1}
{"cve":"CVE-2019-19905","code_chunks":["len = (int) strlen(inbuf) + 1;","if (buf)","len += (int) strlen(buf);","tmpbuf = (char *) alloc(len);"],"label":1}
{"cve":"PYSEC-2022-84","code_chunks":["int size = DataTypeSize(BaseType(tensor.dtype()));","VLOG(2) << \"Count: \" << count << \" DataTypeSize: \" << size;","int64_t tensor_size = MultiplyWithoutOverflow(count, size);","if (tensor_size < 0) {","VLOG(1) << \"Overflow encountered when computing tensor size, multiplying \"","<< count << \" with \" << size;"],"label":0}
{"cve":"CVE-2021-42782","code_chunks":["else","acls = sc_asn1_find_tag(ctx, buf, buflen, IASECC_DOCP_TAG_ACLS_CONTACT, &taglen);","","if (!acls)   {","sc_log(ctx,","\"ACLs not found in data(%\"SC_FORMAT_LEN_SIZE_T\"u) %s\",","buflen, sc_dump_hex(buf, buflen));"],"label":1}
{"cve":"CVE-2021-29518","code_chunks":["const Tensor& handle = ctx->input(0);","const string& name = handle.scalar<tstring>()();","auto session_state = ctx->session_state();","OP_REQUIRES(ctx, session_state != nullptr,","errors::FailedPrecondition(","\"DeleteSessionTensor called on null session state\"));"],"label":0}
{"cve":"CVE-2017-16910","code_chunks":["}","break;","if ((min = ~(max = 0)) && (col += 2) < width - 3 && row > 2)","row--;","}","}",""],"label":1}
{"cve":"CVE-2021-4173","code_chunks":["\t    else","\t\tgenerate_LOAD(cctx, ISN_LOADAUTO, 0, name, type);","\t    break;","\t    generate_LOAD(cctx, ISN_LOADB, 0, name + 2, type);","\t    break;","\t    generate_LOAD(cctx, ISN_LOADW, 0, name + 2, type);","\t    break;"],"label":0}
{"cve":"CVE-2021-32132","code_chunks":["for (i=0; i<ptr->server_entry_count; i++) {","int j=0;","zfound = GF_FALSE;","tmp_strsize=(u32)ptr->size;","while (tmp_strsize) {","ISOM_DECREASE_SIZE(ptr, 1)"],"label":1}
{"cve":"CVE-2021-31255","code_chunks":["{","\tGF_AdobeFragRandomAccessBox *ptr = (GF_AdobeFragRandomAccessBox *)s;","\tif (ptr == NULL) return;","","\twhile (gf_list_count(ptr->local_access_entries)) {","\t\tgf_free(gf_list_get(ptr->local_access_entries, 0));","\t\tgf_list_rem(ptr->local_access_entries, 0);"],"label":0}
{"cve":"CVE-2019-17177","code_chunks":["\t\t\t\ttmp[cs++] = ';';","\t\t\t\tbreak;","","\t\t\t\tds += 4;","\t\t\t\ttmp2 = (LPSTR)realloc(tmp, ds * sizeof(CHAR));","\t\t\t\tif (!tmp2)","\t\t\t\t\tfree(tmp);"],"label":0}
{"cve":"CVE-2020-13396","code_chunks":["Stream_Free(s, FALSE);","return SEC_E_INVALID_TOKEN;","}","","if (message->MessageType != MESSAGE_TYPE_CHALLENGE)","{"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["            }","            if (!expr3) {","                return NULL;","            }","            return AnnAssign(expr1, expr2, expr3, simple,","                             LINENO(n), n->n_col_offset,","                             n->n_end_lineno, n->n_end_col_offset, c->c_arena);"],"label":0}
{"cve":"CVE-2024-24806","code_chunks":["if (d < de)","*d++ = '.';","","s = si;","}"],"label":1}
{"cve":"CVE-2018-5808","code_chunks":["{","uchar pixel[10];","unsigned iten = 0, isix, i, buffer = 0, todo[16];","#ifdef LIBRAW_LIBRARY_BUILD","if(raw_width > 32767 || raw_height > 32767)","throw LIBRAW_EXCEPTION_IO_BADFILE;"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["        }","        if (tmp == NULL) {","            PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from Subscript\");","            return 1;","        }","        else {","            int res;"],"label":0}
{"cve":"CVE-2017-7524","code_chunks":["            rval = TPM_RC_MEMORY;","            goto err;","        }","","        tmpResult.t.size = size;","","        bool res = string_bytes_concat_buffer(resultKey, &(tmpResult.b));"],"label":0}
{"cve":"CVE-2022-41900","code_chunks":["                       .Finalize(&op.node_def));","    };","","        set_op(std::vector<float>{2.0f, 1, 1.5f, 4.0f});","","        INFER_ERROR(\"must be rank 4\", op, \"[?,?,?]\");",""],"label":0}
{"cve":"CVE-2020-1916","code_chunks":["}","","count = (BF_word)1 << ((setting[4] - '0') * 10 + (setting[5] - '0'));","if (count < min || BF_decode(data.binary.salt, &setting[7], 16)) {","__set_errno(EINVAL);","return NULL;","}"],"label":1}
{"cve":"CVE-2018-12326","code_chunks":["    if (config.dbnum != 0)","        prompt = sdscatfmt(prompt,\"[%i]\",config.dbnum);","","    \/* Copy the prompt in the static buffer. *\/","    prompt = sdscatlen(prompt,\"> \",2);","    snprintf(config.prompt,sizeof(config.prompt),\"%s\",prompt);","    sdsfree(prompt);"],"label":0}
{"cve":"CVE-2020-1712","code_chunks":["if (challenge)","return sd_bus_error_set(error, SD_BUS_ERROR_INTERACTIVE_AUTHORIZATION_REQUIRED, \"Interactive authentication required.\");","","return -EACCES;","}"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["      TfLiteTensor* fw_cell_state_quantized;","      TF_LITE_ENSURE_OK(context,","                        GetTemporarySafe(context, node, kFwCellStateQuantized,","                                         &fw_cell_state_quantized));","      TfLiteTensor* bw_cell_state_quantized;","      TF_LITE_ENSURE_OK(context,","                        GetTemporarySafe(context, node, kBwCellStateQuantized,"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from stmt\");","return 1;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_OK(context,","GetInputSafe(context, node, kInputTensor1, &input1));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","output->type = input1->type;"],"label":0}
{"cve":"CVE-2018-14679","code_chunks":["D((\"first pmgl chunk is after last pmgl chunk\"))","return MSPACK_ERR_DATAFORMAT;","}","if (chm->index_root != 0xFFFFFFFF && chm->index_root > chm->num_chunks) {","D((\"index_root outside valid range\"))","return MSPACK_ERR_DATAFORMAT;","}"],"label":1}
{"cve":"CVE-2016-2324","code_chunks":["static void record_recent_object(struct object *obj,","struct strbuf *path,","const char *last,","void *data)","{","sha1_array_append(&recent_objects, obj->oid.hash);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["} else {","RLC_RIP(b, d, b);",""],"label":1}
{"cve":"CVE-2017-12664","code_chunks":["static MagickBooleanType WritePALMImage(const ImageInfo *image_info,","Image *image,ExceptionInfo *exception)","{","MagickBooleanType","status;",""],"label":0}
{"cve":"CVE-2023-52267","code_chunks":["if (hc != NULL) {","hc->_ctx_status = CONTEXT_READ_OVER;","}","delete td;","}"],"label":1}
{"cve":"CVE-2016-10272","code_chunks":["#ifdef DEVELMODE","\t  TIFFError (\"\", \"        Trailing bits src offset:  %8d, Dst offset: %8d\\n\", ","                              offset2, dst_offset); ","          for (j = 30, k = 7; j < 38; j++, k--)","            {","            bitset = *(sect_buff + dst_offset) & (((unsigned char)1 << k)) ? 1 : 0;","            sprintf(&bitarray[j], (bitset) ? \"1\" : \"0\");"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(values, i, val);","            }"],"label":0}
{"cve":"CVE-2022-47934","code_chunks":["brave_request_info->resource_type = blink::mojom::ResourceType::kSubFrame;","brave_request_info->browser_context = profile()->GetOffTheRecordProfile(","Profile::OTRProfileID::CreateUnique(\"incognito\"), true);","int rc = ipfs::OnBeforeURLRequest_IPFSRedirectWork(brave::ResponseCallback(),","brave_request_info);","EXPECT_EQ(rc, net::ERR_INCOGNITO_IPFS_NOT_ALLOWED);"],"label":1}
{"cve":"CVE-2022-1451","code_chunks":["\tconst ut8 *a_buf = offset + buf;","\tut8 *attr_buf = (ut8 *) calloc (pending + 1, 1);","\tif (!attr_buf) {","\t\teprintf (\"Unable to allocate enough bytes (0x%04\"PFMT64x","\t\t\t\") to read in the attribute.\\n\", sz);","\t\treturn attr_buf;","\t}"],"label":0}
{"cve":"CVE-2018-8793","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"CVE-2020-21674","code_chunks":["return (-1);","p = as->s + as->length;","end = as->s + as->buffer_length - MB_CUR_MAX -1;","}","#if HAVE_WCRTOMB","n = wcrtomb(p, *w++, &shift_state);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["  const int input_dims_count = input_shape.DimensionsCount();","  const auto* input_dims_data = input_shape.DimsData();","  int num_slices = 1;","  for (int i = 0; i < input_dims_count - 2; ++i) {","    num_slices *= input_dims_data[i];","  }",""],"label":0}
{"cve":"CVE-2019-12109","code_chunks":["\t\tSoapError(h, 501, \"ActionFailed\");","\t\treturn;","\t}","\tsyslog(LOG_INFO, \"%s: (inbound) pinhole with ID %d successfully removed\",","\t       action, uid);","\tbodylen = snprintf(body, sizeof(body), resp,","\t                   action, ns, action);"],"label":0}
{"cve":"CVE-2021-33910","code_chunks":["","p = strdupa(f);","if (!p)","return -ENOMEM;",""],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["output_state_quantized->type = input_to_output_weights->type;","output_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(output_state_quantized->dims,"],"label":1}
{"cve":"CVE-2020-9433","code_chunks":["if (lua_isstring(L, 2))","{","const char *ip_asc = lua_tostring(L, 2);","lua_pushboolean(L, X509_check_ip_asc(cert, ip_asc, 0));","}","else"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["reinterpret_cast<TfLiteUnpackParams*>(node->builtin_data);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","switch (input->type) {","case kTfLiteFloat32: {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  TF_LITE_ENSURE_OK(context,","                    GetOutputSafe(context, node, kOutputTensor, &output));","  TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);","  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);","","  return context->ResizeTensor(context, output, output_shape);","}"],"label":0}
{"cve":"CVE-2022-23521","code_chunks":["if (type == OBJ_BLOB)","ret |= fsck_blob(oid, buf, size, options);","else","ret |= report(options,","oid, type,","FSCK_MSG_GITMODULES_BLOB,"],"label":1}
{"cve":"CVE-2020-13396","code_chunks":["\t\t\tgoto fail;","\t\tstatus = SEC_E_INTERNAL_ERROR;","","\t\tcontext->NtChallengeResponse.pvBuffer = message->NtChallengeResponse.Buffer;","\t\tcontext->NtChallengeResponse.cbBuffer = message->NtChallengeResponse.Len;","\t\tsspi_SecBufferFree(&(context->ChallengeTargetInfo));","\t\tcontext->ChallengeTargetInfo.pvBuffer = (void*)context->NTLMv2Response.Challenge.AvPairs;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["          return SoftmaxQuantized<int8_t, int16_t>(context, input, output,","                                                   data);","          TF_LITE_KERNEL_LOG(context,","                             \"Only int8_t and int16_t outputs are supported \"","                             \"with int8_t inputs currently, got %s.\",","                             TfLiteTypeGetName(output->type));","          return kTfLiteError;"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\t\t\t(c->used)++;","\t\t\t}","\t\t}","\t\tbn_trim(c);","\t} RLC_CATCH_ANY {","\t\tRLC_THROW(ERR_CAUGHT);","\t}"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["{","BYTE cacheVersion;","","if (Stream_GetRemainingLength(s) < 4)","return FALSE;",""],"label":0}
{"cve":"CVE-2022-1031","code_chunks":["\t\t\t\tif (anal->iob.is_valid_offset (anal->iob.io, last_push_addr, 1)) {","\t\t\t\t\t(void) r_anal_xrefs_set (anal, op->addr, last_push_addr, R_ANAL_REF_TYPE_DATA);","\t\t\t\t}","\t\t\t}","\t\t\tbreak;","\t\t\tif (op->family == R_ANAL_OP_FAMILY_PRIV) {","\t\t\t\tfcn->type = R_ANAL_FCN_TYPE_INT;"],"label":0}
{"cve":"CVE-2017-12678","code_chunks":["{","TextIdentificationFrame *tdrc =","static_cast<TextIdentificationFrame *>(tag->frameList(\"TDRC\").front());","UnknownFrame *tdat = static_cast<UnknownFrame *>(tag->frameList(\"TDAT\").front());","","if(tdrc->fieldList().size() == 1 &&"],"label":1}
{"cve":"CVE-2021-32136","code_chunks":["gf_isom_get_user_data(file, track_number, type, uuid, j+1, &udta, &udta_size);","if (!udta) continue;","if (gf_utf8_is_legal(udta, udta_size)) {","if (first) {","fprintf(stderr, \"\\n\");","first = GF_FALSE;"],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["      false);","  builder->Finish(tensor_offset);","  void* tensor_pointer = builder->GetBufferPointer();","  const Tensor* tensor = flatbuffers::GetRoot<Tensor>(tensor_pointer);","  return tensor;","}",""],"label":0}
{"cve":"CVE-2021-37655","code_chunks":["                                    params_flat, update, indices_flat);","        OP_REQUIRES(c, bad_i < 0,","                    errors::InvalidArgument(","                        \"indices\", SliceDebugString(indices.shape(), bad_i),","                        \" = \", indices_flat(bad_i), \" is not in [0, \",","                        params->dim_size(0), \")\"));","      } else {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["  const TfLiteTensor* default_value_tensor;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDefaultValueTensor,","                                          &default_value_tensor));","","  const TfLiteTensor* key_tensor;","  TF_LITE_ENSURE_OK(context,","                    GetInputSafe(context, node, kKeyTensor, &key_tensor));"],"label":0}
{"cve":"CVE-2022-23579","code_chunks":["if (!IsIdentity(node) && !IsIdentityN(node)) {","return true;","}","","if (nodes_to_preserve_.find(node.name()) != nodes_to_preserve_.end()) {","return false;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["","const TfLiteTensor* input_boxes;","TF_LITE_ENSURE_OK(","context, GetInputSafe(context, node, kInputTensorBoxes, &input_boxes));","const int num_boxes = SizeOfDimension(input_boxes, 0);","const TfLiteTensor* input_scores;"],"label":0}
{"cve":"PYSEC-2020-317","code_chunks":["      }","    };","        const int64 batchInitCost =","                (Eigen::TensorOpCost::AddCost<T>() +","         Eigen::TensorOpCost::MulCost<T>()) *","            2","                + Eigen::TensorOpCost::AddCost<T>() +"],"label":0}
{"cve":"CVE-2020-11049","code_chunks":["Stream_Read_UINT16(s, *type);   \/* type *\/","Stream_Read_UINT16(s, *length); \/* length *\/","","if (Stream_GetRemainingLength(s) < (size_t)(*length - 4))","return FALSE;","","return TRUE;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","","switch (input1->type) {","case kTfLiteInt32: {"],"label":1}
{"cve":"PYSEC-2021-649","code_chunks":["","TensorShape output_shape;","OP_REQUIRES_OK(context, TensorShapeUtils::MakeShape(","input_shape_t.data() + 1,","input_shape->NumElements() - 1, &output_shape));","","std::unordered_set<int64> visited;"],"label":1}
{"cve":"CVE-2018-5816","code_chunks":["  } else if (strstr(model,\"WB550\")) {","    strcpy (model, \"WB550\");","  } else if (!strcmp(model,\"EX2F\")) {","    height = 3030;","    width  = 4040;","    top_margin = 15;","    left_margin=24;"],"label":0}
{"cve":"CVE-2017-6800","code_chunks":["}","printf(\"] (%llu)\\n\", ddword_tmp);","break;","printf(\"    Value: %li\\n\", *((long*)mapidata->data));","break;","printf(\"    Value: %hi\\n\", *((short int*)mapidata->data));","break;"],"label":1}
{"cve":"CVE-2022-32547","code_chunks":["}","{","EXIFMultipleValues(4,\"%f\",(double) *(float *) p1);","break;","}","{"],"label":1}
{"cve":"CVE-2022-23521","code_chunks":["\t}","","\t\/*","\t * bootstrap_attr_stack() should have added, and the","\t * above loop should have stopped before popping, the","\t * root element whose attr_stack->origin is set to an","\t * empty string."],"label":0}
{"cve":"CVE-2023-38703","code_chunks":[],"label":1}
{"cve":"PYSEC-2023-53","code_chunks":["nation","from vantage6.server.resource.common._schema import UserSchema","","","module_name = logger_name(__name__)"],"label":1}
{"cve":"CVE-2021-25940","code_chunks":["_authenticationSystemOnly(true),","_localAuthentication(true),","_active(true),","_authenticationTimeout(0.0) {","setOptional(false);","startsAfter<application_features::BasicFeaturePhaseServer>();",""],"label":1}
{"cve":"PYSEC-2020-134","code_chunks":["      context->ReportError(context, \"Type '%s' is not supported by gather.\",","                           TfLiteTypeGetName(input->type));","      return kTfLiteError;","  }","","  int axis = params->axis;","  if (axis < 0) {"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["arg(identifier arg, expr_ty annotation, int lineno, int col_offset, int","end_lineno, int end_col_offset, PyArena *arena)","{","arg_ty p;","if (!arg) {"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["if (IsDynamicTensor(output)) {","has_dynamic_output_tensors = true;","break;","}","}",""],"label":1}
{"cve":"CVE-2019-15226","code_chunks":["","      EXPECT_CALL(*decoder_filters_[1], decodeHeaders(_, _))","      .WillOnce(Return(FilterHeadersStatus::Continue));","  EXPECT_CALL(*decoder_filters_[0], decodeData(_, _)).WillOnce(Return(FilterDataStatus::Continue));","  EXPECT_CALL(*decoder_filters_[1], decodeData(_, _)).WillOnce(Return(FilterDataStatus::Continue));","  EXPECT_CALL(*decoder_filters_[0], decodeTrailers(_))","      .WillOnce(Return(FilterTrailersStatus::Continue));"],"label":0}
{"cve":"PYSEC-2022-49","code_chunks":["bool found_unknown_shapes = false;","const auto& op_info = op_context.op_info;","TF_ASSIGN_OR_RETURN(ConvolutionDimensions dims,","OpDimensionsFromInputs(op_info.inputs(0).shape(), op_info,","&found_unknown_shapes));",""],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["void fb_read_bin(fb_t a, const uint8_t *bin, int len) {","bn_t t;","","bn_null(t);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["RLC_TRY {","fp2_new(r);","fp2_new(s);","for (i = 0; i < (1 << (FP_WIDTH - 2)); i ++) {","fp2_null(t0[i]);","fp2_null(t1[i]);","fp2_new(t0[i]);"],"label":1}
{"cve":"CVE-2022-36017","code_chunks":["                   .Attr(\"out_type\", DataTypeToEnum<qint32>::v())","                   .Finalize(node_def()));","  TF_ASSERT_OK(InitOp());","  const float input_min = 0.0f;","  const float input_max = 60.0f;","  const int input_height = 2;","  const int input_width = 3;"],"label":0}
{"cve":"PYSEC-2021-400","code_chunks":["        output_right_node_contribs_t->matrix<float>();","","        Tensor* output_split_types_t;","    OP_REQUIRES_OK(","        context, context->allocate_output(\"split_with_default_directions\",","                                          {num_nodes}, &output_split_types_t));","    auto output_split_types_vec = output_split_types_t->vec<tstring>();"],"label":0}
{"cve":"CVE-2023-51698","code_chunks":["* decompress-only client for Linux called unrar. Another","* option is a GPLv2-licensed command-line tool developed by","* the Gna! project. Confusingly enough, the free software RAR","* decoder is also named unrar. For this reason we need to add","* some lines for disambiguation. Sorry for the added the","* complexity but it's life :)"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["TfLiteTensor* fft_integer_working_area =","GetTemporary(context, node, kFftIntegerWorkingAreaTensor);","TfLiteTensor* fft_double_working_area =","GetTemporary(context, node, kFftDoubleWorkingAreaTensor);","SetTensorToDynamic(fft_integer_working_area);","SetTensorToDynamic(fft_double_working_area);"],"label":1}
{"cve":"CVE-2022-43286","code_chunks":["","arguments[0] = state->value;","arguments[1] = state->keys->start[state->index++];","","switch (prop->type) {","arguments[2] = prop->value;"],"label":1}
{"cve":"CVE-2016-3134","code_chunks":["|= ((1 << hook) | (1 << NF_ARP_NUMHOOKS));","","\/* Unconditional return\/END. *\/","if ((e->target_offset == sizeof(struct arpt_entry) &&"],"label":1}
{"cve":"CVE-2022-41858","code_chunks":["spin_lock(&sl->lock);","","if (netif_queue_stopped(dev)) {","if (!netif_running(dev) || !sl->tty)","goto out;","","\/* May be we must check transmitter timeout here ?"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["FrontendReset(data->state);","","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2021-42073","code_chunks":["if (parsePlatformArg(args, argc, argv, i)) {","continue;","}","else if (parseGenericArgs(argc, argv, i)) {","continue;","}"],"label":1}
{"cve":"CVE-2022-36937","code_chunks":["smethod = SSLv23_client_method();","break;","m_data->m_client = true;","smethod = TLSv1_client_method();","break;","m_data->m_client = false;","smethod = SSLv23_server_method();"],"label":1}
{"cve":"CVE-2020-1912","code_chunks":["Builder.createParameter(newFunc, \"this\");","","if (doInitES5CaptureState != InitES5CaptureState::No)","initCaptureStateInES5FunctionHelper();","","if (doEmitParameters == DoEmitParameters::Yes) {"],"label":1}
{"cve":"CVE-2023-41337","code_chunks":["    unsigned cpu_low, cpu_high, cpu_num;","    int pos;","    if (index(cpu_spec, '-') == NULL) {","        if (sscanf(cpu_spec, \"%u%n\", &cpu_low, &pos) != 1 || pos != strlen(cpu_spec))","            goto Error;","        cpu_high = cpu_low;","    } else {"],"label":0}
{"cve":"CVE-2021-3772","code_chunks":["","\t\t\tinitack = (struct sctp_initack_chunk *)chunk->chunk_hdr;","\t\t\tif (!sctp_chunk_length_valid(chunk, sizeof(*initack)))","\t\t\t\tabort->chunk_hdr->flags |= SCTP_CHUNK_FLAG_T;","\t\t\telse {","\t\t\t\tunsigned int inittag;",""],"label":0}
{"cve":"CVE-2021-36978","code_chunks":["{","this->m->count += QIntC::to_offset(len);","this->m->last_char = buf[len - 1];","getNext()->write(buf, len);","}","}",""],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["        input_boxes->data.f, num_boxes, input_scores->data.f,","        max_output_size_value, iou_threshold, score_threshold, \/**sigma=**\/ 0.0,","        output_selected_indices->data.i32, \/**selected_scores=**\/ nullptr,","        output_num_selected_indices->data.i32);","    ResetUnusedElementsToZeroes(max_output_size_value,","                                *output_num_selected_indices->data.i32,","                                output_selected_indices->data.i32, nullptr);"],"label":0}
{"cve":"CVE-2022-1071","code_chunks":["if (!mrb_integer_p(vb)) goto getidx_fallback;","regs[a] = mrb_ary_entry(va, mrb_integer(vb));","break;","regs[a] = mrb_hash_get(mrb, va, vb);","break;"],"label":1}
{"cve":"CVE-2022-0156","code_chunks":["","if (lnum_save >= 0)","SOURCING_LNUM = lnum_save;","vim_free(line_to_free);","ga_clear_strings(&newlines);","if (newargs != NULL)","ga_clear_strings(newargs);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), data->values_count);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","","const TfLiteTensor* input0 = GetInput(context, node, 0);","const int dimension_size = NumDimensions(input0) + 1;","if (data->axis < 0) {","data->axis += dimension_size;"],"label":1}
{"cve":"CVE-2021-30020","code_chunks":["\t\tvp->channels = oggpack_read(&opb, 8);","\t\tvp->sample_rate = oggpack_read(&opb, 32);","\t\tvp->max_r = oggpack_read(&opb, 32);","\t\tvp->avg_r = oggpack_read(&opb, 32);","\t\tvp->low_r = oggpack_read(&opb, 32);","","\t\tvp->min_block = 1<<oggpack_read(&opb, 4);"],"label":0}
{"cve":"CVE-2022-39244","code_chunks":["{","if (pj_scan_is_eof(scanner) || !PJ_SCAN_IS_NEWLINE(*scanner->curptr)) {","pj_scan_syntax_err(scanner);","return;","}",""],"label":0}
{"cve":"CVE-2017-14173","code_chunks":["              tuple);","          }","        if (pixel.alpha_trait != UndefinedPixelTrait)","          {","            (void) ConcatenateMagickString(tuple,\",\",MagickPathExtent);","            ConcatenateColorComponent(&pixel,AlphaPixelChannel,compliance,","              tuple);"],"label":0}
{"cve":"CVE-2019-20393","code_chunks":["","{ (yyval.token) = actual_type;","if (is_ext_instance) {","if (yang_read_extcomplex_str(trg, ext_instance, \"argument\", ext_name, s,","0, LY_STMT_ARGUMENT)) {","YYABORT;","}"],"label":1}
{"cve":"CVE-2023-38703","code_chunks":["pj_sockaddr_cp(&udp->rem_rtcp_addr, &udp->rem_rtp_addr);","pj_sockaddr_cp(&udp->rtcp_src_addr, &udp->rem_rtcp_addr);","} else if (!pj_sockaddr_has_addr(&udp->rtcp_src_addr)) {","\/* Also update remote RTCP address if actual RTCP source","* address is not heard yet.","*\/"],"label":1}
{"cve":"CVE-2019-20393","code_chunks":["                  actual = (yyvsp[-4].backup_token).actual;","                  data_node = (yyvsp[-4].backup_token).actual;","                }","","    break;","",""],"label":0}
{"cve":"CVE-2019-20176","code_chunks":["","if (depth >= max_ls_depth || matches >= max_ls_files) {","return;","}","if ((dir = sreaddir(&names)) == NULL) {","addreply(226, MSG_CANT_READ_FILE, name);","return;"],"label":0}
{"cve":"PYSEC-2020-97","code_chunks":["EngineScript","","from qutebrowser.config import configdata, config","from qutebrowser.browser import (browsertab, eventfilter, shared, webelem,","history, greasemonkey)"],"label":1}
{"cve":"CVE-2022-39244","code_chunks":["    if (sdp->conn) {","\tpj_status_t status = validate_sdp_conn(sdp->conn);","\tif (status != PJ_SUCCESS)","\t    return status;","    }","","    \/* Validate each media. *\/"],"label":0}
{"cve":"CVE-2019-3561","code_chunks":["if (pos >= 0) {","ptr = bstrrstr(input + pos, len - pos, s, s_len);","} else {","ptr = bstrrstr(input, len + pos + s_len, s, s_len);","}"],"label":1}
{"cve":"CVE-2018-5807","code_chunks":["void CLASS rollei_load_raw()","{","uchar pixel[10];","unsigned iten=0, isix, i, buffer=0, todo[16];","","isix = raw_width * raw_height * 5 \/ 8;","while (fread (pixel, 1, 10, ifp) == 10) {"],"label":1}
{"cve":"CVE-2022-41859","code_chunks":["uint32_t *token)","{","BIGNUM\t\t*x_candidate = NULL, *rnd = NULL, *y_sqrd = NULL, *qr = NULL, *qnr = NULL, *y1 = NULL, *y2 = NULL, *y = NULL, *exp = NULL;","EVP_MD_CTX\t*hmac_ctx;","EVP_PKEY\t*hmac_pkey;","uint8_t\t\tpwe_digest[SHA256_DIGEST_LENGTH], *prfbuf = NULL, *xbuf = NULL, *pm1buf = NULL, *y1buf = NULL, *y2buf = NULL, *ybuf = NULL, ctr;"],"label":0}
{"cve":"CVE-2020-12465","code_chunks":["int offset = data - page_address(page);","struct sk_buff *skb = q->rx_head;","struct skb_shared_info *shinfo = skb_shinfo(skb);","","if (shinfo->nr_frags < ARRAY_SIZE(shinfo->frags)) {","offset += q->buf_offset;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["    }","","    str[0] = '(';","    memcpy(str+1, expr_start, len);","    str[len+1] = ')';","    str[len+2] = 0;",""],"label":0}
{"cve":"CVE-2022-35971","code_chunks":["        InvalidArgument(\"num_bits must be between 2 and 16, inclusive\"));","    bool narrow_range;","    OP_REQUIRES_OK(context, context->GetAttr(\"narrow_range\", &narrow_range));","    quant_min_ = narrow_range ? 1 : 0;","    quant_max_ = (1 << num_bits) - 1;","    SET_USING_FAKE_QUANT();","  }"],"label":0}
{"cve":"CVE-2020-35964","code_chunks":["}","","ret = ff_alloc_extradata(st->codecpar, 64 + xd_size + xd_size \/ 255);","if (ret < 0)","return ret;",""],"label":1}
{"cve":"PYSEC-2021-462","code_chunks":["&input_st));","","auto input_shape_t = input_shape->vec<int64>();","const int64 N = input_shape_t(0);","","Tensor sparse_handles(DT_INT64, TensorShape({N}));"],"label":1}
{"cve":"CVE-2022-0632","code_chunks":["}","}","}","pop_n(len);","if (val) {","genop_2(s, OP_ARRAY, rhs, len);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));"],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["{","dtls_srtp *ds;","pj_pool_t *pool;","pj_status_t status;","","pool = pj_pool_create(srtp->pool->factory, \"dtls%p\",","2000, 256, NULL);"],"label":1}
{"cve":"CVE-2022-21656","code_chunks":["  auto cluster1 = makeCluster(yaml);","  ASSERT_TRUE(cluster1->info()->idleTimeout().has_value());","  EXPECT_EQ(std::chrono::hours(1), cluster1->info()->idleTimeout().value());","","  const std::string auto_http3 = R\"EOF(","        \"@type\": type.googleapis.com\/envoy.extensions.upstreams.http.v3.HttpProtocolOptions","              max_concurrent_streams: 2"],"label":0}
{"cve":"CVE-2018-14360","code_chunks":["","  nntp_data->subscribed = false;","  if (!SaveUnsubscribed)","  {","    nntp_data->newsrc_len = 0;","    FREE(&nntp_data->newsrc_ent);","  }"],"label":0}
{"cve":"CVE-2016-4303","code_chunks":["cJSON_AddIntToObject(test->json_start, \"tcp_mss\", test->settings->mss);","else {","len = sizeof(opt);","getsockopt(test->ctrl_sck, IPPROTO_TCP, TCP_MAXSEG, &opt, &len);","cJSON_AddIntToObject(test->json_start, \"tcp_mss_default\", opt);","}"],"label":1}
{"cve":"CVE-2016-5354","code_chunks":["void *class_data;\t\/* private class\/id decode data *\/"],"label":1}
{"cve":"CVE-2017-12474","code_chunks":["    inspector.AddField(\"Configuration Version\", m_ConfigurationVersion);","    const char* profile_name = GetProfileName(m_Profile);","    if (profile_name) {","        inspector.AddField(\"Profile\", profile_name);","    } else {","        inspector.AddField(\"Profile\", m_Profile);","    }"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","TfLiteTensor* output = GetOutput(context, node, 0);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["","const TfLiteTensor* input_gate_bias =","GetOptionalInputTensor(context, node, kInputGateBiasTensor);","const TfLiteTensor* forget_gate_bias =","GetInput(context, node, kForgetGateBiasTensor);"],"label":1}
{"cve":"CVE-2020-1712","code_chunks":["","if (!q)","return;","","sd_bus_slot_unref(q->slot);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["if (lookup_attr_id(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}","if (tmp == NULL) {","PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");","return 1;"],"label":0}
{"cve":"PYSEC-2021-798","code_chunks":["return Gather<int64_t, int64_t>(*params, input, positions, output);","return Gather<bool, int64_t>(*params, input, positions, output);","return GatherStrings<int64_t>(context, input, positions, output);","context->ReportError(context, \"Type '%s' is not supported by gather.\",","TfLiteTypeGetName(input->type));"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void ep4_read_bin(ep4_t a, const uint8_t *bin, int len);"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["}","if (isinstance) {","expr_ty type;","identifier name;","asdl_seq* body;",""],"label":0}
{"cve":"PYSEC-2021-287","code_chunks":["const Tensor& input_min_vec = ctx->input(kInputMinVecIndex);","float* input_min_vec_data = (float*)const_cast<void*>(","static_cast<const void*>(input_min_vec.flat<float>().data()));","const Tensor& input_max_vec = ctx->input(kInputMaxVecIndex);","float* input_max_vec_data = (float*)const_cast<void*>("],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["            len = PyList_GET_SIZE(tmp);","            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["","\/* If we're just a constant string with no expressions, return","that. *\/","if(state->expr_list.size == 0) {","if (!state->last_str) {","\/* Create a zero length string. *\/","state->last_str = PyUnicode_FromStringAndSize(NULL, 0);"],"label":1}
{"cve":"PYSEC-2020-326","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);","const TfLiteTensor* input = GetInput(context, node, 0);","TfLiteTensor* output_unique_tensor =","GetOutput(context, node, kOutputUniqueTensor);","TfLiteTensor* output_index_tensor ="],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void bn_rec_rtnaf(int8_t *tnaf, size_t *len, const bn_t k, int8_t u, size_t m,","size_t w) {","int i, l;","bn_t tmp, r0, r1;","int8_t beta[64], gama[64];"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["","OpData* data = reinterpret_cast<OpData*>(node->user_data);","","const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);","const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"],"label":1}
{"cve":"CVE-2020-36177","code_chunks":["}","}","#else","s = m = pkcsBlock;","XMEMSET(m, 0, RSA_PSS_PAD_SZ);","m += RSA_PSS_PAD_SZ;","XMEMCPY(m, input, inputLen);"],"label":1}
{"cve":"CVE-2022-36019","code_chunks":["","      float minimum = given_y_min_, maximum = given_y_max_;","      if (!output_range_given_) {","        MinAndMax(reinterpret_cast<const uint8_t*>(input_tensor.data()), H * W,","                  C, float_mean.data(), float_variance.data(),","                  variance_epsilon_, &minimum, &maximum);","      }"],"label":0}
{"cve":"CVE-2021-29594","code_chunks":["  }","","  switch (kernel_type) {","    case kCblasOptimized: {","            ConvParams op_params;","      op_params.padding_type = PaddingType::kSame;","      op_params.padding_values.width = data->padding.width;"],"label":0}
{"cve":"CVE-2018-5809","code_chunks":["          imgdata.lens.makernotes.LensMount = LIBRAW_MOUNT_Sigma_X3F;","          strcpy(imgdata.lens.makernotes.Adapter, \"MC-11\");","        }","","      else if ((imgdata.lens.makernotes.LensID > 0xEF00) &&","          (imgdata.lens.makernotes.LensID < 0xFFFF)      &&","          (imgdata.lens.makernotes.LensID != 0xFF00))"],"label":0}
{"cve":"CVE-2019-13311","code_chunks":["if ( (((_process_flags & ProcessInterpretProperities) != 0 )","|| ((_option_type & AlwaysInterpretArgsFlag) != 0)",")  && ((_option_type & NeverInterpretArgsFlag) == 0) ) {","\/* Interpret Percent escapes in argument 1 *\/","if (arg1n != (char *) NULL) {","arg1=InterpretImageProperties(_image_info,_images,arg1n,_exception);"],"label":1}
{"cve":"PYSEC-2019-131","code_chunks":["}","","mod_ty","Ta3AST_FromNode(const node *n, PyCompilerFlags *flags, const char *filename_str,","                int feature_version, PyArena *arena)","{","    mod_ty mod;"],"label":0}
{"cve":"CVE-2018-14362","code_chunks":["    {","      mutt_error(\"%s\", pop_data->err_msg);","      return -1;","    }","  }","}",""],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["const int batch_size = SizeOfDimension(input, 0);","int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>(","GetTemporary(context, node, data->input_quantized_index));","float* scaling_factors_ptr = GetTensorData<float>(","GetTemporary(context, node, data->scaling_factors_index));"],"label":1}
{"cve":"CVE-2018-18585","code_chunks":["struct mschmd_file *fi, *link = NULL;","off_t offset, length;","int num_entries;","","\/* initialise pointers *\/","chm->files         = NULL;","chm->sysfiles      = NULL;"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  for (int i = 0; i < node->outputs->size; ++i) {","    TfLiteTensor* output;","    TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &output));","    if (IsDynamicTensor(output)) {","      has_dynamic_output_tensors = true;","      break;","    }"],"label":0}
{"cve":"CVE-2023-52426","code_chunks":["const char *next = start; \/* XmlContentTok doesn't always set the last arg *\/","int tok = XmlContentTok(parser->m_encoding, start, end, &next);","switch (tok) {","#if defined(XML_DTD) || XML_GE == 1","if (! accountingDiffTolerated(parser, tok, start, next, __LINE__,","XML_ACCOUNT_DIRECT)) {","accountingOnAbort(parser);"],"label":0}
{"cve":"CVE-2018-20178","code_chunks":["\t\t\t\tcollen = (code >> 4) & 0xf;","\t\t\t\trevcode = (replen << 4) | collen;","\t\t\t\tif ((revcode <= 47) && (revcode >= 16))","\t\t\t\t{","\t\t\t\t\treplen = revcode;","\t\t\t\t\tcollen = 0;","\t\t\t\t}"],"label":0}
{"cve":"CVE-2021-40565","code_chunks":["ret = 1;","break;","}","assert(avc->s_info.sps);","","if (avc->s_info.sps->poc_type == n_state.sps->poc_type) {","if (!avc->s_info.sps->poc_type) {"],"label":1}
{"cve":"CVE-2023-28101","code_chunks":["GError        **error)","{","if (!flatpak_validate_path_characters (path, error))","return FALSE;","","g_hash_table_insert (context->persistent, g_strdup (path), GINT_TO_POINTER (1));"],"label":0}
{"cve":"CVE-2021-39191","code_chunks":["\tif ((jwt->header.alg == NULL) || (strcmp(jwt->header.alg, \"none\") == 0)) {","\t\toidc_error(r, \"logout token is not signed\");","\t\tgoto out;","\t}","","\tprovider = oidc_get_provider_for_issuer(r, cfg, jwt->payload.iss, FALSE);","\tif (provider == NULL) {"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteTensor* output;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));","TfLiteTensor* hits;","TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &hits));","const TfLiteTensor* lookup;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));"],"label":0}
{"cve":"PYSEC-2021-216","code_chunks":["for (int index = out_start; index < out_end; ++index) {","int input_backprop_index = out_arg_max_flat(index);","FastBoundsCheck(input_backprop_index - in_start, in_end - in_start);","input_backprop_flat(input_backprop_index) += out_backprop_flat(index);","}","}","};"],"label":1}
{"cve":"PYSEC-2021-451","code_chunks":["","TensorShape output_shape;","OP_REQUIRES_OK(context, TensorShapeUtils::MakeShape(","input_shape_t.data() + 1,","input_shape->NumElements() - 1, &output_shape));","","std::unordered_set<int64> visited;"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2018-20786","code_chunks":["goto failed;","++term->tl_job->jv_refcount;","","\/* behave like the job is already finished *\/","term->tl_job->jv_status = JOB_FINISHED;",""],"label":1}
{"cve":"CVE-2018-20179","code_chunks":["\t\t\telse","\t\t\t\tlogger(Core, Error, \"cssp_connect(), negotiation failed\");","","\t\t\tcssp_gss_report_error(GSS_C_GSS_CODE, \"cssp_connect(), negotiation failed.\",","\t\t\t\t\t      major_status, minor_status);","\t\t\tgoto bail_out;","\t\t}"],"label":0}
{"cve":"CVE-2019-13218","code_chunks":["   return data_len;","}","#endif ","int stb_vorbis_decode_memory(const uint8 *mem, int len, int *channels, int *sample_rate, short **output)","{","   int data_len, offset, total, limit, error;","   short *data;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);","","const TfLiteTensor* lookup = GetInput(context, node, 0);","TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);","TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);",""],"label":1}
{"cve":"CVE-2018-8797","code_chunks":["}","","\/* Disconnect from the MCS layer *\/","void","mcs_disconnect(int reason)","{","\tmcs_send_dpu(reason);"],"label":0}
{"cve":"CVE-2019-19274","code_chunks":["}","if (tok->altwarning) {","#ifdef PGEN","PySys_WriteStderr(\"inconsistent use of tabs and spaces \"","\"in indentation\\n\");","#else"],"label":1}
{"cve":"CVE-2023-0817","code_chunks":["u32 idx = gf_bs_read_int(ctx->bs, 5);","if (idx==0x1f)","sr = gf_bs_read_int(ctx->bs, 24);","else if (sr < nb_usac_sr) {","sr = USACSampleRates[idx];","}","ctx->nb_unknown_pck = 0;"],"label":1}
{"cve":"CVE-2018-6767","code_chunks":["","if (!DoWriteFile (outfile, &riffhdr, sizeof (riffhdr), &bcount) || bcount != sizeof (riffhdr) ||","(do_rf64 && (!DoWriteFile (outfile, &ds64hdr, sizeof (ds64hdr), &bcount) || bcount != sizeof (ds64hdr))) ||","(do_rf64 && (!DoWriteFile (outfile, &ds64_chunk, sizeof (ds64_chunk), &bcount) || bcount != sizeof (ds64_chunk))) ||"],"label":1}
{"cve":"CVE-2021-31262","code_chunks":["av1->emul_esd->decoderConfig->avgBitrate = btrt->avgBitrate;","av1->emul_esd->decoderConfig->maxBitrate = btrt->maxBitrate;","}","if (av1->av1_config) {","GF_AV1Config *av1_cfg = AV1_DuplicateConfig(av1->av1_config->config);","if (av1_cfg) {","gf_odf_av1_cfg_write(av1_cfg, &av1->emul_esd->decoderConfig->decoderSpecificInfo->data, &av1->emul_esd->decoderConfig->decoderSpecificInfo->dataLength);"],"label":1}
{"cve":"CVE-2016-10250","code_chunks":["}","boxinfo = jp2_boxinfolookup(box->type);","box->info = boxinfo;","box->ops = &boxinfo->ops;","box->len = len;","JAS_DBGLOG(10, (","\"preliminary processing of JP2 box: type=%c%s%c (0x%08x); length=%d\\n\","],"label":1}
{"cve":"CVE-2020-25427","code_chunks":["uuid_type = 0;","size = (u64) gf_bs_read_u32(bs);","hdr_size = 4;","\/*fix for some boxes found in some old hinted files*\/","if ((size >= 2) && (size <= 4)) {","size = 4;"],"label":1}
{"cve":"CVE-2022-35972","code_chunks":["                            {-(1 << 23), 0, (1 << 23)});","  AddInputFromArray<float>(TensorShape({}), {-256.0f});","  AddInputFromArray<float>(TensorShape({}), {256.0f});","  AddInputFromArray<float>(TensorShape({}), {-1.0f});","  AddInputFromArray<float>(TensorShape({}), {1.0f});","  TF_ASSERT_OK(RunOpKernel());","  Tensor expected(allocator(), DT_QUINT8, TensorShape({value_count}));"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["out = Append(out, arg.value.Piece());"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["fb_mul(t[i], t[i - 1], r);","}","","fb_set_dig(r, 1);","l = RLC_FB_BITS + 1;","bn_rec_slw(win, &l, b, FB_WIDTH);"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["GetTemporary(context, node, kInputQuantized);","input_quantized->type = input_to_output_weights->type;","input_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"],"label":1}
{"cve":"CVE-2023-44488","code_chunks":["new_mi_size = cm->mi_stride * calc_mi_size(cm->mi_rows);","if (cm->mi_alloc_size < new_mi_size) {","cm->free_mi(cm);","if (cm->alloc_mi(cm, new_mi_size)) goto fail;","}",""],"label":1}
{"cve":"CVE-2022-29203","code_chunks":["","  const int block_dims = orig_block_shape.dim_size(0);","  if (orig_input_tensor.dims() < 1 + block_dims) {","    return errors::InvalidArgument(\"input rank should be >= \", 1 + block_dims,","                                   \" instead of \", orig_input_tensor.dims());","  }",""],"label":0}
{"cve":"CVE-2021-32495","code_chunks":["}","","if (flag && ref_idx) {","free_object (ref_idx->data);","ref_idx->data = copy_object (ret);","}","return ret;"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {","  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  TfLiteTensor* output;","  TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2016-10060","code_chunks":["","  \/* For specific OS command line requirements *\/","  ReadCommandlLine(argc,&argv);","","  \/* Initialize special \"CLI Wand\" to hold images and settings (empty) *\/","  cli_wand=AcquireMagickCLI(image_info,exception);","  cli_wand->location=\"Initializing\";"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["                       input_for_channel, &spectrogram_output));","    TF_LITE_ENSURE_EQ(context, spectrogram_output.size(),","                      params->output_height);","    TF_LITE_ENSURE(context, spectrogram_output.empty() ||","                                (spectrogram_output[0].size() == output_width));","    for (int row_index = 0; row_index < params->output_height; ++row_index) {","      const std::vector<float>& spectrogram_row = spectrogram_output[row_index];"],"label":0}
{"cve":"CVE-2019-1010315","code_chunks":["","chansSpecified = (int)(dff_chunk_header.ckDataSize - sizeof (numChannels)) \/ 4;","","if (numChannels < chansSpecified || numChannels < 1) {","error_line (\"%s is not a valid .DFF file!\", infilename);","free (prop_chunk);","return WAVPACK_SOFT_ERROR;"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["auto* params =","reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);","","const TfLiteTensor* input = GetInput(context, node, kInputTensor);"],"label":1}
{"cve":"CVE-2018-20763","code_chunks":["for (i=0; i<len; i++) {","if (!unicode_type && (szLine[i] & 0x80)) {","\/*non UTF8 (likely some win-CP)*\/","if ((szLine[i+1] & 0xc0) != 0x80) {","szLineConv[j] = 0xc0 | ( (szLine[i] >> 6) & 0x3 );"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["                if (len != PyList_GET_SIZE(tmp)) {","                    PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");","                    goto failed;","                }","                asdl_seq_SET(values, i, val);","            }","            Py_CLEAR(tmp);"],"label":0}
{"cve":"CVE-2022-1199","code_chunks":["goto einval_put;","ax25->n2count = 0;","ax25->n2 = ax25_ctl.arg;","break;","","if (ax25_ctl.arg > ULONG_MAX \/ HZ)"],"label":1}
{"cve":"CVE-2020-9434","code_chunks":["if (lua_isstring(L, 2))","{","const char *ip_asc = lua_tostring(L, 2);","lua_pushboolean(L, X509_check_ip_asc(cert, ip_asc, 0));","}","else"],"label":1}
{"cve":"CVE-2023-51698","code_chunks":["comics_document_init (ComicsDocument *comics_document)","{","comics_document->archive = ev_archive_new ();","}","","static GdkPixbuf *"],"label":0}
{"cve":"CVE-2019-19275","code_chunks":["*out = NULL;","return 0;","}","if (_PyObject_LookupAttrId(obj, &PyId_lineno, &tmp) < 0) {","return 1;","}"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["cell_state_quantized->type = input_to_output_weights->type;","cell_state_quantized->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqual(cell_state_quantized->dims, cell_state->dims)) {"],"label":1}
{"cve":"CVE-2020-15211","code_chunks":["  auto* op_data = reinterpret_cast<OpData*>(node->user_data);","  const TfLiteTensor* input;","  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","  const TfLiteTensor* input_weights;","  TF_LITE_ENSURE_OK(","      context, GetInputSafe(context, node, kWeightsTensor, &input_weights));","  const TfLiteTensor* recurrent_weights;"],"label":0}
{"cve":"CVE-2018-19044","code_chunks":["\t\t\t\tfflush(log_file);","\t\t}","\t}","","\tif (!__test_bit(NO_SYSLOG_BIT, &debug))","#if HAVE_VSYSLOG","\t\tvsyslog(facility, format, args);"],"label":0}
{"cve":"CVE-2022-1244","code_chunks":["if (deps && !deps[j]) {","continue;","}","ut64 pa = va2pa (img[j].address, hdr->mappingCount, &cache->maps[maps_index], cache->buf, 0, NULL, NULL);","if (pa == UT64_MAX) {","continue;","}"],"label":1}
{"cve":"CVE-2019-19274","code_chunks":["            values = _Ta3_asdl_seq_new(len, arena);","            if (values == NULL) goto failed;","            for (i = 0; i < len; i++) {","                expr_ty val;","                res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);","                if (res != 0) goto failed;","                if (len != PyList_GET_SIZE(tmp)) {"],"label":0}
{"cve":"PYSEC-2019-130","code_chunks":["res = obj2ast_expr(tmp, &target, arena);","if (res != 0) goto failed;","Py_CLEAR(tmp);","}","if (_PyObject_LookupAttrId(obj, &PyId_value, &tmp) < 0) {","return 1;"],"label":1}
{"cve":"CVE-2020-1916","code_chunks":["switch (m_kind) {","for (auto& it : *m_staticCache) {","folly::writeFull(file.fd(), it.first->data(), it.first->size());","folly::writeFull(file.fd(), \"\\n\", 1);","}","break;"],"label":0}
{"cve":"CVE-2017-1000251","code_chunks":["","\/* Complete config. *\/","len = l2cap_parse_conf_req(sk, rsp);","if (len < 0)","goto unlock;","","l2cap_send_cmd(conn, cmd->ident, L2CAP_CONF_RSP, len, rsp);"],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["scaling_factors->type = kTfLiteFloat32;","scaling_factors->allocation_type = kTfLiteArenaRw;","int scaling_dims[1] = {batch_size};"],"label":1}
{"cve":"CVE-2018-16393","code_chunks":["","\/* save EF_C_DevAut for further use *\/","ptr = realloc(priv->EF_C_DevAut, len);","if (ptr) {","memcpy(ptr, efbin, len);","priv->EF_C_DevAut = ptr;"],"label":1}
{"cve":"CVE-2023-46853","code_chunks":["                    }","                    P_DEBUG(\"%s: setting meta flag: %d\\n\", __func__, *cur - 65);","                    pr->t.meta.flags |= (uint64_t)1 << (*cur - 65);","                    state = 1;","                }","                break;","                if (*cur != ' ') {"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["return kTfLiteError;","}","","TfLiteTensor* output = GetOutput(context, node, kOutputTensor);","output->type = updates->type;","","if (IsConstantTensor(shape)) {"],"label":1}
{"cve":"CVE-2020-15206","code_chunks":["if (node_value.has_tensor()) {","const PartialTensorShape node_shape(node_value.tensor().tensor_shape());","if (node_shape.num_elements() < 0) {","return errors::FailedPrecondition(","\"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\",","node.op(), \"\\\") which initializes from a tensor with \","],"label":1}
{"cve":"CVE-2020-1918","code_chunks":["const String& setSize(int len) {"],"label":1}
{"cve":"CVE-2017-3731","code_chunks":["","\/* Save the AAD for later use *\/","if (arg != EVP_AEAD_TLS1_AAD_LEN)","return 0;","memcpy(EVP_CIPHER_CTX_buf_noconst(c), ptr, arg);","cctx->tls_aad_len = arg;","{"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["GetInput(context, node, kInputTensorClassPredictions);","const int num_boxes = input_box_encodings->dims->data[1];","const int num_classes = op_data->num_classes;","TF_LITE_ENSURE_EQ(context, input_class_predictions->dims->data[0],"],"label":1}
{"cve":"CVE-2022-48437","code_chunks":[],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":[],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["if (body == NULL) goto failed;","for (i = 0; i < len; i++) {","stmt_ty value;","res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {"],"label":1}
{"cve":"CVE-2021-22549","code_chunks":["sgx_params->input_size = input->MessageSize();","if (sgx_params->input_size > 0) {","sgx_params->input = untrusted_cache->Malloc(sgx_params->input_size);","if (!TrustedPrimitives::IsOutsideEnclave(sgx_params->input,","sgx_params->input_size)) {","TrustedPrimitives::BestEffortAbort("],"label":1}
{"cve":"CVE-2017-18922","code_chunks":["wsctx->readbufstart = 0;","}","goto spor;","}","","buf = wsctx->codeBufDecode;"],"label":1}
{"cve":"CVE-2018-8787","code_chunks":["rdpGdi* gdi = context->gdi;","bitmap->compressed = FALSE;","bitmap->format = gdi->dstFormat;","bitmap->length = DstWidth * DstHeight * GetBytesPerPixel(bitmap->format);","bitmap->data = (BYTE*) _aligned_malloc(bitmap->length, 16);","","if (!bitmap->data)"],"label":1}
{"cve":"CVE-2018-14879","code_chunks":["return NULL;","","if (ptr[strlen(ptr) - 1] == '\\n')","ptr[strlen(ptr) - 1] = '\\0';","","return ret;"],"label":1}
{"cve":"CVE-2017-9520","code_chunks":["\tnode = r_config_node_get (cfg, name);","\tif (node) {","\t\tif (node->flags & CN_RO) {","\t\t\teprintf (\"(error: '%s' config key is read only)\\n\", name);","\t\t\treturn node;","\t\t}","\t\toi = node->i_value;"],"label":0}
{"cve":"CVE-2020-35538","code_chunks":["start_pass_merged_upsample(j_decompress_ptr cinfo)","{","my_upsample_ptr upsample = (my_upsample_ptr)cinfo->upsample;","","\/* Mark the spare buffer empty *\/","upsample->spare_full = FALSE;"],"label":1}
{"cve":"CVE-2020-11049","code_chunks":["UINT16 colorPointerCacheSize;","UINT16 pointerCacheSize;","","if (length < 10)","return FALSE;",""],"label":1}
{"cve":"PYSEC-2020-291","code_chunks":["                         TfLiteTypeGetName(input->type));","    return kTfLiteError;","  }","","  if (seq_lengths->type != kTfLiteInt32 && seq_lengths->type != kTfLiteInt64) {","    context->ReportError(","        context, \"Seq_lengths type '%s' is not supported by reverse_sequence.\","],"label":0}
{"cve":"CVE-2023-38703","code_chunks":["","    return PJ_SUCCESS;","}","","\/*"," * This callback is called by SRTP transport when incoming rtp is received."," * Originally this is send_rtp() op."],"label":0}
{"cve":"CVE-2018-8791","code_chunks":["while (collen > 0)","{","color = CVAL(in);","*out = color;"],"label":1}
{"cve":"CVE-2016-10156","code_chunks":["fd = open(path, O_WRONLY|O_CREAT|O_CLOEXEC|O_NOCTTY,","(mode == 0 || mode == MODE_INVALID) ? 0644 : mode);","if (fd < 0)","return -errno;",""],"label":0}
{"cve":"CVE-2022-29181","code_chunks":["{","htmlParserCtxtPtr ctxt;","","Check_Type(data, T_STRING);","","if (!(int)RSTRING_LEN(data)) {"],"label":0}
{"cve":"CVE-2020-35535","code_chunks":["FORC4 cam_mul[RGGB_2_RGBG(c)] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);","TagProcessed = 1;","break;","ilm.MaxAp4MaxFocal = sgetreal(tag_type, cbuf_SR2 + tag_dataoffset);"],"label":1}
{"cve":"PYSEC-2019-130","code_chunks":["            PyErr_SetString(PyExc_TypeError, \"required field \\\"elts\\\" missing from Set\");","            return 1;","        }","        else {","            int res;","            Py_ssize_t len;","            Py_ssize_t i;"],"label":0}
{"cve":"CVE-2020-15211","code_chunks":["                    GetOutputSafe(context, node, kOutputTensorNumDetections,","                                  &num_detections));","","  const int num_boxes = input_box_encodings->dims->data[1];","  const int num_classes = op_data->num_classes;","  const int max_categories_per_anchor = op_data->max_classes_per_detection;","  const int num_classes_with_background ="],"label":0}
{"cve":"CVE-2023-42465","code_chunks":["    switch (success) {","\t    ret = true;","\t    break;","\t    if (ntries != 0)","\t\tSET(validated, FLAG_BAD_PASSWORD);","\t    log_auth_failure(ctx, validated, ntries);","\t    ret = false;"],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);","","    QuantizeMultiplierSmallerThanOneExp(","        real_output_multiplier, &data->output_multiplier, &data->output_shift);","","    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(","        context, params->activation, output, &data->output_activation_min,"],"label":0}
{"cve":"CVE-2023-36326","code_chunks":["\t\tec_mul_gen(Z, z);","\t\tec_mul(t, mpk, c);","\t\tec_add(t, t, r);","\t\tec_norm(t, t);","\t\tec_mul(t, t, h);","\t\tec_sub(Z, Z, t);","\t\tec_norm(Z, Z);"],"label":0}
{"cve":"CVE-2022-28071","code_chunks":["ut64 mov_addr = sdb_num_get (trace, query, 0);","RAnalOp *mop = r_core_anal_op (core, mov_addr, R_ANAL_OP_MASK_VAL | R_ANAL_OP_MASK_BASIC);","if (mop) {","RAnalVar *mopvar = r_anal_get_used_function_var (anal, mop->addr);","ut32 type = mop->type & R_ANAL_OP_TYPE_MASK;","if (type == R_ANAL_OP_TYPE_MOV) {"],"label":1}
{"cve":"CVE-2022-41900","code_chunks":["OP_REQUIRES_OK(context, context->GetAttr(\"seed2\", &seed2_));","if (deterministic_) {","if ((seed_ == 0) && (seed2_ == 0)) {","seed_ = random::New64();","seed2_ = random::New64();","}"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":["void md_mgf(uint8_t *key, size_t key_len, const uint8_t *in, size_t in_len) {","\tuint32_t i, j, d;","\tuint8_t *buffer = RLC_ALLOCA(uint8_t, in_len + sizeof(uint32_t));","\tuint8_t *t = RLC_ALLOCA(uint8_t, key_len + RLC_MD_LEN);","","\tif (buffer == NULL || t == NULL) {","\t\tRLC_FREE(buffer);"],"label":0}
{"cve":"CVE-2023-25658","code_chunks":["\/* static *\/ tsl::Status GpuDriver::DestroyEvent(GpuContext* context,","CUevent* event) {","if (*event == nullptr) {","return tsl::Status(tsl::error::INVALID_ARGUMENT,","\"input event cannot be null\");","}",""],"label":0}
{"cve":"CVE-2021-32785","code_chunks":["}","","\/* do a sanity check on the returned value *\/","if ((reply->str == NULL)","|| (reply->len != strlen(reply->str))) {","oidc_error(r,"],"label":1}
{"cve":"CVE-2019-19275","code_chunks":["        return NULL;","    if (PyDict_SetItemString(d, \"unaryop\", (PyObject*)unaryop_type) < 0) return","        NULL;","    if (PyDict_SetItemString(d, \"Invert\", (PyObject*)Invert_type) < 0) return","        NULL;","    if (PyDict_SetItemString(d, \"Not\", (PyObject*)Not_type) < 0) return NULL;","    if (PyDict_SetItemString(d, \"UAdd\", (PyObject*)UAdd_type) < 0) return NULL;"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["if (IsDynamicTensor(output)) {","has_dynamic_output_tensors = true;","break;","}","}",""],"label":1}
{"cve":"CVE-2022-36026","code_chunks":["OP_REQUIRES_OK(ctx, ctx->GetAttr(\"axis\", &axis_));","OP_REQUIRES_OK(ctx, ctx->GetAttr(\"num_bits\", &num_bits_));","OP_REQUIRES(ctx, num_bits_ > 0 && num_bits_ < (signed_input_ ? 62 : 63),","errors::InvalidArgument(\"num_bits is out of range: \", num_bits_,","\" with signed_input_ \", signed_input_));","OP_REQUIRES_OK(ctx, ctx->GetAttr(\"range_given\", &range_given_));"],"label":1}
{"cve":"CVE-2023-30186","code_chunks":["LOGGER_SPEED_START","","if (retValue)","retValue->Clear();","","std::string commandA = U_TO_UTF8(command);"],"label":1}
{"cve":"CVE-2022-2288","code_chunks":["size_t len = STRLEN(cmd_start);","","mch_memmove(orig_cmd, cmd_start, len);","STRCPY(orig_cmd + len, \"'<,'>+\");","}","else","{"],"label":1}
{"cve":"CVE-2017-6889","code_chunks":["  free (smrow[6]);","  for (i=0; i < 8; i++)","    free (t_curve[i]);","","  \/* Trim off the black border *\/","  if (~cropbox[2] && ~cropbox[3])","    {"],"label":0}
{"cve":"CVE-2020-15193","code_chunks":["  dlm_tensor->dl_tensor.data = tf_dlm_data;","  dlm_tensor->dl_tensor.dtype = tf_dlm_type;","","  std::vector<int64_t>* shape_arr = &tf_dlm_tensor_ctx->shape;","  std::vector<int64_t>* stride_arr = &tf_dlm_tensor_ctx->strides;","  shape_arr->resize(ndim);","  stride_arr->resize(ndim, 1);"],"label":0}
{"cve":"PYSEC-2020-291","code_chunks":["  if (IsConstantTensor(axis)) {","    int axis_value;","    TF_LITE_ENSURE_OK(context,","                      GetAxisValueFromTensor(context, *axis, &axis_value));","    return ExpandTensorDim(context, *input, axis_value, output);","  }","  SetTensorToDynamic(output);"],"label":0}
{"cve":"PYSEC-2021-275","code_chunks":["void AddBatchOffsets(Tensor* indices, const Tensor& params) {","int64_t batch_size = 1;      for (int idx = 0; idx < batch_dims_; ++idx) {","batch_size *= params.dim_size(idx);","}"],"label":1}
{"cve":"PYSEC-2022-104","code_chunks":["  return PredictDefaultNodeCosts(op_count * sum_cost, op_context,","                                 &found_unknown_shapes, node_costs);","}","","Status OpLevelCostEstimator::PredictSoftmax(const OpContext& op_context,","                                            NodeCosts* node_costs) const {","  bool found_unknown_shapes = false;"],"label":0}
{"cve":"CVE-2022-21656","code_chunks":["                exact: localhost","              san_type: URI","                exact: 127.0.0.1","              san_type: IP_ADDRESS","  quic_options: {}","  )EOF\",","                                                       Network::Address::IpVersion::v4);"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);","TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);","const TfLiteTensor* input;","TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,"],"label":0}
{"cve":"CVE-2018-13304","code_chunks":["{","if(s->avctx->hwaccel && s->avctx->hwaccel->decode_slice           ||","!s->cur_pic.f                                                  ||","s->cur_pic.field_picture                                       ||","s->avctx->profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO"],"label":1}
{"cve":"CVE-2019-11413","code_chunks":["}","}","","if (!js_regexec(re->prog, text, &m, opts)) {","if (re->flags & JS_REGEXP_G)","re->last = re->last + (m.sub[0].ep - text);","js_pushboolean(J, 1);"],"label":1}
{"cve":"PYSEC-2016-5","code_chunks":["\tTRACE((\"State: bits %d, bytes %d \\n\", state->bits, state->bytes));","\tTRACE((\"Buffer: %p: %c%c%c%c\\n\", buffer, (char)buffer[0], (char)buffer[1],(char)buffer[2], (char)buffer[3]));","\tTRACE((\"State->Buffer: %c%c%c%c\\n\", (char)state->buffer[0], (char)state->buffer[1],(char)state->buffer[2], (char)state->buffer[3]));","\tTRACE((\"Image: mode %s, type %d, bands: %d, xsize %d, ysize %d \\n\",","\t\t   im->mode, im->type, im->bands, im->xsize, im->ysize));","\tTRACE((\"Image: image8 %p, image32 %p, image %p, block %p \\n\",","\t\t   im->image8, im->image32, im->image, im->block));"],"label":0}
{"cve":"PYSEC-2020-134","code_chunks":["reinterpret_cast<TfLitePackParams*>(node->builtin_data);","","TfLiteTensor* output;","TF_LITE_ENSURE_OK(context,","GetOutputSafe(context, node, kOutputTensor, &output));","switch (output->type) {"],"label":0}
{"cve":"PYSEC-2019-131","code_chunks":["for (i = 0; i < len; i++) {","expr_ty value;","res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);","if (res != 0) goto failed;","if (len != PyList_GET_SIZE(tmp)) {","PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");"],"label":1}
{"cve":"CVE-2022-29776","code_chunks":["scanline += delta_y;","break;","}","hFile->Read((void *)(iter.GetRow(scanline) + bits), sizeof(uint8_t) * status_byte, 1);","if ((status_byte & 1) == 1)","hFile->Read(&second_byte, sizeof(uint8_t), 1);","bits += status_byte;"],"label":1}
{"cve":"CVE-2018-20181","code_chunks":["RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);"],"label":1}
{"cve":"CVE-2022-3510","code_chunks":["const char* name = upb_EnumValueDef_Name(ev);","int32_t value = upb_EnumValueDef_Number(ev);","if (name[0] < 'A' || name[0] > 'Z') {","rb_warn(","\"Enum value '%s' does not start with an uppercase letter \"","\"as is required for Ruby constants.\","],"label":1}
{"cve":"CVE-2018-8796","code_chunks":["\t\t\t\tif (!(actual_services & GSS_C_CONF_FLAG))","\t\t{","\t\t\tlogger(Core, Error,","\t\t\t       \"cssp_connect(), confidentiality service required but is not available\");","\t\t\tgoto bail_out;","\t\t}",""],"label":0}
{"cve":"CVE-2022-23570","code_chunks":["","        } else if (attr->value_case() == AttrValue::kType) {","          map_dtype_to_tensor(attr->type(), arg);","","        } else {","          return Status(error::UNIMPLEMENTED,","                        absl::StrCat(\"unknown attribute type\","],"label":0}
{"cve":"CVE-2022-4254","code_chunks":["                                  const uint8_t *der_cert, size_t der_size,","                                  char **_filter, char ***_domains)","{","    return expand_mapping_rule_ex(ctx, der_cert, der_size, true,","                                  _filter, _domains);","}",""],"label":0}
{"cve":"PYSEC-2020-326","code_chunks":["output_state_sf->type = kTfLiteFloat32;","output_state_sf->allocation_type = kTfLiteArenaRw;","if (!TfLiteIntArrayEqualsArray(output_state_sf->dims, 1, scaling_dims)) {"],"label":1}
{"cve":"CVE-2022-29201","code_chunks":["  TF_ASSERT_OK(InitOp());","","  const int depth = 1;","  const int image_width = 4;","  const int image_height = 3;","  const int image_batch_count = 1;","      const float image_min = 0.0f;"],"label":0}
{"cve":"CVE-2018-8799","code_chunks":["mcs_parse_domain_params(STREAM s)","{","int length;","","ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);","in_uint8s(s, length);"],"label":1}
{"cve":"CVE-2023-36326","code_chunks":[],"label":1}
{"cve":"CVE-2019-13045","code_chunks":["        server->nick_collision = TRUE;","}","","static void event_kill(IRC_SERVER_REC *server, const char *data,","\t\t       const char *nick, const char *addr)","{","\tif (addr != NULL && !server->nick_collision) {"],"label":0}
{"cve":"CVE-2017-9990","code_chunks":["int ncolors, cpp, ret, i, j;","int64_t size;","uint32_t *dst;","","avctx->pix_fmt = AV_PIX_FMT_BGRA;",""],"label":0}
{"cve":"CVE-2018-14680","code_chunks":["","  switch (file->section->id) {","  case 0: \/* Uncompressed section file *\/","    \/* simple seek + copy *\/","    if (sys->seek(self->d->infh, file->section->chm->sec0.offset","\t\t  + file->offset, MSPACK_SYS_SEEK_START))","    {"],"label":0}
{"cve":"CVE-2022-1587","code_chunks":["CMPTO(SLJIT_LESS, STR_PTR, 0, STR_END, 0, common->ff_newline_shortcut);","}","}","else","CMPTO(SLJIT_LESS, STR_PTR, 0, (common->match_end_ptr == 0) ? STR_END : TMP1, 0, mainloop_label);","}"],"label":1}
